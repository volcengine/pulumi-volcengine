{
    "name": "volcengine",
    "displayName": "Volcengine",
    "description": "A Pulumi package for creating and managing volcengine cloud resources.",
    "keywords": [
        "pulumi",
        "volcengine",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`volcengine` Terraform Provider](https://github.com/volcengine/terraform-provider-volcengine).",
    "repository": "https://github.com/volcengine/pulumi-volcengine",
    "logoUrl": "https://avatars.githubusercontent.com/u/67365215",
    "pluginDownloadURL": "github://api.github.com/volcengine",
    "publisher": "Volcengine",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "accessKey": {
                "type": "string",
                "description": "The Access Key for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_ACCESS_KEY"
                    ]
                }
            },
            "customerEndpoints": {
                "type": "string",
                "description": "CUSTOMER ENDPOINTS for Volcengine Provider\n"
            },
            "customerHeaders": {
                "type": "string",
                "description": "CUSTOMER HEADERS for Volcengine Provider\n"
            },
            "disableSsl": {
                "type": "boolean",
                "description": "Disable SSL for Volcengine Provider\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Customer Endpoint for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_ENDPOINT"
                    ]
                }
            },
            "proxyUrl": {
                "type": "string",
                "description": "PROXY URL for Volcengine Provider\n"
            },
            "region": {
                "type": "string",
                "description": "The Region for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Secret Key for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_SECRET_KEY"
                    ]
                }
            },
            "sessionToken": {
                "type": "string",
                "description": "The Session Token for Volcengine Provider\n"
            }
        },
        "defaults": [
            "accessKey",
            "region",
            "secretKey"
        ]
    },
    "types": {
        "volcengine:autoscaling/ScalingActivitiesActivity:ScalingActivitiesActivity": {
            "properties": {
                "activityType": {
                    "type": "string",
                    "description": "The Actual Type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "actualAdjustInstanceNumber": {
                    "type": "integer",
                    "description": "The Actual Adjustment Instance Number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cooldown": {
                    "type": "integer",
                    "description": "The Cooldown time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of Scaling Activity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "currentInstanceNumber": {
                    "type": "integer",
                    "description": "The Current Instance Number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expectedRunTime": {
                    "type": "string",
                    "description": "The expected run time of Scaling Activity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Scaling Activity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxInstanceNumber": {
                    "type": "integer",
                    "description": "The Max Instance Number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minInstanceNumber": {
                    "type": "integer",
                    "description": "The Min Instance Number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relatedInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingActivitiesActivityRelatedInstance:ScalingActivitiesActivityRelatedInstance"
                    },
                    "description": "The related instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resultMsg": {
                    "type": "string",
                    "description": "The Result of Scaling Activity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingActivityId": {
                    "type": "string",
                    "description": "The ID of Scaling Activity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "A Id of Scaling Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusCode": {
                    "type": "string",
                    "description": "A status code of Scaling Activity. Valid values: Init, Running, Success, PartialSuccess, Error, Rejected, Exception.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stoppedAt": {
                    "type": "string",
                    "description": "The stopped time of Scaling Activity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskCategory": {
                    "type": "string",
                    "description": "The task category of Scaling Activity.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "activityType",
                "actualAdjustInstanceNumber",
                "cooldown",
                "createdAt",
                "currentInstanceNumber",
                "expectedRunTime",
                "id",
                "maxInstanceNumber",
                "minInstanceNumber",
                "relatedInstances",
                "resultMsg",
                "scalingActivityId",
                "scalingGroupId",
                "statusCode",
                "stoppedAt",
                "taskCategory"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:autoscaling/ScalingActivitiesActivityRelatedInstance:ScalingActivitiesActivityRelatedInstance": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The Instance ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The message of Instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operateType": {
                    "type": "string",
                    "description": "The Operation Type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The Status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceId",
                "message",
                "operateType",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:autoscaling/ScalingConfigurationTag:ScalingConfigurationTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:autoscaling/ScalingConfigurationVolume:ScalingConfigurationVolume": {
            "properties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "The delete with instance flag of volume. Valid values: true, false. Default value: true.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of volume. System disk value range: 10 - 500. The value range of the data disk: 10 - 8192.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size",
                "volumeType"
            ]
        },
        "volcengine:autoscaling/ScalingConfigurationsScalingConfiguration:ScalingConfigurationsScalingConfiguration": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The create time of the scaling configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipBandwidth": {
                    "type": "integer",
                    "description": "The EIP bandwidth which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipBillingType": {
                    "type": "string",
                    "description": "The EIP ISP which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipIsp": {
                    "type": "string",
                    "description": "The EIP ISP which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostName": {
                    "type": "string",
                    "description": "The ECS hostname which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hpcClusterId": {
                    "type": "string",
                    "description": "The ID of the HPC cluster to which the instance belongs. Valid only when InstanceTypes.N specifies High Performance Computing GPU Type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the scaling configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The ECS image id which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceDescription": {
                    "type": "string",
                    "description": "The ECS instance description which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The ECS instance name which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the ECS instance type which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The ECS key pair name which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The lifecycle state of the scaling configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The project to which the instance created by the scaling configuration belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingConfigurationId": {
                    "type": "string",
                    "description": "The id of the scaling configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingConfigurationName": {
                    "type": "string",
                    "description": "The name of the scaling configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "An id of scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityEnhancementStrategy": {
                    "type": "string",
                    "description": "The Ecs security enhancement strategy which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the security group id of the networkInterface which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spotStrategy": {
                    "type": "string",
                    "description": "The preemption policy of the instance. Valid Value: NoSpot (default), SpotAsPriceGo.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingConfigurationsScalingConfigurationTag:ScalingConfigurationsScalingConfigurationTag"
                    },
                    "description": "The label of the instance created by the scaling configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The create time of the scaling configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userData": {
                    "type": "string",
                    "description": "The ECS user data which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingConfigurationsScalingConfigurationVolume:ScalingConfigurationsScalingConfigurationVolume"
                    },
                    "description": "The list of volume of the scaling configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "eipBandwidth",
                "eipBillingType",
                "eipIsp",
                "hostName",
                "hpcClusterId",
                "id",
                "imageId",
                "instanceDescription",
                "instanceName",
                "instanceTypes",
                "keyPairName",
                "lifecycleState",
                "projectName",
                "scalingConfigurationId",
                "scalingConfigurationName",
                "scalingGroupId",
                "securityEnhancementStrategy",
                "securityGroupIds",
                "spotStrategy",
                "tags",
                "updatedAt",
                "userData",
                "volumes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:autoscaling/ScalingConfigurationsScalingConfigurationTag:ScalingConfigurationsScalingConfigurationTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:autoscaling/ScalingConfigurationsScalingConfigurationVolume:ScalingConfigurationsScalingConfigurationVolume": {
            "properties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "The delete with instance flag of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteWithInstance",
                "size",
                "volumeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:autoscaling/ScalingGroupServerGroupAttribute:ScalingGroupServerGroupAttribute": {
            "properties": {
                "loadBalancerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request of the server group. Value range: 1 ~ 65535.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The id of the server group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the instance. Value range: 0 ~ 100.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port",
                "serverGroupId",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "loadBalancerId",
                        "port",
                        "serverGroupId",
                        "weight"
                    ]
                }
            }
        },
        "volcengine:autoscaling/ScalingGroupTag:ScalingGroupTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:autoscaling/ScalingGroupsScalingGroup:ScalingGroupsScalingGroup": {
            "properties": {
                "activeScalingConfigurationId": {
                    "type": "string",
                    "description": "The scaling configuration id which used by the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbInstanceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of db instance ids.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultCooldown": {
                    "type": "integer",
                    "description": "The default cooldown interval of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desireInstanceNumber": {
                    "type": "integer",
                    "description": "The desire instance number of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceTerminatePolicy": {
                    "type": "string",
                    "description": "The instance terminate policy of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "launchTemplateId": {
                    "type": "string",
                    "description": "The ID of the launch template bound to the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "launchTemplateVersion": {
                    "type": "string",
                    "description": "The version of the launch template bound to the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The lifecycle state of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxInstanceNumber": {
                    "type": "integer",
                    "description": "The max instance number of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minInstanceNumber": {
                    "type": "integer",
                    "description": "The min instance number of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "multiAzPolicy": {
                    "type": "string",
                    "description": "The multi az policy of the scaling group. Valid values: PRIORITY, BALANCE.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingGroupName": {
                    "type": "string",
                    "description": "The name of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingGroupsScalingGroupServerGroupAttribute:ScalingGroupsScalingGroupServerGroupAttribute"
                    },
                    "description": "The list of server group attributes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the subnet id to which the ENI is connected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingGroupsScalingGroupTag:ScalingGroupsScalingGroupTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalInstanceCount": {
                    "type": "integer",
                    "description": "The total instance count of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The create time of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC id of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "activeScalingConfigurationId",
                "createdAt",
                "dbInstanceIds",
                "defaultCooldown",
                "desireInstanceNumber",
                "id",
                "instanceTerminatePolicy",
                "launchTemplateId",
                "launchTemplateVersion",
                "lifecycleState",
                "maxInstanceNumber",
                "minInstanceNumber",
                "multiAzPolicy",
                "projectName",
                "scalingGroupId",
                "scalingGroupName",
                "serverGroupAttributes",
                "subnetIds",
                "tags",
                "totalInstanceCount",
                "updatedAt",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:autoscaling/ScalingGroupsScalingGroupServerGroupAttribute:ScalingGroupsScalingGroupServerGroupAttribute": {
            "properties": {
                "loadBalancerId": {
                    "type": "string",
                    "description": "The load balancer id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request of the server group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The server group id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "loadBalancerId",
                "port",
                "serverGroupId",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:autoscaling/ScalingGroupsScalingGroupTag:ScalingGroupsScalingGroupTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:autoscaling/ScalingInstancesScalingInstance:ScalingInstancesScalingInstance": {
            "properties": {
                "createdTime": {
                    "type": "string",
                    "description": "The time when the instance was added to the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationType": {
                    "type": "string",
                    "description": "The creation type of the instances. Valid values: AutoCreated, Attached.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "entrusted": {
                    "type": "boolean",
                    "description": "Whether to host the instance to a scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the scaling instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the scaling instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingConfigurationId": {
                    "type": "string",
                    "description": "The id of the scaling configuration id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingPolicyId": {
                    "type": "string",
                    "description": "The id of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of instances. Valid values: Init, Pending, Pending:Wait, InService, Error, Removing, Removing:Wait, Stopped, Protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "creationType",
                "entrusted",
                "id",
                "instanceId",
                "scalingConfigurationId",
                "scalingGroupId",
                "scalingPolicyId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:autoscaling/ScalingLifecycleHooksLifecycleHook:ScalingLifecycleHooksLifecycleHook": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the lifecycle hook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifecycleHookId": {
                    "type": "string",
                    "description": "The id of the lifecycle hook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifecycleHookName": {
                    "type": "string",
                    "description": "The name of the lifecycle hook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifecycleHookPolicy": {
                    "type": "string",
                    "description": "The policy of the lifecycle hook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifecycleHookTimeout": {
                    "type": "integer",
                    "description": "The timeout of the lifecycle hook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lifecycleHookType": {
                    "type": "string",
                    "description": "The type of the lifecycle hook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "An id of scaling group id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "lifecycleHookId",
                "lifecycleHookName",
                "lifecycleHookPolicy",
                "lifecycleHookTimeout",
                "lifecycleHookType",
                "scalingGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:autoscaling/ScalingPoliciesScalingPolicy:ScalingPoliciesScalingPolicy": {
            "properties": {
                "adjustmentType": {
                    "type": "string",
                    "description": "The adjustment type of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adjustmentValue": {
                    "type": "integer",
                    "description": "The adjustment value of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmPolicyConditionComparisonOperator": {
                    "type": "string",
                    "description": "The comparison operator of the alarm policy condition of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmPolicyConditionMetricName": {
                    "type": "string",
                    "description": "The metric name of the alarm policy condition of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmPolicyConditionMetricUnit": {
                    "type": "string",
                    "description": "The comparison operator of the alarm policy condition of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmPolicyConditionThreshold": {
                    "type": "string",
                    "description": "The threshold of the alarm policy condition of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmPolicyEvaluationCount": {
                    "type": "integer",
                    "description": "The evaluation count of the alarm policy of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmPolicyRuleType": {
                    "type": "string",
                    "description": "The rule type of the alarm policy of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cooldown": {
                    "type": "integer",
                    "description": "The cooldown of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "An id of the scaling group to which the scaling policy belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingPolicyId": {
                    "type": "string",
                    "description": "The id of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingPolicyName": {
                    "type": "string",
                    "description": "The name of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scalingPolicyType": {
                    "type": "string",
                    "description": "A type of scaling policy. Valid values: Scheduled, Recurrence, Manual, Alarm.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduledPolicyLaunchTime": {
                    "type": "string",
                    "description": "The launch time of the scheduled policy of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduledPolicyRecurrenceEndTime": {
                    "type": "string",
                    "description": "The recurrence end time of the scheduled policy of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduledPolicyRecurrenceStartTime": {
                    "type": "string",
                    "description": "The recurrence start time of the scheduled policy of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduledPolicyRecurrenceType": {
                    "type": "string",
                    "description": "The recurrence type of the scheduled policy of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduledPolicyRecurrenceValue": {
                    "type": "string",
                    "description": "The recurrence value of the scheduled policy of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the scaling policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adjustmentType",
                "adjustmentValue",
                "alarmPolicyConditionComparisonOperator",
                "alarmPolicyConditionMetricName",
                "alarmPolicyConditionMetricUnit",
                "alarmPolicyConditionThreshold",
                "alarmPolicyEvaluationCount",
                "alarmPolicyRuleType",
                "cooldown",
                "id",
                "scalingGroupId",
                "scalingPolicyId",
                "scalingPolicyName",
                "scalingPolicyType",
                "scheduledPolicyLaunchTime",
                "scheduledPolicyRecurrenceEndTime",
                "scheduledPolicyRecurrenceStartTime",
                "scheduledPolicyRecurrenceType",
                "scheduledPolicyRecurrenceValue",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:bioos/ClusterSharedConfig:ClusterSharedConfig": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Whether to enable a shared cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "enable"
            ]
        },
        "volcengine:bioos/ClusterVkeConfig:ClusterVkeConfig": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The id of the vke cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "storageClass": {
                    "type": "string",
                    "description": "The name of the StorageClass that the vke cluster has installed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "storageClass"
            ]
        },
        "volcengine:bioos/ClustersItem:ClustersItem": {
            "properties": {
                "bound": {
                    "type": "boolean",
                    "description": "Whether there is a bound workspace.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the bioos cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "public": {
                    "type": "boolean",
                    "description": "whether it is a public cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "integer",
                    "description": "The start time of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stoppedTime": {
                    "type": "integer",
                    "description": "The end time of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vkeConfigId": {
                    "type": "string",
                    "description": "The id of the vke cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vkeConfigStorageClass": {
                    "type": "string",
                    "description": "The name of the StorageClass that the vke cluster has installed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bound",
                "description",
                "id",
                "name",
                "public",
                "startTime",
                "stoppedTime",
                "vkeConfigId",
                "vkeConfigStorageClass"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:bioos/WorkspacesItem:WorkspacesItem": {
            "properties": {
                "coverDownloadUrl": {
                    "type": "string",
                    "description": "The URL of the cover.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "integer",
                    "description": "The creation time of the workspace.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workspace.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the workspace.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workspace.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ownerName": {
                    "type": "string",
                    "description": "The name of the owner of the workspace.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "The role of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3Bucket": {
                    "type": "string",
                    "description": "S3 bucket address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "integer",
                    "description": "The update time of the workspace.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "coverDownloadUrl",
                "createTime",
                "description",
                "id",
                "name",
                "ownerName",
                "role",
                "s3Bucket",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cen/AttachInstancesAttachInstance:AttachInstancesAttachInstance": {
            "properties": {
                "cenId": {
                    "type": "string",
                    "description": "A cen ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the cen attaching instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "An instance ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceOwnerId": {
                    "type": "string",
                    "description": "The owner ID of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceRegionId": {
                    "type": "string",
                    "description": "A region id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "An instance type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen attaching instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cenId",
                "creationTime",
                "instanceId",
                "instanceOwnerId",
                "instanceRegionId",
                "instanceType",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cen/BandwidthPackageTag:BandwidthPackageTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:cen/BandwidthPackagesBandwidthPackage:BandwidthPackagesBandwidthPackage": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "The bandwidth of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "businessStatus": {
                    "type": "string",
                    "description": "The business status of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenBandwidthPackageId": {
                    "type": "string",
                    "description": "The ID of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenBandwidthPackageName": {
                    "type": "string",
                    "description": "The name of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The cen IDs of the bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The deleted time of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "description": "The expired time of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localGeographicRegionSetId": {
                    "type": "string",
                    "description": "A local geographic region set id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerGeographicRegionSetId": {
                    "type": "string",
                    "description": "A peer geographic region set id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remainingBandwidth": {
                    "type": "integer",
                    "description": "The remain bandwidth of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cen/BandwidthPackagesBandwidthPackageTag:BandwidthPackagesBandwidthPackageTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the cen bandwidth package.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "bandwidth",
                "billingType",
                "businessStatus",
                "cenBandwidthPackageId",
                "cenBandwidthPackageName",
                "cenIds",
                "creationTime",
                "deletedTime",
                "description",
                "expiredTime",
                "id",
                "localGeographicRegionSetId",
                "peerGeographicRegionSetId",
                "projectName",
                "remainingBandwidth",
                "status",
                "tags",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cen/BandwidthPackagesBandwidthPackageTag:BandwidthPackagesBandwidthPackageTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cen/BandwidthPackagesTag:BandwidthPackagesTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:cen/CenTag:CenTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:cen/CensCen:CensCen": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the cen.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenBandwidthPackageIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of bandwidth package IDs of the cen.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenId": {
                    "type": "string",
                    "description": "The ID of the cen.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenName": {
                    "type": "string",
                    "description": "The name of the cen.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the cen.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cen.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the cen.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the cen instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cen/CensCenTag:CensCenTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the cen.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "cenBandwidthPackageIds",
                "cenId",
                "cenName",
                "creationTime",
                "description",
                "id",
                "projectName",
                "status",
                "tags",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cen/CensCenTag:CensCenTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cen/CensTag:CensTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:cen/InterRegionBandwidthsInterRegionBandwidth:InterRegionBandwidthsInterRegionBandwidth": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The bandwidth of the cen inter region bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenId": {
                    "type": "string",
                    "description": "The cen ID of the cen inter region bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the cen inter region bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the cen inter region bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interRegionBandwidthId": {
                    "type": "string",
                    "description": "The ID of the cen inter region bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localRegionId": {
                    "type": "string",
                    "description": "The local region id of the cen inter region bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerRegionId": {
                    "type": "string",
                    "description": "The peer region id of the cen inter region bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen inter region bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the cen inter region bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bandwidth",
                "cenId",
                "creationTime",
                "id",
                "interRegionBandwidthId",
                "localRegionId",
                "peerRegionId",
                "status",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cen/RouteEntriesCenRouteEntry:RouteEntriesCenRouteEntry": {
            "properties": {
                "asPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AS path of the cen route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenId": {
                    "type": "string",
                    "description": "A cen ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "A destination cidr block.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "An instance ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceRegionId": {
                    "type": "string",
                    "description": "An instance region ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "An instance type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishStatus": {
                    "type": "string",
                    "description": "The publish status of the cen route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "asPaths",
                "cenId",
                "destinationCidrBlock",
                "instanceId",
                "instanceRegionId",
                "instanceType",
                "publishStatus",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cen/ServiceRouteEntriesServiceRouteEntry:ServiceRouteEntriesServiceRouteEntry": {
            "properties": {
                "cenId": {
                    "type": "string",
                    "description": "A cen ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the cen service route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cen service route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "A destination cidr block.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishMode": {
                    "type": "string",
                    "description": "Publishing scope of cloud service access routes. Valid values are `LocalDCGW`(default), `Custom`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishToInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cen/ServiceRouteEntriesServiceRouteEntryPublishToInstance:ServiceRouteEntriesServiceRouteEntryPublishToInstance"
                    },
                    "description": "The publish instances. A maximum of 100 can be uploaded in one request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceRegionId": {
                    "type": "string",
                    "description": "A service region id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceVpcId": {
                    "type": "string",
                    "description": "A service VPC id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen service route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cenId",
                "creationTime",
                "description",
                "destinationCidrBlock",
                "publishMode",
                "publishToInstances",
                "serviceRegionId",
                "serviceVpcId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cen/ServiceRouteEntriesServiceRouteEntryPublishToInstance:ServiceRouteEntriesServiceRouteEntryPublishToInstance": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "Cloud service access routes need to publish the network instance ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceRegionId": {
                    "type": "string",
                    "description": "The region where the cloud service access route needs to be published.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The network instance type that needs to be published for cloud service access routes. The values are as follows: `VPC`, `DCGW`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceId",
                "instanceRegionId",
                "instanceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cen/ServiceRouteEntryPublishToInstance:ServiceRouteEntryPublishToInstance": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "Cloud service access routes need to publish the network instance ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceRegionId": {
                    "type": "string",
                    "description": "The region where the cloud service access route needs to be published.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The network instance type that needs to be published for cloud service access routes. The values are as follows: `VPC`, `DCGW`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:clb/AclAclEntry:AclAclEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the AclEntry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "entry": {
                    "type": "string",
                    "description": "The content of the AclEntry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entry"
            ]
        },
        "volcengine:clb/AclsAcl:AclsAcl": {
            "properties": {
                "aclEntryCount": {
                    "type": "integer",
                    "description": "The count of acl entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclId": {
                    "type": "string",
                    "description": "The ID of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclName": {
                    "type": "string",
                    "description": "The name of acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "Creation time of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The listeners of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "Update time of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aclEntryCount",
                "aclId",
                "aclName",
                "createTime",
                "description",
                "id",
                "listeners",
                "projectName",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/CertificateTag:CertificateTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:clb/CertificatesCertificate:CertificatesCertificate": {
            "properties": {
                "certificateId": {
                    "type": "string",
                    "description": "The ID of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateName": {
                    "type": "string",
                    "description": "The name of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "description": "The domain name of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredAt": {
                    "type": "string",
                    "description": "The expire time of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID list of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:clb/CertificatesCertificateTag:CertificatesCertificateTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateId",
                "certificateName",
                "createTime",
                "description",
                "domainName",
                "expiredAt",
                "id",
                "listeners",
                "projectName",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/CertificatesCertificateTag:CertificatesCertificateTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/CertificatesTag:CertificatesTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:clb/ClbEipBillingConfig:ClbEipBillingConfig": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The peek bandwidth of the EIP which automatically assigned to CLB. The value range in 1~500 for PostPaidByBandwidth, and 1~200 for PostPaidByTraffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipBillingType": {
                    "type": "string",
                    "description": "The billing type of the EIP which automatically assigned to CLB. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic` or `PrePaid`.When creating a `PrePaid` public CLB, this field must be specified as `PrePaid` simultaneously.When the LoadBalancerBillingType changes from `PostPaid` to `PrePaid`, please manually modify the value of this field to `PrePaid` simultaneously.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "isp": {
                    "type": "string",
                    "description": "The ISP of the EIP which automatically associated to CLB, the value can be `BGP`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "eipBillingType",
                "isp"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bandwidth",
                        "eipBillingType",
                        "isp"
                    ]
                }
            }
        },
        "volcengine:clb/ClbTag:ClbTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:clb/ClbsClb:ClbsClb": {
            "properties": {
                "businessStatus": {
                    "type": "string",
                    "description": "The business status of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The expected recycle time of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAddress": {
                    "type": "string",
                    "description": "The Eip address of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipBillingConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:clb/ClbsClbEipBillingConfig:ClbsClbEipBillingConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipId": {
                    "type": "string",
                    "description": "The Eip ID of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eniAddress": {
                    "type": "string",
                    "description": "The private ip address of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eniId": {
                    "type": "string",
                    "description": "The Eni ID of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "description": "The expired time of the CLB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceStatus": {
                    "type": "integer",
                    "description": "The billing status of the CLB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerBillingType": {
                    "type": "string",
                    "description": "The billing type of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The name of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerSpec": {
                    "type": "string",
                    "description": "The specifications of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lockReason": {
                    "type": "string",
                    "description": "The reason why Clb is locked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterZoneId": {
                    "type": "string",
                    "description": "The master zone ID of the CLB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modificationProtectionReason": {
                    "type": "string",
                    "description": "The modification protection reason of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modificationProtectionStatus": {
                    "type": "string",
                    "description": "The modification protection status of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueReclaimTime": {
                    "type": "string",
                    "description": "The over reclaim time of the CLB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "The overdue time of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reclaimTime": {
                    "type": "string",
                    "description": "The reclaim time of the CLB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remainRenewTimes": {
                    "type": "integer",
                    "description": "The remain renew times of the CLB. When the value of the renew_type is `AutoRenew`, the query returns this field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "renewPeriodTimes": {
                    "type": "integer",
                    "description": "The renew period times of the CLB. When the value of the renew_type is `AutoRenew`, the query returns this field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "renewType": {
                    "type": "string",
                    "description": "The renew type of the CLB. When the value of the load_balancer_billing_type is `PrePaid`, the query returns this field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slaveZoneId": {
                    "type": "string",
                    "description": "The slave zone ID of the CLB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:clb/ClbsClbTag:ClbsClbTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "businessStatus",
                "createTime",
                "deletedTime",
                "description",
                "eipAddress",
                "eipBillingConfigs",
                "eipId",
                "eniAddress",
                "eniId",
                "expiredTime",
                "id",
                "instanceStatus",
                "loadBalancerBillingType",
                "loadBalancerId",
                "loadBalancerName",
                "loadBalancerSpec",
                "lockReason",
                "masterZoneId",
                "modificationProtectionReason",
                "modificationProtectionStatus",
                "overdueReclaimTime",
                "overdueTime",
                "projectName",
                "reclaimTime",
                "remainRenewTimes",
                "renewPeriodTimes",
                "renewType",
                "slaveZoneId",
                "status",
                "subnetId",
                "tags",
                "type",
                "updateTime",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/ClbsClbEipBillingConfig:ClbsClbEipBillingConfig": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipBillingType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bandwidth",
                "eipBillingType",
                "isp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/ClbsClbTag:ClbsClbTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/ClbsTag:ClbsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:clb/ListenerHealthCheck:ListenerHealthCheck": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "string",
                    "description": "The enable status of health check function. Optional choice contains `on`, `off`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthyThreshold": {
                    "type": "integer",
                    "description": "The healthy threshold of health check, default 3, range in 2~10.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpCode": {
                    "type": "string",
                    "description": "The normal http status code of health check, the value can be `http_2xx` or `http_3xx` or `http_4xx` or `http_5xx`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "description": "The interval executing health check, default 2, range in 1~300.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The method of health check, the value can be `GET` or `HEAD`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "The response timeout of health check, default 2, range in 1~60..\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpExpect": {
                    "type": "string",
                    "description": "The UDP expect of health check. This field must be specified simultaneously with field `udp_request`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "udpRequest": {
                    "type": "string",
                    "description": "The UDP request of health check. This field must be specified simultaneously with field `udp_expect`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unHealthyThreshold": {
                    "type": "integer",
                    "description": "The unhealthy threshold of health check, default 3, range in 2~10.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The uri of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:clb/ListenersListener:ListenersListener": {
            "properties": {
                "aclIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The acl ID list to which the Listener is bound.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclStatus": {
                    "type": "string",
                    "description": "The acl status of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclType": {
                    "type": "string",
                    "description": "The acl type of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateId": {
                    "type": "string",
                    "description": "The ID of the certificate which is associated with the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "string",
                    "description": "The enable status of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckDomain": {
                    "type": "string",
                    "description": "The domain of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckEnabled": {
                    "type": "string",
                    "description": "The enable status of health check function.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckHealthyThreshold": {
                    "type": "integer",
                    "description": "The healthy threshold of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckHttpCode": {
                    "type": "string",
                    "description": "The normal http status code of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckInterval": {
                    "type": "integer",
                    "description": "The interval executing health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckMethod": {
                    "type": "string",
                    "description": "The method of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckTimeout": {
                    "type": "integer",
                    "description": "The response timeout of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckUdpExpect": {
                    "type": "string",
                    "description": "The expected response string for the health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckUdpRequest": {
                    "type": "string",
                    "description": "A request string to perform a health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckUnHealthyThreshold": {
                    "type": "integer",
                    "description": "The unhealthy threshold of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckUri": {
                    "type": "string",
                    "description": "The uri of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listenerId": {
                    "type": "string",
                    "description": "The ID of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listenerName": {
                    "type": "string",
                    "description": "The name of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the backend server group which is associated with the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aclIds",
                "aclStatus",
                "aclType",
                "certificateId",
                "createTime",
                "enabled",
                "healthCheckDomain",
                "healthCheckEnabled",
                "healthCheckHealthyThreshold",
                "healthCheckHttpCode",
                "healthCheckInterval",
                "healthCheckMethod",
                "healthCheckTimeout",
                "healthCheckUdpExpect",
                "healthCheckUdpRequest",
                "healthCheckUnHealthyThreshold",
                "healthCheckUri",
                "id",
                "listenerId",
                "listenerName",
                "port",
                "protocol",
                "serverGroupId",
                "status",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/RulesRule:RulesRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "The Domain of Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Id of Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleId": {
                    "type": "string",
                    "description": "The Id of Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The Id of Server Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The Url of Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "domain",
                "id",
                "ruleId",
                "serverGroupId",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/ServerGroupServersServer:ServerGroupServersServer": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The server id of instance in ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ecs instance or the network card bound to ecs instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The private ip of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverId": {
                    "type": "string",
                    "description": "The server id of instance in ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of instance. Optional choice contains `ecs`, `eni`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "instanceId",
                "ip",
                "port",
                "serverId",
                "type",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/ServerGroupsGroup:ServerGroupsGroup": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The create time of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupName": {
                    "type": "string",
                    "description": "The name of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "description",
                "id",
                "serverGroupId",
                "serverGroupName",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/ZonesMasterZone:ZonesMasterZone": {
            "properties": {
                "slaveZones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:clb/ZonesMasterZoneSlaveZone:ZonesMasterZoneSlaveZone"
                    },
                    "description": "The slave zones list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The master zone id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "slaveZones",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:clb/ZonesMasterZoneSlaveZone:ZonesMasterZoneSlaveZone": {
            "properties": {
                "zoneId": {
                    "type": "string",
                    "description": "The master zone id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/AuthorizationTokensToken:AuthorizationTokensToken": {
            "properties": {
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time of the temporary access token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "The Temporary access token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "The username for login repository instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expireTime",
                "token",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/EndpointsEndpoint:EndpointsEndpoint": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether public endpoint is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "description": "The CR instance name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of public endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "registry",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/NamespacesNamespace:NamespacesNamespace": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time when namespace created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of OCI repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/RegistriesRegistry:RegistriesRegistry": {
            "properties": {
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cr/RegistriesRegistryDomain:RegistriesRegistryDomain"
                    },
                    "description": "The domain of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "$ref": "#/types/volcengine:cr/RegistriesRegistryStatus:RegistriesRegistryStatus",
                    "description": "The status of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userStatus": {
                    "type": "string",
                    "description": "The status of user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "The username of cr instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chargeType",
                "createTime",
                "domains",
                "name",
                "status",
                "type",
                "userStatus",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/RegistriesRegistryDomain:RegistriesRegistryDomain": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "domain",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/RegistriesRegistryStatus:RegistriesRegistryStatus": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The condition of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The phase of status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "phase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/RegistriesStatus:RegistriesStatus": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "The condition of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The phase of status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:cr/RegistryDomain:RegistryDomain": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "domain",
                        "type"
                    ]
                }
            }
        },
        "volcengine:cr/RegistryStatus:RegistryStatus": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The condition of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The phase status of registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "conditions",
                        "phase"
                    ]
                }
            }
        },
        "volcengine:cr/RepositoriesRepository:RepositoriesRepository": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level of repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace of repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The last update time of repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "createTime",
                "description",
                "name",
                "namespace",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/StateStatus:StateStatus": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The condition of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The phase status of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "conditions",
                        "phase"
                    ]
                }
            }
        },
        "volcengine:cr/TagChartAttribute:TagChartAttribute": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The Helm version.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of OCI product.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "The Helm Chart version.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiVersion",
                        "name",
                        "version"
                    ]
                }
            }
        },
        "volcengine:cr/TagImageAttribute:TagImageAttribute": {
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": "The image architecture.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "author": {
                    "type": "string",
                    "description": "The image author.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digest": {
                    "type": "string",
                    "description": "The digest of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "string",
                    "description": "The iamge os.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "architecture",
                        "author",
                        "digest",
                        "os"
                    ]
                }
            }
        },
        "volcengine:cr/TagsTag:TagsTag": {
            "properties": {
                "chartAttribute": {
                    "$ref": "#/types/volcengine:cr/TagsTagChartAttribute:TagsTagChartAttribute",
                    "description": "The chart attribute,valid when tag type is Chart.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digest": {
                    "type": "string",
                    "description": "The digest of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cr/TagsTagImageAttribute:TagsTagImageAttribute"
                    },
                    "description": "The list of image attributes,valid when tag type is Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of OCI product tag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pushTime": {
                    "type": "string",
                    "description": "The last push time of OCI product.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of OCI product.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of OCI product tag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chartAttribute",
                "digest",
                "imageAttributes",
                "name",
                "pushTime",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/TagsTagChartAttribute:TagsTagChartAttribute": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The Helm version.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of OCI product tag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "The Helm Chart version.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "name",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/TagsTagImageAttribute:TagsTagImageAttribute": {
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": "The image architecture.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "author": {
                    "type": "string",
                    "description": "The image author.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digest": {
                    "type": "string",
                    "description": "The digest of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "string",
                    "description": "The iamge os.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "architecture",
                "author",
                "digest",
                "os"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/VpcEndpointVpc:VpcEndpointVpc": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The id of the account. When you need to expose the Enterprise Edition instance to a VPC under another primary account, you need to specify the ID of the primary account to which the VPC belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet. If not specified, the subnet with the most remaining IPs under the VPC will be automatically selected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "subnetId"
                    ]
                }
            }
        },
        "volcengine:cr/VpcEndpointsEndpoint:VpcEndpointsEndpoint": {
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "The CR registry name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cr/VpcEndpointsEndpointVpc:VpcEndpointsEndpointVpc"
                    },
                    "description": "List of vpc information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "registry",
                "vpcs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:cr/VpcEndpointsEndpointVpc:VpcEndpointsEndpointVpc": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "The id of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The IP address of the mirror repository in the VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "createTime",
                "ip",
                "region",
                "status",
                "subnetId",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ebs/VolumesVolume:VolumesVolume": {
            "properties": {
                "billingType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteWithInstance": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The Id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "description": "The Kind of Volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "renewType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tradeStatus": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeName": {
                    "type": "string",
                    "description": "The name of Volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of Volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The Id of Zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "billingType",
                "createdAt",
                "deleteWithInstance",
                "description",
                "deviceName",
                "expiredTime",
                "id",
                "imageId",
                "instanceId",
                "kind",
                "payType",
                "renewType",
                "size",
                "status",
                "tradeStatus",
                "updatedAt",
                "volumeId",
                "volumeName",
                "volumeType",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/DeploymentSetsDeploymentSet:DeploymentSetsDeploymentSet": {
            "properties": {
                "deploymentSetId": {
                    "type": "string",
                    "description": "The ID of ECS DeploymentSet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deploymentSetName": {
                    "type": "string",
                    "description": "The name of ECS DeploymentSet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of ECS DeploymentSet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "granularity": {
                    "type": "string",
                    "description": "The granularity of ECS DeploymentSet.Valid values: switch, host, rack.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy of ECS DeploymentSet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deploymentSetId",
                "deploymentSetName",
                "description",
                "granularity",
                "strategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/ImagesImage:ImagesImage": {
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": "The architecture of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The ID of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "description": "The name of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSupportCloudInit": {
                    "type": "boolean",
                    "description": "Whether the Image support cloud-init.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osName": {
                    "type": "string",
                    "description": "The name of Image operating system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osType": {
                    "type": "string",
                    "description": "The operating system type of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platform": {
                    "type": "string",
                    "description": "The platform of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platformVersion": {
                    "type": "string",
                    "description": "The platform version of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shareStatus": {
                    "type": "string",
                    "description": "The share mode of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size(GiB) of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "A list of Image status, the value can be `available` or `creating` or `error`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The update time of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visibility": {
                    "type": "string",
                    "description": "The visibility of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "architecture",
                "createdAt",
                "description",
                "imageId",
                "imageName",
                "isSupportCloudInit",
                "osName",
                "osType",
                "platform",
                "platformVersion",
                "shareStatus",
                "size",
                "status",
                "updatedAt",
                "visibility"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/InstanceCpuOptions:InstanceCpuOptions": {
            "properties": {
                "threadsPerCore": {
                    "type": "integer",
                    "description": "The per core of threads.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "threadsPerCore"
            ]
        },
        "volcengine:ecs/InstanceDataVolume:InstanceDataVolume": {
            "properties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "The delete with instance flag of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of volume. The value range of the data volume size is ESSD_PL0: 10~32768, ESSD_FlexPL: 10~32768, PTSSD: 20~8192.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "size",
                "volumeType"
            ]
        },
        "volcengine:ecs/InstanceGpuDevice:InstanceGpuDevice": {
            "properties": {
                "count": {
                    "type": "integer",
                    "description": "The Count of GPU device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptedMemorySize": {
                    "type": "integer",
                    "description": "The Encrypted Memory Size of GPU device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memorySize": {
                    "type": "integer",
                    "description": "The memory size of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "productName": {
                    "type": "string",
                    "description": "The Product Name of GPU device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count",
                        "encryptedMemorySize",
                        "memorySize",
                        "productName"
                    ]
                }
            }
        },
        "volcengine:ecs/InstanceSecondaryNetworkInterface:InstanceSecondaryNetworkInterface": {
            "properties": {
                "primaryIpAddress": {
                    "type": "string",
                    "description": "The private ip address of primary networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID set of secondary networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of secondary networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "securityGroupIds",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "primaryIpAddress",
                        "securityGroupIds",
                        "subnetId"
                    ]
                }
            }
        },
        "volcengine:ecs/InstanceTag:InstanceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:ecs/InstancesInstance:InstancesInstance": {
            "properties": {
                "cpus": {
                    "type": "integer",
                    "description": "The number of ECS instance CPU cores.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deploymentSetId": {
                    "type": "string",
                    "description": "The ID of DeploymentSet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpuDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstancesInstanceGpuDevice:InstancesInstanceGpuDevice"
                    },
                    "description": "The GPU device info of Instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostName": {
                    "type": "string",
                    "description": "The host name of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The image ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The charge type of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The spec type of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6AddressCount": {
                    "type": "integer",
                    "description": "The number of IPv6 addresses of the ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The  IPv6 address list of the ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isGpu": {
                    "type": "boolean",
                    "description": "The Flag of GPU instance.If the instance is GPU,The flag is true.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPairId": {
                    "type": "string",
                    "description": "The ssh key ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The key pair name of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memorySize": {
                    "type": "integer",
                    "description": "The memory size of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstancesInstanceNetworkInterface:InstancesInstanceNetworkInterface"
                    },
                    "description": "The networkInterface detail collection of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osName": {
                    "type": "string",
                    "description": "The os name of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osType": {
                    "type": "string",
                    "description": "The os type of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spotStrategy": {
                    "type": "string",
                    "description": "The spot strategy of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stoppedMode": {
                    "type": "string",
                    "description": "The stop mode of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstancesInstanceTag:InstancesInstanceTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The update time of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstancesInstanceVolume:InstancesInstanceVolume"
                    },
                    "description": "The volume detail collection of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpus",
                "createdAt",
                "deploymentSetId",
                "description",
                "gpuDevices",
                "hostName",
                "imageId",
                "instanceChargeType",
                "instanceId",
                "instanceName",
                "instanceType",
                "ipv6AddressCount",
                "ipv6Addresses",
                "isGpu",
                "keyPairId",
                "keyPairName",
                "memorySize",
                "networkInterfaces",
                "osName",
                "osType",
                "projectName",
                "spotStrategy",
                "status",
                "stoppedMode",
                "tags",
                "updatedAt",
                "volumes",
                "vpcId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/InstancesInstanceGpuDevice:InstancesInstanceGpuDevice": {
            "properties": {
                "count": {
                    "type": "integer",
                    "description": "The Count of GPU device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptedMemorySize": {
                    "type": "integer",
                    "description": "The Encrypted Memory Size of GPU device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memorySize": {
                    "type": "integer",
                    "description": "The memory size of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "productName": {
                    "type": "string",
                    "description": "The Product Name of GPU device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "count",
                "encryptedMemorySize",
                "memorySize",
                "productName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/InstancesInstanceNetworkInterface:InstancesInstanceNetworkInterface": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "description": "The mac address of networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryIpAddress": {
                    "type": "string",
                    "description": "The primary ip address of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "macAddress",
                "networkInterfaceId",
                "primaryIpAddress",
                "subnetId",
                "type",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/InstancesInstanceTag:InstancesInstanceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/InstancesInstanceVolume:InstancesInstanceVolume": {
            "properties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "The delete with instance flag of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeName": {
                    "type": "string",
                    "description": "The Name of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteWithInstance",
                "size",
                "volumeId",
                "volumeName",
                "volumeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/InstancesTag:InstancesTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:ecs/KeyPairsKeyPair:KeyPairsKeyPair": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The creation time of key pair.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of key pair.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fingerPrint": {
                    "type": "string",
                    "description": "The finger print info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of key pair.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPairId": {
                    "type": "string",
                    "description": "The id of key pair.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPairName": {
                    "type": "string",
                    "description": "Name of key pair.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The update time of key pair.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "description",
                "fingerPrint",
                "id",
                "keyPairId",
                "keyPairName",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/LaunchTemplateNetworkInterface:LaunchTemplateNetworkInterface": {
            "properties": {
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID associated with the NIC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:ecs/LaunchTemplateVolume:LaunchTemplateVolume": {
            "properties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "The delete with instance flag of volume. Valid values: true, false. Default value: true.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:ecs/LaunchTemplatesLaunchTemplate:LaunchTemplatesLaunchTemplate": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The created time of the launch template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultVersionNumber": {
                    "type": "integer",
                    "description": "The default version of the launch template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipBandwidth": {
                    "type": "integer",
                    "description": "The EIP bandwidth which the scaling configuration set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipBillingType": {
                    "type": "string",
                    "description": "The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipIsp": {
                    "type": "string",
                    "description": "The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostName": {
                    "type": "string",
                    "description": "The host name of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hpcClusterId": {
                    "type": "string",
                    "description": "The hpc cluster id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the launch template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The image id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The charge type of the instance and volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPairName": {
                    "type": "string",
                    "description": "When you log in to the instance using the SSH key pair, enter the name of the key pair.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latestVersionNumber": {
                    "type": "integer",
                    "description": "The latest version of the launch template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "launchTemplateId": {
                    "type": "string",
                    "description": "The id of the launch template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "launchTemplateName": {
                    "type": "string",
                    "description": "The name of the launch template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/LaunchTemplatesLaunchTemplateNetworkInterface:LaunchTemplatesLaunchTemplateNetworkInterface"
                    },
                    "description": "The list of network interfaces.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityEnhancementStrategy": {
                    "type": "string",
                    "description": "Whether to open the security reinforcement.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suffixIndex": {
                    "type": "integer",
                    "description": "The index of the ordered suffix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uniqueSuffix": {
                    "type": "boolean",
                    "description": "Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The updated time of the launch template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionDescription": {
                    "type": "string",
                    "description": "The latest version description of the launch template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/LaunchTemplatesLaunchTemplateVolume:LaunchTemplatesLaunchTemplateVolume"
                    },
                    "description": "The list of volume of the scaling configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "defaultVersionNumber",
                "description",
                "eipBandwidth",
                "eipBillingType",
                "eipIsp",
                "hostName",
                "hpcClusterId",
                "id",
                "imageId",
                "instanceChargeType",
                "instanceName",
                "keyPairName",
                "latestVersionNumber",
                "launchTemplateId",
                "launchTemplateName",
                "networkInterfaces",
                "securityEnhancementStrategy",
                "suffixIndex",
                "uniqueSuffix",
                "updatedAt",
                "versionDescription",
                "volumes",
                "vpcId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/LaunchTemplatesLaunchTemplateNetworkInterface:LaunchTemplatesLaunchTemplateNetworkInterface": {
            "properties": {
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID associated with the NIC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "securityGroupIds",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/LaunchTemplatesLaunchTemplateVolume:LaunchTemplatesLaunchTemplateVolume": {
            "properties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "The delete with instance flag of volume. Valid values: true, false. Default value: true.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteWithInstance",
                "size",
                "volumeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:ecs/ZonesZone:ZonesZone": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:eip/AddressTag:AddressTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:eip/AddressesAddress:AddressesAddress": {
            "properties": {
                "allocationId": {
                    "type": "string",
                    "description": "The id of the EIP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allocationTime": {
                    "type": "string",
                    "description": "The allocation time of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "The peek bandwidth of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "businessStatus": {
                    "type": "string",
                    "description": "The business status of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The deleted time of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAddress": {
                    "type": "string",
                    "description": "The EIP ip address of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "description": "The expired time of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the EIP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id which be associated to the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the associated instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "description": "An ISP of EIP Address, the value can be `BGP` or `ChinaMobile` or `ChinaUnicom` or `ChinaTelecom`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lockReason": {
                    "type": "string",
                    "description": "The lock reason of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A name of EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "The overdue time of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "A status of EIP, the value can be `Attaching` or `Detaching` or `Attached` or `Available`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:eip/AddressesAddressTag:AddressesAddressTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update time of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocationId",
                "allocationTime",
                "bandwidth",
                "billingType",
                "businessStatus",
                "deletedTime",
                "description",
                "eipAddress",
                "expiredTime",
                "id",
                "instanceId",
                "instanceType",
                "isp",
                "lockReason",
                "name",
                "overdueTime",
                "projectName",
                "status",
                "tags",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:eip/AddressesAddressTag:AddressesAddressTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:eip/AddressesTag:AddressesTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:escloud/InstanceInstanceConfiguration:InstanceInstanceConfiguration": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "description": "The password of administrator account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminUserName": {
                    "type": "string",
                    "description": "The name of administrator account(should be admin).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of ESCloud instance, the value can be PostPaid or PrePaid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "configurationCode": {
                    "type": "string",
                    "description": "Configuration code used for billing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "enableHttps": {
                    "type": "boolean",
                    "description": "Whether Https access is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "enablePureMaster": {
                    "type": "boolean",
                    "description": "Whether the Master node is independent.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "forceRestartAfterScale": {
                    "type": "boolean",
                    "description": "Whether to force restart when changes are made. If true, it means that the cluster will be forced to restart without paying attention to instance availability. Works only on modified the node_specs_assigns field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of ESCloud instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The maintainable date for the instance. Works only on modified scenes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The maintainable time period for the instance. Works only on modified scenes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpecsAssigns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:escloud/InstanceInstanceConfigurationNodeSpecsAssign:InstanceInstanceConfigurationNodeSpecsAssign"
                    },
                    "description": "The number and configuration of various ESCloud instance node. Kibana NodeSpecsAssign should not be modified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name  to which the ESCloud instance belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionId": {
                    "type": "string",
                    "description": "The region ID of ESCloud instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet, the subnet must belong to the AZ selected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "The version of ESCloud instance, the value is V6_7 or V7_10.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone ID of ESCloud instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneNumber": {
                    "type": "integer",
                    "description": "The zone count of the ESCloud instance used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "adminPassword",
                "adminUserName",
                "chargeType",
                "configurationCode",
                "enableHttps",
                "enablePureMaster",
                "nodeSpecsAssigns",
                "subnetId",
                "version",
                "zoneNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword",
                        "adminUserName",
                        "chargeType",
                        "configurationCode",
                        "enableHttps",
                        "enablePureMaster",
                        "maintenanceDays",
                        "maintenanceTime",
                        "nodeSpecsAssigns",
                        "regionId",
                        "subnetId",
                        "version",
                        "zoneId",
                        "zoneNumber"
                    ]
                }
            }
        },
        "volcengine:escloud/InstanceInstanceConfigurationNodeSpecsAssign:InstanceInstanceConfigurationNodeSpecsAssign": {
            "properties": {
                "number": {
                    "type": "integer",
                    "description": "The number of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceSpecName": {
                    "type": "string",
                    "description": "The name of compute resource spec, the value is `kibana.x2.small` or `es.x4.medium` or `es.x4.large` or `es.x4.xlarge` or `es.x2.2xlarge` or `es.x4.2xlarge` or `es.x2.3xlarge`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageSize": {
                    "type": "integer",
                    "description": "The size of storage. Kibana NodeSpecsAssign should not specify this field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageSpecName": {
                    "type": "string",
                    "description": "The name of storage spec. Kibana NodeSpecsAssign should not specify this field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of node, the value is `Master` or `Hot` or `Kibana`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "number",
                "resourceSpecName",
                "type"
            ]
        },
        "volcengine:escloud/InstancesInstance:InstancesInstance": {
            "properties": {
                "chargeEnabled": {
                    "type": "boolean",
                    "description": "The charge status of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableEsPrivateNetwork": {
                    "type": "boolean",
                    "description": "whether enable es private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableEsPublicNetwork": {
                    "type": "boolean",
                    "description": "whether enable es public network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableKibanaPrivateNetwork": {
                    "type": "boolean",
                    "description": "whether enable kibana private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableKibanaPublicNetwork": {
                    "type": "boolean",
                    "description": "whether enable kibana public network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "esInnerEndpoint": {
                    "type": "string",
                    "description": "The es inner endpoint of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "esPrivateDomain": {
                    "type": "string",
                    "description": "The es private domain of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "esPrivateEndpoint": {
                    "type": "string",
                    "description": "The es private endpoint of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "esPublicDomain": {
                    "type": "string",
                    "description": "The es public domain of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "esPublicEndpoint": {
                    "type": "string",
                    "description": "The es public endpoint of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expireDate": {
                    "type": "string",
                    "description": "The expire time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceConfiguration": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceInstanceConfiguration:InstancesInstanceInstanceConfiguration",
                    "description": "The configuration of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The Id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibanaPrivateDomain": {
                    "type": "string",
                    "description": "The kibana private domain of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibanaPublicDomain": {
                    "type": "string",
                    "description": "The kibana public domain of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The maintenance day of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The maintenance time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:escloud/InstancesInstanceNode:InstancesInstanceNode"
                    },
                    "description": "The nodes info of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:escloud/InstancesInstancePlugin:InstancesInstancePlugin"
                    },
                    "description": "The plugin info of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalNodes": {
                    "type": "integer",
                    "description": "The total nodes of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "description": "The user id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chargeEnabled",
                "createTime",
                "enableEsPrivateNetwork",
                "enableEsPublicNetwork",
                "enableKibanaPrivateNetwork",
                "enableKibanaPublicNetwork",
                "esInnerEndpoint",
                "esPrivateDomain",
                "esPrivateEndpoint",
                "esPublicDomain",
                "esPublicEndpoint",
                "expireDate",
                "id",
                "instanceConfiguration",
                "instanceId",
                "kibanaPrivateDomain",
                "kibanaPublicDomain",
                "maintenanceDays",
                "maintenanceTime",
                "namespace",
                "nodes",
                "plugins",
                "status",
                "totalNodes",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceInstanceConfiguration:InstancesInstanceInstanceConfiguration": {
            "properties": {
                "adminUserName": {
                    "type": "string",
                    "description": "The user name of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableHttps": {
                    "type": "boolean",
                    "description": "whether enable https.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enablePureMaster": {
                    "type": "boolean",
                    "description": "Whether enable pure master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hotNodeNumber": {
                    "type": "integer",
                    "description": "The node number of host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hotNodeResourceSpec": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceInstanceConfigurationHotNodeResourceSpec:InstancesInstanceInstanceConfigurationHotNodeResourceSpec",
                    "description": "The node resource spec of host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hotNodeStorageSpec": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceInstanceConfigurationHotNodeStorageSpec:InstancesInstanceInstanceConfigurationHotNodeStorageSpec",
                    "description": "The node storage spec of host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibanaNodeNumber": {
                    "type": "integer",
                    "description": "The node number of kibana.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibanaNodeResourceSpec": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceInstanceConfigurationKibanaNodeResourceSpec:InstancesInstanceInstanceConfigurationKibanaNodeResourceSpec",
                    "description": "The node resource spec of kibana.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kibanaNodeStorageSpec": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceInstanceConfigurationKibanaNodeStorageSpec:InstancesInstanceInstanceConfigurationKibanaNodeStorageSpec",
                    "description": "The node storage spec of kibana.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterNodeNumber": {
                    "type": "integer",
                    "description": "The node number of master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterNodeResourceSpec": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceInstanceConfigurationMasterNodeResourceSpec:InstancesInstanceInstanceConfigurationMasterNodeResourceSpec",
                    "description": "The node resource spec of master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterNodeStorageSpec": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceInstanceConfigurationMasterNodeStorageSpec:InstancesInstanceInstanceConfigurationMasterNodeStorageSpec",
                    "description": "The node storage spec of master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "period": {
                    "type": "integer",
                    "description": "The period of project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The name of project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionId": {
                    "type": "string",
                    "description": "The region info of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceInstanceConfigurationSubnet:InstancesInstanceInstanceConfigurationSubnet",
                    "description": "The subnet info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "The version of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceInstanceConfigurationVpc:InstancesInstanceInstanceConfigurationVpc",
                    "description": "The vpc info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zoneId of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneNumber": {
                    "type": "integer",
                    "description": "The zone number of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adminUserName",
                "chargeType",
                "enableHttps",
                "enablePureMaster",
                "hotNodeNumber",
                "hotNodeResourceSpec",
                "hotNodeStorageSpec",
                "instanceName",
                "kibanaNodeNumber",
                "kibanaNodeResourceSpec",
                "kibanaNodeStorageSpec",
                "masterNodeNumber",
                "masterNodeResourceSpec",
                "masterNodeStorageSpec",
                "period",
                "projectName",
                "regionId",
                "subnet",
                "version",
                "vpc",
                "zoneId",
                "zoneNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceInstanceConfigurationHotNodeResourceSpec:InstancesInstanceInstanceConfigurationHotNodeResourceSpec": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "The cpu info of resource spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The show name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "description": "The memory info of resource spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "description",
                "displayName",
                "memory",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceInstanceConfigurationHotNodeStorageSpec:InstancesInstanceInstanceConfigurationHotNodeStorageSpec": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The show name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The max size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minSize": {
                    "type": "integer",
                    "description": "The min size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "displayName",
                "maxSize",
                "minSize",
                "name",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceInstanceConfigurationKibanaNodeResourceSpec:InstancesInstanceInstanceConfigurationKibanaNodeResourceSpec": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "The cpu info of resource spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The show name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "description": "The memory info of resource spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "description",
                "displayName",
                "memory",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceInstanceConfigurationKibanaNodeStorageSpec:InstancesInstanceInstanceConfigurationKibanaNodeStorageSpec": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The show name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The max size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minSize": {
                    "type": "integer",
                    "description": "The min size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "displayName",
                "maxSize",
                "minSize",
                "name",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceInstanceConfigurationMasterNodeResourceSpec:InstancesInstanceInstanceConfigurationMasterNodeResourceSpec": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "The cpu info of resource spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The show name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "description": "The memory info of resource spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "description",
                "displayName",
                "memory",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceInstanceConfigurationMasterNodeStorageSpec:InstancesInstanceInstanceConfigurationMasterNodeStorageSpec": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The show name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The max size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minSize": {
                    "type": "integer",
                    "description": "The min size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "displayName",
                "maxSize",
                "minSize",
                "name",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceInstanceConfigurationSubnet:InstancesInstanceInstanceConfigurationSubnet": {
            "properties": {
                "subnetId": {
                    "type": "string",
                    "description": "The id of subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "description": "The name of subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnetId",
                "subnetName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceInstanceConfigurationVpc:InstancesInstanceInstanceConfigurationVpc": {
            "properties": {
                "vpcId": {
                    "type": "string",
                    "description": "The id of vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "vpcId",
                "vpcName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceNode:InstancesInstanceNode": {
            "properties": {
                "isCold": {
                    "type": "boolean",
                    "description": "Is cold node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isHot": {
                    "type": "boolean",
                    "description": "Is hot node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isKibana": {
                    "type": "boolean",
                    "description": "Is kibana node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isMaster": {
                    "type": "boolean",
                    "description": "Is master node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isWarm": {
                    "type": "boolean",
                    "description": "Is warm node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeDisplayName": {
                    "type": "string",
                    "description": "The show name of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceSpec": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceNodeResourceSpec:InstancesInstanceNodeResourceSpec",
                    "description": "The node resource spec of master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restartNumber": {
                    "type": "integer",
                    "description": "The restart times of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "The start time of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageSpec": {
                    "$ref": "#/types/volcengine:escloud/InstancesInstanceNodeStorageSpec:InstancesInstanceNodeStorageSpec",
                    "description": "The node storage spec of master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "isCold",
                "isHot",
                "isKibana",
                "isMaster",
                "isWarm",
                "nodeDisplayName",
                "nodeName",
                "resourceSpec",
                "restartNumber",
                "startTime",
                "status",
                "storageSpec"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceNodeResourceSpec:InstancesInstanceNodeResourceSpec": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "The cpu info of resource spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The show name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "description": "The memory info of resource spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "description",
                "displayName",
                "memory",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstanceNodeStorageSpec:InstancesInstanceNodeStorageSpec": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The show name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The max size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minSize": {
                    "type": "integer",
                    "description": "The min size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of storage spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "displayName",
                "maxSize",
                "minSize",
                "name",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/InstancesInstancePlugin:InstancesInstancePlugin": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pluginName": {
                    "type": "string",
                    "description": "The name of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "The version of plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "pluginName",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/RegionsRegion:RegionsRegion": {
            "properties": {
                "regionId": {
                    "type": "string",
                    "description": "The id of the region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionName": {
                    "type": "string",
                    "description": "The name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "regionId",
                "regionName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:escloud/ZonesZone:ZonesZone": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneName": {
                    "type": "string",
                    "description": "The name of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "zoneId",
                "zoneName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:iam/PoliciesPolicy:PoliciesPolicy": {
            "properties": {
                "createDate": {
                    "type": "string",
                    "description": "The create time of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyDocument": {
                    "type": "string",
                    "description": "The document of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyTrn": {
                    "type": "string",
                    "description": "The resource name of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleAttachDate": {
                    "type": "string",
                    "description": "The role attach time of the Policy.The data show only query with role_name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the IAM role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateDate": {
                    "type": "string",
                    "description": "The update time of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAttachDate": {
                    "type": "string",
                    "description": "The user attach time of the Policy.The data show only query with user_name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the IAM user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createDate",
                "description",
                "id",
                "policyDocument",
                "policyName",
                "policyTrn",
                "policyType",
                "roleAttachDate",
                "roleName",
                "updateDate",
                "userAttachDate",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:iam/RolesRole:RolesRole": {
            "properties": {
                "createDate": {
                    "type": "string",
                    "description": "The create time of the Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the Role, comma separated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trn": {
                    "type": "string",
                    "description": "The resource name of the Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustPolicyDocument": {
                    "type": "string",
                    "description": "The trust policy document of the Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createDate",
                "description",
                "id",
                "roleName",
                "trn",
                "trustPolicyDocument"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:iam/UsersUser:UsersUser": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account id of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createDate": {
                    "type": "string",
                    "description": "The create date of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trn": {
                    "type": "string",
                    "description": "The trn of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateDate": {
                    "type": "string",
                    "description": "The update date of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "createDate",
                "trn",
                "updateDate",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/AccountsAccount:AccountsAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The name of account, current support only `root`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountPrivileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/AccountsAccountAccountPrivilege:AccountsAccountAccountPrivilege"
                    },
                    "description": "The privilege info of mongo instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountType": {
                    "type": "string",
                    "description": "The type of account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountPrivileges",
                "accountType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/AccountsAccountAccountPrivilege:AccountsAccountAccountPrivilege": {
            "properties": {
                "dbName": {
                    "type": "string",
                    "description": "The Name of DB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "description": "The Name of role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dbName",
                "roleName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/EndpointsEndpoint:EndpointsEndpoint": {
            "properties": {
                "dbAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/EndpointsEndpointDbAddress:EndpointsEndpointDbAddress"
                    },
                    "description": "The list of mongodb addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointId": {
                    "type": "string",
                    "description": "The ID of endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointStr": {
                    "type": "string",
                    "description": "The endpoint information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointType": {
                    "type": "string",
                    "description": "The node type corresponding to the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkType": {
                    "type": "string",
                    "description": "The network type of endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID corresponding to the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dbAddresses",
                "endpointId",
                "endpointStr",
                "endpointType",
                "networkType",
                "objectId",
                "subnetId",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/EndpointsEndpointDbAddress:EndpointsEndpointDbAddress": {
            "properties": {
                "addressDomain": {
                    "type": "string",
                    "description": "The domain of mongodb connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addressIp": {
                    "type": "string",
                    "description": "The IP of mongodb connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addressPort": {
                    "type": "string",
                    "description": "The port of mongodb connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addressType": {
                    "type": "string",
                    "description": "The connection type of mongodb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipId": {
                    "type": "string",
                    "description": "The EIP ID bound to the instance's public network address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "The node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressDomain",
                "addressIp",
                "addressPort",
                "addressType",
                "eipId",
                "nodeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstanceParameterLogsParameterChangeLogs:InstanceParameterLogsParameterChangeLogs": {
            "properties": {
                "modifyTime": {
                    "type": "string",
                    "description": "The modifying time of parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newParameterValue": {
                    "type": "string",
                    "description": "The new parameter value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oldParameterValue": {
                    "type": "string",
                    "description": "The old parameter value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterName": {
                    "type": "string",
                    "description": "The parameter name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterRole": {
                    "type": "string",
                    "description": "The node type to which the parameter belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterStatus": {
                    "type": "string",
                    "description": "The status of parameter change.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "modifyTime",
                "newParameterValue",
                "oldParameterValue",
                "parameterName",
                "parameterRole",
                "parameterStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstanceParametersParameters:InstanceParametersParameters": {
            "properties": {
                "dbEngine": {
                    "type": "string",
                    "description": "The database engine.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "The database engine version.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance ID to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/InstanceParametersParametersInstanceParameter:InstanceParametersParametersInstanceParameter"
                    },
                    "description": "The list of parameters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "total": {
                    "type": "string",
                    "description": "The total parameters queried.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dbEngine",
                "dbEngineVersion",
                "instanceId",
                "instanceParameters",
                "total"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstanceParametersParametersInstanceParameter:InstanceParametersParametersInstanceParameter": {
            "properties": {
                "checkingCode": {
                    "type": "string",
                    "description": "The checking code of parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forceModify": {
                    "type": "boolean",
                    "description": "Whether the parameter supports modifying.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forceRestart": {
                    "type": "boolean",
                    "description": "Does the new parameter value need to restart the instance to take effect after modification.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterDefaultValue": {
                    "type": "string",
                    "description": "The default value of parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterDescription": {
                    "type": "string",
                    "description": "The description of parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterName": {
                    "type": "string",
                    "description": "The name of parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterRole": {
                    "type": "string",
                    "description": "The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterType": {
                    "type": "string",
                    "description": "The type of parameter value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterValue": {
                    "type": "string",
                    "description": "The value of parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "checkingCode",
                "forceModify",
                "forceRestart",
                "parameterDefaultValue",
                "parameterDescription",
                "parameterName",
                "parameterRole",
                "parameterType",
                "parameterValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstanceTag:InstanceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:mongodb/InstancesInstance:InstancesInstance": {
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to enable automatic renewal.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeStatus": {
                    "type": "string",
                    "description": "The charge status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closedTime": {
                    "type": "string",
                    "description": "The planned close time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/InstancesInstanceConfigServer:InstancesInstanceConfigServer"
                    },
                    "description": "The list of config servers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configServersId": {
                    "type": "string",
                    "description": "The ID of config servers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbEngine": {
                    "type": "string",
                    "description": "The db engine to query, valid value contains `MongoDB`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "The version of db engine to query, valid value contains `MongoDB_4_0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbEngineVersionStr": {
                    "type": "string",
                    "description": "The version string of database engine.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "description": "The expired time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance ID to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The instance name to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceStatus": {
                    "type": "string",
                    "description": "The instance status to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of instance to query, the valid value contains `ReplicaSet` or `ShardedCluster`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/InstancesInstanceMongo:InstancesInstanceMongo"
                    },
                    "description": "The list of mongos.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongosId": {
                    "type": "string",
                    "description": "The ID of mongos.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/InstancesInstanceNode:InstancesInstanceNode"
                    },
                    "description": "The node information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name to which the instance belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reclaimTime": {
                    "type": "string",
                    "description": "The planned reclaim time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/InstancesInstanceShard:InstancesInstanceShard"
                    },
                    "description": "The list of shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslEnable": {
                    "type": "boolean",
                    "description": "Whether ssl enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslExpireTime": {
                    "type": "string",
                    "description": "The ssl expire time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslIsValid": {
                    "type": "boolean",
                    "description": "Whether ssl is valid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "description": "The storage type of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/InstancesInstanceTag:InstancesInstanceTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc id of instance to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoRenew",
                "chargeStatus",
                "chargeType",
                "closedTime",
                "configServers",
                "configServersId",
                "createTime",
                "dbEngine",
                "dbEngineVersion",
                "dbEngineVersionStr",
                "expiredTime",
                "instanceId",
                "instanceName",
                "instanceStatus",
                "instanceType",
                "mongos",
                "mongosId",
                "nodes",
                "projectName",
                "reclaimTime",
                "shards",
                "sslEnable",
                "sslExpireTime",
                "sslIsValid",
                "storageType",
                "subnetId",
                "tags",
                "updateTime",
                "vpcId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstancesInstanceConfigServer:InstancesInstanceConfigServer": {
            "properties": {
                "configServerNodeId": {
                    "type": "string",
                    "description": "The config server node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeRole": {
                    "type": "string",
                    "description": "The nod role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatus": {
                    "type": "string",
                    "description": "The node status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalMemoryGb": {
                    "type": "number",
                    "description": "The total memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalVcpu": {
                    "type": "number",
                    "description": "The total vCPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedMemoryGb": {
                    "type": "number",
                    "description": "The used memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedVcpu": {
                    "type": "number",
                    "description": "The used vCPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configServerNodeId",
                "nodeRole",
                "nodeStatus",
                "totalMemoryGb",
                "totalVcpu",
                "usedMemoryGb",
                "usedVcpu",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstancesInstanceMongo:InstancesInstanceMongo": {
            "properties": {
                "mongosNodeId": {
                    "type": "string",
                    "description": "The mongos node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "The node spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatus": {
                    "type": "string",
                    "description": "The node status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalMemoryGb": {
                    "type": "number",
                    "description": "The total memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalVcpu": {
                    "type": "number",
                    "description": "The total vCPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedMemoryGb": {
                    "type": "number",
                    "description": "The used memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedVcpu": {
                    "type": "number",
                    "description": "The used vCPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "mongosNodeId",
                "nodeSpec",
                "nodeStatus",
                "totalMemoryGb",
                "totalVcpu",
                "usedMemoryGb",
                "usedVcpu",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstancesInstanceNode:InstancesInstanceNode": {
            "properties": {
                "nodeDelayTime": {
                    "type": "integer",
                    "description": "The master-slave delay time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "The node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeRole": {
                    "type": "string",
                    "description": "The nod role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "The node spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatus": {
                    "type": "string",
                    "description": "The node status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalMemoryGb": {
                    "type": "number",
                    "description": "The total memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalStorageGb": {
                    "type": "number",
                    "description": "The total storage in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalVcpu": {
                    "type": "number",
                    "description": "The total vCPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedMemoryGb": {
                    "type": "number",
                    "description": "The used memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedStorageGb": {
                    "type": "number",
                    "description": "The used storage in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedVcpu": {
                    "type": "number",
                    "description": "The used vCPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeDelayTime",
                "nodeId",
                "nodeRole",
                "nodeSpec",
                "nodeStatus",
                "totalMemoryGb",
                "totalStorageGb",
                "totalVcpu",
                "usedMemoryGb",
                "usedStorageGb",
                "usedVcpu",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstancesInstanceShard:InstancesInstanceShard": {
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/InstancesInstanceShardNode:InstancesInstanceShardNode"
                    },
                    "description": "The node information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardId": {
                    "type": "string",
                    "description": "The shard ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nodes",
                "shardId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstancesInstanceShardNode:InstancesInstanceShardNode": {
            "properties": {
                "nodeDelayTime": {
                    "type": "integer",
                    "description": "The master-slave delay time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "The node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeRole": {
                    "type": "string",
                    "description": "The nod role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "The node spec.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatus": {
                    "type": "string",
                    "description": "The node status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalMemoryGb": {
                    "type": "number",
                    "description": "The total memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalStorageGb": {
                    "type": "number",
                    "description": "The total storage in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalVcpu": {
                    "type": "number",
                    "description": "The total vCPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedMemoryGb": {
                    "type": "number",
                    "description": "The used memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedStorageGb": {
                    "type": "number",
                    "description": "The used storage in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedVcpu": {
                    "type": "number",
                    "description": "The used vCPU.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeDelayTime",
                "nodeId",
                "nodeRole",
                "nodeSpec",
                "nodeStatus",
                "totalMemoryGb",
                "totalStorageGb",
                "totalVcpu",
                "usedMemoryGb",
                "usedStorageGb",
                "usedVcpu",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstancesInstanceTag:InstancesInstanceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/InstancesTag:InstancesTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:mongodb/MongoAllowListsAllowList:MongoAllowListsAllowList": {
            "properties": {
                "allowList": {
                    "type": "string",
                    "description": "The list of IP address in allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListDesc": {
                    "type": "string",
                    "description": "The description of allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListId": {
                    "type": "string",
                    "description": "The ID of allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListIpNum": {
                    "type": "integer",
                    "description": "The number of allow list IPs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListName": {
                    "type": "string",
                    "description": "The allow list name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListType": {
                    "type": "string",
                    "description": "The IP address type in allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedInstanceNum": {
                    "type": "integer",
                    "description": "The total number of instances bound under the allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/MongoAllowListsAllowListAssociatedInstance:MongoAllowListsAllowListAssociatedInstance"
                    },
                    "description": "The list of associated instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowList",
                "allowListDesc",
                "allowListId",
                "allowListIpNum",
                "allowListName",
                "allowListType",
                "associatedInstanceNum",
                "associatedInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/MongoAllowListsAllowListAssociatedInstance:MongoAllowListsAllowListAssociatedInstance": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The instance ID to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The instance name that bound to the allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "The VPC ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceId",
                "instanceName",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/RegionsRegion:RegionsRegion": {
            "properties": {
                "regionId": {
                    "type": "string",
                    "description": "The id of the region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionName": {
                    "type": "string",
                    "description": "The name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "regionId",
                "regionName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/SpecsSpecs:SpecsSpecs": {
            "properties": {
                "mongosNodeSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/SpecsSpecsMongosNodeSpec:SpecsSpecsMongosNodeSpec"
                    },
                    "description": "The collection of mongos node specs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/SpecsSpecsNodeSpec:SpecsSpecsNodeSpec"
                    },
                    "description": "The collection of node specs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardNodeSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/SpecsSpecsShardNodeSpec:SpecsSpecsShardNodeSpec"
                    },
                    "description": "The collection of shard node specs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "mongosNodeSpecs",
                "nodeSpecs",
                "shardNodeSpecs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/SpecsSpecsMongosNodeSpec:SpecsSpecsMongosNodeSpec": {
            "properties": {
                "cpuNum": {
                    "type": "number",
                    "description": "The cpu cores.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConn": {
                    "type": "integer",
                    "description": "The max connections.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memInGb": {
                    "type": "number",
                    "description": "The memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specName": {
                    "type": "string",
                    "description": "The shard node spec name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuNum",
                "maxConn",
                "memInGb",
                "specName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/SpecsSpecsNodeSpec:SpecsSpecsNodeSpec": {
            "properties": {
                "cpuNum": {
                    "type": "number",
                    "description": "The cpu cores.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConn": {
                    "type": "integer",
                    "description": "The max connections.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxStorage": {
                    "type": "integer",
                    "description": "The max storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memInDb": {
                    "type": "number",
                    "description": "The memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specName": {
                    "type": "string",
                    "description": "The shard node spec name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuNum",
                "maxConn",
                "maxStorage",
                "memInDb",
                "specName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/SpecsSpecsShardNodeSpec:SpecsSpecsShardNodeSpec": {
            "properties": {
                "cpuNum": {
                    "type": "number",
                    "description": "The cpu cores.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConn": {
                    "type": "integer",
                    "description": "The max connections.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxStorage": {
                    "type": "integer",
                    "description": "The max storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memInGb": {
                    "type": "integer",
                    "description": "The memory in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specName": {
                    "type": "string",
                    "description": "The shard node spec name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuNum",
                "maxConn",
                "maxStorage",
                "memInGb",
                "specName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/SslStatesSslState:SslStatesSslState": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The mongodb instance ID to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isValid": {
                    "type": "boolean",
                    "description": "Whetehr SSL is valid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslEnable": {
                    "type": "boolean",
                    "description": "Whether SSL is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslExpiredTime": {
                    "type": "string",
                    "description": "The expire time of SSL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceId",
                "isValid",
                "sslEnable",
                "sslExpiredTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:mongodb/ZonesZone:ZonesZone": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneName": {
                    "type": "string",
                    "description": "The name of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "zoneId",
                "zoneName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:nat/DnatEntriesDnatEntry:DnatEntriesDnatEntry": {
            "properties": {
                "dnatEntryId": {
                    "type": "string",
                    "description": "The ID of the DNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnatEntryName": {
                    "type": "string",
                    "description": "The name of the DNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalIp": {
                    "type": "string",
                    "description": "Provides the public IP address for public network access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalPort": {
                    "type": "string",
                    "description": "The port or port segment that receives requests from the public network. If InternalPort is passed into the port segment, ExternalPort must also be passed into the port segment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalIp": {
                    "type": "string",
                    "description": "Provides the internal IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalPort": {
                    "type": "string",
                    "description": "The port or port segment on which the cloud server instance provides services to the public network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The id of the NAT gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The network status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnatEntryId",
                "dnatEntryName",
                "externalIp",
                "externalPort",
                "internalIp",
                "internalPort",
                "natGatewayId",
                "protocol",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:nat/GatewayTag:GatewayTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:nat/GatewaysNatGateway:GatewaysNatGateway": {
            "properties": {
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "businessStatus": {
                    "type": "string",
                    "description": "Whether the NatGateway is locked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The creation time of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The deleted time of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:nat/GatewaysNatGatewayEipAddress:GatewaysNatGatewayEipAddress"
                    },
                    "description": "The eip addresses of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lockReason": {
                    "type": "string",
                    "description": "The reason why locking NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The ID of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natGatewayName": {
                    "type": "string",
                    "description": "The name of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "The overdue time of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spec": {
                    "type": "string",
                    "description": "The specification of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:nat/GatewaysNatGatewayTag:GatewaysNatGatewayTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The update time of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "billingType",
                "businessStatus",
                "creationTime",
                "deletedTime",
                "description",
                "eipAddresses",
                "id",
                "lockReason",
                "natGatewayId",
                "natGatewayName",
                "networkInterfaceId",
                "overdueTime",
                "spec",
                "status",
                "subnetId",
                "tags",
                "updatedAt",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:nat/GatewaysNatGatewayEipAddress:GatewaysNatGatewayEipAddress": {
            "properties": {
                "allocationId": {
                    "type": "string",
                    "description": "The ID of Eip.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAddress": {
                    "type": "string",
                    "description": "The address of Eip.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usingStatus": {
                    "type": "string",
                    "description": "The using status of Eip.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocationId",
                "eipAddress",
                "usingStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:nat/GatewaysNatGatewayTag:GatewaysNatGatewayTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:nat/GatewaysTag:GatewaysTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:nat/SnatEntriesSnatEntry:SnatEntriesSnatEntry": {
            "properties": {
                "eipAddress": {
                    "type": "string",
                    "description": "The public ip address used by the SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipId": {
                    "type": "string",
                    "description": "An id of the public ip address used by the SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "An id of the nat gateway to which the entry belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatEntryId": {
                    "type": "string",
                    "description": "The id of the SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatEntryName": {
                    "type": "string",
                    "description": "A name of SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceCidr": {
                    "type": "string",
                    "description": "The SourceCidr of SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "An id of the subnet that is required to access the Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "eipAddress",
                "eipId",
                "id",
                "natGatewayId",
                "snatEntryId",
                "snatEntryName",
                "sourceCidr",
                "status",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:privatelink/VpcEndpointConnectionZone:VpcEndpointConnectionZone": {
            "properties": {
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The id of the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceIp": {
                    "type": "string",
                    "description": "The ip address of the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceId": {
                    "type": "string",
                    "description": "The id of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneDomain": {
                    "type": "string",
                    "description": "The domain of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneStatus": {
                    "type": "string",
                    "description": "The status of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "networkInterfaceId",
                        "networkInterfaceIp",
                        "resourceId",
                        "subnetId",
                        "zoneDomain",
                        "zoneId",
                        "zoneStatus"
                    ]
                }
            }
        },
        "volcengine:privatelink/VpcEndpointConnectionsConnection:VpcEndpointConnectionsConnection": {
            "properties": {
                "connectionStatus": {
                    "type": "string",
                    "description": "The status of the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointId": {
                    "type": "string",
                    "description": "The id of the vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointOwnerAccountId": {
                    "type": "string",
                    "description": "The account id of the vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointVpcId": {
                    "type": "string",
                    "description": "The vpc id of the vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "The id of the vpc endpoint service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:privatelink/VpcEndpointConnectionsConnectionZone:VpcEndpointConnectionsConnectionZone"
                    },
                    "description": "The available zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "connectionStatus",
                "creationTime",
                "endpointId",
                "endpointOwnerAccountId",
                "endpointVpcId",
                "serviceId",
                "updateTime",
                "zones"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:privatelink/VpcEndpointConnectionsConnectionZone:VpcEndpointConnectionsConnectionZone": {
            "properties": {
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The id of the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceIp": {
                    "type": "string",
                    "description": "The ip address of the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceId": {
                    "type": "string",
                    "description": "The id of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneDomain": {
                    "type": "string",
                    "description": "The domain of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneStatus": {
                    "type": "string",
                    "description": "The status of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "networkInterfaceId",
                "networkInterfaceIp",
                "resourceId",
                "subnetId",
                "zoneDomain",
                "zoneId",
                "zoneStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:privatelink/VpcEndpointServicePermissionsPermission:VpcEndpointServicePermissionsPermission": {
            "properties": {
                "permitAccountId": {
                    "type": "string",
                    "description": "The Id of permit account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "permitAccountId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:privatelink/VpcEndpointServiceResource:VpcEndpointServiceResource": {
            "properties": {
                "resourceId": {
                    "type": "string",
                    "description": "The id of resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resourceId",
                "resourceType"
            ]
        },
        "volcengine:privatelink/VpcEndpointServicesService:VpcEndpointServicesService": {
            "properties": {
                "autoAcceptEnabled": {
                    "type": "boolean",
                    "description": "Whether auto accept node connect.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Id of service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:privatelink/VpcEndpointServicesServiceResource:VpcEndpointServicesServiceResource"
                    },
                    "description": "The resources info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceDomain": {
                    "type": "string",
                    "description": "The domain of service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "The Id of service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of vpc endpoint service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceResourceType": {
                    "type": "string",
                    "description": "The resource type of service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceType": {
                    "type": "string",
                    "description": "The type of service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoAcceptEnabled",
                "creationTime",
                "description",
                "id",
                "resources",
                "serviceDomain",
                "serviceId",
                "serviceName",
                "serviceResourceType",
                "serviceType",
                "status",
                "updateTime",
                "zoneIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:privatelink/VpcEndpointServicesServiceResource:VpcEndpointServicesServiceResource": {
            "properties": {
                "resourceId": {
                    "type": "string",
                    "description": "The id of resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone id of resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resourceId",
                "resourceType",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:privatelink/VpcEndpointZonesVpcEndpointZone:VpcEndpointZonesVpcEndpointZone": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The Id of vpc endpoint zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The network interface id of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceIp": {
                    "type": "string",
                    "description": "The network interface ip of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceStatus": {
                    "type": "string",
                    "description": "The status of vpc endpoint service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet id of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneDomain": {
                    "type": "string",
                    "description": "The domain of vpc endpoint zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The Id of vpc endpoint zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneStatus": {
                    "type": "string",
                    "description": "The status of vpc endpoint zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "networkInterfaceId",
                "networkInterfaceIp",
                "serviceStatus",
                "subnetId",
                "zoneDomain",
                "zoneId",
                "zoneStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:privatelink/VpcEndpointsVpcEndpoint:VpcEndpointsVpcEndpoint": {
            "properties": {
                "businessStatus": {
                    "type": "string",
                    "description": "Whether the vpc endpoint is locked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionStatus": {
                    "type": "string",
                    "description": "The connection  status of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The delete time of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointDomain": {
                    "type": "string",
                    "description": "The domain of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointId": {
                    "type": "string",
                    "description": "The Id of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointName": {
                    "type": "string",
                    "description": "The name of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointType": {
                    "type": "string",
                    "description": "The type of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Id of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "The Id of vpc endpoint service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of vpc endpoint service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of vpc endpoint. Valid values: `Creating`, `Pending`, `Available`, `Deleting`, `Inactive`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc id of vpc endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "businessStatus",
                "connectionStatus",
                "creationTime",
                "deletedTime",
                "description",
                "endpointDomain",
                "endpointId",
                "endpointName",
                "endpointType",
                "id",
                "serviceId",
                "serviceName",
                "status",
                "updateTime",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds/AccountPrivilegeDbPrivilege:AccountPrivilegeDbPrivilege": {
            "properties": {
                "accountPrivilege": {
                    "type": "string",
                    "description": "The privilege type of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountPrivilegeStr": {
                    "type": "string",
                    "description": "The privilege string of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbName": {
                    "type": "string",
                    "description": "The name of database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountPrivilege",
                "dbName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountPrivilege",
                        "accountPrivilegeStr",
                        "dbName"
                    ]
                }
            }
        },
        "volcengine:rds/AccountsRdsAccount:AccountsRdsAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The name of the database account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountStatus": {
                    "type": "string",
                    "description": "The status of the database account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountType": {
                    "type": "string",
                    "description": "The type of the database account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbPrivileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds/AccountsRdsAccountDbPrivilege:AccountsRdsAccountDbPrivilege"
                    },
                    "description": "The privilege detail list of RDS instance account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the RDS instance account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountStatus",
                "accountType",
                "dbPrivileges",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds/AccountsRdsAccountDbPrivilege:AccountsRdsAccountDbPrivilege": {
            "properties": {
                "accountPrivilege": {
                    "type": "string",
                    "description": "The privilege type of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountPrivilegeStr": {
                    "type": "string",
                    "description": "The privilege string of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbName": {
                    "type": "string",
                    "description": "The name of database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountPrivilege",
                "accountPrivilegeStr",
                "dbName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds/DatabasesRdsDatabase:DatabasesRdsDatabase": {
            "properties": {
                "accountNames": {
                    "type": "string",
                    "description": "The account names of the RDS database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "characterSetName": {
                    "type": "string",
                    "description": "The character set of the RDS database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbName": {
                    "type": "string",
                    "description": "The name of the RDS database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbStatus": {
                    "type": "string",
                    "description": "The status of the RDS database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the RDS database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountNames",
                "characterSetName",
                "dbName",
                "dbStatus",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds/InstanceConnectionInfo:InstanceConnectionInfo": {
            "properties": {
                "enableReadOnly": {
                    "type": "string",
                    "description": "Whether global read-only is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableReadWriteSplitting": {
                    "type": "string",
                    "description": "Whether read-write separation is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalDomain": {
                    "type": "string",
                    "description": "The internal domain of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalPort": {
                    "type": "string",
                    "description": "The interval port of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicDomain": {
                    "type": "string",
                    "description": "The public domain of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicPort": {
                    "type": "string",
                    "description": "The public port of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableReadOnly",
                        "enableReadWriteSplitting",
                        "internalDomain",
                        "internalPort",
                        "publicDomain",
                        "publicPort"
                    ]
                }
            }
        },
        "volcengine:rds/InstancesRdsInstance:InstancesRdsInstance": {
            "properties": {
                "chargeStatus": {
                    "type": "string",
                    "description": "The charge status of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionInfo": {
                    "$ref": "#/types/volcengine:rds/InstancesRdsInstanceConnectionInfo:InstancesRdsInstanceConnectionInfo",
                    "description": "The connection info ot the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbEngine": {
                    "type": "string",
                    "description": "The engine of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "The engine version of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceSpec": {
                    "$ref": "#/types/volcengine:rds/InstancesRdsInstanceInstanceSpec:InstancesRdsInstanceInstanceSpec",
                    "description": "The spec type detail of RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceStatus": {
                    "type": "string",
                    "description": "The status of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnlyInstanceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageSpaceGb": {
                    "type": "integer",
                    "description": "The total storage GB of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The available zone of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chargeStatus",
                "chargeType",
                "connectionInfo",
                "createTime",
                "dbEngine",
                "dbEngineVersion",
                "id",
                "instanceId",
                "instanceName",
                "instanceSpec",
                "instanceStatus",
                "instanceType",
                "region",
                "storageSpaceGb",
                "updateTime",
                "vpcId",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds/InstancesRdsInstanceConnectionInfo:InstancesRdsInstanceConnectionInfo": {
            "properties": {
                "enableReadOnly": {
                    "type": "string",
                    "description": "Whether global read-only is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableReadWriteSplitting": {
                    "type": "string",
                    "description": "Whether read-write separation is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalDomain": {
                    "type": "string",
                    "description": "The internal domain of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalPort": {
                    "type": "string",
                    "description": "The interval port of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicDomain": {
                    "type": "string",
                    "description": "The public domain of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicPort": {
                    "type": "string",
                    "description": "The public port of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enableReadOnly",
                "enableReadWriteSplitting",
                "internalDomain",
                "internalPort",
                "publicDomain",
                "publicPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds/InstancesRdsInstanceInstanceSpec:InstancesRdsInstanceInstanceSpec": {
            "properties": {
                "cpuNum": {
                    "type": "integer",
                    "description": "The cpu core count of spec type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memInGb": {
                    "type": "integer",
                    "description": "The memory size(GB) of spec type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specName": {
                    "type": "string",
                    "description": "The name of spec type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuNum",
                "memInGb",
                "specName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds/IpListsRdsIpList:IpListsRdsIpList": {
            "properties": {
                "groupName": {
                    "type": "string",
                    "description": "The name of the RDS ip list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the RDS ip list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupName",
                "id",
                "ipLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds/ParameterTemplateTemplateParam:ParameterTemplateTemplateParam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Parameter name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runningValue": {
                    "type": "string",
                    "description": "Parameter running value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:rds/ParameterTemplatesRdsParameterTemplate:ParameterTemplatesRdsParameterTemplate": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "Creation time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the RDS parameter template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "needRestart": {
                    "type": "boolean",
                    "description": "Whether the template contains parameters that need to be restarted.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterNum": {
                    "type": "integer",
                    "description": "The number of parameters the template contains.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateDesc": {
                    "type": "string",
                    "description": "The description of the RDS parameter template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateId": {
                    "type": "string",
                    "description": "The ID of the RDS parameter template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateName": {
                    "type": "string",
                    "description": "The name of the RDS parameter template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds/ParameterTemplatesRdsParameterTemplateTemplateParam:ParameterTemplatesRdsParameterTemplateTemplateParam"
                    },
                    "description": "Parameters contained in the template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateType": {
                    "type": "string",
                    "description": "Parameter template database type, range of values:\nMySQL - MySQL database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateTypeVersion": {
                    "type": "string",
                    "description": "Parameter template database version, value range:\nMySQL_Community_5_7 - MySQL 5.7\nMySQL_8_0 - MySQL 8.0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "Update time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "id",
                "needRestart",
                "parameterNum",
                "templateDesc",
                "templateId",
                "templateName",
                "templateParams",
                "templateType",
                "templateTypeVersion",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds/ParameterTemplatesRdsParameterTemplateTemplateParam:ParameterTemplatesRdsParameterTemplateTemplateParam": {
            "properties": {
                "defaultValue": {
                    "type": "string",
                    "description": "Parameter default value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Parameter description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Parameter name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restart": {
                    "type": "boolean",
                    "description": "Whether the modified parameters need to be restarted to take effect.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runningValue": {
                    "type": "string",
                    "description": "Parameter running value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueRange": {
                    "type": "string",
                    "description": "Parameter value range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultValue",
                "description",
                "name",
                "restart",
                "runningValue",
                "valueRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/AccountAccountPrivilege:AccountAccountPrivilege": {
            "properties": {
                "accountPrivilege": {
                    "type": "string",
                    "description": "The privilege type of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountPrivilegeDetail": {
                    "type": "string",
                    "description": "The privilege detail of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbName": {
                    "type": "string",
                    "description": "The name of database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountPrivilege",
                "dbName"
            ]
        },
        "volcengine:rds_mysql/AccountsAccount:AccountsAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The name of the database account. This field supports fuzzy query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountPrivileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/AccountsAccountAccountPrivilege:AccountsAccountAccountPrivilege"
                    },
                    "description": "The privilege detail list of RDS mysql instance account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountStatus": {
                    "type": "string",
                    "description": "The status of the database account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountType": {
                    "type": "string",
                    "description": "The type of the database account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountPrivileges",
                "accountStatus",
                "accountType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/AccountsAccountAccountPrivilege:AccountsAccountAccountPrivilege": {
            "properties": {
                "accountPrivilege": {
                    "type": "string",
                    "description": "The privilege type of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountPrivilegeDetail": {
                    "type": "string",
                    "description": "The privilege detail of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbName": {
                    "type": "string",
                    "description": "The name of database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountPrivilege",
                "accountPrivilegeDetail",
                "dbName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/AllowlistsAllowList:AllowlistsAllowList": {
            "properties": {
                "allowListDesc": {
                    "type": "string",
                    "description": "The description of the allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListId": {
                    "type": "string",
                    "description": "The id of the allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListIpNum": {
                    "type": "integer",
                    "description": "The total number of IP addresses (or address ranges) in the whitelist.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListName": {
                    "type": "string",
                    "description": "The name of the allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListType": {
                    "type": "string",
                    "description": "The type of the allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedInstanceNum": {
                    "type": "integer",
                    "description": "The total number of instances bound under the whitelist.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/AllowlistsAllowListAssociatedInstance:AllowlistsAllowListAssociatedInstance"
                    },
                    "description": "The list of instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowListDesc",
                "allowListId",
                "allowListIpNum",
                "allowListName",
                "allowListType",
                "associatedInstanceNum",
                "associatedInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/AllowlistsAllowListAssociatedInstance:AllowlistsAllowListAssociatedInstance": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "The id of the vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceId",
                "instanceName",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/DatabasesDatabase:DatabasesDatabase": {
            "properties": {
                "characterSetName": {
                    "type": "string",
                    "description": "The character set of the RDS database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databasePrivileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/DatabasesDatabaseDatabasePrivilege:DatabasesDatabaseDatabasePrivilege"
                    },
                    "description": "The privilege detail list of RDS mysql instance database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbName": {
                    "type": "string",
                    "description": "The name of the RDS database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "characterSetName",
                "databasePrivileges",
                "dbName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/DatabasesDatabaseDatabasePrivilege:DatabasesDatabaseDatabasePrivilege": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The name of account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountPrivilege": {
                    "type": "string",
                    "description": "The privilege type of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountPrivilegeDetail": {
                    "type": "string",
                    "description": "The privilege detail of the account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountPrivilege",
                "accountPrivilegeDetail"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/InstanceChargeDetail:InstanceChargeDetail": {
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to automatically renew in prepaid scenarios.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeEndTime": {
                    "type": "string",
                    "description": "Billing expiry time (yearly and monthly only).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeStartTime": {
                    "type": "string",
                    "description": "Billing start time (pay-as-you-go \u0026 monthly subscription).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeStatus": {
                    "type": "string",
                    "description": "Pay status. Value:\nnormal - normal\noverdue - overdue\n.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "Payment type. Value:\nPostPaid - Pay-As-You-Go\nPrePaid - Yearly and monthly (default).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueReclaimTime": {
                    "type": "string",
                    "description": "Estimated release time when arrears are closed (pay-as-you-go \u0026 monthly subscription).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "Shutdown time in arrears (pay-as-you-go \u0026 monthly subscription).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "period": {
                    "type": "integer",
                    "description": "Purchase duration in prepaid scenarios. Default: 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "periodUnit": {
                    "type": "string",
                    "description": "The purchase cycle in the prepaid scenario.\nMonth - monthly subscription (default)\nYear - Package year.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoRenew",
                        "chargeEndTime",
                        "chargeStartTime",
                        "chargeStatus",
                        "chargeType",
                        "overdueReclaimTime",
                        "overdueTime",
                        "period",
                        "periodUnit"
                    ]
                }
            }
        },
        "volcengine:rds_mysql/InstanceChargeInfo:InstanceChargeInfo": {
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to automatically renew in prepaid scenarios.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "chargeType": {
                    "type": "string",
                    "description": "Payment type. Value:\nPostPaid - Pay-As-You-Go\nPrePaid - Yearly and monthly (default).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "period": {
                    "type": "integer",
                    "description": "Purchase duration in prepaid scenarios. Default: 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "periodUnit": {
                    "type": "string",
                    "description": "The purchase cycle in the prepaid scenario.\nMonth - monthly subscription (default)\nYear - Package year.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "chargeType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoRenew",
                        "chargeType",
                        "period",
                        "periodUnit"
                    ]
                }
            }
        },
        "volcengine:rds_mysql/InstanceEndpoint:InstanceEndpoint": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstanceEndpointAddress:InstanceEndpointAddress"
                    },
                    "description": "Address list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoAddNewNodes": {
                    "type": "string",
                    "description": "When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Address description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableReadOnly": {
                    "type": "string",
                    "description": "Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableReadWriteSplitting": {
                    "type": "string",
                    "description": "Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointId": {
                    "type": "string",
                    "description": "Instance connection terminal ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointName": {
                    "type": "string",
                    "description": "The instance connection terminal name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointType": {
                    "type": "string",
                    "description": "Terminal type:\nCluster: The default terminal. (created by default)\nPrimary: Primary node terminal.\nCustom: Custom terminal.\nDirect: Direct connection to the terminal. (Only the operation and maintenance side)\nAllNode: All node terminals. (Only the operation and maintenance side).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeWeights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstanceEndpointNodeWeight:InstanceEndpointNodeWeight"
                    },
                    "description": "The list of nodes configured by the connection terminal and the corresponding read-only weights.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readWriteMode": {
                    "type": "string",
                    "description": "Read and write mode:\nReadWrite: read and write\nReadOnly: read only (default).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addresses",
                        "autoAddNewNodes",
                        "description",
                        "enableReadOnly",
                        "enableReadWriteSplitting",
                        "endpointId",
                        "endpointName",
                        "endpointType",
                        "nodeWeights",
                        "readWriteMode"
                    ]
                }
            }
        },
        "volcengine:rds_mysql/InstanceEndpointAddress:InstanceEndpointAddress": {
            "properties": {
                "dnsVisibility": {
                    "type": "boolean",
                    "description": "DNS Visibility.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "Connect domain name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipId": {
                    "type": "string",
                    "description": "The ID of the EIP, only valid for Public addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP Address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkType": {
                    "type": "string",
                    "description": "Network address type, temporarily Private, Public, PublicService.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "The Port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsVisibility",
                        "domain",
                        "eipId",
                        "ipAddress",
                        "networkType",
                        "port",
                        "subnetId"
                    ]
                }
            }
        },
        "volcengine:rds_mysql/InstanceEndpointNodeWeight:InstanceEndpointNodeWeight": {
            "properties": {
                "nodeId": {
                    "type": "string",
                    "description": "Node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeType": {
                    "type": "string",
                    "description": "Node type. Value: Primary: Primary node.\nSecondary: Standby node.\nReadOnly: Read-only node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeId",
                        "nodeType",
                        "weight"
                    ]
                }
            }
        },
        "volcengine:rds_mysql/InstanceMaintenanceWindow:InstanceMaintenanceWindow": {
            "properties": {
                "dayKind": {
                    "type": "string",
                    "description": "DayKind of maintainable window. Value: Week. Month.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dayOfMonths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Days of maintainable window of the month.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dayOfWeeks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Days of maintainable window of the week.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The maintainable time of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dayKind",
                        "dayOfMonths",
                        "dayOfWeeks",
                        "maintenanceTime"
                    ]
                }
            }
        },
        "volcengine:rds_mysql/InstanceNode:InstanceNode": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "Node creation local time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "Instance ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "description": "Memory size in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "Node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "The specification of primary node and secondary node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatus": {
                    "type": "string",
                    "description": "Node state, value: aligned with instance state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeType": {
                    "type": "string",
                    "description": "Node type. Value: Primary: Primary node.\nSecondary: Standby node.\nReadOnly: Read-only node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionId": {
                    "type": "string",
                    "description": "The region of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vCpu": {
                    "type": "integer",
                    "description": "CPU size.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createTime",
                        "instanceId",
                        "memory",
                        "nodeId",
                        "nodeSpec",
                        "nodeStatus",
                        "nodeType",
                        "regionId",
                        "updateTime",
                        "vCpu",
                        "zoneId"
                    ]
                }
            }
        },
        "volcengine:rds_mysql/InstanceParameter:InstanceParameter": {
            "properties": {
                "parameterName": {
                    "type": "string",
                    "description": "Parameter name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameterValue": {
                    "type": "string",
                    "description": "Parameter value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "parameterName",
                "parameterValue"
            ]
        },
        "volcengine:rds_mysql/InstancesRdsMysqlInstance:InstancesRdsMysqlInstance": {
            "properties": {
                "allowListVersion": {
                    "type": "string",
                    "description": "The version of allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupUse": {
                    "type": "integer",
                    "description": "The instance has used backup space. Unit: GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeDetail": {
                    "$ref": "#/types/volcengine:rds_mysql/InstancesRdsMysqlInstanceChargeDetail:InstancesRdsMysqlInstanceChargeDetail",
                    "description": "Payment methods.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "Node creation local time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataSyncMode": {
                    "type": "string",
                    "description": "Data synchronization mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "The version of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstancesRdsMysqlInstanceEndpoint:InstancesRdsMysqlInstanceEndpoint"
                    },
                    "description": "The endpoint info of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceStatus": {
                    "type": "string",
                    "description": "The status of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lowerCaseTableNames": {
                    "type": "string",
                    "description": "Whether the table name is case sensitive, the default value is 1.\nRanges:\n0: Table names are stored as fixed and table names are case-sensitive.\n1: Table names will be stored in lowercase and table names are not case sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstancesRdsMysqlInstanceMaintenanceWindow:InstancesRdsMysqlInstanceMaintenanceWindow"
                    },
                    "description": "Maintenance Window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "description": "Memory size in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeNumber": {
                    "type": "integer",
                    "description": "The number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "General instance type, different from Custom instance type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstancesRdsMysqlInstanceNode:InstancesRdsMysqlInstanceNode"
                    },
                    "description": "Instance node information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionId": {
                    "type": "string",
                    "description": "The region of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageSpace": {
                    "type": "integer",
                    "description": "Total instance storage space. Unit: GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "description": "Instance storage type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageUse": {
                    "type": "integer",
                    "description": "The instance has used storage space. Unit: GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "description": "Time zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vCpu": {
                    "type": "integer",
                    "description": "CPU size.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowListVersion",
                "backupUse",
                "chargeDetail",
                "createTime",
                "dataSyncMode",
                "dbEngineVersion",
                "endpoints",
                "id",
                "instanceId",
                "instanceName",
                "instanceStatus",
                "lowerCaseTableNames",
                "maintenanceWindows",
                "memory",
                "nodeNumber",
                "nodeSpec",
                "nodes",
                "regionId",
                "storageSpace",
                "storageType",
                "storageUse",
                "subnetId",
                "timeZone",
                "updateTime",
                "vCpu",
                "vpcId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/InstancesRdsMysqlInstanceChargeDetail:InstancesRdsMysqlInstanceChargeDetail": {
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to automatically renew in prepaid scenarios.\nAutorenew_Enable\nAutorenew_Disable (default).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeEndTime": {
                    "type": "string",
                    "description": "Billing expiry time (yearly and monthly only).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeStartTime": {
                    "type": "string",
                    "description": "Billing start time (pay-as-you-go \u0026 monthly subscription).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeStatus": {
                    "type": "string",
                    "description": "Pay status. Value:\nnormal - normal\noverdue - overdue\n.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueReclaimTime": {
                    "type": "string",
                    "description": "Estimated release time when arrears are closed (pay-as-you-go \u0026 monthly subscription).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "Shutdown time in arrears (pay-as-you-go \u0026 monthly subscription).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "period": {
                    "type": "integer",
                    "description": "Purchase duration in prepaid scenarios. Default: 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "periodUnit": {
                    "type": "string",
                    "description": "The purchase cycle in the prepaid scenario.\nMonth - monthly subscription (default)\nYear - Package year.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoRenew",
                "chargeEndTime",
                "chargeStartTime",
                "chargeStatus",
                "chargeType",
                "overdueReclaimTime",
                "overdueTime",
                "period",
                "periodUnit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/InstancesRdsMysqlInstanceEndpoint:InstancesRdsMysqlInstanceEndpoint": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstancesRdsMysqlInstanceEndpointAddress:InstancesRdsMysqlInstanceEndpointAddress"
                    },
                    "description": "Address list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoAddNewNodes": {
                    "type": "string",
                    "description": "When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Address description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableReadOnly": {
                    "type": "string",
                    "description": "Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableReadWriteSplitting": {
                    "type": "string",
                    "description": "Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointId": {
                    "type": "string",
                    "description": "Instance connection terminal ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointName": {
                    "type": "string",
                    "description": "The instance connection terminal name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointType": {
                    "type": "string",
                    "description": "Terminal type:\nCluster: The default terminal. (created by default)\nPrimary: Primary node terminal.\nCustom: Custom terminal.\nDirect: Direct connection to the terminal. (Only the operation and maintenance side)\nAllNode: All node terminals. (Only the operation and maintenance side).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeWeights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstancesRdsMysqlInstanceEndpointNodeWeight:InstancesRdsMysqlInstanceEndpointNodeWeight"
                    },
                    "description": "The list of nodes configured by the connection terminal and the corresponding read-only weights.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readWriteMode": {
                    "type": "string",
                    "description": "Read and write mode:\nReadWrite: read and write\nReadOnly: read only (default).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "autoAddNewNodes",
                "description",
                "enableReadOnly",
                "enableReadWriteSplitting",
                "endpointId",
                "endpointName",
                "endpointType",
                "nodeWeights",
                "readWriteMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/InstancesRdsMysqlInstanceEndpointAddress:InstancesRdsMysqlInstanceEndpointAddress": {
            "properties": {
                "dnsVisibility": {
                    "type": "boolean",
                    "description": "DNS Visibility.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "Connect domain name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipId": {
                    "type": "string",
                    "description": "The ID of the EIP, only valid for Public addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP Address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkType": {
                    "type": "string",
                    "description": "Network address type, temporarily Private, Public, PublicService.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "The Port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsVisibility",
                "domain",
                "eipId",
                "ipAddress",
                "networkType",
                "port",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/InstancesRdsMysqlInstanceEndpointNodeWeight:InstancesRdsMysqlInstanceEndpointNodeWeight": {
            "properties": {
                "nodeId": {
                    "type": "string",
                    "description": "Node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeType": {
                    "type": "string",
                    "description": "Node type. Value: Primary: Primary node.\nSecondary: Standby node.\nReadOnly: Read-only node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeId",
                "nodeType",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/InstancesRdsMysqlInstanceMaintenanceWindow:InstancesRdsMysqlInstanceMaintenanceWindow": {
            "properties": {
                "dayKind": {
                    "type": "string",
                    "description": "DayKind of maintainable window. Value: Week. Month.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dayOfMonths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Days of maintainable window of the month.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dayOfWeeks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Days of maintainable window of the week.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The maintainable time of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dayKind",
                "dayOfMonths",
                "dayOfWeeks",
                "maintenanceTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_mysql/InstancesRdsMysqlInstanceNode:InstancesRdsMysqlInstanceNode": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "Node creation local time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "description": "Memory size in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "Node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "General instance type, different from Custom instance type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatus": {
                    "type": "string",
                    "description": "Node state, value: aligned with instance state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeType": {
                    "type": "string",
                    "description": "Node type. Value: Primary: Primary node.\nSecondary: Standby node.\nReadOnly: Read-only node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionId": {
                    "type": "string",
                    "description": "The region of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vCpu": {
                    "type": "integer",
                    "description": "CPU size.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "instanceId",
                "memory",
                "nodeId",
                "nodeSpec",
                "nodeStatus",
                "nodeType",
                "regionId",
                "updateTime",
                "vCpu",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_v2/RdsInstanceV2ChargeInfo:RdsInstanceV2ChargeInfo": {
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to automatically renew in prepaid scenarios.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "chargeType": {
                    "type": "string",
                    "description": "Payment type. Value:\nPostPaid - Pay-As-You-Go\nPrePaid - Yearly and monthly (default).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "period": {
                    "type": "integer",
                    "description": "Purchase duration in prepaid scenarios. Default: 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "periodUnit": {
                    "type": "string",
                    "description": "The purchase cycle in the prepaid scenario.\nMonth - monthly subscription (default)\nYear - Package year.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "chargeType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoRenew",
                        "chargeType",
                        "period",
                        "periodUnit"
                    ]
                }
            }
        },
        "volcengine:rds_v2/RdsInstanceV2ConnectionInfo:RdsInstanceV2ConnectionInfo": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_v2/RdsInstanceV2ConnectionInfoAddress:RdsInstanceV2ConnectionInfoAddress"
                    },
                    "description": "Address list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoAddNewNodes": {
                    "type": "string",
                    "description": "When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Address description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableReadOnly": {
                    "type": "string",
                    "description": "Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableReadWriteSplitting": {
                    "type": "string",
                    "description": "Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointId": {
                    "type": "string",
                    "description": "Instance connection terminal ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointName": {
                    "type": "string",
                    "description": "The instance connection terminal name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointType": {
                    "type": "string",
                    "description": "Terminal type:\nCluster: The default terminal. (created by default)\nPrimary: Primary node terminal.\nCustom: Custom terminal.\nDirect: Direct connection to the terminal. (Only the operation and maintenance side)\nAllNode: All node terminals. (Only the operation and maintenance side).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnlyNodeWeights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_v2/RdsInstanceV2ConnectionInfoReadOnlyNodeWeight:RdsInstanceV2ConnectionInfoReadOnlyNodeWeight"
                    },
                    "description": "The list of nodes configured by the connection terminal and the corresponding read-only weights.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readWriteMode": {
                    "type": "string",
                    "description": "Read and write mode:\nReadWrite: read and write\nReadOnly: read only (default).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addresses",
                        "autoAddNewNodes",
                        "description",
                        "enableReadOnly",
                        "enableReadWriteSplitting",
                        "endpointId",
                        "endpointName",
                        "endpointType",
                        "readOnlyNodeWeights",
                        "readWriteMode"
                    ]
                }
            }
        },
        "volcengine:rds_v2/RdsInstanceV2ConnectionInfoAddress:RdsInstanceV2ConnectionInfoAddress": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Connect domain name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipId": {
                    "type": "string",
                    "description": "The ID of the EIP, only valid for Public addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP Address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkType": {
                    "type": "string",
                    "description": "Network address type, temporarily Private, Public, PublicService.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "The Port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "domain",
                        "eipId",
                        "ipAddress",
                        "networkType",
                        "port",
                        "subnetId"
                    ]
                }
            }
        },
        "volcengine:rds_v2/RdsInstanceV2ConnectionInfoReadOnlyNodeWeight:RdsInstanceV2ConnectionInfoReadOnlyNodeWeight": {
            "properties": {
                "nodeId": {
                    "type": "string",
                    "description": "The ID of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeType": {
                    "type": "string",
                    "description": "Node type, the value is \"Primary\", \"Secondary\", \"ReadOnly\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeId",
                        "nodeType",
                        "weight"
                    ]
                }
            }
        },
        "volcengine:rds_v2/RdsInstanceV2NodeInfo:RdsInstanceV2NodeInfo": {
            "properties": {
                "nodeId": {
                    "type": "string",
                    "description": "The ID of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "Masternode specs. Pass\nDescribeDBInstanceSpecs Query the instance specifications that can be sold.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeType": {
                    "type": "string",
                    "description": "Node type, the value is \"Primary\", \"Secondary\", \"ReadOnly\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "Zone ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeSpec",
                "nodeType",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeId",
                        "nodeSpec",
                        "nodeType",
                        "zoneId"
                    ]
                }
            }
        },
        "volcengine:rds_v2/RdsInstancesV2RdsInstance:RdsInstancesV2RdsInstance": {
            "properties": {
                "chargeDetail": {
                    "$ref": "#/types/volcengine:rds_v2/RdsInstancesV2RdsInstanceChargeDetail:RdsInstancesV2RdsInstanceChargeDetail",
                    "description": "Payment methods.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_v2/RdsInstancesV2RdsInstanceConnectionInfo:RdsInstancesV2RdsInstanceConnectionInfo"
                    },
                    "description": "The connection info ot the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "Node creation local time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbEngine": {
                    "type": "string",
                    "description": "The engine of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "The version of the RDS instance, Value:\nMySQL Community:\nMySQL_5.7 - MySQL 5.7\nMySQL_8_0 - MySQL 8.0\nPostgreSQL Community:\nPostgreSQL_11 - PostgreSQL 11\nPostgreSQL_12 - PostgreSQL 12\nMicrosoft SQL Server: Not available at this time\nSQLServer_2019 - SQL Server 2019\nveDB for MySQL:\nMySQL_8_0 - MySQL 8.0\nveDB for PostgreSQL:\nPostgreSQL_13 - PostgreSQL 13.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceStatus": {
                    "type": "string",
                    "description": "The status of the RDS instance, Value:\nRunning - running\nCreating - Creating\nDeleting - Deleting\nRestarting - Restarting\nRestoring - Restoring\nUpdating - changing\nUpgrading - Upgrading\nError - the error.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the RDS instance, Value:\nValue:\nRDS for MySQL:\nHA - high availability version;\nRDS for PostgreSQL:\nHA - high availability version;\nMicrosoft SQL Server: Not available at this time\nEnterprise - Enterprise Edition\nStandard - Standard Edition\nWeb - Web version\nveDB for MySQL:\nCluster - Cluster Edition\nveDB for PostgreSQL:\nCluster - Cluster Edition\nMySQL Sharding:\nHA - high availability version;.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeDetailInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_v2/RdsInstancesV2RdsInstanceNodeDetailInfo:RdsInstancesV2RdsInstanceNodeDetailInfo"
                    },
                    "description": "Instance node information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeNumber": {
                    "type": "integer",
                    "description": "The number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "General instance type, different from Custom instance type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Instance intranet port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "Subordinate to the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionId": {
                    "type": "string",
                    "description": "The region of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardNumber": {
                    "type": "integer",
                    "description": "The number of shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageSpace": {
                    "type": "integer",
                    "description": "Total instance storage space. Unit: GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "description": "Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:\nLocalSSD - local SSD disk\nWhen the database type is veDB_MySQL/veDB_PostgreSQL, the value is:\nDistributedStorage - Distributed Storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageUse": {
                    "type": "integer",
                    "description": "The instance has used storage space. Unit: GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "description": "Time zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chargeDetail",
                "connectionInfos",
                "createTime",
                "dbEngine",
                "dbEngineVersion",
                "id",
                "instanceId",
                "instanceName",
                "instanceStatus",
                "instanceType",
                "nodeDetailInfos",
                "nodeNumber",
                "nodeSpec",
                "port",
                "projectName",
                "regionId",
                "shardNumber",
                "storageSpace",
                "storageType",
                "storageUse",
                "subnetId",
                "timeZone",
                "vpcId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_v2/RdsInstancesV2RdsInstanceChargeDetail:RdsInstancesV2RdsInstanceChargeDetail": {
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to automatically renew in prepaid scenarios.\nAutorenew_Enable\nAutorenew_Disable (default).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeEndTime": {
                    "type": "string",
                    "description": "Billing expiry time (yearly and monthly only).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeStartTime": {
                    "type": "string",
                    "description": "Billing start time (pay-as-you-go \u0026 monthly subscription).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeStatus": {
                    "type": "string",
                    "description": "Pay status. Value:\nnormal - normal\noverdue - overdue\n.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueReclaimTime": {
                    "type": "string",
                    "description": "Estimated release time when arrears are closed (pay-as-you-go \u0026 monthly subscription).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "Shutdown time in arrears (pay-as-you-go \u0026 monthly subscription).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "period": {
                    "type": "integer",
                    "description": "Purchase duration in prepaid scenarios. Default: 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "periodUnit": {
                    "type": "string",
                    "description": "The purchase cycle in the prepaid scenario.\nMonth - monthly subscription (default)\nYear - Package year.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoRenew",
                "chargeEndTime",
                "chargeStartTime",
                "chargeStatus",
                "chargeType",
                "overdueReclaimTime",
                "overdueTime",
                "period",
                "periodUnit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_v2/RdsInstancesV2RdsInstanceConnectionInfo:RdsInstancesV2RdsInstanceConnectionInfo": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_v2/RdsInstancesV2RdsInstanceConnectionInfoAddress:RdsInstancesV2RdsInstanceConnectionInfoAddress"
                    },
                    "description": "Address list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoAddNewNodes": {
                    "type": "string",
                    "description": "When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Address description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableReadOnly": {
                    "type": "string",
                    "description": "Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableReadWriteSplitting": {
                    "type": "string",
                    "description": "Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointId": {
                    "type": "string",
                    "description": "Instance connection terminal ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointName": {
                    "type": "string",
                    "description": "The instance connection terminal name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointType": {
                    "type": "string",
                    "description": "Terminal type:\nCluster: The default terminal. (created by default)\nPrimary: Primary node terminal.\nCustom: Custom terminal.\nDirect: Direct connection to the terminal. (Only the operation and maintenance side)\nAllNode: All node terminals. (Only the operation and maintenance side).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnlyNodeWeights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_v2/RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight:RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight"
                    },
                    "description": "The list of nodes configured by the connection terminal and the corresponding read-only weights.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readWriteMode": {
                    "type": "string",
                    "description": "Read and write mode:\nReadWrite: read and write\nReadOnly: read only (default).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "autoAddNewNodes",
                "description",
                "enableReadOnly",
                "enableReadWriteSplitting",
                "endpointId",
                "endpointName",
                "endpointType",
                "readOnlyNodeWeights",
                "readWriteMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_v2/RdsInstancesV2RdsInstanceConnectionInfoAddress:RdsInstancesV2RdsInstanceConnectionInfoAddress": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Connect domain name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipId": {
                    "type": "string",
                    "description": "The ID of the EIP, only valid for Public addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP Address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkType": {
                    "type": "string",
                    "description": "Network address type, temporarily Private, Public, PublicService.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Instance intranet port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "domain",
                "eipId",
                "ipAddress",
                "networkType",
                "port",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_v2/RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight:RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight": {
            "properties": {
                "nodeId": {
                    "type": "string",
                    "description": "Node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeType": {
                    "type": "string",
                    "description": "Node type. Value: Primary: Primary node.\nSecondary: Standby node.\nReadOnly: Read-only node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeId",
                "nodeType",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:rds_v2/RdsInstancesV2RdsInstanceNodeDetailInfo:RdsInstancesV2RdsInstanceNodeDetailInfo": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "Node creation local time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "description": "Memory size in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "Node ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "General instance type, different from Custom instance type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatus": {
                    "type": "string",
                    "description": "Node state, value: aligned with instance state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeType": {
                    "type": "string",
                    "description": "Node type. Value: Primary: Primary node.\nSecondary: Standby node.\nReadOnly: Read-only node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionId": {
                    "type": "string",
                    "description": "The region of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "Node updates local time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vCpu": {
                    "type": "integer",
                    "description": "CPU size. For example: 1 means 1U.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone of the RDS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "instanceId",
                "memory",
                "nodeId",
                "nodeSpec",
                "nodeStatus",
                "nodeType",
                "regionId",
                "updateTime",
                "vCpu",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/AccountsAccount:AccountsAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The name of the redis account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the redis account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the Redis instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "description": "The role info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "description",
                "instanceId",
                "roleName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/AllowListAssociatedInstance:AllowListAssociatedInstance": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "Name of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "Id of virtual private cloud.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "instanceId",
                        "instanceName",
                        "vpc"
                    ]
                }
            }
        },
        "volcengine:redis/AllowListsAllowList:AllowListsAllowList": {
            "properties": {
                "allowListDesc": {
                    "type": "string",
                    "description": "Description of allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListId": {
                    "type": "string",
                    "description": "Id of allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListIpNum": {
                    "type": "integer",
                    "description": "The IP number of allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListName": {
                    "type": "string",
                    "description": "Name of allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowListType": {
                    "type": "string",
                    "description": "Type of allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ip list of allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedInstanceNum": {
                    "type": "integer",
                    "description": "The number of instance that associated to allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/AllowListsAllowListAssociatedInstance:AllowListsAllowListAssociatedInstance"
                    },
                    "description": "Instances associated by this allow list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowLists",
                "allowListDesc",
                "allowListId",
                "allowListIpNum",
                "allowListName",
                "allowListType",
                "associatedInstanceNum",
                "associatedInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/AllowListsAllowListAssociatedInstance:AllowListsAllowListAssociatedInstance": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The Id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "Name of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "Id of virtual private cloud.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceId",
                "instanceName",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/BackupInstanceDetail:BackupInstanceDetail": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Id of account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "archType": {
                    "type": "string",
                    "description": "Arch type of instance(Standard/Cluster).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "Charge type of instance(Postpaid/Prepaid).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engineVersion": {
                    "type": "string",
                    "description": "Engine version of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "description": "Expired time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance to create backup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "Name of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The maintainable period (in UTC) of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkType": {
                    "type": "string",
                    "description": "Network type of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "Project name of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionId": {
                    "type": "string",
                    "description": "Id of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicas": {
                    "type": "integer",
                    "description": "Count of replica in which shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCpu": {
                    "type": "integer",
                    "description": "Count of cpu cores of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardCapacity": {
                    "type": "integer",
                    "description": "Capacity of shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardCount": {
                    "type": "integer",
                    "description": "Count of shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalCapacity": {
                    "type": "integer",
                    "description": "Total capacity of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedCapacity": {
                    "type": "integer",
                    "description": "Capacity used of this instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/BackupInstanceDetailVpcInfo:BackupInstanceDetailVpcInfo"
                    },
                    "description": "Information of vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of id of zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountId",
                        "archType",
                        "chargeType",
                        "engineVersion",
                        "expiredTime",
                        "instanceId",
                        "instanceName",
                        "maintenanceTime",
                        "networkType",
                        "projectName",
                        "regionId",
                        "replicas",
                        "serverCpu",
                        "shardCapacity",
                        "shardCount",
                        "totalCapacity",
                        "usedCapacity",
                        "vpcInfos",
                        "zoneIds"
                    ]
                }
            }
        },
        "volcengine:redis/BackupInstanceDetailVpcInfo:BackupInstanceDetailVpcInfo": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "volcengine:redis/BackupsBackup:BackupsBackup": {
            "properties": {
                "backupPointId": {
                    "type": "string",
                    "description": "The id of backup point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupStrategy": {
                    "type": "string",
                    "description": "Backup strategy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupType": {
                    "type": "string",
                    "description": "Backup type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endTime": {
                    "type": "string",
                    "description": "Query end time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/BackupsBackupInstanceDetail:BackupsBackupInstanceDetail"
                    },
                    "description": "Information of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "Size in MiB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "Query start time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Status of backup (Creating/Available/Unavailable/Deleting).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backupPointId",
                "backupStrategy",
                "backupType",
                "endTime",
                "instanceDetails",
                "instanceId",
                "size",
                "startTime",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/BackupsBackupInstanceDetail:BackupsBackupInstanceDetail": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "description": "Id of account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "archType": {
                    "type": "string",
                    "description": "Arch type of instance(Standard/Cluster).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "Charge type of instance(Postpaid/Prepaid).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engineVersion": {
                    "type": "string",
                    "description": "Engine version of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "description": "Expired time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "Name of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The maintainable period (in UTC) of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkType": {
                    "type": "string",
                    "description": "Network type of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "Project name of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionId": {
                    "type": "string",
                    "description": "Id of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicas": {
                    "type": "integer",
                    "description": "Count of replica in which shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCpu": {
                    "type": "integer",
                    "description": "Count of cpu cores of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardCapacity": {
                    "type": "integer",
                    "description": "Capacity of shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardCount": {
                    "type": "integer",
                    "description": "Count of shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalCapacity": {
                    "type": "integer",
                    "description": "Total capacity of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedCapacity": {
                    "type": "integer",
                    "description": "Capacity used of this instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/BackupsBackupInstanceDetailVpcInfo:BackupsBackupInstanceDetailVpcInfo"
                    },
                    "description": "Information of vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of id of zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "archType",
                "chargeType",
                "engineVersion",
                "expiredTime",
                "instanceId",
                "instanceName",
                "maintenanceTime",
                "networkType",
                "projectName",
                "regionId",
                "replicas",
                "serverCpu",
                "shardCapacity",
                "shardCount",
                "totalCapacity",
                "usedCapacity",
                "vpcInfos",
                "zoneIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/BackupsBackupInstanceDetailVpcInfo:BackupsBackupInstanceDetailVpcInfo": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/InstanceParamValue:InstanceParamValue": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of configuration parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of configuration parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "volcengine:redis/InstanceTag:InstanceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:redis/InstancesInstance:InstancesInstance": {
            "properties": {
                "backupPlan": {
                    "$ref": "#/types/volcengine:redis/InstancesInstanceBackupPlan:InstancesInstanceBackupPlan",
                    "description": "The list of backup plans.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "capacity": {
                    "$ref": "#/types/volcengine:redis/InstancesInstanceCapacity:InstancesInstanceCapacity",
                    "description": "The memory capacity information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of redis instance to query. Valid values: `PostPaid`, `PrePaid`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of the redis instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletionProtection": {
                    "type": "string",
                    "description": "whether enable deletion protection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The engine version of redis instance to query. Valid values: `4.0`, `5.0`, `6.0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "description": "The expire time of the redis instance, valid when charge type is `PrePaid`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the redis instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of redis instance to query. This field supports fuzzy queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of redis instance to query. This field supports fuzzy queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The maintainable time of the redis instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of redis instance node IDs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeNumber": {
                    "type": "integer",
                    "description": "The number of nodes in each shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/InstancesInstanceParam:InstancesInstanceParam"
                    },
                    "description": "The list of params.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name of redis instance to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionId": {
                    "type": "string",
                    "description": "The region id of the redis instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardCapacity": {
                    "type": "number",
                    "description": "The memory capacity of each shard. Unit: GiB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardNumber": {
                    "type": "integer",
                    "description": "The number of shards in the redis instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardedCluster": {
                    "type": "integer",
                    "description": "Whether enable sharded cluster for redis instance. Valid values: 0, 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of redis instance to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet id of the redis instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/InstancesInstanceTag:InstancesInstanceTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visitAddrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/InstancesInstanceVisitAddr:InstancesInstanceVisitAddr"
                    },
                    "description": "The list of connection information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcAuthMode": {
                    "type": "string",
                    "description": "Whether to enable password-free access when connecting to an instance through a private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc id of redis instance to query. This field supports fuzzy queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of zone ID which the redis instance belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backupPlan",
                "capacity",
                "chargeType",
                "createTime",
                "deletionProtection",
                "engineVersion",
                "expiredTime",
                "id",
                "instanceId",
                "instanceName",
                "maintenanceTime",
                "nodeIds",
                "nodeNumber",
                "params",
                "projectName",
                "regionId",
                "shardCapacity",
                "shardNumber",
                "shardedCluster",
                "status",
                "subnetId",
                "tags",
                "visitAddrs",
                "vpcAuthMode",
                "vpcId",
                "zoneIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/InstancesInstanceBackupPlan:InstancesInstanceBackupPlan": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether enable auto backup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupHour": {
                    "type": "integer",
                    "description": "The time period to start performing the backup. The value range is any integer between 0 and 23, where 0 means that the system will perform the backup in the period of 00:00~01:00, 1 means that the backup will be performed in the period of 01:00~02:00, and so on.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupType": {
                    "type": "string",
                    "description": "The backup type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expectNextBackupTime": {
                    "type": "string",
                    "description": "The expected time for the next backup to be performed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of redis instance to query. This field supports fuzzy queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdateTime": {
                    "type": "string",
                    "description": "The last time the backup policy was modified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "periods": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The backup cycle. The value can be any integer between 1 and 7. Among them, 1 means backup every Monday, 2 means backup every Tuesday, and so on.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "The number of days to keep backups, the default is 7 days.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "active",
                "backupHour",
                "backupType",
                "expectNextBackupTime",
                "instanceId",
                "lastUpdateTime",
                "periods",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/InstancesInstanceCapacity:InstancesInstanceCapacity": {
            "properties": {
                "total": {
                    "type": "integer",
                    "description": "The total memory capacity of the redis instance. Unit: MiB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "used": {
                    "type": "integer",
                    "description": "The used memory capacity of the redis instance. Unit: MiB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "total",
                "used"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/InstancesInstanceParam:InstancesInstanceParam": {
            "properties": {
                "currentValue": {
                    "type": "string",
                    "description": "Current value of the configuration parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultValue": {
                    "type": "string",
                    "description": "Default value of the configuration parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of this option item.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "editableForInstance": {
                    "type": "boolean",
                    "description": "Whether the current redis instance supports editing this parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "needReboot": {
                    "type": "boolean",
                    "description": "Whether need to reboot the redis instance when modifying this parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/InstancesInstanceParamOption:InstancesInstanceParamOption"
                    },
                    "description": "The list of options. Valid when the configuration parameter type is `Radio`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "paramName": {
                    "type": "string",
                    "description": "The name of the configuration parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "range": {
                    "type": "string",
                    "description": "The valid value range of the numeric type configuration parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the configuration parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unit": {
                    "type": "string",
                    "description": "The unit of the numeric type configuration parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "currentValue",
                "defaultValue",
                "description",
                "editableForInstance",
                "needReboot",
                "options",
                "paramName",
                "range",
                "type",
                "unit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/InstancesInstanceParamOption:InstancesInstanceParamOption": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of this option item.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/InstancesInstanceTag:InstancesInstanceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/InstancesInstanceVisitAddr:InstancesInstanceVisitAddr": {
            "properties": {
                "addrType": {
                    "type": "string",
                    "description": "The connection address type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "address": {
                    "type": "string",
                    "description": "The connection address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipId": {
                    "type": "string",
                    "description": "The EIP ID bound to the instance's public network address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "The connection port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addrType",
                "address",
                "eipId",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/InstancesTag:InstancesTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:redis/PitrTimeWindowsPeriod:PitrTimeWindowsPeriod": {
            "properties": {
                "endTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "instanceId",
                "startTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/RegionsRegion:RegionsRegion": {
            "properties": {
                "regionId": {
                    "type": "string",
                    "description": "Target region info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionName": {
                    "type": "string",
                    "description": "The name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "regionId",
                "regionName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:redis/ZonesZone:ZonesZone": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneName": {
                    "type": "string",
                    "description": "The name of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "zoneId",
                "zoneName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/AlarmAlarmPeriodDetail:AlarmAlarmPeriodDetail": {
            "properties": {
                "email": {
                    "type": "integer",
                    "description": "Email alarm period, the unit is minutes, and the value range is 1~1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "generalWebhook": {
                    "type": "integer",
                    "description": "Customize the webhook alarm period, the unit is minutes, and the value range is 1~1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phone": {
                    "type": "integer",
                    "description": "Telephone alarm cycle, the unit is minutes, and the value range is 10~1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sms": {
                    "type": "integer",
                    "description": "SMS alarm cycle, the unit is minutes, and the value range is 10~1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email",
                "generalWebhook",
                "phone",
                "sms"
            ]
        },
        "volcengine:tls/AlarmNotifyGroupReceiver:AlarmNotifyGroupReceiver": {
            "properties": {
                "endTime": {
                    "type": "string",
                    "description": "The end time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiverChannels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the receiver channels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiverNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the receiver names.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiverType": {
                    "type": "string",
                    "description": "The receiver type, value can be User.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "The start time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "receiverChannels",
                "receiverNames",
                "receiverType",
                "startTime"
            ]
        },
        "volcengine:tls/AlarmNotifyGroupsGroup:AlarmNotifyGroupsGroup": {
            "properties": {
                "alarmNotifyGroupId": {
                    "type": "string",
                    "description": "The id of the alarm notify group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmNotifyGroupName": {
                    "type": "string",
                    "description": "The name of the alarm notify group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time the notification.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iamProjectName": {
                    "type": "string",
                    "description": "The name of the iam project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modification time the notification.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifyTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The notify group type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/AlarmNotifyGroupsGroupReceiver:AlarmNotifyGroupsGroupReceiver"
                    },
                    "description": "List of IAM users to receive alerts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alarmNotifyGroupId",
                "alarmNotifyGroupName",
                "createTime",
                "iamProjectName",
                "modifyTime",
                "notifyTypes",
                "receivers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/AlarmNotifyGroupsGroupReceiver:AlarmNotifyGroupsGroupReceiver": {
            "properties": {
                "endTime": {
                    "type": "string",
                    "description": "The end time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiverChannels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the receiver channels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiverNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the receiver names.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiverType": {
                    "type": "string",
                    "description": "The receiver type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "The start time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "receiverChannels",
                "receiverNames",
                "receiverType",
                "startTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/AlarmQueryRequest:AlarmQueryRequest": {
            "properties": {
                "endTimeOffset": {
                    "type": "integer",
                    "description": "The end time of the query range is relative to the current historical time. The unit is minutes. The value is not positive and must be greater than StartTimeOffset. The maximum value is 0 and the minimum value is -1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "number": {
                    "type": "integer",
                    "description": "Alarm object sequence number; increments from 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "Query statement, the maximum supported length is 1024.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTimeOffset": {
                    "type": "integer",
                    "description": "The start time of the query range is relative to the current historical time, in minutes. The value is non-positive, the maximum value is 0, and the minimum value is -1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicId": {
                    "type": "string",
                    "description": "The id of the topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endTimeOffset",
                "number",
                "query",
                "startTimeOffset",
                "topicId"
            ]
        },
        "volcengine:tls/AlarmRequestCycle:AlarmRequestCycle": {
            "properties": {
                "time": {
                    "type": "integer",
                    "description": "The cycle of alarm task execution, or the time point of periodic execution. The unit is minutes, and the value range is 1~1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Execution cycle type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "time",
                "type"
            ]
        },
        "volcengine:tls/AlarmsAlarm:AlarmsAlarm": {
            "properties": {
                "alarmId": {
                    "type": "string",
                    "description": "The alarm id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmName": {
                    "type": "string",
                    "description": "The alarm name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmNotifyGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/AlarmsAlarmAlarmNotifyGroup:AlarmsAlarmAlarmNotifyGroup"
                    },
                    "description": "List of notification groups corresponding to the alarm.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmPeriod": {
                    "type": "integer",
                    "description": "Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmPeriodDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/AlarmsAlarmAlarmPeriodDetail:AlarmsAlarmAlarmPeriodDetail"
                    },
                    "description": "Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "condition": {
                    "type": "string",
                    "description": "Alarm trigger condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modify time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/AlarmsAlarmQueryRequest:AlarmsAlarmQueryRequest"
                    },
                    "description": "Search and analyze sentences, 1~3 can be configured.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestCycles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/AlarmsAlarmRequestCycle:AlarmsAlarmRequestCycle"
                    },
                    "description": "The execution period of the alarm task.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "boolean",
                    "description": "The status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerPeriod": {
                    "type": "integer",
                    "description": "Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userDefineMsg": {
                    "type": "string",
                    "description": "Customize the alarm notification content.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alarmId",
                "alarmName",
                "alarmNotifyGroups",
                "alarmPeriod",
                "alarmPeriodDetails",
                "condition",
                "createTime",
                "modifyTime",
                "projectId",
                "queryRequests",
                "requestCycles",
                "status",
                "triggerPeriod",
                "userDefineMsg"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/AlarmsAlarmAlarmNotifyGroup:AlarmsAlarmAlarmNotifyGroup": {
            "properties": {
                "alarmNotifyGroupId": {
                    "type": "string",
                    "description": "The id of the notify group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alarmNotifyGroupName": {
                    "type": "string",
                    "description": "Name of the notification group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iamProjectName": {
                    "type": "string",
                    "description": "The iam project name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modify time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifyTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The notify group type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/AlarmsAlarmAlarmNotifyGroupReceiver:AlarmsAlarmAlarmNotifyGroupReceiver"
                    },
                    "description": "List of IAM users to receive alerts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alarmNotifyGroupId",
                "alarmNotifyGroupName",
                "createTime",
                "iamProjectName",
                "modifyTime",
                "notifyTypes",
                "receivers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/AlarmsAlarmAlarmNotifyGroupReceiver:AlarmsAlarmAlarmNotifyGroupReceiver": {
            "properties": {
                "endTime": {
                    "type": "string",
                    "description": "The end time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiverChannels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the receiver channels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiverNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the receiver names.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiverType": {
                    "type": "string",
                    "description": "The receiver type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "The start time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "receiverChannels",
                "receiverNames",
                "receiverType",
                "startTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/AlarmsAlarmAlarmPeriodDetail:AlarmsAlarmAlarmPeriodDetail": {
            "properties": {
                "email": {
                    "type": "integer",
                    "description": "Email alarm period, the unit is minutes, and the value range is 1~1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "generalWebhook": {
                    "type": "integer",
                    "description": "Customize the webhook alarm period, the unit is minutes, and the value range is 1~1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phone": {
                    "type": "integer",
                    "description": "Telephone alarm cycle, the unit is minutes, and the value range is 10~1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sms": {
                    "type": "integer",
                    "description": "SMS alarm cycle, the unit is minutes, and the value range is 10~1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email",
                "generalWebhook",
                "phone",
                "sms"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/AlarmsAlarmQueryRequest:AlarmsAlarmQueryRequest": {
            "properties": {
                "endTimeOffset": {
                    "type": "integer",
                    "description": "The end time of the query range is relative to the current historical time. The unit is minutes. The value is not positive and must be greater than StartTimeOffset. The maximum value is 0 and the minimum value is -1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "number": {
                    "type": "integer",
                    "description": "Alarm object sequence number; increments from 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "Query statement, the maximum supported length is 1024.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTimeOffset": {
                    "type": "integer",
                    "description": "The start time of the query range is relative to the current historical time, in minutes. The value is non-positive, the maximum value is 0, and the minimum value is -1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicId": {
                    "type": "string",
                    "description": "The topic id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicName": {
                    "type": "string",
                    "description": "The topic name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endTimeOffset",
                "number",
                "query",
                "startTimeOffset",
                "topicId",
                "topicName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/AlarmsAlarmRequestCycle:AlarmsAlarmRequestCycle": {
            "properties": {
                "time": {
                    "type": "integer",
                    "description": "The cycle of alarm task execution, or the time point of periodic execution. The unit is minutes, and the value range is 1~1440.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Execution cycle type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "time",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/HostGroupsInfo:HostGroupsInfo": {
            "properties": {
                "abnormalHeartbeatStatusCount": {
                    "type": "integer",
                    "description": "The abnormal heartbeat status count of host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentLatestVersion": {
                    "type": "string",
                    "description": "The latest version of log collector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Whether enable auto update.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of host group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostCount": {
                    "type": "integer",
                    "description": "The count of host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "The id of host group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostGroupName": {
                    "type": "string",
                    "description": "The name of host group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostGroupType": {
                    "type": "string",
                    "description": "The type of host group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostIdentifier": {
                    "type": "string",
                    "description": "The identifier of host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ip list of host group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iamProjectName": {
                    "type": "string",
                    "description": "The project name of iam.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modify time of host group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "normalHeartbeatStatusCount": {
                    "type": "integer",
                    "description": "The normal heartbeat status count of host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleCount": {
                    "type": "integer",
                    "description": "The rule count of host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceLogging": {
                    "type": "boolean",
                    "description": "Whether enable service logging.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateEndTime": {
                    "type": "string",
                    "description": "The update end time of log collector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateStartTime": {
                    "type": "string",
                    "description": "The update start time of log collector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "abnormalHeartbeatStatusCount",
                "agentLatestVersion",
                "autoUpdate",
                "createTime",
                "hostCount",
                "hostGroupId",
                "hostGroupName",
                "hostGroupType",
                "hostIdentifier",
                "hostIpLists",
                "iamProjectName",
                "modifyTime",
                "normalHeartbeatStatusCount",
                "ruleCount",
                "serviceLogging",
                "updateEndTime",
                "updateStartTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/HostsHostInfo:HostsHostInfo": {
            "properties": {
                "heartbeatStatus": {
                    "type": "integer",
                    "description": "The the heartbeat status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "The id of host group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logCollectorVersion": {
                    "type": "string",
                    "description": "The version of log collector.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "heartbeatStatus",
                "hostGroupId",
                "ip",
                "logCollectorVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/IndexFullText:IndexFullText": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "Whether the FullTextInfo is case sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delimiter": {
                    "type": "string",
                    "description": "The delimiter of the FullTextInfo.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeChinese": {
                    "type": "boolean",
                    "description": "Whether the FullTextInfo include chinese.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caseSensitive"
            ]
        },
        "volcengine:tls/IndexKeyValue:IndexKeyValue": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "Whether the value is case sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delimiter": {
                    "type": "string",
                    "description": "The delimiter of the value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeChinese": {
                    "type": "boolean",
                    "description": "Whether the value include chinese.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "jsonKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/IndexKeyValueJsonKey:IndexKeyValueJsonKey"
                    },
                    "description": "The JSON subfield key value index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The key of the KeyValueInfo.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sqlFlag": {
                    "type": "boolean",
                    "description": "Whether the filed is enabled for analysis.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueType": {
                    "type": "string",
                    "description": "The type of value. Valid values: `long`, `double`, `text`, `json`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "valueType"
            ]
        },
        "volcengine:tls/IndexKeyValueJsonKey:IndexKeyValueJsonKey": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the subfield key value index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueType": {
                    "type": "string",
                    "description": "The type of value. Valid values: `long`, `double`, `text`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "valueType"
            ]
        },
        "volcengine:tls/IndexesTlsIndex:IndexesTlsIndex": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The create time of the tls index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fullText": {
                    "$ref": "#/types/volcengine:tls/IndexesTlsIndexFullText:IndexesTlsIndexFullText",
                    "description": "The FullText index of the tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The topic id of the tls index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/IndexesTlsIndexKeyValue:IndexesTlsIndexKeyValue"
                    },
                    "description": "The KeyValue index of the tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modify time of the tls index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicId": {
                    "type": "string",
                    "description": "The topic id of the tls index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "fullText",
                "id",
                "keyValues",
                "modifyTime",
                "topicId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/IndexesTlsIndexFullText:IndexesTlsIndexFullText": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "Whether the value is case sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delimiter": {
                    "type": "string",
                    "description": "The delimiter of the value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeChinese": {
                    "type": "boolean",
                    "description": "Whether the value include chinese.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caseSensitive",
                "delimiter",
                "includeChinese"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/IndexesTlsIndexKeyValue:IndexesTlsIndexKeyValue": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "Whether the value is case sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delimiter": {
                    "type": "string",
                    "description": "The delimiter of the value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeChinese": {
                    "type": "boolean",
                    "description": "Whether the value include chinese.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "jsonKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/IndexesTlsIndexKeyValueJsonKey:IndexesTlsIndexKeyValueJsonKey"
                    },
                    "description": "The JSON subfield key value index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The key of the KeyValue index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sqlFlag": {
                    "type": "boolean",
                    "description": "Whether the filed is enabled for analysis.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueType": {
                    "type": "string",
                    "description": "The type of value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caseSensitive",
                "delimiter",
                "includeChinese",
                "jsonKeys",
                "key",
                "sqlFlag",
                "valueType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/IndexesTlsIndexKeyValueJsonKey:IndexesTlsIndexKeyValueJsonKey": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "Whether the value is case sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delimiter": {
                    "type": "string",
                    "description": "The delimiter of the value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeChinese": {
                    "type": "boolean",
                    "description": "Whether the value include chinese.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The key of the KeyValue index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sqlFlag": {
                    "type": "boolean",
                    "description": "Whether the filed is enabled for analysis.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueType": {
                    "type": "string",
                    "description": "The type of value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caseSensitive",
                "delimiter",
                "includeChinese",
                "key",
                "sqlFlag",
                "valueType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/KafkaConsumersData:KafkaConsumersData": {
            "properties": {
                "allowConsume": {
                    "type": "boolean",
                    "description": "Whether allow consume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "consumeTopic": {
                    "type": "string",
                    "description": "The topic of consume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicId": {
                    "type": "string",
                    "description": "The ID of Topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowConsume",
                "consumeTopic",
                "topicId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/ProjectTag:ProjectTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:tls/ProjectsTag:ProjectsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:tls/ProjectsTlsProject:ProjectsTlsProject": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The create time of the tls project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the tls project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iamProjectName": {
                    "type": "string",
                    "description": "The IAM project name of the tls project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the tls project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "innerNetDomain": {
                    "type": "string",
                    "description": "The inner net domain of the tls project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The id of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The name of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/ProjectsTlsProjectTag:ProjectsTlsProjectTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicCount": {
                    "type": "integer",
                    "description": "The count of topics in the tls project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "description",
                "iamProjectName",
                "id",
                "innerNetDomain",
                "projectId",
                "projectName",
                "tags",
                "topicCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/ProjectsTlsProjectTag:ProjectsTlsProjectTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRule:RuleAppliersRule": {
            "properties": {
                "containerRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleContainerRule:RuleAppliersRuleContainerRule"
                    },
                    "description": "Container collection rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleExcludePath:RuleAppliersRuleExcludePath"
                    },
                    "description": "Collect the blacklist list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extractRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleExtractRule:RuleAppliersRuleExtractRule"
                    },
                    "description": "The extract rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputType": {
                    "type": "integer",
                    "description": "The collection type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logSample": {
                    "type": "string",
                    "description": "Log sample.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logType": {
                    "type": "string",
                    "description": "The log type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modification time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Collection path list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleId": {
                    "type": "string",
                    "description": "The rule id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleName": {
                    "type": "string",
                    "description": "The rule name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicId": {
                    "type": "string",
                    "description": "The topic id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicName": {
                    "type": "string",
                    "description": "The topic name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userDefineRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleUserDefineRule:RuleAppliersRuleUserDefineRule"
                    },
                    "description": "User-defined collection rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "containerRules",
                "createTime",
                "excludePaths",
                "extractRules",
                "inputType",
                "logSample",
                "logType",
                "modifyTime",
                "paths",
                "ruleId",
                "ruleName",
                "topicId",
                "topicName",
                "userDefineRules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleContainerRule:RuleAppliersRuleContainerRule": {
            "properties": {
                "containerNameRegex": {
                    "type": "string",
                    "description": "The name of the container to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "envTag": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Whether to add environment variables as log tags to raw log data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeContainerEnvRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The container environment variable blacklist is used to specify the range of containers not to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeContainerLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The container Label blacklist is used to specify the range of containers not to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeContainerEnvRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The container environment variable whitelist specifies the container to be collected through the container environment variable. If the whitelist is not enabled, it means that all containers are specified to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeContainerLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The container label whitelist specifies the containers to be collected through the container label. If the whitelist is not enabled, all containers are specified to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleContainerRuleKubernetesRule:RuleAppliersRuleContainerRuleKubernetesRule"
                    },
                    "description": "Collection rules for Kubernetes containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stream": {
                    "type": "string",
                    "description": "The collection mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "containerNameRegex",
                "envTag",
                "excludeContainerEnvRegex",
                "excludeContainerLabelRegex",
                "includeContainerEnvRegex",
                "includeContainerLabelRegex",
                "kubernetesRules",
                "stream"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleContainerRuleKubernetesRule:RuleAppliersRuleContainerRuleKubernetesRule": {
            "properties": {
                "annotationTag": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Whether to add Kubernetes Annotation as a log tag to the raw log data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePodLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Specify the containers not to be collected through the Pod Label blacklist, and not enable means to collect all containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includePodLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The Pod Label whitelist is used to specify containers to be collected. When the Pod Label whitelist is not enabled, it means that all containers are collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labelTag": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Whether to add Kubernetes Label as a log label to the original log data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespaceNameRegex": {
                    "type": "string",
                    "description": "The name of the Kubernetes Namespace to be collected. If no Namespace name is specified, all containers will be collected. Namespace names support regular matching.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podNameRegex": {
                    "type": "string",
                    "description": "The Pod name is used to specify the container to be collected. When no Pod name is specified, it means to collect all containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workloadNameRegex": {
                    "type": "string",
                    "description": "Specify the container to be collected by the name of the workload. When no workload name is specified, all containers are collected. The workload name supports regular matching.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workloadType": {
                    "type": "string",
                    "description": "Specify the container to be collected by the type of workload. Only one type can be selected. When no type is specified, it means to collect all types of containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "annotationTag",
                "excludePodLabelRegex",
                "includePodLabelRegex",
                "labelTag",
                "namespaceNameRegex",
                "podNameRegex",
                "workloadNameRegex",
                "workloadType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleExcludePath:RuleAppliersRuleExcludePath": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of the log template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Collection path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleExtractRule:RuleAppliersRuleExtractRule": {
            "properties": {
                "beginRegex": {
                    "type": "string",
                    "description": "The first log line needs to match the regular expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delimiter": {
                    "type": "string",
                    "description": "The delimiter of the log.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKeyRegexes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleExtractRuleFilterKeyRegex:RuleAppliersRuleExtractRuleFilterKeyRegex"
                    },
                    "description": "The filter key list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of field names. Log Service will parse the path sample (PathSample) into multiple fields according to the regular expression (Regex), and Keys is used to specify the field name of each field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRegex": {
                    "type": "string",
                    "description": "The entire log needs to match the regular expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleExtractRuleLogTemplate:RuleAppliersRuleExtractRuleLogTemplate"
                    },
                    "description": "Automatically extract log fields according to the specified log template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Parsing format of the time field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeKey": {
                    "type": "string",
                    "description": "The field name of the log time field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unMatchLogKey": {
                    "type": "string",
                    "description": "When uploading the failed log, the key name of the failed log.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unMatchUpLoadSwitch": {
                    "type": "boolean",
                    "description": "Whether to upload the log of parsing failure.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "beginRegex",
                "delimiter",
                "filterKeyRegexes",
                "keys",
                "logRegex",
                "logTemplates",
                "timeFormat",
                "timeKey",
                "unMatchLogKey",
                "unMatchUpLoadSwitch"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleExtractRuleFilterKeyRegex:RuleAppliersRuleExtractRuleFilterKeyRegex": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the filter key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regex": {
                    "type": "string",
                    "description": "Regular expression for extracting path fields. It must match the collection path sample, otherwise it cannot be extracted successfully.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "regex"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleExtractRuleLogTemplate:RuleAppliersRuleExtractRuleLogTemplate": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Log template content.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the log template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleUserDefineRule:RuleAppliersRuleUserDefineRule": {
            "properties": {
                "advanceds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleUserDefineRuleAdvanced:RuleAppliersRuleUserDefineRuleAdvanced"
                    },
                    "description": "LogCollector extension configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableRawLog": {
                    "type": "boolean",
                    "description": "Whether to upload raw logs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Add constant fields to logs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parsePathRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleUserDefineRuleParsePathRule:RuleAppliersRuleUserDefineRuleParsePathRule"
                    },
                    "description": "Rules for parsing collection paths. After the rules are set, the fields in the collection path will be extracted through the regular expressions specified in the rules, and added to the log data as metadata.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleUserDefineRulePlugin:RuleAppliersRuleUserDefineRulePlugin"
                    },
                    "description": "Plugin configuration. After the plugin configuration is enabled, one or more LogCollector processor plugins can be added to parse logs with complex or variable structures.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardHashKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleAppliersRuleUserDefineRuleShardHashKey:RuleAppliersRuleUserDefineRuleShardHashKey"
                    },
                    "description": "Rules for routing log partitions. Setting this parameter indicates that the HashKey routing shard mode is used when collecting logs, and Log Service will write the data to the shard containing the specified Key value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tailFiles": {
                    "type": "boolean",
                    "description": "LogCollector collection strategy, which specifies whether LogCollector collects incremental logs or full logs. The default is false, which means to collect all logs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "advanceds",
                "enableRawLog",
                "fields",
                "parsePathRules",
                "plugins",
                "shardHashKeys",
                "tailFiles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleUserDefineRuleAdvanced:RuleAppliersRuleUserDefineRuleAdvanced": {
            "properties": {
                "closeEof": {
                    "type": "boolean",
                    "description": "Whether to release the log file handle after reading to the end of the log file. The default is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeInactive": {
                    "type": "integer",
                    "description": "The wait time to release the log file handle. When the log file has not written a new log for more than the specified time, release the handle of the log file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeRemoved": {
                    "type": "boolean",
                    "description": "After the log file is removed, whether to release the handle of the log file. The default is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeRenamed": {
                    "type": "boolean",
                    "description": "After the log file is renamed, whether to release the handle of the log file. The default is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeTimeout": {
                    "type": "integer",
                    "description": "The maximum length of time that LogCollector monitors log files. The unit is seconds, and the default is 0 seconds, which means that there is no limit to the length of time LogCollector monitors log files.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "closeEof",
                "closeInactive",
                "closeRemoved",
                "closeRenamed",
                "closeTimeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleUserDefineRuleParsePathRule:RuleAppliersRuleUserDefineRuleParsePathRule": {
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of field names. Log Service will parse the path sample (PathSample) into multiple fields according to the regular expression (Regex), and Keys is used to specify the field name of each field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathSample": {
                    "type": "string",
                    "description": "Sample capture path for a real scene.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regex": {
                    "type": "string",
                    "description": "Regular expression for extracting path fields. It must match the collection path sample, otherwise it cannot be extracted successfully.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keys",
                "pathSample",
                "regex"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleUserDefineRulePlugin:RuleAppliersRuleUserDefineRulePlugin": {
            "properties": {
                "processors": {
                    "type": "string",
                    "description": "LogCollector plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "processors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleAppliersRuleUserDefineRuleShardHashKey:RuleAppliersRuleUserDefineRuleShardHashKey": {
            "properties": {
                "hashKey": {
                    "type": "string",
                    "description": "The HashKey of the log group is used to specify the partition (shard) to be written to by the current log group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hashKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RuleContainerRule:RuleContainerRule": {
            "properties": {
                "containerNameRegex": {
                    "type": "string",
                    "description": "The name of the container to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "envTag": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Whether to add environment variables as log tags to raw log data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeContainerEnvRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The container environment variable blacklist is used to specify the range of containers not to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeContainerLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The container Label blacklist is used to specify the range of containers not to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeContainerEnvRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The container environment variable whitelist specifies the container to be collected through the container environment variable. If the whitelist is not enabled, it means that all containers are specified to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeContainerLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The container label whitelist specifies the containers to be collected through the container label. If the whitelist is not enabled, all containers are specified to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesRule": {
                    "$ref": "#/types/volcengine:tls/RuleContainerRuleKubernetesRule:RuleContainerRuleKubernetesRule",
                    "description": "Collection rules for Kubernetes containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stream": {
                    "type": "string",
                    "description": "The collection mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "stream"
            ]
        },
        "volcengine:tls/RuleContainerRuleKubernetesRule:RuleContainerRuleKubernetesRule": {
            "properties": {
                "annotationTag": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Whether to add Kubernetes Annotation as a log tag to the raw log data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePodLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specify the containers not to be collected through the Pod Label blacklist, and not enable means to collect all containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includePodLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Pod Label whitelist is used to specify containers to be collected. When the Pod Label whitelist is not enabled, it means that all containers are collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labelTag": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Whether to add Kubernetes Label as a log label to the original log data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespaceNameRegex": {
                    "type": "string",
                    "description": "The name of the Kubernetes Namespace to be collected. If no Namespace name is specified, all containers will be collected. Namespace names support regular matching.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podNameRegex": {
                    "type": "string",
                    "description": "The Pod name is used to specify the container to be collected. When no Pod name is specified, it means to collect all containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workloadNameRegex": {
                    "type": "string",
                    "description": "Specify the container to be collected by the name of the workload. When no workload name is specified, all containers are collected. The workload name supports regular matching.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workloadType": {
                    "type": "string",
                    "description": "Specify the container to be collected by the type of workload. Only one type can be selected. When no type is specified, it means to collect all types of containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:tls/RuleExcludePath:RuleExcludePath": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Collection path type. The path type can be `File` or `Path`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Collection path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "volcengine:tls/RuleExtractRule:RuleExtractRule": {
            "properties": {
                "beginRegex": {
                    "type": "string",
                    "description": "The first log line needs to match the regular expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delimiter": {
                    "type": "string",
                    "description": "The delimiter of the log.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKeyRegexes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleExtractRuleFilterKeyRegex:RuleExtractRuleFilterKeyRegex"
                    },
                    "description": "The filter key list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of log field names (Key).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRegex": {
                    "type": "string",
                    "description": "The entire log needs to match the regular expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logTemplate": {
                    "$ref": "#/types/volcengine:tls/RuleExtractRuleLogTemplate:RuleExtractRuleLogTemplate",
                    "description": "Automatically extract log fields according to the specified log template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Parsing format of the time field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeKey": {
                    "type": "string",
                    "description": "The field name of the log time field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unMatchLogKey": {
                    "type": "string",
                    "description": "When uploading the failed log, the key name of the failed log.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unMatchUpLoadSwitch": {
                    "type": "boolean",
                    "description": "Whether to upload the log of parsing failure.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "keys",
                        "unMatchUpLoadSwitch"
                    ]
                }
            }
        },
        "volcengine:tls/RuleExtractRuleFilterKeyRegex:RuleExtractRuleFilterKeyRegex": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the filter key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regex": {
                    "type": "string",
                    "description": "The log content of the filter field needs to match the regular expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "regex"
            ]
        },
        "volcengine:tls/RuleExtractRuleLogTemplate:RuleExtractRuleLogTemplate": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Log template content.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the log template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format",
                "type"
            ]
        },
        "volcengine:tls/RuleUserDefineRule:RuleUserDefineRule": {
            "properties": {
                "advanced": {
                    "$ref": "#/types/volcengine:tls/RuleUserDefineRuleAdvanced:RuleUserDefineRuleAdvanced",
                    "description": "LogCollector extension configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableRawLog": {
                    "type": "boolean",
                    "description": "Whether to upload raw logs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Add constant fields to logs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parsePathRule": {
                    "$ref": "#/types/volcengine:tls/RuleUserDefineRuleParsePathRule:RuleUserDefineRuleParsePathRule",
                    "description": "Rules for parsing collection paths. After the rules are set, the fields in the collection path will be extracted through the regular expressions specified in the rules, and added to the log data as metadata.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugin": {
                    "$ref": "#/types/volcengine:tls/RuleUserDefineRulePlugin:RuleUserDefineRulePlugin",
                    "description": "Plugin configuration. After the plugin configuration is enabled, one or more LogCollector processor plugins can be added to parse logs with complex or variable structures.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardHashKey": {
                    "$ref": "#/types/volcengine:tls/RuleUserDefineRuleShardHashKey:RuleUserDefineRuleShardHashKey",
                    "description": "Rules for routing log partitions. Setting this parameter indicates that the HashKey routing shard mode is used when collecting logs, and Log Service will write the data to the shard containing the specified Key value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tailFiles": {
                    "type": "boolean",
                    "description": "LogCollector collection strategy, which specifies whether LogCollector collects incremental logs or full logs. The default is false, which means to collect all logs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:tls/RuleUserDefineRuleAdvanced:RuleUserDefineRuleAdvanced": {
            "properties": {
                "closeEof": {
                    "type": "boolean",
                    "description": "Whether to release the log file handle after reading to the end of the log file. The default is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeInactive": {
                    "type": "integer",
                    "description": "The wait time to release the log file handle. When the log file has not written a new log for more than the specified time, release the handle of the log file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeRemoved": {
                    "type": "boolean",
                    "description": "After the log file is removed, whether to release the handle of the log file. The default is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeRenamed": {
                    "type": "boolean",
                    "description": "After the log file is renamed, whether to release the handle of the log file. The default is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeTimeout": {
                    "type": "integer",
                    "description": "The maximum length of time that LogCollector monitors log files. The unit is seconds, and the default is 0 seconds, which means that there is no limit to the length of time LogCollector monitors log files.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:tls/RuleUserDefineRuleParsePathRule:RuleUserDefineRuleParsePathRule": {
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of field names. Log Service will parse the path sample (PathSample) into multiple fields according to the regular expression (Regex), and Keys is used to specify the field name of each field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathSample": {
                    "type": "string",
                    "description": "Sample capture path for a real scene.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regex": {
                    "type": "string",
                    "description": "Regular expression for extracting path fields. It must match the collection path sample, otherwise it cannot be extracted successfully.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:tls/RuleUserDefineRulePlugin:RuleUserDefineRulePlugin": {
            "properties": {
                "processors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "LogCollector plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "processors"
            ]
        },
        "volcengine:tls/RuleUserDefineRuleShardHashKey:RuleUserDefineRuleShardHashKey": {
            "properties": {
                "hashKey": {
                    "type": "string",
                    "description": "The HashKey of the log group is used to specify the partition (shard) to be written to by the current log group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hashKey"
            ]
        },
        "volcengine:tls/RulesRule:RulesRule": {
            "properties": {
                "containerRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleContainerRule:RulesRuleContainerRule"
                    },
                    "description": "Container collection rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleExcludePath:RulesRuleExcludePath"
                    },
                    "description": "Collect the blacklist list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extractRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleExtractRule:RulesRuleExtractRule"
                    },
                    "description": "The extract rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputType": {
                    "type": "integer",
                    "description": "The collection type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logSample": {
                    "type": "string",
                    "description": "Log sample.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logType": {
                    "type": "string",
                    "description": "The log type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modification time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Collection path list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleId": {
                    "type": "string",
                    "description": "The rule id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleName": {
                    "type": "string",
                    "description": "The rule name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicId": {
                    "type": "string",
                    "description": "The topic id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicName": {
                    "type": "string",
                    "description": "The topic name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userDefineRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleUserDefineRule:RulesRuleUserDefineRule"
                    },
                    "description": "User-defined collection rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "containerRules",
                "createTime",
                "excludePaths",
                "extractRules",
                "inputType",
                "logSample",
                "logType",
                "modifyTime",
                "paths",
                "ruleId",
                "ruleName",
                "topicId",
                "topicName",
                "userDefineRules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleContainerRule:RulesRuleContainerRule": {
            "properties": {
                "containerNameRegex": {
                    "type": "string",
                    "description": "The name of the container to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "envTag": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Whether to add environment variables as log tags to raw log data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeContainerEnvRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The container environment variable blacklist is used to specify the range of containers not to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeContainerLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The container Label blacklist is used to specify the range of containers not to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeContainerEnvRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The container environment variable whitelist specifies the container to be collected through the container environment variable. If the whitelist is not enabled, it means that all containers are specified to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeContainerLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The container label whitelist specifies the containers to be collected through the container label. If the whitelist is not enabled, all containers are specified to be collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleContainerRuleKubernetesRule:RulesRuleContainerRuleKubernetesRule"
                    },
                    "description": "Collection rules for Kubernetes containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stream": {
                    "type": "string",
                    "description": "The collection mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "containerNameRegex",
                "envTag",
                "excludeContainerEnvRegex",
                "excludeContainerLabelRegex",
                "includeContainerEnvRegex",
                "includeContainerLabelRegex",
                "kubernetesRules",
                "stream"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleContainerRuleKubernetesRule:RulesRuleContainerRuleKubernetesRule": {
            "properties": {
                "annotationTag": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Whether to add Kubernetes Annotation as a log tag to the raw log data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludePodLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Specify the containers not to be collected through the Pod Label blacklist, and not enable means to collect all containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includePodLabelRegex": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The Pod Label whitelist is used to specify containers to be collected. When the Pod Label whitelist is not enabled, it means that all containers are collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labelTag": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Whether to add Kubernetes Label as a log label to the original log data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespaceNameRegex": {
                    "type": "string",
                    "description": "The name of the Kubernetes Namespace to be collected. If no Namespace name is specified, all containers will be collected. Namespace names support regular matching.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podNameRegex": {
                    "type": "string",
                    "description": "The Pod name is used to specify the container to be collected. When no Pod name is specified, it means to collect all containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workloadNameRegex": {
                    "type": "string",
                    "description": "Specify the container to be collected by the name of the workload. When no workload name is specified, all containers are collected. The workload name supports regular matching.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workloadType": {
                    "type": "string",
                    "description": "Specify the container to be collected by the type of workload. Only one type can be selected. When no type is specified, it means to collect all types of containers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "annotationTag",
                "excludePodLabelRegex",
                "includePodLabelRegex",
                "labelTag",
                "namespaceNameRegex",
                "podNameRegex",
                "workloadNameRegex",
                "workloadType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleExcludePath:RulesRuleExcludePath": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of the log template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Collection path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleExtractRule:RulesRuleExtractRule": {
            "properties": {
                "beginRegex": {
                    "type": "string",
                    "description": "The first log line needs to match the regular expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delimiter": {
                    "type": "string",
                    "description": "The delimiter of the log.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterKeyRegexes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleExtractRuleFilterKeyRegex:RulesRuleExtractRuleFilterKeyRegex"
                    },
                    "description": "The filter key list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of field names. Log Service will parse the path sample (PathSample) into multiple fields according to the regular expression (Regex), and Keys is used to specify the field name of each field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRegex": {
                    "type": "string",
                    "description": "The entire log needs to match the regular expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleExtractRuleLogTemplate:RulesRuleExtractRuleLogTemplate"
                    },
                    "description": "Automatically extract log fields according to the specified log template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Parsing format of the time field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeKey": {
                    "type": "string",
                    "description": "The field name of the log time field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unMatchLogKey": {
                    "type": "string",
                    "description": "When uploading the failed log, the key name of the failed log.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unMatchUpLoadSwitch": {
                    "type": "boolean",
                    "description": "Whether to upload the log of parsing failure.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "beginRegex",
                "delimiter",
                "filterKeyRegexes",
                "keys",
                "logRegex",
                "logTemplates",
                "timeFormat",
                "timeKey",
                "unMatchLogKey",
                "unMatchUpLoadSwitch"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleExtractRuleFilterKeyRegex:RulesRuleExtractRuleFilterKeyRegex": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The name of the filter key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regex": {
                    "type": "string",
                    "description": "Regular expression for extracting path fields. It must match the collection path sample, otherwise it cannot be extracted successfully.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "regex"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleExtractRuleLogTemplate:RulesRuleExtractRuleLogTemplate": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Log template content.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the log template.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleUserDefineRule:RulesRuleUserDefineRule": {
            "properties": {
                "advanceds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleUserDefineRuleAdvanced:RulesRuleUserDefineRuleAdvanced"
                    },
                    "description": "LogCollector extension configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableRawLog": {
                    "type": "boolean",
                    "description": "Whether to upload raw logs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Add constant fields to logs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parsePathRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleUserDefineRuleParsePathRule:RulesRuleUserDefineRuleParsePathRule"
                    },
                    "description": "Rules for parsing collection paths. After the rules are set, the fields in the collection path will be extracted through the regular expressions specified in the rules, and added to the log data as metadata.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleUserDefineRulePlugin:RulesRuleUserDefineRulePlugin"
                    },
                    "description": "Plugin configuration. After the plugin configuration is enabled, one or more LogCollector processor plugins can be added to parse logs with complex or variable structures.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardHashKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RulesRuleUserDefineRuleShardHashKey:RulesRuleUserDefineRuleShardHashKey"
                    },
                    "description": "Rules for routing log partitions. Setting this parameter indicates that the HashKey routing shard mode is used when collecting logs, and Log Service will write the data to the shard containing the specified Key value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tailFiles": {
                    "type": "boolean",
                    "description": "LogCollector collection strategy, which specifies whether LogCollector collects incremental logs or full logs. The default is false, which means to collect all logs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "advanceds",
                "enableRawLog",
                "fields",
                "parsePathRules",
                "plugins",
                "shardHashKeys",
                "tailFiles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleUserDefineRuleAdvanced:RulesRuleUserDefineRuleAdvanced": {
            "properties": {
                "closeEof": {
                    "type": "boolean",
                    "description": "Whether to release the log file handle after reading to the end of the log file. The default is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeInactive": {
                    "type": "integer",
                    "description": "The wait time to release the log file handle. When the log file has not written a new log for more than the specified time, release the handle of the log file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeRemoved": {
                    "type": "boolean",
                    "description": "After the log file is removed, whether to release the handle of the log file. The default is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeRenamed": {
                    "type": "boolean",
                    "description": "After the log file is renamed, whether to release the handle of the log file. The default is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "closeTimeout": {
                    "type": "integer",
                    "description": "The maximum length of time that LogCollector monitors log files. The unit is seconds, and the default is 0 seconds, which means that there is no limit to the length of time LogCollector monitors log files.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "closeEof",
                "closeInactive",
                "closeRemoved",
                "closeRenamed",
                "closeTimeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleUserDefineRuleParsePathRule:RulesRuleUserDefineRuleParsePathRule": {
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of field names. Log Service will parse the path sample (PathSample) into multiple fields according to the regular expression (Regex), and Keys is used to specify the field name of each field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathSample": {
                    "type": "string",
                    "description": "Sample capture path for a real scene.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regex": {
                    "type": "string",
                    "description": "Regular expression for extracting path fields. It must match the collection path sample, otherwise it cannot be extracted successfully.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keys",
                "pathSample",
                "regex"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleUserDefineRulePlugin:RulesRuleUserDefineRulePlugin": {
            "properties": {
                "processors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "LogCollector plugin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "processors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/RulesRuleUserDefineRuleShardHashKey:RulesRuleUserDefineRuleShardHashKey": {
            "properties": {
                "hashKey": {
                    "type": "string",
                    "description": "The HashKey of the log group is used to specify the partition (shard) to be written to by the current log group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hashKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/ShardsShard:ShardsShard": {
            "properties": {
                "exclusiveEndKey": {
                    "type": "string",
                    "description": "The end key info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inclusiveBeginKey": {
                    "type": "string",
                    "description": "The begin key info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modify time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardId": {
                    "type": "integer",
                    "description": "The id of shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stopWriteTime": {
                    "type": "string",
                    "description": "The stop write time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicId": {
                    "type": "string",
                    "description": "The id of topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exclusiveEndKey",
                "inclusiveBeginKey",
                "modifyTime",
                "shardId",
                "status",
                "stopWriteTime",
                "topicId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/TopicTag:TopicTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:tls/TopicsTag:TopicsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:tls/TopicsTlsTopic:TopicsTlsTopic": {
            "properties": {
                "autoSplit": {
                    "type": "boolean",
                    "description": "Whether to enable automatic partition splitting function of the tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of the tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableTracking": {
                    "type": "boolean",
                    "description": "Whether to enable WebTracking function of the tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSplitShard": {
                    "type": "integer",
                    "description": "The max count of shards in the tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modify time of the tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id of tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardCount": {
                    "type": "integer",
                    "description": "The count of shards in the tls topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/TopicsTlsTopicTag:TopicsTlsTopicTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeFormat": {
                    "type": "string",
                    "description": "The format of the time field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeKey": {
                    "type": "string",
                    "description": "The name of the time field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicId": {
                    "type": "string",
                    "description": "The id of tls topic. This field supports fuzzy queries. It is not supported to specify both TopicName and TopicId at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of tls topic. This field supports fuzzy queries. It is not supported to specify both TopicName and TopicId at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "The data storage time of the tls topic. Unit: Day.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoSplit",
                "createTime",
                "description",
                "enableTracking",
                "id",
                "maxSplitShard",
                "modifyTime",
                "projectId",
                "shardCount",
                "tags",
                "timeFormat",
                "timeKey",
                "topicId",
                "topicName",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tls/TopicsTlsTopicTag:TopicsTlsTopicTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tos/BucketAccountAcl:BucketAccountAcl": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The accountId to control.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclType": {
                    "type": "string",
                    "description": "The acl type to control.Valid value is CanonicalUser.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "description": "The permission to control.Valid value is FULL_CONTROL|READ|READ_ACP|WRITE|WRITE_ACP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "permission"
            ]
        },
        "volcengine:tos/BucketObjectAccountAcl:BucketObjectAccountAcl": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The accountId to control.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclType": {
                    "type": "string",
                    "description": "The acl type to control.Valid value is CanonicalUser.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "description": "The permission to control.Valid value is FULL_CONTROL|READ|READ_ACP|WRITE|WRITE_ACP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "permission"
            ]
        },
        "volcengine:tos/BucketObjectsObject:BucketObjectsObject": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name the TOS Object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The name the TOS Object size.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageClass": {
                    "type": "string",
                    "description": "The name the TOS Object storage class.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "size",
                "storageClass"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:tos/BucketsBucket:BucketsBucket": {
            "properties": {
                "creationDate": {
                    "type": "string",
                    "description": "The create date of the TOS bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extranetEndpoint": {
                    "type": "string",
                    "description": "The extranet endpoint of the TOS bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intranetEndpoint": {
                    "type": "string",
                    "description": "The intranet endpoint the TOS bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isTruncated": {
                    "type": "boolean",
                    "description": "(**Deprecated**) The Field is Deprecated. The truncated the TOS bucket.\n",
                    "deprecationMessage": "The Field is Deprecated.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "The location of the TOS bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "marker": {
                    "type": "string",
                    "description": "(**Deprecated**) The Field is Deprecated. The marker the TOS bucket.\n",
                    "deprecationMessage": "The Field is Deprecated.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxKeys": {
                    "type": "integer",
                    "description": "(**Deprecated**) The Field is Deprecated. The max keys the TOS bucket.\n",
                    "deprecationMessage": "The Field is Deprecated.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name the TOS bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "(**Deprecated**) The Field is Deprecated. The prefix the TOS bucket.\n",
                    "deprecationMessage": "The Field is Deprecated.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationDate",
                "extranetEndpoint",
                "intranetEndpoint",
                "isTruncated",
                "location",
                "marker",
                "maxKeys",
                "name",
                "prefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/AvailableResourcesRegion:AvailableResourcesRegion": {
            "properties": {
                "area": {
                    "$ref": "#/types/volcengine:veenedge/AvailableResourcesRegionArea:AvailableResourcesRegionArea",
                    "description": "The config of area.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "city": {
                    "$ref": "#/types/volcengine:veenedge/AvailableResourcesRegionCity:AvailableResourcesRegionCity",
                    "description": "The config of city.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cluster": {
                    "$ref": "#/types/volcengine:veenedge/AvailableResourcesRegionCluster:AvailableResourcesRegionCluster",
                    "description": "The config of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "$ref": "#/types/volcengine:veenedge/AvailableResourcesRegionCountry:AvailableResourcesRegionCountry",
                    "description": "The config of country.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "$ref": "#/types/volcengine:veenedge/AvailableResourcesRegionIsp:AvailableResourcesRegionIsp",
                    "description": "The config of isp.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "area",
                "city",
                "cluster",
                "country",
                "isp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/AvailableResourcesRegionArea:AvailableResourcesRegionArea": {
            "properties": {
                "enName": {
                    "type": "string",
                    "description": "The english name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enName",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/AvailableResourcesRegionCity:AvailableResourcesRegionCity": {
            "properties": {
                "enName": {
                    "type": "string",
                    "description": "The english name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enName",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/AvailableResourcesRegionCluster:AvailableResourcesRegionCluster": {
            "properties": {
                "enName": {
                    "type": "string",
                    "description": "The english name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enName",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/AvailableResourcesRegionCountry:AvailableResourcesRegionCountry": {
            "properties": {
                "enName": {
                    "type": "string",
                    "description": "The english name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enName",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/AvailableResourcesRegionIsp:AvailableResourcesRegionIsp": {
            "properties": {
                "enName": {
                    "type": "string",
                    "description": "The english name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enName",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServerBillingConfig:CloudServerBillingConfig": {
            "properties": {
                "bandwidthBillingMethod": {
                    "type": "string",
                    "description": "The method of bandwidth billing. The value can be `MonthlyP95` or `DailyPeak`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "computingBillingMethod": {
                    "type": "string",
                    "description": "The method of computing billing. The value can be `MonthlyPeak` or `DailyPeak`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "bandwidthBillingMethod",
                "computingBillingMethod"
            ]
        },
        "volcengine:veenedge/CloudServerCustomData:CloudServerCustomData": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The custom data info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "volcengine:veenedge/CloudServerNetworkConfig:CloudServerNetworkConfig": {
            "properties": {
                "bandwidthPeak": {
                    "type": "string",
                    "description": "The peak of bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "customExternalInterfaceName": {
                    "type": "string",
                    "description": "The name of custom external interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "customInternalInterfaceName": {
                    "type": "string",
                    "description": "The name of custom internal interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Whether enable ipv6.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "internalBandwidthPeak": {
                    "type": "string",
                    "description": "The internal peak of bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "bandwidthPeak"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bandwidthPeak",
                        "enableIpv6",
                        "internalBandwidthPeak"
                    ]
                }
            }
        },
        "volcengine:veenedge/CloudServerScheduleStrategy:CloudServerScheduleStrategy": {
            "properties": {
                "networkStrategy": {
                    "type": "string",
                    "description": "The network strategy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "priceStrategy": {
                    "type": "string",
                    "description": "The price strategy. The value can be `high_priority` or `low_priority`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "scheduleStrategy": {
                    "type": "string",
                    "description": "The type of schedule strategy. The value can be `dispersion` or `concentration`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "networkStrategy",
                "priceStrategy",
                "scheduleStrategy"
            ]
        },
        "volcengine:veenedge/CloudServerStorageConfig:CloudServerStorageConfig": {
            "properties": {
                "dataDiskLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/CloudServerStorageConfigDataDiskList:CloudServerStorageConfigDataDiskList"
                    },
                    "description": "The disk list info of data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "systemDisk": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerStorageConfigSystemDisk:CloudServerStorageConfigSystemDisk",
                    "description": "The disk info of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "systemDisk"
            ]
        },
        "volcengine:veenedge/CloudServerStorageConfigDataDiskList:CloudServerStorageConfigDataDiskList": {
            "properties": {
                "capacity": {
                    "type": "string",
                    "description": "The capacity of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "storageType": {
                    "type": "string",
                    "description": "The type of storage. The value can be `CloudBlockHDD` or `CloudBlockSSD`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "storageType"
            ]
        },
        "volcengine:veenedge/CloudServerStorageConfigSystemDisk:CloudServerStorageConfigSystemDisk": {
            "properties": {
                "capacity": {
                    "type": "string",
                    "description": "The capacity of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "storageType": {
                    "type": "string",
                    "description": "The type of storage. The value can be `CloudBlockHDD` or `CloudBlockSSD`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "storageType"
            ]
        },
        "volcengine:veenedge/CloudServersCloudServer:CloudServersCloudServer": {
            "properties": {
                "billingConfig": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerBillingConfig:CloudServersCloudServerBillingConfig",
                    "description": "The config of billing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudServerIdentity": {
                    "type": "string",
                    "description": "The Id of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpu": {
                    "type": "string",
                    "description": "The cpu info of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "integer",
                    "description": "The create time info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customData": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerCustomData:CloudServersCloudServerCustomData",
                    "description": "The config of custom data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpu": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerGpu:CloudServersCloudServerGpu",
                    "description": "The config of gpu.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Id of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerImage:CloudServersCloudServerImage",
                    "description": "The config of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceCount": {
                    "type": "integer",
                    "description": "The count of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceStatuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerInstanceStatus:CloudServersCloudServerInstanceStatus"
                    },
                    "description": "The status of instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mem": {
                    "type": "string",
                    "description": "The memory info of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerNetwork:CloudServersCloudServerNetwork",
                    "description": "The config of network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduleStrategyConfigs": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerScheduleStrategyConfigs:CloudServersCloudServerScheduleStrategyConfigs",
                    "description": "The config of schedule strategy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretConfig": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerSecretConfig:CloudServersCloudServerSecretConfig",
                    "description": "The config of secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverAreaCount": {
                    "type": "integer",
                    "description": "The server area count number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverAreaLevel": {
                    "type": "string",
                    "description": "The area level of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverAreas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerServerArea:CloudServersCloudServerServerArea"
                    },
                    "description": "The server areas info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spec": {
                    "type": "string",
                    "description": "The spec info of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specDisplay": {
                    "type": "string",
                    "description": "The Chinese spec info of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specSum": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The spec summary of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storage": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerStorage:CloudServersCloudServerStorage",
                    "description": "The config of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "integer",
                    "description": "The update time info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "billingConfig",
                "cloudServerIdentity",
                "cpu",
                "createTime",
                "customData",
                "gpu",
                "id",
                "image",
                "instanceCount",
                "instanceStatuses",
                "mem",
                "name",
                "network",
                "scheduleStrategyConfigs",
                "secretConfig",
                "serverAreaCount",
                "serverAreaLevel",
                "serverAreas",
                "spec",
                "specDisplay",
                "specSum",
                "storage",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerBillingConfig:CloudServersCloudServerBillingConfig": {
            "properties": {
                "bandwidthBillingMethod": {
                    "type": "string",
                    "description": "The bandwidth billing method.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "computingBillingMethod": {
                    "type": "string",
                    "description": "The computing billing method.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bandwidthBillingMethod",
                "computingBillingMethod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerCustomData:CloudServersCloudServerCustomData": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The data info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerGpu:CloudServersCloudServerGpu": {
            "properties": {
                "gpuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerGpuGpus:CloudServersCloudServerGpuGpus"
                    },
                    "description": "The list gpu info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gpuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerGpuGpus:CloudServersCloudServerGpuGpus": {
            "properties": {
                "gpuSpec": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerGpuGpusGpuSpec:CloudServersCloudServerGpuGpusGpuSpec",
                    "description": "The spec of gpu.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "num": {
                    "type": "integer",
                    "description": "The number of gpu.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gpuSpec",
                "num"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerGpuGpusGpuSpec:CloudServersCloudServerGpuGpusGpuSpec": {
            "properties": {
                "gpuType": {
                    "type": "string",
                    "description": "The type of gpu.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gpuType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerImage:CloudServersCloudServerImage": {
            "properties": {
                "imageIdentity": {
                    "type": "string",
                    "description": "The id of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "description": "The name of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "The property of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemArch": {
                    "type": "string",
                    "description": "The arch of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemBit": {
                    "type": "string",
                    "description": "The bit of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemType": {
                    "type": "string",
                    "description": "The type of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemVersion": {
                    "type": "string",
                    "description": "The version of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "imageIdentity",
                "imageName",
                "property",
                "systemArch",
                "systemBit",
                "systemType",
                "systemVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerInstanceStatus:CloudServersCloudServerInstanceStatus": {
            "properties": {
                "instanceCount": {
                    "type": "integer",
                    "description": "The count of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceCount",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerNetwork:CloudServersCloudServerNetwork": {
            "properties": {
                "bandwidthPeak": {
                    "type": "string",
                    "description": "The peak of bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Whether enable ipv6.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalBandwidthPeak": {
                    "type": "string",
                    "description": "The internal peak of bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bandwidthPeak",
                "enableIpv6",
                "internalBandwidthPeak"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerScheduleStrategyConfigs:CloudServersCloudServerScheduleStrategyConfigs": {
            "properties": {
                "priceStrategy": {
                    "type": "string",
                    "description": "The price strategy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduleStrategy": {
                    "type": "string",
                    "description": "The schedule strategy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priceStrategy",
                "scheduleStrategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerSecretConfig:CloudServersCloudServerSecretConfig": {
            "properties": {
                "secretData": {
                    "type": "string",
                    "description": "The data of secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretType": {
                    "type": "integer",
                    "description": "The type of secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "secretData",
                "secretType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerServerArea:CloudServersCloudServerServerArea": {
            "properties": {
                "area": {
                    "type": "string",
                    "description": "The area info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceNum": {
                    "type": "integer",
                    "description": "The number of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "description": "The isp info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "area",
                "instanceNum",
                "isp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerStorage:CloudServersCloudServerStorage": {
            "properties": {
                "dataDisk": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerStorageDataDisk:CloudServersCloudServerStorageDataDisk",
                    "description": "The disk info of data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataDiskLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerStorageDataDiskList:CloudServersCloudServerStorageDataDiskList"
                    },
                    "description": "The disk list info of data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemDisk": {
                    "$ref": "#/types/volcengine:veenedge/CloudServersCloudServerStorageSystemDisk:CloudServersCloudServerStorageSystemDisk",
                    "description": "The disk info of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dataDisk",
                "dataDiskLists",
                "systemDisk"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerStorageDataDisk:CloudServersCloudServerStorageDataDisk": {
            "properties": {
                "capacity": {
                    "type": "string",
                    "description": "The capacity of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "description": "The type of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "storageType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerStorageDataDiskList:CloudServersCloudServerStorageDataDiskList": {
            "properties": {
                "capacity": {
                    "type": "string",
                    "description": "The capacity of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "description": "The type of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "storageType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/CloudServersCloudServerStorageSystemDisk:CloudServersCloudServerStorageSystemDisk": {
            "properties": {
                "capacity": {
                    "type": "string",
                    "description": "The capacity of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "description": "The type of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "storageType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstanceTypesInstanceTypeConfig:InstanceTypesInstanceTypeConfig": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "The cpu of instance type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpu": {
                    "type": "integer",
                    "description": "The gpu of instance type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpuSpec": {
                    "type": "string",
                    "description": "The gpu spec of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceTypeFamily": {
                    "type": "string",
                    "description": "The type family of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceTypeFamilyName": {
                    "type": "string",
                    "description": "The name of instance type family.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "description": "The memory of instance type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/InstanceTypesInstanceTypeConfigStorage:InstanceTypesInstanceTypeConfigStorage"
                    },
                    "description": "The config of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "gpu",
                "gpuSpec",
                "instanceType",
                "instanceTypeFamily",
                "instanceTypeFamilyName",
                "memory",
                "storages"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstanceTypesInstanceTypeConfigStorage:InstanceTypesInstanceTypeConfigStorage": {
            "properties": {
                "localStorageAmount": {
                    "type": "integer",
                    "description": "The amount of local storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localStorageCapacity": {
                    "type": "integer",
                    "description": "The capacity of local storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localStorageCategory": {
                    "type": "string",
                    "description": "The local storage category.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localStorageUnit": {
                    "type": "string",
                    "description": "The unit of local storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "localStorageAmount",
                "localStorageCapacity",
                "localStorageCategory",
                "localStorageUnit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstance:InstancesInstance": {
            "properties": {
                "cloudServerIdentity": {
                    "type": "string",
                    "description": "The id of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudServerName": {
                    "type": "string",
                    "description": "The name of cloud server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cluster": {
                    "$ref": "#/types/volcengine:veenedge/InstancesInstanceCluster:InstancesInstanceCluster",
                    "description": "The cluster info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpu": {
                    "type": "string",
                    "description": "The cpu of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "integer",
                    "description": "The create time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creator": {
                    "type": "string",
                    "description": "The creator of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteTime": {
                    "type": "integer",
                    "description": "The delete time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endTime": {
                    "type": "integer",
                    "description": "The end time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpu": {
                    "$ref": "#/types/volcengine:veenedge/InstancesInstanceGpu:InstancesInstanceGpu",
                    "description": "The config of gpu.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "$ref": "#/types/volcengine:veenedge/InstancesInstanceImage:InstancesInstanceImage",
                    "description": "The config of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceIdentity": {
                    "type": "string",
                    "description": "The Id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mem": {
                    "type": "string",
                    "description": "The memory of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/volcengine:veenedge/InstancesInstanceNetwork:InstancesInstanceNetwork",
                    "description": "The config of network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spec": {
                    "type": "string",
                    "description": "The spec of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "specDisplay": {
                    "type": "string",
                    "description": "The spec display of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "integer",
                    "description": "The start time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storage": {
                    "$ref": "#/types/volcengine:veenedge/InstancesInstanceStorage:InstancesInstanceStorage",
                    "description": "The config of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetCidr": {
                    "type": "string",
                    "description": "The subnet cidr.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "integer",
                    "description": "The update time of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcIdentity": {
                    "type": "string",
                    "description": "The id of vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudServerIdentity",
                "cloudServerName",
                "cluster",
                "cpu",
                "createTime",
                "creator",
                "deleteTime",
                "endTime",
                "gpu",
                "id",
                "image",
                "instanceIdentity",
                "instanceName",
                "mem",
                "network",
                "spec",
                "specDisplay",
                "startTime",
                "status",
                "storage",
                "subnetCidr",
                "updateTime",
                "vpcIdentity"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceCluster:InstancesInstanceCluster": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The alias of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "city": {
                    "type": "string",
                    "description": "The city of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "description": "The country of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "description": "The isp info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "type": "string",
                    "description": "The level of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "province": {
                    "type": "string",
                    "description": "The province of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alias",
                "city",
                "clusterName",
                "country",
                "isp",
                "level",
                "province",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceGpu:InstancesInstanceGpu": {
            "properties": {
                "gpuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/InstancesInstanceGpuGpus:InstancesInstanceGpuGpus"
                    },
                    "description": "The list gpu info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gpuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceGpuGpus:InstancesInstanceGpuGpus": {
            "properties": {
                "gpuSpec": {
                    "$ref": "#/types/volcengine:veenedge/InstancesInstanceGpuGpusGpuSpec:InstancesInstanceGpuGpusGpuSpec",
                    "description": "The spec of gpu.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "num": {
                    "type": "integer",
                    "description": "The number of gpu.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gpuSpec",
                "num"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceGpuGpusGpuSpec:InstancesInstanceGpuGpusGpuSpec": {
            "properties": {
                "gpuType": {
                    "type": "string",
                    "description": "The type of gpu.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gpuType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceImage:InstancesInstanceImage": {
            "properties": {
                "imageIdentity": {
                    "type": "string",
                    "description": "The id of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "description": "The name of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "The property of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemArch": {
                    "type": "string",
                    "description": "The arch of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemBit": {
                    "type": "string",
                    "description": "The bit of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemType": {
                    "type": "string",
                    "description": "The type of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemVersion": {
                    "type": "string",
                    "description": "The version of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "imageIdentity",
                "imageName",
                "property",
                "systemArch",
                "systemBit",
                "systemType",
                "systemVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceNetwork:InstancesInstanceNetwork": {
            "properties": {
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Whether enable ipv6.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalInterface": {
                    "$ref": "#/types/volcengine:veenedge/InstancesInstanceNetworkExternalInterface:InstancesInstanceNetworkExternalInterface",
                    "description": "The external interface of network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalInterface": {
                    "$ref": "#/types/volcengine:veenedge/InstancesInstanceNetworkInternalInterface:InstancesInstanceNetworkInternalInterface",
                    "description": "The internal interface of network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vfPassthrough": {
                    "type": "boolean",
                    "description": "The passthrough info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enableIpv6",
                "externalInterface",
                "internalInterface",
                "vfPassthrough"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceNetworkExternalInterface:InstancesInstanceNetworkExternalInterface": {
            "properties": {
                "bandwidthPeak": {
                    "type": "string",
                    "description": "The peak of bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip6Addr": {
                    "type": "string",
                    "description": "The ipv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddr": {
                    "type": "string",
                    "description": "The ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/InstancesInstanceNetworkExternalInterfaceIp:InstancesInstanceNetworkExternalInterfaceIp"
                    },
                    "description": "The ips of network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddr": {
                    "type": "string",
                    "description": "The mac address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "description": "The mask info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask6": {
                    "type": "string",
                    "description": "The ipv6 mask info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bandwidthPeak",
                "ip6Addr",
                "ipAddr",
                "ips",
                "macAddr",
                "mask",
                "mask6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceNetworkExternalInterfaceIp:InstancesInstanceNetworkExternalInterfaceIp": {
            "properties": {
                "addr": {
                    "type": "string",
                    "description": "The ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipVersion": {
                    "type": "string",
                    "description": "The version of ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "description": "The isp info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "description": "The mask info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addr",
                "ipVersion",
                "isp",
                "mask"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceNetworkInternalInterface:InstancesInstanceNetworkInternalInterface": {
            "properties": {
                "bandwidthPeak": {
                    "type": "string",
                    "description": "The peak of bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip6Addr": {
                    "type": "string",
                    "description": "The ipv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddr": {
                    "type": "string",
                    "description": "The ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/InstancesInstanceNetworkInternalInterfaceIp:InstancesInstanceNetworkInternalInterfaceIp"
                    },
                    "description": "The ips of network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddr": {
                    "type": "string",
                    "description": "The mac address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "description": "The mask info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask6": {
                    "type": "string",
                    "description": "The ipv6 mask info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bandwidthPeak",
                "ip6Addr",
                "ipAddr",
                "ips",
                "macAddr",
                "mask",
                "mask6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceNetworkInternalInterfaceIp:InstancesInstanceNetworkInternalInterfaceIp": {
            "properties": {
                "addr": {
                    "type": "string",
                    "description": "The ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipVersion": {
                    "type": "string",
                    "description": "The version of ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "description": "The isp info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "description": "The mask info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addr",
                "ipVersion",
                "isp",
                "mask"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceStorage:InstancesInstanceStorage": {
            "properties": {
                "dataDisk": {
                    "$ref": "#/types/volcengine:veenedge/InstancesInstanceStorageDataDisk:InstancesInstanceStorageDataDisk",
                    "description": "The disk info of data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataDiskLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/InstancesInstanceStorageDataDiskList:InstancesInstanceStorageDataDiskList"
                    },
                    "description": "The disk list info of data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemDisk": {
                    "$ref": "#/types/volcengine:veenedge/InstancesInstanceStorageSystemDisk:InstancesInstanceStorageSystemDisk",
                    "description": "The disk info of system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dataDisk",
                "dataDiskLists",
                "systemDisk"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceStorageDataDisk:InstancesInstanceStorageDataDisk": {
            "properties": {
                "capacity": {
                    "type": "string",
                    "description": "The capacity of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "description": "The type of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "storageType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceStorageDataDiskList:InstancesInstanceStorageDataDiskList": {
            "properties": {
                "capacity": {
                    "type": "string",
                    "description": "The capacity of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "description": "The type of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "storageType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/InstancesInstanceStorageSystemDisk:InstancesInstanceStorageSystemDisk": {
            "properties": {
                "capacity": {
                    "type": "string",
                    "description": "The capacity of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "description": "The type of storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "storageType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/VpcsVpcInstance:VpcsVpcInstance": {
            "properties": {
                "accountIdentity": {
                    "type": "integer",
                    "description": "The account id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cluster": {
                    "$ref": "#/types/volcengine:veenedge/VpcsVpcInstanceCluster:VpcsVpcInstanceCluster",
                    "description": "The cluster info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterVpcId": {
                    "type": "integer",
                    "description": "The cluster vpc id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "integer",
                    "description": "The creation time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desc": {
                    "type": "string",
                    "description": "The description of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is default vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceStatistics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/VpcsVpcInstanceResourceStatistic:VpcsVpcInstanceResourceStatistic"
                    },
                    "description": "The resource statistic info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subNets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:veenedge/VpcsVpcInstanceSubNet:VpcsVpcInstanceSubNet"
                    },
                    "description": "The subnets info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "integer",
                    "description": "The update time of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userIdentity": {
                    "type": "integer",
                    "description": "The id of user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcIdentity": {
                    "type": "string",
                    "description": "The ID of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcNs": {
                    "type": "string",
                    "description": "The namespace of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountIdentity",
                "cluster",
                "clusterVpcId",
                "createTime",
                "desc",
                "id",
                "isDefault",
                "resourceStatistics",
                "status",
                "subNets",
                "updateTime",
                "userIdentity",
                "vpcIdentity",
                "vpcName",
                "vpcNs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/VpcsVpcInstanceCluster:VpcsVpcInstanceCluster": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The alias of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "city": {
                    "type": "string",
                    "description": "The city of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "description": "The country of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "description": "The isp of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "type": "string",
                    "description": "The level of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "province": {
                    "type": "string",
                    "description": "The province of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region of cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alias",
                "city",
                "clusterName",
                "country",
                "isp",
                "level",
                "province",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/VpcsVpcInstanceResourceStatistic:VpcsVpcInstanceResourceStatistic": {
            "properties": {
                "veenInstanceCount": {
                    "type": "integer",
                    "description": "The count of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "veewLbInstanceCount": {
                    "type": "integer",
                    "description": "The count of load balancers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "veewSgInstanceCount": {
                    "type": "integer",
                    "description": "The count of security groups.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "veenInstanceCount",
                "veewLbInstanceCount",
                "veewSgInstanceCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:veenedge/VpcsVpcInstanceSubNet:VpcsVpcInstanceSubNet": {
            "properties": {
                "accountIdentity": {
                    "type": "integer",
                    "description": "The account id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidrIp": {
                    "type": "string",
                    "description": "The ip of cidr.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidrMask": {
                    "type": "integer",
                    "description": "The mask of cidr.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "integer",
                    "description": "The creation time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIdentity": {
                    "type": "string",
                    "description": "The id of subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "integer",
                    "description": "The update time of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userIdentity": {
                    "type": "integer",
                    "description": "The id of user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountIdentity",
                "cidrIp",
                "cidrMask",
                "createTime",
                "subnetIdentity",
                "updateTime",
                "userIdentity"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/AddonsAddon:AddonsAddon": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "config": {
                    "type": "string",
                    "description": "The config of addon.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createClientToken": {
                    "type": "string",
                    "description": "ClientToken when the addon is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "Addon creation time. UTC+0 time in standard RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deployMode": {
                    "type": "string",
                    "description": "The deploy mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deployNodeType": {
                    "type": "string",
                    "description": "The deploy node type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "$ref": "#/types/volcengine:vke/AddonsAddonStatus:AddonsAddonStatus",
                    "description": "The status of the addon.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateClientToken": {
                    "type": "string",
                    "description": "The ClientToken when the last addon update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The last time a request was accepted by the addon and executed or completed. UTC+0 time in standard RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "The name of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "config",
                "createTime",
                "deployMode",
                "deployNodeType",
                "name",
                "status",
                "updateTime",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/AddonsAddonStatus:AddonsAddonStatus": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/AddonsAddonStatusCondition:AddonsAddonStatusCondition"
                    },
                    "description": "The state condition in the current primary state of the cluster, that is, the reason for entering the primary state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The status of addon. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Failed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "phase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/AddonsAddonStatusCondition:AddonsAddonStatusCondition": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The state condition in the current main state of the addon, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`,`Unknown`, `ClusterNotRunning`, `CrashLoopBackOff`, `SchedulingFailed`, `NameConflict`, `ResourceCleanupFailed`, `ClusterVersionUpgrading`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/AddonsStatus:AddonsStatus": {
            "properties": {
                "conditionsType": {
                    "type": "string",
                    "description": "The state condition in the current main state of the addon, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`,`Unknown`, `ClusterNotRunning`, `CrashLoopBackOff`, `SchedulingFailed`, `NameConflict`, `ResourceCleanupFailed`, `ClusterVersionUpgrading`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The status of addon. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Failed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/ClusterClusterConfig:ClusterClusterConfig": {
            "properties": {
                "apiServerPublicAccessConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterClusterConfigApiServerPublicAccessConfig:ClusterClusterConfigApiServerPublicAccessConfig",
                    "description": "Cluster API Server public network access configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiServerPublicAccessEnabled": {
                    "type": "boolean",
                    "description": "Cluster API Server public network access configuration, the value is `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFamily": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "resourcePublicAccessDefaultEnabled": {
                    "type": "boolean",
                    "description": "Node public network access configuration, the value is `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ID for the cluster control plane to communicate within the private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "subnetIds"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipFamily",
                        "subnetIds"
                    ]
                }
            }
        },
        "volcengine:vke/ClusterClusterConfigApiServerPublicAccessConfig:ClusterClusterConfigApiServerPublicAccessConfig": {
            "properties": {
                "publicAccessNetworkConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig:ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig",
                    "description": "Public network access network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:vke/ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig:ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The peak bandwidth of the public IP, unit: Mbps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingType": {
                    "type": "string",
                    "description": "Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/ClusterLoggingConfig:ClusterLoggingConfig": {
            "properties": {
                "logProjectId": {
                    "type": "string",
                    "description": "The TLS log item ID of the collection target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logSetups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/ClusterLoggingConfigLogSetup:ClusterLoggingConfigLogSetup"
                    },
                    "description": "Cluster logging options. This structure can only be modified and added, and cannot be deleted. When encountering a `cannot be deleted` error, please query the log setups of the current cluster and fill in the current `tf` file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "logProjectId"
                    ]
                }
            }
        },
        "volcengine:vke/ClusterLoggingConfigLogSetup:ClusterLoggingConfigLogSetup": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logTtl": {
                    "type": "integer",
                    "description": "The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logType": {
                    "type": "string",
                    "description": "The currently enabled log type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "logType"
            ]
        },
        "volcengine:vke/ClusterPodsConfig:ClusterPodsConfig": {
            "properties": {
                "flannelConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterPodsConfigFlannelConfig:ClusterPodsConfigFlannelConfig",
                    "description": "Flannel network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "podNetworkMode": {
                    "type": "string",
                    "description": "The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vpcCniConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterPodsConfigVpcCniConfig:ClusterPodsConfigVpcCniConfig",
                    "description": "VPC-CNI network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "podNetworkMode"
            ]
        },
        "volcengine:vke/ClusterPodsConfigFlannelConfig:ClusterPodsConfigFlannelConfig": {
            "properties": {
                "maxPodsPerNode": {
                    "type": "integer",
                    "description": "The maximum number of single-node Pod instances for a Flannel container network, the value can be `16` or `32` or `64` or `128` or `256`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "podCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pod CIDR for the Flannel container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:vke/ClusterPodsConfigVpcCniConfig:ClusterPodsConfigVpcCniConfig": {
            "properties": {
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Pod subnet IDs for the VPC-CNI container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The private network where the cluster control plane network resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:vke/ClusterServicesConfig:ClusterServicesConfig": {
            "properties": {
                "serviceCidrsv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IPv4 private network address exposed by the service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "serviceCidrsv4s"
            ]
        },
        "volcengine:vke/ClusterTag:ClusterTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vke/ClustersCluster:ClustersCluster": {
            "properties": {
                "clusterConfig": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterClusterConfig:ClustersClusterClusterConfig",
                    "description": "The config of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createClientToken": {
                    "type": "string",
                    "description": "ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "Cluster creation time. UTC+0 time in standard RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteProtectionEnabled": {
                    "type": "boolean",
                    "description": "The delete protection of the cluster, the value is `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAllocationId": {
                    "type": "string",
                    "description": "Eip allocation Id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeconfigPrivate": {
                    "type": "string",
                    "description": "Kubeconfig data with private network access, returned in BASE64 encoding, it is suggested to use vke_kubeconfig instead.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeconfigPublic": {
                    "type": "string",
                    "description": "Kubeconfig data with public network access, returned in BASE64 encoding, it is suggested to use vke_kubeconfig instead.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The Kubernetes version information corresponding to the cluster, specific to the patch version.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loggingConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/ClustersClusterLoggingConfig:ClustersClusterLoggingConfig"
                    },
                    "description": "Cluster log configuration information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatistics": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterNodeStatistics:ClustersClusterNodeStatistics",
                    "description": "Statistics on the number of nodes corresponding to each master state in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podsConfig": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterPodsConfig:ClustersClusterPodsConfig",
                    "description": "The config of the pods.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesConfig": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterServicesConfig:ClustersClusterServicesConfig",
                    "description": "The config of the services.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterStatus:ClustersClusterStatus",
                    "description": "The status of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/ClustersClusterTag:ClustersClusterTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateClientToken": {
                    "type": "string",
                    "description": "The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The last time a request was accepted by the cluster and executed or completed. UTC+0 time in standard RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterConfig",
                "createTime",
                "deleteProtectionEnabled",
                "description",
                "eipAllocationId",
                "id",
                "kubeconfigPrivate",
                "kubeconfigPublic",
                "kubernetesVersion",
                "loggingConfigs",
                "name",
                "nodeStatistics",
                "podsConfig",
                "servicesConfig",
                "status",
                "tags",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterClusterConfig:ClustersClusterClusterConfig": {
            "properties": {
                "apiServerEndpoints": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterClusterConfigApiServerEndpoints:ClustersClusterClusterConfigApiServerEndpoints",
                    "description": "Endpoint information accessed by the cluster API Server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiServerPublicAccessConfig": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterClusterConfigApiServerPublicAccessConfig:ClustersClusterClusterConfigApiServerPublicAccessConfig",
                    "description": "Cluster API Server public network access configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiServerPublicAccessEnabled": {
                    "type": "boolean",
                    "description": "Cluster API Server public network access configuration, the value is `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePublicAccessDefaultEnabled": {
                    "type": "boolean",
                    "description": "Node public network access configuration, the value is `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group used by the cluster control plane and nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Pod subnet IDs for the VPC-CNI container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The private network where the cluster control plane network resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiServerEndpoints",
                "apiServerPublicAccessConfig",
                "apiServerPublicAccessEnabled",
                "resourcePublicAccessDefaultEnabled",
                "securityGroupIds",
                "subnetIds",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterClusterConfigApiServerEndpoints:ClustersClusterClusterConfigApiServerEndpoints": {
            "properties": {
                "privateIp": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterClusterConfigApiServerEndpointsPrivateIp:ClustersClusterClusterConfigApiServerEndpointsPrivateIp",
                    "description": "Endpoint address of the cluster API Server private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterClusterConfigApiServerEndpointsPublicIp:ClustersClusterClusterConfigApiServerEndpointsPublicIp",
                    "description": "Endpoint address of the cluster API Server public network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateIp",
                "publicIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterClusterConfigApiServerEndpointsPrivateIp:ClustersClusterClusterConfigApiServerEndpointsPrivateIp": {
            "properties": {
                "ipv4": {
                    "type": "string",
                    "description": "Ipv4 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipv4"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterClusterConfigApiServerEndpointsPublicIp:ClustersClusterClusterConfigApiServerEndpointsPublicIp": {
            "properties": {
                "ipv4": {
                    "type": "string",
                    "description": "Ipv4 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipv4"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterClusterConfigApiServerPublicAccessConfig:ClustersClusterClusterConfigApiServerPublicAccessConfig": {
            "properties": {
                "accessSourceIpsv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPv4 public network access whitelist. A null value means all network segments (0.0.0.0/0) are allowed to pass.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFamily": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccessNetworkConfig": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig:ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig",
                    "description": "Public network access network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessSourceIpsv4s",
                "ipFamily",
                "publicAccessNetworkConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig:ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The peak bandwidth of the public IP, unit: Mbps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingType": {
                    "type": "string",
                    "description": "Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "description": "The ISP of public IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bandwidth",
                "billingType",
                "isp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterLoggingConfig:ClustersClusterLoggingConfig": {
            "properties": {
                "logProjectId": {
                    "type": "string",
                    "description": "The TLS log item ID of the collection target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logSetups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/ClustersClusterLoggingConfigLogSetup:ClustersClusterLoggingConfigLogSetup"
                    },
                    "description": "Cluster logging options.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "logProjectId",
                "logSetups"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterLoggingConfigLogSetup:ClustersClusterLoggingConfigLogSetup": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logTtl": {
                    "type": "integer",
                    "description": "The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logType": {
                    "type": "string",
                    "description": "The currently enabled log type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "logTtl",
                "logType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterNodeStatistics:ClustersClusterNodeStatistics": {
            "properties": {
                "creatingCount": {
                    "type": "integer",
                    "description": "Phase=Creating total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletingCount": {
                    "type": "integer",
                    "description": "Phase=Deleting total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failedCount": {
                    "type": "integer",
                    "description": "Phase=Failed total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runningCount": {
                    "type": "integer",
                    "description": "Phase=Running total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stoppedCount": {
                    "type": "integer",
                    "description": "Phase=Stopped total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "description": "The total count of Cluster query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatingCount": {
                    "type": "integer",
                    "description": "Phase=Updating total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creatingCount",
                "deletingCount",
                "failedCount",
                "runningCount",
                "stoppedCount",
                "totalCount",
                "updatingCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterPodsConfig:ClustersClusterPodsConfig": {
            "properties": {
                "flannelConfig": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterPodsConfigFlannelConfig:ClustersClusterPodsConfigFlannelConfig",
                    "description": "Flannel network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podNetworkMode": {
                    "type": "string",
                    "description": "Container Pod Network Type (CNI), the value is `Flannel` or `VpcCniShared`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcCniConfig": {
                    "$ref": "#/types/volcengine:vke/ClustersClusterPodsConfigVpcCniConfig:ClustersClusterPodsConfigVpcCniConfig",
                    "description": "VPC-CNI network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "flannelConfig",
                "podNetworkMode",
                "vpcCniConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterPodsConfigFlannelConfig:ClustersClusterPodsConfigFlannelConfig": {
            "properties": {
                "maxPodsPerNode": {
                    "type": "integer",
                    "description": "The maximum number of single-node Pod instances for a Flannel container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pod CIDR for the Flannel container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxPodsPerNode",
                "podCidrs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterPodsConfigVpcCniConfig:ClustersClusterPodsConfigVpcCniConfig": {
            "properties": {
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Pod subnet IDs for the VPC-CNI container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The private network where the cluster control plane network resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnetIds",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterServicesConfig:ClustersClusterServicesConfig": {
            "properties": {
                "serviceCidrsv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IPv4 private network address exposed by the service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceCidrsv4s"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterStatus:ClustersClusterStatus": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/ClustersClusterStatusCondition:ClustersClusterStatusCondition"
                    },
                    "description": "The state condition in the current primary state of the cluster, that is, the reason for entering the primary state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "phase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterStatusCondition:ClustersClusterStatusCondition": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The Type of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersClusterTag:ClustersClusterTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The Type of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/ClustersStatus:ClustersStatus": {
            "properties": {
                "conditionsType": {
                    "type": "string",
                    "description": "The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/ClustersTag:ClustersTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vke/DefaultNodePoolBatchAttachInstance:DefaultNodePoolBatchAttachInstance": {
            "properties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "The flag of additional container storage enable, the value is `true` or `false`..Default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerStoragePath": {
                    "type": "string",
                    "description": "The container storage path.When additional_container_storage_enabled is `false` will ignore.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The Image Id to the ECS Instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepInstanceName": {
                    "type": "boolean",
                    "description": "The flag of keep instance name, the value is `true` or `false`.Default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "containerStoragePath",
                        "id",
                        "imageId",
                        "instanceId",
                        "phase"
                    ]
                }
            }
        },
        "volcengine:vke/DefaultNodePoolBatchAttachKubernetesConfig:DefaultNodePoolBatchAttachKubernetesConfig": {
            "properties": {
                "cordon": {
                    "type": "boolean",
                    "description": "The Cordon of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachKubernetesConfigLabel:DefaultNodePoolBatchAttachKubernetesConfigLabel"
                    },
                    "description": "The Labels of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachKubernetesConfigTaint:DefaultNodePoolBatchAttachKubernetesConfigTaint"
                    },
                    "description": "The Taints of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:vke/DefaultNodePoolBatchAttachKubernetesConfigLabel:DefaultNodePoolBatchAttachKubernetesConfigLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "volcengine:vke/DefaultNodePoolBatchAttachKubernetesConfigTaint:DefaultNodePoolBatchAttachKubernetesConfigTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Effect of Taints. The value can be one of the following: `NoSchedule`, `NoExecute`, `PreferNoSchedule`, default value is `NoSchedule`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "description": "The Key of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "volcengine:vke/DefaultNodePoolBatchAttachNodeConfig:DefaultNodePoolBatchAttachNodeConfig": {
            "properties": {
                "ecsTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachNodeConfigEcsTag:DefaultNodePoolBatchAttachNodeConfigEcsTag"
                    },
                    "description": "Tags for Ecs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeScript": {
                    "type": "string",
                    "description": "The initializeScript of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namePrefix": {
                    "type": "string",
                    "description": "The NamePrefix of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachNodeConfigSecurity:DefaultNodePoolBatchAttachNodeConfigSecurity"
                    },
                    "description": "The Security of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ecsTags",
                        "initializeScript",
                        "namePrefix",
                        "securities"
                    ]
                }
            }
        },
        "volcengine:vke/DefaultNodePoolBatchAttachNodeConfigEcsTag:DefaultNodePoolBatchAttachNodeConfigEcsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "value"
                    ]
                }
            }
        },
        "volcengine:vke/DefaultNodePoolBatchAttachNodeConfigSecurity:DefaultNodePoolBatchAttachNodeConfigSecurity": {
            "properties": {
                "logins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachNodeConfigSecurityLogin:DefaultNodePoolBatchAttachNodeConfigSecurityLogin"
                    },
                    "description": "The Login of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SecurityGroupIds of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityStrategies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SecurityStrategies of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "logins",
                        "securityGroupIds",
                        "securityStrategies"
                    ]
                }
            }
        },
        "volcengine:vke/DefaultNodePoolBatchAttachNodeConfigSecurityLogin:DefaultNodePoolBatchAttachNodeConfigSecurityLogin": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The Password of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPairName": {
                    "type": "string",
                    "description": "The SshKeyPairName of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "password",
                        "sshKeyPairName"
                    ]
                }
            }
        },
        "volcengine:vke/DefaultNodePoolBatchAttachTag:DefaultNodePoolBatchAttachTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "value"
                    ]
                }
            }
        },
        "volcengine:vke/DefaultNodePoolInstance:DefaultNodePoolInstance": {
            "properties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "The flag of additional container storage enable, the value is `true` or `false`..Default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerStoragePath": {
                    "type": "string",
                    "description": "The container storage path.When additional_container_storage_enabled is `false` will ignore.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The Image Id to the ECS Instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepInstanceName": {
                    "type": "boolean",
                    "description": "The flag of keep instance name, the value is `true` or `false`.Default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "containerStoragePath",
                        "id",
                        "imageId",
                        "instanceId",
                        "phase"
                    ]
                }
            }
        },
        "volcengine:vke/DefaultNodePoolKubernetesConfig:DefaultNodePoolKubernetesConfig": {
            "properties": {
                "cordon": {
                    "type": "boolean",
                    "description": "The Cordon of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolKubernetesConfigLabel:DefaultNodePoolKubernetesConfigLabel"
                    },
                    "description": "The Labels of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolKubernetesConfigTaint:DefaultNodePoolKubernetesConfigTaint"
                    },
                    "description": "The Taints of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cordon"
            ]
        },
        "volcengine:vke/DefaultNodePoolKubernetesConfigLabel:DefaultNodePoolKubernetesConfigLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/DefaultNodePoolKubernetesConfigTaint:DefaultNodePoolKubernetesConfigTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Effect of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The Key of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/DefaultNodePoolNodeConfig:DefaultNodePoolNodeConfig": {
            "properties": {
                "ecsTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolNodeConfigEcsTag:DefaultNodePoolNodeConfigEcsTag"
                    },
                    "description": "Tags for Ecs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeScript": {
                    "type": "string",
                    "description": "The initializeScript of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namePrefix": {
                    "type": "string",
                    "description": "The NamePrefix of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "security": {
                    "$ref": "#/types/volcengine:vke/DefaultNodePoolNodeConfigSecurity:DefaultNodePoolNodeConfigSecurity",
                    "description": "The Security of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "security"
            ]
        },
        "volcengine:vke/DefaultNodePoolNodeConfigEcsTag:DefaultNodePoolNodeConfigEcsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vke/DefaultNodePoolNodeConfigSecurity:DefaultNodePoolNodeConfigSecurity": {
            "properties": {
                "login": {
                    "$ref": "#/types/volcengine:vke/DefaultNodePoolNodeConfigSecurityLogin:DefaultNodePoolNodeConfigSecurityLogin",
                    "description": "The Login of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SecurityGroupIds of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityStrategies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SecurityStrategies of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "login"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "login",
                        "securityGroupIds"
                    ]
                }
            }
        },
        "volcengine:vke/DefaultNodePoolNodeConfigSecurityLogin:DefaultNodePoolNodeConfigSecurityLogin": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The Password of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPairName": {
                    "type": "string",
                    "description": "The SshKeyPairName of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/DefaultNodePoolTag:DefaultNodePoolTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vke/KubeconfigsKubeconfig:KubeconfigsKubeconfig": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The Cluster ID of the Kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of the Kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expire time of the Kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeconfig": {
                    "type": "string",
                    "description": "Kubeconfig data with public/private network access, returned in BASE64 encoding.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeconfigId": {
                    "type": "string",
                    "description": "The ID of the Kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "description": "The account ID of the Kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "createTime",
                "expireTime",
                "id",
                "kubeconfig",
                "kubeconfigId",
                "type",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodeKubernetesConfig:NodeKubernetesConfig": {
            "properties": {
                "cordon": {
                    "type": "boolean",
                    "description": "The Cordon of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodeKubernetesConfigLabel:NodeKubernetesConfigLabel"
                    },
                    "description": "The Labels of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodeKubernetesConfigTaint:NodeKubernetesConfigTaint"
                    },
                    "description": "The Taints of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cordon",
                        "taints"
                    ]
                }
            }
        },
        "volcengine:vke/NodeKubernetesConfigLabel:NodeKubernetesConfigLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:vke/NodeKubernetesConfigTaint:NodeKubernetesConfigTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "description": "The Key of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:vke/NodePoolAutoScaling:NodePoolAutoScaling": {
            "properties": {
                "desiredReplicas": {
                    "type": "integer",
                    "description": "The DesiredReplicas of AutoScaling, default 0, range in min_replicas to max_replicas.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is Enabled of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxReplicas": {
                    "type": "integer",
                    "description": "The MaxReplicas of AutoScaling, default 10, range in 1~2000.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minReplicas": {
                    "type": "integer",
                    "description": "The MinReplicas of AutoScaling, default 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The Priority of AutoScaling, default 10, rang in 0~100.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetPolicy": {
                    "type": "string",
                    "description": "Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "desiredReplicas",
                        "enabled",
                        "minReplicas",
                        "priority",
                        "subnetPolicy"
                    ]
                }
            }
        },
        "volcengine:vke/NodePoolKubernetesConfig:NodePoolKubernetesConfig": {
            "properties": {
                "cordon": {
                    "type": "boolean",
                    "description": "The Cordon of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolKubernetesConfigLabel:NodePoolKubernetesConfigLabel"
                    },
                    "description": "The Labels of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolKubernetesConfigTaint:NodePoolKubernetesConfigTaint"
                    },
                    "description": "The Taints of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cordon"
            ]
        },
        "volcengine:vke/NodePoolKubernetesConfigLabel:NodePoolKubernetesConfigLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/NodePoolKubernetesConfigTaint:NodePoolKubernetesConfigTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The Key of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/NodePoolNodeConfig:NodePoolNodeConfig": {
            "properties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "The AdditionalContainerStorageEnabled of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "autoRenew": {
                    "type": "boolean",
                    "description": "Is AutoRenew of PrePaid instance of NodeConfig. Valid values: true, false. when InstanceChargeType is PrePaid, default value is true.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoRenewPeriod": {
                    "type": "integer",
                    "description": "The AutoRenewPeriod of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 6, 12. Unit: month. when InstanceChargeType is PrePaid and AutoRenew enable, default value is 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolNodeConfigDataVolume:NodePoolNodeConfigDataVolume"
                    },
                    "description": "The DataVolumes of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ecsTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolNodeConfigEcsTag:NodePoolNodeConfigEcsTag"
                    },
                    "description": "Tags for Ecs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hpcClusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of HpcCluster, only one ID is supported currently.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The ImageId of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeScript": {
                    "type": "string",
                    "description": "The initializeScript of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The InstanceChargeType of PrePaid instance of NodeConfig. Valid values: PostPaid, PrePaid. Default value: PostPaid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "instanceTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The InstanceTypeIds of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namePrefix": {
                    "type": "string",
                    "description": "The NamePrefix of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "period": {
                    "type": "integer",
                    "description": "The Period of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36. Unit: month. when InstanceChargeType is PrePaid, default value is 12.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "security": {
                    "$ref": "#/types/volcengine:vke/NodePoolNodeConfigSecurity:NodePoolNodeConfigSecurity",
                    "description": "The Security of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SubnetIds of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemVolume": {
                    "$ref": "#/types/volcengine:vke/NodePoolNodeConfigSystemVolume:NodePoolNodeConfigSystemVolume",
                    "description": "The SystemVolume of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "instanceTypeIds",
                "security",
                "subnetIds"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoRenew",
                        "autoRenewPeriod",
                        "imageId",
                        "instanceTypeIds",
                        "period",
                        "security",
                        "subnetIds",
                        "systemVolume"
                    ]
                }
            }
        },
        "volcengine:vke/NodePoolNodeConfigDataVolume:NodePoolNodeConfigDataVolume": {
            "properties": {
                "mountPoint": {
                    "type": "string",
                    "description": "The target mount directory of the disk. Must start with `/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The Size of DataVolumes, the value range in 20~32768.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The Type of DataVolumes, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:vke/NodePoolNodeConfigEcsTag:NodePoolNodeConfigEcsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vke/NodePoolNodeConfigSecurity:NodePoolNodeConfigSecurity": {
            "properties": {
                "login": {
                    "$ref": "#/types/volcengine:vke/NodePoolNodeConfigSecurityLogin:NodePoolNodeConfigSecurityLogin",
                    "description": "The Login of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SecurityGroupIds of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityStrategies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SecurityStrategies of Security, the value can be empty or `Hids`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "securityGroupIds"
                    ]
                }
            }
        },
        "volcengine:vke/NodePoolNodeConfigSecurityLogin:NodePoolNodeConfigSecurityLogin": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The Password of Security, this field must be encoded with base64.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPairName": {
                    "type": "string",
                    "description": "The SshKeyPairName of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/NodePoolNodeConfigSystemVolume:NodePoolNodeConfigSystemVolume": {
            "properties": {
                "size": {
                    "type": "integer",
                    "description": "The Size of SystemVolume, the value range in 20~2048.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The Type of SystemVolume, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:vke/NodePoolTag:NodePoolTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vke/NodePoolsNodePool:NodePoolsNodePool": {
            "properties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "Is AdditionalContainerStorageEnabled of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoRenew": {
                    "type": "boolean",
                    "description": "Is auto renew of the PrePaid instance of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoRenewPeriod": {
                    "type": "integer",
                    "description": "The AutoRenewPeriod of the PrePaid instance of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ClusterId of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Condition of Status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cordon": {
                    "type": "boolean",
                    "description": "The Cordon of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createClientToken": {
                    "type": "string",
                    "description": "The ClientToken when successfully created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The CreateTime of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolsNodePoolDataVolume:NodePoolsNodePoolDataVolume"
                    },
                    "description": "The DataVolume of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desiredReplicas": {
                    "type": "integer",
                    "description": "The DesiredReplicas of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ecsTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolsNodePoolEcsTag:NodePoolsNodePoolEcsTag"
                    },
                    "description": "Tags for Ecs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is Enabled of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hpcClusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of HpcCluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Id of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The ImageId of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeScript": {
                    "type": "string",
                    "description": "The InitializeScript of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The InstanceChargeType of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The InstanceTypeIds of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labelContents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolsNodePoolLabelContent:NodePoolsNodePoolLabelContent"
                    },
                    "description": "The LabelContent of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loginKeyPairName": {
                    "type": "string",
                    "description": "The login SshKeyPairName of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loginType": {
                    "type": "string",
                    "description": "The login type of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxReplicas": {
                    "type": "integer",
                    "description": "The MaxReplicas of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minReplicas": {
                    "type": "integer",
                    "description": "The MinReplicas of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The Name of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namePrefix": {
                    "type": "string",
                    "description": "The NamePrefix of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatistics": {
                    "$ref": "#/types/volcengine:vke/NodePoolsNodePoolNodeStatistics:NodePoolsNodePoolNodeStatistics",
                    "description": "The NodeStatistics of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "period": {
                    "type": "integer",
                    "description": "The period of the PrePaid instance of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The Priority of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SecurityGroupIds of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityStrategies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SecurityStrategies of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityStrategyEnabled": {
                    "type": "boolean",
                    "description": "The SecurityStrategyEnabled of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SubnetId of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetPolicy": {
                    "type": "string",
                    "description": "Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemVolume": {
                    "$ref": "#/types/volcengine:vke/NodePoolsNodePoolSystemVolume:NodePoolsNodePoolSystemVolume",
                    "description": "The SystemVolume of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolsNodePoolTag:NodePoolsNodePoolTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taintContents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolsNodePoolTaintContent:NodePoolsNodePoolTaintContent"
                    },
                    "description": "The TaintContent of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateClientToken": {
                    "type": "string",
                    "description": "The ClientToken when last update was successful.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The UpdateTime time of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalContainerStorageEnabled",
                "autoRenew",
                "autoRenewPeriod",
                "clusterId",
                "conditionTypes",
                "cordon",
                "createClientToken",
                "createTime",
                "dataVolumes",
                "desiredReplicas",
                "ecsTags",
                "enabled",
                "hpcClusterIds",
                "id",
                "imageId",
                "initializeScript",
                "instanceChargeType",
                "instanceTypeIds",
                "labelContents",
                "loginKeyPairName",
                "loginType",
                "maxReplicas",
                "minReplicas",
                "name",
                "namePrefix",
                "nodeStatistics",
                "period",
                "phase",
                "priority",
                "securityGroupIds",
                "securityStrategies",
                "securityStrategyEnabled",
                "subnetIds",
                "subnetPolicy",
                "systemVolume",
                "tags",
                "taintContents",
                "updateClientToken",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodePoolsNodePoolDataVolume:NodePoolsNodePoolDataVolume": {
            "properties": {
                "mountPoint": {
                    "type": "string",
                    "description": "The target mount directory of the disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "description": "The Size of SystemVolume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The Type of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "mountPoint",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodePoolsNodePoolEcsTag:NodePoolsNodePoolEcsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodePoolsNodePoolLabelContent:NodePoolsNodePoolLabelContent": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodePoolsNodePoolNodeStatistics:NodePoolsNodePoolNodeStatistics": {
            "properties": {
                "creatingCount": {
                    "type": "integer",
                    "description": "The CreatingCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletingCount": {
                    "type": "integer",
                    "description": "The DeletingCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failedCount": {
                    "type": "integer",
                    "description": "The FailedCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runningCount": {
                    "type": "integer",
                    "description": "The RunningCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startingCount": {
                    "type": "integer",
                    "description": "The StartingCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stoppedCount": {
                    "type": "integer",
                    "description": "The StoppedCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stoppingCount": {
                    "type": "integer",
                    "description": "The StoppingCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "description": "Returns the total amount of the data list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatingCount": {
                    "type": "integer",
                    "description": "The UpdatingCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creatingCount",
                "deletingCount",
                "failedCount",
                "runningCount",
                "startingCount",
                "stoppedCount",
                "stoppingCount",
                "totalCount",
                "updatingCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodePoolsNodePoolSystemVolume:NodePoolsNodePoolSystemVolume": {
            "properties": {
                "size": {
                    "type": "string",
                    "description": "The Size of SystemVolume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The Type of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodePoolsNodePoolTag:NodePoolsNodePoolTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The Type of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodePoolsNodePoolTaintContent:NodePoolsNodePoolTaintContent": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Effect of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodePoolsStatus:NodePoolsStatus": {
            "properties": {
                "conditionsType": {
                    "type": "string",
                    "description": "Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/NodePoolsTag:NodePoolsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vke/NodesNode:NodesNode": {
            "properties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "Is Additional Container storage enables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Condition of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerStoragePath": {
                    "type": "string",
                    "description": "The Storage Path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cordon": {
                    "type": "boolean",
                    "description": "The Cordon of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createClientToken": {
                    "type": "string",
                    "description": "The Create Client Token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The ImageId of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeScript": {
                    "type": "string",
                    "description": "The InitializeScript of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isVirtual": {
                    "type": "boolean",
                    "description": "Is virtual node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodesNodeLabel:NodesNodeLabel"
                    },
                    "description": "The Label of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The Name of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodePoolId": {
                    "type": "string",
                    "description": "The node pool id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodesNodeTaint:NodesNodeTaint"
                    },
                    "description": "The Taint of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalContainerStorageEnabled",
                "clusterId",
                "conditionTypes",
                "containerStoragePath",
                "cordon",
                "createClientToken",
                "createTime",
                "id",
                "imageId",
                "initializeScript",
                "instanceId",
                "isVirtual",
                "labels",
                "name",
                "nodePoolId",
                "phase",
                "roles",
                "taints",
                "updateTime",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodesNodeLabel:NodesNodeLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodesNodeTaint:NodesNodeTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Effect of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The Key of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/NodesStatus:NodesStatus": {
            "properties": {
                "conditionsType": {
                    "type": "string",
                    "description": "The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:vke/SupportAddonsAddon:SupportAddonsAddon": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deployMode": {
                    "type": "string",
                    "description": "The deploy model.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deployNodeTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the addon.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "necessary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podNetworkModes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/SupportAddonsAddonVersion:SupportAddonsAddonVersion"
                    },
                    "description": "The version info of addon.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deployMode",
                "deployNodeTypes",
                "name",
                "podNetworkModes",
                "versions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/SupportAddonsAddonVersion:SupportAddonsAddonVersion": {
            "properties": {
                "compatibilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/SupportAddonsAddonVersionCompatibility:SupportAddonsAddonVersionCompatibility"
                    },
                    "description": "The compatible version list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compatibleVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The compatible version list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "The basic version info.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "compatibilities",
                "compatibleVersions",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vke/SupportAddonsAddonVersionCompatibility:SupportAddonsAddonVersionCompatibility": {
            "properties": {
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The Kubernetes Version of addon.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kubernetesVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/Ipv6AddressBandwidthsIpv6AddressBandwidth:Ipv6AddressBandwidthsIpv6AddressBandwidth": {
            "properties": {
                "allocationId": {
                    "type": "string",
                    "description": "The ID of the Ipv6AddressBandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "Peek bandwidth of the Ipv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingType": {
                    "type": "string",
                    "description": "BillingType of the Ipv6 bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "businessStatus": {
                    "type": "string",
                    "description": "The BusinessStatus of the Ipv6AddressBandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of the Ipv6AddressBandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteTime": {
                    "type": "string",
                    "description": "Delete time of the Ipv6AddressBandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Ipv6AddressBandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the associated instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the associated instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "description": "ISP of the ipv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lockReason": {
                    "type": "string",
                    "description": "The BusinessStatus of the Ipv6AddressBandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkType": {
                    "type": "string",
                    "description": "The network type of the ipv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "Overdue time of the Ipv6AddressBandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Ipv6AddressBandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "Update time of the Ipv6AddressBandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocationId",
                "bandwidth",
                "billingType",
                "businessStatus",
                "creationTime",
                "deleteTime",
                "id",
                "instanceId",
                "instanceType",
                "ipv6Address",
                "isp",
                "lockReason",
                "networkType",
                "overdueTime",
                "status",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/Ipv6AddressesIpv6Address:Ipv6AddressesIpv6Address": {
            "properties": {
                "ipv6Address": {
                    "type": "string",
                    "description": "The IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipv6Address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/Ipv6GatewaysIpv6Gateway:Ipv6GatewaysIpv6Gateway": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of the Ipv6Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Ipv6Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Ipv6Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6GatewayId": {
                    "type": "string",
                    "description": "The ID of the Ipv6Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Ipv6Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The Status of the Ipv6Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "Update time of the Ipv6Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC which the Ipv6Gateway belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "description",
                "id",
                "ipv6GatewayId",
                "name",
                "status",
                "updateTime",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/NetworkAclEgressAclEntry:NetworkAclEgressAclEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationCidrIp": {
                    "type": "string",
                    "description": "The DestinationCidrIp of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclEntryId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclEntryName": {
                    "type": "string",
                    "description": "The name of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "description": "The policy of entry. Default is `accept`. The value can be `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "The port of entry. Default is `-1/-1`. When Protocol is `all`, `icmp` or `gre`, the port range is `-1/-1`, which means no port restriction.When the Protocol is `tcp` or `udp`, the port range is `1~65535`, and the format is `1/200`, `80/80`,which means port 1 to port 200, port 80.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of entry. The value can be `icmp` or `gre` or `tcp` or `udp` or `all`. Default is `all`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "networkAclEntryId",
                        "priority"
                    ]
                }
            }
        },
        "volcengine:vpc/NetworkAclIngressAclEntry:NetworkAclIngressAclEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclEntryId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclEntryName": {
                    "type": "string",
                    "description": "The name of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "description": "The policy of entry, default is `accept`. The value can be `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "The port of entry. Default is `-1/-1`. When Protocol is `all`, `icmp` or `gre`, the port range is `-1/-1`, which means no port restriction. When the Protocol is `tcp` or `udp`, the port range is `1~65535`, and the format is `1/200`, `80/80`, which means port 1 to port 200, port 80.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of entry, default is `all`. The value can be `icmp` or `gre` or `tcp` or `udp` or `all`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceCidrIp": {
                    "type": "string",
                    "description": "The SourceCidrIp of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "networkAclEntryId",
                        "priority"
                    ]
                }
            }
        },
        "volcengine:vpc/NetworkAclsNetworkAcl:NetworkAclsNetworkAcl": {
            "properties": {
                "aclEntryCount": {
                    "type": "integer",
                    "description": "The count of Network acl entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "egressAclEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkAclsNetworkAclEgressAclEntry:NetworkAclsNetworkAclEgressAclEntry"
                    },
                    "description": "The egress entries info of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingressAclEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkAclsNetworkAclIngressAclEntry:NetworkAclsNetworkAclIngressAclEntry"
                    },
                    "description": "The ingress entries info of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclId": {
                    "type": "string",
                    "description": "The ID of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclName": {
                    "type": "string",
                    "description": "The name of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkAclsNetworkAclResource:NetworkAclsNetworkAclResource"
                    },
                    "description": "The resources info of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The Status of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "Update time of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc id of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aclEntryCount",
                "creationTime",
                "description",
                "egressAclEntries",
                "id",
                "ingressAclEntries",
                "networkAclId",
                "networkAclName",
                "resources",
                "status",
                "updateTime",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/NetworkAclsNetworkAclEgressAclEntry:NetworkAclsNetworkAclEgressAclEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationCidrIp": {
                    "type": "string",
                    "description": "The DestinationCidrIp of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclEntryId": {
                    "type": "string",
                    "description": "The id of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclEntryName": {
                    "type": "string",
                    "description": "The name of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "description": "The policy of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "The port of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "destinationCidrIp",
                "networkAclEntryId",
                "networkAclEntryName",
                "policy",
                "port",
                "priority",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/NetworkAclsNetworkAclIngressAclEntry:NetworkAclsNetworkAclIngressAclEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclEntryId": {
                    "type": "string",
                    "description": "The id of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclEntryName": {
                    "type": "string",
                    "description": "The name of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "description": "The policy of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "The port of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceCidrIp": {
                    "type": "string",
                    "description": "The SourceCidrIp of entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "networkAclEntryId",
                "networkAclEntryName",
                "policy",
                "port",
                "priority",
                "protocol",
                "sourceCidrIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/NetworkAclsNetworkAclResource:NetworkAclsNetworkAclResource": {
            "properties": {
                "resourceId": {
                    "type": "string",
                    "description": "The resource id of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The Status of Network Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resourceId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/NetworkInterfaceTag:NetworkInterfaceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vpc/NetworkInterfacesNetworkInterface:NetworkInterfacesNetworkInterface": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account id of the ENI creator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedElasticIpAddress": {
                    "type": "string",
                    "description": "The IP address of the EIP to which the ENI associates.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedElasticIpId": {
                    "type": "string",
                    "description": "The allocation id of the EIP to which the ENI associates.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceId": {
                    "type": "string",
                    "description": "The id of the device to which the ENI is bound.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "The mac address of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The id of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceName": {
                    "type": "string",
                    "description": "A name of ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portSecurityEnabled": {
                    "type": "boolean",
                    "description": "The enable of port security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryIpAddress": {
                    "type": "string",
                    "description": "The primary IP address of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIpSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkInterfacesNetworkInterfacePrivateIpSet:NetworkInterfacesNetworkInterfacePrivateIpSet"
                    },
                    "description": "The IP address of secondary private network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the security group id to which the secondary ENI belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceManaged": {
                    "type": "boolean",
                    "description": "Whether the network card has been authorized to be used by other account services.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "A status of ENI, Optional choice contains `Creating`, `Available`, `Attaching`, `InUse`, `Detaching`, `Deleting`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "An id of the subnet to which the ENI is connected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkInterfacesNetworkInterfaceTag:NetworkInterfacesNetworkInterfaceTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "A type of ENI, Optional choice contains `primary`, `secondary`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update time of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "An id of the virtual private cloud (VPC) to which the ENI belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of the virtual private cloud (VPC) to which the ENI belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "associatedElasticIpAddress",
                "associatedElasticIpId",
                "createdAt",
                "description",
                "deviceId",
                "id",
                "macAddress",
                "networkInterfaceId",
                "networkInterfaceName",
                "portSecurityEnabled",
                "primaryIpAddress",
                "privateIpSets",
                "projectName",
                "securityGroupIds",
                "serviceManaged",
                "status",
                "subnetId",
                "tags",
                "type",
                "updatedAt",
                "vpcId",
                "vpcName",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/NetworkInterfacesNetworkInterfacePrivateIpSet:NetworkInterfacesNetworkInterfacePrivateIpSet": {
            "properties": {
                "associatedElasticIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkInterfacesNetworkInterfacePrivateIpSetAssociatedElasticIp:NetworkInterfacesNetworkInterfacePrivateIpSetAssociatedElasticIp"
                    },
                    "description": "The public IP that secondary private network IP associated with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primary": {
                    "type": "boolean",
                    "description": "Whether the network interface is primary IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "The secondary private network IP address of the network interface card.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "associatedElasticIps",
                "primary",
                "privateIpAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/NetworkInterfacesNetworkInterfacePrivateIpSetAssociatedElasticIp:NetworkInterfacesNetworkInterfacePrivateIpSetAssociatedElasticIp": {
            "properties": {
                "allocationId": {
                    "type": "string",
                    "description": "The public IP ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAddress": {
                    "type": "string",
                    "description": "The public IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocationId",
                "eipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/NetworkInterfacesNetworkInterfaceTag:NetworkInterfacesNetworkInterfaceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/NetworkInterfacesTag:NetworkInterfacesTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vpc/RouteEntriesRouteEntry:RouteEntriesRouteEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "A destination CIDR block of route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextHopId": {
                    "type": "string",
                    "description": "An id of next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextHopName": {
                    "type": "string",
                    "description": "The name of the next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextHopType": {
                    "type": "string",
                    "description": "A type of next hop, Optional choice contains `Instance`, `NetworkInterface`, `NatGW`, `VpnGW`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeEntryId": {
                    "type": "string",
                    "description": "The id of the route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeEntryName": {
                    "type": "string",
                    "description": "A name of route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "description": "An id of route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the virtual private cloud (VPC) to which the route entry belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "destinationCidrBlock",
                "id",
                "nextHopId",
                "nextHopName",
                "nextHopType",
                "routeEntryId",
                "routeEntryName",
                "routeTableId",
                "status",
                "type",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/RouteTablesRouteTable:RouteTablesRouteTable": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account id of the route table creator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "description": "The id of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableName": {
                    "type": "string",
                    "description": "A name of route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableType": {
                    "type": "string",
                    "description": "The type of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the subnet ids to which the entry table associates.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The last update time of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "An id of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of the virtual private cloud (VPC) to which the route entry belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "creationTime",
                "description",
                "id",
                "projectName",
                "routeTableId",
                "routeTableName",
                "routeTableType",
                "subnetIds",
                "updateTime",
                "vpcId",
                "vpcName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/SecurityGroupRulesSecurityGroupRule:SecurityGroupRulesSecurityGroupRule": {
            "properties": {
                "cidrIp": {
                    "type": "string",
                    "description": "Cidr ip of egress/ingress Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The creation time of security group rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "description of a group rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of rule, ingress (inbound) or egress (outbound).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "description": "Access strategy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portEnd": {
                    "type": "integer",
                    "description": "Port end of egress/ingress Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portStart": {
                    "type": "integer",
                    "description": "Port start of egress/ingress Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of a security group rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the SecurityGroup, the value can be `tcp` or `udp` or `icmp` or `all`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "SecurityGroup ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceGroupId": {
                    "type": "string",
                    "description": "ID of the source security group whose access permission you want to set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of security group rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cidrIp",
                "creationTime",
                "description",
                "direction",
                "policy",
                "portEnd",
                "portStart",
                "priority",
                "protocol",
                "securityGroupId",
                "sourceGroupId",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/SecurityGroupTag:SecurityGroupTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vpc/SecurityGroupsSecurityGroup:SecurityGroupsSecurityGroup": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "The creation time of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The ID of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "The Name of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The Status of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/SecurityGroupsSecurityGroupTag:SecurityGroupsSecurityGroupTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "A Name Regex of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of vpc where security group is located.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "description",
                "id",
                "projectName",
                "securityGroupId",
                "securityGroupName",
                "status",
                "tags",
                "type",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/SecurityGroupsSecurityGroupTag:SecurityGroupsSecurityGroupTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/SecurityGroupsTag:SecurityGroupsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vpc/SubnetsSubnet:SubnetsSubnet": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID which the subnet belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availableIpAddressCount": {
                    "type": "integer",
                    "description": "The count of available ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr block of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6CidrBlock": {
                    "type": "string",
                    "description": "The IPv6 CIDR block of the VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAclId": {
                    "type": "string",
                    "description": "The ID of network acl which this subnet associate with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTable": {
                    "$ref": "#/types/volcengine:vpc/SubnetsSubnetRouteTable:SubnetsSubnetRouteTable",
                    "description": "The route table information.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "description": "The ID of route table which subnet associated with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableType": {
                    "type": "string",
                    "description": "The route table type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The Status of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "description": "The subnet name to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalIpv4Count": {
                    "type": "integer",
                    "description": "The Count of ipv4.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "Update time of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC which subnet belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The ID of zone which subnet belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "availableIpAddressCount",
                "cidrBlock",
                "creationTime",
                "description",
                "id",
                "ipv6CidrBlock",
                "networkAclId",
                "routeTable",
                "routeTableId",
                "routeTableType",
                "status",
                "subnetName",
                "totalIpv4Count",
                "updateTime",
                "vpcId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/SubnetsSubnetRouteTable:SubnetsSubnetRouteTable": {
            "properties": {
                "routeTableId": {
                    "type": "string",
                    "description": "The ID of route table which subnet associated with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableType": {
                    "type": "string",
                    "description": "The route table type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "routeTableId",
                "routeTableType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/VpcAssociateCen:VpcAssociateCen": {
            "properties": {
                "cenId": {
                    "type": "string",
                    "description": "The ID of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenOwnerId": {
                    "type": "string",
                    "description": "The owner ID of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenStatus": {
                    "type": "string",
                    "description": "The status of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cenId",
                        "cenOwnerId",
                        "cenStatus"
                    ]
                }
            }
        },
        "volcengine:vpc/VpcTag:VpcTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vpc/VpcsTag:VpcsTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vpc/VpcsVpc:VpcsVpc": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associateCens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/VpcsVpcAssociateCen:VpcsVpcAssociateCen"
                    },
                    "description": "The associate cen list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "auxiliaryCidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The auxiliary cidr block list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr block of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The dns server list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6CidrBlock": {
                    "type": "string",
                    "description": "The IPv6 CIDR block of the VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natGatewayIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The nat gateway ID list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The route table ID list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ID list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/VpcsVpcTag:VpcsVpcTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcName": {
                    "type": "string",
                    "description": "The vpc name to query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "associateCens",
                "auxiliaryCidrBlocks",
                "cidrBlock",
                "creationTime",
                "description",
                "dnsServers",
                "ipv6CidrBlock",
                "natGatewayIds",
                "projectName",
                "routeTableIds",
                "securityGroupIds",
                "status",
                "subnetIds",
                "tags",
                "updateTime",
                "vpcId",
                "vpcName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/VpcsVpcAssociateCen:VpcsVpcAssociateCen": {
            "properties": {
                "cenId": {
                    "type": "string",
                    "description": "The ID of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenOwnerId": {
                    "type": "string",
                    "description": "The owner ID of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenStatus": {
                    "type": "string",
                    "description": "The status of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cenId",
                "cenOwnerId",
                "cenStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpc/VpcsVpcTag:VpcsVpcTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpn/ConnectionsVpnConnection:ConnectionsVpnConnection": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attachStatus": {
                    "type": "string",
                    "description": "The IPsec attach status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attachType": {
                    "type": "string",
                    "description": "The IPsec attach type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "businessStatus": {
                    "type": "string",
                    "description": "The business status of IPsec connection, valid when the attach type is 'TransitRouter'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectStatus": {
                    "type": "string",
                    "description": "The connect status of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customerGatewayId": {
                    "type": "string",
                    "description": "An ID of customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The delete time of resource, valid when the attach type is 'TransitRouter'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dpdAction": {
                    "type": "string",
                    "description": "The dpd action of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeConfigAuthAlg": {
                    "type": "string",
                    "description": "The auth alg of the ike config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeConfigDhGroup": {
                    "type": "string",
                    "description": "The dk group of the ike config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeConfigEncAlg": {
                    "type": "string",
                    "description": "The enc alg of the ike config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeConfigLifetime": {
                    "type": "integer",
                    "description": "The lifetime of the ike config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeConfigLocalId": {
                    "type": "string",
                    "description": "The local_id of the ike config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeConfigMode": {
                    "type": "string",
                    "description": "The mode of the ike config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeConfigPsk": {
                    "type": "string",
                    "description": "The psk of the ike config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeConfigRemoteId": {
                    "type": "string",
                    "description": "The remote id of the ike config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeConfigVersion": {
                    "type": "string",
                    "description": "The version of the ike config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The ip address of transit router, valid when the attach type is 'TransitRouter'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipsecConfigAuthAlg": {
                    "type": "string",
                    "description": "The auth alg of the ipsec config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipsecConfigDhGroup": {
                    "type": "string",
                    "description": "The dh group of the ipsec config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipsecConfigEncAlg": {
                    "type": "string",
                    "description": "The enc alg of the ipsec config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipsecConfigLifetime": {
                    "type": "integer",
                    "description": "The lifetime of the ike config of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The local subnet of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logEnabled": {
                    "type": "boolean",
                    "description": "Whether to enable the connection log.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natTraversal": {
                    "type": "boolean",
                    "description": "The nat traversal of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "negotiateInstantly": {
                    "type": "boolean",
                    "description": "Whether to initiate negotiation mode immediately.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "The overdue time of resource, valid when the attach type is 'TransitRouter'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The remote subnet of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transitRouterId": {
                    "type": "string",
                    "description": "The id of transit router, valid when the attach type is 'TransitRouter'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnConnectionId": {
                    "type": "string",
                    "description": "The ID of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnConnectionName": {
                    "type": "string",
                    "description": "The name of the VPN connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "An ID of VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone id of transit router, valid when the attach type is 'TransitRouter'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "attachStatus",
                "attachType",
                "businessStatus",
                "connectStatus",
                "creationTime",
                "customerGatewayId",
                "deletedTime",
                "description",
                "dpdAction",
                "id",
                "ikeConfigAuthAlg",
                "ikeConfigDhGroup",
                "ikeConfigEncAlg",
                "ikeConfigLifetime",
                "ikeConfigLocalId",
                "ikeConfigMode",
                "ikeConfigPsk",
                "ikeConfigRemoteId",
                "ikeConfigVersion",
                "ipAddress",
                "ipsecConfigAuthAlg",
                "ipsecConfigDhGroup",
                "ipsecConfigEncAlg",
                "ipsecConfigLifetime",
                "localSubnets",
                "logEnabled",
                "natTraversal",
                "negotiateInstantly",
                "overdueTime",
                "remoteSubnets",
                "status",
                "transitRouterId",
                "updateTime",
                "vpnConnectionId",
                "vpnConnectionName",
                "vpnGatewayId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpn/CustomerGatewaysCustomerGateway:CustomerGatewaysCustomerGateway": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionCount": {
                    "type": "integer",
                    "description": "The connection count of the customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customerGatewayId": {
                    "type": "string",
                    "description": "The ID of the customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customerGatewayName": {
                    "type": "string",
                    "description": "The name of the customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "A IP address of the customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "connectionCount",
                "creationTime",
                "customerGatewayId",
                "customerGatewayName",
                "description",
                "id",
                "ipAddress",
                "status",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpn/GatewayRoutesVpnGatewayRoute:GatewayRoutesVpnGatewayRoute": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "The create time of VPN gateway route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "A destination cidr block.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the VPN gateway route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextHopId": {
                    "type": "string",
                    "description": "An ID of next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the VPN gateway route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of VPN gateway route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "An ID of VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnGatewayRouteId": {
                    "type": "string",
                    "description": "The ID of the VPN gateway route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "destinationCidrBlock",
                "id",
                "nextHopId",
                "status",
                "updateTime",
                "vpnGatewayId",
                "vpnGatewayRouteId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpn/GatewayTag:GatewayTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vpn/GatewaysTag:GatewaysTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "volcengine:vpn/GatewaysVpnGateway:GatewaysVpnGateway": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "The bandwidth of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingType": {
                    "type": "string",
                    "description": "The BillingType of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "businessStatus": {
                    "type": "string",
                    "description": "The business status of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionCount": {
                    "type": "integer",
                    "description": "The connection count of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The deleted time of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "description": "The expired time of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "A IP address of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lockReason": {
                    "type": "string",
                    "description": "The lock reason of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeCount": {
                    "type": "integer",
                    "description": "The route count of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "A subnet ID of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpn/GatewaysVpnGatewayTag:GatewaysVpnGatewayTag"
                    },
                    "description": "Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "A VPC ID of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "The ID of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnGatewayName": {
                    "type": "string",
                    "description": "The name of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "bandwidth",
                "billingType",
                "businessStatus",
                "connectionCount",
                "creationTime",
                "deletedTime",
                "description",
                "expiredTime",
                "id",
                "ipAddress",
                "lockReason",
                "routeCount",
                "status",
                "tags",
                "updateTime",
                "vpcId",
                "vpnGatewayId",
                "vpnGatewayName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:vpn/GatewaysVpnGatewayTag:GatewaysVpnGatewayTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the volcengine package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessKey": {
                "type": "string",
                "description": "The Access Key for Volcengine Provider\n"
            },
            "customerEndpoints": {
                "type": "string",
                "description": "CUSTOMER ENDPOINTS for Volcengine Provider\n"
            },
            "customerHeaders": {
                "type": "string",
                "description": "CUSTOMER HEADERS for Volcengine Provider\n"
            },
            "disableSsl": {
                "type": "boolean",
                "description": "Disable SSL for Volcengine Provider\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Customer Endpoint for Volcengine Provider\n"
            },
            "proxyUrl": {
                "type": "string",
                "description": "PROXY URL for Volcengine Provider\n"
            },
            "region": {
                "type": "string",
                "description": "The Region for Volcengine Provider\n"
            },
            "secretKey": {
                "type": "string",
                "description": "The Secret Key for Volcengine Provider\n"
            },
            "sessionToken": {
                "type": "string",
                "description": "The Session Token for Volcengine Provider\n"
            }
        },
        "inputProperties": {
            "accessKey": {
                "type": "string",
                "description": "The Access Key for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_ACCESS_KEY"
                    ]
                }
            },
            "customerEndpoints": {
                "type": "string",
                "description": "CUSTOMER ENDPOINTS for Volcengine Provider\n"
            },
            "customerHeaders": {
                "type": "string",
                "description": "CUSTOMER HEADERS for Volcengine Provider\n"
            },
            "disableSsl": {
                "type": "boolean",
                "description": "Disable SSL for Volcengine Provider\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Customer Endpoint for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_ENDPOINT"
                    ]
                }
            },
            "proxyUrl": {
                "type": "string",
                "description": "PROXY URL for Volcengine Provider\n"
            },
            "region": {
                "type": "string",
                "description": "The Region for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Secret Key for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_SECRET_KEY"
                    ]
                }
            },
            "sessionToken": {
                "type": "string",
                "description": "The Session Token for Volcengine Provider\n"
            }
        }
    },
    "resources": {
        "volcengine:autoscaling/scalingConfiguration:ScalingConfiguration": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.autoscaling.ScalingConfiguration(\"foo\", {\n    eipBandwidth: 10,\n    eipBillingType: \"PostPaidByBandwidth\",\n    eipIsp: \"ChinaMobile\",\n    hostName: \"\",\n    hpcClusterId: \"\",\n    imageId: \"image-ycgud4t4hxgso0e27bdl\",\n    instanceDescription: \"\",\n    instanceName: \"tf-test\",\n    instanceTypes: [\"ecs.g2i.large\"],\n    keyPairName: \"tf-keypair\",\n    password: \"\",\n    projectName: \"default\",\n    scalingConfigurationName: \"tf-test\",\n    scalingGroupId: \"scg-ycinx27x25gh9y31p0fy\",\n    securityEnhancementStrategy: \"InActive\",\n    securityGroupIds: [\"sg-2fepz3c793g1s59gp67y21r34\"],\n    spotStrategy: \"NoSpot\",\n    tags: [\n        {\n            key: \"tf-key1\",\n            value: \"tf-value1\",\n        },\n        {\n            key: \"tf-key2\",\n            value: \"tf-value2\",\n        },\n    ],\n    userData: \"IyEvYmluL2Jhc2gKZWNobyAidGVzdCI=\",\n    volumes: [\n        {\n            deleteWithInstance: false,\n            size: 20,\n            volumeType: \"ESSD_PL0\",\n        },\n        {\n            deleteWithInstance: true,\n            size: 20,\n            volumeType: \"ESSD_PL0\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.autoscaling.ScalingConfiguration(\"foo\",\n    eip_bandwidth=10,\n    eip_billing_type=\"PostPaidByBandwidth\",\n    eip_isp=\"ChinaMobile\",\n    host_name=\"\",\n    hpc_cluster_id=\"\",\n    image_id=\"image-ycgud4t4hxgso0e27bdl\",\n    instance_description=\"\",\n    instance_name=\"tf-test\",\n    instance_types=[\"ecs.g2i.large\"],\n    key_pair_name=\"tf-keypair\",\n    password=\"\",\n    project_name=\"default\",\n    scaling_configuration_name=\"tf-test\",\n    scaling_group_id=\"scg-ycinx27x25gh9y31p0fy\",\n    security_enhancement_strategy=\"InActive\",\n    security_group_ids=[\"sg-2fepz3c793g1s59gp67y21r34\"],\n    spot_strategy=\"NoSpot\",\n    tags=[\n        volcengine.autoscaling.ScalingConfigurationTagArgs(\n            key=\"tf-key1\",\n            value=\"tf-value1\",\n        ),\n        volcengine.autoscaling.ScalingConfigurationTagArgs(\n            key=\"tf-key2\",\n            value=\"tf-value2\",\n        ),\n    ],\n    user_data=\"IyEvYmluL2Jhc2gKZWNobyAidGVzdCI=\",\n    volumes=[\n        volcengine.autoscaling.ScalingConfigurationVolumeArgs(\n            delete_with_instance=False,\n            size=20,\n            volume_type=\"ESSD_PL0\",\n        ),\n        volcengine.autoscaling.ScalingConfigurationVolumeArgs(\n            delete_with_instance=True,\n            size=20,\n            volume_type=\"ESSD_PL0\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Autoscaling.ScalingConfiguration(\"foo\", new Volcengine.Autoscaling.ScalingConfigurationArgs\n        {\n            EipBandwidth = 10,\n            EipBillingType = \"PostPaidByBandwidth\",\n            EipIsp = \"ChinaMobile\",\n            HostName = \"\",\n            HpcClusterId = \"\",\n            ImageId = \"image-ycgud4t4hxgso0e27bdl\",\n            InstanceDescription = \"\",\n            InstanceName = \"tf-test\",\n            InstanceTypes = \n            {\n                \"ecs.g2i.large\",\n            },\n            KeyPairName = \"tf-keypair\",\n            Password = \"\",\n            ProjectName = \"default\",\n            ScalingConfigurationName = \"tf-test\",\n            ScalingGroupId = \"scg-ycinx27x25gh9y31p0fy\",\n            SecurityEnhancementStrategy = \"InActive\",\n            SecurityGroupIds = \n            {\n                \"sg-2fepz3c793g1s59gp67y21r34\",\n            },\n            SpotStrategy = \"NoSpot\",\n            Tags = \n            {\n                new Volcengine.Autoscaling.Inputs.ScalingConfigurationTagArgs\n                {\n                    Key = \"tf-key1\",\n                    Value = \"tf-value1\",\n                },\n                new Volcengine.Autoscaling.Inputs.ScalingConfigurationTagArgs\n                {\n                    Key = \"tf-key2\",\n                    Value = \"tf-value2\",\n                },\n            },\n            UserData = \"IyEvYmluL2Jhc2gKZWNobyAidGVzdCI=\",\n            Volumes = \n            {\n                new Volcengine.Autoscaling.Inputs.ScalingConfigurationVolumeArgs\n                {\n                    DeleteWithInstance = false,\n                    Size = 20,\n                    VolumeType = \"ESSD_PL0\",\n                },\n                new Volcengine.Autoscaling.Inputs.ScalingConfigurationVolumeArgs\n                {\n                    DeleteWithInstance = true,\n                    Size = 20,\n                    VolumeType = \"ESSD_PL0\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewScalingConfiguration(ctx, \"foo\", \u0026autoscaling.ScalingConfigurationArgs{\n\t\t\tEipBandwidth:        pulumi.Int(10),\n\t\t\tEipBillingType:      pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\tEipIsp:              pulumi.String(\"ChinaMobile\"),\n\t\t\tHostName:            pulumi.String(\"\"),\n\t\t\tHpcClusterId:        pulumi.String(\"\"),\n\t\t\tImageId:             pulumi.String(\"image-ycgud4t4hxgso0e27bdl\"),\n\t\t\tInstanceDescription: pulumi.String(\"\"),\n\t\t\tInstanceName:        pulumi.String(\"tf-test\"),\n\t\t\tInstanceTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ecs.g2i.large\"),\n\t\t\t},\n\t\t\tKeyPairName:                 pulumi.String(\"tf-keypair\"),\n\t\t\tPassword:                    pulumi.String(\"\"),\n\t\t\tProjectName:                 pulumi.String(\"default\"),\n\t\t\tScalingConfigurationName:    pulumi.String(\"tf-test\"),\n\t\t\tScalingGroupId:              pulumi.String(\"scg-ycinx27x25gh9y31p0fy\"),\n\t\t\tSecurityEnhancementStrategy: pulumi.String(\"InActive\"),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sg-2fepz3c793g1s59gp67y21r34\"),\n\t\t\t},\n\t\t\tSpotStrategy: pulumi.String(\"NoSpot\"),\n\t\t\tTags: autoscaling.ScalingConfigurationTagArray{\n\t\t\t\t\u0026autoscaling.ScalingConfigurationTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"tf-key1\"),\n\t\t\t\t\tValue: pulumi.String(\"tf-value1\"),\n\t\t\t\t},\n\t\t\t\t\u0026autoscaling.ScalingConfigurationTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"tf-key2\"),\n\t\t\t\t\tValue: pulumi.String(\"tf-value2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUserData: pulumi.String(\"IyEvYmluL2Jhc2gKZWNobyAidGVzdCI=\"),\n\t\t\tVolumes: autoscaling.ScalingConfigurationVolumeArray{\n\t\t\t\t\u0026autoscaling.ScalingConfigurationVolumeArgs{\n\t\t\t\t\tDeleteWithInstance: pulumi.Bool(false),\n\t\t\t\t\tSize:               pulumi.Int(20),\n\t\t\t\t\tVolumeType:         pulumi.String(\"ESSD_PL0\"),\n\t\t\t\t},\n\t\t\t\t\u0026autoscaling.ScalingConfigurationVolumeArgs{\n\t\t\t\t\tDeleteWithInstance: pulumi.Bool(true),\n\t\t\t\t\tSize:               pulumi.Int(20),\n\t\t\t\t\tVolumeType:         pulumi.String(\"ESSD_PL0\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ScalingConfiguration(\"foo\", ScalingConfigurationArgs.builder()        \n            .eipBandwidth(10)\n            .eipBillingType(\"PostPaidByBandwidth\")\n            .eipIsp(\"ChinaMobile\")\n            .hostName(\"\")\n            .hpcClusterId(\"\")\n            .imageId(\"image-ycgud4t4hxgso0e27bdl\")\n            .instanceDescription(\"\")\n            .instanceName(\"tf-test\")\n            .instanceTypes(\"ecs.g2i.large\")\n            .keyPairName(\"tf-keypair\")\n            .password(\"\")\n            .projectName(\"default\")\n            .scalingConfigurationName(\"tf-test\")\n            .scalingGroupId(\"scg-ycinx27x25gh9y31p0fy\")\n            .securityEnhancementStrategy(\"InActive\")\n            .securityGroupIds(\"sg-2fepz3c793g1s59gp67y21r34\")\n            .spotStrategy(\"NoSpot\")\n            .tags(            \n                ScalingConfigurationTagArgs.builder()\n                    .key(\"tf-key1\")\n                    .value(\"tf-value1\")\n                    .build(),\n                ScalingConfigurationTagArgs.builder()\n                    .key(\"tf-key2\")\n                    .value(\"tf-value2\")\n                    .build())\n            .userData(\"IyEvYmluL2Jhc2gKZWNobyAidGVzdCI=\")\n            .volumes(            \n                ScalingConfigurationVolumeArgs.builder()\n                    .deleteWithInstance(false)\n                    .size(20)\n                    .volumeType(\"ESSD_PL0\")\n                    .build(),\n                ScalingConfigurationVolumeArgs.builder()\n                    .deleteWithInstance(true)\n                    .size(20)\n                    .volumeType(\"ESSD_PL0\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:autoscaling:ScalingConfiguration\n    properties:\n      eipBandwidth: 10\n      eipBillingType: PostPaidByBandwidth\n      eipIsp: ChinaMobile\n      hostName:\n      hpcClusterId:\n      imageId: image-ycgud4t4hxgso0e27bdl\n      instanceDescription:\n      instanceName: tf-test\n      instanceTypes:\n        - ecs.g2i.large\n      keyPairName: tf-keypair\n      password:\n      projectName: default\n      scalingConfigurationName: tf-test\n      scalingGroupId: scg-ycinx27x25gh9y31p0fy\n      securityEnhancementStrategy: InActive\n      securityGroupIds:\n        - sg-2fepz3c793g1s59gp67y21r34\n      spotStrategy: NoSpot\n      tags:\n        - key: tf-key1\n          value: tf-value1\n        - key: tf-key2\n          value: tf-value2\n      userData: IyEvYmluL2Jhc2gKZWNobyAidGVzdCI=\n      volumes:\n        - deleteWithInstance: false\n          size: 20\n          volumeType: ESSD_PL0\n        - deleteWithInstance: true\n          size: 20\n          volumeType: ESSD_PL0\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nScalingConfiguration can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:autoscaling/scalingConfiguration:ScalingConfiguration default scc-ybkuck3mx8cm9tm5yglz\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The create time of the scaling configuration.\n"
                },
                "eipBandwidth": {
                    "type": "integer",
                    "description": "The EIP bandwidth which the scaling configuration set. When the value of Eip.BillingType is PostPaidByBandwidth, the value is 1 to 500. When the value of Eip.BillingType is PostPaidByTraffic, the value is 1 to 200.\n"
                },
                "eipBillingType": {
                    "type": "string",
                    "description": "The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.\n"
                },
                "eipIsp": {
                    "type": "string",
                    "description": "The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "The ECS hostname which the scaling configuration set.\n"
                },
                "hpcClusterId": {
                    "type": "string",
                    "description": "The ID of the HPC cluster to which the instance belongs. Valid only when InstanceTypes.N specifies High Performance Computing GPU Type.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The ECS image id which the scaling configuration set.\n"
                },
                "instanceDescription": {
                    "type": "string",
                    "description": "The ECS instance description which the scaling configuration set.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "The ECS instance name which the scaling configuration set.\n"
                },
                "instanceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the ECS instance type which the scaling configuration set. The maximum number of instance types is 10.\n"
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The ECS key pair name which the scaling configuration set.\n"
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The lifecycle state of the scaling configuration.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The ECS password which the scaling configuration set.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project to which the instance created by the scaling configuration belongs.\n"
                },
                "scalingConfigurationId": {
                    "type": "string",
                    "description": "The id of the scaling configuration.\n"
                },
                "scalingConfigurationName": {
                    "type": "string",
                    "description": "The name of the scaling configuration.\n"
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group to which the scaling configuration belongs.\n"
                },
                "securityEnhancementStrategy": {
                    "type": "string",
                    "description": "The Ecs security enhancement strategy which the scaling configuration set. Valid values: Active, InActive.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the security group id of the networkInterface which the scaling configuration set. A maximum of 5 security groups can be bound at the same time, and the value ranges from 1 to 5.\n"
                },
                "spotStrategy": {
                    "type": "string",
                    "description": "The preemption policy of the instance. Valid Value: NoSpot (default), SpotAsPriceGo.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingConfigurationTag:ScalingConfigurationTag"
                    },
                    "description": "The label of the instance created by the scaling configuration. Up to 20 tags are supported.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The create time of the scaling configuration.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The ECS user data which the scaling configuration set.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingConfigurationVolume:ScalingConfigurationVolume"
                    },
                    "description": "The list of volume of the scaling configuration. The number of supported volumes ranges from 1 to 15.\n"
                }
            },
            "required": [
                "createdAt",
                "eipBandwidth",
                "eipBillingType",
                "eipIsp",
                "imageId",
                "instanceName",
                "instanceTypes",
                "lifecycleState",
                "scalingConfigurationId",
                "scalingConfigurationName",
                "scalingGroupId",
                "securityGroupIds",
                "updatedAt",
                "volumes"
            ],
            "inputProperties": {
                "eipBandwidth": {
                    "type": "integer",
                    "description": "The EIP bandwidth which the scaling configuration set. When the value of Eip.BillingType is PostPaidByBandwidth, the value is 1 to 500. When the value of Eip.BillingType is PostPaidByTraffic, the value is 1 to 200.\n"
                },
                "eipBillingType": {
                    "type": "string",
                    "description": "The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.\n"
                },
                "eipIsp": {
                    "type": "string",
                    "description": "The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "The ECS hostname which the scaling configuration set.\n"
                },
                "hpcClusterId": {
                    "type": "string",
                    "description": "The ID of the HPC cluster to which the instance belongs. Valid only when InstanceTypes.N specifies High Performance Computing GPU Type.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The ECS image id which the scaling configuration set.\n"
                },
                "instanceDescription": {
                    "type": "string",
                    "description": "The ECS instance description which the scaling configuration set.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "The ECS instance name which the scaling configuration set.\n"
                },
                "instanceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the ECS instance type which the scaling configuration set. The maximum number of instance types is 10.\n"
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The ECS key pair name which the scaling configuration set.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The ECS password which the scaling configuration set.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project to which the instance created by the scaling configuration belongs.\n"
                },
                "scalingConfigurationName": {
                    "type": "string",
                    "description": "The name of the scaling configuration.\n"
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group to which the scaling configuration belongs.\n",
                    "willReplaceOnChanges": true
                },
                "securityEnhancementStrategy": {
                    "type": "string",
                    "description": "The Ecs security enhancement strategy which the scaling configuration set. Valid values: Active, InActive.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the security group id of the networkInterface which the scaling configuration set. A maximum of 5 security groups can be bound at the same time, and the value ranges from 1 to 5.\n"
                },
                "spotStrategy": {
                    "type": "string",
                    "description": "The preemption policy of the instance. Valid Value: NoSpot (default), SpotAsPriceGo.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingConfigurationTag:ScalingConfigurationTag"
                    },
                    "description": "The label of the instance created by the scaling configuration. Up to 20 tags are supported.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The ECS user data which the scaling configuration set.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingConfigurationVolume:ScalingConfigurationVolume"
                    },
                    "description": "The list of volume of the scaling configuration. The number of supported volumes ranges from 1 to 15.\n"
                }
            },
            "requiredInputs": [
                "imageId",
                "instanceName",
                "instanceTypes",
                "scalingConfigurationName",
                "scalingGroupId",
                "securityGroupIds",
                "volumes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScalingConfiguration resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The create time of the scaling configuration.\n"
                    },
                    "eipBandwidth": {
                        "type": "integer",
                        "description": "The EIP bandwidth which the scaling configuration set. When the value of Eip.BillingType is PostPaidByBandwidth, the value is 1 to 500. When the value of Eip.BillingType is PostPaidByTraffic, the value is 1 to 200.\n"
                    },
                    "eipBillingType": {
                        "type": "string",
                        "description": "The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.\n"
                    },
                    "eipIsp": {
                        "type": "string",
                        "description": "The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.\n"
                    },
                    "hostName": {
                        "type": "string",
                        "description": "The ECS hostname which the scaling configuration set.\n"
                    },
                    "hpcClusterId": {
                        "type": "string",
                        "description": "The ID of the HPC cluster to which the instance belongs. Valid only when InstanceTypes.N specifies High Performance Computing GPU Type.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The ECS image id which the scaling configuration set.\n"
                    },
                    "instanceDescription": {
                        "type": "string",
                        "description": "The ECS instance description which the scaling configuration set.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The ECS instance name which the scaling configuration set.\n"
                    },
                    "instanceTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the ECS instance type which the scaling configuration set. The maximum number of instance types is 10.\n"
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "The ECS key pair name which the scaling configuration set.\n"
                    },
                    "lifecycleState": {
                        "type": "string",
                        "description": "The lifecycle state of the scaling configuration.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The ECS password which the scaling configuration set.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The project to which the instance created by the scaling configuration belongs.\n"
                    },
                    "scalingConfigurationId": {
                        "type": "string",
                        "description": "The id of the scaling configuration.\n"
                    },
                    "scalingConfigurationName": {
                        "type": "string",
                        "description": "The name of the scaling configuration.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group to which the scaling configuration belongs.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityEnhancementStrategy": {
                        "type": "string",
                        "description": "The Ecs security enhancement strategy which the scaling configuration set. Valid values: Active, InActive.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the security group id of the networkInterface which the scaling configuration set. A maximum of 5 security groups can be bound at the same time, and the value ranges from 1 to 5.\n"
                    },
                    "spotStrategy": {
                        "type": "string",
                        "description": "The preemption policy of the instance. Valid Value: NoSpot (default), SpotAsPriceGo.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:autoscaling/ScalingConfigurationTag:ScalingConfigurationTag"
                        },
                        "description": "The label of the instance created by the scaling configuration. Up to 20 tags are supported.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The create time of the scaling configuration.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "The ECS user data which the scaling configuration set.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:autoscaling/ScalingConfigurationVolume:ScalingConfigurationVolume"
                        },
                        "description": "The list of volume of the scaling configuration. The number of supported volumes ranges from 1 to 15.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:autoscaling/scalingConfigurationAttachment:ScalingConfigurationAttachment": {
            "description": "Provides a resource to manage scaling configuration attachment\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo1 = new volcengine.autoscaling.ScalingConfigurationAttachment(\"foo1\", {\n    scalingConfigurationId: \"scc-ybrurj4uw6gh9zecj327\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo1 = volcengine.autoscaling.ScalingConfigurationAttachment(\"foo1\", scaling_configuration_id=\"scc-ybrurj4uw6gh9zecj327\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo1 = new Volcengine.Autoscaling.ScalingConfigurationAttachment(\"foo1\", new Volcengine.Autoscaling.ScalingConfigurationAttachmentArgs\n        {\n            ScalingConfigurationId = \"scc-ybrurj4uw6gh9zecj327\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewScalingConfigurationAttachment(ctx, \"foo1\", \u0026autoscaling.ScalingConfigurationAttachmentArgs{\n\t\t\tScalingConfigurationId: pulumi.String(\"scc-ybrurj4uw6gh9zecj327\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo1 = new ScalingConfigurationAttachment(\"foo1\", ScalingConfigurationAttachmentArgs.builder()        \n            .scalingConfigurationId(\"scc-ybrurj4uw6gh9zecj327\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo1:\n    type: volcengine:autoscaling:ScalingConfigurationAttachment\n    properties:\n      scalingConfigurationId: scc-ybrurj4uw6gh9zecj327\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nScaling Configuration attachment can be imported using the scaling_configuration_id e.g. The launch template and scaling configuration cannot take effect at the same time.\n\n```sh\n $ pulumi import volcengine:autoscaling/scalingConfigurationAttachment:ScalingConfigurationAttachment default enable:scc-ybrurj4uw6gh9zecj327\n```\n\n ",
            "properties": {
                "scalingConfigurationId": {
                    "type": "string",
                    "description": "The id of the scaling configuration.\n"
                }
            },
            "required": [
                "scalingConfigurationId"
            ],
            "inputProperties": {
                "scalingConfigurationId": {
                    "type": "string",
                    "description": "The id of the scaling configuration.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scalingConfigurationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScalingConfigurationAttachment resources.\n",
                "properties": {
                    "scalingConfigurationId": {
                        "type": "string",
                        "description": "The id of the scaling configuration.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:autoscaling/scalingGroup:ScalingGroup": {
            "description": "Provides a resource to manage scaling group\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.autoscaling.ScalingGroup(\"foo\", {\n    defaultCooldown: 10,\n    desireInstanceNumber: 0,\n    instanceTerminatePolicy: \"OldestInstance\",\n    maxInstanceNumber: 1,\n    minInstanceNumber: 0,\n    multiAzPolicy: \"BALANCE\",\n    projectName: \"default\",\n    scalingGroupName: \"test-tf\",\n    subnetIds: [\"subnet-2fe79j7c8o5c059gp68ksxr93\"],\n    tags: [{\n        key: \"tf-key1\",\n        value: \"tf-value1\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.autoscaling.ScalingGroup(\"foo\",\n    default_cooldown=10,\n    desire_instance_number=0,\n    instance_terminate_policy=\"OldestInstance\",\n    max_instance_number=1,\n    min_instance_number=0,\n    multi_az_policy=\"BALANCE\",\n    project_name=\"default\",\n    scaling_group_name=\"test-tf\",\n    subnet_ids=[\"subnet-2fe79j7c8o5c059gp68ksxr93\"],\n    tags=[volcengine.autoscaling.ScalingGroupTagArgs(\n        key=\"tf-key1\",\n        value=\"tf-value1\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Autoscaling.ScalingGroup(\"foo\", new Volcengine.Autoscaling.ScalingGroupArgs\n        {\n            DefaultCooldown = 10,\n            DesireInstanceNumber = 0,\n            InstanceTerminatePolicy = \"OldestInstance\",\n            MaxInstanceNumber = 1,\n            MinInstanceNumber = 0,\n            MultiAzPolicy = \"BALANCE\",\n            ProjectName = \"default\",\n            ScalingGroupName = \"test-tf\",\n            SubnetIds = \n            {\n                \"subnet-2fe79j7c8o5c059gp68ksxr93\",\n            },\n            Tags = \n            {\n                new Volcengine.Autoscaling.Inputs.ScalingGroupTagArgs\n                {\n                    Key = \"tf-key1\",\n                    Value = \"tf-value1\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewScalingGroup(ctx, \"foo\", \u0026autoscaling.ScalingGroupArgs{\n\t\t\tDefaultCooldown:         pulumi.Int(10),\n\t\t\tDesireInstanceNumber:    pulumi.Int(0),\n\t\t\tInstanceTerminatePolicy: pulumi.String(\"OldestInstance\"),\n\t\t\tMaxInstanceNumber:       pulumi.Int(1),\n\t\t\tMinInstanceNumber:       pulumi.Int(0),\n\t\t\tMultiAzPolicy:           pulumi.String(\"BALANCE\"),\n\t\t\tProjectName:             pulumi.String(\"default\"),\n\t\t\tScalingGroupName:        pulumi.String(\"test-tf\"),\n\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"subnet-2fe79j7c8o5c059gp68ksxr93\"),\n\t\t\t},\n\t\t\tTags: autoscaling.ScalingGroupTagArray{\n\t\t\t\t\u0026autoscaling.ScalingGroupTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"tf-key1\"),\n\t\t\t\t\tValue: pulumi.String(\"tf-value1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ScalingGroup(\"foo\", ScalingGroupArgs.builder()        \n            .defaultCooldown(10)\n            .desireInstanceNumber(0)\n            .instanceTerminatePolicy(\"OldestInstance\")\n            .maxInstanceNumber(1)\n            .minInstanceNumber(0)\n            .multiAzPolicy(\"BALANCE\")\n            .projectName(\"default\")\n            .scalingGroupName(\"test-tf\")\n            .subnetIds(\"subnet-2fe79j7c8o5c059gp68ksxr93\")\n            .tags(ScalingGroupTagArgs.builder()\n                .key(\"tf-key1\")\n                .value(\"tf-value1\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:autoscaling:ScalingGroup\n    properties:\n      defaultCooldown: 10\n      desireInstanceNumber: 0\n      instanceTerminatePolicy: OldestInstance\n      maxInstanceNumber: 1\n      minInstanceNumber: 0\n      multiAzPolicy: BALANCE\n      projectName: default\n      scalingGroupName: test-tf\n      subnetIds:\n        - subnet-2fe79j7c8o5c059gp68ksxr93\n      tags:\n        - key: tf-key1\n          value: tf-value1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nScalingGroup can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:autoscaling/scalingGroup:ScalingGroup default scg-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "activeScalingConfigurationId": {
                    "type": "string",
                    "description": "The scaling configuration id which used by the scaling group.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of the scaling group.\n"
                },
                "dbInstanceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of db instance ids.\n"
                },
                "defaultCooldown": {
                    "type": "integer",
                    "description": "The default cooldown interval of the scaling group. Value range: 5 ~ 86400, unit: second. Default value: 300.\n"
                },
                "desireInstanceNumber": {
                    "type": "integer",
                    "description": "The desire instance number of the scaling group.\n"
                },
                "instanceTerminatePolicy": {
                    "type": "string",
                    "description": "The instance terminate policy of the scaling group. Valid values: OldestInstance, NewestInstance, OldestScalingConfigurationWithOldestInstance, OldestScalingConfigurationWithNewestInstance. Default value: OldestScalingConfigurationWithOldestInstance.\n"
                },
                "launchTemplateId": {
                    "type": "string",
                    "description": "The ID of the launch template bound to the scaling group. The launch template and scaling configuration cannot take effect at the same time.\n"
                },
                "launchTemplateVersion": {
                    "type": "string",
                    "description": "The version of the launch template bound to the scaling group. Valid values are the version number, Latest, or Default.\n"
                },
                "lifecycleState": {
                    "type": "string",
                    "description": "The lifecycle state of the scaling group.\n"
                },
                "maxInstanceNumber": {
                    "type": "integer",
                    "description": "The max instance number of the scaling group. Value range: 0 ~ 100.\n"
                },
                "minInstanceNumber": {
                    "type": "integer",
                    "description": "The min instance number of the scaling group. Value range: 0 ~ 100.\n"
                },
                "multiAzPolicy": {
                    "type": "string",
                    "description": "The multi az policy of the scaling group. Valid values: PRIORITY, BALANCE. Default value: PRIORITY.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the scaling group.\n"
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group.\n"
                },
                "scalingGroupName": {
                    "type": "string",
                    "description": "The name of the scaling group.\n"
                },
                "serverGroupAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingGroupServerGroupAttribute:ScalingGroupServerGroupAttribute"
                    },
                    "description": "The load balancer server group attributes of the scaling group.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the subnet id to which the ENI is connected.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingGroupTag:ScalingGroupTag"
                    },
                    "description": "Tags.\n"
                },
                "totalInstanceCount": {
                    "type": "integer",
                    "description": "The total instance count of the scaling group.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The create time of the scaling group.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC id of the scaling group.\n"
                }
            },
            "required": [
                "activeScalingConfigurationId",
                "createdAt",
                "dbInstanceIds",
                "defaultCooldown",
                "desireInstanceNumber",
                "instanceTerminatePolicy",
                "lifecycleState",
                "maxInstanceNumber",
                "minInstanceNumber",
                "multiAzPolicy",
                "scalingGroupId",
                "scalingGroupName",
                "subnetIds",
                "totalInstanceCount",
                "updatedAt",
                "vpcId"
            ],
            "inputProperties": {
                "defaultCooldown": {
                    "type": "integer",
                    "description": "The default cooldown interval of the scaling group. Value range: 5 ~ 86400, unit: second. Default value: 300.\n"
                },
                "desireInstanceNumber": {
                    "type": "integer",
                    "description": "The desire instance number of the scaling group.\n"
                },
                "instanceTerminatePolicy": {
                    "type": "string",
                    "description": "The instance terminate policy of the scaling group. Valid values: OldestInstance, NewestInstance, OldestScalingConfigurationWithOldestInstance, OldestScalingConfigurationWithNewestInstance. Default value: OldestScalingConfigurationWithOldestInstance.\n"
                },
                "launchTemplateId": {
                    "type": "string",
                    "description": "The ID of the launch template bound to the scaling group. The launch template and scaling configuration cannot take effect at the same time.\n"
                },
                "launchTemplateVersion": {
                    "type": "string",
                    "description": "The version of the launch template bound to the scaling group. Valid values are the version number, Latest, or Default.\n"
                },
                "maxInstanceNumber": {
                    "type": "integer",
                    "description": "The max instance number of the scaling group. Value range: 0 ~ 100.\n"
                },
                "minInstanceNumber": {
                    "type": "integer",
                    "description": "The min instance number of the scaling group. Value range: 0 ~ 100.\n"
                },
                "multiAzPolicy": {
                    "type": "string",
                    "description": "The multi az policy of the scaling group. Valid values: PRIORITY, BALANCE. Default value: PRIORITY.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the scaling group.\n"
                },
                "scalingGroupName": {
                    "type": "string",
                    "description": "The name of the scaling group.\n"
                },
                "serverGroupAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingGroupServerGroupAttribute:ScalingGroupServerGroupAttribute"
                    },
                    "description": "The load balancer server group attributes of the scaling group.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the subnet id to which the ENI is connected.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:autoscaling/ScalingGroupTag:ScalingGroupTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "requiredInputs": [
                "maxInstanceNumber",
                "minInstanceNumber",
                "scalingGroupName",
                "subnetIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScalingGroup resources.\n",
                "properties": {
                    "activeScalingConfigurationId": {
                        "type": "string",
                        "description": "The scaling configuration id which used by the scaling group.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The create time of the scaling group.\n"
                    },
                    "dbInstanceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of db instance ids.\n"
                    },
                    "defaultCooldown": {
                        "type": "integer",
                        "description": "The default cooldown interval of the scaling group. Value range: 5 ~ 86400, unit: second. Default value: 300.\n"
                    },
                    "desireInstanceNumber": {
                        "type": "integer",
                        "description": "The desire instance number of the scaling group.\n"
                    },
                    "instanceTerminatePolicy": {
                        "type": "string",
                        "description": "The instance terminate policy of the scaling group. Valid values: OldestInstance, NewestInstance, OldestScalingConfigurationWithOldestInstance, OldestScalingConfigurationWithNewestInstance. Default value: OldestScalingConfigurationWithOldestInstance.\n"
                    },
                    "launchTemplateId": {
                        "type": "string",
                        "description": "The ID of the launch template bound to the scaling group. The launch template and scaling configuration cannot take effect at the same time.\n"
                    },
                    "launchTemplateVersion": {
                        "type": "string",
                        "description": "The version of the launch template bound to the scaling group. Valid values are the version number, Latest, or Default.\n"
                    },
                    "lifecycleState": {
                        "type": "string",
                        "description": "The lifecycle state of the scaling group.\n"
                    },
                    "maxInstanceNumber": {
                        "type": "integer",
                        "description": "The max instance number of the scaling group. Value range: 0 ~ 100.\n"
                    },
                    "minInstanceNumber": {
                        "type": "integer",
                        "description": "The min instance number of the scaling group. Value range: 0 ~ 100.\n"
                    },
                    "multiAzPolicy": {
                        "type": "string",
                        "description": "The multi az policy of the scaling group. Valid values: PRIORITY, BALANCE. Default value: PRIORITY.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the scaling group.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group.\n"
                    },
                    "scalingGroupName": {
                        "type": "string",
                        "description": "The name of the scaling group.\n"
                    },
                    "serverGroupAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:autoscaling/ScalingGroupServerGroupAttribute:ScalingGroupServerGroupAttribute"
                        },
                        "description": "The load balancer server group attributes of the scaling group.\n"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the subnet id to which the ENI is connected.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:autoscaling/ScalingGroupTag:ScalingGroupTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalInstanceCount": {
                        "type": "integer",
                        "description": "The total instance count of the scaling group.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The create time of the scaling group.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC id of the scaling group.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:autoscaling/scalingGroupEnabler:ScalingGroupEnabler": {
            "description": "Provides a resource to manage scaling group enabler\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\n// 创建步骤：terraform init -\u003e terraform plan -\u003e terraform apply\n// 删除步骤: terraform state rm volcengine_scaling_configuration.foo1 -\u003e terraform destroy\n// 创建伸缩组\nconst foo = new volcengine.autoscaling.ScalingGroup(\"foo\", {\n    scalingGroupName: \"zzm-tf-test\",\n    subnetIds: [\"subnet-2fegl9waotzi859gp67relkhv\"],\n    multiAzPolicy: \"BALANCE\",\n    desireInstanceNumber: 0,\n    minInstanceNumber: 0,\n    maxInstanceNumber: 1,\n    instanceTerminatePolicy: \"OldestInstance\",\n    defaultCooldown: 10,\n});\n// 创建伸缩配置\nconst foo1 = new volcengine.autoscaling.ScalingConfiguration(\"foo1\", {\n    scalingConfigurationName: \"terraform-test\",\n    scalingGroupId: foo.scalingGroupId,\n    imageId: \"image-ybx2d38wdfl8j1pupx7b\",\n    instanceTypes: [\"ecs.g1.2xlarge\"],\n    instanceName: \"tf-test\",\n    instanceDescription: \"\",\n    hostName: \"\",\n    password: \"\",\n    keyPairName: \"zktest\",\n    securityEnhancementStrategy: \"InActive\",\n    volumes: [\n        {\n            volumeType: \"ESSD_PL0\",\n            size: 20,\n            deleteWithInstance: false,\n        },\n        {\n            volumeType: \"ESSD_PL0\",\n            size: 20,\n            deleteWithInstance: true,\n        },\n    ],\n    securityGroupIds: [\"sg-12b8llnkn1la817q7y1be4kop\"],\n    eipBandwidth: 0,\n    eipIsp: \"ChinaMobile\",\n    eipBillingType: \"PostPaidByBandwidth\",\n});\n// 绑定伸缩配置\nconst foo2 = new volcengine.autoscaling.ScalingConfigurationAttachment(\"foo2\", {scalingConfigurationId: foo1.scalingConfigurationId}, {\n    dependsOn: [foo1],\n});\n// 启用伸缩组\nconst foo3 = new volcengine.autoscaling.ScalingGroupEnabler(\"foo3\", {scalingGroupId: foo.scalingGroupId}, {\n    dependsOn: [foo2],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\n# 创建步骤：terraform init -\u003e terraform plan -\u003e terraform apply\n# 删除步骤: terraform state rm volcengine_scaling_configuration.foo1 -\u003e terraform destroy\n# 创建伸缩组\nfoo = volcengine.autoscaling.ScalingGroup(\"foo\",\n    scaling_group_name=\"zzm-tf-test\",\n    subnet_ids=[\"subnet-2fegl9waotzi859gp67relkhv\"],\n    multi_az_policy=\"BALANCE\",\n    desire_instance_number=0,\n    min_instance_number=0,\n    max_instance_number=1,\n    instance_terminate_policy=\"OldestInstance\",\n    default_cooldown=10)\n# 创建伸缩配置\nfoo1 = volcengine.autoscaling.ScalingConfiguration(\"foo1\",\n    scaling_configuration_name=\"terraform-test\",\n    scaling_group_id=foo.scaling_group_id,\n    image_id=\"image-ybx2d38wdfl8j1pupx7b\",\n    instance_types=[\"ecs.g1.2xlarge\"],\n    instance_name=\"tf-test\",\n    instance_description=\"\",\n    host_name=\"\",\n    password=\"\",\n    key_pair_name=\"zktest\",\n    security_enhancement_strategy=\"InActive\",\n    volumes=[\n        volcengine.autoscaling.ScalingConfigurationVolumeArgs(\n            volume_type=\"ESSD_PL0\",\n            size=20,\n            delete_with_instance=False,\n        ),\n        volcengine.autoscaling.ScalingConfigurationVolumeArgs(\n            volume_type=\"ESSD_PL0\",\n            size=20,\n            delete_with_instance=True,\n        ),\n    ],\n    security_group_ids=[\"sg-12b8llnkn1la817q7y1be4kop\"],\n    eip_bandwidth=0,\n    eip_isp=\"ChinaMobile\",\n    eip_billing_type=\"PostPaidByBandwidth\")\n# 绑定伸缩配置\nfoo2 = volcengine.autoscaling.ScalingConfigurationAttachment(\"foo2\", scaling_configuration_id=foo1.scaling_configuration_id,\nopts=pulumi.ResourceOptions(depends_on=[foo1]))\n# 启用伸缩组\nfoo3 = volcengine.autoscaling.ScalingGroupEnabler(\"foo3\", scaling_group_id=foo.scaling_group_id,\nopts=pulumi.ResourceOptions(depends_on=[foo2]))\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // 创建步骤：terraform init -\u003e terraform plan -\u003e terraform apply\n        // 删除步骤: terraform state rm volcengine_scaling_configuration.foo1 -\u003e terraform destroy\n        // 创建伸缩组\n        var foo = new Volcengine.Autoscaling.ScalingGroup(\"foo\", new Volcengine.Autoscaling.ScalingGroupArgs\n        {\n            ScalingGroupName = \"zzm-tf-test\",\n            SubnetIds = \n            {\n                \"subnet-2fegl9waotzi859gp67relkhv\",\n            },\n            MultiAzPolicy = \"BALANCE\",\n            DesireInstanceNumber = 0,\n            MinInstanceNumber = 0,\n            MaxInstanceNumber = 1,\n            InstanceTerminatePolicy = \"OldestInstance\",\n            DefaultCooldown = 10,\n        });\n        // 创建伸缩配置\n        var foo1 = new Volcengine.Autoscaling.ScalingConfiguration(\"foo1\", new Volcengine.Autoscaling.ScalingConfigurationArgs\n        {\n            ScalingConfigurationName = \"terraform-test\",\n            ScalingGroupId = foo.ScalingGroupId,\n            ImageId = \"image-ybx2d38wdfl8j1pupx7b\",\n            InstanceTypes = \n            {\n                \"ecs.g1.2xlarge\",\n            },\n            InstanceName = \"tf-test\",\n            InstanceDescription = \"\",\n            HostName = \"\",\n            Password = \"\",\n            KeyPairName = \"zktest\",\n            SecurityEnhancementStrategy = \"InActive\",\n            Volumes = \n            {\n                new Volcengine.Autoscaling.Inputs.ScalingConfigurationVolumeArgs\n                {\n                    VolumeType = \"ESSD_PL0\",\n                    Size = 20,\n                    DeleteWithInstance = false,\n                },\n                new Volcengine.Autoscaling.Inputs.ScalingConfigurationVolumeArgs\n                {\n                    VolumeType = \"ESSD_PL0\",\n                    Size = 20,\n                    DeleteWithInstance = true,\n                },\n            },\n            SecurityGroupIds = \n            {\n                \"sg-12b8llnkn1la817q7y1be4kop\",\n            },\n            EipBandwidth = 0,\n            EipIsp = \"ChinaMobile\",\n            EipBillingType = \"PostPaidByBandwidth\",\n        });\n        // 绑定伸缩配置\n        var foo2 = new Volcengine.Autoscaling.ScalingConfigurationAttachment(\"foo2\", new Volcengine.Autoscaling.ScalingConfigurationAttachmentArgs\n        {\n            ScalingConfigurationId = foo1.ScalingConfigurationId,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                foo1,\n            },\n        });\n        // 启用伸缩组\n        var foo3 = new Volcengine.Autoscaling.ScalingGroupEnabler(\"foo3\", new Volcengine.Autoscaling.ScalingGroupEnablerArgs\n        {\n            ScalingGroupId = foo.ScalingGroupId,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                foo2,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := autoscaling.NewScalingGroup(ctx, \"foo\", \u0026autoscaling.ScalingGroupArgs{\n\t\t\tScalingGroupName: pulumi.String(\"zzm-tf-test\"),\n\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"subnet-2fegl9waotzi859gp67relkhv\"),\n\t\t\t},\n\t\t\tMultiAzPolicy:           pulumi.String(\"BALANCE\"),\n\t\t\tDesireInstanceNumber:    pulumi.Int(0),\n\t\t\tMinInstanceNumber:       pulumi.Int(0),\n\t\t\tMaxInstanceNumber:       pulumi.Int(1),\n\t\t\tInstanceTerminatePolicy: pulumi.String(\"OldestInstance\"),\n\t\t\tDefaultCooldown:         pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoo1, err := autoscaling.NewScalingConfiguration(ctx, \"foo1\", \u0026autoscaling.ScalingConfigurationArgs{\n\t\t\tScalingConfigurationName: pulumi.String(\"terraform-test\"),\n\t\t\tScalingGroupId:           foo.ScalingGroupId,\n\t\t\tImageId:                  pulumi.String(\"image-ybx2d38wdfl8j1pupx7b\"),\n\t\t\tInstanceTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ecs.g1.2xlarge\"),\n\t\t\t},\n\t\t\tInstanceName:                pulumi.String(\"tf-test\"),\n\t\t\tInstanceDescription:         pulumi.String(\"\"),\n\t\t\tHostName:                    pulumi.String(\"\"),\n\t\t\tPassword:                    pulumi.String(\"\"),\n\t\t\tKeyPairName:                 pulumi.String(\"zktest\"),\n\t\t\tSecurityEnhancementStrategy: pulumi.String(\"InActive\"),\n\t\t\tVolumes: autoscaling.ScalingConfigurationVolumeArray{\n\t\t\t\t\u0026autoscaling.ScalingConfigurationVolumeArgs{\n\t\t\t\t\tVolumeType:         pulumi.String(\"ESSD_PL0\"),\n\t\t\t\t\tSize:               pulumi.Int(20),\n\t\t\t\t\tDeleteWithInstance: pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t\t\u0026autoscaling.ScalingConfigurationVolumeArgs{\n\t\t\t\t\tVolumeType:         pulumi.String(\"ESSD_PL0\"),\n\t\t\t\t\tSize:               pulumi.Int(20),\n\t\t\t\t\tDeleteWithInstance: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sg-12b8llnkn1la817q7y1be4kop\"),\n\t\t\t},\n\t\t\tEipBandwidth:   pulumi.Int(0),\n\t\t\tEipIsp:         pulumi.String(\"ChinaMobile\"),\n\t\t\tEipBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoo2, err := autoscaling.NewScalingConfigurationAttachment(ctx, \"foo2\", \u0026autoscaling.ScalingConfigurationAttachmentArgs{\n\t\t\tScalingConfigurationId: foo1.ScalingConfigurationId,\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tfoo1,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = autoscaling.NewScalingGroupEnabler(ctx, \"foo3\", \u0026autoscaling.ScalingGroupEnablerArgs{\n\t\t\tScalingGroupId: foo.ScalingGroupId,\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tfoo2,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport com.pulumi.resources.CustomResourceOptions;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ScalingGroup(\"foo\", ScalingGroupArgs.builder()        \n            .scalingGroupName(\"zzm-tf-test\")\n            .subnetIds(\"subnet-2fegl9waotzi859gp67relkhv\")\n            .multiAzPolicy(\"BALANCE\")\n            .desireInstanceNumber(0)\n            .minInstanceNumber(0)\n            .maxInstanceNumber(1)\n            .instanceTerminatePolicy(\"OldestInstance\")\n            .defaultCooldown(10)\n            .build());\n\n        var foo1 = new ScalingConfiguration(\"foo1\", ScalingConfigurationArgs.builder()        \n            .scalingConfigurationName(\"terraform-test\")\n            .scalingGroupId(foo.scalingGroupId())\n            .imageId(\"image-ybx2d38wdfl8j1pupx7b\")\n            .instanceTypes(\"ecs.g1.2xlarge\")\n            .instanceName(\"tf-test\")\n            .instanceDescription(\"\")\n            .hostName(\"\")\n            .password(\"\")\n            .keyPairName(\"zktest\")\n            .securityEnhancementStrategy(\"InActive\")\n            .volumes(            \n                ScalingConfigurationVolumeArgs.builder()\n                    .volumeType(\"ESSD_PL0\")\n                    .size(20)\n                    .deleteWithInstance(false)\n                    .build(),\n                ScalingConfigurationVolumeArgs.builder()\n                    .volumeType(\"ESSD_PL0\")\n                    .size(20)\n                    .deleteWithInstance(true)\n                    .build())\n            .securityGroupIds(\"sg-12b8llnkn1la817q7y1be4kop\")\n            .eipBandwidth(0)\n            .eipIsp(\"ChinaMobile\")\n            .eipBillingType(\"PostPaidByBandwidth\")\n            .build());\n\n        var foo2 = new ScalingConfigurationAttachment(\"foo2\", ScalingConfigurationAttachmentArgs.builder()        \n            .scalingConfigurationId(foo1.scalingConfigurationId())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(foo1)\n                .build());\n\n        var foo3 = new ScalingGroupEnabler(\"foo3\", ScalingGroupEnablerArgs.builder()        \n            .scalingGroupId(foo.scalingGroupId())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(foo2)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:autoscaling:ScalingGroup\n    properties:\n      scalingGroupName: zzm-tf-test\n      subnetIds:\n        - subnet-2fegl9waotzi859gp67relkhv\n      multiAzPolicy: BALANCE\n      desireInstanceNumber: 0\n      minInstanceNumber: 0\n      maxInstanceNumber: 1\n      instanceTerminatePolicy: OldestInstance\n      defaultCooldown: 10\n  foo1:\n    type: volcengine:autoscaling:ScalingConfiguration\n    properties:\n      scalingConfigurationName: terraform-test\n      scalingGroupId: ${foo.scalingGroupId}\n      imageId: image-ybx2d38wdfl8j1pupx7b\n      instanceTypes:\n        - ecs.g1.2xlarge\n      instanceName: tf-test\n      instanceDescription:\n      hostName:\n      password:\n      keyPairName: zktest\n      securityEnhancementStrategy: InActive\n      volumes:\n        - volumeType: ESSD_PL0\n          size: 20\n          deleteWithInstance: false\n        - volumeType: ESSD_PL0\n          size: 20\n          deleteWithInstance: true\n      securityGroupIds:\n        - sg-12b8llnkn1la817q7y1be4kop\n      eipBandwidth: 0\n      eipIsp: ChinaMobile\n      eipBillingType: PostPaidByBandwidth\n  foo2:\n    type: volcengine:autoscaling:ScalingConfigurationAttachment\n    properties:\n      scalingConfigurationId: ${foo1.scalingConfigurationId}\n    options:\n      dependson:\n        - ${foo1}\n  foo3:\n    type: volcengine:autoscaling:ScalingGroupEnabler\n    properties:\n      scalingGroupId: ${foo.scalingGroupId}\n    options:\n      dependson:\n        - ${foo2}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nScaling Group enabler can be imported using the scaling_group_id, e.g.\n\n```sh\n $ pulumi import volcengine:autoscaling/scalingGroupEnabler:ScalingGroupEnabler default enable:scg-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group.\n"
                }
            },
            "required": [
                "scalingGroupId"
            ],
            "inputProperties": {
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scalingGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScalingGroupEnabler resources.\n",
                "properties": {
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:autoscaling/scalingInstanceAttachment:ScalingInstanceAttachment": {
            "description": "Provides a resource to manage scaling instance attachment\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.autoscaling.ScalingInstanceAttachment(\"foo\", {\n    deleteType: \"Remove\",\n    detachOption: \"none\",\n    entrusted: true,\n    instanceId: \"i-yc23soxj50gsnz7rxnjp\",\n    scalingGroupId: \"scg-yc23rtcea88hcchybf8g\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.autoscaling.ScalingInstanceAttachment(\"foo\",\n    delete_type=\"Remove\",\n    detach_option=\"none\",\n    entrusted=True,\n    instance_id=\"i-yc23soxj50gsnz7rxnjp\",\n    scaling_group_id=\"scg-yc23rtcea88hcchybf8g\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Autoscaling.ScalingInstanceAttachment(\"foo\", new Volcengine.Autoscaling.ScalingInstanceAttachmentArgs\n        {\n            DeleteType = \"Remove\",\n            DetachOption = \"none\",\n            Entrusted = true,\n            InstanceId = \"i-yc23soxj50gsnz7rxnjp\",\n            ScalingGroupId = \"scg-yc23rtcea88hcchybf8g\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewScalingInstanceAttachment(ctx, \"foo\", \u0026autoscaling.ScalingInstanceAttachmentArgs{\n\t\t\tDeleteType:     pulumi.String(\"Remove\"),\n\t\t\tDetachOption:   pulumi.String(\"none\"),\n\t\t\tEntrusted:      pulumi.Bool(true),\n\t\t\tInstanceId:     pulumi.String(\"i-yc23soxj50gsnz7rxnjp\"),\n\t\t\tScalingGroupId: pulumi.String(\"scg-yc23rtcea88hcchybf8g\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ScalingInstanceAttachment(\"foo\", ScalingInstanceAttachmentArgs.builder()        \n            .deleteType(\"Remove\")\n            .detachOption(\"none\")\n            .entrusted(true)\n            .instanceId(\"i-yc23soxj50gsnz7rxnjp\")\n            .scalingGroupId(\"scg-yc23rtcea88hcchybf8g\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:autoscaling:ScalingInstanceAttachment\n    properties:\n      deleteType: Remove\n      detachOption: none\n      entrusted: true\n      instanceId: i-yc23soxj50gsnz7rxnjp\n      scalingGroupId: scg-yc23rtcea88hcchybf8g\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nScaling instance attachment can be imported using the scaling_group_id and instance_id, e.g. You can choose to remove or detach the instance according to the `delete_type` field.\n\n```sh\n $ pulumi import volcengine:autoscaling/scalingInstanceAttachment:ScalingInstanceAttachment default scg-mizl7m1kqccg5smt1bdpijuj:i-l8u2ai4j0fauo6mrpgk8\n```\n\n ",
            "properties": {
                "deleteType": {
                    "type": "string",
                    "description": "The type of delete activity. Valid values: Remove, Detach. Default value is Remove.\n"
                },
                "detachOption": {
                    "type": "string",
                    "description": "Whether to cancel the association of the instance with the load balancing and public network IP. Valid values: both, none. Default value is both.\n"
                },
                "entrusted": {
                    "type": "boolean",
                    "description": "Whether to host the instance to a scaling group. Default value is false.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the instance.\n"
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group.\n"
                }
            },
            "required": [
                "instanceId",
                "scalingGroupId"
            ],
            "inputProperties": {
                "deleteType": {
                    "type": "string",
                    "description": "The type of delete activity. Valid values: Remove, Detach. Default value is Remove.\n"
                },
                "detachOption": {
                    "type": "string",
                    "description": "Whether to cancel the association of the instance with the load balancing and public network IP. Valid values: both, none. Default value is both.\n"
                },
                "entrusted": {
                    "type": "boolean",
                    "description": "Whether to host the instance to a scaling group. Default value is false.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the instance.\n",
                    "willReplaceOnChanges": true
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "scalingGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScalingInstanceAttachment resources.\n",
                "properties": {
                    "deleteType": {
                        "type": "string",
                        "description": "The type of delete activity. Valid values: Remove, Detach. Default value is Remove.\n"
                    },
                    "detachOption": {
                        "type": "string",
                        "description": "Whether to cancel the association of the instance with the load balancing and public network IP. Valid values: both, none. Default value is both.\n"
                    },
                    "entrusted": {
                        "type": "boolean",
                        "description": "Whether to host the instance to a scaling group. Default value is false.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:autoscaling/scalingLifecycleHook:ScalingLifecycleHook": {
            "description": "Provides a resource to manage scaling lifecycle hook\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.autoscaling.ScalingLifecycleHook(\"foo\", {\n    lifecycleHookName: \"tf-test\",\n    lifecycleHookPolicy: \"CONTINUE\",\n    lifecycleHookTimeout: 30,\n    lifecycleHookType: \"SCALE_IN\",\n    scalingGroupId: \"scg-ybru8pazhgl8j1di4tyd\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.autoscaling.ScalingLifecycleHook(\"foo\",\n    lifecycle_hook_name=\"tf-test\",\n    lifecycle_hook_policy=\"CONTINUE\",\n    lifecycle_hook_timeout=30,\n    lifecycle_hook_type=\"SCALE_IN\",\n    scaling_group_id=\"scg-ybru8pazhgl8j1di4tyd\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Autoscaling.ScalingLifecycleHook(\"foo\", new Volcengine.Autoscaling.ScalingLifecycleHookArgs\n        {\n            LifecycleHookName = \"tf-test\",\n            LifecycleHookPolicy = \"CONTINUE\",\n            LifecycleHookTimeout = 30,\n            LifecycleHookType = \"SCALE_IN\",\n            ScalingGroupId = \"scg-ybru8pazhgl8j1di4tyd\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewScalingLifecycleHook(ctx, \"foo\", \u0026autoscaling.ScalingLifecycleHookArgs{\n\t\t\tLifecycleHookName:    pulumi.String(\"tf-test\"),\n\t\t\tLifecycleHookPolicy:  pulumi.String(\"CONTINUE\"),\n\t\t\tLifecycleHookTimeout: pulumi.Int(30),\n\t\t\tLifecycleHookType:    pulumi.String(\"SCALE_IN\"),\n\t\t\tScalingGroupId:       pulumi.String(\"scg-ybru8pazhgl8j1di4tyd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ScalingLifecycleHook(\"foo\", ScalingLifecycleHookArgs.builder()        \n            .lifecycleHookName(\"tf-test\")\n            .lifecycleHookPolicy(\"CONTINUE\")\n            .lifecycleHookTimeout(30)\n            .lifecycleHookType(\"SCALE_IN\")\n            .scalingGroupId(\"scg-ybru8pazhgl8j1di4tyd\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:autoscaling:ScalingLifecycleHook\n    properties:\n      lifecycleHookName: tf-test\n      lifecycleHookPolicy: CONTINUE\n      lifecycleHookTimeout: 30\n      lifecycleHookType: SCALE_IN\n      scalingGroupId: scg-ybru8pazhgl8j1di4tyd\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nScalingLifecycleHook can be imported using the ScalingGroupId:LifecycleHookId, e.g.\n\n```sh\n $ pulumi import volcengine:autoscaling/scalingLifecycleHook:ScalingLifecycleHook default scg-yblfbfhy7agh9zn72iaz:sgh-ybqholahe4gso0ee88sd\n```\n\n ",
            "properties": {
                "lifecycleHookId": {
                    "type": "string",
                    "description": "The id of the lifecycle hook.\n"
                },
                "lifecycleHookName": {
                    "type": "string",
                    "description": "The name of the lifecycle hook.\n"
                },
                "lifecycleHookPolicy": {
                    "type": "string",
                    "description": "The policy of the lifecycle hook. Valid values: CONTINUE, REJECT.\n"
                },
                "lifecycleHookTimeout": {
                    "type": "integer",
                    "description": "The timeout of the lifecycle hook.\n"
                },
                "lifecycleHookType": {
                    "type": "string",
                    "description": "The type of the lifecycle hook. Valid values: SCALE_IN, SCALE_OUT.\n"
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group.\n"
                }
            },
            "required": [
                "lifecycleHookId",
                "lifecycleHookName",
                "lifecycleHookPolicy",
                "lifecycleHookTimeout",
                "lifecycleHookType",
                "scalingGroupId"
            ],
            "inputProperties": {
                "lifecycleHookName": {
                    "type": "string",
                    "description": "The name of the lifecycle hook.\n",
                    "willReplaceOnChanges": true
                },
                "lifecycleHookPolicy": {
                    "type": "string",
                    "description": "The policy of the lifecycle hook. Valid values: CONTINUE, REJECT.\n"
                },
                "lifecycleHookTimeout": {
                    "type": "integer",
                    "description": "The timeout of the lifecycle hook.\n"
                },
                "lifecycleHookType": {
                    "type": "string",
                    "description": "The type of the lifecycle hook. Valid values: SCALE_IN, SCALE_OUT.\n"
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "lifecycleHookName",
                "lifecycleHookPolicy",
                "lifecycleHookTimeout",
                "lifecycleHookType",
                "scalingGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScalingLifecycleHook resources.\n",
                "properties": {
                    "lifecycleHookId": {
                        "type": "string",
                        "description": "The id of the lifecycle hook.\n"
                    },
                    "lifecycleHookName": {
                        "type": "string",
                        "description": "The name of the lifecycle hook.\n",
                        "willReplaceOnChanges": true
                    },
                    "lifecycleHookPolicy": {
                        "type": "string",
                        "description": "The policy of the lifecycle hook. Valid values: CONTINUE, REJECT.\n"
                    },
                    "lifecycleHookTimeout": {
                        "type": "integer",
                        "description": "The timeout of the lifecycle hook.\n"
                    },
                    "lifecycleHookType": {
                        "type": "string",
                        "description": "The type of the lifecycle hook. Valid values: SCALE_IN, SCALE_OUT.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:autoscaling/scalingPolicy:ScalingPolicy": {
            "description": "Provides a resource to manage scaling policy\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.autoscaling.ScalingPolicy(\"foo\", {\n    active: false,\n    adjustmentType: \"QuantityChangeInCapacity\",\n    adjustmentValue: 100,\n    alarmPolicyConditionComparisonOperator: \"=\",\n    alarmPolicyConditionMetricName: \"Instance_CpuBusy_Avg\",\n    alarmPolicyConditionMetricUnit: \"Percent\",\n    alarmPolicyConditionThreshold: \"100\",\n    alarmPolicyEvaluationCount: 1,\n    alarmPolicyRuleType: \"Static\",\n    cooldown: 10,\n    scalingGroupId: \"scg-ybqm0b6kcigh9zu9ce6t\",\n    scalingPolicyName: \"tf-test\",\n    scalingPolicyType: \"Alarm\",\n    scheduledPolicyLaunchTime: \"2022-07-09T09:59Z\",\n    scheduledPolicyRecurrenceEndTime: \"2022-07-24T09:25Z\",\n    scheduledPolicyRecurrenceType: \"Daily\",\n    scheduledPolicyRecurrenceValue: \"10\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.autoscaling.ScalingPolicy(\"foo\",\n    active=False,\n    adjustment_type=\"QuantityChangeInCapacity\",\n    adjustment_value=100,\n    alarm_policy_condition_comparison_operator=\"=\",\n    alarm_policy_condition_metric_name=\"Instance_CpuBusy_Avg\",\n    alarm_policy_condition_metric_unit=\"Percent\",\n    alarm_policy_condition_threshold=\"100\",\n    alarm_policy_evaluation_count=1,\n    alarm_policy_rule_type=\"Static\",\n    cooldown=10,\n    scaling_group_id=\"scg-ybqm0b6kcigh9zu9ce6t\",\n    scaling_policy_name=\"tf-test\",\n    scaling_policy_type=\"Alarm\",\n    scheduled_policy_launch_time=\"2022-07-09T09:59Z\",\n    scheduled_policy_recurrence_end_time=\"2022-07-24T09:25Z\",\n    scheduled_policy_recurrence_type=\"Daily\",\n    scheduled_policy_recurrence_value=\"10\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Autoscaling.ScalingPolicy(\"foo\", new Volcengine.Autoscaling.ScalingPolicyArgs\n        {\n            Active = false,\n            AdjustmentType = \"QuantityChangeInCapacity\",\n            AdjustmentValue = 100,\n            AlarmPolicyConditionComparisonOperator = \"=\",\n            AlarmPolicyConditionMetricName = \"Instance_CpuBusy_Avg\",\n            AlarmPolicyConditionMetricUnit = \"Percent\",\n            AlarmPolicyConditionThreshold = \"100\",\n            AlarmPolicyEvaluationCount = 1,\n            AlarmPolicyRuleType = \"Static\",\n            Cooldown = 10,\n            ScalingGroupId = \"scg-ybqm0b6kcigh9zu9ce6t\",\n            ScalingPolicyName = \"tf-test\",\n            ScalingPolicyType = \"Alarm\",\n            ScheduledPolicyLaunchTime = \"2022-07-09T09:59Z\",\n            ScheduledPolicyRecurrenceEndTime = \"2022-07-24T09:25Z\",\n            ScheduledPolicyRecurrenceType = \"Daily\",\n            ScheduledPolicyRecurrenceValue = \"10\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewScalingPolicy(ctx, \"foo\", \u0026autoscaling.ScalingPolicyArgs{\n\t\t\tActive:                                 pulumi.Bool(false),\n\t\t\tAdjustmentType:                         pulumi.String(\"QuantityChangeInCapacity\"),\n\t\t\tAdjustmentValue:                        pulumi.Int(100),\n\t\t\tAlarmPolicyConditionComparisonOperator: pulumi.String(\"=\"),\n\t\t\tAlarmPolicyConditionMetricName:         pulumi.String(\"Instance_CpuBusy_Avg\"),\n\t\t\tAlarmPolicyConditionMetricUnit:         pulumi.String(\"Percent\"),\n\t\t\tAlarmPolicyConditionThreshold:          pulumi.String(\"100\"),\n\t\t\tAlarmPolicyEvaluationCount:             pulumi.Int(1),\n\t\t\tAlarmPolicyRuleType:                    pulumi.String(\"Static\"),\n\t\t\tCooldown:                               pulumi.Int(10),\n\t\t\tScalingGroupId:                         pulumi.String(\"scg-ybqm0b6kcigh9zu9ce6t\"),\n\t\t\tScalingPolicyName:                      pulumi.String(\"tf-test\"),\n\t\t\tScalingPolicyType:                      pulumi.String(\"Alarm\"),\n\t\t\tScheduledPolicyLaunchTime:              pulumi.String(\"2022-07-09T09:59Z\"),\n\t\t\tScheduledPolicyRecurrenceEndTime:       pulumi.String(\"2022-07-24T09:25Z\"),\n\t\t\tScheduledPolicyRecurrenceType:          pulumi.String(\"Daily\"),\n\t\t\tScheduledPolicyRecurrenceValue:         pulumi.String(\"10\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ScalingPolicy(\"foo\", ScalingPolicyArgs.builder()        \n            .active(false)\n            .adjustmentType(\"QuantityChangeInCapacity\")\n            .adjustmentValue(100)\n            .alarmPolicyConditionComparisonOperator(\"=\")\n            .alarmPolicyConditionMetricName(\"Instance_CpuBusy_Avg\")\n            .alarmPolicyConditionMetricUnit(\"Percent\")\n            .alarmPolicyConditionThreshold(100)\n            .alarmPolicyEvaluationCount(1)\n            .alarmPolicyRuleType(\"Static\")\n            .cooldown(10)\n            .scalingGroupId(\"scg-ybqm0b6kcigh9zu9ce6t\")\n            .scalingPolicyName(\"tf-test\")\n            .scalingPolicyType(\"Alarm\")\n            .scheduledPolicyLaunchTime(\"2022-07-09T09:59Z\")\n            .scheduledPolicyRecurrenceEndTime(\"2022-07-24T09:25Z\")\n            .scheduledPolicyRecurrenceType(\"Daily\")\n            .scheduledPolicyRecurrenceValue(10)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:autoscaling:ScalingPolicy\n    properties:\n      active: false\n      adjustmentType: QuantityChangeInCapacity\n      adjustmentValue: 100\n      alarmPolicyConditionComparisonOperator: =\n      alarmPolicyConditionMetricName: Instance_CpuBusy_Avg\n      alarmPolicyConditionMetricUnit: Percent\n      alarmPolicyConditionThreshold: 100\n      alarmPolicyEvaluationCount: 1\n      alarmPolicyRuleType: Static\n      cooldown: 10\n      scalingGroupId: scg-ybqm0b6kcigh9zu9ce6t\n      scalingPolicyName: tf-test\n      scalingPolicyType: Alarm\n      scheduledPolicyLaunchTime: 2022-07-09T09:59Z\n      scheduledPolicyRecurrenceEndTime: 2022-07-24T09:25Z\n      scheduledPolicyRecurrenceType: Daily\n      scheduledPolicyRecurrenceValue: 10\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nScalingPolicy can be imported using the ScalingGroupId:ScalingPolicyId, e.g.\n\n```sh\n $ pulumi import volcengine:autoscaling/scalingPolicy:ScalingPolicy default scg-yblfbfhy7agh9zn72iaz:sp-yblf9l4fvcl8j1prohsp\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.\n"
                },
                "adjustmentType": {
                    "type": "string",
                    "description": "The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.\n"
                },
                "adjustmentValue": {
                    "type": "integer",
                    "description": "The adjustment value of the scaling policy. When the value of the `AdjustmentType` parameter is `QuantityChangeInCapacity`: -100 ~ 100, 0 is not allowed, unit: piece. When the value of the `AdjustmentType` parameter is `PercentChangeInCapacity`: -100 ~ 10000, 0 is not allowed, unit: %. When the value of the `AdjustmentType` parameter is `TotalCapacity`: the default is 0 to 100, unit: piece.\n"
                },
                "alarmPolicyConditionComparisonOperator": {
                    "type": "string",
                    "description": "The comparison operator of the alarm policy condition of the scaling policy. Valid values: `\u003e`, `\u003c`, `=`. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                },
                "alarmPolicyConditionMetricName": {
                    "type": "string",
                    "description": "The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.\n"
                },
                "alarmPolicyConditionMetricUnit": {
                    "type": "string",
                    "description": "The comparison operator of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                },
                "alarmPolicyConditionThreshold": {
                    "type": "string",
                    "description": "The threshold of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                },
                "alarmPolicyEvaluationCount": {
                    "type": "integer",
                    "description": "The evaluation count of the alarm policy of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                },
                "alarmPolicyRuleType": {
                    "type": "string",
                    "description": "The rule type of the alarm policy of the scaling policy. Valid value: Static. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                },
                "cooldown": {
                    "type": "integer",
                    "description": "The cooldown of the scaling policy. Default value is the cooldown time of the scaling group. Value: 0~86400, unit: second, if left blank, the cooling time of the scaling group will be used by default.\n"
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group to which the scaling policy belongs.\n"
                },
                "scalingPolicyName": {
                    "type": "string",
                    "description": "The name of the scaling policy.\n"
                },
                "scalingPolicyType": {
                    "type": "string",
                    "description": "The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.\n"
                },
                "scheduledPolicyLaunchTime": {
                    "type": "string",
                    "description": "The launch time of the scheduled policy of the scaling policy.\nWhen the value of `ScalingPolicyType` is `Scheduled`, it means that the trigger time of the scheduled task must be greater than the current time.\nWhen the value of `ScalingPolicyType` is `Recurrence`: If `ScheduledPolicy.RecurrenceType` is not specified, it means to execute only once according to the date and time specified here.\nIf `ScheduledPolicy.RecurrenceType` is specified, it indicates the start time of the periodic task. Only the time within 90 days from the date of creation/modification is supported.\nWhen the value of `ScalingPolicyType` is `Alarm`, this parameter is invalid.\n"
                },
                "scheduledPolicyRecurrenceEndTime": {
                    "type": "string",
                    "description": "The recurrence end time of the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. If not configured, it will default to the day/week/month after this moment according to the recurrence period (ScheduledPolicy.RecurrenceType).\n"
                },
                "scheduledPolicyRecurrenceType": {
                    "type": "string",
                    "description": "The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.\n"
                },
                "scheduledPolicyRecurrenceValue": {
                    "type": "string",
                    "description": "The recurrence value the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. When the value of the ScheduledPolicy.RecurrenceType parameter is Daily, only one value can be filled in, ranging from 1 to 31.\nWhen the value of the ScheduledPolicy.RecurrenceType parameter is Weekly, you can enter multiple values separated by commas (,). The values from Monday to Sunday are: 1,2,3,4,5,6,7.\nWhen the value of the ScheduledPolicy.RecurrenceType parameter is Monthly, the format is A-B. The value ranges of A and B are both 1~31, and B must be greater than or equal to A.\nWhen the value of the ScheduledPolicy.RecurrenceType parameter is Cron, it means UTC+8 time, supports 5-field expressions of minutes, hours, days, months, and weeks, and supports wildcard English commas (,), English question marks (?), and conjunctions ( -), asterisk (*), pound sign (#), slash (/), L, and W.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the scaling policy. Valid values: Active, InActive.\n"
                }
            },
            "required": [
                "active",
                "adjustmentType",
                "adjustmentValue",
                "cooldown",
                "scalingGroupId",
                "scalingPolicyName",
                "scalingPolicyType",
                "scheduledPolicyLaunchTime",
                "status"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.\n"
                },
                "adjustmentType": {
                    "type": "string",
                    "description": "The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.\n"
                },
                "adjustmentValue": {
                    "type": "integer",
                    "description": "The adjustment value of the scaling policy. When the value of the `AdjustmentType` parameter is `QuantityChangeInCapacity`: -100 ~ 100, 0 is not allowed, unit: piece. When the value of the `AdjustmentType` parameter is `PercentChangeInCapacity`: -100 ~ 10000, 0 is not allowed, unit: %. When the value of the `AdjustmentType` parameter is `TotalCapacity`: the default is 0 to 100, unit: piece.\n"
                },
                "alarmPolicyConditionComparisonOperator": {
                    "type": "string",
                    "description": "The comparison operator of the alarm policy condition of the scaling policy. Valid values: `\u003e`, `\u003c`, `=`. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                },
                "alarmPolicyConditionMetricName": {
                    "type": "string",
                    "description": "The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.\n"
                },
                "alarmPolicyConditionMetricUnit": {
                    "type": "string",
                    "description": "The comparison operator of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                },
                "alarmPolicyConditionThreshold": {
                    "type": "string",
                    "description": "The threshold of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                },
                "alarmPolicyEvaluationCount": {
                    "type": "integer",
                    "description": "The evaluation count of the alarm policy of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                },
                "alarmPolicyRuleType": {
                    "type": "string",
                    "description": "The rule type of the alarm policy of the scaling policy. Valid value: Static. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                },
                "cooldown": {
                    "type": "integer",
                    "description": "The cooldown of the scaling policy. Default value is the cooldown time of the scaling group. Value: 0~86400, unit: second, if left blank, the cooling time of the scaling group will be used by default.\n"
                },
                "scalingGroupId": {
                    "type": "string",
                    "description": "The id of the scaling group to which the scaling policy belongs.\n",
                    "willReplaceOnChanges": true
                },
                "scalingPolicyName": {
                    "type": "string",
                    "description": "The name of the scaling policy.\n"
                },
                "scalingPolicyType": {
                    "type": "string",
                    "description": "The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.\n",
                    "willReplaceOnChanges": true
                },
                "scheduledPolicyLaunchTime": {
                    "type": "string",
                    "description": "The launch time of the scheduled policy of the scaling policy.\nWhen the value of `ScalingPolicyType` is `Scheduled`, it means that the trigger time of the scheduled task must be greater than the current time.\nWhen the value of `ScalingPolicyType` is `Recurrence`: If `ScheduledPolicy.RecurrenceType` is not specified, it means to execute only once according to the date and time specified here.\nIf `ScheduledPolicy.RecurrenceType` is specified, it indicates the start time of the periodic task. Only the time within 90 days from the date of creation/modification is supported.\nWhen the value of `ScalingPolicyType` is `Alarm`, this parameter is invalid.\n"
                },
                "scheduledPolicyRecurrenceEndTime": {
                    "type": "string",
                    "description": "The recurrence end time of the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. If not configured, it will default to the day/week/month after this moment according to the recurrence period (ScheduledPolicy.RecurrenceType).\n"
                },
                "scheduledPolicyRecurrenceType": {
                    "type": "string",
                    "description": "The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.\n"
                },
                "scheduledPolicyRecurrenceValue": {
                    "type": "string",
                    "description": "The recurrence value the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. When the value of the ScheduledPolicy.RecurrenceType parameter is Daily, only one value can be filled in, ranging from 1 to 31.\nWhen the value of the ScheduledPolicy.RecurrenceType parameter is Weekly, you can enter multiple values separated by commas (,). The values from Monday to Sunday are: 1,2,3,4,5,6,7.\nWhen the value of the ScheduledPolicy.RecurrenceType parameter is Monthly, the format is A-B. The value ranges of A and B are both 1~31, and B must be greater than or equal to A.\nWhen the value of the ScheduledPolicy.RecurrenceType parameter is Cron, it means UTC+8 time, supports 5-field expressions of minutes, hours, days, months, and weeks, and supports wildcard English commas (,), English question marks (?), and conjunctions ( -), asterisk (*), pound sign (#), slash (/), L, and W.\n"
                }
            },
            "requiredInputs": [
                "adjustmentType",
                "adjustmentValue",
                "scalingGroupId",
                "scalingPolicyName",
                "scalingPolicyType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScalingPolicy resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.\n"
                    },
                    "adjustmentType": {
                        "type": "string",
                        "description": "The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.\n"
                    },
                    "adjustmentValue": {
                        "type": "integer",
                        "description": "The adjustment value of the scaling policy. When the value of the `AdjustmentType` parameter is `QuantityChangeInCapacity`: -100 ~ 100, 0 is not allowed, unit: piece. When the value of the `AdjustmentType` parameter is `PercentChangeInCapacity`: -100 ~ 10000, 0 is not allowed, unit: %. When the value of the `AdjustmentType` parameter is `TotalCapacity`: the default is 0 to 100, unit: piece.\n"
                    },
                    "alarmPolicyConditionComparisonOperator": {
                        "type": "string",
                        "description": "The comparison operator of the alarm policy condition of the scaling policy. Valid values: `\u003e`, `\u003c`, `=`. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                    },
                    "alarmPolicyConditionMetricName": {
                        "type": "string",
                        "description": "The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.\n"
                    },
                    "alarmPolicyConditionMetricUnit": {
                        "type": "string",
                        "description": "The comparison operator of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                    },
                    "alarmPolicyConditionThreshold": {
                        "type": "string",
                        "description": "The threshold of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                    },
                    "alarmPolicyEvaluationCount": {
                        "type": "integer",
                        "description": "The evaluation count of the alarm policy of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                    },
                    "alarmPolicyRuleType": {
                        "type": "string",
                        "description": "The rule type of the alarm policy of the scaling policy. Valid value: Static. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.\n"
                    },
                    "cooldown": {
                        "type": "integer",
                        "description": "The cooldown of the scaling policy. Default value is the cooldown time of the scaling group. Value: 0~86400, unit: second, if left blank, the cooling time of the scaling group will be used by default.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group to which the scaling policy belongs.\n",
                        "willReplaceOnChanges": true
                    },
                    "scalingPolicyName": {
                        "type": "string",
                        "description": "The name of the scaling policy.\n"
                    },
                    "scalingPolicyType": {
                        "type": "string",
                        "description": "The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.\n",
                        "willReplaceOnChanges": true
                    },
                    "scheduledPolicyLaunchTime": {
                        "type": "string",
                        "description": "The launch time of the scheduled policy of the scaling policy.\nWhen the value of `ScalingPolicyType` is `Scheduled`, it means that the trigger time of the scheduled task must be greater than the current time.\nWhen the value of `ScalingPolicyType` is `Recurrence`: If `ScheduledPolicy.RecurrenceType` is not specified, it means to execute only once according to the date and time specified here.\nIf `ScheduledPolicy.RecurrenceType` is specified, it indicates the start time of the periodic task. Only the time within 90 days from the date of creation/modification is supported.\nWhen the value of `ScalingPolicyType` is `Alarm`, this parameter is invalid.\n"
                    },
                    "scheduledPolicyRecurrenceEndTime": {
                        "type": "string",
                        "description": "The recurrence end time of the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. If not configured, it will default to the day/week/month after this moment according to the recurrence period (ScheduledPolicy.RecurrenceType).\n"
                    },
                    "scheduledPolicyRecurrenceType": {
                        "type": "string",
                        "description": "The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.\n"
                    },
                    "scheduledPolicyRecurrenceValue": {
                        "type": "string",
                        "description": "The recurrence value the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. When the value of the ScheduledPolicy.RecurrenceType parameter is Daily, only one value can be filled in, ranging from 1 to 31.\nWhen the value of the ScheduledPolicy.RecurrenceType parameter is Weekly, you can enter multiple values separated by commas (,). The values from Monday to Sunday are: 1,2,3,4,5,6,7.\nWhen the value of the ScheduledPolicy.RecurrenceType parameter is Monthly, the format is A-B. The value ranges of A and B are both 1~31, and B must be greater than or equal to A.\nWhen the value of the ScheduledPolicy.RecurrenceType parameter is Cron, it means UTC+8 time, supports 5-field expressions of minutes, hours, days, months, and weeks, and supports wildcard English commas (,), English question marks (?), and conjunctions ( -), asterisk (*), pound sign (#), slash (/), L, and W.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the scaling policy. Valid values: Active, InActive.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:bioos/cluster:Cluster": {
            "description": "Provides a resource to manage bioos cluster\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.bioos.Cluster(\"foo\", {\n    description: \"test-description\", //选填\n    //  vke_config { //选填，和shared_config二者中必填一个\n    //    cluster_id = \"ccerdh8fqtofh16uf6q60\" //也可替换成volcengine_vke_cluster.example.id\n    //    storage_class = \"ebs-ssd\"\n    //  }\n    sharedConfigs: [{\n        enable: true,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.bioos.Cluster(\"foo\",\n    description=\"test-description\",\n    shared_configs=[volcengine.bioos.ClusterSharedConfigArgs(\n        enable=True,\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Bioos.Cluster(\"foo\", new Volcengine.Bioos.ClusterArgs\n        {\n            Description = \"test-description\",\n            SharedConfigs = \n            {\n                new Volcengine.Bioos.Inputs.ClusterSharedConfigArgs\n                {\n                    Enable = true,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/bioos\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/bioos\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bioos.NewCluster(ctx, \"foo\", \u0026bioos.ClusterArgs{\n\t\t\tDescription: pulumi.String(\"test-description\"),\n\t\t\tSharedConfigs: bioos.ClusterSharedConfigArray{\n\t\t\t\t\u0026bioos.ClusterSharedConfigArgs{\n\t\t\t\t\tEnable: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Cluster(\"foo\", ClusterArgs.builder()        \n            .description(\"test-description\")\n            .sharedConfigs(ClusterSharedConfigArgs.builder()\n                .enable(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:bioos:Cluster\n    properties:\n      description: test-description\n      sharedConfigs:\n        - enable: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCluster can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:bioos/cluster:Cluster default *****\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The id of the vke cluster.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "sharedConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:bioos/ClusterSharedConfig:ClusterSharedConfig"
                    },
                    "description": "The configuration of the shared cluster.\n"
                },
                "vkeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:bioos/ClusterVkeConfig:ClusterVkeConfig"
                    },
                    "description": "The configuration of the vke cluster.\n"
                }
            },
            "required": [
                "clusterId",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "sharedConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:bioos/ClusterSharedConfig:ClusterSharedConfig"
                    },
                    "description": "The configuration of the shared cluster.\n",
                    "willReplaceOnChanges": true
                },
                "vkeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:bioos/ClusterVkeConfig:ClusterVkeConfig"
                    },
                    "description": "The configuration of the vke cluster.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The id of the vke cluster.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "sharedConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:bioos/ClusterSharedConfig:ClusterSharedConfig"
                        },
                        "description": "The configuration of the shared cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "vkeConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:bioos/ClusterVkeConfig:ClusterVkeConfig"
                        },
                        "description": "The configuration of the vke cluster.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:bioos/clusterBind:ClusterBind": {
            "description": "Provides a resource to manage bioos cluster bind\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst example = new volcengine.bioos.ClusterBind(\"example\", {\n    clusterId: \"ucfhp1nteig48u8ufv8s0\", //必填\n    type: \"workflow\", //必填, workflow 或 notebook\n    workspaceId: \"wcfhp1vdeig48u8ufv8sg\", //必填\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nexample = volcengine.bioos.ClusterBind(\"example\",\n    cluster_id=\"ucfhp1nteig48u8ufv8s0\",\n    type=\"workflow\",\n    workspace_id=\"wcfhp1vdeig48u8ufv8sg\")\n#必填\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Volcengine.Bioos.ClusterBind(\"example\", new Volcengine.Bioos.ClusterBindArgs\n        {\n            ClusterId = \"ucfhp1nteig48u8ufv8s0\",\n            Type = \"workflow\",\n            WorkspaceId = \"wcfhp1vdeig48u8ufv8sg\",\n        });\n        //必填\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/bioos\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bioos.NewClusterBind(ctx, \"example\", \u0026bioos.ClusterBindArgs{\n\t\t\tClusterId:   pulumi.String(\"ucfhp1nteig48u8ufv8s0\"),\n\t\t\tType:        pulumi.String(\"workflow\"),\n\t\t\tWorkspaceId: pulumi.String(\"wcfhp1vdeig48u8ufv8sg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ClusterBind(\"example\", ClusterBindArgs.builder()        \n            .clusterId(\"ucfhp1nteig48u8ufv8s0\")\n            .type(\"workflow\")\n            .workspaceId(\"wcfhp1vdeig48u8ufv8sg\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: volcengine:bioos:ClusterBind\n    properties:\n      clusterId: ucfhp1nteig48u8ufv8s0\n      type: workflow\n      workspaceId: wcfhp1vdeig48u8ufv8sg\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCluster binder can be imported using the workspace id and cluster id, e.g.\n\n```sh\n $ pulumi import volcengine:bioos/clusterBind:ClusterBind default wc*****:uc***\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The id of the cluster.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the cluster bind.\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The id of the workspace.\n"
                }
            },
            "required": [
                "clusterId",
                "type",
                "workspaceId"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The id of the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the cluster bind.\n",
                    "willReplaceOnChanges": true
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The id of the workspace.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId",
                "type",
                "workspaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterBind resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The id of the cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the cluster bind.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "The id of the workspace.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:bioos/workspace:Workspace": {
            "description": "Provides a resource to manage bioos workspace\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.bioos.Workspace(\"foo\", {\n    coverPath: \"template-cover/pic5.png\", //选填\n    description: \"test-description23\", //必填\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.bioos.Workspace(\"foo\",\n    cover_path=\"template-cover/pic5.png\",\n    description=\"test-description23\")\n#必填\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Bioos.Workspace(\"foo\", new Volcengine.Bioos.WorkspaceArgs\n        {\n            CoverPath = \"template-cover/pic5.png\",\n            Description = \"test-description23\",\n        });\n        //必填\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/bioos\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bioos.NewWorkspace(ctx, \"foo\", \u0026bioos.WorkspaceArgs{\n\t\t\tCoverPath:   pulumi.String(\"template-cover/pic5.png\"),\n\t\t\tDescription: pulumi.String(\"test-description23\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Workspace(\"foo\", WorkspaceArgs.builder()        \n            .coverPath(\"template-cover/pic5.png\")\n            .description(\"test-description23\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:bioos:Workspace\n    properties:\n      coverPath: template-cover/pic5.png\n      description: test-description23\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nWorkspace can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:bioos/workspace:Workspace default *****\n```\n\n ",
            "properties": {
                "coverPath": {
                    "type": "string",
                    "description": "Cover path (relative path in tos bucket).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workspace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workspace.\n"
                },
                "updated": {
                    "type": "boolean",
                    "description": "Whether the update complete.\n"
                },
                "workspaceId": {
                    "type": "string",
                    "description": "The id of the workspace.\n"
                }
            },
            "required": [
                "description",
                "name",
                "updated",
                "workspaceId"
            ],
            "inputProperties": {
                "coverPath": {
                    "type": "string",
                    "description": "Cover path (relative path in tos bucket).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workspace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workspace.\n"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workspace resources.\n",
                "properties": {
                    "coverPath": {
                        "type": "string",
                        "description": "Cover path (relative path in tos bucket).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workspace.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workspace.\n"
                    },
                    "updated": {
                        "type": "boolean",
                        "description": "Whether the update complete.\n"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "The id of the workspace.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cen/attachInstance:AttachInstance": {
            "description": "Provides a resource to manage cen attach instance\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cen.AttachInstance(\"foo\", {\n    cenId: \"cen-12ar8uclj68sg17q7y20v9gil\",\n    instanceId: \"vpc-2fe5dpn0av2m859gp68rhk2dc\",\n    instanceRegionId: \"cn-beijing\",\n    instanceType: \"VPC\",\n});\nconst foo1 = new volcengine.cen.AttachInstance(\"foo1\", {\n    cenId: \"cen-12ar8uclj68sg17q7y20v9gil\",\n    instanceId: \"vpc-in66ktl5t24g8gbssz0sqva1\",\n    instanceRegionId: \"cn-beijing\",\n    instanceType: \"VPC\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.AttachInstance(\"foo\",\n    cen_id=\"cen-12ar8uclj68sg17q7y20v9gil\",\n    instance_id=\"vpc-2fe5dpn0av2m859gp68rhk2dc\",\n    instance_region_id=\"cn-beijing\",\n    instance_type=\"VPC\")\nfoo1 = volcengine.cen.AttachInstance(\"foo1\",\n    cen_id=\"cen-12ar8uclj68sg17q7y20v9gil\",\n    instance_id=\"vpc-in66ktl5t24g8gbssz0sqva1\",\n    instance_region_id=\"cn-beijing\",\n    instance_type=\"VPC\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cen.AttachInstance(\"foo\", new Volcengine.Cen.AttachInstanceArgs\n        {\n            CenId = \"cen-12ar8uclj68sg17q7y20v9gil\",\n            InstanceId = \"vpc-2fe5dpn0av2m859gp68rhk2dc\",\n            InstanceRegionId = \"cn-beijing\",\n            InstanceType = \"VPC\",\n        });\n        var foo1 = new Volcengine.Cen.AttachInstance(\"foo1\", new Volcengine.Cen.AttachInstanceArgs\n        {\n            CenId = \"cen-12ar8uclj68sg17q7y20v9gil\",\n            InstanceId = \"vpc-in66ktl5t24g8gbssz0sqva1\",\n            InstanceRegionId = \"cn-beijing\",\n            InstanceType = \"VPC\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.NewAttachInstance(ctx, \"foo\", \u0026cen.AttachInstanceArgs{\n\t\t\tCenId:            pulumi.String(\"cen-12ar8uclj68sg17q7y20v9gil\"),\n\t\t\tInstanceId:       pulumi.String(\"vpc-2fe5dpn0av2m859gp68rhk2dc\"),\n\t\t\tInstanceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\tInstanceType:     pulumi.String(\"VPC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cen.NewAttachInstance(ctx, \"foo1\", \u0026cen.AttachInstanceArgs{\n\t\t\tCenId:            pulumi.String(\"cen-12ar8uclj68sg17q7y20v9gil\"),\n\t\t\tInstanceId:       pulumi.String(\"vpc-in66ktl5t24g8gbssz0sqva1\"),\n\t\t\tInstanceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\tInstanceType:     pulumi.String(\"VPC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AttachInstance(\"foo\", AttachInstanceArgs.builder()        \n            .cenId(\"cen-12ar8uclj68sg17q7y20v9gil\")\n            .instanceId(\"vpc-2fe5dpn0av2m859gp68rhk2dc\")\n            .instanceRegionId(\"cn-beijing\")\n            .instanceType(\"VPC\")\n            .build());\n\n        var foo1 = new AttachInstance(\"foo1\", AttachInstanceArgs.builder()        \n            .cenId(\"cen-12ar8uclj68sg17q7y20v9gil\")\n            .instanceId(\"vpc-in66ktl5t24g8gbssz0sqva1\")\n            .instanceRegionId(\"cn-beijing\")\n            .instanceType(\"VPC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cen:AttachInstance\n    properties:\n      cenId: cen-12ar8uclj68sg17q7y20v9gil\n      instanceId: vpc-2fe5dpn0av2m859gp68rhk2dc\n      instanceRegionId: cn-beijing\n      instanceType: VPC\n  foo1:\n    type: volcengine:cen:AttachInstance\n    properties:\n      cenId: cen-12ar8uclj68sg17q7y20v9gil\n      instanceId: vpc-in66ktl5t24g8gbssz0sqva1\n      instanceRegionId: cn-beijing\n      instanceType: VPC\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCen attach instance can be imported using the CenId:InstanceId:InstanceType:RegionId, e.g.\n\n```sh\n $ pulumi import volcengine:cen/attachInstance:AttachInstance default cen-7qthudw0ll6jmc***:vpc-2fexiqjlgjif45oxruvso****:VPC:cn-beijing\n```\n\n ",
            "properties": {
                "cenId": {
                    "type": "string",
                    "description": "The ID of the cen.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the cen attaching instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance.\n"
                },
                "instanceOwnerId": {
                    "type": "string",
                    "description": "The owner ID of the instance.\n"
                },
                "instanceRegionId": {
                    "type": "string",
                    "description": "The region ID of the instance.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the instance. Valid values: `VPC`, `DCGW`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen attaching instance.\n"
                }
            },
            "required": [
                "cenId",
                "creationTime",
                "instanceId",
                "instanceOwnerId",
                "instanceRegionId",
                "instanceType",
                "status"
            ],
            "inputProperties": {
                "cenId": {
                    "type": "string",
                    "description": "The ID of the cen.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance.\n",
                    "willReplaceOnChanges": true
                },
                "instanceOwnerId": {
                    "type": "string",
                    "description": "The owner ID of the instance.\n",
                    "willReplaceOnChanges": true
                },
                "instanceRegionId": {
                    "type": "string",
                    "description": "The region ID of the instance.\n",
                    "willReplaceOnChanges": true
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the instance. Valid values: `VPC`, `DCGW`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cenId",
                "instanceId",
                "instanceRegionId",
                "instanceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttachInstance resources.\n",
                "properties": {
                    "cenId": {
                        "type": "string",
                        "description": "The ID of the cen.\n",
                        "willReplaceOnChanges": true
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of the cen attaching instance.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceOwnerId": {
                        "type": "string",
                        "description": "The owner ID of the instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceRegionId": {
                        "type": "string",
                        "description": "The region ID of the instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of the instance. Valid values: `VPC`, `DCGW`.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the cen attaching instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cen/bandwidthPackage:BandwidthPackage": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cen.BandwidthPackage(\"foo\", {\n    bandwidth: 32,\n    billingType: \"PrePaid\",\n    cenBandwidthPackageName: \"tf-test\",\n    description: \"tf-test1\",\n    localGeographicRegionSetId: \"China\",\n    peerGeographicRegionSetId: \"China\",\n    period: 1,\n    periodUnit: \"Year\",\n    projectName: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.BandwidthPackage(\"foo\",\n    bandwidth=32,\n    billing_type=\"PrePaid\",\n    cen_bandwidth_package_name=\"tf-test\",\n    description=\"tf-test1\",\n    local_geographic_region_set_id=\"China\",\n    peer_geographic_region_set_id=\"China\",\n    period=1,\n    period_unit=\"Year\",\n    project_name=\"default\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cen.BandwidthPackage(\"foo\", new Volcengine.Cen.BandwidthPackageArgs\n        {\n            Bandwidth = 32,\n            BillingType = \"PrePaid\",\n            CenBandwidthPackageName = \"tf-test\",\n            Description = \"tf-test1\",\n            LocalGeographicRegionSetId = \"China\",\n            PeerGeographicRegionSetId = \"China\",\n            Period = 1,\n            PeriodUnit = \"Year\",\n            ProjectName = \"default\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.NewBandwidthPackage(ctx, \"foo\", \u0026cen.BandwidthPackageArgs{\n\t\t\tBandwidth:                  pulumi.Int(32),\n\t\t\tBillingType:                pulumi.String(\"PrePaid\"),\n\t\t\tCenBandwidthPackageName:    pulumi.String(\"tf-test\"),\n\t\t\tDescription:                pulumi.String(\"tf-test1\"),\n\t\t\tLocalGeographicRegionSetId: pulumi.String(\"China\"),\n\t\t\tPeerGeographicRegionSetId:  pulumi.String(\"China\"),\n\t\t\tPeriod:                     pulumi.Int(1),\n\t\t\tPeriodUnit:                 pulumi.String(\"Year\"),\n\t\t\tProjectName:                pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new BandwidthPackage(\"foo\", BandwidthPackageArgs.builder()        \n            .bandwidth(32)\n            .billingType(\"PrePaid\")\n            .cenBandwidthPackageName(\"tf-test\")\n            .description(\"tf-test1\")\n            .localGeographicRegionSetId(\"China\")\n            .peerGeographicRegionSetId(\"China\")\n            .period(1)\n            .periodUnit(\"Year\")\n            .projectName(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cen:BandwidthPackage\n    properties:\n      bandwidth: 32\n      billingType: PrePaid\n      cenBandwidthPackageName: tf-test\n      description: tf-test1\n      localGeographicRegionSetId: China\n      peerGeographicRegionSetId: China\n      period: 1\n      periodUnit: Year\n      projectName: default\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCenBandwidthPackage can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:cen/bandwidthPackage:BandwidthPackage default cbp-4c2zaavbvh5f42****\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the cen bandwidth package.\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "The bandwidth of the cen bandwidth package. Value: 2~10000.\n"
                },
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the cen bandwidth package. Only support `PrePaid` and default value is `PrePaid`. Terraform will\nonly remove the PrePaid cen bandwidth package from the state file, not actually remove.\n"
                },
                "businessStatus": {
                    "type": "string",
                    "description": "The business status of the cen bandwidth package.\n"
                },
                "cenBandwidthPackageId": {
                    "type": "string",
                    "description": "The ID of the cen bandwidth package.\n"
                },
                "cenBandwidthPackageName": {
                    "type": "string",
                    "description": "The name of the cen bandwidth package.\n"
                },
                "cenIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The cen IDs of the bandwidth package.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the cen bandwidth package.\n"
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The deleted time of the cen bandwidth package.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cen bandwidth package.\n"
                },
                "expiredTime": {
                    "type": "string",
                    "description": "The expired time of the cen bandwidth package.\n"
                },
                "localGeographicRegionSetId": {
                    "type": "string",
                    "description": "The local geographic region set id of the cen bandwidth package. Valid value: `China`, `Asia`.\n"
                },
                "peerGeographicRegionSetId": {
                    "type": "string",
                    "description": "The peer geographic region set id of the cen bandwidth package. Valid value: `China`, `Asia`.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of the cen bandwidth package. Default value is 1.\n"
                },
                "periodUnit": {
                    "type": "string",
                    "description": "The period unit of the cen bandwidth package. Value: `Month`, `Year`. Default value is `Month`.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the cen bandwidth package.\n"
                },
                "remainingBandwidth": {
                    "type": "integer",
                    "description": "The remain bandwidth of the cen bandwidth package.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen bandwidth package.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cen/BandwidthPackageTag:BandwidthPackageTag"
                    },
                    "description": "Tags.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the cen bandwidth package.\n"
                }
            },
            "required": [
                "accountId",
                "bandwidth",
                "businessStatus",
                "cenBandwidthPackageId",
                "cenBandwidthPackageName",
                "cenIds",
                "creationTime",
                "deletedTime",
                "description",
                "expiredTime",
                "remainingBandwidth",
                "status",
                "updateTime"
            ],
            "inputProperties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The bandwidth of the cen bandwidth package. Value: 2~10000.\n"
                },
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the cen bandwidth package. Only support `PrePaid` and default value is `PrePaid`. Terraform will\nonly remove the PrePaid cen bandwidth package from the state file, not actually remove.\n",
                    "willReplaceOnChanges": true
                },
                "cenBandwidthPackageName": {
                    "type": "string",
                    "description": "The name of the cen bandwidth package.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cen bandwidth package.\n"
                },
                "localGeographicRegionSetId": {
                    "type": "string",
                    "description": "The local geographic region set id of the cen bandwidth package. Valid value: `China`, `Asia`.\n",
                    "willReplaceOnChanges": true
                },
                "peerGeographicRegionSetId": {
                    "type": "string",
                    "description": "The peer geographic region set id of the cen bandwidth package. Valid value: `China`, `Asia`.\n",
                    "willReplaceOnChanges": true
                },
                "period": {
                    "type": "integer",
                    "description": "The period of the cen bandwidth package. Default value is 1.\n"
                },
                "periodUnit": {
                    "type": "string",
                    "description": "The period unit of the cen bandwidth package. Value: `Month`, `Year`. Default value is `Month`.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the cen bandwidth package.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cen/BandwidthPackageTag:BandwidthPackageTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BandwidthPackage resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of the cen bandwidth package.\n"
                    },
                    "bandwidth": {
                        "type": "integer",
                        "description": "The bandwidth of the cen bandwidth package. Value: 2~10000.\n"
                    },
                    "billingType": {
                        "type": "string",
                        "description": "The billing type of the cen bandwidth package. Only support `PrePaid` and default value is `PrePaid`. Terraform will\nonly remove the PrePaid cen bandwidth package from the state file, not actually remove.\n",
                        "willReplaceOnChanges": true
                    },
                    "businessStatus": {
                        "type": "string",
                        "description": "The business status of the cen bandwidth package.\n"
                    },
                    "cenBandwidthPackageId": {
                        "type": "string",
                        "description": "The ID of the cen bandwidth package.\n"
                    },
                    "cenBandwidthPackageName": {
                        "type": "string",
                        "description": "The name of the cen bandwidth package.\n"
                    },
                    "cenIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The cen IDs of the bandwidth package.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of the cen bandwidth package.\n"
                    },
                    "deletedTime": {
                        "type": "string",
                        "description": "The deleted time of the cen bandwidth package.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the cen bandwidth package.\n"
                    },
                    "expiredTime": {
                        "type": "string",
                        "description": "The expired time of the cen bandwidth package.\n"
                    },
                    "localGeographicRegionSetId": {
                        "type": "string",
                        "description": "The local geographic region set id of the cen bandwidth package. Valid value: `China`, `Asia`.\n",
                        "willReplaceOnChanges": true
                    },
                    "peerGeographicRegionSetId": {
                        "type": "string",
                        "description": "The peer geographic region set id of the cen bandwidth package. Valid value: `China`, `Asia`.\n",
                        "willReplaceOnChanges": true
                    },
                    "period": {
                        "type": "integer",
                        "description": "The period of the cen bandwidth package. Default value is 1.\n"
                    },
                    "periodUnit": {
                        "type": "string",
                        "description": "The period unit of the cen bandwidth package. Value: `Month`, `Year`. Default value is `Month`.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the cen bandwidth package.\n"
                    },
                    "remainingBandwidth": {
                        "type": "integer",
                        "description": "The remain bandwidth of the cen bandwidth package.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the cen bandwidth package.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/BandwidthPackageTag:BandwidthPackageTag"
                        },
                        "description": "Tags.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of the cen bandwidth package.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cen/bandwidthPackageAssociate:BandwidthPackageAssociate": {
            "description": "Provides a resource to manage cen bandwidth package associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cen.BandwidthPackageAssociate(\"foo\", {\n    cenBandwidthPackageId: \"cbp-2bzeew3s8p79c2dx0eeohej4x\",\n    cenId: \"cen-2bzrl3srxsv0g2dx0efyoojn3\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.BandwidthPackageAssociate(\"foo\",\n    cen_bandwidth_package_id=\"cbp-2bzeew3s8p79c2dx0eeohej4x\",\n    cen_id=\"cen-2bzrl3srxsv0g2dx0efyoojn3\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cen.BandwidthPackageAssociate(\"foo\", new Volcengine.Cen.BandwidthPackageAssociateArgs\n        {\n            CenBandwidthPackageId = \"cbp-2bzeew3s8p79c2dx0eeohej4x\",\n            CenId = \"cen-2bzrl3srxsv0g2dx0efyoojn3\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.NewBandwidthPackageAssociate(ctx, \"foo\", \u0026cen.BandwidthPackageAssociateArgs{\n\t\t\tCenBandwidthPackageId: pulumi.String(\"cbp-2bzeew3s8p79c2dx0eeohej4x\"),\n\t\t\tCenId:                 pulumi.String(\"cen-2bzrl3srxsv0g2dx0efyoojn3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new BandwidthPackageAssociate(\"foo\", BandwidthPackageAssociateArgs.builder()        \n            .cenBandwidthPackageId(\"cbp-2bzeew3s8p79c2dx0eeohej4x\")\n            .cenId(\"cen-2bzrl3srxsv0g2dx0efyoojn3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cen:BandwidthPackageAssociate\n    properties:\n      cenBandwidthPackageId: cbp-2bzeew3s8p79c2dx0eeohej4x\n      cenId: cen-2bzrl3srxsv0g2dx0efyoojn3\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCen bandwidth package associate can be imported using the CenBandwidthPackageId:CenId, e.g.\n\n```sh\n $ pulumi import volcengine:cen/bandwidthPackageAssociate:BandwidthPackageAssociate default cbp-4c2zaavbvh5fx****:cen-7qthudw0ll6jmc****\n```\n\n ",
            "properties": {
                "cenBandwidthPackageId": {
                    "type": "string",
                    "description": "The ID of the cen bandwidth package.\n"
                },
                "cenId": {
                    "type": "string",
                    "description": "The ID of the cen.\n"
                }
            },
            "required": [
                "cenBandwidthPackageId",
                "cenId"
            ],
            "inputProperties": {
                "cenBandwidthPackageId": {
                    "type": "string",
                    "description": "The ID of the cen bandwidth package.\n",
                    "willReplaceOnChanges": true
                },
                "cenId": {
                    "type": "string",
                    "description": "The ID of the cen.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cenBandwidthPackageId",
                "cenId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BandwidthPackageAssociate resources.\n",
                "properties": {
                    "cenBandwidthPackageId": {
                        "type": "string",
                        "description": "The ID of the cen bandwidth package.\n",
                        "willReplaceOnChanges": true
                    },
                    "cenId": {
                        "type": "string",
                        "description": "The ID of the cen.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cen/cen:Cen": {
            "description": "Provides a resource to manage cen\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cen.Cen(\"foo\", {\n    cenName: \"tf-test-3\",\n    description: \"tf-test\",\n    projectName: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.Cen(\"foo\",\n    cen_name=\"tf-test-3\",\n    description=\"tf-test\",\n    project_name=\"default\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cen.Cen(\"foo\", new Volcengine.Cen.CenArgs\n        {\n            CenName = \"tf-test-3\",\n            Description = \"tf-test\",\n            ProjectName = \"default\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.NewCen(ctx, \"foo\", \u0026cen.CenArgs{\n\t\t\tCenName:     pulumi.String(\"tf-test-3\"),\n\t\t\tDescription: pulumi.String(\"tf-test\"),\n\t\t\tProjectName: pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Cen(\"foo\", CenArgs.builder()        \n            .cenName(\"tf-test-3\")\n            .description(\"tf-test\")\n            .projectName(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cen:Cen\n    properties:\n      cenName: tf-test-3\n      description: tf-test\n      projectName: default\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCen can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:cen/cen:Cen default cen-7qthudw0ll6jmc****\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the cen.\n"
                },
                "cenBandwidthPackageIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of bandwidth package IDs of the cen.\n"
                },
                "cenId": {
                    "type": "string",
                    "description": "The ID of the cen.\n"
                },
                "cenName": {
                    "type": "string",
                    "description": "The name of the cen.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the cen.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cen.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the cen instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cen/CenTag:CenTag"
                    },
                    "description": "Tags.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the cen.\n"
                }
            },
            "required": [
                "accountId",
                "cenBandwidthPackageIds",
                "cenId",
                "cenName",
                "creationTime",
                "description",
                "status",
                "updateTime"
            ],
            "inputProperties": {
                "cenName": {
                    "type": "string",
                    "description": "The name of the cen.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cen.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the cen instance.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cen/CenTag:CenTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cen resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of the cen.\n"
                    },
                    "cenBandwidthPackageIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of bandwidth package IDs of the cen.\n"
                    },
                    "cenId": {
                        "type": "string",
                        "description": "The ID of the cen.\n"
                    },
                    "cenName": {
                        "type": "string",
                        "description": "The name of the cen.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of the cen.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the cen.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the cen instance.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the cen.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/CenTag:CenTag"
                        },
                        "description": "Tags.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of the cen.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cen/grantInstance:GrantInstance": {
            "description": "Provides a resource to manage cen grant instance\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cen.GrantInstance(\"foo\", {\n    cenId: \"cen-2d6zdn0c1z5s058ozfcyf4lee\",\n    cenOwnerId: \"210000****\",\n    instanceId: \"vpc-2bysvq1xx543k2dx0eeulpeiv\",\n    instanceRegionId: \"cn-guilin-boe\",\n    instanceType: \"VPC\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.GrantInstance(\"foo\",\n    cen_id=\"cen-2d6zdn0c1z5s058ozfcyf4lee\",\n    cen_owner_id=\"210000****\",\n    instance_id=\"vpc-2bysvq1xx543k2dx0eeulpeiv\",\n    instance_region_id=\"cn-guilin-boe\",\n    instance_type=\"VPC\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cen.GrantInstance(\"foo\", new Volcengine.Cen.GrantInstanceArgs\n        {\n            CenId = \"cen-2d6zdn0c1z5s058ozfcyf4lee\",\n            CenOwnerId = \"210000****\",\n            InstanceId = \"vpc-2bysvq1xx543k2dx0eeulpeiv\",\n            InstanceRegionId = \"cn-guilin-boe\",\n            InstanceType = \"VPC\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.NewGrantInstance(ctx, \"foo\", \u0026cen.GrantInstanceArgs{\n\t\t\tCenId:            pulumi.String(\"cen-2d6zdn0c1z5s058ozfcyf4lee\"),\n\t\t\tCenOwnerId:       pulumi.String(\"210000****\"),\n\t\t\tInstanceId:       pulumi.String(\"vpc-2bysvq1xx543k2dx0eeulpeiv\"),\n\t\t\tInstanceRegionId: pulumi.String(\"cn-guilin-boe\"),\n\t\t\tInstanceType:     pulumi.String(\"VPC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new GrantInstance(\"foo\", GrantInstanceArgs.builder()        \n            .cenId(\"cen-2d6zdn0c1z5s058ozfcyf4lee\")\n            .cenOwnerId(\"210000****\")\n            .instanceId(\"vpc-2bysvq1xx543k2dx0eeulpeiv\")\n            .instanceRegionId(\"cn-guilin-boe\")\n            .instanceType(\"VPC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cen:GrantInstance\n    properties:\n      cenId: cen-2d6zdn0c1z5s058ozfcyf4lee\n      cenOwnerId: 210000****\n      instanceId: vpc-2bysvq1xx543k2dx0eeulpeiv\n      instanceRegionId: cn-guilin-boe\n      instanceType: VPC\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCen grant instance can be imported using the CenId:CenOwnerId:InstanceId:InstanceType:RegionId, e.g.\n\n```sh\n $ pulumi import volcengine:cen/grantInstance:GrantInstance default cen-7qthudw0ll6jmc***:210000****:vpc-2fexiqjlgjif45oxruvso****:VPC:cn-beijing\n```\n\n ",
            "properties": {
                "cenId": {
                    "type": "string",
                    "description": "The ID of the cen.\n"
                },
                "cenOwnerId": {
                    "type": "string",
                    "description": "The owner ID of the cen.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance.\n"
                },
                "instanceRegionId": {
                    "type": "string",
                    "description": "The region ID of the instance.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the instance.\n"
                }
            },
            "required": [
                "cenId",
                "cenOwnerId",
                "instanceId",
                "instanceRegionId",
                "instanceType"
            ],
            "inputProperties": {
                "cenId": {
                    "type": "string",
                    "description": "The ID of the cen.\n",
                    "willReplaceOnChanges": true
                },
                "cenOwnerId": {
                    "type": "string",
                    "description": "The owner ID of the cen.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance.\n",
                    "willReplaceOnChanges": true
                },
                "instanceRegionId": {
                    "type": "string",
                    "description": "The region ID of the instance.\n",
                    "willReplaceOnChanges": true
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cenId",
                "cenOwnerId",
                "instanceId",
                "instanceRegionId",
                "instanceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantInstance resources.\n",
                "properties": {
                    "cenId": {
                        "type": "string",
                        "description": "The ID of the cen.\n",
                        "willReplaceOnChanges": true
                    },
                    "cenOwnerId": {
                        "type": "string",
                        "description": "The owner ID of the cen.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceRegionId": {
                        "type": "string",
                        "description": "The region ID of the instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of the instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cen/interRegionBandwidth:InterRegionBandwidth": {
            "description": "Provides a resource to manage cen inter region bandwidth\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cen.InterRegionBandwidth(\"foo\", {\n    bandwidth: 1,\n    cenId: \"cen-274vsbhwvvb407fap8sp611w7\",\n    localRegionId: \"cn-north-3\",\n    peerRegionId: \"cn-zhangjiakou\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.InterRegionBandwidth(\"foo\",\n    bandwidth=1,\n    cen_id=\"cen-274vsbhwvvb407fap8sp611w7\",\n    local_region_id=\"cn-north-3\",\n    peer_region_id=\"cn-zhangjiakou\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cen.InterRegionBandwidth(\"foo\", new Volcengine.Cen.InterRegionBandwidthArgs\n        {\n            Bandwidth = 1,\n            CenId = \"cen-274vsbhwvvb407fap8sp611w7\",\n            LocalRegionId = \"cn-north-3\",\n            PeerRegionId = \"cn-zhangjiakou\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.NewInterRegionBandwidth(ctx, \"foo\", \u0026cen.InterRegionBandwidthArgs{\n\t\t\tBandwidth:     pulumi.Int(1),\n\t\t\tCenId:         pulumi.String(\"cen-274vsbhwvvb407fap8sp611w7\"),\n\t\t\tLocalRegionId: pulumi.String(\"cn-north-3\"),\n\t\t\tPeerRegionId:  pulumi.String(\"cn-zhangjiakou\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new InterRegionBandwidth(\"foo\", InterRegionBandwidthArgs.builder()        \n            .bandwidth(1)\n            .cenId(\"cen-274vsbhwvvb407fap8sp611w7\")\n            .localRegionId(\"cn-north-3\")\n            .peerRegionId(\"cn-zhangjiakou\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cen:InterRegionBandwidth\n    properties:\n      bandwidth: 1\n      cenId: cen-274vsbhwvvb407fap8sp611w7\n      localRegionId: cn-north-3\n      peerRegionId: cn-zhangjiakou\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCenInterRegionBandwidth can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:cen/interRegionBandwidth:InterRegionBandwidth default cirb-3tex2x1cwd4c6c0v****\n```\n\n ",
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The bandwidth of the cen inter region bandwidth.\n"
                },
                "cenId": {
                    "type": "string",
                    "description": "The cen ID of the cen inter region bandwidth.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the cen inter region bandwidth.\n"
                },
                "interRegionBandwidthId": {
                    "type": "string",
                    "description": "The ID of the cen inter region bandwidth.\n"
                },
                "localRegionId": {
                    "type": "string",
                    "description": "The local region id of the cen inter region bandwidth.\n"
                },
                "peerRegionId": {
                    "type": "string",
                    "description": "The peer region id of the cen inter region bandwidth.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen inter region bandwidth.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the cen inter region bandwidth.\n"
                }
            },
            "required": [
                "bandwidth",
                "cenId",
                "creationTime",
                "interRegionBandwidthId",
                "localRegionId",
                "peerRegionId",
                "status",
                "updateTime"
            ],
            "inputProperties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The bandwidth of the cen inter region bandwidth.\n"
                },
                "cenId": {
                    "type": "string",
                    "description": "The cen ID of the cen inter region bandwidth.\n",
                    "willReplaceOnChanges": true
                },
                "localRegionId": {
                    "type": "string",
                    "description": "The local region id of the cen inter region bandwidth.\n",
                    "willReplaceOnChanges": true
                },
                "peerRegionId": {
                    "type": "string",
                    "description": "The peer region id of the cen inter region bandwidth.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bandwidth",
                "cenId",
                "localRegionId",
                "peerRegionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InterRegionBandwidth resources.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer",
                        "description": "The bandwidth of the cen inter region bandwidth.\n"
                    },
                    "cenId": {
                        "type": "string",
                        "description": "The cen ID of the cen inter region bandwidth.\n",
                        "willReplaceOnChanges": true
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of the cen inter region bandwidth.\n"
                    },
                    "interRegionBandwidthId": {
                        "type": "string",
                        "description": "The ID of the cen inter region bandwidth.\n"
                    },
                    "localRegionId": {
                        "type": "string",
                        "description": "The local region id of the cen inter region bandwidth.\n",
                        "willReplaceOnChanges": true
                    },
                    "peerRegionId": {
                        "type": "string",
                        "description": "The peer region id of the cen inter region bandwidth.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the cen inter region bandwidth.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of the cen inter region bandwidth.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cen/routeEntry:RouteEntry": {
            "description": "Provides a resource to manage cen route entry\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cen.RouteEntry(\"foo\", {\n    cenId: \"cen-12ar8uclj68sg17q7y20v9gil\",\n    destinationCidrBlock: \"192.168.0.0/24\",\n    instanceId: \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n    instanceRegionId: \"cn-beijing\",\n    instanceType: \"VPC\",\n});\nconst foo1 = new volcengine.cen.RouteEntry(\"foo1\", {\n    cenId: \"cen-12ar8uclj68sg17q7y20v9gil\",\n    destinationCidrBlock: \"192.168.17.0/24\",\n    instanceId: \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n    instanceRegionId: \"cn-beijing\",\n    instanceType: \"VPC\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.RouteEntry(\"foo\",\n    cen_id=\"cen-12ar8uclj68sg17q7y20v9gil\",\n    destination_cidr_block=\"192.168.0.0/24\",\n    instance_id=\"vpc-im67wjcikxkw8gbssx8ufpj8\",\n    instance_region_id=\"cn-beijing\",\n    instance_type=\"VPC\")\nfoo1 = volcengine.cen.RouteEntry(\"foo1\",\n    cen_id=\"cen-12ar8uclj68sg17q7y20v9gil\",\n    destination_cidr_block=\"192.168.17.0/24\",\n    instance_id=\"vpc-im67wjcikxkw8gbssx8ufpj8\",\n    instance_region_id=\"cn-beijing\",\n    instance_type=\"VPC\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cen.RouteEntry(\"foo\", new Volcengine.Cen.RouteEntryArgs\n        {\n            CenId = \"cen-12ar8uclj68sg17q7y20v9gil\",\n            DestinationCidrBlock = \"192.168.0.0/24\",\n            InstanceId = \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n            InstanceRegionId = \"cn-beijing\",\n            InstanceType = \"VPC\",\n        });\n        var foo1 = new Volcengine.Cen.RouteEntry(\"foo1\", new Volcengine.Cen.RouteEntryArgs\n        {\n            CenId = \"cen-12ar8uclj68sg17q7y20v9gil\",\n            DestinationCidrBlock = \"192.168.17.0/24\",\n            InstanceId = \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n            InstanceRegionId = \"cn-beijing\",\n            InstanceType = \"VPC\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.NewRouteEntry(ctx, \"foo\", \u0026cen.RouteEntryArgs{\n\t\t\tCenId:                pulumi.String(\"cen-12ar8uclj68sg17q7y20v9gil\"),\n\t\t\tDestinationCidrBlock: pulumi.String(\"192.168.0.0/24\"),\n\t\t\tInstanceId:           pulumi.String(\"vpc-im67wjcikxkw8gbssx8ufpj8\"),\n\t\t\tInstanceRegionId:     pulumi.String(\"cn-beijing\"),\n\t\t\tInstanceType:         pulumi.String(\"VPC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cen.NewRouteEntry(ctx, \"foo1\", \u0026cen.RouteEntryArgs{\n\t\t\tCenId:                pulumi.String(\"cen-12ar8uclj68sg17q7y20v9gil\"),\n\t\t\tDestinationCidrBlock: pulumi.String(\"192.168.17.0/24\"),\n\t\t\tInstanceId:           pulumi.String(\"vpc-im67wjcikxkw8gbssx8ufpj8\"),\n\t\t\tInstanceRegionId:     pulumi.String(\"cn-beijing\"),\n\t\t\tInstanceType:         pulumi.String(\"VPC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new RouteEntry(\"foo\", RouteEntryArgs.builder()        \n            .cenId(\"cen-12ar8uclj68sg17q7y20v9gil\")\n            .destinationCidrBlock(\"192.168.0.0/24\")\n            .instanceId(\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n            .instanceRegionId(\"cn-beijing\")\n            .instanceType(\"VPC\")\n            .build());\n\n        var foo1 = new RouteEntry(\"foo1\", RouteEntryArgs.builder()        \n            .cenId(\"cen-12ar8uclj68sg17q7y20v9gil\")\n            .destinationCidrBlock(\"192.168.17.0/24\")\n            .instanceId(\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n            .instanceRegionId(\"cn-beijing\")\n            .instanceType(\"VPC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cen:RouteEntry\n    properties:\n      cenId: cen-12ar8uclj68sg17q7y20v9gil\n      destinationCidrBlock: 192.168.0.0/24\n      instanceId: vpc-im67wjcikxkw8gbssx8ufpj8\n      instanceRegionId: cn-beijing\n      instanceType: VPC\n  foo1:\n    type: volcengine:cen:RouteEntry\n    properties:\n      cenId: cen-12ar8uclj68sg17q7y20v9gil\n      destinationCidrBlock: 192.168.17.0/24\n      instanceId: vpc-im67wjcikxkw8gbssx8ufpj8\n      instanceRegionId: cn-beijing\n      instanceType: VPC\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCenRouteEntry can be imported using the CenId:DestinationCidrBlock:InstanceId:InstanceType:InstanceRegionId, e.g.\n\n```sh\n $ pulumi import volcengine:cen/routeEntry:RouteEntry default cen-2nim00ybaylts7trquyzt****:100.XX.XX.0/24:vpc-vtbnbb04qw3k2hgi12cv****:VPC:cn-beijing\n```\n\n ",
            "properties": {
                "asPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AS path of the cen route entry.\n"
                },
                "cenId": {
                    "type": "string",
                    "description": "The cen ID of the cen route entry.\n"
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "The destination cidr block of the cen route entry.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id of the next hop of the cen route entry.\n"
                },
                "instanceRegionId": {
                    "type": "string",
                    "description": "The instance region id of the next hop of the cen route entry.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The instance type of the next hop of the cen route entry.\n"
                },
                "publishStatus": {
                    "type": "string",
                    "description": "The publish status of the cen route entry.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen route entry.\n"
                }
            },
            "required": [
                "asPaths",
                "cenId",
                "destinationCidrBlock",
                "instanceId",
                "instanceRegionId",
                "publishStatus",
                "status"
            ],
            "inputProperties": {
                "cenId": {
                    "type": "string",
                    "description": "The cen ID of the cen route entry.\n",
                    "willReplaceOnChanges": true
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "The destination cidr block of the cen route entry.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id of the next hop of the cen route entry.\n",
                    "willReplaceOnChanges": true
                },
                "instanceRegionId": {
                    "type": "string",
                    "description": "The instance region id of the next hop of the cen route entry.\n",
                    "willReplaceOnChanges": true
                },
                "instanceType": {
                    "type": "string",
                    "description": "The instance type of the next hop of the cen route entry.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cenId",
                "destinationCidrBlock",
                "instanceId",
                "instanceRegionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RouteEntry resources.\n",
                "properties": {
                    "asPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The AS path of the cen route entry.\n"
                    },
                    "cenId": {
                        "type": "string",
                        "description": "The cen ID of the cen route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "The destination cidr block of the cen route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance id of the next hop of the cen route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceRegionId": {
                        "type": "string",
                        "description": "The instance region id of the next hop of the cen route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The instance type of the next hop of the cen route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "publishStatus": {
                        "type": "string",
                        "description": "The publish status of the cen route entry.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the cen route entry.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cen/serviceRouteEntry:ServiceRouteEntry": {
            "description": "Provides a resource to manage cen service route entry\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cen.ServiceRouteEntry(\"foo\", {\n    cenId: \"cen-12ar8uclj68sg17q7y20v9gil\",\n    description: \"test-tf\",\n    destinationCidrBlock: \"100.64.0.0/11\",\n    publishMode: \"Custom\",\n    publishToInstances: [\n        {\n            instanceId: \"vpc-2fepz36a5ra4g59gp67w197xo\",\n            instanceRegionId: \"cn-beijing\",\n            instanceType: \"VPC\",\n        },\n        {\n            instanceId: \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n            instanceRegionId: \"cn-beijing\",\n            instanceType: \"VPC\",\n        },\n    ],\n    serviceRegionId: \"cn-beijing\",\n    serviceVpcId: \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n});\nconst foo1 = new volcengine.cen.ServiceRouteEntry(\"foo1\", {\n    cenId: \"cen-12ar8uclj68sg17q7y20v9gil\",\n    description: \"test-tf\",\n    destinationCidrBlock: \"100.64.0.0/10\",\n    publishMode: \"Custom\",\n    publishToInstances: [\n        {\n            instanceId: \"vpc-2fepz36a5ra4g59gp67w197xo\",\n            instanceRegionId: \"cn-beijing\",\n            instanceType: \"VPC\",\n        },\n        {\n            instanceId: \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n            instanceRegionId: \"cn-beijing\",\n            instanceType: \"VPC\",\n        },\n    ],\n    serviceRegionId: \"cn-beijing\",\n    serviceVpcId: \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n});\nconst foo2 = new volcengine.cen.ServiceRouteEntry(\"foo2\", {\n    cenId: \"cen-12ar8uclj68sg17q7y20v9gil\",\n    description: \"test-tf\",\n    destinationCidrBlock: \"100.64.0.0/12\",\n    publishMode: \"Custom\",\n    publishToInstances: [\n        {\n            instanceId: \"vpc-2fepz36a5ra4g59gp67w197xo\",\n            instanceRegionId: \"cn-beijing\",\n            instanceType: \"VPC\",\n        },\n        {\n            instanceId: \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n            instanceRegionId: \"cn-beijing\",\n            instanceType: \"VPC\",\n        },\n    ],\n    serviceRegionId: \"cn-beijing\",\n    serviceVpcId: \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.ServiceRouteEntry(\"foo\",\n    cen_id=\"cen-12ar8uclj68sg17q7y20v9gil\",\n    description=\"test-tf\",\n    destination_cidr_block=\"100.64.0.0/11\",\n    publish_mode=\"Custom\",\n    publish_to_instances=[\n        volcengine.cen.ServiceRouteEntryPublishToInstanceArgs(\n            instance_id=\"vpc-2fepz36a5ra4g59gp67w197xo\",\n            instance_region_id=\"cn-beijing\",\n            instance_type=\"VPC\",\n        ),\n        volcengine.cen.ServiceRouteEntryPublishToInstanceArgs(\n            instance_id=\"vpc-im67wjcikxkw8gbssx8ufpj8\",\n            instance_region_id=\"cn-beijing\",\n            instance_type=\"VPC\",\n        ),\n    ],\n    service_region_id=\"cn-beijing\",\n    service_vpc_id=\"vpc-im67wjcikxkw8gbssx8ufpj8\")\nfoo1 = volcengine.cen.ServiceRouteEntry(\"foo1\",\n    cen_id=\"cen-12ar8uclj68sg17q7y20v9gil\",\n    description=\"test-tf\",\n    destination_cidr_block=\"100.64.0.0/10\",\n    publish_mode=\"Custom\",\n    publish_to_instances=[\n        volcengine.cen.ServiceRouteEntryPublishToInstanceArgs(\n            instance_id=\"vpc-2fepz36a5ra4g59gp67w197xo\",\n            instance_region_id=\"cn-beijing\",\n            instance_type=\"VPC\",\n        ),\n        volcengine.cen.ServiceRouteEntryPublishToInstanceArgs(\n            instance_id=\"vpc-im67wjcikxkw8gbssx8ufpj8\",\n            instance_region_id=\"cn-beijing\",\n            instance_type=\"VPC\",\n        ),\n    ],\n    service_region_id=\"cn-beijing\",\n    service_vpc_id=\"vpc-im67wjcikxkw8gbssx8ufpj8\")\nfoo2 = volcengine.cen.ServiceRouteEntry(\"foo2\",\n    cen_id=\"cen-12ar8uclj68sg17q7y20v9gil\",\n    description=\"test-tf\",\n    destination_cidr_block=\"100.64.0.0/12\",\n    publish_mode=\"Custom\",\n    publish_to_instances=[\n        volcengine.cen.ServiceRouteEntryPublishToInstanceArgs(\n            instance_id=\"vpc-2fepz36a5ra4g59gp67w197xo\",\n            instance_region_id=\"cn-beijing\",\n            instance_type=\"VPC\",\n        ),\n        volcengine.cen.ServiceRouteEntryPublishToInstanceArgs(\n            instance_id=\"vpc-im67wjcikxkw8gbssx8ufpj8\",\n            instance_region_id=\"cn-beijing\",\n            instance_type=\"VPC\",\n        ),\n    ],\n    service_region_id=\"cn-beijing\",\n    service_vpc_id=\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cen.ServiceRouteEntry(\"foo\", new Volcengine.Cen.ServiceRouteEntryArgs\n        {\n            CenId = \"cen-12ar8uclj68sg17q7y20v9gil\",\n            Description = \"test-tf\",\n            DestinationCidrBlock = \"100.64.0.0/11\",\n            PublishMode = \"Custom\",\n            PublishToInstances = \n            {\n                new Volcengine.Cen.Inputs.ServiceRouteEntryPublishToInstanceArgs\n                {\n                    InstanceId = \"vpc-2fepz36a5ra4g59gp67w197xo\",\n                    InstanceRegionId = \"cn-beijing\",\n                    InstanceType = \"VPC\",\n                },\n                new Volcengine.Cen.Inputs.ServiceRouteEntryPublishToInstanceArgs\n                {\n                    InstanceId = \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n                    InstanceRegionId = \"cn-beijing\",\n                    InstanceType = \"VPC\",\n                },\n            },\n            ServiceRegionId = \"cn-beijing\",\n            ServiceVpcId = \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n        });\n        var foo1 = new Volcengine.Cen.ServiceRouteEntry(\"foo1\", new Volcengine.Cen.ServiceRouteEntryArgs\n        {\n            CenId = \"cen-12ar8uclj68sg17q7y20v9gil\",\n            Description = \"test-tf\",\n            DestinationCidrBlock = \"100.64.0.0/10\",\n            PublishMode = \"Custom\",\n            PublishToInstances = \n            {\n                new Volcengine.Cen.Inputs.ServiceRouteEntryPublishToInstanceArgs\n                {\n                    InstanceId = \"vpc-2fepz36a5ra4g59gp67w197xo\",\n                    InstanceRegionId = \"cn-beijing\",\n                    InstanceType = \"VPC\",\n                },\n                new Volcengine.Cen.Inputs.ServiceRouteEntryPublishToInstanceArgs\n                {\n                    InstanceId = \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n                    InstanceRegionId = \"cn-beijing\",\n                    InstanceType = \"VPC\",\n                },\n            },\n            ServiceRegionId = \"cn-beijing\",\n            ServiceVpcId = \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n        });\n        var foo2 = new Volcengine.Cen.ServiceRouteEntry(\"foo2\", new Volcengine.Cen.ServiceRouteEntryArgs\n        {\n            CenId = \"cen-12ar8uclj68sg17q7y20v9gil\",\n            Description = \"test-tf\",\n            DestinationCidrBlock = \"100.64.0.0/12\",\n            PublishMode = \"Custom\",\n            PublishToInstances = \n            {\n                new Volcengine.Cen.Inputs.ServiceRouteEntryPublishToInstanceArgs\n                {\n                    InstanceId = \"vpc-2fepz36a5ra4g59gp67w197xo\",\n                    InstanceRegionId = \"cn-beijing\",\n                    InstanceType = \"VPC\",\n                },\n                new Volcengine.Cen.Inputs.ServiceRouteEntryPublishToInstanceArgs\n                {\n                    InstanceId = \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n                    InstanceRegionId = \"cn-beijing\",\n                    InstanceType = \"VPC\",\n                },\n            },\n            ServiceRegionId = \"cn-beijing\",\n            ServiceVpcId = \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cen\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.NewServiceRouteEntry(ctx, \"foo\", \u0026cen.ServiceRouteEntryArgs{\n\t\t\tCenId:                pulumi.String(\"cen-12ar8uclj68sg17q7y20v9gil\"),\n\t\t\tDescription:          pulumi.String(\"test-tf\"),\n\t\t\tDestinationCidrBlock: pulumi.String(\"100.64.0.0/11\"),\n\t\t\tPublishMode:          pulumi.String(\"Custom\"),\n\t\t\tPublishToInstances: cen.ServiceRouteEntryPublishToInstanceArray{\n\t\t\t\t\u0026cen.ServiceRouteEntryPublishToInstanceArgs{\n\t\t\t\t\tInstanceId:       pulumi.String(\"vpc-2fepz36a5ra4g59gp67w197xo\"),\n\t\t\t\t\tInstanceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\t\t\tInstanceType:     pulumi.String(\"VPC\"),\n\t\t\t\t},\n\t\t\t\t\u0026cen.ServiceRouteEntryPublishToInstanceArgs{\n\t\t\t\t\tInstanceId:       pulumi.String(\"vpc-im67wjcikxkw8gbssx8ufpj8\"),\n\t\t\t\t\tInstanceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\t\t\tInstanceType:     pulumi.String(\"VPC\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tServiceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\tServiceVpcId:    pulumi.String(\"vpc-im67wjcikxkw8gbssx8ufpj8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cen.NewServiceRouteEntry(ctx, \"foo1\", \u0026cen.ServiceRouteEntryArgs{\n\t\t\tCenId:                pulumi.String(\"cen-12ar8uclj68sg17q7y20v9gil\"),\n\t\t\tDescription:          pulumi.String(\"test-tf\"),\n\t\t\tDestinationCidrBlock: pulumi.String(\"100.64.0.0/10\"),\n\t\t\tPublishMode:          pulumi.String(\"Custom\"),\n\t\t\tPublishToInstances: cen.ServiceRouteEntryPublishToInstanceArray{\n\t\t\t\t\u0026cen.ServiceRouteEntryPublishToInstanceArgs{\n\t\t\t\t\tInstanceId:       pulumi.String(\"vpc-2fepz36a5ra4g59gp67w197xo\"),\n\t\t\t\t\tInstanceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\t\t\tInstanceType:     pulumi.String(\"VPC\"),\n\t\t\t\t},\n\t\t\t\t\u0026cen.ServiceRouteEntryPublishToInstanceArgs{\n\t\t\t\t\tInstanceId:       pulumi.String(\"vpc-im67wjcikxkw8gbssx8ufpj8\"),\n\t\t\t\t\tInstanceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\t\t\tInstanceType:     pulumi.String(\"VPC\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tServiceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\tServiceVpcId:    pulumi.String(\"vpc-im67wjcikxkw8gbssx8ufpj8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cen.NewServiceRouteEntry(ctx, \"foo2\", \u0026cen.ServiceRouteEntryArgs{\n\t\t\tCenId:                pulumi.String(\"cen-12ar8uclj68sg17q7y20v9gil\"),\n\t\t\tDescription:          pulumi.String(\"test-tf\"),\n\t\t\tDestinationCidrBlock: pulumi.String(\"100.64.0.0/12\"),\n\t\t\tPublishMode:          pulumi.String(\"Custom\"),\n\t\t\tPublishToInstances: cen.ServiceRouteEntryPublishToInstanceArray{\n\t\t\t\t\u0026cen.ServiceRouteEntryPublishToInstanceArgs{\n\t\t\t\t\tInstanceId:       pulumi.String(\"vpc-2fepz36a5ra4g59gp67w197xo\"),\n\t\t\t\t\tInstanceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\t\t\tInstanceType:     pulumi.String(\"VPC\"),\n\t\t\t\t},\n\t\t\t\t\u0026cen.ServiceRouteEntryPublishToInstanceArgs{\n\t\t\t\t\tInstanceId:       pulumi.String(\"vpc-im67wjcikxkw8gbssx8ufpj8\"),\n\t\t\t\t\tInstanceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\t\t\tInstanceType:     pulumi.String(\"VPC\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tServiceRegionId: pulumi.String(\"cn-beijing\"),\n\t\t\tServiceVpcId:    pulumi.String(\"vpc-im67wjcikxkw8gbssx8ufpj8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ServiceRouteEntry(\"foo\", ServiceRouteEntryArgs.builder()        \n            .cenId(\"cen-12ar8uclj68sg17q7y20v9gil\")\n            .description(\"test-tf\")\n            .destinationCidrBlock(\"100.64.0.0/11\")\n            .publishMode(\"Custom\")\n            .publishToInstances(            \n                ServiceRouteEntryPublishToInstanceArgs.builder()\n                    .instanceId(\"vpc-2fepz36a5ra4g59gp67w197xo\")\n                    .instanceRegionId(\"cn-beijing\")\n                    .instanceType(\"VPC\")\n                    .build(),\n                ServiceRouteEntryPublishToInstanceArgs.builder()\n                    .instanceId(\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n                    .instanceRegionId(\"cn-beijing\")\n                    .instanceType(\"VPC\")\n                    .build())\n            .serviceRegionId(\"cn-beijing\")\n            .serviceVpcId(\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n            .build());\n\n        var foo1 = new ServiceRouteEntry(\"foo1\", ServiceRouteEntryArgs.builder()        \n            .cenId(\"cen-12ar8uclj68sg17q7y20v9gil\")\n            .description(\"test-tf\")\n            .destinationCidrBlock(\"100.64.0.0/10\")\n            .publishMode(\"Custom\")\n            .publishToInstances(            \n                ServiceRouteEntryPublishToInstanceArgs.builder()\n                    .instanceId(\"vpc-2fepz36a5ra4g59gp67w197xo\")\n                    .instanceRegionId(\"cn-beijing\")\n                    .instanceType(\"VPC\")\n                    .build(),\n                ServiceRouteEntryPublishToInstanceArgs.builder()\n                    .instanceId(\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n                    .instanceRegionId(\"cn-beijing\")\n                    .instanceType(\"VPC\")\n                    .build())\n            .serviceRegionId(\"cn-beijing\")\n            .serviceVpcId(\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n            .build());\n\n        var foo2 = new ServiceRouteEntry(\"foo2\", ServiceRouteEntryArgs.builder()        \n            .cenId(\"cen-12ar8uclj68sg17q7y20v9gil\")\n            .description(\"test-tf\")\n            .destinationCidrBlock(\"100.64.0.0/12\")\n            .publishMode(\"Custom\")\n            .publishToInstances(            \n                ServiceRouteEntryPublishToInstanceArgs.builder()\n                    .instanceId(\"vpc-2fepz36a5ra4g59gp67w197xo\")\n                    .instanceRegionId(\"cn-beijing\")\n                    .instanceType(\"VPC\")\n                    .build(),\n                ServiceRouteEntryPublishToInstanceArgs.builder()\n                    .instanceId(\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n                    .instanceRegionId(\"cn-beijing\")\n                    .instanceType(\"VPC\")\n                    .build())\n            .serviceRegionId(\"cn-beijing\")\n            .serviceVpcId(\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cen:ServiceRouteEntry\n    properties:\n      cenId: cen-12ar8uclj68sg17q7y20v9gil\n      description: test-tf\n      destinationCidrBlock: 100.64.0.0/11\n      publishMode: Custom\n      publishToInstances:\n        - instanceId: vpc-2fepz36a5ra4g59gp67w197xo\n          instanceRegionId: cn-beijing\n          instanceType: VPC\n        - instanceId: vpc-im67wjcikxkw8gbssx8ufpj8\n          instanceRegionId: cn-beijing\n          instanceType: VPC\n      serviceRegionId: cn-beijing\n      serviceVpcId: vpc-im67wjcikxkw8gbssx8ufpj8\n  foo1:\n    type: volcengine:cen:ServiceRouteEntry\n    properties:\n      cenId: cen-12ar8uclj68sg17q7y20v9gil\n      description: test-tf\n      destinationCidrBlock: 100.64.0.0/10\n      publishMode: Custom\n      publishToInstances:\n        - instanceId: vpc-2fepz36a5ra4g59gp67w197xo\n          instanceRegionId: cn-beijing\n          instanceType: VPC\n        - instanceId: vpc-im67wjcikxkw8gbssx8ufpj8\n          instanceRegionId: cn-beijing\n          instanceType: VPC\n      serviceRegionId: cn-beijing\n      serviceVpcId: vpc-im67wjcikxkw8gbssx8ufpj8\n  foo2:\n    type: volcengine:cen:ServiceRouteEntry\n    properties:\n      cenId: cen-12ar8uclj68sg17q7y20v9gil\n      description: test-tf\n      destinationCidrBlock: 100.64.0.0/12\n      publishMode: Custom\n      publishToInstances:\n        - instanceId: vpc-2fepz36a5ra4g59gp67w197xo\n          instanceRegionId: cn-beijing\n          instanceType: VPC\n        - instanceId: vpc-im67wjcikxkw8gbssx8ufpj8\n          instanceRegionId: cn-beijing\n          instanceType: VPC\n      serviceRegionId: cn-beijing\n      serviceVpcId: vpc-im67wjcikxkw8gbssx8ufpj8\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCenServiceRouteEntry can be imported using the CenId:DestinationCidrBlock:ServiceRegionId:ServiceVpcId, e.g.\n\n```sh\n $ pulumi import volcengine:cen/serviceRouteEntry:ServiceRouteEntry default cen-2nim00ybaylts7trquyzt****:100.XX.XX.0/24:cn-beijing:vpc-3rlkeggyn6tc010exd32q****\n```\n\n ",
            "properties": {
                "cenId": {
                    "type": "string",
                    "description": "The cen ID of the cen service route entry.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the cen service route entry.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cen service route entry.\n"
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "The destination cidr block of the cen service route entry.\n"
                },
                "publishMode": {
                    "type": "string",
                    "description": "Publishing scope of cloud service access routes. Valid values are `LocalDCGW`(default), `Custom`.\n"
                },
                "publishToInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cen/ServiceRouteEntryPublishToInstance:ServiceRouteEntryPublishToInstance"
                    },
                    "description": "The publish instances. A maximum of 100 can be uploaded in one request. This field needs to be filled in when the `publish_mode` is `Custom`.\n"
                },
                "serviceRegionId": {
                    "type": "string",
                    "description": "The service region id of the cen service route entry.\n"
                },
                "serviceVpcId": {
                    "type": "string",
                    "description": "The service VPC id of the cen service route entry.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cen service route entry.\n"
                }
            },
            "required": [
                "cenId",
                "creationTime",
                "description",
                "destinationCidrBlock",
                "serviceRegionId",
                "serviceVpcId",
                "status"
            ],
            "inputProperties": {
                "cenId": {
                    "type": "string",
                    "description": "The cen ID of the cen service route entry.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cen service route entry.\n"
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "The destination cidr block of the cen service route entry.\n",
                    "willReplaceOnChanges": true
                },
                "publishMode": {
                    "type": "string",
                    "description": "Publishing scope of cloud service access routes. Valid values are `LocalDCGW`(default), `Custom`.\n"
                },
                "publishToInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cen/ServiceRouteEntryPublishToInstance:ServiceRouteEntryPublishToInstance"
                    },
                    "description": "The publish instances. A maximum of 100 can be uploaded in one request. This field needs to be filled in when the `publish_mode` is `Custom`.\n"
                },
                "serviceRegionId": {
                    "type": "string",
                    "description": "The service region id of the cen service route entry.\n",
                    "willReplaceOnChanges": true
                },
                "serviceVpcId": {
                    "type": "string",
                    "description": "The service VPC id of the cen service route entry.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cenId",
                "destinationCidrBlock",
                "serviceRegionId",
                "serviceVpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceRouteEntry resources.\n",
                "properties": {
                    "cenId": {
                        "type": "string",
                        "description": "The cen ID of the cen service route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of the cen service route entry.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the cen service route entry.\n"
                    },
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "The destination cidr block of the cen service route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "publishMode": {
                        "type": "string",
                        "description": "Publishing scope of cloud service access routes. Valid values are `LocalDCGW`(default), `Custom`.\n"
                    },
                    "publishToInstances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/ServiceRouteEntryPublishToInstance:ServiceRouteEntryPublishToInstance"
                        },
                        "description": "The publish instances. A maximum of 100 can be uploaded in one request. This field needs to be filled in when the `publish_mode` is `Custom`.\n"
                    },
                    "serviceRegionId": {
                        "type": "string",
                        "description": "The service region id of the cen service route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceVpcId": {
                        "type": "string",
                        "description": "The service VPC id of the cen service route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the cen service route entry.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:clb/acl:Acl": {
            "description": "Provides a resource to manage acl\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.clb.Acl(\"foo\", {\n    aclEntries: [\n        {\n            description: \"e1\",\n            entry: \"172.20.1.0/24\",\n        },\n        {\n            description: \"e3\",\n            entry: \"172.20.3.0/24\",\n        },\n    ],\n    aclName: \"tf-test-2\",\n    projectName: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.clb.Acl(\"foo\",\n    acl_entries=[\n        volcengine.clb.AclAclEntryArgs(\n            description=\"e1\",\n            entry=\"172.20.1.0/24\",\n        ),\n        volcengine.clb.AclAclEntryArgs(\n            description=\"e3\",\n            entry=\"172.20.3.0/24\",\n        ),\n    ],\n    acl_name=\"tf-test-2\",\n    project_name=\"default\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Clb.Acl(\"foo\", new Volcengine.Clb.AclArgs\n        {\n            AclEntries = \n            {\n                new Volcengine.Clb.Inputs.AclAclEntryArgs\n                {\n                    Description = \"e1\",\n                    Entry = \"172.20.1.0/24\",\n                },\n                new Volcengine.Clb.Inputs.AclAclEntryArgs\n                {\n                    Description = \"e3\",\n                    Entry = \"172.20.3.0/24\",\n                },\n            },\n            AclName = \"tf-test-2\",\n            ProjectName = \"default\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := clb.NewAcl(ctx, \"foo\", \u0026clb.AclArgs{\n\t\t\tAclEntries: clb.AclAclEntryArray{\n\t\t\t\t\u0026clb.AclAclEntryArgs{\n\t\t\t\t\tDescription: pulumi.String(\"e1\"),\n\t\t\t\t\tEntry:       pulumi.String(\"172.20.1.0/24\"),\n\t\t\t\t},\n\t\t\t\t\u0026clb.AclAclEntryArgs{\n\t\t\t\t\tDescription: pulumi.String(\"e3\"),\n\t\t\t\t\tEntry:       pulumi.String(\"172.20.3.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAclName:     pulumi.String(\"tf-test-2\"),\n\t\t\tProjectName: pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Acl(\"foo\", AclArgs.builder()        \n            .aclEntries(            \n                AclAclEntryArgs.builder()\n                    .description(\"e1\")\n                    .entry(\"172.20.1.0/24\")\n                    .build(),\n                AclAclEntryArgs.builder()\n                    .description(\"e3\")\n                    .entry(\"172.20.3.0/24\")\n                    .build())\n            .aclName(\"tf-test-2\")\n            .projectName(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:clb:Acl\n    properties:\n      aclEntries:\n        - description: e1\n          entry: 172.20.1.0/24\n        - description: e3\n          entry: 172.20.3.0/24\n      aclName: tf-test-2\n      projectName: default\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAcl can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:clb/acl:Acl default acl-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "aclEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:clb/AclAclEntry:AclAclEntry"
                    },
                    "description": "The acl entry set of the Acl.\n"
                },
                "aclName": {
                    "type": "string",
                    "description": "The name of Acl.\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "Create time of Acl.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Acl.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the Acl.\n"
                }
            },
            "required": [
                "aclEntries",
                "aclName",
                "createTime"
            ],
            "inputProperties": {
                "aclEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:clb/AclAclEntry:AclAclEntry"
                    },
                    "description": "The acl entry set of the Acl.\n"
                },
                "aclName": {
                    "type": "string",
                    "description": "The name of Acl.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Acl.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the Acl.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Acl resources.\n",
                "properties": {
                    "aclEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/AclAclEntry:AclAclEntry"
                        },
                        "description": "The acl entry set of the Acl.\n"
                    },
                    "aclName": {
                        "type": "string",
                        "description": "The name of Acl.\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Create time of Acl.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Acl.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the Acl.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:clb/aclEntry:AclEntry": {
            "description": "Provides a resource to manage acl entry\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst fooAcl = new volcengine.clb.Acl(\"fooAcl\", {\n    aclName: \"tf-test-3\",\n    description: \"tf-test\",\n});\nconst fooAclEntry = new volcengine.clb.AclEntry(\"fooAclEntry\", {\n    aclId: fooAcl.id,\n    description: \"tf acl entry desc demo\",\n    entry: \"192.2.2.1/32\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_acl = volcengine.clb.Acl(\"fooAcl\",\n    acl_name=\"tf-test-3\",\n    description=\"tf-test\")\nfoo_acl_entry = volcengine.clb.AclEntry(\"fooAclEntry\",\n    acl_id=foo_acl.id,\n    description=\"tf acl entry desc demo\",\n    entry=\"192.2.2.1/32\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooAcl = new Volcengine.Clb.Acl(\"fooAcl\", new Volcengine.Clb.AclArgs\n        {\n            AclName = \"tf-test-3\",\n            Description = \"tf-test\",\n        });\n        var fooAclEntry = new Volcengine.Clb.AclEntry(\"fooAclEntry\", new Volcengine.Clb.AclEntryArgs\n        {\n            AclId = fooAcl.Id,\n            Description = \"tf acl entry desc demo\",\n            Entry = \"192.2.2.1/32\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAcl, err := clb.NewAcl(ctx, \"fooAcl\", \u0026clb.AclArgs{\n\t\t\tAclName:     pulumi.String(\"tf-test-3\"),\n\t\t\tDescription: pulumi.String(\"tf-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = clb.NewAclEntry(ctx, \"fooAclEntry\", \u0026clb.AclEntryArgs{\n\t\t\tAclId:       fooAcl.ID(),\n\t\t\tDescription: pulumi.String(\"tf acl entry desc demo\"),\n\t\t\tEntry:       pulumi.String(\"192.2.2.1/32\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooAcl = new Acl(\"fooAcl\", AclArgs.builder()        \n            .aclName(\"tf-test-3\")\n            .description(\"tf-test\")\n            .build());\n\n        var fooAclEntry = new AclEntry(\"fooAclEntry\", AclEntryArgs.builder()        \n            .aclId(fooAcl.id())\n            .description(\"tf acl entry desc demo\")\n            .entry(\"192.2.2.1/32\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAcl:\n    type: volcengine:clb:Acl\n    properties:\n      aclName: tf-test-3\n      description: tf-test\n  fooAclEntry:\n    type: volcengine:clb:AclEntry\n    properties:\n      aclId: ${fooAcl.id}\n      description: tf acl entry desc demo\n      entry: 192.2.2.1/32\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAclEntry can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:clb/aclEntry:AclEntry default ID is a string concatenated with colons(AclId:Entry)\n```\n\n ",
            "properties": {
                "aclId": {
                    "type": "string",
                    "description": "The ID of Acl.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the AclEntry.\n"
                },
                "entry": {
                    "type": "string",
                    "description": "The content of the AclEntry.\n"
                }
            },
            "required": [
                "aclId",
                "entry"
            ],
            "inputProperties": {
                "aclId": {
                    "type": "string",
                    "description": "The ID of Acl.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the AclEntry.\n",
                    "willReplaceOnChanges": true
                },
                "entry": {
                    "type": "string",
                    "description": "The content of the AclEntry.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "aclId",
                "entry"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AclEntry resources.\n",
                "properties": {
                    "aclId": {
                        "type": "string",
                        "description": "The ID of Acl.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the AclEntry.\n",
                        "willReplaceOnChanges": true
                    },
                    "entry": {
                        "type": "string",
                        "description": "The content of the AclEntry.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:clb/certificate:Certificate": {
            "description": "Provides a resource to manage certificate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.clb.Certificate(\"foo\", {\n    certificateName: \"acc-test-certificate\",\n    description: \"acc-test-demo\",\n    privateKey: `-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9\nBVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C\nNIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB\nAoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t\ndmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED\nK8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG\nNw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji\n0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY\nB9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW\nxNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi\njY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP\nrmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ\nV4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=\n-----END RSA PRIVATE KEY-----`,\n    projectName: \"default\",\n    publicKey: `-----BEGIN CERTIFICATE-----\nMIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\nBAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX\naWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF\nMQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\ngQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP\nY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5\ntWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV\nHQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP\nrfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0\n5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f\nlKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf\nt07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==\n-----END CERTIFICATE-----`,\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.clb.Certificate(\"foo\",\n    certificate_name=\"acc-test-certificate\",\n    description=\"acc-test-demo\",\n    private_key=\"\"\"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9\nBVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C\nNIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB\nAoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t\ndmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED\nK8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG\nNw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji\n0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY\nB9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW\nxNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi\njY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP\nrmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ\nV4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=\n-----END RSA PRIVATE KEY-----\n\"\"\",\n    project_name=\"default\",\n    public_key=\"\"\"-----BEGIN CERTIFICATE-----\nMIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\nBAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX\naWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF\nMQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\ngQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP\nY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5\ntWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV\nHQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP\nrfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0\n5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f\nlKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf\nt07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==\n-----END CERTIFICATE-----\n\"\"\",\n    tags=[volcengine.clb.CertificateTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Clb.Certificate(\"foo\", new Volcengine.Clb.CertificateArgs\n        {\n            CertificateName = \"acc-test-certificate\",\n            Description = \"acc-test-demo\",\n            PrivateKey = @\"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9\nBVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C\nNIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB\nAoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t\ndmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED\nK8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG\nNw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji\n0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY\nB9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW\nxNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi\njY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP\nrmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ\nV4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=\n-----END RSA PRIVATE KEY-----\n\",\n            ProjectName = \"default\",\n            PublicKey = @\"-----BEGIN CERTIFICATE-----\nMIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\nBAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX\naWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF\nMQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\ngQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP\nY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5\ntWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV\nHQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP\nrfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0\n5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f\nlKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf\nt07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==\n-----END CERTIFICATE-----\n\",\n            Tags = \n            {\n                new Volcengine.Clb.Inputs.CertificateTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := clb.NewCertificate(ctx, \"foo\", \u0026clb.CertificateArgs{\n\t\t\tCertificateName: pulumi.String(\"acc-test-certificate\"),\n\t\t\tDescription:     pulumi.String(\"acc-test-demo\"),\n\t\t\tPrivateKey:      pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v\", \"-----BEGIN RSA PRIVATE KEY-----\\n\", \"MIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9\\n\", \"BVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C\\n\", \"NIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB\\n\", \"AoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t\\n\", \"dmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED\\n\", \"K8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG\\n\", \"Nw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji\\n\", \"0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY\\n\", \"B9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW\\n\", \"xNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi\\n\", \"jY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP\\n\", \"rmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ\\n\", \"V4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=\\n\", \"-----END RSA PRIVATE KEY-----\\n\")),\n\t\t\tProjectName:     pulumi.String(\"default\"),\n\t\t\tPublicKey:       pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v\", \"-----BEGIN CERTIFICATE-----\\n\", \"MIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\\n\", \"BAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX\\n\", \"aWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF\\n\", \"MQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50\\n\", \"ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\", \"gQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP\\n\", \"Y9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5\\n\", \"tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV\\n\", \"HQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP\\n\", \"rfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0\\n\", \"5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f\\n\", \"lKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf\\n\", \"t07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==\\n\", \"-----END CERTIFICATE-----\\n\")),\n\t\t\tTags: clb.CertificateTagArray{\n\t\t\t\t\u0026clb.CertificateTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Certificate(\"foo\", CertificateArgs.builder()        \n            .certificateName(\"acc-test-certificate\")\n            .description(\"acc-test-demo\")\n            .privateKey(\"\"\"\n-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9\nBVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C\nNIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB\nAoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t\ndmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED\nK8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG\nNw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji\n0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY\nB9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW\nxNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi\njY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP\nrmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ\nV4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=\n-----END RSA PRIVATE KEY-----\n            \"\"\")\n            .projectName(\"default\")\n            .publicKey(\"\"\"\n-----BEGIN CERTIFICATE-----\nMIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\nBAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX\naWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF\nMQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\ngQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP\nY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5\ntWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV\nHQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP\nrfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0\n5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f\nlKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf\nt07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==\n-----END CERTIFICATE-----\n            \"\"\")\n            .tags(CertificateTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:clb:Certificate\n    properties:\n      certificateName: acc-test-certificate\n      description: acc-test-demo\n      privateKey: |\n        -----BEGIN RSA PRIVATE KEY-----\n        MIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9\n        BVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C\n        NIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB\n        AoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t\n        dmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED\n        K8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG\n        Nw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji\n        0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY\n        B9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW\n        xNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi\n        jY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP\n        rmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ\n        V4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=\n        -----END RSA PRIVATE KEY-----\n      projectName: default\n      publicKey: |\n        -----BEGIN CERTIFICATE-----\n        MIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\n        BAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX\n        aWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF\n        MQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50\n        ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n        gQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP\n        Y9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5\n        tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV\n        HQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP\n        rfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0\n        5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f\n        lKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf\n        t07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==\n        -----END CERTIFICATE-----\n      tags:\n        - key: k1\n          value: v1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCertificate can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:clb/certificate:Certificate default cert-2fe5k****c16o5oxruvtk3qf5\n```\n\n ",
            "properties": {
                "certificateName": {
                    "type": "string",
                    "description": "The name of the Certificate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Certificate.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key of the Certificate. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the Certificate.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key of the Certificate. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:clb/CertificateTag:CertificateTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "required": [
                "privateKey",
                "publicKey"
            ],
            "inputProperties": {
                "certificateName": {
                    "type": "string",
                    "description": "The name of the Certificate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Certificate.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key of the Certificate. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the Certificate.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key of the Certificate. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:clb/CertificateTag:CertificateTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "requiredInputs": [
                "privateKey",
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "certificateName": {
                        "type": "string",
                        "description": "The name of the Certificate.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Certificate.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private key of the Certificate. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the Certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key of the Certificate. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/CertificateTag:CertificateTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:clb/clb:Clb": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooClb = new volcengine.clb.Clb(\"fooClb\", {\n    type: \"public\",\n    subnetId: fooSubnet.id,\n    loadBalancerSpec: \"small_1\",\n    description: \"acc-test-demo\",\n    loadBalancerName: \"acc-test-clb\",\n    loadBalancerBillingType: \"PostPaid\",\n    eipBillingConfig: {\n        isp: \"BGP\",\n        eipBillingType: \"PostPaidByBandwidth\",\n        bandwidth: 1,\n    },\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n});\nconst publicClb = new volcengine.clb.Clb(\"publicClb\", {\n    type: \"public\",\n    subnetId: fooSubnet.id,\n    loadBalancerName: \"acc-test-clb-public\",\n    loadBalancerSpec: \"small_1\",\n    description: \"acc-test-demo\",\n    projectName: \"default\",\n    eipBillingConfig: {\n        isp: \"BGP\",\n        eipBillingType: \"PostPaidByBandwidth\",\n        bandwidth: 1,\n    },\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n});\nconst privateClb = new volcengine.clb.Clb(\"privateClb\", {\n    type: \"private\",\n    subnetId: fooSubnet.id,\n    loadBalancerName: \"acc-test-clb-private\",\n    loadBalancerSpec: \"small_1\",\n    description: \"acc-test-demo\",\n    projectName: \"default\",\n});\nconst eip = new volcengine.eip.Address(\"eip\", {\n    billingType: \"PostPaidByBandwidth\",\n    bandwidth: 1,\n    isp: \"BGP\",\n    description: \"tf-test\",\n    projectName: \"default\",\n});\nconst associate = new volcengine.eip.Associate(\"associate\", {\n    allocationId: eip.id,\n    instanceId: privateClb.id,\n    instanceType: \"ClbInstance\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_clb = volcengine.clb.Clb(\"fooClb\",\n    type=\"public\",\n    subnet_id=foo_subnet.id,\n    load_balancer_spec=\"small_1\",\n    description=\"acc-test-demo\",\n    load_balancer_name=\"acc-test-clb\",\n    load_balancer_billing_type=\"PostPaid\",\n    eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n        isp=\"BGP\",\n        eip_billing_type=\"PostPaidByBandwidth\",\n        bandwidth=1,\n    ),\n    tags=[volcengine.clb.ClbTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )])\npublic_clb = volcengine.clb.Clb(\"publicClb\",\n    type=\"public\",\n    subnet_id=foo_subnet.id,\n    load_balancer_name=\"acc-test-clb-public\",\n    load_balancer_spec=\"small_1\",\n    description=\"acc-test-demo\",\n    project_name=\"default\",\n    eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n        isp=\"BGP\",\n        eip_billing_type=\"PostPaidByBandwidth\",\n        bandwidth=1,\n    ),\n    tags=[volcengine.clb.ClbTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )])\nprivate_clb = volcengine.clb.Clb(\"privateClb\",\n    type=\"private\",\n    subnet_id=foo_subnet.id,\n    load_balancer_name=\"acc-test-clb-private\",\n    load_balancer_spec=\"small_1\",\n    description=\"acc-test-demo\",\n    project_name=\"default\")\neip = volcengine.eip.Address(\"eip\",\n    billing_type=\"PostPaidByBandwidth\",\n    bandwidth=1,\n    isp=\"BGP\",\n    description=\"tf-test\",\n    project_name=\"default\")\nassociate = volcengine.eip.Associate(\"associate\",\n    allocation_id=eip.id,\n    instance_id=private_clb.id,\n    instance_type=\"ClbInstance\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooClb = new Volcengine.Clb.Clb(\"fooClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"public\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc-test-demo\",\n            LoadBalancerName = \"acc-test-clb\",\n            LoadBalancerBillingType = \"PostPaid\",\n            EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n            {\n                Isp = \"BGP\",\n                EipBillingType = \"PostPaidByBandwidth\",\n                Bandwidth = 1,\n            },\n            Tags = \n            {\n                new Volcengine.Clb.Inputs.ClbTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n        });\n        var publicClb = new Volcengine.Clb.Clb(\"publicClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"public\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerName = \"acc-test-clb-public\",\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc-test-demo\",\n            ProjectName = \"default\",\n            EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n            {\n                Isp = \"BGP\",\n                EipBillingType = \"PostPaidByBandwidth\",\n                Bandwidth = 1,\n            },\n            Tags = \n            {\n                new Volcengine.Clb.Inputs.ClbTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n        });\n        var privateClb = new Volcengine.Clb.Clb(\"privateClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"private\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerName = \"acc-test-clb-private\",\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc-test-demo\",\n            ProjectName = \"default\",\n        });\n        var eip = new Volcengine.Eip.Address(\"eip\", new Volcengine.Eip.AddressArgs\n        {\n            BillingType = \"PostPaidByBandwidth\",\n            Bandwidth = 1,\n            Isp = \"BGP\",\n            Description = \"tf-test\",\n            ProjectName = \"default\",\n        });\n        var associate = new Volcengine.Eip.Associate(\"associate\", new Volcengine.Eip.AssociateArgs\n        {\n            AllocationId = eip.Id,\n            InstanceId = privateClb.Id,\n            InstanceType = \"ClbInstance\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/eip\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = clb.NewClb(ctx, \"fooClb\", \u0026clb.ClbArgs{\n\t\t\tType:                    pulumi.String(\"public\"),\n\t\t\tSubnetId:                fooSubnet.ID(),\n\t\t\tLoadBalancerSpec:        pulumi.String(\"small_1\"),\n\t\t\tDescription:             pulumi.String(\"acc-test-demo\"),\n\t\t\tLoadBalancerName:        pulumi.String(\"acc-test-clb\"),\n\t\t\tLoadBalancerBillingType: pulumi.String(\"PostPaid\"),\n\t\t\tEipBillingConfig: \u0026clb.ClbEipBillingConfigArgs{\n\t\t\t\tIsp:            pulumi.String(\"BGP\"),\n\t\t\t\tEipBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\tBandwidth:      pulumi.Int(1),\n\t\t\t},\n\t\t\tTags: clb.ClbTagArray{\n\t\t\t\t\u0026clb.ClbTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = clb.NewClb(ctx, \"publicClb\", \u0026clb.ClbArgs{\n\t\t\tType:             pulumi.String(\"public\"),\n\t\t\tSubnetId:         fooSubnet.ID(),\n\t\t\tLoadBalancerName: pulumi.String(\"acc-test-clb-public\"),\n\t\t\tLoadBalancerSpec: pulumi.String(\"small_1\"),\n\t\t\tDescription:      pulumi.String(\"acc-test-demo\"),\n\t\t\tProjectName:      pulumi.String(\"default\"),\n\t\t\tEipBillingConfig: \u0026clb.ClbEipBillingConfigArgs{\n\t\t\t\tIsp:            pulumi.String(\"BGP\"),\n\t\t\t\tEipBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\tBandwidth:      pulumi.Int(1),\n\t\t\t},\n\t\t\tTags: clb.ClbTagArray{\n\t\t\t\t\u0026clb.ClbTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprivateClb, err := clb.NewClb(ctx, \"privateClb\", \u0026clb.ClbArgs{\n\t\t\tType:             pulumi.String(\"private\"),\n\t\t\tSubnetId:         fooSubnet.ID(),\n\t\t\tLoadBalancerName: pulumi.String(\"acc-test-clb-private\"),\n\t\t\tLoadBalancerSpec: pulumi.String(\"small_1\"),\n\t\t\tDescription:      pulumi.String(\"acc-test-demo\"),\n\t\t\tProjectName:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\teip, err := eip.NewAddress(ctx, \"eip\", \u0026eip.AddressArgs{\n\t\t\tBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\tBandwidth:   pulumi.Int(1),\n\t\t\tIsp:         pulumi.String(\"BGP\"),\n\t\t\tDescription: pulumi.String(\"tf-test\"),\n\t\t\tProjectName: pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = eip.NewAssociate(ctx, \"associate\", \u0026eip.AssociateArgs{\n\t\t\tAllocationId: eip.ID(),\n\t\t\tInstanceId:   privateClb.ID(),\n\t\t\tInstanceType: pulumi.String(\"ClbInstance\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooClb = new Clb(\"fooClb\", ClbArgs.builder()        \n            .type(\"public\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc-test-demo\")\n            .loadBalancerName(\"acc-test-clb\")\n            .loadBalancerBillingType(\"PostPaid\")\n            .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                .isp(\"BGP\")\n                .eipBillingType(\"PostPaidByBandwidth\")\n                .bandwidth(1)\n                .build())\n            .tags(ClbTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .build());\n\n        var publicClb = new Clb(\"publicClb\", ClbArgs.builder()        \n            .type(\"public\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerName(\"acc-test-clb-public\")\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc-test-demo\")\n            .projectName(\"default\")\n            .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                .isp(\"BGP\")\n                .eipBillingType(\"PostPaidByBandwidth\")\n                .bandwidth(1)\n                .build())\n            .tags(ClbTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .build());\n\n        var privateClb = new Clb(\"privateClb\", ClbArgs.builder()        \n            .type(\"private\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerName(\"acc-test-clb-private\")\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc-test-demo\")\n            .projectName(\"default\")\n            .build());\n\n        var eip = new Address(\"eip\", AddressArgs.builder()        \n            .billingType(\"PostPaidByBandwidth\")\n            .bandwidth(1)\n            .isp(\"BGP\")\n            .description(\"tf-test\")\n            .projectName(\"default\")\n            .build());\n\n        var associate = new Associate(\"associate\", AssociateArgs.builder()        \n            .allocationId(eip.id())\n            .instanceId(privateClb.id())\n            .instanceType(\"ClbInstance\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooClb:\n    type: volcengine:clb:Clb\n    properties:\n      type: public\n      subnetId: ${fooSubnet.id}\n      loadBalancerSpec: small_1\n      description: acc-test-demo\n      loadBalancerName: acc-test-clb\n      loadBalancerBillingType: PostPaid\n      eipBillingConfig:\n        isp: BGP\n        eipBillingType: PostPaidByBandwidth\n        bandwidth: 1\n      tags:\n        - key: k1\n          value: v1\n  publicClb:\n    type: volcengine:clb:Clb\n    properties:\n      type: public\n      subnetId: ${fooSubnet.id}\n      loadBalancerName: acc-test-clb-public\n      loadBalancerSpec: small_1\n      description: acc-test-demo\n      projectName: default\n      eipBillingConfig:\n        isp: BGP\n        eipBillingType: PostPaidByBandwidth\n        bandwidth: 1\n      tags:\n        - key: k1\n          value: v1\n  privateClb:\n    type: volcengine:clb:Clb\n    properties:\n      type: private\n      subnetId: ${fooSubnet.id}\n      loadBalancerName: acc-test-clb-private\n      loadBalancerSpec: small_1\n      description: acc-test-demo\n      projectName: default\n  eip:\n    type: volcengine:eip:Address\n    properties:\n      billingType: PostPaidByBandwidth\n      bandwidth: 1\n      isp: BGP\n      description: tf-test\n      projectName: default\n  associate:\n    type: volcengine:eip:Associate\n    properties:\n      allocationId: ${eip.id}\n      instanceId: ${privateClb.id}\n      instanceType: ClbInstance\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCLB can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:clb/clb:Clb default clb-273y2ok6ets007fap8txvf6us\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the CLB.\n"
                },
                "eipAddress": {
                    "type": "string",
                    "description": "The Eip address of the Clb.\n"
                },
                "eipBillingConfig": {
                    "$ref": "#/types/volcengine:clb/ClbEipBillingConfig:ClbEipBillingConfig",
                    "description": "The billing configuration of the EIP which automatically associated to CLB. This field is valid when the type of CLB is `public`.When the type of the CLB is `private`, suggest using a combination of resource `volcengine.eip.Address` and `volcengine.eip.Associate` to achieve public network access function.\n"
                },
                "eipId": {
                    "type": "string",
                    "description": "The Eip ID of the Clb.\n"
                },
                "eniAddress": {
                    "type": "string",
                    "description": "The eni address of the CLB.\n"
                },
                "loadBalancerBillingType": {
                    "type": "string",
                    "description": "The billing type of the CLB, the value can be `PostPaid` or `PrePaid`.\n"
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The name of the CLB.\n"
                },
                "loadBalancerSpec": {
                    "type": "string",
                    "description": "The specification of the CLB, the value can be `small_1`, `small_2`, `medium_1`, `medium_2`, `large_1`, `large_2`.\n"
                },
                "masterZoneId": {
                    "type": "string",
                    "description": "The master zone ID of the CLB.\n"
                },
                "modificationProtectionReason": {
                    "type": "string",
                    "description": "The reason of the console modification protection.\n"
                },
                "modificationProtectionStatus": {
                    "type": "string",
                    "description": "The status of the console modification protection, the value can be `NonProtection` or `ConsoleProtection`.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the CLB.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The region of the request.\n"
                },
                "renewType": {
                    "type": "string",
                    "description": "The renew type of the CLB. When the value of the load_balancer_billing_type is `PrePaid`, the query returns this field.\n"
                },
                "slaveZoneId": {
                    "type": "string",
                    "description": "The slave zone ID of the CLB.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the Subnet.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:clb/ClbTag:ClbTag"
                    },
                    "description": "Tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the CLB. And optional choice contains `public` or `private`.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n"
                }
            },
            "required": [
                "eipAddress",
                "eipBillingConfig",
                "eipId",
                "eniAddress",
                "loadBalancerBillingType",
                "loadBalancerName",
                "loadBalancerSpec",
                "masterZoneId",
                "regionId",
                "renewType",
                "slaveZoneId",
                "subnetId",
                "type",
                "vpcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the CLB.\n"
                },
                "eipBillingConfig": {
                    "$ref": "#/types/volcengine:clb/ClbEipBillingConfig:ClbEipBillingConfig",
                    "description": "The billing configuration of the EIP which automatically associated to CLB. This field is valid when the type of CLB is `public`.When the type of the CLB is `private`, suggest using a combination of resource `volcengine.eip.Address` and `volcengine.eip.Associate` to achieve public network access function.\n",
                    "willReplaceOnChanges": true
                },
                "eniAddress": {
                    "type": "string",
                    "description": "The eni address of the CLB.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerBillingType": {
                    "type": "string",
                    "description": "The billing type of the CLB, the value can be `PostPaid` or `PrePaid`.\n"
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The name of the CLB.\n"
                },
                "loadBalancerSpec": {
                    "type": "string",
                    "description": "The specification of the CLB, the value can be `small_1`, `small_2`, `medium_1`, `medium_2`, `large_1`, `large_2`.\n"
                },
                "masterZoneId": {
                    "type": "string",
                    "description": "The master zone ID of the CLB.\n"
                },
                "modificationProtectionReason": {
                    "type": "string",
                    "description": "The reason of the console modification protection.\n"
                },
                "modificationProtectionStatus": {
                    "type": "string",
                    "description": "The status of the console modification protection, the value can be `NonProtection` or `ConsoleProtection`.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the CLB.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The region of the request.\n",
                    "willReplaceOnChanges": true
                },
                "slaveZoneId": {
                    "type": "string",
                    "description": "The slave zone ID of the CLB.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the Subnet.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:clb/ClbTag:ClbTag"
                    },
                    "description": "Tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the CLB. And optional choice contains `public` or `private`.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "loadBalancerSpec",
                "subnetId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Clb resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the CLB.\n"
                    },
                    "eipAddress": {
                        "type": "string",
                        "description": "The Eip address of the Clb.\n"
                    },
                    "eipBillingConfig": {
                        "$ref": "#/types/volcengine:clb/ClbEipBillingConfig:ClbEipBillingConfig",
                        "description": "The billing configuration of the EIP which automatically associated to CLB. This field is valid when the type of CLB is `public`.When the type of the CLB is `private`, suggest using a combination of resource `volcengine.eip.Address` and `volcengine.eip.Associate` to achieve public network access function.\n",
                        "willReplaceOnChanges": true
                    },
                    "eipId": {
                        "type": "string",
                        "description": "The Eip ID of the Clb.\n"
                    },
                    "eniAddress": {
                        "type": "string",
                        "description": "The eni address of the CLB.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerBillingType": {
                        "type": "string",
                        "description": "The billing type of the CLB, the value can be `PostPaid` or `PrePaid`.\n"
                    },
                    "loadBalancerName": {
                        "type": "string",
                        "description": "The name of the CLB.\n"
                    },
                    "loadBalancerSpec": {
                        "type": "string",
                        "description": "The specification of the CLB, the value can be `small_1`, `small_2`, `medium_1`, `medium_2`, `large_1`, `large_2`.\n"
                    },
                    "masterZoneId": {
                        "type": "string",
                        "description": "The master zone ID of the CLB.\n"
                    },
                    "modificationProtectionReason": {
                        "type": "string",
                        "description": "The reason of the console modification protection.\n"
                    },
                    "modificationProtectionStatus": {
                        "type": "string",
                        "description": "The status of the console modification protection, the value can be `NonProtection` or `ConsoleProtection`.\n"
                    },
                    "period": {
                        "type": "integer",
                        "description": "The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the CLB.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The region of the request.\n",
                        "willReplaceOnChanges": true
                    },
                    "renewType": {
                        "type": "string",
                        "description": "The renew type of the CLB. When the value of the load_balancer_billing_type is `PrePaid`, the query returns this field.\n"
                    },
                    "slaveZoneId": {
                        "type": "string",
                        "description": "The slave zone ID of the CLB.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the Subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/ClbTag:ClbTag"
                        },
                        "description": "Tags.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the CLB. And optional choice contains `public` or `private`.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:clb/listener:Listener": {
            "description": "Provides a resource to manage listener\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooClb = new volcengine.clb.Clb(\"fooClb\", {\n    type: \"public\",\n    subnetId: fooSubnet.id,\n    loadBalancerSpec: \"small_1\",\n    description: \"acc0Demo\",\n    loadBalancerName: \"acc-test-create\",\n    eipBillingConfig: {\n        isp: \"BGP\",\n        eipBillingType: \"PostPaidByBandwidth\",\n        bandwidth: 1,\n    },\n});\nconst fooServerGroup = new volcengine.clb.ServerGroup(\"fooServerGroup\", {\n    loadBalancerId: fooClb.id,\n    serverGroupName: \"acc-test-create\",\n    description: \"hello demo11\",\n});\nconst fooListener = new volcengine.clb.Listener(\"fooListener\", {\n    loadBalancerId: fooClb.id,\n    listenerName: \"acc-test-listener\",\n    protocol: \"HTTP\",\n    port: 90,\n    serverGroupId: fooServerGroup.id,\n    healthCheck: {\n        enabled: \"on\",\n        interval: 10,\n        timeout: 3,\n        healthyThreshold: 5,\n        unHealthyThreshold: 2,\n        domain: \"volcengine.com\",\n        httpCode: \"http_2xx\",\n        method: \"GET\",\n        uri: \"/\",\n    },\n    enabled: \"on\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_clb = volcengine.clb.Clb(\"fooClb\",\n    type=\"public\",\n    subnet_id=foo_subnet.id,\n    load_balancer_spec=\"small_1\",\n    description=\"acc0Demo\",\n    load_balancer_name=\"acc-test-create\",\n    eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n        isp=\"BGP\",\n        eip_billing_type=\"PostPaidByBandwidth\",\n        bandwidth=1,\n    ))\nfoo_server_group = volcengine.clb.ServerGroup(\"fooServerGroup\",\n    load_balancer_id=foo_clb.id,\n    server_group_name=\"acc-test-create\",\n    description=\"hello demo11\")\nfoo_listener = volcengine.clb.Listener(\"fooListener\",\n    load_balancer_id=foo_clb.id,\n    listener_name=\"acc-test-listener\",\n    protocol=\"HTTP\",\n    port=90,\n    server_group_id=foo_server_group.id,\n    health_check=volcengine.clb.ListenerHealthCheckArgs(\n        enabled=\"on\",\n        interval=10,\n        timeout=3,\n        healthy_threshold=5,\n        un_healthy_threshold=2,\n        domain=\"volcengine.com\",\n        http_code=\"http_2xx\",\n        method=\"GET\",\n        uri=\"/\",\n    ),\n    enabled=\"on\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooClb = new Volcengine.Clb.Clb(\"fooClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"public\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc0Demo\",\n            LoadBalancerName = \"acc-test-create\",\n            EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n            {\n                Isp = \"BGP\",\n                EipBillingType = \"PostPaidByBandwidth\",\n                Bandwidth = 1,\n            },\n        });\n        var fooServerGroup = new Volcengine.Clb.ServerGroup(\"fooServerGroup\", new Volcengine.Clb.ServerGroupArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ServerGroupName = \"acc-test-create\",\n            Description = \"hello demo11\",\n        });\n        var fooListener = new Volcengine.Clb.Listener(\"fooListener\", new Volcengine.Clb.ListenerArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ListenerName = \"acc-test-listener\",\n            Protocol = \"HTTP\",\n            Port = 90,\n            ServerGroupId = fooServerGroup.Id,\n            HealthCheck = new Volcengine.Clb.Inputs.ListenerHealthCheckArgs\n            {\n                Enabled = \"on\",\n                Interval = 10,\n                Timeout = 3,\n                HealthyThreshold = 5,\n                UnHealthyThreshold = 2,\n                Domain = \"volcengine.com\",\n                HttpCode = \"http_2xx\",\n                Method = \"GET\",\n                Uri = \"/\",\n            },\n            Enabled = \"on\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooClb, err := clb.NewClb(ctx, \"fooClb\", \u0026clb.ClbArgs{\n\t\t\tType:             pulumi.String(\"public\"),\n\t\t\tSubnetId:         fooSubnet.ID(),\n\t\t\tLoadBalancerSpec: pulumi.String(\"small_1\"),\n\t\t\tDescription:      pulumi.String(\"acc0Demo\"),\n\t\t\tLoadBalancerName: pulumi.String(\"acc-test-create\"),\n\t\t\tEipBillingConfig: \u0026clb.ClbEipBillingConfigArgs{\n\t\t\t\tIsp:            pulumi.String(\"BGP\"),\n\t\t\t\tEipBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\tBandwidth:      pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooServerGroup, err := clb.NewServerGroup(ctx, \"fooServerGroup\", \u0026clb.ServerGroupArgs{\n\t\t\tLoadBalancerId:  fooClb.ID(),\n\t\t\tServerGroupName: pulumi.String(\"acc-test-create\"),\n\t\t\tDescription:     pulumi.String(\"hello demo11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = clb.NewListener(ctx, \"fooListener\", \u0026clb.ListenerArgs{\n\t\t\tLoadBalancerId: fooClb.ID(),\n\t\t\tListenerName:   pulumi.String(\"acc-test-listener\"),\n\t\t\tProtocol:       pulumi.String(\"HTTP\"),\n\t\t\tPort:           pulumi.Int(90),\n\t\t\tServerGroupId:  fooServerGroup.ID(),\n\t\t\tHealthCheck: \u0026clb.ListenerHealthCheckArgs{\n\t\t\t\tEnabled:            pulumi.String(\"on\"),\n\t\t\t\tInterval:           pulumi.Int(10),\n\t\t\t\tTimeout:            pulumi.Int(3),\n\t\t\t\tHealthyThreshold:   pulumi.Int(5),\n\t\t\t\tUnHealthyThreshold: pulumi.Int(2),\n\t\t\t\tDomain:             pulumi.String(\"volcengine.com\"),\n\t\t\t\tHttpCode:           pulumi.String(\"http_2xx\"),\n\t\t\t\tMethod:             pulumi.String(\"GET\"),\n\t\t\t\tUri:                pulumi.String(\"/\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.String(\"on\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooClb = new Clb(\"fooClb\", ClbArgs.builder()        \n            .type(\"public\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc0Demo\")\n            .loadBalancerName(\"acc-test-create\")\n            .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                .isp(\"BGP\")\n                .eipBillingType(\"PostPaidByBandwidth\")\n                .bandwidth(1)\n                .build())\n            .build());\n\n        var fooServerGroup = new ServerGroup(\"fooServerGroup\", ServerGroupArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .serverGroupName(\"acc-test-create\")\n            .description(\"hello demo11\")\n            .build());\n\n        var fooListener = new Listener(\"fooListener\", ListenerArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .listenerName(\"acc-test-listener\")\n            .protocol(\"HTTP\")\n            .port(90)\n            .serverGroupId(fooServerGroup.id())\n            .healthCheck(ListenerHealthCheckArgs.builder()\n                .enabled(\"on\")\n                .interval(10)\n                .timeout(3)\n                .healthyThreshold(5)\n                .unHealthyThreshold(2)\n                .domain(\"volcengine.com\")\n                .httpCode(\"http_2xx\")\n                .method(\"GET\")\n                .uri(\"/\")\n                .build())\n            .enabled(\"on\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooClb:\n    type: volcengine:clb:Clb\n    properties:\n      type: public\n      subnetId: ${fooSubnet.id}\n      loadBalancerSpec: small_1\n      description: acc0Demo\n      loadBalancerName: acc-test-create\n      eipBillingConfig:\n        isp: BGP\n        eipBillingType: PostPaidByBandwidth\n        bandwidth: 1\n  fooServerGroup:\n    type: volcengine:clb:ServerGroup\n    properties:\n      loadBalancerId: ${fooClb.id}\n      serverGroupName: acc-test-create\n      description: hello demo11\n  fooListener:\n    type: volcengine:clb:Listener\n    properties:\n      loadBalancerId: ${fooClb.id}\n      listenerName: acc-test-listener\n      protocol: HTTP\n      port: 90\n      serverGroupId: ${fooServerGroup.id}\n      healthCheck:\n        enabled: on\n        interval: 10\n        timeout: 3\n        healthyThreshold: 5\n        unHealthyThreshold: 2\n        domain: volcengine.com\n        httpCode: http_2xx\n        method: GET\n        uri: /\n      enabled: on\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nListener can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:clb/listener:Listener default lsn-273yv0mhs5xj47fap8sehiiso\n```\n\n ",
            "properties": {
                "aclIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The id list of the Acl.\n"
                },
                "aclStatus": {
                    "type": "string",
                    "description": "The enable status of Acl. Optional choice contains `on`, `off`.\n"
                },
                "aclType": {
                    "type": "string",
                    "description": "The type of the Acl. Optional choice contains `white`, `black`.\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "The certificate id associated with the listener.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Listener.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "The enable status of the Listener. Optional choice contains `on`, `off`.\n"
                },
                "establishedTimeout": {
                    "type": "integer",
                    "description": "The connection timeout of the Listener.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/volcengine:clb/ListenerHealthCheck:ListenerHealthCheck",
                    "description": "The config of health check.\n"
                },
                "listenerId": {
                    "type": "string",
                    "description": "The ID of the Listener.\n"
                },
                "listenerName": {
                    "type": "string",
                    "description": "The name of the Listener.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The region of the request.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request of the Listener, the value range in 1~65535.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the Listener. Optional choice contains `TCP`, `UDP`, `HTTP`, `HTTPS`.\n"
                },
                "scheduler": {
                    "type": "string",
                    "description": "The scheduling algorithm of the Listener. Optional choice contains `wrr`, `wlc`, `sh`.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The server group id associated with the listener.\n"
                }
            },
            "required": [
                "aclStatus",
                "aclType",
                "enabled",
                "establishedTimeout",
                "healthCheck",
                "listenerId",
                "listenerName",
                "loadBalancerId",
                "port",
                "protocol",
                "scheduler",
                "serverGroupId"
            ],
            "inputProperties": {
                "aclIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The id list of the Acl.\n"
                },
                "aclStatus": {
                    "type": "string",
                    "description": "The enable status of Acl. Optional choice contains `on`, `off`.\n"
                },
                "aclType": {
                    "type": "string",
                    "description": "The type of the Acl. Optional choice contains `white`, `black`.\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "The certificate id associated with the listener.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Listener.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "The enable status of the Listener. Optional choice contains `on`, `off`.\n"
                },
                "establishedTimeout": {
                    "type": "integer",
                    "description": "The connection timeout of the Listener.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/volcengine:clb/ListenerHealthCheck:ListenerHealthCheck",
                    "description": "The config of health check.\n"
                },
                "listenerName": {
                    "type": "string",
                    "description": "The name of the Listener.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The region of the request.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request of the Listener, the value range in 1~65535.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the Listener. Optional choice contains `TCP`, `UDP`, `HTTP`, `HTTPS`.\n",
                    "willReplaceOnChanges": true
                },
                "scheduler": {
                    "type": "string",
                    "description": "The scheduling algorithm of the Listener. Optional choice contains `wrr`, `wlc`, `sh`.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The server group id associated with the listener.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId",
                "port",
                "protocol",
                "serverGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Listener resources.\n",
                "properties": {
                    "aclIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The id list of the Acl.\n"
                    },
                    "aclStatus": {
                        "type": "string",
                        "description": "The enable status of Acl. Optional choice contains `on`, `off`.\n"
                    },
                    "aclType": {
                        "type": "string",
                        "description": "The type of the Acl. Optional choice contains `white`, `black`.\n"
                    },
                    "certificateId": {
                        "type": "string",
                        "description": "The certificate id associated with the listener.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Listener.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "The enable status of the Listener. Optional choice contains `on`, `off`.\n"
                    },
                    "establishedTimeout": {
                        "type": "integer",
                        "description": "The connection timeout of the Listener.\n"
                    },
                    "healthCheck": {
                        "$ref": "#/types/volcengine:clb/ListenerHealthCheck:ListenerHealthCheck",
                        "description": "The config of health check.\n"
                    },
                    "listenerId": {
                        "type": "string",
                        "description": "The ID of the Listener.\n"
                    },
                    "listenerName": {
                        "type": "string",
                        "description": "The name of the Listener.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The region of the request.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port receiving request of the Listener, the value range in 1~65535.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol of the Listener. Optional choice contains `TCP`, `UDP`, `HTTP`, `HTTPS`.\n",
                        "willReplaceOnChanges": true
                    },
                    "scheduler": {
                        "type": "string",
                        "description": "The scheduling algorithm of the Listener. Optional choice contains `wrr`, `wlc`, `sh`.\n"
                    },
                    "serverGroupId": {
                        "type": "string",
                        "description": "The server group id associated with the listener.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:clb/rule:Rule": {
            "description": "Provides a resource to manage clb rule\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooClb = new volcengine.clb.Clb(\"fooClb\", {\n    type: \"public\",\n    subnetId: fooSubnet.id,\n    loadBalancerSpec: \"small_1\",\n    description: \"acc0Demo\",\n    loadBalancerName: \"acc-test-create\",\n    eipBillingConfig: {\n        isp: \"BGP\",\n        eipBillingType: \"PostPaidByBandwidth\",\n        bandwidth: 1,\n    },\n});\nconst fooServerGroup = new volcengine.clb.ServerGroup(\"fooServerGroup\", {\n    loadBalancerId: fooClb.id,\n    serverGroupName: \"acc-test-create\",\n    description: \"hello demo11\",\n});\nconst fooListener = new volcengine.clb.Listener(\"fooListener\", {\n    loadBalancerId: fooClb.id,\n    listenerName: \"acc-test-listener\",\n    protocol: \"HTTP\",\n    port: 90,\n    serverGroupId: fooServerGroup.id,\n    healthCheck: {\n        enabled: \"on\",\n        interval: 10,\n        timeout: 3,\n        healthyThreshold: 5,\n        unHealthyThreshold: 2,\n        domain: \"volcengine.com\",\n        httpCode: \"http_2xx\",\n        method: \"GET\",\n        uri: \"/\",\n    },\n    enabled: \"on\",\n});\nconst fooRule = new volcengine.clb.Rule(\"fooRule\", {\n    listenerId: fooListener.id,\n    serverGroupId: fooServerGroup.id,\n    domain: \"test-volc123.com\",\n    url: \"/tftest\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_clb = volcengine.clb.Clb(\"fooClb\",\n    type=\"public\",\n    subnet_id=foo_subnet.id,\n    load_balancer_spec=\"small_1\",\n    description=\"acc0Demo\",\n    load_balancer_name=\"acc-test-create\",\n    eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n        isp=\"BGP\",\n        eip_billing_type=\"PostPaidByBandwidth\",\n        bandwidth=1,\n    ))\nfoo_server_group = volcengine.clb.ServerGroup(\"fooServerGroup\",\n    load_balancer_id=foo_clb.id,\n    server_group_name=\"acc-test-create\",\n    description=\"hello demo11\")\nfoo_listener = volcengine.clb.Listener(\"fooListener\",\n    load_balancer_id=foo_clb.id,\n    listener_name=\"acc-test-listener\",\n    protocol=\"HTTP\",\n    port=90,\n    server_group_id=foo_server_group.id,\n    health_check=volcengine.clb.ListenerHealthCheckArgs(\n        enabled=\"on\",\n        interval=10,\n        timeout=3,\n        healthy_threshold=5,\n        un_healthy_threshold=2,\n        domain=\"volcengine.com\",\n        http_code=\"http_2xx\",\n        method=\"GET\",\n        uri=\"/\",\n    ),\n    enabled=\"on\")\nfoo_rule = volcengine.clb.Rule(\"fooRule\",\n    listener_id=foo_listener.id,\n    server_group_id=foo_server_group.id,\n    domain=\"test-volc123.com\",\n    url=\"/tftest\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooClb = new Volcengine.Clb.Clb(\"fooClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"public\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc0Demo\",\n            LoadBalancerName = \"acc-test-create\",\n            EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n            {\n                Isp = \"BGP\",\n                EipBillingType = \"PostPaidByBandwidth\",\n                Bandwidth = 1,\n            },\n        });\n        var fooServerGroup = new Volcengine.Clb.ServerGroup(\"fooServerGroup\", new Volcengine.Clb.ServerGroupArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ServerGroupName = \"acc-test-create\",\n            Description = \"hello demo11\",\n        });\n        var fooListener = new Volcengine.Clb.Listener(\"fooListener\", new Volcengine.Clb.ListenerArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ListenerName = \"acc-test-listener\",\n            Protocol = \"HTTP\",\n            Port = 90,\n            ServerGroupId = fooServerGroup.Id,\n            HealthCheck = new Volcengine.Clb.Inputs.ListenerHealthCheckArgs\n            {\n                Enabled = \"on\",\n                Interval = 10,\n                Timeout = 3,\n                HealthyThreshold = 5,\n                UnHealthyThreshold = 2,\n                Domain = \"volcengine.com\",\n                HttpCode = \"http_2xx\",\n                Method = \"GET\",\n                Uri = \"/\",\n            },\n            Enabled = \"on\",\n        });\n        var fooRule = new Volcengine.Clb.Rule(\"fooRule\", new Volcengine.Clb.RuleArgs\n        {\n            ListenerId = fooListener.Id,\n            ServerGroupId = fooServerGroup.Id,\n            Domain = \"test-volc123.com\",\n            Url = \"/tftest\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooClb, err := clb.NewClb(ctx, \"fooClb\", \u0026clb.ClbArgs{\n\t\t\tType:             pulumi.String(\"public\"),\n\t\t\tSubnetId:         fooSubnet.ID(),\n\t\t\tLoadBalancerSpec: pulumi.String(\"small_1\"),\n\t\t\tDescription:      pulumi.String(\"acc0Demo\"),\n\t\t\tLoadBalancerName: pulumi.String(\"acc-test-create\"),\n\t\t\tEipBillingConfig: \u0026clb.ClbEipBillingConfigArgs{\n\t\t\t\tIsp:            pulumi.String(\"BGP\"),\n\t\t\t\tEipBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\tBandwidth:      pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooServerGroup, err := clb.NewServerGroup(ctx, \"fooServerGroup\", \u0026clb.ServerGroupArgs{\n\t\t\tLoadBalancerId:  fooClb.ID(),\n\t\t\tServerGroupName: pulumi.String(\"acc-test-create\"),\n\t\t\tDescription:     pulumi.String(\"hello demo11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooListener, err := clb.NewListener(ctx, \"fooListener\", \u0026clb.ListenerArgs{\n\t\t\tLoadBalancerId: fooClb.ID(),\n\t\t\tListenerName:   pulumi.String(\"acc-test-listener\"),\n\t\t\tProtocol:       pulumi.String(\"HTTP\"),\n\t\t\tPort:           pulumi.Int(90),\n\t\t\tServerGroupId:  fooServerGroup.ID(),\n\t\t\tHealthCheck: \u0026clb.ListenerHealthCheckArgs{\n\t\t\t\tEnabled:            pulumi.String(\"on\"),\n\t\t\t\tInterval:           pulumi.Int(10),\n\t\t\t\tTimeout:            pulumi.Int(3),\n\t\t\t\tHealthyThreshold:   pulumi.Int(5),\n\t\t\t\tUnHealthyThreshold: pulumi.Int(2),\n\t\t\t\tDomain:             pulumi.String(\"volcengine.com\"),\n\t\t\t\tHttpCode:           pulumi.String(\"http_2xx\"),\n\t\t\t\tMethod:             pulumi.String(\"GET\"),\n\t\t\t\tUri:                pulumi.String(\"/\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.String(\"on\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = clb.NewRule(ctx, \"fooRule\", \u0026clb.RuleArgs{\n\t\t\tListenerId:    fooListener.ID(),\n\t\t\tServerGroupId: fooServerGroup.ID(),\n\t\t\tDomain:        pulumi.String(\"test-volc123.com\"),\n\t\t\tUrl:           pulumi.String(\"/tftest\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooClb = new Clb(\"fooClb\", ClbArgs.builder()        \n            .type(\"public\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc0Demo\")\n            .loadBalancerName(\"acc-test-create\")\n            .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                .isp(\"BGP\")\n                .eipBillingType(\"PostPaidByBandwidth\")\n                .bandwidth(1)\n                .build())\n            .build());\n\n        var fooServerGroup = new ServerGroup(\"fooServerGroup\", ServerGroupArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .serverGroupName(\"acc-test-create\")\n            .description(\"hello demo11\")\n            .build());\n\n        var fooListener = new Listener(\"fooListener\", ListenerArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .listenerName(\"acc-test-listener\")\n            .protocol(\"HTTP\")\n            .port(90)\n            .serverGroupId(fooServerGroup.id())\n            .healthCheck(ListenerHealthCheckArgs.builder()\n                .enabled(\"on\")\n                .interval(10)\n                .timeout(3)\n                .healthyThreshold(5)\n                .unHealthyThreshold(2)\n                .domain(\"volcengine.com\")\n                .httpCode(\"http_2xx\")\n                .method(\"GET\")\n                .uri(\"/\")\n                .build())\n            .enabled(\"on\")\n            .build());\n\n        var fooRule = new Rule(\"fooRule\", RuleArgs.builder()        \n            .listenerId(fooListener.id())\n            .serverGroupId(fooServerGroup.id())\n            .domain(\"test-volc123.com\")\n            .url(\"/tftest\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooClb:\n    type: volcengine:clb:Clb\n    properties:\n      type: public\n      subnetId: ${fooSubnet.id}\n      loadBalancerSpec: small_1\n      description: acc0Demo\n      loadBalancerName: acc-test-create\n      eipBillingConfig:\n        isp: BGP\n        eipBillingType: PostPaidByBandwidth\n        bandwidth: 1\n  fooServerGroup:\n    type: volcengine:clb:ServerGroup\n    properties:\n      loadBalancerId: ${fooClb.id}\n      serverGroupName: acc-test-create\n      description: hello demo11\n  fooListener:\n    type: volcengine:clb:Listener\n    properties:\n      loadBalancerId: ${fooClb.id}\n      listenerName: acc-test-listener\n      protocol: HTTP\n      port: 90\n      serverGroupId: ${fooServerGroup.id}\n      healthCheck:\n        enabled: on\n        interval: 10\n        timeout: 3\n        healthyThreshold: 5\n        unHealthyThreshold: 2\n        domain: volcengine.com\n        httpCode: http_2xx\n        method: GET\n        uri: /\n      enabled: on\n  fooRule:\n    type: volcengine:clb:Rule\n    properties:\n      listenerId: ${fooListener.id}\n      serverGroupId: ${fooServerGroup.id}\n      domain: test-volc123.com\n      url: /tftest\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRule can be imported using the id, e.g. NoticeresourceId is ruleId, due to the lack of describeRuleAttributes in openapi, for import resources, please use ruleId:listenerId to import. we will fix this problem later.\n\n```sh\n $ pulumi import volcengine:clb/rule:Rule foo rule-273zb9hzi1gqo7fap8u1k3utb:lsn-273ywvnmiu70g7fap8u2xzg9d\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Rule.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of Rule.\n"
                },
                "listenerId": {
                    "type": "string",
                    "description": "The ID of listener.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "Server Group Id.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Url of Rule.\n"
                }
            },
            "required": [
                "listenerId",
                "serverGroupId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Rule.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of Rule.\n",
                    "willReplaceOnChanges": true
                },
                "listenerId": {
                    "type": "string",
                    "description": "The ID of listener.\n",
                    "willReplaceOnChanges": true
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "Server Group Id.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Url of Rule.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "listenerId",
                "serverGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Rule.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of Rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "listenerId": {
                        "type": "string",
                        "description": "The ID of listener.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverGroupId": {
                        "type": "string",
                        "description": "Server Group Id.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The Url of Rule.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:clb/serverGroup:ServerGroup": {
            "description": "Provides a resource to manage server group\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooClb = new volcengine.clb.Clb(\"fooClb\", {\n    type: \"public\",\n    subnetId: fooSubnet.id,\n    loadBalancerSpec: \"small_1\",\n    description: \"acc0Demo\",\n    loadBalancerName: \"acc-test-create\",\n    eipBillingConfig: {\n        isp: \"BGP\",\n        eipBillingType: \"PostPaidByBandwidth\",\n        bandwidth: 1,\n    },\n});\nconst fooServerGroup = new volcengine.clb.ServerGroup(\"fooServerGroup\", {\n    loadBalancerId: fooClb.id,\n    serverGroupName: \"acc-test-create\",\n    description: \"hello demo11\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_clb = volcengine.clb.Clb(\"fooClb\",\n    type=\"public\",\n    subnet_id=foo_subnet.id,\n    load_balancer_spec=\"small_1\",\n    description=\"acc0Demo\",\n    load_balancer_name=\"acc-test-create\",\n    eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n        isp=\"BGP\",\n        eip_billing_type=\"PostPaidByBandwidth\",\n        bandwidth=1,\n    ))\nfoo_server_group = volcengine.clb.ServerGroup(\"fooServerGroup\",\n    load_balancer_id=foo_clb.id,\n    server_group_name=\"acc-test-create\",\n    description=\"hello demo11\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooClb = new Volcengine.Clb.Clb(\"fooClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"public\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc0Demo\",\n            LoadBalancerName = \"acc-test-create\",\n            EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n            {\n                Isp = \"BGP\",\n                EipBillingType = \"PostPaidByBandwidth\",\n                Bandwidth = 1,\n            },\n        });\n        var fooServerGroup = new Volcengine.Clb.ServerGroup(\"fooServerGroup\", new Volcengine.Clb.ServerGroupArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ServerGroupName = \"acc-test-create\",\n            Description = \"hello demo11\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooClb, err := clb.NewClb(ctx, \"fooClb\", \u0026clb.ClbArgs{\n\t\t\tType:             pulumi.String(\"public\"),\n\t\t\tSubnetId:         fooSubnet.ID(),\n\t\t\tLoadBalancerSpec: pulumi.String(\"small_1\"),\n\t\t\tDescription:      pulumi.String(\"acc0Demo\"),\n\t\t\tLoadBalancerName: pulumi.String(\"acc-test-create\"),\n\t\t\tEipBillingConfig: \u0026clb.ClbEipBillingConfigArgs{\n\t\t\t\tIsp:            pulumi.String(\"BGP\"),\n\t\t\t\tEipBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\tBandwidth:      pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = clb.NewServerGroup(ctx, \"fooServerGroup\", \u0026clb.ServerGroupArgs{\n\t\t\tLoadBalancerId:  fooClb.ID(),\n\t\t\tServerGroupName: pulumi.String(\"acc-test-create\"),\n\t\t\tDescription:     pulumi.String(\"hello demo11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooClb = new Clb(\"fooClb\", ClbArgs.builder()        \n            .type(\"public\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc0Demo\")\n            .loadBalancerName(\"acc-test-create\")\n            .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                .isp(\"BGP\")\n                .eipBillingType(\"PostPaidByBandwidth\")\n                .bandwidth(1)\n                .build())\n            .build());\n\n        var fooServerGroup = new ServerGroup(\"fooServerGroup\", ServerGroupArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .serverGroupName(\"acc-test-create\")\n            .description(\"hello demo11\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooClb:\n    type: volcengine:clb:Clb\n    properties:\n      type: public\n      subnetId: ${fooSubnet.id}\n      loadBalancerSpec: small_1\n      description: acc0Demo\n      loadBalancerName: acc-test-create\n      eipBillingConfig:\n        isp: BGP\n        eipBillingType: PostPaidByBandwidth\n        bandwidth: 1\n  fooServerGroup:\n    type: volcengine:clb:ServerGroup\n    properties:\n      loadBalancerId: ${fooClb.id}\n      serverGroupName: acc-test-create\n      description: hello demo11\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServerGroup can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:clb/serverGroup:ServerGroup default rsp-273yv0kir1vk07fap8tt9jtwg\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of ServerGroup.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of the Clb.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n"
                },
                "serverGroupName": {
                    "type": "string",
                    "description": "The name of the ServerGroup.\n"
                }
            },
            "required": [
                "description",
                "loadBalancerId",
                "serverGroupId",
                "serverGroupName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of ServerGroup.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of the Clb.\n",
                    "willReplaceOnChanges": true
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n"
                },
                "serverGroupName": {
                    "type": "string",
                    "description": "The name of the ServerGroup.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of ServerGroup.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The ID of the Clb.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverGroupId": {
                        "type": "string",
                        "description": "The ID of the ServerGroup.\n"
                    },
                    "serverGroupName": {
                        "type": "string",
                        "description": "The name of the ServerGroup.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:clb/serverGroupServer:ServerGroupServer": {
            "description": "Provides a resource to manage server group server\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooClb = new volcengine.clb.Clb(\"fooClb\", {\n    type: \"public\",\n    subnetId: fooSubnet.id,\n    loadBalancerSpec: \"small_1\",\n    description: \"acc0Demo\",\n    loadBalancerName: \"acc-test-create\",\n    eipBillingConfig: {\n        isp: \"BGP\",\n        eipBillingType: \"PostPaidByBandwidth\",\n        bandwidth: 1,\n    },\n});\nconst fooServerGroup = new volcengine.clb.ServerGroup(\"fooServerGroup\", {\n    loadBalancerId: fooClb.id,\n    serverGroupName: \"acc-test-create\",\n    description: \"hello demo11\",\n});\nconst fooSecurityGroup = new volcengine.vpc.SecurityGroup(\"fooSecurityGroup\", {\n    vpcId: fooVpc.id,\n    securityGroupName: \"acc-test-security-group\",\n});\nconst fooInstance = new volcengine.ecs.Instance(\"fooInstance\", {\n    imageId: \"image-ycjwwciuzy5pkh54xx8f\",\n    instanceType: \"ecs.c3i.large\",\n    instanceName: \"acc-test-ecs-name\",\n    password: \"93f0cb0614Aab12\",\n    instanceChargeType: \"PostPaid\",\n    systemVolumeType: \"ESSD_PL0\",\n    systemVolumeSize: 40,\n    subnetId: fooSubnet.id,\n    securityGroupIds: [fooSecurityGroup.id],\n});\nconst fooServerGroupServer = new volcengine.clb.ServerGroupServer(\"fooServerGroupServer\", {\n    serverGroupId: fooServerGroup.id,\n    instanceId: fooInstance.id,\n    type: \"ecs\",\n    weight: 100,\n    port: 80,\n    description: \"This is a acc test server\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_clb = volcengine.clb.Clb(\"fooClb\",\n    type=\"public\",\n    subnet_id=foo_subnet.id,\n    load_balancer_spec=\"small_1\",\n    description=\"acc0Demo\",\n    load_balancer_name=\"acc-test-create\",\n    eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n        isp=\"BGP\",\n        eip_billing_type=\"PostPaidByBandwidth\",\n        bandwidth=1,\n    ))\nfoo_server_group = volcengine.clb.ServerGroup(\"fooServerGroup\",\n    load_balancer_id=foo_clb.id,\n    server_group_name=\"acc-test-create\",\n    description=\"hello demo11\")\nfoo_security_group = volcengine.vpc.SecurityGroup(\"fooSecurityGroup\",\n    vpc_id=foo_vpc.id,\n    security_group_name=\"acc-test-security-group\")\nfoo_instance = volcengine.ecs.Instance(\"fooInstance\",\n    image_id=\"image-ycjwwciuzy5pkh54xx8f\",\n    instance_type=\"ecs.c3i.large\",\n    instance_name=\"acc-test-ecs-name\",\n    password=\"93f0cb0614Aab12\",\n    instance_charge_type=\"PostPaid\",\n    system_volume_type=\"ESSD_PL0\",\n    system_volume_size=40,\n    subnet_id=foo_subnet.id,\n    security_group_ids=[foo_security_group.id])\nfoo_server_group_server = volcengine.clb.ServerGroupServer(\"fooServerGroupServer\",\n    server_group_id=foo_server_group.id,\n    instance_id=foo_instance.id,\n    type=\"ecs\",\n    weight=100,\n    port=80,\n    description=\"This is a acc test server\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooClb = new Volcengine.Clb.Clb(\"fooClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"public\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc0Demo\",\n            LoadBalancerName = \"acc-test-create\",\n            EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n            {\n                Isp = \"BGP\",\n                EipBillingType = \"PostPaidByBandwidth\",\n                Bandwidth = 1,\n            },\n        });\n        var fooServerGroup = new Volcengine.Clb.ServerGroup(\"fooServerGroup\", new Volcengine.Clb.ServerGroupArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ServerGroupName = \"acc-test-create\",\n            Description = \"hello demo11\",\n        });\n        var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup(\"fooSecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            VpcId = fooVpc.Id,\n            SecurityGroupName = \"acc-test-security-group\",\n        });\n        var fooInstance = new Volcengine.Ecs.Instance(\"fooInstance\", new Volcengine.Ecs.InstanceArgs\n        {\n            ImageId = \"image-ycjwwciuzy5pkh54xx8f\",\n            InstanceType = \"ecs.c3i.large\",\n            InstanceName = \"acc-test-ecs-name\",\n            Password = \"93f0cb0614Aab12\",\n            InstanceChargeType = \"PostPaid\",\n            SystemVolumeType = \"ESSD_PL0\",\n            SystemVolumeSize = 40,\n            SubnetId = fooSubnet.Id,\n            SecurityGroupIds = \n            {\n                fooSecurityGroup.Id,\n            },\n        });\n        var fooServerGroupServer = new Volcengine.Clb.ServerGroupServer(\"fooServerGroupServer\", new Volcengine.Clb.ServerGroupServerArgs\n        {\n            ServerGroupId = fooServerGroup.Id,\n            InstanceId = fooInstance.Id,\n            Type = \"ecs\",\n            Weight = 100,\n            Port = 80,\n            Description = \"This is a acc test server\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooClb, err := clb.NewClb(ctx, \"fooClb\", \u0026clb.ClbArgs{\n\t\t\tType:             pulumi.String(\"public\"),\n\t\t\tSubnetId:         fooSubnet.ID(),\n\t\t\tLoadBalancerSpec: pulumi.String(\"small_1\"),\n\t\t\tDescription:      pulumi.String(\"acc0Demo\"),\n\t\t\tLoadBalancerName: pulumi.String(\"acc-test-create\"),\n\t\t\tEipBillingConfig: \u0026clb.ClbEipBillingConfigArgs{\n\t\t\t\tIsp:            pulumi.String(\"BGP\"),\n\t\t\t\tEipBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\tBandwidth:      pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooServerGroup, err := clb.NewServerGroup(ctx, \"fooServerGroup\", \u0026clb.ServerGroupArgs{\n\t\t\tLoadBalancerId:  fooClb.ID(),\n\t\t\tServerGroupName: pulumi.String(\"acc-test-create\"),\n\t\t\tDescription:     pulumi.String(\"hello demo11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSecurityGroup, err := vpc.NewSecurityGroup(ctx, \"fooSecurityGroup\", \u0026vpc.SecurityGroupArgs{\n\t\t\tVpcId:             fooVpc.ID(),\n\t\t\tSecurityGroupName: pulumi.String(\"acc-test-security-group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooInstance, err := ecs.NewInstance(ctx, \"fooInstance\", \u0026ecs.InstanceArgs{\n\t\t\tImageId:            pulumi.String(\"image-ycjwwciuzy5pkh54xx8f\"),\n\t\t\tInstanceType:       pulumi.String(\"ecs.c3i.large\"),\n\t\t\tInstanceName:       pulumi.String(\"acc-test-ecs-name\"),\n\t\t\tPassword:           pulumi.String(\"93f0cb0614Aab12\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tSystemVolumeType:   pulumi.String(\"ESSD_PL0\"),\n\t\t\tSystemVolumeSize:   pulumi.Int(40),\n\t\t\tSubnetId:           fooSubnet.ID(),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tfooSecurityGroup.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = clb.NewServerGroupServer(ctx, \"fooServerGroupServer\", \u0026clb.ServerGroupServerArgs{\n\t\t\tServerGroupId: fooServerGroup.ID(),\n\t\t\tInstanceId:    fooInstance.ID(),\n\t\t\tType:          pulumi.String(\"ecs\"),\n\t\t\tWeight:        pulumi.Int(100),\n\t\t\tPort:          pulumi.Int(80),\n\t\t\tDescription:   pulumi.String(\"This is a acc test server\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooClb = new Clb(\"fooClb\", ClbArgs.builder()        \n            .type(\"public\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc0Demo\")\n            .loadBalancerName(\"acc-test-create\")\n            .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                .isp(\"BGP\")\n                .eipBillingType(\"PostPaidByBandwidth\")\n                .bandwidth(1)\n                .build())\n            .build());\n\n        var fooServerGroup = new ServerGroup(\"fooServerGroup\", ServerGroupArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .serverGroupName(\"acc-test-create\")\n            .description(\"hello demo11\")\n            .build());\n\n        var fooSecurityGroup = new SecurityGroup(\"fooSecurityGroup\", SecurityGroupArgs.builder()        \n            .vpcId(fooVpc.id())\n            .securityGroupName(\"acc-test-security-group\")\n            .build());\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .imageId(\"image-ycjwwciuzy5pkh54xx8f\")\n            .instanceType(\"ecs.c3i.large\")\n            .instanceName(\"acc-test-ecs-name\")\n            .password(\"93f0cb0614Aab12\")\n            .instanceChargeType(\"PostPaid\")\n            .systemVolumeType(\"ESSD_PL0\")\n            .systemVolumeSize(40)\n            .subnetId(fooSubnet.id())\n            .securityGroupIds(fooSecurityGroup.id())\n            .build());\n\n        var fooServerGroupServer = new ServerGroupServer(\"fooServerGroupServer\", ServerGroupServerArgs.builder()        \n            .serverGroupId(fooServerGroup.id())\n            .instanceId(fooInstance.id())\n            .type(\"ecs\")\n            .weight(100)\n            .port(80)\n            .description(\"This is a acc test server\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooClb:\n    type: volcengine:clb:Clb\n    properties:\n      type: public\n      subnetId: ${fooSubnet.id}\n      loadBalancerSpec: small_1\n      description: acc0Demo\n      loadBalancerName: acc-test-create\n      eipBillingConfig:\n        isp: BGP\n        eipBillingType: PostPaidByBandwidth\n        bandwidth: 1\n  fooServerGroup:\n    type: volcengine:clb:ServerGroup\n    properties:\n      loadBalancerId: ${fooClb.id}\n      serverGroupName: acc-test-create\n      description: hello demo11\n  fooSecurityGroup:\n    type: volcengine:vpc:SecurityGroup\n    properties:\n      vpcId: ${fooVpc.id}\n      securityGroupName: acc-test-security-group\n  fooInstance:\n    type: volcengine:ecs:Instance\n    properties:\n      imageId: image-ycjwwciuzy5pkh54xx8f\n      instanceType: ecs.c3i.large\n      instanceName: acc-test-ecs-name\n      password: 93f0cb0614Aab12\n      instanceChargeType: PostPaid\n      systemVolumeType: ESSD_PL0\n      systemVolumeSize: 40\n      subnetId: ${fooSubnet.id}\n      securityGroupIds:\n        - ${fooSecurityGroup.id}\n  fooServerGroupServer:\n    type: volcengine:clb:ServerGroupServer\n    properties:\n      serverGroupId: ${fooServerGroup.id}\n      instanceId: ${fooInstance.id}\n      type: ecs\n      weight: 100\n      port: 80\n      description: This is a acc test server\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServerGroupServer can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:clb/serverGroupServer:ServerGroupServer default rsp-274xltv2*****8tlv3q3s:rs-3ciynux6i1x4w****rszh49sj\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ecs instance or the network card bound to ecs instance.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The private ip of the instance.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server id of instance in ServerGroup.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of instance. Optional choice contains `ecs`, `eni`.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the instance, range in 0~100.\n"
                }
            },
            "required": [
                "instanceId",
                "ip",
                "port",
                "serverGroupId",
                "serverId",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ecs instance or the network card bound to ecs instance.\n",
                    "willReplaceOnChanges": true
                },
                "ip": {
                    "type": "string",
                    "description": "The private ip of the instance.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of instance. Optional choice contains `ecs`, `eni`.\n",
                    "willReplaceOnChanges": true
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the instance, range in 0~100.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "port",
                "serverGroupId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerGroupServer resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the instance.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of ecs instance or the network card bound to ecs instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "ip": {
                        "type": "string",
                        "description": "The private ip of the instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port receiving request.\n"
                    },
                    "serverGroupId": {
                        "type": "string",
                        "description": "The ID of the ServerGroup.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server id of instance in ServerGroup.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of instance. Optional choice contains `ecs`, `eni`.\n",
                        "willReplaceOnChanges": true
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The weight of the instance, range in 0~100.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cr/endpoint:Endpoint": {
            "description": "Provides a resource to manage cr endpoint\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultEndpoint = new volcengine.cr.Endpoint(\"default\", {\n    enabled: true,\n    registry: \"tf-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.cr.Endpoint(\"default\",\n    enabled=True,\n    registry=\"tf-1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Volcengine.Cr.Endpoint(\"default\", new Volcengine.Cr.EndpointArgs\n        {\n            Enabled = true,\n            Registry = \"tf-1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.NewEndpoint(ctx, \"default\", \u0026cr.EndpointArgs{\n\t\t\tEnabled:  pulumi.Bool(true),\n\t\t\tRegistry: pulumi.String(\"tf-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Endpoint(\"default\", EndpointArgs.builder()        \n            .enabled(true)\n            .registry(\"tf-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:cr:Endpoint\n    properties:\n      enabled: true\n      registry: tf-1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCR endpoints can be imported using the endpoint:registryName, e.g.\n\n```sh\n $ pulumi import volcengine:cr/endpoint:Endpoint default endpoint:cr-basic\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether enable public endpoint.\n"
                },
                "registry": {
                    "type": "string",
                    "description": "The CrRegistry name.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of public endpoint.\n"
                }
            },
            "required": [
                "registry",
                "status"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether enable public endpoint.\n"
                },
                "registry": {
                    "type": "string",
                    "description": "The CrRegistry name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "registry"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Endpoint resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether enable public endpoint.\n"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The CrRegistry name.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of public endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cr/namespace:Namespace": {
            "description": "Provides a resource to manage cr namespace\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cr.Namespace(\"foo\", {\n    registry: \"tf-2\",\n});\nconst foo1 = new volcengine.cr.Namespace(\"foo1\", {\n    registry: \"tf-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.Namespace(\"foo\", registry=\"tf-2\")\nfoo1 = volcengine.cr.Namespace(\"foo1\", registry=\"tf-1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cr.Namespace(\"foo\", new Volcengine.Cr.NamespaceArgs\n        {\n            Registry = \"tf-2\",\n        });\n        var foo1 = new Volcengine.Cr.Namespace(\"foo1\", new Volcengine.Cr.NamespaceArgs\n        {\n            Registry = \"tf-1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.NewNamespace(ctx, \"foo\", \u0026cr.NamespaceArgs{\n\t\t\tRegistry: pulumi.String(\"tf-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cr.NewNamespace(ctx, \"foo1\", \u0026cr.NamespaceArgs{\n\t\t\tRegistry: pulumi.String(\"tf-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Namespace(\"foo\", NamespaceArgs.builder()        \n            .registry(\"tf-2\")\n            .build());\n\n        var foo1 = new Namespace(\"foo1\", NamespaceArgs.builder()        \n            .registry(\"tf-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cr:Namespace\n    properties:\n      registry: tf-2\n  foo1:\n    type: volcengine:cr:Namespace\n    properties:\n      registry: tf-1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCR namespace can be imported using the registry:name, e.g.\n\n```sh\n $ pulumi import volcengine:cr/namespace:Namespace default cr-basic:namespace-1\n```\n\n ",
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time when namespace created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of CrNamespace.\n"
                },
                "registry": {
                    "type": "string",
                    "description": "The registry name.\n"
                }
            },
            "required": [
                "createTime",
                "name",
                "registry"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of CrNamespace.\n",
                    "willReplaceOnChanges": true
                },
                "registry": {
                    "type": "string",
                    "description": "The registry name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "registry"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Namespace resources.\n",
                "properties": {
                    "createTime": {
                        "type": "string",
                        "description": "The time when namespace created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of CrNamespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "registry": {
                        "type": "string",
                        "description": "The registry name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cr/registry:Registry": {
            "description": "Provides a resource to manage cr registry\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cr.Registry(\"foo\", {\n    deleteImmediately: false,\n    password: \"1qaz!QAZ\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.Registry(\"foo\",\n    delete_immediately=False,\n    password=\"1qaz!QAZ\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cr.Registry(\"foo\", new Volcengine.Cr.RegistryArgs\n        {\n            DeleteImmediately = false,\n            Password = \"1qaz!QAZ\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.NewRegistry(ctx, \"foo\", \u0026cr.RegistryArgs{\n\t\t\tDeleteImmediately: pulumi.Bool(false),\n\t\t\tPassword:          pulumi.String(\"1qaz!QAZ\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Registry(\"foo\", RegistryArgs.builder()        \n            .deleteImmediately(false)\n            .password(\"1qaz!QAZ\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cr:Registry\n    properties:\n      deleteImmediately: false\n      password: 1qaz!QAZ\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCR Instance can be imported using the name, e.g.\n\n```sh\n $ pulumi import volcengine:cr/registry:Registry default enterprise-x\n```\n\n ",
            "properties": {
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of registry.\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of registry.\n"
                },
                "deleteImmediately": {
                    "type": "boolean",
                    "description": "Whether delete registry immediately. Only effected in delete action.\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cr/RegistryDomain:RegistryDomain"
                    },
                    "description": "The domain of registry.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of registry.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of registry user.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cr/RegistryStatus:RegistryStatus"
                    },
                    "description": "The status of registry.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of registry.\n"
                },
                "userStatus": {
                    "type": "string",
                    "description": "The status of user.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of cr instance.\n"
                }
            },
            "required": [
                "chargeType",
                "createTime",
                "domains",
                "name",
                "statuses",
                "type",
                "userStatus",
                "username"
            ],
            "inputProperties": {
                "deleteImmediately": {
                    "type": "boolean",
                    "description": "Whether delete registry immediately. Only effected in delete action.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of registry.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The password of registry user.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Registry resources.\n",
                "properties": {
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of registry.\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The creation time of registry.\n"
                    },
                    "deleteImmediately": {
                        "type": "boolean",
                        "description": "Whether delete registry immediately. Only effected in delete action.\n"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/RegistryDomain:RegistryDomain"
                        },
                        "description": "The domain of registry.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of registry.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of registry user.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/RegistryStatus:RegistryStatus"
                        },
                        "description": "The status of registry.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of registry.\n"
                    },
                    "userStatus": {
                        "type": "string",
                        "description": "The status of user.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of cr instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cr/repository:Repository": {
            "description": "Provides a resource to manage cr repository\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cr.Repository(\"foo\", {\n    accessLevel: \"Public\",\n    description: \"A test repository created by terraform.\",\n    namespace: \"namespace-1\",\n    registry: \"tf-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.Repository(\"foo\",\n    access_level=\"Public\",\n    description=\"A test repository created by terraform.\",\n    namespace=\"namespace-1\",\n    registry=\"tf-2\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cr.Repository(\"foo\", new Volcengine.Cr.RepositoryArgs\n        {\n            AccessLevel = \"Public\",\n            Description = \"A test repository created by terraform.\",\n            Namespace = \"namespace-1\",\n            Registry = \"tf-2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.NewRepository(ctx, \"foo\", \u0026cr.RepositoryArgs{\n\t\t\tAccessLevel: pulumi.String(\"Public\"),\n\t\t\tDescription: pulumi.String(\"A test repository created by terraform.\"),\n\t\t\tNamespace:   pulumi.String(\"namespace-1\"),\n\t\t\tRegistry:    pulumi.String(\"tf-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Repository(\"foo\", RepositoryArgs.builder()        \n            .accessLevel(\"Public\")\n            .description(\"A test repository created by terraform.\")\n            .namespace(\"namespace-1\")\n            .registry(\"tf-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cr:Repository\n    properties:\n      accessLevel: Public\n      description: A test repository created by terraform.\n      namespace: namespace-1\n      registry: tf-2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCR Repository can be imported using the registry:namespace:name, e.g.\n\n```sh\n $ pulumi import volcengine:cr/repository:Repository default cr-basic:namespace-1:repo-1\n```\n\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level of CrRepository.\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of repository.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of CrRepository.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of CrRepository.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The target namespace name.\n"
                },
                "registry": {
                    "type": "string",
                    "description": "The CrRegistry name.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The last update time of repository.\n"
                }
            },
            "required": [
                "createTime",
                "name",
                "namespace",
                "registry",
                "updateTime"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The access level of CrRepository.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of CrRepository.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of CrRepository.\n",
                    "willReplaceOnChanges": true
                },
                "namespace": {
                    "type": "string",
                    "description": "The target namespace name.\n",
                    "willReplaceOnChanges": true
                },
                "registry": {
                    "type": "string",
                    "description": "The CrRegistry name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "namespace",
                "registry"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Repository resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "The access level of CrRepository.\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The creation time of repository.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of CrRepository.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of CrRepository.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The target namespace name.\n",
                        "willReplaceOnChanges": true
                    },
                    "registry": {
                        "type": "string",
                        "description": "The CrRegistry name.\n",
                        "willReplaceOnChanges": true
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The last update time of repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cr/state:State": {
            "description": "Provides a resource to manage cr registry state\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cr.State(\"foo\", {\n    action: \"Start\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.State(\"foo\", action=\"Start\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cr.State(\"foo\", new Volcengine.Cr.StateArgs\n        {\n            Action = \"Start\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.NewState(ctx, \"foo\", \u0026cr.StateArgs{\n\t\t\tAction: pulumi.String(\"Start\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new State(\"foo\", StateArgs.builder()        \n            .action(\"Start\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cr:State\n    properties:\n      action: Start\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCR registry state can be imported using the state:registry_name, e.g.\n\n```sh\n $ pulumi import volcengine:cr/state:State default state:cr-basic\n```\n\n ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Start cr instance action,the value must be `Start`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cr instance id.\n"
                },
                "status": {
                    "$ref": "#/types/volcengine:cr/StateStatus:StateStatus",
                    "description": "The status of cr instance.\n"
                }
            },
            "required": [
                "action",
                "name",
                "status"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Start cr instance action,the value must be `Start`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cr instance id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering State resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Start cr instance action,the value must be `Start`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cr instance id.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "$ref": "#/types/volcengine:cr/StateStatus:StateStatus",
                        "description": "The status of cr instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cr/tag:Tag": {
            "description": "Provides a resource to manage cr tag\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\n// Tag cannot be created,please import by command `terraform import volcengine_cr_tag.default registry:namespace:repository:tag`\nconst defaultTag = new volcengine.cr.Tag(\"default\", {\n    namespace: \"langyu\",\n    registry: \"enterprise-1\",\n    repository: \"repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\n# Tag cannot be created,please import by command `terraform import volcengine_cr_tag.default registry:namespace:repository:tag`\ndefault = volcengine.cr.Tag(\"default\",\n    namespace=\"langyu\",\n    registry=\"enterprise-1\",\n    repository=\"repo\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Tag cannot be created,please import by command `terraform import volcengine_cr_tag.default registry:namespace:repository:tag`\n        var @default = new Volcengine.Cr.Tag(\"default\", new Volcengine.Cr.TagArgs\n        {\n            Namespace = \"langyu\",\n            Registry = \"enterprise-1\",\n            Repository = \"repo\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.NewTag(ctx, \"default\", \u0026cr.TagArgs{\n\t\t\tNamespace:  pulumi.String(\"langyu\"),\n\t\t\tRegistry:   pulumi.String(\"enterprise-1\"),\n\t\t\tRepository: pulumi.String(\"repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Tag(\"default\", TagArgs.builder()        \n            .namespace(\"langyu\")\n            .registry(\"enterprise-1\")\n            .repository(\"repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:cr:Tag\n    properties:\n      namespace: langyu\n      registry: enterprise-1\n      repository: repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCR tags can be imported using the registry:namespace:repository:tag, e.g.\n\n```sh\n $ pulumi import volcengine:cr/tag:Tag default cr-basic:namespace-1:repo-1:v1\n```\n\n ",
            "properties": {
                "chartAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cr/TagChartAttribute:TagChartAttribute"
                    },
                    "description": "The chart attribute,valid when tag type is Chart.\n"
                },
                "digest": {
                    "type": "string",
                    "description": "The digest of image.\n"
                },
                "imageAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cr/TagImageAttribute:TagImageAttribute"
                    },
                    "description": "The list of image attributes,valid when tag type is Image.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of OCI product.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The target namespace name.\n"
                },
                "pushTime": {
                    "type": "string",
                    "description": "The last push time of OCI product.\n"
                },
                "registry": {
                    "type": "string",
                    "description": "The CrRegistry name.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of repository.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of OCI product.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of OCI product tag.\n"
                }
            },
            "required": [
                "chartAttributes",
                "digest",
                "imageAttributes",
                "name",
                "namespace",
                "pushTime",
                "registry",
                "repository",
                "size",
                "type"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of OCI product.\n",
                    "willReplaceOnChanges": true
                },
                "namespace": {
                    "type": "string",
                    "description": "The target namespace name.\n",
                    "willReplaceOnChanges": true
                },
                "registry": {
                    "type": "string",
                    "description": "The CrRegistry name.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "The name of repository.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "namespace",
                "registry",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "chartAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/TagChartAttribute:TagChartAttribute"
                        },
                        "description": "The chart attribute,valid when tag type is Chart.\n"
                    },
                    "digest": {
                        "type": "string",
                        "description": "The digest of image.\n"
                    },
                    "imageAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/TagImageAttribute:TagImageAttribute"
                        },
                        "description": "The list of image attributes,valid when tag type is Image.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of OCI product.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The target namespace name.\n",
                        "willReplaceOnChanges": true
                    },
                    "pushTime": {
                        "type": "string",
                        "description": "The last push time of OCI product.\n"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The CrRegistry name.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of OCI product.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of OCI product tag.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:cr/vpcEndpoint:VpcEndpoint": {
            "description": "Provides a resource to manage cr vpc endpoint\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.cr.VpcEndpoint(\"foo\", {\n    registry: \"enterprise-1\",\n    vpcs: [\n        {\n            accountId: 0,\n            vpcId: \"vpc-3resbfzl3xgjk5zsk2iuq3vhk\",\n        },\n        {\n            subnetId: \"subnet-2d62do4697i8058ozfdszxl30\",\n            vpcId: \"vpc-3red9li8dd8g05zsk2iadytvy\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.VpcEndpoint(\"foo\",\n    registry=\"enterprise-1\",\n    vpcs=[\n        volcengine.cr.VpcEndpointVpcArgs(\n            account_id=0,\n            vpc_id=\"vpc-3resbfzl3xgjk5zsk2iuq3vhk\",\n        ),\n        volcengine.cr.VpcEndpointVpcArgs(\n            subnet_id=\"subnet-2d62do4697i8058ozfdszxl30\",\n            vpc_id=\"vpc-3red9li8dd8g05zsk2iadytvy\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Cr.VpcEndpoint(\"foo\", new Volcengine.Cr.VpcEndpointArgs\n        {\n            Registry = \"enterprise-1\",\n            Vpcs = \n            {\n                new Volcengine.Cr.Inputs.VpcEndpointVpcArgs\n                {\n                    AccountId = 0,\n                    VpcId = \"vpc-3resbfzl3xgjk5zsk2iuq3vhk\",\n                },\n                new Volcengine.Cr.Inputs.VpcEndpointVpcArgs\n                {\n                    SubnetId = \"subnet-2d62do4697i8058ozfdszxl30\",\n                    VpcId = \"vpc-3red9li8dd8g05zsk2iadytvy\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.NewVpcEndpoint(ctx, \"foo\", \u0026cr.VpcEndpointArgs{\n\t\t\tRegistry: pulumi.String(\"enterprise-1\"),\n\t\t\tVpcs: cr.VpcEndpointVpcArray{\n\t\t\t\t\u0026cr.VpcEndpointVpcArgs{\n\t\t\t\t\tAccountId: pulumi.Int(0),\n\t\t\t\t\tVpcId:     pulumi.String(\"vpc-3resbfzl3xgjk5zsk2iuq3vhk\"),\n\t\t\t\t},\n\t\t\t\t\u0026cr.VpcEndpointVpcArgs{\n\t\t\t\t\tSubnetId: pulumi.String(\"subnet-2d62do4697i8058ozfdszxl30\"),\n\t\t\t\t\tVpcId:    pulumi.String(\"vpc-3red9li8dd8g05zsk2iadytvy\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new VpcEndpoint(\"foo\", VpcEndpointArgs.builder()        \n            .registry(\"enterprise-1\")\n            .vpcs(            \n                VpcEndpointVpcArgs.builder()\n                    .accountId(0)\n                    .vpcId(\"vpc-3resbfzl3xgjk5zsk2iuq3vhk\")\n                    .build(),\n                VpcEndpointVpcArgs.builder()\n                    .subnetId(\"subnet-2d62do4697i8058ozfdszxl30\")\n                    .vpcId(\"vpc-3red9li8dd8g05zsk2iadytvy\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:cr:VpcEndpoint\n    properties:\n      registry: enterprise-1\n      vpcs:\n        - accountId: 0\n          vpcId: vpc-3resbfzl3xgjk5zsk2iuq3vhk\n        - subnetId: subnet-2d62do4697i8058ozfdszxl30\n          vpcId: vpc-3red9li8dd8g05zsk2iadytvy\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCR Vpc endpoint can be imported using the crVpcEndpoint:registry, e.g.\n\n```sh\n $ pulumi import volcengine:cr/vpcEndpoint:VpcEndpoint default crVpcEndpoint:cr-basic\n```\n\n ",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "The Cr Registry name.\n"
                },
                "vpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cr/VpcEndpointVpc:VpcEndpointVpc"
                    },
                    "description": "List of vpc meta. When apply is executed for the first time, the vpcs in the tf file will be added to the existing vpcs, and subsequent apply will overwrite the existing vpcs with the vpcs in the tf file.\n"
                }
            },
            "required": [
                "registry",
                "vpcs"
            ],
            "inputProperties": {
                "registry": {
                    "type": "string",
                    "description": "The Cr Registry name.\n",
                    "willReplaceOnChanges": true
                },
                "vpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:cr/VpcEndpointVpc:VpcEndpointVpc"
                    },
                    "description": "List of vpc meta. When apply is executed for the first time, the vpcs in the tf file will be added to the existing vpcs, and subsequent apply will overwrite the existing vpcs with the vpcs in the tf file.\n"
                }
            },
            "requiredInputs": [
                "registry",
                "vpcs"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcEndpoint resources.\n",
                "properties": {
                    "registry": {
                        "type": "string",
                        "description": "The Cr Registry name.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/VpcEndpointVpc:VpcEndpointVpc"
                        },
                        "description": "List of vpc meta. When apply is executed for the first time, the vpcs in the tf file will be added to the existing vpcs, and subsequent apply will overwrite the existing vpcs with the vpcs in the tf file.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:ebs/volume:Volume": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst fooVolume = new volcengine.ebs.Volume(\"fooVolume\", {\n    volumeName: \"terraform-test\",\n    zoneId: \"cn-xx-a\",\n    volumeType: \"ESSD_PL0\",\n    kind: \"data\",\n    size: 40,\n    volumeChargeType: \"PostPaid\",\n    projectName: \"default\",\n});\nconst fooVolumeAttach = new volcengine.ebs.VolumeAttach(\"fooVolumeAttach\", {\n    volumeId: fooVolume.id,\n    instanceId: \"i-yc8pfhbafwijutv6s1fv\",\n});\nconst foo2 = new volcengine.ebs.Volume(\"foo2\", {\n    volumeName: \"terraform-test3\",\n    zoneId: \"cn-beijing-b\",\n    volumeType: \"ESSD_PL0\",\n    kind: \"data\",\n    size: 40,\n    volumeChargeType: \"PrePaid\",\n    instanceId: \"i-yc8pfhbafwijutv6s1fv\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_volume = volcengine.ebs.Volume(\"fooVolume\",\n    volume_name=\"terraform-test\",\n    zone_id=\"cn-xx-a\",\n    volume_type=\"ESSD_PL0\",\n    kind=\"data\",\n    size=40,\n    volume_charge_type=\"PostPaid\",\n    project_name=\"default\")\nfoo_volume_attach = volcengine.ebs.VolumeAttach(\"fooVolumeAttach\",\n    volume_id=foo_volume.id,\n    instance_id=\"i-yc8pfhbafwijutv6s1fv\")\nfoo2 = volcengine.ebs.Volume(\"foo2\",\n    volume_name=\"terraform-test3\",\n    zone_id=\"cn-beijing-b\",\n    volume_type=\"ESSD_PL0\",\n    kind=\"data\",\n    size=40,\n    volume_charge_type=\"PrePaid\",\n    instance_id=\"i-yc8pfhbafwijutv6s1fv\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooVolume = new Volcengine.Ebs.Volume(\"fooVolume\", new Volcengine.Ebs.VolumeArgs\n        {\n            VolumeName = \"terraform-test\",\n            ZoneId = \"cn-xx-a\",\n            VolumeType = \"ESSD_PL0\",\n            Kind = \"data\",\n            Size = 40,\n            VolumeChargeType = \"PostPaid\",\n            ProjectName = \"default\",\n        });\n        var fooVolumeAttach = new Volcengine.Ebs.VolumeAttach(\"fooVolumeAttach\", new Volcengine.Ebs.VolumeAttachArgs\n        {\n            VolumeId = fooVolume.Id,\n            InstanceId = \"i-yc8pfhbafwijutv6s1fv\",\n        });\n        var foo2 = new Volcengine.Ebs.Volume(\"foo2\", new Volcengine.Ebs.VolumeArgs\n        {\n            VolumeName = \"terraform-test3\",\n            ZoneId = \"cn-beijing-b\",\n            VolumeType = \"ESSD_PL0\",\n            Kind = \"data\",\n            Size = 40,\n            VolumeChargeType = \"PrePaid\",\n            InstanceId = \"i-yc8pfhbafwijutv6s1fv\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVolume, err := ebs.NewVolume(ctx, \"fooVolume\", \u0026ebs.VolumeArgs{\n\t\t\tVolumeName:       pulumi.String(\"terraform-test\"),\n\t\t\tZoneId:           pulumi.String(\"cn-xx-a\"),\n\t\t\tVolumeType:       pulumi.String(\"ESSD_PL0\"),\n\t\t\tKind:             pulumi.String(\"data\"),\n\t\t\tSize:             pulumi.Int(40),\n\t\t\tVolumeChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tProjectName:      pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ebs.NewVolumeAttach(ctx, \"fooVolumeAttach\", \u0026ebs.VolumeAttachArgs{\n\t\t\tVolumeId:   fooVolume.ID(),\n\t\t\tInstanceId: pulumi.String(\"i-yc8pfhbafwijutv6s1fv\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ebs.NewVolume(ctx, \"foo2\", \u0026ebs.VolumeArgs{\n\t\t\tVolumeName:       pulumi.String(\"terraform-test3\"),\n\t\t\tZoneId:           pulumi.String(\"cn-beijing-b\"),\n\t\t\tVolumeType:       pulumi.String(\"ESSD_PL0\"),\n\t\t\tKind:             pulumi.String(\"data\"),\n\t\t\tSize:             pulumi.Int(40),\n\t\t\tVolumeChargeType: pulumi.String(\"PrePaid\"),\n\t\t\tInstanceId:       pulumi.String(\"i-yc8pfhbafwijutv6s1fv\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVolume = new Volume(\"fooVolume\", VolumeArgs.builder()        \n            .volumeName(\"terraform-test\")\n            .zoneId(\"cn-xx-a\")\n            .volumeType(\"ESSD_PL0\")\n            .kind(\"data\")\n            .size(40)\n            .volumeChargeType(\"PostPaid\")\n            .projectName(\"default\")\n            .build());\n\n        var fooVolumeAttach = new VolumeAttach(\"fooVolumeAttach\", VolumeAttachArgs.builder()        \n            .volumeId(fooVolume.id())\n            .instanceId(\"i-yc8pfhbafwijutv6s1fv\")\n            .build());\n\n        var foo2 = new Volume(\"foo2\", VolumeArgs.builder()        \n            .volumeName(\"terraform-test3\")\n            .zoneId(\"cn-beijing-b\")\n            .volumeType(\"ESSD_PL0\")\n            .kind(\"data\")\n            .size(40)\n            .volumeChargeType(\"PrePaid\")\n            .instanceId(\"i-yc8pfhbafwijutv6s1fv\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVolume:\n    type: volcengine:ebs:Volume\n    properties:\n      volumeName: terraform-test\n      zoneId: cn-xx-a\n      volumeType: ESSD_PL0\n      kind: data\n      size: 40\n      volumeChargeType: PostPaid\n      projectName: default\n  fooVolumeAttach:\n    type: volcengine:ebs:VolumeAttach\n    properties:\n      volumeId: ${fooVolume.id}\n      instanceId: i-yc8pfhbafwijutv6s1fv\n  foo2:\n    type: volcengine:ebs:Volume\n    properties:\n      volumeName: terraform-test3\n      zoneId: cn-beijing-b\n      volumeType: ESSD_PL0\n      kind: data\n      size: 40\n      volumeChargeType: PrePaid\n      instanceId: i-yc8pfhbafwijutv6s1fv\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVolume can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:ebs/volume:Volume default vol-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation time of Volume.\n"
                },
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "Delete Volume with Attached Instance.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Volume.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the system administrator to apply for a whitelist.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of Volume, the value is `data`.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the Volume.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of Volume.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Volume.\n"
                },
                "tradeStatus": {
                    "type": "integer",
                    "description": "Status of Trade.\n"
                },
                "volumeChargeType": {
                    "type": "string",
                    "description": "The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Cannot convert `PrePaid` volume to `PostPaid`.Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "The name of Volume.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the Zone.\n"
                }
            },
            "required": [
                "createdAt",
                "deleteWithInstance",
                "instanceId",
                "kind",
                "size",
                "status",
                "tradeStatus",
                "volumeName",
                "volumeType",
                "zoneId"
            ],
            "inputProperties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "Delete Volume with Attached Instance.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Volume.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the system administrator to apply for a whitelist.\n",
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of Volume, the value is `data`.\n",
                    "willReplaceOnChanges": true
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the Volume.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of Volume.\n"
                },
                "volumeChargeType": {
                    "type": "string",
                    "description": "The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Cannot convert `PrePaid` volume to `PostPaid`.Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "The name of Volume.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.\n",
                    "willReplaceOnChanges": true
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the Zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "kind",
                "size",
                "volumeName",
                "volumeType",
                "zoneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation time of Volume.\n"
                    },
                    "deleteWithInstance": {
                        "type": "boolean",
                        "description": "Delete Volume with Attached Instance.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Volume.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the system administrator to apply for a whitelist.\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of Volume, the value is `data`.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the Volume.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of Volume.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of Volume.\n"
                    },
                    "tradeStatus": {
                        "type": "integer",
                        "description": "Status of Trade.\n"
                    },
                    "volumeChargeType": {
                        "type": "string",
                        "description": "The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Cannot convert `PrePaid` volume to `PostPaid`.Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.\n"
                    },
                    "volumeName": {
                        "type": "string",
                        "description": "The name of Volume.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.\n",
                        "willReplaceOnChanges": true
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The id of the Zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:ebs/volumeAttach:VolumeAttach": {
            "description": "Provides a resource to manage volume attach\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.ebs.VolumeAttach(\"foo\", {\n    instanceId: \"i-4ay59ww7dq8dt9c29hd4\",\n    volumeId: \"vol-3tzl52wubz3b9fciw7ev\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.ebs.VolumeAttach(\"foo\",\n    instance_id=\"i-4ay59ww7dq8dt9c29hd4\",\n    volume_id=\"vol-3tzl52wubz3b9fciw7ev\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Ebs.VolumeAttach(\"foo\", new Volcengine.Ebs.VolumeAttachArgs\n        {\n            InstanceId = \"i-4ay59ww7dq8dt9c29hd4\",\n            VolumeId = \"vol-3tzl52wubz3b9fciw7ev\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ebs.NewVolumeAttach(ctx, \"foo\", \u0026ebs.VolumeAttachArgs{\n\t\t\tInstanceId: pulumi.String(\"i-4ay59ww7dq8dt9c29hd4\"),\n\t\t\tVolumeId:   pulumi.String(\"vol-3tzl52wubz3b9fciw7ev\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new VolumeAttach(\"foo\", VolumeAttachArgs.builder()        \n            .instanceId(\"i-4ay59ww7dq8dt9c29hd4\")\n            .volumeId(\"vol-3tzl52wubz3b9fciw7ev\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:ebs:VolumeAttach\n    properties:\n      instanceId: i-4ay59ww7dq8dt9c29hd4\n      volumeId: vol-3tzl52wubz3b9fciw7ev\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVolumeAttach can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:ebs/volumeAttach:VolumeAttach default vol-abc12345:i-abc12345\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation time of Volume.\n"
                },
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "Delete Volume with Attached Instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The Id of Instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Volume.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Update time of Volume.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The Id of Volume.\n"
                }
            },
            "required": [
                "createdAt",
                "deleteWithInstance",
                "instanceId",
                "status",
                "updatedAt",
                "volumeId"
            ],
            "inputProperties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "Delete Volume with Attached Instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The Id of Instance.\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "string",
                    "description": "The Id of Volume.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VolumeAttach resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation time of Volume.\n"
                    },
                    "deleteWithInstance": {
                        "type": "boolean",
                        "description": "Delete Volume with Attached Instance.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The Id of Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of Volume.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Update time of Volume.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The Id of Volume.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:ecs/deploymentSet:DeploymentSet": {
            "description": "Provides a resource to manage ecs deployment set\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.ecs.DeploymentSet(\"foo\", {\n    deploymentSetName: \"acc-test-ecs-ds\",\n    description: \"acc-test\",\n    granularity: \"switch\",\n    strategy: \"Availability\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.ecs.DeploymentSet(\"foo\",\n    deployment_set_name=\"acc-test-ecs-ds\",\n    description=\"acc-test\",\n    granularity=\"switch\",\n    strategy=\"Availability\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Ecs.DeploymentSet(\"foo\", new Volcengine.Ecs.DeploymentSetArgs\n        {\n            DeploymentSetName = \"acc-test-ecs-ds\",\n            Description = \"acc-test\",\n            Granularity = \"switch\",\n            Strategy = \"Availability\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ecs.NewDeploymentSet(ctx, \"foo\", \u0026ecs.DeploymentSetArgs{\n\t\t\tDeploymentSetName: pulumi.String(\"acc-test-ecs-ds\"),\n\t\t\tDescription:       pulumi.String(\"acc-test\"),\n\t\t\tGranularity:       pulumi.String(\"switch\"),\n\t\t\tStrategy:          pulumi.String(\"Availability\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new DeploymentSet(\"foo\", DeploymentSetArgs.builder()        \n            .deploymentSetName(\"acc-test-ecs-ds\")\n            .description(\"acc-test\")\n            .granularity(\"switch\")\n            .strategy(\"Availability\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:ecs:DeploymentSet\n    properties:\n      deploymentSetName: acc-test-ecs-ds\n      description: acc-test\n      granularity: switch\n      strategy: Availability\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nECS deployment set can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:ecs/deploymentSet:DeploymentSet default i-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "deploymentSetId": {
                    "type": "string",
                    "description": "The ID of ECS DeploymentSet.\n"
                },
                "deploymentSetName": {
                    "type": "string",
                    "description": "The name of ECS DeploymentSet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of ECS DeploymentSet.\n"
                },
                "granularity": {
                    "type": "string",
                    "description": "The granularity of ECS DeploymentSet.Valid values: switch, host, rack,Default is host.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy of ECS DeploymentSet.Valid values: Availability.Default is Availability.\n"
                }
            },
            "required": [
                "deploymentSetId",
                "deploymentSetName"
            ],
            "inputProperties": {
                "deploymentSetName": {
                    "type": "string",
                    "description": "The name of ECS DeploymentSet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of ECS DeploymentSet.\n"
                },
                "granularity": {
                    "type": "string",
                    "description": "The granularity of ECS DeploymentSet.Valid values: switch, host, rack,Default is host.\n",
                    "willReplaceOnChanges": true
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy of ECS DeploymentSet.Valid values: Availability.Default is Availability.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "deploymentSetName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeploymentSet resources.\n",
                "properties": {
                    "deploymentSetId": {
                        "type": "string",
                        "description": "The ID of ECS DeploymentSet.\n"
                    },
                    "deploymentSetName": {
                        "type": "string",
                        "description": "The name of ECS DeploymentSet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of ECS DeploymentSet.\n"
                    },
                    "granularity": {
                        "type": "string",
                        "description": "The granularity of ECS DeploymentSet.Valid values: switch, host, rack,Default is host.\n",
                        "willReplaceOnChanges": true
                    },
                    "strategy": {
                        "type": "string",
                        "description": "The strategy of ECS DeploymentSet.Valid values: Availability.Default is Availability.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:ecs/deploymentSetAssociate:DeploymentSetAssociate": {
            "description": "Provides a resource to manage ecs deployment set associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooSecurityGroup = new volcengine.vpc.SecurityGroup(\"fooSecurityGroup\", {\n    securityGroupName: \"acc-test-security-group\",\n    vpcId: fooVpc.id,\n});\nconst fooImages = volcengine.ecs.Images({\n    osType: \"Linux\",\n    visibility: \"public\",\n    instanceTypeId: \"ecs.g1.large\",\n});\nconst fooInstance = new volcengine.ecs.Instance(\"fooInstance\", {\n    instanceName: \"acc-test-ecs\",\n    imageId: fooImages.then(fooImages =\u003e fooImages.images?[0]?.imageId),\n    instanceType: \"ecs.g1.large\",\n    password: \"93f0cb0614Aab12\",\n    instanceChargeType: \"PostPaid\",\n    systemVolumeType: \"ESSD_PL0\",\n    systemVolumeSize: 40,\n    subnetId: fooSubnet.id,\n    securityGroupIds: [fooSecurityGroup.id],\n});\nconst fooState = new volcengine.ecs.State(\"fooState\", {\n    instanceId: fooInstance.id,\n    action: \"Stop\",\n    stoppedMode: \"KeepCharging\",\n});\nconst fooDeploymentSet = new volcengine.ecs.DeploymentSet(\"fooDeploymentSet\", {\n    deploymentSetName: \"acc-test-ecs-ds\",\n    description: \"acc-test\",\n    granularity: \"switch\",\n    strategy: \"Availability\",\n});\nconst fooDeploymentSetAssociate = new volcengine.ecs.DeploymentSetAssociate(\"fooDeploymentSetAssociate\", {\n    deploymentSetId: fooDeploymentSet.id,\n    instanceId: fooInstance.id,\n}, {\n    dependsOn: [fooState],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_security_group = volcengine.vpc.SecurityGroup(\"fooSecurityGroup\",\n    security_group_name=\"acc-test-security-group\",\n    vpc_id=foo_vpc.id)\nfoo_images = volcengine.ecs.images(os_type=\"Linux\",\n    visibility=\"public\",\n    instance_type_id=\"ecs.g1.large\")\nfoo_instance = volcengine.ecs.Instance(\"fooInstance\",\n    instance_name=\"acc-test-ecs\",\n    image_id=foo_images.images[0].image_id,\n    instance_type=\"ecs.g1.large\",\n    password=\"93f0cb0614Aab12\",\n    instance_charge_type=\"PostPaid\",\n    system_volume_type=\"ESSD_PL0\",\n    system_volume_size=40,\n    subnet_id=foo_subnet.id,\n    security_group_ids=[foo_security_group.id])\nfoo_state = volcengine.ecs.State(\"fooState\",\n    instance_id=foo_instance.id,\n    action=\"Stop\",\n    stopped_mode=\"KeepCharging\")\nfoo_deployment_set = volcengine.ecs.DeploymentSet(\"fooDeploymentSet\",\n    deployment_set_name=\"acc-test-ecs-ds\",\n    description=\"acc-test\",\n    granularity=\"switch\",\n    strategy=\"Availability\")\nfoo_deployment_set_associate = volcengine.ecs.DeploymentSetAssociate(\"fooDeploymentSetAssociate\",\n    deployment_set_id=foo_deployment_set.id,\n    instance_id=foo_instance.id,\n    opts=pulumi.ResourceOptions(depends_on=[foo_state]))\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup(\"fooSecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            SecurityGroupName = \"acc-test-security-group\",\n            VpcId = fooVpc.Id,\n        });\n        var fooImages = Output.Create(Volcengine.Ecs.Images.InvokeAsync(new Volcengine.Ecs.ImagesArgs\n        {\n            OsType = \"Linux\",\n            Visibility = \"public\",\n            InstanceTypeId = \"ecs.g1.large\",\n        }));\n        var fooInstance = new Volcengine.Ecs.Instance(\"fooInstance\", new Volcengine.Ecs.InstanceArgs\n        {\n            InstanceName = \"acc-test-ecs\",\n            ImageId = fooImages.Apply(fooImages =\u003e fooImages.Images?[0]?.ImageId),\n            InstanceType = \"ecs.g1.large\",\n            Password = \"93f0cb0614Aab12\",\n            InstanceChargeType = \"PostPaid\",\n            SystemVolumeType = \"ESSD_PL0\",\n            SystemVolumeSize = 40,\n            SubnetId = fooSubnet.Id,\n            SecurityGroupIds = \n            {\n                fooSecurityGroup.Id,\n            },\n        });\n        var fooState = new Volcengine.Ecs.State(\"fooState\", new Volcengine.Ecs.StateArgs\n        {\n            InstanceId = fooInstance.Id,\n            Action = \"Stop\",\n            StoppedMode = \"KeepCharging\",\n        });\n        var fooDeploymentSet = new Volcengine.Ecs.DeploymentSet(\"fooDeploymentSet\", new Volcengine.Ecs.DeploymentSetArgs\n        {\n            DeploymentSetName = \"acc-test-ecs-ds\",\n            Description = \"acc-test\",\n            Granularity = \"switch\",\n            Strategy = \"Availability\",\n        });\n        var fooDeploymentSetAssociate = new Volcengine.Ecs.DeploymentSetAssociate(\"fooDeploymentSetAssociate\", new Volcengine.Ecs.DeploymentSetAssociateArgs\n        {\n            DeploymentSetId = fooDeploymentSet.Id,\n            InstanceId = fooInstance.Id,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                fooState,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSecurityGroup, err := vpc.NewSecurityGroup(ctx, \"fooSecurityGroup\", \u0026vpc.SecurityGroupArgs{\n\t\t\tSecurityGroupName: pulumi.String(\"acc-test-security-group\"),\n\t\t\tVpcId:             fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooImages, err := ecs.Images(ctx, \u0026ecs.ImagesArgs{\n\t\t\tOsType:         pulumi.StringRef(\"Linux\"),\n\t\t\tVisibility:     pulumi.StringRef(\"public\"),\n\t\t\tInstanceTypeId: pulumi.StringRef(\"ecs.g1.large\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooInstance, err := ecs.NewInstance(ctx, \"fooInstance\", \u0026ecs.InstanceArgs{\n\t\t\tInstanceName:       pulumi.String(\"acc-test-ecs\"),\n\t\t\tImageId:            pulumi.String(fooImages.Images[0].ImageId),\n\t\t\tInstanceType:       pulumi.String(\"ecs.g1.large\"),\n\t\t\tPassword:           pulumi.String(\"93f0cb0614Aab12\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tSystemVolumeType:   pulumi.String(\"ESSD_PL0\"),\n\t\t\tSystemVolumeSize:   pulumi.Int(40),\n\t\t\tSubnetId:           fooSubnet.ID(),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tfooSecurityGroup.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooState, err := ecs.NewState(ctx, \"fooState\", \u0026ecs.StateArgs{\n\t\t\tInstanceId:  fooInstance.ID(),\n\t\t\tAction:      pulumi.String(\"Stop\"),\n\t\t\tStoppedMode: pulumi.String(\"KeepCharging\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooDeploymentSet, err := ecs.NewDeploymentSet(ctx, \"fooDeploymentSet\", \u0026ecs.DeploymentSetArgs{\n\t\t\tDeploymentSetName: pulumi.String(\"acc-test-ecs-ds\"),\n\t\t\tDescription:       pulumi.String(\"acc-test\"),\n\t\t\tGranularity:       pulumi.String(\"switch\"),\n\t\t\tStrategy:          pulumi.String(\"Availability\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ecs.NewDeploymentSetAssociate(ctx, \"fooDeploymentSetAssociate\", \u0026ecs.DeploymentSetAssociateArgs{\n\t\t\tDeploymentSetId: fooDeploymentSet.ID(),\n\t\t\tInstanceId:      fooInstance.ID(),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tfooState,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport com.pulumi.resources.CustomResourceOptions;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooSecurityGroup = new SecurityGroup(\"fooSecurityGroup\", SecurityGroupArgs.builder()        \n            .securityGroupName(\"acc-test-security-group\")\n            .vpcId(fooVpc.id())\n            .build());\n\n        final var fooImages = EcsFunctions.Images();\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .instanceName(\"acc-test-ecs\")\n            .imageId(fooImages.images()[0].imageId())\n            .instanceType(\"ecs.g1.large\")\n            .password(\"93f0cb0614Aab12\")\n            .instanceChargeType(\"PostPaid\")\n            .systemVolumeType(\"ESSD_PL0\")\n            .systemVolumeSize(40)\n            .subnetId(fooSubnet.id())\n            .securityGroupIds(fooSecurityGroup.id())\n            .build());\n\n        var fooState = new State(\"fooState\", StateArgs.builder()        \n            .instanceId(fooInstance.id())\n            .action(\"Stop\")\n            .stoppedMode(\"KeepCharging\")\n            .build());\n\n        var fooDeploymentSet = new DeploymentSet(\"fooDeploymentSet\", DeploymentSetArgs.builder()        \n            .deploymentSetName(\"acc-test-ecs-ds\")\n            .description(\"acc-test\")\n            .granularity(\"switch\")\n            .strategy(\"Availability\")\n            .build());\n\n        var fooDeploymentSetAssociate = new DeploymentSetAssociate(\"fooDeploymentSetAssociate\", DeploymentSetAssociateArgs.builder()        \n            .deploymentSetId(fooDeploymentSet.id())\n            .instanceId(fooInstance.id())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(fooState)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooSecurityGroup:\n    type: volcengine:vpc:SecurityGroup\n    properties:\n      securityGroupName: acc-test-security-group\n      vpcId: ${fooVpc.id}\n  fooInstance:\n    type: volcengine:ecs:Instance\n    properties:\n      instanceName: acc-test-ecs\n      imageId: ${fooImages.images[0].imageId}\n      instanceType: ecs.g1.large\n      password: 93f0cb0614Aab12\n      instanceChargeType: PostPaid\n      systemVolumeType: ESSD_PL0\n      systemVolumeSize: 40\n      subnetId: ${fooSubnet.id}\n      securityGroupIds:\n        - ${fooSecurityGroup.id}\n  fooState:\n    type: volcengine:ecs:State\n    properties:\n      instanceId: ${fooInstance.id}\n      action: Stop\n      stoppedMode: KeepCharging\n  fooDeploymentSet:\n    type: volcengine:ecs:DeploymentSet\n    properties:\n      deploymentSetName: acc-test-ecs-ds\n      description: acc-test\n      granularity: switch\n      strategy: Availability\n  fooDeploymentSetAssociate:\n    type: volcengine:ecs:DeploymentSetAssociate\n    properties:\n      deploymentSetId: ${fooDeploymentSet.id}\n      instanceId: ${fooInstance.id}\n    options:\n      dependson:\n        - ${fooState}\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n  fooImages:\n    Fn::Invoke:\n      Function: volcengine:ecs:Images\n      Arguments:\n        osType: Linux\n        visibility: public\n        instanceTypeId: ecs.g1.large\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nECS deployment set associate can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:ecs/deploymentSetAssociate:DeploymentSetAssociate default dps-ybti5tkpkv2udbfolrft:i-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "deploymentSetId": {
                    "type": "string",
                    "description": "The ID of ECS DeploymentSet Associate.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ECS Instance.\n"
                }
            },
            "required": [
                "deploymentSetId",
                "instanceId"
            ],
            "inputProperties": {
                "deploymentSetId": {
                    "type": "string",
                    "description": "The ID of ECS DeploymentSet Associate.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ECS Instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "deploymentSetId",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeploymentSetAssociate resources.\n",
                "properties": {
                    "deploymentSetId": {
                        "type": "string",
                        "description": "The ID of ECS DeploymentSet Associate.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of ECS Instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:ecs/instance:Instance": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooSecurityGroup = new volcengine.vpc.SecurityGroup(\"fooSecurityGroup\", {\n    securityGroupName: \"acc-test-security-group\",\n    vpcId: fooVpc.id,\n});\nconst fooImages = volcengine.ecs.Images({\n    osType: \"Linux\",\n    visibility: \"public\",\n    instanceTypeId: \"ecs.g1.large\",\n});\nconst fooInstance = new volcengine.ecs.Instance(\"fooInstance\", {\n    instanceName: \"acc-test-ecs\",\n    description: \"acc-test\",\n    hostName: \"tf-acc-test\",\n    imageId: fooImages.then(fooImages =\u003e fooImages.images?[0]?.imageId),\n    instanceType: \"ecs.g1.large\",\n    password: \"93f0cb0614Aab12\",\n    instanceChargeType: \"PostPaid\",\n    systemVolumeType: \"ESSD_PL0\",\n    systemVolumeSize: 40,\n    dataVolumes: [{\n        volumeType: \"ESSD_PL0\",\n        size: 50,\n        deleteWithInstance: true,\n    }],\n    subnetId: fooSubnet.id,\n    securityGroupIds: [fooSecurityGroup.id],\n    projectName: \"default\",\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_security_group = volcengine.vpc.SecurityGroup(\"fooSecurityGroup\",\n    security_group_name=\"acc-test-security-group\",\n    vpc_id=foo_vpc.id)\nfoo_images = volcengine.ecs.images(os_type=\"Linux\",\n    visibility=\"public\",\n    instance_type_id=\"ecs.g1.large\")\nfoo_instance = volcengine.ecs.Instance(\"fooInstance\",\n    instance_name=\"acc-test-ecs\",\n    description=\"acc-test\",\n    host_name=\"tf-acc-test\",\n    image_id=foo_images.images[0].image_id,\n    instance_type=\"ecs.g1.large\",\n    password=\"93f0cb0614Aab12\",\n    instance_charge_type=\"PostPaid\",\n    system_volume_type=\"ESSD_PL0\",\n    system_volume_size=40,\n    data_volumes=[volcengine.ecs.InstanceDataVolumeArgs(\n        volume_type=\"ESSD_PL0\",\n        size=50,\n        delete_with_instance=True,\n    )],\n    subnet_id=foo_subnet.id,\n    security_group_ids=[foo_security_group.id],\n    project_name=\"default\",\n    tags=[volcengine.ecs.InstanceTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup(\"fooSecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            SecurityGroupName = \"acc-test-security-group\",\n            VpcId = fooVpc.Id,\n        });\n        var fooImages = Output.Create(Volcengine.Ecs.Images.InvokeAsync(new Volcengine.Ecs.ImagesArgs\n        {\n            OsType = \"Linux\",\n            Visibility = \"public\",\n            InstanceTypeId = \"ecs.g1.large\",\n        }));\n        var fooInstance = new Volcengine.Ecs.Instance(\"fooInstance\", new Volcengine.Ecs.InstanceArgs\n        {\n            InstanceName = \"acc-test-ecs\",\n            Description = \"acc-test\",\n            HostName = \"tf-acc-test\",\n            ImageId = fooImages.Apply(fooImages =\u003e fooImages.Images?[0]?.ImageId),\n            InstanceType = \"ecs.g1.large\",\n            Password = \"93f0cb0614Aab12\",\n            InstanceChargeType = \"PostPaid\",\n            SystemVolumeType = \"ESSD_PL0\",\n            SystemVolumeSize = 40,\n            DataVolumes = \n            {\n                new Volcengine.Ecs.Inputs.InstanceDataVolumeArgs\n                {\n                    VolumeType = \"ESSD_PL0\",\n                    Size = 50,\n                    DeleteWithInstance = true,\n                },\n            },\n            SubnetId = fooSubnet.Id,\n            SecurityGroupIds = \n            {\n                fooSecurityGroup.Id,\n            },\n            ProjectName = \"default\",\n            Tags = \n            {\n                new Volcengine.Ecs.Inputs.InstanceTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSecurityGroup, err := vpc.NewSecurityGroup(ctx, \"fooSecurityGroup\", \u0026vpc.SecurityGroupArgs{\n\t\t\tSecurityGroupName: pulumi.String(\"acc-test-security-group\"),\n\t\t\tVpcId:             fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooImages, err := ecs.Images(ctx, \u0026ecs.ImagesArgs{\n\t\t\tOsType:         pulumi.StringRef(\"Linux\"),\n\t\t\tVisibility:     pulumi.StringRef(\"public\"),\n\t\t\tInstanceTypeId: pulumi.StringRef(\"ecs.g1.large\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ecs.NewInstance(ctx, \"fooInstance\", \u0026ecs.InstanceArgs{\n\t\t\tInstanceName:       pulumi.String(\"acc-test-ecs\"),\n\t\t\tDescription:        pulumi.String(\"acc-test\"),\n\t\t\tHostName:           pulumi.String(\"tf-acc-test\"),\n\t\t\tImageId:            pulumi.String(fooImages.Images[0].ImageId),\n\t\t\tInstanceType:       pulumi.String(\"ecs.g1.large\"),\n\t\t\tPassword:           pulumi.String(\"93f0cb0614Aab12\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tSystemVolumeType:   pulumi.String(\"ESSD_PL0\"),\n\t\t\tSystemVolumeSize:   pulumi.Int(40),\n\t\t\tDataVolumes: ecs.InstanceDataVolumeArray{\n\t\t\t\t\u0026ecs.InstanceDataVolumeArgs{\n\t\t\t\t\tVolumeType:         pulumi.String(\"ESSD_PL0\"),\n\t\t\t\t\tSize:               pulumi.Int(50),\n\t\t\t\t\tDeleteWithInstance: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSubnetId: fooSubnet.ID(),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tfooSecurityGroup.ID(),\n\t\t\t},\n\t\t\tProjectName: pulumi.String(\"default\"),\n\t\t\tTags: ecs.InstanceTagArray{\n\t\t\t\t\u0026ecs.InstanceTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooSecurityGroup = new SecurityGroup(\"fooSecurityGroup\", SecurityGroupArgs.builder()        \n            .securityGroupName(\"acc-test-security-group\")\n            .vpcId(fooVpc.id())\n            .build());\n\n        final var fooImages = EcsFunctions.Images();\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .instanceName(\"acc-test-ecs\")\n            .description(\"acc-test\")\n            .hostName(\"tf-acc-test\")\n            .imageId(fooImages.images()[0].imageId())\n            .instanceType(\"ecs.g1.large\")\n            .password(\"93f0cb0614Aab12\")\n            .instanceChargeType(\"PostPaid\")\n            .systemVolumeType(\"ESSD_PL0\")\n            .systemVolumeSize(40)\n            .dataVolumes(InstanceDataVolumeArgs.builder()\n                .volumeType(\"ESSD_PL0\")\n                .size(50)\n                .deleteWithInstance(true)\n                .build())\n            .subnetId(fooSubnet.id())\n            .securityGroupIds(fooSecurityGroup.id())\n            .projectName(\"default\")\n            .tags(InstanceTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooSecurityGroup:\n    type: volcengine:vpc:SecurityGroup\n    properties:\n      securityGroupName: acc-test-security-group\n      vpcId: ${fooVpc.id}\n  fooInstance:\n    type: volcengine:ecs:Instance\n    properties:\n      instanceName: acc-test-ecs\n      description: acc-test\n      hostName: tf-acc-test\n      imageId: ${fooImages.images[0].imageId}\n      instanceType: ecs.g1.large\n      password: 93f0cb0614Aab12\n      instanceChargeType: PostPaid\n      systemVolumeType: ESSD_PL0\n      systemVolumeSize: 40\n      dataVolumes:\n        - volumeType: ESSD_PL0\n          size: 50\n          deleteWithInstance: true\n      subnetId: ${fooSubnet.id}\n      securityGroupIds:\n        - ${fooSecurityGroup.id}\n      projectName: default\n      tags:\n        - key: k1\n          value: v1\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n  fooImages:\n    Fn::Invoke:\n      Function: volcengine:ecs:Images\n      Arguments:\n        osType: Linux\n        visibility: public\n        instanceTypeId: ecs.g1.large\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nECS Instance can be imported using the id, e.g. If Import,The data_volumes is sort by volume name\n\n```sh\n $ pulumi import volcengine:ecs/instance:Instance default i-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "autoRenewPeriod": {
                    "type": "integer",
                    "description": "The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "cpuOptions": {
                    "$ref": "#/types/volcengine:ecs/InstanceCpuOptions:InstanceCpuOptions",
                    "description": "The option of cpu.\n"
                },
                "cpus": {
                    "type": "integer",
                    "description": "The number of ECS instance CPU cores.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of ECS instance.\n"
                },
                "dataVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstanceDataVolume:InstanceDataVolume"
                    },
                    "description": "The data volumes collection of  ECS instance.\n"
                },
                "deploymentSetId": {
                    "type": "string",
                    "description": "The ID of Ecs Deployment Set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of ECS instance.\n"
                },
                "gpuDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstanceGpuDevice:InstanceGpuDevice"
                    },
                    "description": "The GPU device info of Instance.\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "The host name of ECS instance.\n"
                },
                "hpcClusterId": {
                    "type": "string",
                    "description": "The hpc cluster ID of ECS instance.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The Image ID of ECS instance.\n"
                },
                "includeDataVolumes": {
                    "type": "boolean",
                    "description": "The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.\n"
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The charge type of ECS instance, the value can be `PrePaid` or `PostPaid`.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ECS instance.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of ECS instance.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The instance type of ECS instance.\n"
                },
                "ipv6AddressCount": {
                    "type": "integer",
                    "description": "The number of IPv6 addresses to be automatically assigned from within the CIDR block of the subnet that hosts the ENI. Valid values: 1 to 10.\n"
                },
                "ipv6Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more IPv6 addresses selected from within the CIDR block of the subnet that hosts the ENI. Support up to 10.\nYou cannot specify both the ipv6_addresses and ipv6_address_count parameters.\n"
                },
                "isGpu": {
                    "type": "boolean",
                    "description": "The Flag of GPU instance.If the instance is GPU,The flag is true.\n"
                },
                "keepImageCredential": {
                    "type": "boolean",
                    "description": "Whether to keep the mirror settings. Only custom images and shared images support this field.\nWhen the value of this field is true, the Password and KeyPairName cannot be specified.\nWhen importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "keyPairId": {
                    "type": "string",
                    "description": "The ssh key ID of ECS instance.\n"
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The ssh key name of ECS instance.\n"
                },
                "memorySize": {
                    "type": "integer",
                    "description": "The memory size of ECS instance.\n"
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of primary networkInterface.\n"
                },
                "osName": {
                    "type": "string",
                    "description": "The os name of ECS instance.\n"
                },
                "osType": {
                    "type": "string",
                    "description": "The os type of ECS instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of ECS instance.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.\n"
                },
                "primaryIpAddress": {
                    "type": "string",
                    "description": "The private ip address of primary networkInterface.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the ecs instance.\n"
                },
                "secondaryNetworkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstanceSecondaryNetworkInterface:InstanceSecondaryNetworkInterface"
                    },
                    "description": "The secondary networkInterface detail collection of ECS instance.\n"
                },
                "securityEnhancementStrategy": {
                    "type": "string",
                    "description": "The security enhancement strategy of ECS instance. The value can be Active or InActive. Default is Active.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID set of primary networkInterface.\n"
                },
                "spotStrategy": {
                    "type": "string",
                    "description": "The spot strategy will autoremove instance in some conditions.Please make sure you can maintain instance lifecycle before auto remove.The spot strategy of ECS instance, the value can be `NoSpot` or `SpotAsPriceGo`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of ECS instance.\n"
                },
                "stoppedMode": {
                    "type": "string",
                    "description": "The stop mode of ECS instance.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of primary networkInterface.\n"
                },
                "systemVolumeId": {
                    "type": "string",
                    "description": "The ID of system volume.\n"
                },
                "systemVolumeSize": {
                    "type": "integer",
                    "description": "The size of system volume. The value range of the system volume size is ESSD_PL0: 20~2048, ESSD_FlexPL: 20~2048, PTSSD: 10~500.\n"
                },
                "systemVolumeType": {
                    "type": "string",
                    "description": "The type of system volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstanceTag:InstanceTag"
                    },
                    "description": "Tags.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The update time of ECS instance.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The user data of ECS instance, this field must be encrypted with base64.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ID of ECS instance.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone ID of ECS instance.\n"
                }
            },
            "required": [
                "cpuOptions",
                "cpus",
                "createdAt",
                "dataVolumes",
                "deploymentSetId",
                "description",
                "gpuDevices",
                "hostName",
                "imageId",
                "instanceChargeType",
                "instanceId",
                "instanceName",
                "instanceType",
                "ipv6AddressCount",
                "ipv6Addresses",
                "isGpu",
                "keyPairId",
                "keyPairName",
                "memorySize",
                "networkInterfaceId",
                "osName",
                "osType",
                "primaryIpAddress",
                "secondaryNetworkInterfaces",
                "securityGroupIds",
                "spotStrategy",
                "status",
                "stoppedMode",
                "subnetId",
                "systemVolumeId",
                "systemVolumeSize",
                "systemVolumeType",
                "updatedAt",
                "userData",
                "vpcId",
                "zoneId"
            ],
            "inputProperties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "autoRenewPeriod": {
                    "type": "integer",
                    "description": "The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "cpuOptions": {
                    "$ref": "#/types/volcengine:ecs/InstanceCpuOptions:InstanceCpuOptions",
                    "description": "The option of cpu.\n"
                },
                "dataVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstanceDataVolume:InstanceDataVolume"
                    },
                    "description": "The data volumes collection of  ECS instance.\n"
                },
                "deploymentSetId": {
                    "type": "string",
                    "description": "The ID of Ecs Deployment Set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of ECS instance.\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "The host name of ECS instance.\n",
                    "willReplaceOnChanges": true
                },
                "hpcClusterId": {
                    "type": "string",
                    "description": "The hpc cluster ID of ECS instance.\n",
                    "willReplaceOnChanges": true
                },
                "imageId": {
                    "type": "string",
                    "description": "The Image ID of ECS instance.\n"
                },
                "includeDataVolumes": {
                    "type": "boolean",
                    "description": "The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.\n"
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The charge type of ECS instance, the value can be `PrePaid` or `PostPaid`.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of ECS instance.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The instance type of ECS instance.\n"
                },
                "ipv6AddressCount": {
                    "type": "integer",
                    "description": "The number of IPv6 addresses to be automatically assigned from within the CIDR block of the subnet that hosts the ENI. Valid values: 1 to 10.\n",
                    "willReplaceOnChanges": true
                },
                "ipv6Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more IPv6 addresses selected from within the CIDR block of the subnet that hosts the ENI. Support up to 10.\nYou cannot specify both the ipv6_addresses and ipv6_address_count parameters.\n",
                    "willReplaceOnChanges": true
                },
                "keepImageCredential": {
                    "type": "boolean",
                    "description": "Whether to keep the mirror settings. Only custom images and shared images support this field.\nWhen the value of this field is true, the Password and KeyPairName cannot be specified.\nWhen importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The ssh key name of ECS instance.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The password of ECS instance.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the ecs instance.\n"
                },
                "secondaryNetworkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstanceSecondaryNetworkInterface:InstanceSecondaryNetworkInterface"
                    },
                    "description": "The secondary networkInterface detail collection of ECS instance.\n",
                    "willReplaceOnChanges": true
                },
                "securityEnhancementStrategy": {
                    "type": "string",
                    "description": "The security enhancement strategy of ECS instance. The value can be Active or InActive. Default is Active.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID set of primary networkInterface.\n"
                },
                "spotStrategy": {
                    "type": "string",
                    "description": "The spot strategy will autoremove instance in some conditions.Please make sure you can maintain instance lifecycle before auto remove.The spot strategy of ECS instance, the value can be `NoSpot` or `SpotAsPriceGo`.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of primary networkInterface.\n",
                    "willReplaceOnChanges": true
                },
                "systemVolumeSize": {
                    "type": "integer",
                    "description": "The size of system volume. The value range of the system volume size is ESSD_PL0: 20~2048, ESSD_FlexPL: 20~2048, PTSSD: 10~500.\n"
                },
                "systemVolumeType": {
                    "type": "string",
                    "description": "The type of system volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/InstanceTag:InstanceTag"
                    },
                    "description": "Tags.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The user data of ECS instance, this field must be encrypted with base64.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone ID of ECS instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "imageId",
                "instanceType",
                "securityGroupIds",
                "subnetId",
                "systemVolumeSize",
                "systemVolumeType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "autoRenew": {
                        "type": "boolean",
                        "description": "The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                    },
                    "autoRenewPeriod": {
                        "type": "integer",
                        "description": "The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                    },
                    "cpuOptions": {
                        "$ref": "#/types/volcengine:ecs/InstanceCpuOptions:InstanceCpuOptions",
                        "description": "The option of cpu.\n"
                    },
                    "cpus": {
                        "type": "integer",
                        "description": "The number of ECS instance CPU cores.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The create time of ECS instance.\n"
                    },
                    "dataVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/InstanceDataVolume:InstanceDataVolume"
                        },
                        "description": "The data volumes collection of  ECS instance.\n"
                    },
                    "deploymentSetId": {
                        "type": "string",
                        "description": "The ID of Ecs Deployment Set.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of ECS instance.\n"
                    },
                    "gpuDevices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/InstanceGpuDevice:InstanceGpuDevice"
                        },
                        "description": "The GPU device info of Instance.\n"
                    },
                    "hostName": {
                        "type": "string",
                        "description": "The host name of ECS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "hpcClusterId": {
                        "type": "string",
                        "description": "The hpc cluster ID of ECS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The Image ID of ECS instance.\n"
                    },
                    "includeDataVolumes": {
                        "type": "boolean",
                        "description": "The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.\n"
                    },
                    "instanceChargeType": {
                        "type": "string",
                        "description": "The charge type of ECS instance, the value can be `PrePaid` or `PostPaid`.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of ECS instance.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of ECS instance.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The instance type of ECS instance.\n"
                    },
                    "ipv6AddressCount": {
                        "type": "integer",
                        "description": "The number of IPv6 addresses to be automatically assigned from within the CIDR block of the subnet that hosts the ENI. Valid values: 1 to 10.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipv6Addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "One or more IPv6 addresses selected from within the CIDR block of the subnet that hosts the ENI. Support up to 10.\nYou cannot specify both the ipv6_addresses and ipv6_address_count parameters.\n",
                        "willReplaceOnChanges": true
                    },
                    "isGpu": {
                        "type": "boolean",
                        "description": "The Flag of GPU instance.If the instance is GPU,The flag is true.\n"
                    },
                    "keepImageCredential": {
                        "type": "boolean",
                        "description": "Whether to keep the mirror settings. Only custom images and shared images support this field.\nWhen the value of this field is true, the Password and KeyPairName cannot be specified.\nWhen importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                    },
                    "keyPairId": {
                        "type": "string",
                        "description": "The ssh key ID of ECS instance.\n"
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "The ssh key name of ECS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "memorySize": {
                        "type": "integer",
                        "description": "The memory size of ECS instance.\n"
                    },
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "The ID of primary networkInterface.\n"
                    },
                    "osName": {
                        "type": "string",
                        "description": "The os name of ECS instance.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "The os type of ECS instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of ECS instance.\n"
                    },
                    "period": {
                        "type": "integer",
                        "description": "The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.\n"
                    },
                    "primaryIpAddress": {
                        "type": "string",
                        "description": "The private ip address of primary networkInterface.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the ecs instance.\n"
                    },
                    "secondaryNetworkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/InstanceSecondaryNetworkInterface:InstanceSecondaryNetworkInterface"
                        },
                        "description": "The secondary networkInterface detail collection of ECS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityEnhancementStrategy": {
                        "type": "string",
                        "description": "The security enhancement strategy of ECS instance. The value can be Active or InActive. Default is Active.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The security group ID set of primary networkInterface.\n"
                    },
                    "spotStrategy": {
                        "type": "string",
                        "description": "The spot strategy will autoremove instance in some conditions.Please make sure you can maintain instance lifecycle before auto remove.The spot strategy of ECS instance, the value can be `NoSpot` or `SpotAsPriceGo`.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of ECS instance.\n"
                    },
                    "stoppedMode": {
                        "type": "string",
                        "description": "The stop mode of ECS instance.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The subnet ID of primary networkInterface.\n",
                        "willReplaceOnChanges": true
                    },
                    "systemVolumeId": {
                        "type": "string",
                        "description": "The ID of system volume.\n"
                    },
                    "systemVolumeSize": {
                        "type": "integer",
                        "description": "The size of system volume. The value range of the system volume size is ESSD_PL0: 20~2048, ESSD_FlexPL: 20~2048, PTSSD: 10~500.\n"
                    },
                    "systemVolumeType": {
                        "type": "string",
                        "description": "The type of system volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/InstanceTag:InstanceTag"
                        },
                        "description": "Tags.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The update time of ECS instance.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "The user data of ECS instance, this field must be encrypted with base64.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC ID of ECS instance.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone ID of ECS instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:ecs/keyPair:KeyPair": {
            "description": "Provides a resource to manage ecs key pair\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.ecs.KeyPair(\"foo\", {\n    description: \"acc-test\",\n    keyPairName: \"acc-test-key-name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.ecs.KeyPair(\"foo\",\n    description=\"acc-test\",\n    key_pair_name=\"acc-test-key-name\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Ecs.KeyPair(\"foo\", new Volcengine.Ecs.KeyPairArgs\n        {\n            Description = \"acc-test\",\n            KeyPairName = \"acc-test-key-name\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ecs.NewKeyPair(ctx, \"foo\", \u0026ecs.KeyPairArgs{\n\t\t\tDescription: pulumi.String(\"acc-test\"),\n\t\t\tKeyPairName: pulumi.String(\"acc-test-key-name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new KeyPair(\"foo\", KeyPairArgs.builder()        \n            .description(\"acc-test\")\n            .keyPairName(\"acc-test-key-name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:ecs:KeyPair\n    properties:\n      description: acc-test\n      keyPairName: acc-test-key-name\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nECS key pair can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:ecs/keyPair:KeyPair default kp-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of key pair.\n"
                },
                "fingerPrint": {
                    "type": "string",
                    "description": "The finger print info.\n"
                },
                "keyFile": {
                    "type": "string",
                    "description": "Target file to save private key. It is recommended that the value not be empty. You only have one chance to download the private key, the volcengine will not save your private key, please keep it safe. In the TF import scenario, this field will not write the private key locally.\n"
                },
                "keyPairId": {
                    "type": "string",
                    "description": "The id of key pair.\n"
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The name of key pair.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "Public key string.\n"
                }
            },
            "required": [
                "fingerPrint",
                "keyPairId",
                "keyPairName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of key pair.\n"
                },
                "keyFile": {
                    "type": "string",
                    "description": "Target file to save private key. It is recommended that the value not be empty. You only have one chance to download the private key, the volcengine will not save your private key, please keep it safe. In the TF import scenario, this field will not write the private key locally.\n",
                    "willReplaceOnChanges": true
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The name of key pair.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "Public key string.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "keyPairName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KeyPair resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of key pair.\n"
                    },
                    "fingerPrint": {
                        "type": "string",
                        "description": "The finger print info.\n"
                    },
                    "keyFile": {
                        "type": "string",
                        "description": "Target file to save private key. It is recommended that the value not be empty. You only have one chance to download the private key, the volcengine will not save your private key, please keep it safe. In the TF import scenario, this field will not write the private key locally.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyPairId": {
                        "type": "string",
                        "description": "The id of key pair.\n"
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "The name of key pair.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "Public key string.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:ecs/keyPairAssociate:KeyPairAssociate": {
            "description": "Provides a resource to manage ecs key pair associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooKeyPair = new volcengine.ecs.KeyPair(\"fooKeyPair\", {\n    keyPairName: \"acc-test-key-name\",\n    description: \"acc-test\",\n});\nconst fooZones = volcengine.ecs.Zones({});\nconst fooImages = volcengine.ecs.Images({\n    osType: \"Linux\",\n    visibility: \"public\",\n    instanceTypeId: \"ecs.g1.large\",\n});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooSecurityGroup = new volcengine.vpc.SecurityGroup(\"fooSecurityGroup\", {\n    vpcId: fooVpc.id,\n    securityGroupName: \"acc-test-security-group\",\n});\nconst fooInstance = new volcengine.ecs.Instance(\"fooInstance\", {\n    imageId: fooImages.then(fooImages =\u003e fooImages.images?[0]?.imageId),\n    instanceType: \"ecs.g1.large\",\n    instanceName: \"acc-test-ecs-name\",\n    password: \"your password\",\n    instanceChargeType: \"PostPaid\",\n    systemVolumeType: \"ESSD_PL0\",\n    systemVolumeSize: 40,\n    subnetId: fooSubnet.id,\n    securityGroupIds: [fooSecurityGroup.id],\n});\nconst fooKeyPairAssociate = new volcengine.ecs.KeyPairAssociate(\"fooKeyPairAssociate\", {\n    instanceId: fooInstance.id,\n    keyPairId: fooKeyPair.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_key_pair = volcengine.ecs.KeyPair(\"fooKeyPair\",\n    key_pair_name=\"acc-test-key-name\",\n    description=\"acc-test\")\nfoo_zones = volcengine.ecs.zones()\nfoo_images = volcengine.ecs.images(os_type=\"Linux\",\n    visibility=\"public\",\n    instance_type_id=\"ecs.g1.large\")\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_security_group = volcengine.vpc.SecurityGroup(\"fooSecurityGroup\",\n    vpc_id=foo_vpc.id,\n    security_group_name=\"acc-test-security-group\")\nfoo_instance = volcengine.ecs.Instance(\"fooInstance\",\n    image_id=foo_images.images[0].image_id,\n    instance_type=\"ecs.g1.large\",\n    instance_name=\"acc-test-ecs-name\",\n    password=\"your password\",\n    instance_charge_type=\"PostPaid\",\n    system_volume_type=\"ESSD_PL0\",\n    system_volume_size=40,\n    subnet_id=foo_subnet.id,\n    security_group_ids=[foo_security_group.id])\nfoo_key_pair_associate = volcengine.ecs.KeyPairAssociate(\"fooKeyPairAssociate\",\n    instance_id=foo_instance.id,\n    key_pair_id=foo_key_pair.id)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooKeyPair = new Volcengine.Ecs.KeyPair(\"fooKeyPair\", new Volcengine.Ecs.KeyPairArgs\n        {\n            KeyPairName = \"acc-test-key-name\",\n            Description = \"acc-test\",\n        });\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooImages = Output.Create(Volcengine.Ecs.Images.InvokeAsync(new Volcengine.Ecs.ImagesArgs\n        {\n            OsType = \"Linux\",\n            Visibility = \"public\",\n            InstanceTypeId = \"ecs.g1.large\",\n        }));\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup(\"fooSecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            VpcId = fooVpc.Id,\n            SecurityGroupName = \"acc-test-security-group\",\n        });\n        var fooInstance = new Volcengine.Ecs.Instance(\"fooInstance\", new Volcengine.Ecs.InstanceArgs\n        {\n            ImageId = fooImages.Apply(fooImages =\u003e fooImages.Images?[0]?.ImageId),\n            InstanceType = \"ecs.g1.large\",\n            InstanceName = \"acc-test-ecs-name\",\n            Password = \"your password\",\n            InstanceChargeType = \"PostPaid\",\n            SystemVolumeType = \"ESSD_PL0\",\n            SystemVolumeSize = 40,\n            SubnetId = fooSubnet.Id,\n            SecurityGroupIds = \n            {\n                fooSecurityGroup.Id,\n            },\n        });\n        var fooKeyPairAssociate = new Volcengine.Ecs.KeyPairAssociate(\"fooKeyPairAssociate\", new Volcengine.Ecs.KeyPairAssociateArgs\n        {\n            InstanceId = fooInstance.Id,\n            KeyPairId = fooKeyPair.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooKeyPair, err := ecs.NewKeyPair(ctx, \"fooKeyPair\", \u0026ecs.KeyPairArgs{\n\t\t\tKeyPairName: pulumi.String(\"acc-test-key-name\"),\n\t\t\tDescription: pulumi.String(\"acc-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooImages, err := ecs.Images(ctx, \u0026ecs.ImagesArgs{\n\t\t\tOsType:         pulumi.StringRef(\"Linux\"),\n\t\t\tVisibility:     pulumi.StringRef(\"public\"),\n\t\t\tInstanceTypeId: pulumi.StringRef(\"ecs.g1.large\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSecurityGroup, err := vpc.NewSecurityGroup(ctx, \"fooSecurityGroup\", \u0026vpc.SecurityGroupArgs{\n\t\t\tVpcId:             fooVpc.ID(),\n\t\t\tSecurityGroupName: pulumi.String(\"acc-test-security-group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooInstance, err := ecs.NewInstance(ctx, \"fooInstance\", \u0026ecs.InstanceArgs{\n\t\t\tImageId:            pulumi.String(fooImages.Images[0].ImageId),\n\t\t\tInstanceType:       pulumi.String(\"ecs.g1.large\"),\n\t\t\tInstanceName:       pulumi.String(\"acc-test-ecs-name\"),\n\t\t\tPassword:           pulumi.String(\"your password\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tSystemVolumeType:   pulumi.String(\"ESSD_PL0\"),\n\t\t\tSystemVolumeSize:   pulumi.Int(40),\n\t\t\tSubnetId:           fooSubnet.ID(),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tfooSecurityGroup.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ecs.NewKeyPairAssociate(ctx, \"fooKeyPairAssociate\", \u0026ecs.KeyPairAssociateArgs{\n\t\t\tInstanceId: fooInstance.ID(),\n\t\t\tKeyPairId:  fooKeyPair.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooKeyPair = new KeyPair(\"fooKeyPair\", KeyPairArgs.builder()        \n            .keyPairName(\"acc-test-key-name\")\n            .description(\"acc-test\")\n            .build());\n\n        final var fooZones = EcsFunctions.Zones();\n\n        final var fooImages = EcsFunctions.Images();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooSecurityGroup = new SecurityGroup(\"fooSecurityGroup\", SecurityGroupArgs.builder()        \n            .vpcId(fooVpc.id())\n            .securityGroupName(\"acc-test-security-group\")\n            .build());\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .imageId(fooImages.images()[0].imageId())\n            .instanceType(\"ecs.g1.large\")\n            .instanceName(\"acc-test-ecs-name\")\n            .password(\"your password\")\n            .instanceChargeType(\"PostPaid\")\n            .systemVolumeType(\"ESSD_PL0\")\n            .systemVolumeSize(40)\n            .subnetId(fooSubnet.id())\n            .securityGroupIds(fooSecurityGroup.id())\n            .build());\n\n        var fooKeyPairAssociate = new KeyPairAssociate(\"fooKeyPairAssociate\", KeyPairAssociateArgs.builder()        \n            .instanceId(fooInstance.id())\n            .keyPairId(fooKeyPair.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooKeyPair:\n    type: volcengine:ecs:KeyPair\n    properties:\n      keyPairName: acc-test-key-name\n      description: acc-test\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooSecurityGroup:\n    type: volcengine:vpc:SecurityGroup\n    properties:\n      vpcId: ${fooVpc.id}\n      securityGroupName: acc-test-security-group\n  fooInstance:\n    type: volcengine:ecs:Instance\n    properties:\n      imageId: ${fooImages.images[0].imageId}\n      instanceType: ecs.g1.large\n      instanceName: acc-test-ecs-name\n      password: your password\n      instanceChargeType: PostPaid\n      systemVolumeType: ESSD_PL0\n      systemVolumeSize: 40\n      subnetId: ${fooSubnet.id}\n      securityGroupIds:\n        - ${fooSecurityGroup.id}\n  fooKeyPairAssociate:\n    type: volcengine:ecs:KeyPairAssociate\n    properties:\n      instanceId: ${fooInstance.id}\n      keyPairId: ${fooKeyPair.id}\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n  fooImages:\n    Fn::Invoke:\n      Function: volcengine:ecs:Images\n      Arguments:\n        osType: Linux\n        visibility: public\n        instanceTypeId: ecs.g1.large\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nECS key pair associate can be imported using the id, e.g. After binding the key pair, the instance needs to be restarted for the key pair to take effect. After the key pair is bound, the password login method will automatically become invalid. If your instance has been set for password login, after the key pair is bound, you will no longer be able to use the password login method.\n\n```sh\n $ pulumi import volcengine:ecs/keyPairAssociate:KeyPairAssociate default kp-ybti5tkpkv2udbfolrft:i-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ECS Instance.\n"
                },
                "keyPairId": {
                    "type": "string",
                    "description": "The ID of ECS KeyPair Associate.\n"
                }
            },
            "required": [
                "instanceId",
                "keyPairId"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ECS Instance.\n",
                    "willReplaceOnChanges": true
                },
                "keyPairId": {
                    "type": "string",
                    "description": "The ID of ECS KeyPair Associate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "keyPairId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KeyPairAssociate resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of ECS Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyPairId": {
                        "type": "string",
                        "description": "The ID of ECS KeyPair Associate.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:ecs/launchTemplate:LaunchTemplate": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.ecs.LaunchTemplate(\"foo\", {\n    description: \"acc-test-desc\",\n    eipBandwidth: 1,\n    eipBillingType: \"PostPaidByBandwidth\",\n    eipIsp: \"ChinaMobile\",\n    hostName: \"tf-host-name\",\n    hpcClusterId: \"hpcCluster-l8u24ovdmoab6opf\",\n    imageId: \"image-ycjwwciuzy5pkh54xx8f\",\n    instanceChargeType: \"PostPaid\",\n    instanceName: \"tf-acc-name\",\n    instanceTypeId: \"ecs.g1.large\",\n    keyPairName: \"tf-key-pair\",\n    launchTemplateName: \"tf-acc-template\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.ecs.LaunchTemplate(\"foo\",\n    description=\"acc-test-desc\",\n    eip_bandwidth=1,\n    eip_billing_type=\"PostPaidByBandwidth\",\n    eip_isp=\"ChinaMobile\",\n    host_name=\"tf-host-name\",\n    hpc_cluster_id=\"hpcCluster-l8u24ovdmoab6opf\",\n    image_id=\"image-ycjwwciuzy5pkh54xx8f\",\n    instance_charge_type=\"PostPaid\",\n    instance_name=\"tf-acc-name\",\n    instance_type_id=\"ecs.g1.large\",\n    key_pair_name=\"tf-key-pair\",\n    launch_template_name=\"tf-acc-template\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Ecs.LaunchTemplate(\"foo\", new Volcengine.Ecs.LaunchTemplateArgs\n        {\n            Description = \"acc-test-desc\",\n            EipBandwidth = 1,\n            EipBillingType = \"PostPaidByBandwidth\",\n            EipIsp = \"ChinaMobile\",\n            HostName = \"tf-host-name\",\n            HpcClusterId = \"hpcCluster-l8u24ovdmoab6opf\",\n            ImageId = \"image-ycjwwciuzy5pkh54xx8f\",\n            InstanceChargeType = \"PostPaid\",\n            InstanceName = \"tf-acc-name\",\n            InstanceTypeId = \"ecs.g1.large\",\n            KeyPairName = \"tf-key-pair\",\n            LaunchTemplateName = \"tf-acc-template\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ecs.NewLaunchTemplate(ctx, \"foo\", \u0026ecs.LaunchTemplateArgs{\n\t\t\tDescription:        pulumi.String(\"acc-test-desc\"),\n\t\t\tEipBandwidth:       pulumi.Int(1),\n\t\t\tEipBillingType:     pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\tEipIsp:             pulumi.String(\"ChinaMobile\"),\n\t\t\tHostName:           pulumi.String(\"tf-host-name\"),\n\t\t\tHpcClusterId:       pulumi.String(\"hpcCluster-l8u24ovdmoab6opf\"),\n\t\t\tImageId:            pulumi.String(\"image-ycjwwciuzy5pkh54xx8f\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tInstanceName:       pulumi.String(\"tf-acc-name\"),\n\t\t\tInstanceTypeId:     pulumi.String(\"ecs.g1.large\"),\n\t\t\tKeyPairName:        pulumi.String(\"tf-key-pair\"),\n\t\t\tLaunchTemplateName: pulumi.String(\"tf-acc-template\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new LaunchTemplate(\"foo\", LaunchTemplateArgs.builder()        \n            .description(\"acc-test-desc\")\n            .eipBandwidth(1)\n            .eipBillingType(\"PostPaidByBandwidth\")\n            .eipIsp(\"ChinaMobile\")\n            .hostName(\"tf-host-name\")\n            .hpcClusterId(\"hpcCluster-l8u24ovdmoab6opf\")\n            .imageId(\"image-ycjwwciuzy5pkh54xx8f\")\n            .instanceChargeType(\"PostPaid\")\n            .instanceName(\"tf-acc-name\")\n            .instanceTypeId(\"ecs.g1.large\")\n            .keyPairName(\"tf-key-pair\")\n            .launchTemplateName(\"tf-acc-template\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:ecs:LaunchTemplate\n    properties:\n      description: acc-test-desc\n      eipBandwidth: 1\n      eipBillingType: PostPaidByBandwidth\n      eipIsp: ChinaMobile\n      hostName: tf-host-name\n      hpcClusterId: hpcCluster-l8u24ovdmoab6opf\n      imageId: image-ycjwwciuzy5pkh54xx8f\n      instanceChargeType: PostPaid\n      instanceName: tf-acc-name\n      instanceTypeId: ecs.g1.large\n      keyPairName: tf-key-pair\n      launchTemplateName: tf-acc-template\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLaunchTemplate can be imported using the LaunchTemplateId, e.g. When the instance launch template is modified, a new version will be created. When the number of versions reaches the upper limit (30), the oldest version that is not the default version will be deleted.\n\n```sh\n $ pulumi import volcengine:ecs/launchTemplate:LaunchTemplate default lt-ysxc16auaugh9zfy****\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the instance.\n"
                },
                "eipBandwidth": {
                    "type": "integer",
                    "description": "The EIP bandwidth which the scaling configuration set.\n"
                },
                "eipBillingType": {
                    "type": "string",
                    "description": "The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.\n"
                },
                "eipIsp": {
                    "type": "string",
                    "description": "The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "The host name of the instance.\n"
                },
                "hpcClusterId": {
                    "type": "string",
                    "description": "The hpc cluster id.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The image ID.\n"
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The charge type of the instance and volume.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of the instance.\n"
                },
                "instanceTypeId": {
                    "type": "string",
                    "description": "The compute type of the instance.\n"
                },
                "keyPairName": {
                    "type": "string",
                    "description": "When you log in to the instance using the SSH key pair, enter the name of the key pair.\n"
                },
                "launchTemplateId": {
                    "type": "string",
                    "description": "The launch template id.\n"
                },
                "launchTemplateName": {
                    "type": "string",
                    "description": "The name of the launch template.\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/LaunchTemplateNetworkInterface:LaunchTemplateNetworkInterface"
                    },
                    "description": "The list of network interfaces. When creating an instance, it is supported to bind auxiliary network cards at the same time. The first one is the primary network card, and the others are secondary network cards.\n"
                },
                "securityEnhancementStrategy": {
                    "type": "string",
                    "description": "Whether to open the security reinforcement.\n"
                },
                "suffixIndex": {
                    "type": "integer",
                    "description": "The index of the ordered suffix.\n"
                },
                "uniqueSuffix": {
                    "type": "boolean",
                    "description": "Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Instance custom data. The set custom data must be Base64 encoded, and the size of the custom data before Base64 encoding cannot exceed 16KB.\n"
                },
                "versionDescription": {
                    "type": "string",
                    "description": "The latest version description of the launch template.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/LaunchTemplateVolume:LaunchTemplateVolume"
                    },
                    "description": "The list of volume of the scaling configuration.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc id.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone id.\n"
                }
            },
            "required": [
                "launchTemplateId",
                "launchTemplateName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the instance.\n"
                },
                "eipBandwidth": {
                    "type": "integer",
                    "description": "The EIP bandwidth which the scaling configuration set.\n"
                },
                "eipBillingType": {
                    "type": "string",
                    "description": "The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.\n"
                },
                "eipIsp": {
                    "type": "string",
                    "description": "The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "The host name of the instance.\n"
                },
                "hpcClusterId": {
                    "type": "string",
                    "description": "The hpc cluster id.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The image ID.\n"
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The charge type of the instance and volume.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of the instance.\n"
                },
                "instanceTypeId": {
                    "type": "string",
                    "description": "The compute type of the instance.\n"
                },
                "keyPairName": {
                    "type": "string",
                    "description": "When you log in to the instance using the SSH key pair, enter the name of the key pair.\n"
                },
                "launchTemplateName": {
                    "type": "string",
                    "description": "The name of the launch template.\n",
                    "willReplaceOnChanges": true
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/LaunchTemplateNetworkInterface:LaunchTemplateNetworkInterface"
                    },
                    "description": "The list of network interfaces. When creating an instance, it is supported to bind auxiliary network cards at the same time. The first one is the primary network card, and the others are secondary network cards.\n"
                },
                "securityEnhancementStrategy": {
                    "type": "string",
                    "description": "Whether to open the security reinforcement.\n"
                },
                "suffixIndex": {
                    "type": "integer",
                    "description": "The index of the ordered suffix.\n"
                },
                "uniqueSuffix": {
                    "type": "boolean",
                    "description": "Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Instance custom data. The set custom data must be Base64 encoded, and the size of the custom data before Base64 encoding cannot exceed 16KB.\n"
                },
                "versionDescription": {
                    "type": "string",
                    "description": "The latest version description of the launch template.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:ecs/LaunchTemplateVolume:LaunchTemplateVolume"
                    },
                    "description": "The list of volume of the scaling configuration.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc id.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone id.\n"
                }
            },
            "requiredInputs": [
                "launchTemplateName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LaunchTemplate resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the instance.\n"
                    },
                    "eipBandwidth": {
                        "type": "integer",
                        "description": "The EIP bandwidth which the scaling configuration set.\n"
                    },
                    "eipBillingType": {
                        "type": "string",
                        "description": "The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.\n"
                    },
                    "eipIsp": {
                        "type": "string",
                        "description": "The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.\n"
                    },
                    "hostName": {
                        "type": "string",
                        "description": "The host name of the instance.\n"
                    },
                    "hpcClusterId": {
                        "type": "string",
                        "description": "The hpc cluster id.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image ID.\n"
                    },
                    "instanceChargeType": {
                        "type": "string",
                        "description": "The charge type of the instance and volume.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of the instance.\n"
                    },
                    "instanceTypeId": {
                        "type": "string",
                        "description": "The compute type of the instance.\n"
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "When you log in to the instance using the SSH key pair, enter the name of the key pair.\n"
                    },
                    "launchTemplateId": {
                        "type": "string",
                        "description": "The launch template id.\n"
                    },
                    "launchTemplateName": {
                        "type": "string",
                        "description": "The name of the launch template.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/LaunchTemplateNetworkInterface:LaunchTemplateNetworkInterface"
                        },
                        "description": "The list of network interfaces. When creating an instance, it is supported to bind auxiliary network cards at the same time. The first one is the primary network card, and the others are secondary network cards.\n"
                    },
                    "securityEnhancementStrategy": {
                        "type": "string",
                        "description": "Whether to open the security reinforcement.\n"
                    },
                    "suffixIndex": {
                        "type": "integer",
                        "description": "The index of the ordered suffix.\n"
                    },
                    "uniqueSuffix": {
                        "type": "boolean",
                        "description": "Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "Instance custom data. The set custom data must be Base64 encoded, and the size of the custom data before Base64 encoding cannot exceed 16KB.\n"
                    },
                    "versionDescription": {
                        "type": "string",
                        "description": "The latest version description of the launch template.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/LaunchTemplateVolume:LaunchTemplateVolume"
                        },
                        "description": "The list of volume of the scaling configuration.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc id.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone id.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:ecs/state:State": {
            "description": "Provides a resource to manage ecs instance state\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooSecurityGroup = new volcengine.vpc.SecurityGroup(\"fooSecurityGroup\", {\n    securityGroupName: \"acc-test-security-group\",\n    vpcId: fooVpc.id,\n});\nconst fooImages = volcengine.ecs.Images({\n    osType: \"Linux\",\n    visibility: \"public\",\n    instanceTypeId: \"ecs.g1.large\",\n});\nconst fooInstance = new volcengine.ecs.Instance(\"fooInstance\", {\n    instanceName: \"acc-test-ecs\",\n    imageId: fooImages.then(fooImages =\u003e fooImages.images?[0]?.imageId),\n    instanceType: \"ecs.g1.large\",\n    password: \"93f0cb0614Aab12\",\n    instanceChargeType: \"PostPaid\",\n    systemVolumeType: \"ESSD_PL0\",\n    systemVolumeSize: 40,\n    subnetId: fooSubnet.id,\n    securityGroupIds: [fooSecurityGroup.id],\n});\nconst fooState = new volcengine.ecs.State(\"fooState\", {\n    instanceId: fooInstance.id,\n    action: \"Stop\",\n    stoppedMode: \"KeepCharging\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_security_group = volcengine.vpc.SecurityGroup(\"fooSecurityGroup\",\n    security_group_name=\"acc-test-security-group\",\n    vpc_id=foo_vpc.id)\nfoo_images = volcengine.ecs.images(os_type=\"Linux\",\n    visibility=\"public\",\n    instance_type_id=\"ecs.g1.large\")\nfoo_instance = volcengine.ecs.Instance(\"fooInstance\",\n    instance_name=\"acc-test-ecs\",\n    image_id=foo_images.images[0].image_id,\n    instance_type=\"ecs.g1.large\",\n    password=\"93f0cb0614Aab12\",\n    instance_charge_type=\"PostPaid\",\n    system_volume_type=\"ESSD_PL0\",\n    system_volume_size=40,\n    subnet_id=foo_subnet.id,\n    security_group_ids=[foo_security_group.id])\nfoo_state = volcengine.ecs.State(\"fooState\",\n    instance_id=foo_instance.id,\n    action=\"Stop\",\n    stopped_mode=\"KeepCharging\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup(\"fooSecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            SecurityGroupName = \"acc-test-security-group\",\n            VpcId = fooVpc.Id,\n        });\n        var fooImages = Output.Create(Volcengine.Ecs.Images.InvokeAsync(new Volcengine.Ecs.ImagesArgs\n        {\n            OsType = \"Linux\",\n            Visibility = \"public\",\n            InstanceTypeId = \"ecs.g1.large\",\n        }));\n        var fooInstance = new Volcengine.Ecs.Instance(\"fooInstance\", new Volcengine.Ecs.InstanceArgs\n        {\n            InstanceName = \"acc-test-ecs\",\n            ImageId = fooImages.Apply(fooImages =\u003e fooImages.Images?[0]?.ImageId),\n            InstanceType = \"ecs.g1.large\",\n            Password = \"93f0cb0614Aab12\",\n            InstanceChargeType = \"PostPaid\",\n            SystemVolumeType = \"ESSD_PL0\",\n            SystemVolumeSize = 40,\n            SubnetId = fooSubnet.Id,\n            SecurityGroupIds = \n            {\n                fooSecurityGroup.Id,\n            },\n        });\n        var fooState = new Volcengine.Ecs.State(\"fooState\", new Volcengine.Ecs.StateArgs\n        {\n            InstanceId = fooInstance.Id,\n            Action = \"Stop\",\n            StoppedMode = \"KeepCharging\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSecurityGroup, err := vpc.NewSecurityGroup(ctx, \"fooSecurityGroup\", \u0026vpc.SecurityGroupArgs{\n\t\t\tSecurityGroupName: pulumi.String(\"acc-test-security-group\"),\n\t\t\tVpcId:             fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooImages, err := ecs.Images(ctx, \u0026ecs.ImagesArgs{\n\t\t\tOsType:         pulumi.StringRef(\"Linux\"),\n\t\t\tVisibility:     pulumi.StringRef(\"public\"),\n\t\t\tInstanceTypeId: pulumi.StringRef(\"ecs.g1.large\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooInstance, err := ecs.NewInstance(ctx, \"fooInstance\", \u0026ecs.InstanceArgs{\n\t\t\tInstanceName:       pulumi.String(\"acc-test-ecs\"),\n\t\t\tImageId:            pulumi.String(fooImages.Images[0].ImageId),\n\t\t\tInstanceType:       pulumi.String(\"ecs.g1.large\"),\n\t\t\tPassword:           pulumi.String(\"93f0cb0614Aab12\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tSystemVolumeType:   pulumi.String(\"ESSD_PL0\"),\n\t\t\tSystemVolumeSize:   pulumi.Int(40),\n\t\t\tSubnetId:           fooSubnet.ID(),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tfooSecurityGroup.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ecs.NewState(ctx, \"fooState\", \u0026ecs.StateArgs{\n\t\t\tInstanceId:  fooInstance.ID(),\n\t\t\tAction:      pulumi.String(\"Stop\"),\n\t\t\tStoppedMode: pulumi.String(\"KeepCharging\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooSecurityGroup = new SecurityGroup(\"fooSecurityGroup\", SecurityGroupArgs.builder()        \n            .securityGroupName(\"acc-test-security-group\")\n            .vpcId(fooVpc.id())\n            .build());\n\n        final var fooImages = EcsFunctions.Images();\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .instanceName(\"acc-test-ecs\")\n            .imageId(fooImages.images()[0].imageId())\n            .instanceType(\"ecs.g1.large\")\n            .password(\"93f0cb0614Aab12\")\n            .instanceChargeType(\"PostPaid\")\n            .systemVolumeType(\"ESSD_PL0\")\n            .systemVolumeSize(40)\n            .subnetId(fooSubnet.id())\n            .securityGroupIds(fooSecurityGroup.id())\n            .build());\n\n        var fooState = new State(\"fooState\", StateArgs.builder()        \n            .instanceId(fooInstance.id())\n            .action(\"Stop\")\n            .stoppedMode(\"KeepCharging\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooSecurityGroup:\n    type: volcengine:vpc:SecurityGroup\n    properties:\n      securityGroupName: acc-test-security-group\n      vpcId: ${fooVpc.id}\n  fooInstance:\n    type: volcengine:ecs:Instance\n    properties:\n      instanceName: acc-test-ecs\n      imageId: ${fooImages.images[0].imageId}\n      instanceType: ecs.g1.large\n      password: 93f0cb0614Aab12\n      instanceChargeType: PostPaid\n      systemVolumeType: ESSD_PL0\n      systemVolumeSize: 40\n      subnetId: ${fooSubnet.id}\n      securityGroupIds:\n        - ${fooSecurityGroup.id}\n  fooState:\n    type: volcengine:ecs:State\n    properties:\n      instanceId: ${fooInstance.id}\n      action: Stop\n      stoppedMode: KeepCharging\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n  fooImages:\n    Fn::Invoke:\n      Function: volcengine:ecs:Images\n      Arguments:\n        osType: Linux\n        visibility: public\n        instanceTypeId: ecs.g1.large\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nState Instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:ecs/state:State default state:i-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Start or Stop of Instance Action, the value can be `Start`, `Stop` or `ForceStop`.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of Instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Instance.\n"
                },
                "stoppedMode": {
                    "type": "string",
                    "description": "Stop Mode of Instance, the value can be `KeepCharging` or `StopCharging`, default `KeepCharging`.\n"
                }
            },
            "required": [
                "action",
                "instanceId",
                "status"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Start or Stop of Instance Action, the value can be `Start`, `Stop` or `ForceStop`.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of Instance.\n",
                    "willReplaceOnChanges": true
                },
                "stoppedMode": {
                    "type": "string",
                    "description": "Stop Mode of Instance, the value can be `KeepCharging` or `StopCharging`, default `KeepCharging`.\n"
                }
            },
            "requiredInputs": [
                "action",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering State resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Start or Stop of Instance Action, the value can be `Start`, `Stop` or `ForceStop`.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of Instance.\n"
                    },
                    "stoppedMode": {
                        "type": "string",
                        "description": "Stop Mode of Instance, the value can be `KeepCharging` or `StopCharging`, default `KeepCharging`.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:eip/address:Address": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.eip.Address(\"foo\", {\n    bandwidth: 1,\n    billingType: \"PostPaidByBandwidth\",\n    description: \"acc-test\",\n    isp: \"ChinaUnicom\",\n    projectName: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.eip.Address(\"foo\",\n    bandwidth=1,\n    billing_type=\"PostPaidByBandwidth\",\n    description=\"acc-test\",\n    isp=\"ChinaUnicom\",\n    project_name=\"default\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Eip.Address(\"foo\", new Volcengine.Eip.AddressArgs\n        {\n            Bandwidth = 1,\n            BillingType = \"PostPaidByBandwidth\",\n            Description = \"acc-test\",\n            Isp = \"ChinaUnicom\",\n            ProjectName = \"default\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/eip\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := eip.NewAddress(ctx, \"foo\", \u0026eip.AddressArgs{\n\t\t\tBandwidth:   pulumi.Int(1),\n\t\t\tBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\tDescription: pulumi.String(\"acc-test\"),\n\t\t\tIsp:         pulumi.String(\"ChinaUnicom\"),\n\t\t\tProjectName: pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Address(\"foo\", AddressArgs.builder()        \n            .bandwidth(1)\n            .billingType(\"PostPaidByBandwidth\")\n            .description(\"acc-test\")\n            .isp(\"ChinaUnicom\")\n            .projectName(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:eip:Address\n    properties:\n      bandwidth: 1\n      billingType: PostPaidByBandwidth\n      description: acc-test\n      isp: ChinaUnicom\n      projectName: default\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nEip address can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:eip/address:Address default eip-274oj9a8rs9a87fap8sf9515b\n```\n\n ",
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The peek bandwidth of the EIP, the value range in 1~500 for PostPaidByBandwidth, and 1~200 for PostPaidByTraffic.\n"
                },
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the EIP Address. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic` or `PrePaid`.\n"
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The deleted time of the EIP.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the EIP.\n"
                },
                "eipAddress": {
                    "type": "string",
                    "description": "The ip address of the EIP.\n"
                },
                "expiredTime": {
                    "type": "string",
                    "description": "The expired time of the EIP.\n"
                },
                "isp": {
                    "type": "string",
                    "description": "The ISP of the EIP, the value can be `BGP` or `ChinaMobile` or `ChinaUnicom` or `ChinaTelecom` or `SingleLine_BGP` or `Static_BGP`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the EIP Address.\n"
                },
                "overdueTime": {
                    "type": "string",
                    "description": "The overdue time of the EIP.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of the EIP Address, the valid value range in 1~9 or 12 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid Eip or changing the billing_type from PostPaid to PrePaid.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the EIP.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the EIP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:eip/AddressTag:AddressTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "required": [
                "bandwidth",
                "billingType",
                "deletedTime",
                "eipAddress",
                "expiredTime",
                "isp",
                "name",
                "overdueTime",
                "status"
            ],
            "inputProperties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The peek bandwidth of the EIP, the value range in 1~500 for PostPaidByBandwidth, and 1~200 for PostPaidByTraffic.\n"
                },
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the EIP Address. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic` or `PrePaid`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the EIP.\n"
                },
                "isp": {
                    "type": "string",
                    "description": "The ISP of the EIP, the value can be `BGP` or `ChinaMobile` or `ChinaUnicom` or `ChinaTelecom` or `SingleLine_BGP` or `Static_BGP`.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the EIP Address.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of the EIP Address, the valid value range in 1~9 or 12 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid Eip or changing the billing_type from PostPaid to PrePaid.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the EIP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:eip/AddressTag:AddressTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "requiredInputs": [
                "billingType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Address resources.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer",
                        "description": "The peek bandwidth of the EIP, the value range in 1~500 for PostPaidByBandwidth, and 1~200 for PostPaidByTraffic.\n"
                    },
                    "billingType": {
                        "type": "string",
                        "description": "The billing type of the EIP Address. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic` or `PrePaid`.\n"
                    },
                    "deletedTime": {
                        "type": "string",
                        "description": "The deleted time of the EIP.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the EIP.\n"
                    },
                    "eipAddress": {
                        "type": "string",
                        "description": "The ip address of the EIP.\n"
                    },
                    "expiredTime": {
                        "type": "string",
                        "description": "The expired time of the EIP.\n"
                    },
                    "isp": {
                        "type": "string",
                        "description": "The ISP of the EIP, the value can be `BGP` or `ChinaMobile` or `ChinaUnicom` or `ChinaTelecom` or `SingleLine_BGP` or `Static_BGP`.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the EIP Address.\n"
                    },
                    "overdueTime": {
                        "type": "string",
                        "description": "The overdue time of the EIP.\n"
                    },
                    "period": {
                        "type": "integer",
                        "description": "The period of the EIP Address, the valid value range in 1~9 or 12 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid Eip or changing the billing_type from PostPaid to PrePaid.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the EIP.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the EIP.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:eip/AddressTag:AddressTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:eip/associate:Associate": {
            "description": "Provides a resource to manage eip associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooImages = volcengine.ecs.Images({\n    osType: \"Linux\",\n    visibility: \"public\",\n    instanceTypeId: \"ecs.g1.large\",\n});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooSecurityGroup = new volcengine.vpc.SecurityGroup(\"fooSecurityGroup\", {\n    vpcId: fooVpc.id,\n    securityGroupName: \"acc-test-security-group\",\n});\nconst fooInstance = new volcengine.ecs.Instance(\"fooInstance\", {\n    imageId: fooImages.then(fooImages =\u003e fooImages.images?[0]?.imageId),\n    instanceType: \"ecs.g1.large\",\n    instanceName: \"acc-test-ecs-name\",\n    password: \"93f0cb0614Aab12\",\n    instanceChargeType: \"PostPaid\",\n    systemVolumeType: \"ESSD_PL0\",\n    systemVolumeSize: 40,\n    subnetId: fooSubnet.id,\n    securityGroupIds: [fooSecurityGroup.id],\n});\nconst fooAddress = new volcengine.eip.Address(\"fooAddress\", {billingType: \"PostPaidByTraffic\"});\nconst fooAssociate = new volcengine.eip.Associate(\"fooAssociate\", {\n    allocationId: fooAddress.id,\n    instanceId: fooInstance.id,\n    instanceType: \"EcsInstance\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_images = volcengine.ecs.images(os_type=\"Linux\",\n    visibility=\"public\",\n    instance_type_id=\"ecs.g1.large\")\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_security_group = volcengine.vpc.SecurityGroup(\"fooSecurityGroup\",\n    vpc_id=foo_vpc.id,\n    security_group_name=\"acc-test-security-group\")\nfoo_instance = volcengine.ecs.Instance(\"fooInstance\",\n    image_id=foo_images.images[0].image_id,\n    instance_type=\"ecs.g1.large\",\n    instance_name=\"acc-test-ecs-name\",\n    password=\"93f0cb0614Aab12\",\n    instance_charge_type=\"PostPaid\",\n    system_volume_type=\"ESSD_PL0\",\n    system_volume_size=40,\n    subnet_id=foo_subnet.id,\n    security_group_ids=[foo_security_group.id])\nfoo_address = volcengine.eip.Address(\"fooAddress\", billing_type=\"PostPaidByTraffic\")\nfoo_associate = volcengine.eip.Associate(\"fooAssociate\",\n    allocation_id=foo_address.id,\n    instance_id=foo_instance.id,\n    instance_type=\"EcsInstance\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooImages = Output.Create(Volcengine.Ecs.Images.InvokeAsync(new Volcengine.Ecs.ImagesArgs\n        {\n            OsType = \"Linux\",\n            Visibility = \"public\",\n            InstanceTypeId = \"ecs.g1.large\",\n        }));\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup(\"fooSecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            VpcId = fooVpc.Id,\n            SecurityGroupName = \"acc-test-security-group\",\n        });\n        var fooInstance = new Volcengine.Ecs.Instance(\"fooInstance\", new Volcengine.Ecs.InstanceArgs\n        {\n            ImageId = fooImages.Apply(fooImages =\u003e fooImages.Images?[0]?.ImageId),\n            InstanceType = \"ecs.g1.large\",\n            InstanceName = \"acc-test-ecs-name\",\n            Password = \"93f0cb0614Aab12\",\n            InstanceChargeType = \"PostPaid\",\n            SystemVolumeType = \"ESSD_PL0\",\n            SystemVolumeSize = 40,\n            SubnetId = fooSubnet.Id,\n            SecurityGroupIds = \n            {\n                fooSecurityGroup.Id,\n            },\n        });\n        var fooAddress = new Volcengine.Eip.Address(\"fooAddress\", new Volcengine.Eip.AddressArgs\n        {\n            BillingType = \"PostPaidByTraffic\",\n        });\n        var fooAssociate = new Volcengine.Eip.Associate(\"fooAssociate\", new Volcengine.Eip.AssociateArgs\n        {\n            AllocationId = fooAddress.Id,\n            InstanceId = fooInstance.Id,\n            InstanceType = \"EcsInstance\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/eip\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooImages, err := ecs.Images(ctx, \u0026ecs.ImagesArgs{\n\t\t\tOsType:         pulumi.StringRef(\"Linux\"),\n\t\t\tVisibility:     pulumi.StringRef(\"public\"),\n\t\t\tInstanceTypeId: pulumi.StringRef(\"ecs.g1.large\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSecurityGroup, err := vpc.NewSecurityGroup(ctx, \"fooSecurityGroup\", \u0026vpc.SecurityGroupArgs{\n\t\t\tVpcId:             fooVpc.ID(),\n\t\t\tSecurityGroupName: pulumi.String(\"acc-test-security-group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooInstance, err := ecs.NewInstance(ctx, \"fooInstance\", \u0026ecs.InstanceArgs{\n\t\t\tImageId:            pulumi.String(fooImages.Images[0].ImageId),\n\t\t\tInstanceType:       pulumi.String(\"ecs.g1.large\"),\n\t\t\tInstanceName:       pulumi.String(\"acc-test-ecs-name\"),\n\t\t\tPassword:           pulumi.String(\"93f0cb0614Aab12\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tSystemVolumeType:   pulumi.String(\"ESSD_PL0\"),\n\t\t\tSystemVolumeSize:   pulumi.Int(40),\n\t\t\tSubnetId:           fooSubnet.ID(),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tfooSecurityGroup.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooAddress, err := eip.NewAddress(ctx, \"fooAddress\", \u0026eip.AddressArgs{\n\t\t\tBillingType: pulumi.String(\"PostPaidByTraffic\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = eip.NewAssociate(ctx, \"fooAssociate\", \u0026eip.AssociateArgs{\n\t\t\tAllocationId: fooAddress.ID(),\n\t\t\tInstanceId:   fooInstance.ID(),\n\t\t\tInstanceType: pulumi.String(\"EcsInstance\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        final var fooImages = EcsFunctions.Images();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooSecurityGroup = new SecurityGroup(\"fooSecurityGroup\", SecurityGroupArgs.builder()        \n            .vpcId(fooVpc.id())\n            .securityGroupName(\"acc-test-security-group\")\n            .build());\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .imageId(fooImages.images()[0].imageId())\n            .instanceType(\"ecs.g1.large\")\n            .instanceName(\"acc-test-ecs-name\")\n            .password(\"93f0cb0614Aab12\")\n            .instanceChargeType(\"PostPaid\")\n            .systemVolumeType(\"ESSD_PL0\")\n            .systemVolumeSize(40)\n            .subnetId(fooSubnet.id())\n            .securityGroupIds(fooSecurityGroup.id())\n            .build());\n\n        var fooAddress = new Address(\"fooAddress\", AddressArgs.builder()        \n            .billingType(\"PostPaidByTraffic\")\n            .build());\n\n        var fooAssociate = new Associate(\"fooAssociate\", AssociateArgs.builder()        \n            .allocationId(fooAddress.id())\n            .instanceId(fooInstance.id())\n            .instanceType(\"EcsInstance\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooSecurityGroup:\n    type: volcengine:vpc:SecurityGroup\n    properties:\n      vpcId: ${fooVpc.id}\n      securityGroupName: acc-test-security-group\n  fooInstance:\n    type: volcengine:ecs:Instance\n    properties:\n      imageId: ${fooImages.images[0].imageId}\n      instanceType: ecs.g1.large\n      instanceName: acc-test-ecs-name\n      password: 93f0cb0614Aab12\n      instanceChargeType: PostPaid\n      systemVolumeType: ESSD_PL0\n      systemVolumeSize: 40\n      subnetId: ${fooSubnet.id}\n      securityGroupIds:\n        - ${fooSecurityGroup.id}\n  fooAddress:\n    type: volcengine:eip:Address\n    properties:\n      billingType: PostPaidByTraffic\n  fooAssociate:\n    type: volcengine:eip:Associate\n    properties:\n      allocationId: ${fooAddress.id}\n      instanceId: ${fooInstance.id}\n      instanceType: EcsInstance\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n  fooImages:\n    Fn::Invoke:\n      Function: volcengine:ecs:Images\n      Arguments:\n        osType: Linux\n        visibility: public\n        instanceTypeId: ecs.g1.large\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nEip associate can be imported using the eip allocation_id:instance_id, e.g.\n\n```sh\n $ pulumi import volcengine:eip/associate:Associate default eip-274oj9a8rs9a87fap8sf9515b:i-cm9t9ug9lggu79yr5tcw\n```\n\n ",
            "properties": {
                "allocationId": {
                    "type": "string",
                    "description": "The allocation id of the EIP.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id which be associated to the EIP.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the associated instance,the value is `Nat` or `NetworkInterface` or `ClbInstance` or `EcsInstance` or `HaVip`.\n"
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "The private IP address of the instance will be associated to the EIP.\n"
                }
            },
            "required": [
                "allocationId",
                "instanceId",
                "instanceType",
                "privateIpAddress"
            ],
            "inputProperties": {
                "allocationId": {
                    "type": "string",
                    "description": "The allocation id of the EIP.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id which be associated to the EIP.\n",
                    "willReplaceOnChanges": true
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the associated instance,the value is `Nat` or `NetworkInterface` or `ClbInstance` or `EcsInstance` or `HaVip`.\n",
                    "willReplaceOnChanges": true
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "The private IP address of the instance will be associated to the EIP.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "allocationId",
                "instanceId",
                "instanceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Associate resources.\n",
                "properties": {
                    "allocationId": {
                        "type": "string",
                        "description": "The allocation id of the EIP.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance id which be associated to the EIP.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of the associated instance,the value is `Nat` or `NetworkInterface` or `ClbInstance` or `EcsInstance` or `HaVip`.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateIpAddress": {
                        "type": "string",
                        "description": "The private IP address of the instance will be associated to the EIP.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:escloud/instance:Instance": {
            "description": "Provides a resource to manage escloud instance\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.escloud.Instance(\"foo\", {\n    instanceConfiguration: {\n        adminPassword: \"xxxx\",\n        adminUserName: \"admin\",\n        chargeType: \"PostPaid\",\n        configurationCode: \"es.standard\",\n        enableHttps: true,\n        enablePureMaster: true,\n        forceRestartAfterScale: false,\n        instanceName: \"from-tf4\",\n        nodeSpecsAssigns: [\n            {\n                number: 3,\n                resourceSpecName: \"es.x4.medium\",\n                storageSize: 100,\n                storageSpecName: \"es.volume.essd.pl0\",\n                type: \"Master\",\n            },\n            {\n                number: 2,\n                resourceSpecName: \"es.x4.large\",\n                storageSize: 100,\n                storageSpecName: \"es.volume.essd.pl0\",\n                type: \"Hot\",\n            },\n            {\n                number: 1,\n                resourceSpecName: \"kibana.x2.small\",\n                type: \"Kibana\",\n            },\n        ],\n        projectName: \"default\",\n        subnetId: \"subnet-2bz9vxrixqigw2dx0eextz50p\",\n        version: \"V6_7\",\n        zoneNumber: 1,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.escloud.Instance(\"foo\", instance_configuration=volcengine.escloud.InstanceInstanceConfigurationArgs(\n    admin_password=\"xxxx\",\n    admin_user_name=\"admin\",\n    charge_type=\"PostPaid\",\n    configuration_code=\"es.standard\",\n    enable_https=True,\n    enable_pure_master=True,\n    force_restart_after_scale=False,\n    instance_name=\"from-tf4\",\n    node_specs_assigns=[\n        volcengine.escloud.InstanceInstanceConfigurationNodeSpecsAssignArgs(\n            number=3,\n            resource_spec_name=\"es.x4.medium\",\n            storage_size=100,\n            storage_spec_name=\"es.volume.essd.pl0\",\n            type=\"Master\",\n        ),\n        volcengine.escloud.InstanceInstanceConfigurationNodeSpecsAssignArgs(\n            number=2,\n            resource_spec_name=\"es.x4.large\",\n            storage_size=100,\n            storage_spec_name=\"es.volume.essd.pl0\",\n            type=\"Hot\",\n        ),\n        volcengine.escloud.InstanceInstanceConfigurationNodeSpecsAssignArgs(\n            number=1,\n            resource_spec_name=\"kibana.x2.small\",\n            type=\"Kibana\",\n        ),\n    ],\n    project_name=\"default\",\n    subnet_id=\"subnet-2bz9vxrixqigw2dx0eextz50p\",\n    version=\"V6_7\",\n    zone_number=1,\n))\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Escloud.Instance(\"foo\", new Volcengine.Escloud.InstanceArgs\n        {\n            InstanceConfiguration = new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationArgs\n            {\n                AdminPassword = \"xxxx\",\n                AdminUserName = \"admin\",\n                ChargeType = \"PostPaid\",\n                ConfigurationCode = \"es.standard\",\n                EnableHttps = true,\n                EnablePureMaster = true,\n                ForceRestartAfterScale = false,\n                InstanceName = \"from-tf4\",\n                NodeSpecsAssigns = \n                {\n                    new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationNodeSpecsAssignArgs\n                    {\n                        Number = 3,\n                        ResourceSpecName = \"es.x4.medium\",\n                        StorageSize = 100,\n                        StorageSpecName = \"es.volume.essd.pl0\",\n                        Type = \"Master\",\n                    },\n                    new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationNodeSpecsAssignArgs\n                    {\n                        Number = 2,\n                        ResourceSpecName = \"es.x4.large\",\n                        StorageSize = 100,\n                        StorageSpecName = \"es.volume.essd.pl0\",\n                        Type = \"Hot\",\n                    },\n                    new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationNodeSpecsAssignArgs\n                    {\n                        Number = 1,\n                        ResourceSpecName = \"kibana.x2.small\",\n                        Type = \"Kibana\",\n                    },\n                },\n                ProjectName = \"default\",\n                SubnetId = \"subnet-2bz9vxrixqigw2dx0eextz50p\",\n                Version = \"V6_7\",\n                ZoneNumber = 1,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/escloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/escloud\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := escloud.NewInstance(ctx, \"foo\", \u0026escloud.InstanceArgs{\n\t\t\tInstanceConfiguration: \u0026escloud.InstanceInstanceConfigurationArgs{\n\t\t\t\tAdminPassword:          pulumi.String(\"xxxx\"),\n\t\t\t\tAdminUserName:          pulumi.String(\"admin\"),\n\t\t\t\tChargeType:             pulumi.String(\"PostPaid\"),\n\t\t\t\tConfigurationCode:      pulumi.String(\"es.standard\"),\n\t\t\t\tEnableHttps:            pulumi.Bool(true),\n\t\t\t\tEnablePureMaster:       pulumi.Bool(true),\n\t\t\t\tForceRestartAfterScale: pulumi.Bool(false),\n\t\t\t\tInstanceName:           pulumi.String(\"from-tf4\"),\n\t\t\t\tNodeSpecsAssigns: escloud.InstanceInstanceConfigurationNodeSpecsAssignArray{\n\t\t\t\t\t\u0026escloud.InstanceInstanceConfigurationNodeSpecsAssignArgs{\n\t\t\t\t\t\tNumber:           pulumi.Int(3),\n\t\t\t\t\t\tResourceSpecName: pulumi.String(\"es.x4.medium\"),\n\t\t\t\t\t\tStorageSize:      pulumi.Int(100),\n\t\t\t\t\t\tStorageSpecName:  pulumi.String(\"es.volume.essd.pl0\"),\n\t\t\t\t\t\tType:             pulumi.String(\"Master\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026escloud.InstanceInstanceConfigurationNodeSpecsAssignArgs{\n\t\t\t\t\t\tNumber:           pulumi.Int(2),\n\t\t\t\t\t\tResourceSpecName: pulumi.String(\"es.x4.large\"),\n\t\t\t\t\t\tStorageSize:      pulumi.Int(100),\n\t\t\t\t\t\tStorageSpecName:  pulumi.String(\"es.volume.essd.pl0\"),\n\t\t\t\t\t\tType:             pulumi.String(\"Hot\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026escloud.InstanceInstanceConfigurationNodeSpecsAssignArgs{\n\t\t\t\t\t\tNumber:           pulumi.Int(1),\n\t\t\t\t\t\tResourceSpecName: pulumi.String(\"kibana.x2.small\"),\n\t\t\t\t\t\tType:             pulumi.String(\"Kibana\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tProjectName: pulumi.String(\"default\"),\n\t\t\t\tSubnetId:    pulumi.String(\"subnet-2bz9vxrixqigw2dx0eextz50p\"),\n\t\t\t\tVersion:     pulumi.String(\"V6_7\"),\n\t\t\t\tZoneNumber:  pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Instance(\"foo\", InstanceArgs.builder()        \n            .instanceConfiguration(InstanceInstanceConfigurationArgs.builder()\n                .adminPassword(\"xxxx\")\n                .adminUserName(\"admin\")\n                .chargeType(\"PostPaid\")\n                .configurationCode(\"es.standard\")\n                .enableHttps(true)\n                .enablePureMaster(true)\n                .forceRestartAfterScale(false)\n                .instanceName(\"from-tf4\")\n                .nodeSpecsAssigns(                \n                    InstanceInstanceConfigurationNodeSpecsAssignArgs.builder()\n                        .number(3)\n                        .resourceSpecName(\"es.x4.medium\")\n                        .storageSize(100)\n                        .storageSpecName(\"es.volume.essd.pl0\")\n                        .type(\"Master\")\n                        .build(),\n                    InstanceInstanceConfigurationNodeSpecsAssignArgs.builder()\n                        .number(2)\n                        .resourceSpecName(\"es.x4.large\")\n                        .storageSize(100)\n                        .storageSpecName(\"es.volume.essd.pl0\")\n                        .type(\"Hot\")\n                        .build(),\n                    InstanceInstanceConfigurationNodeSpecsAssignArgs.builder()\n                        .number(1)\n                        .resourceSpecName(\"kibana.x2.small\")\n                        .type(\"Kibana\")\n                        .build())\n                .projectName(\"default\")\n                .subnetId(\"subnet-2bz9vxrixqigw2dx0eextz50p\")\n                .version(\"V6_7\")\n                .zoneNumber(1)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:escloud:Instance\n    properties:\n      instanceConfiguration:\n        adminPassword: xxxx\n        adminUserName: admin\n        chargeType: PostPaid\n        configurationCode: es.standard\n        enableHttps: true\n        enablePureMaster: true\n        forceRestartAfterScale: false\n        instanceName: from-tf4\n        nodeSpecsAssigns:\n          - number: 3\n            resourceSpecName: es.x4.medium\n            storageSize: 100\n            storageSpecName: es.volume.essd.pl0\n            type: Master\n          - number: 2\n            resourceSpecName: es.x4.large\n            storageSize: 100\n            storageSpecName: es.volume.essd.pl0\n            type: Hot\n          - number: 1\n            resourceSpecName: kibana.x2.small\n            type: Kibana\n        projectName: default\n        subnetId: subnet-2bz9vxrixqigw2dx0eextz50p\n        version: V6_7\n        zoneNumber: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nESCloud Instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:escloud/instance:Instance default n769ewmjjqyqh5dv\n```\n\n ",
            "properties": {
                "instanceConfiguration": {
                    "$ref": "#/types/volcengine:escloud/InstanceInstanceConfiguration:InstanceInstanceConfiguration",
                    "description": "The configuration of ESCloud instance.\n"
                }
            },
            "required": [
                "instanceConfiguration"
            ],
            "inputProperties": {
                "instanceConfiguration": {
                    "$ref": "#/types/volcengine:escloud/InstanceInstanceConfiguration:InstanceInstanceConfiguration",
                    "description": "The configuration of ESCloud instance.\n"
                }
            },
            "requiredInputs": [
                "instanceConfiguration"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "instanceConfiguration": {
                        "$ref": "#/types/volcengine:escloud/InstanceInstanceConfiguration:InstanceInstanceConfiguration",
                        "description": "The configuration of ESCloud instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:iam/accessKey:AccessKey": {
            "description": "Provides a resource to manage iam access key\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.iam.AccessKey(\"foo\", {\n    secretFile: \"./sk\",\n    status: \"active\",\n    userName: \"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.iam.AccessKey(\"foo\",\n    secret_file=\"./sk\",\n    status=\"active\",\n    user_name=\"\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Iam.AccessKey(\"foo\", new Volcengine.Iam.AccessKeyArgs\n        {\n            SecretFile = \"./sk\",\n            Status = \"active\",\n            UserName = \"\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.NewAccessKey(ctx, \"foo\", \u0026iam.AccessKeyArgs{\n\t\t\tSecretFile: pulumi.String(\"./sk\"),\n\t\t\tStatus:     pulumi.String(\"active\"),\n\t\t\tUserName:   pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AccessKey(\"foo\", AccessKeyArgs.builder()        \n            .secretFile(\"./sk\")\n            .status(\"active\")\n            .userName(\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:iam:AccessKey\n    properties:\n      secretFile: ./sk\n      status: active\n      userName:\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam access key don't support import ",
            "properties": {
                "createDate": {
                    "type": "string",
                    "description": "The create date of the access key.\n"
                },
                "encryptedSecret": {
                    "type": "string",
                    "description": "The encrypted secret of the access key by pgp key, base64 encoded.\n"
                },
                "keyFingerprint": {
                    "type": "string",
                    "description": "The key fingerprint of the encrypted secret.\n"
                },
                "pgpKey": {
                    "type": "string",
                    "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret of the access key.\n"
                },
                "secretFile": {
                    "type": "string",
                    "description": "The file to save the access id and secret. Strongly suggest you to specified it when you creating access key, otherwise, you wouldn't get its secret ever.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the access key, Optional choice contains `active` or `inactive`.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The user name.\n"
                }
            },
            "required": [
                "createDate",
                "encryptedSecret",
                "keyFingerprint",
                "secret",
                "userName"
            ],
            "inputProperties": {
                "pgpKey": {
                    "type": "string",
                    "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n",
                    "willReplaceOnChanges": true
                },
                "secretFile": {
                    "type": "string",
                    "description": "The file to save the access id and secret. Strongly suggest you to specified it when you creating access key, otherwise, you wouldn't get its secret ever.\n",
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "The status of the access key, Optional choice contains `active` or `inactive`.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The user name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessKey resources.\n",
                "properties": {
                    "createDate": {
                        "type": "string",
                        "description": "The create date of the access key.\n"
                    },
                    "encryptedSecret": {
                        "type": "string",
                        "description": "The encrypted secret of the access key by pgp key, base64 encoded.\n"
                    },
                    "keyFingerprint": {
                        "type": "string",
                        "description": "The key fingerprint of the encrypted secret.\n"
                    },
                    "pgpKey": {
                        "type": "string",
                        "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "The secret of the access key.\n"
                    },
                    "secretFile": {
                        "type": "string",
                        "description": "The file to save the access id and secret. Strongly suggest you to specified it when you creating access key, otherwise, you wouldn't get its secret ever.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the access key, Optional choice contains `active` or `inactive`.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The user name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:iam/loginProfile:LoginProfile": {
            "description": "Provides a resource to manage iam login profile\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.iam.LoginProfile(\"foo\", {\n    loginAllowed: true,\n    password: \"******\",\n    passwordResetRequired: false,\n    userName: \"tf-test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.iam.LoginProfile(\"foo\",\n    login_allowed=True,\n    password=\"******\",\n    password_reset_required=False,\n    user_name=\"tf-test\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Iam.LoginProfile(\"foo\", new Volcengine.Iam.LoginProfileArgs\n        {\n            LoginAllowed = true,\n            Password = \"******\",\n            PasswordResetRequired = false,\n            UserName = \"tf-test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.NewLoginProfile(ctx, \"foo\", \u0026iam.LoginProfileArgs{\n\t\t\tLoginAllowed:          pulumi.Bool(true),\n\t\t\tPassword:              pulumi.String(\"******\"),\n\t\t\tPasswordResetRequired: pulumi.Bool(false),\n\t\t\tUserName:              pulumi.String(\"tf-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new LoginProfile(\"foo\", LoginProfileArgs.builder()        \n            .loginAllowed(true)\n            .password(\"******\")\n            .passwordResetRequired(false)\n            .userName(\"tf-test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:iam:LoginProfile\n    properties:\n      loginAllowed: true\n      password: '******'\n      passwordResetRequired: false\n      userName: tf-test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLogin profile can be imported using the UserName, e.g.\n\n```sh\n $ pulumi import volcengine:iam/loginProfile:LoginProfile default user_name\n```\n\n ",
            "properties": {
                "loginAllowed": {
                    "type": "boolean",
                    "description": "The flag of login allowed.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password.\n"
                },
                "passwordResetRequired": {
                    "type": "boolean",
                    "description": "Is required reset password when next time login in.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The user name.\n"
                }
            },
            "required": [
                "password",
                "userName"
            ],
            "inputProperties": {
                "loginAllowed": {
                    "type": "boolean",
                    "description": "The flag of login allowed.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password.\n"
                },
                "passwordResetRequired": {
                    "type": "boolean",
                    "description": "Is required reset password when next time login in.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The user name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "password",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoginProfile resources.\n",
                "properties": {
                    "loginAllowed": {
                        "type": "boolean",
                        "description": "The flag of login allowed.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password.\n"
                    },
                    "passwordResetRequired": {
                        "type": "boolean",
                        "description": "Is required reset password when next time login in.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The user name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:iam/policy:Policy": {
            "description": "Provides a resource to manage iam policy\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.iam.Policy(\"foo\", {\n    description: \"created by terraform 1\",\n    policyDocument: \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n    policyName: \"TerraformResourceTest1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.iam.Policy(\"foo\",\n    description=\"created by terraform 1\",\n    policy_document=\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n    policy_name=\"TerraformResourceTest1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Iam.Policy(\"foo\", new Volcengine.Iam.PolicyArgs\n        {\n            Description = \"created by terraform 1\",\n            PolicyDocument = \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n            PolicyName = \"TerraformResourceTest1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.NewPolicy(ctx, \"foo\", \u0026iam.PolicyArgs{\n\t\t\tDescription:    pulumi.String(\"created by terraform 1\"),\n\t\t\tPolicyDocument: pulumi.String(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\"),\n\t\t\tPolicyName:     pulumi.String(\"TerraformResourceTest1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Policy(\"foo\", PolicyArgs.builder()        \n            .description(\"created by terraform 1\")\n            .policyDocument(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\")\n            .policyName(\"TerraformResourceTest1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:iam:Policy\n    properties:\n      description: created by terraform 1\n      policyDocument: '{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}'\n      policyName: TerraformResourceTest1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam policy can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:iam/policy:Policy default TerraformTestPolicy\n```\n\n ",
            "properties": {
                "createDate": {
                    "type": "string",
                    "description": "The create time of the Policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Policy.\n"
                },
                "policyDocument": {
                    "type": "string",
                    "description": "The document of the Policy.\n"
                },
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n"
                },
                "policyTrn": {
                    "type": "string",
                    "description": "The resource name of the Policy.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n"
                },
                "updateDate": {
                    "type": "string",
                    "description": "The update time of the Policy.\n"
                }
            },
            "required": [
                "createDate",
                "policyDocument",
                "policyName",
                "policyTrn",
                "policyType",
                "updateDate"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Policy.\n"
                },
                "policyDocument": {
                    "type": "string",
                    "description": "The document of the Policy.\n"
                },
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n"
                }
            },
            "requiredInputs": [
                "policyDocument",
                "policyName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "createDate": {
                        "type": "string",
                        "description": "The create time of the Policy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Policy.\n"
                    },
                    "policyDocument": {
                        "type": "string",
                        "description": "The document of the Policy.\n"
                    },
                    "policyName": {
                        "type": "string",
                        "description": "The name of the Policy.\n"
                    },
                    "policyTrn": {
                        "type": "string",
                        "description": "The resource name of the Policy.\n"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The type of the Policy.\n"
                    },
                    "updateDate": {
                        "type": "string",
                        "description": "The update time of the Policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:iam/role:Role": {
            "description": "Provides a resource to manage iam role\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.iam.Role(\"foo\", {\n    description: \"created by terraform\",\n    displayName: \"terraform role\",\n    maxSessionDuration: 43200,\n    roleName: \"TerraformTestRole\",\n    trustPolicyDocument: \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.iam.Role(\"foo\",\n    description=\"created by terraform\",\n    display_name=\"terraform role\",\n    max_session_duration=43200,\n    role_name=\"TerraformTestRole\",\n    trust_policy_document=\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Iam.Role(\"foo\", new Volcengine.Iam.RoleArgs\n        {\n            Description = \"created by terraform\",\n            DisplayName = \"terraform role\",\n            MaxSessionDuration = 43200,\n            RoleName = \"TerraformTestRole\",\n            TrustPolicyDocument = \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.NewRole(ctx, \"foo\", \u0026iam.RoleArgs{\n\t\t\tDescription:         pulumi.String(\"created by terraform\"),\n\t\t\tDisplayName:         pulumi.String(\"terraform role\"),\n\t\t\tMaxSessionDuration:  pulumi.Int(43200),\n\t\t\tRoleName:            pulumi.String(\"TerraformTestRole\"),\n\t\t\tTrustPolicyDocument: pulumi.String(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Role(\"foo\", RoleArgs.builder()        \n            .description(\"created by terraform\")\n            .displayName(\"terraform role\")\n            .maxSessionDuration(43200)\n            .roleName(\"TerraformTestRole\")\n            .trustPolicyDocument(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:iam:Role\n    properties:\n      description: created by terraform\n      displayName: terraform role\n      maxSessionDuration: 43200\n      roleName: TerraformTestRole\n      trustPolicyDocument: '{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"sts:AssumeRole\"],\"Principal\":{\"Service\":[\"auto_scaling\"]}}]}'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam role can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:iam/role:Role default TerraformTestRole\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the Role.\n"
                },
                "maxSessionDuration": {
                    "type": "integer",
                    "description": "The max session duration of the Role.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the Role.\n"
                },
                "trn": {
                    "type": "string",
                    "description": "The resource name of the Role.\n"
                },
                "trustPolicyDocument": {
                    "type": "string",
                    "description": "The trust policy document of the Role.\n"
                }
            },
            "required": [
                "displayName",
                "roleName",
                "trn",
                "trustPolicyDocument"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the Role.\n"
                },
                "maxSessionDuration": {
                    "type": "integer",
                    "description": "The max session duration of the Role.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the Role.\n",
                    "willReplaceOnChanges": true
                },
                "trustPolicyDocument": {
                    "type": "string",
                    "description": "The trust policy document of the Role.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "roleName",
                "trustPolicyDocument"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Role.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the Role.\n"
                    },
                    "maxSessionDuration": {
                        "type": "integer",
                        "description": "The max session duration of the Role.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the Role.\n",
                        "willReplaceOnChanges": true
                    },
                    "trn": {
                        "type": "string",
                        "description": "The resource name of the Role.\n"
                    },
                    "trustPolicyDocument": {
                        "type": "string",
                        "description": "The trust policy document of the Role.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:iam/rolePolicyAttachment:RolePolicyAttachment": {
            "description": "Provides a resource to manage iam role policy attachment\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst role = new volcengine.iam.Role(\"role\", {\n    roleName: \"TerraformTestRole\",\n    displayName: \"terraform role\",\n    trustPolicyDocument: \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\",\n    description: \"created by terraform\",\n    maxSessionDuration: 43200,\n});\nconst policy = new volcengine.iam.Policy(\"policy\", {\n    policyName: \"TerraformResourceTest1\",\n    description: \"created by terraform 1\",\n    policyDocument: \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n});\nconst foo = new volcengine.iam.RolePolicyAttachment(\"foo\", {\n    roleName: role.id,\n    policyName: policy.id,\n    policyType: policy.policyType,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nrole = volcengine.iam.Role(\"role\",\n    role_name=\"TerraformTestRole\",\n    display_name=\"terraform role\",\n    trust_policy_document=\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\",\n    description=\"created by terraform\",\n    max_session_duration=43200)\npolicy = volcengine.iam.Policy(\"policy\",\n    policy_name=\"TerraformResourceTest1\",\n    description=\"created by terraform 1\",\n    policy_document=\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\")\nfoo = volcengine.iam.RolePolicyAttachment(\"foo\",\n    role_name=role.id,\n    policy_name=policy.id,\n    policy_type=policy.policy_type)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var role = new Volcengine.Iam.Role(\"role\", new Volcengine.Iam.RoleArgs\n        {\n            RoleName = \"TerraformTestRole\",\n            DisplayName = \"terraform role\",\n            TrustPolicyDocument = \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\",\n            Description = \"created by terraform\",\n            MaxSessionDuration = 43200,\n        });\n        var policy = new Volcengine.Iam.Policy(\"policy\", new Volcengine.Iam.PolicyArgs\n        {\n            PolicyName = \"TerraformResourceTest1\",\n            Description = \"created by terraform 1\",\n            PolicyDocument = \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n        });\n        var foo = new Volcengine.Iam.RolePolicyAttachment(\"foo\", new Volcengine.Iam.RolePolicyAttachmentArgs\n        {\n            RoleName = role.Id,\n            PolicyName = policy.Id,\n            PolicyType = policy.PolicyType,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trole, err := iam.NewRole(ctx, \"role\", \u0026iam.RoleArgs{\n\t\t\tRoleName:            pulumi.String(\"TerraformTestRole\"),\n\t\t\tDisplayName:         pulumi.String(\"terraform role\"),\n\t\t\tTrustPolicyDocument: pulumi.String(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\"),\n\t\t\tDescription:         pulumi.String(\"created by terraform\"),\n\t\t\tMaxSessionDuration:  pulumi.Int(43200),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpolicy, err := iam.NewPolicy(ctx, \"policy\", \u0026iam.PolicyArgs{\n\t\t\tPolicyName:     pulumi.String(\"TerraformResourceTest1\"),\n\t\t\tDescription:    pulumi.String(\"created by terraform 1\"),\n\t\t\tPolicyDocument: pulumi.String(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = iam.NewRolePolicyAttachment(ctx, \"foo\", \u0026iam.RolePolicyAttachmentArgs{\n\t\t\tRoleName:   role.ID(),\n\t\t\tPolicyName: policy.ID(),\n\t\t\tPolicyType: policy.PolicyType,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var role = new Role(\"role\", RoleArgs.builder()        \n            .roleName(\"TerraformTestRole\")\n            .displayName(\"terraform role\")\n            .trustPolicyDocument(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\")\n            .description(\"created by terraform\")\n            .maxSessionDuration(43200)\n            .build());\n\n        var policy = new Policy(\"policy\", PolicyArgs.builder()        \n            .policyName(\"TerraformResourceTest1\")\n            .description(\"created by terraform 1\")\n            .policyDocument(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\")\n            .build());\n\n        var foo = new RolePolicyAttachment(\"foo\", RolePolicyAttachmentArgs.builder()        \n            .roleName(role.id())\n            .policyName(policy.id())\n            .policyType(policy.policyType())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  role:\n    type: volcengine:iam:Role\n    properties:\n      roleName: TerraformTestRole\n      displayName: terraform role\n      trustPolicyDocument: '{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"sts:AssumeRole\"],\"Principal\":{\"Service\":[\"auto_scaling\"]}}]}'\n      description: created by terraform\n      maxSessionDuration: 43200\n  policy:\n    type: volcengine:iam:Policy\n    properties:\n      policyName: TerraformResourceTest1\n      description: created by terraform 1\n      policyDocument: '{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}'\n  foo:\n    type: volcengine:iam:RolePolicyAttachment\n    properties:\n      roleName: ${role.id}\n      policyName: ${policy.id}\n      policyType: ${policy.policyType}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam role policy attachment can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:iam/rolePolicyAttachment:RolePolicyAttachment default TerraformTestRole:TerraformTestPolicy:Custom\n```\n\n ",
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the Role.\n"
                }
            },
            "required": [
                "policyName",
                "policyType",
                "roleName"
            ],
            "inputProperties": {
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n",
                    "willReplaceOnChanges": true
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the Role.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "policyName",
                "policyType",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RolePolicyAttachment resources.\n",
                "properties": {
                    "policyName": {
                        "type": "string",
                        "description": "The name of the Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The type of the Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the Role.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:iam/user:User": {
            "description": "Provides a resource to manage iam user\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.iam.User(\"foo\", {\n    description: \"test\",\n    displayName: \"name\",\n    userName: \"tf-test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.iam.User(\"foo\",\n    description=\"test\",\n    display_name=\"name\",\n    user_name=\"tf-test\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Iam.User(\"foo\", new Volcengine.Iam.UserArgs\n        {\n            Description = \"test\",\n            DisplayName = \"name\",\n            UserName = \"tf-test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.NewUser(ctx, \"foo\", \u0026iam.UserArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tDisplayName: pulumi.String(\"name\"),\n\t\t\tUserName:    pulumi.String(\"tf-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new User(\"foo\", UserArgs.builder()        \n            .description(\"test\")\n            .displayName(\"name\")\n            .userName(\"tf-test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:iam:User\n    properties:\n      description: test\n      displayName: name\n      userName: tf-test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam user can be imported using the UserName, e.g.\n\n```sh\n $ pulumi import volcengine:iam/user:User default user_name\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account id of the user.\n"
                },
                "createDate": {
                    "type": "string",
                    "description": "The create date of the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the user.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the user.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "mobilePhone": {
                    "type": "string",
                    "description": "The mobile phone of the user.\n"
                },
                "trn": {
                    "type": "string",
                    "description": "The trn of the user.\n"
                },
                "updateDate": {
                    "type": "string",
                    "description": "The update date of the user.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "required": [
                "accountId",
                "createDate",
                "trn",
                "updateDate",
                "userName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the user.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the user.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "mobilePhone": {
                    "type": "string",
                    "description": "The mobile phone of the user.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "requiredInputs": [
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account id of the user.\n"
                    },
                    "createDate": {
                        "type": "string",
                        "description": "The create date of the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the user.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the user.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "The mobile phone of the user.\n"
                    },
                    "trn": {
                        "type": "string",
                        "description": "The trn of the user.\n"
                    },
                    "updateDate": {
                        "type": "string",
                        "description": "The update date of the user.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:iam/userPolicyAttachment:UserPolicyAttachment": {
            "description": "Provides a resource to manage iam user policy attachment\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst user = new volcengine.iam.User(\"user\", {\n    userName: \"TfTest\",\n    description: \"test\",\n});\nconst policy = new volcengine.iam.Policy(\"policy\", {\n    policyName: \"TerraformResourceTest1\",\n    description: \"created by terraform 1\",\n    policyDocument: \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n});\nconst foo = new volcengine.iam.UserPolicyAttachment(\"foo\", {\n    userName: user.userName,\n    policyName: policy.policyName,\n    policyType: policy.policyType,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nuser = volcengine.iam.User(\"user\",\n    user_name=\"TfTest\",\n    description=\"test\")\npolicy = volcengine.iam.Policy(\"policy\",\n    policy_name=\"TerraformResourceTest1\",\n    description=\"created by terraform 1\",\n    policy_document=\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\")\nfoo = volcengine.iam.UserPolicyAttachment(\"foo\",\n    user_name=user.user_name,\n    policy_name=policy.policy_name,\n    policy_type=policy.policy_type)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new Volcengine.Iam.User(\"user\", new Volcengine.Iam.UserArgs\n        {\n            UserName = \"TfTest\",\n            Description = \"test\",\n        });\n        var policy = new Volcengine.Iam.Policy(\"policy\", new Volcengine.Iam.PolicyArgs\n        {\n            PolicyName = \"TerraformResourceTest1\",\n            Description = \"created by terraform 1\",\n            PolicyDocument = \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n        });\n        var foo = new Volcengine.Iam.UserPolicyAttachment(\"foo\", new Volcengine.Iam.UserPolicyAttachmentArgs\n        {\n            UserName = user.UserName,\n            PolicyName = policy.PolicyName,\n            PolicyType = policy.PolicyType,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuser, err := iam.NewUser(ctx, \"user\", \u0026iam.UserArgs{\n\t\t\tUserName:    pulumi.String(\"TfTest\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpolicy, err := iam.NewPolicy(ctx, \"policy\", \u0026iam.PolicyArgs{\n\t\t\tPolicyName:     pulumi.String(\"TerraformResourceTest1\"),\n\t\t\tDescription:    pulumi.String(\"created by terraform 1\"),\n\t\t\tPolicyDocument: pulumi.String(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = iam.NewUserPolicyAttachment(ctx, \"foo\", \u0026iam.UserPolicyAttachmentArgs{\n\t\t\tUserName:   user.UserName,\n\t\t\tPolicyName: policy.PolicyName,\n\t\t\tPolicyType: policy.PolicyType,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new User(\"user\", UserArgs.builder()        \n            .userName(\"TfTest\")\n            .description(\"test\")\n            .build());\n\n        var policy = new Policy(\"policy\", PolicyArgs.builder()        \n            .policyName(\"TerraformResourceTest1\")\n            .description(\"created by terraform 1\")\n            .policyDocument(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\")\n            .build());\n\n        var foo = new UserPolicyAttachment(\"foo\", UserPolicyAttachmentArgs.builder()        \n            .userName(user.userName())\n            .policyName(policy.policyName())\n            .policyType(policy.policyType())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: volcengine:iam:User\n    properties:\n      userName: TfTest\n      description: test\n  policy:\n    type: volcengine:iam:Policy\n    properties:\n      policyName: TerraformResourceTest1\n      description: created by terraform 1\n      policyDocument: '{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}'\n  foo:\n    type: volcengine:iam:UserPolicyAttachment\n    properties:\n      userName: ${user.userName}\n      policyName: ${policy.policyName}\n      policyType: ${policy.policyType}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam user policy attachment can be imported using the UserName:PolicyName:PolicyType, e.g.\n\n```sh\n $ pulumi import volcengine:iam/userPolicyAttachment:UserPolicyAttachment default TerraformTestUser:TerraformTestPolicy:Custom\n```\n\n ",
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "required": [
                "policyName",
                "policyType",
                "userName"
            ],
            "inputProperties": {
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n",
                    "willReplaceOnChanges": true
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "policyName",
                "policyType",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPolicyAttachment resources.\n",
                "properties": {
                    "policyName": {
                        "type": "string",
                        "description": "The name of the Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The type of the Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "The name of the user.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:mongodb/endpoint:Endpoint": {
            "description": "Provides a resource to manage mongodb endpoint\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.mongodb.Endpoint(\"foo\", {\n    eipIds: [\"eip-3rfe12dvmz8qo5zsk2h91q05p\"],\n    instanceId: \"mongo-replica-38cf5badeb9e\",\n    // object_id=\"mongo-shard-8ad9f45e173e\"\n    networkType: \"Public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.Endpoint(\"foo\",\n    eip_ids=[\"eip-3rfe12dvmz8qo5zsk2h91q05p\"],\n    instance_id=\"mongo-replica-38cf5badeb9e\",\n    network_type=\"Public\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Mongodb.Endpoint(\"foo\", new Volcengine.Mongodb.EndpointArgs\n        {\n            EipIds = \n            {\n                \"eip-3rfe12dvmz8qo5zsk2h91q05p\",\n            },\n            InstanceId = \"mongo-replica-38cf5badeb9e\",\n            NetworkType = \"Public\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.NewEndpoint(ctx, \"foo\", \u0026mongodb.EndpointArgs{\n\t\t\tEipIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"eip-3rfe12dvmz8qo5zsk2h91q05p\"),\n\t\t\t},\n\t\t\tInstanceId:  pulumi.String(\"mongo-replica-38cf5badeb9e\"),\n\t\t\tNetworkType: pulumi.String(\"Public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Endpoint(\"foo\", EndpointArgs.builder()        \n            .eipIds(\"eip-3rfe12dvmz8qo5zsk2h91q05p\")\n            .instanceId(\"mongo-replica-38cf5badeb9e\")\n            .networkType(\"Public\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:mongodb:Endpoint\n    properties:\n      eipIds:\n        - eip-3rfe12dvmz8qo5zsk2h91q05p\n      instanceId: mongo-replica-38cf5badeb9e\n      networkType: Public\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nmongodb endpoint can be imported using the instanceId:endpointId `instanceId`represents the instance that endpoint related to. `endpointId`the id of endpoint. e.g.\n\n```sh\n $ pulumi import volcengine:mongodb/endpoint:Endpoint default mongo-replica-e405f8e2****:BRhFA0pDAk0XXkxCZQ\n```\n\n ",
            "properties": {
                "eipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of EIP IDs that need to be bound when applying for endpoint.\n"
                },
                "endpointId": {
                    "type": "string",
                    "description": "The id of endpoint.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance where the endpoint resides.\n"
                },
                "mongosNodeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the Mongos node that needs to apply for the endpoint.\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "The network type of endpoint.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID corresponding to the endpoint.\n"
                }
            },
            "required": [
                "eipIds",
                "endpointId",
                "instanceId",
                "objectId"
            ],
            "inputProperties": {
                "eipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of EIP IDs that need to be bound when applying for endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance where the endpoint resides.\n",
                    "willReplaceOnChanges": true
                },
                "mongosNodeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the Mongos node that needs to apply for the endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "networkType": {
                    "type": "string",
                    "description": "The network type of endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID corresponding to the endpoint.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Endpoint resources.\n",
                "properties": {
                    "eipIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of EIP IDs that need to be bound when applying for endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "endpointId": {
                        "type": "string",
                        "description": "The id of endpoint.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance where the endpoint resides.\n",
                        "willReplaceOnChanges": true
                    },
                    "mongosNodeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the Mongos node that needs to apply for the endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkType": {
                        "type": "string",
                        "description": "The network type of endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID corresponding to the endpoint.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:mongodb/instance:Instance": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.mongodb.Instance(\"foo\", {\n    chargeType: \"PostPaid\",\n    dbEngineVersion: \"MongoDB_4_0\",\n    instanceName: \"mongo-replica-be9995d32e4a\",\n    instanceType: \"ReplicaSet\",\n    nodeSpec: \"mongo.2c4g\",\n    projectName: \"default\",\n    //    mongos_node_spec=\"mongo.mongos.2c4g\"\n    //    mongos_node_number = 3\n    //    shard_number=3\n    storageSpaceGb: 20,\n    subnetId: \"subnet-rrx4ns6abw1sv0x57wq6h47\",\n    superAccountPassword: \"******\",\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n    zoneId: \"cn-beijing-a\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.Instance(\"foo\",\n    charge_type=\"PostPaid\",\n    db_engine_version=\"MongoDB_4_0\",\n    instance_name=\"mongo-replica-be9995d32e4a\",\n    instance_type=\"ReplicaSet\",\n    node_spec=\"mongo.2c4g\",\n    project_name=\"default\",\n    storage_space_gb=20,\n    subnet_id=\"subnet-rrx4ns6abw1sv0x57wq6h47\",\n    super_account_password=\"******\",\n    tags=[volcengine.mongodb.InstanceTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )],\n    zone_id=\"cn-beijing-a\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Mongodb.Instance(\"foo\", new Volcengine.Mongodb.InstanceArgs\n        {\n            ChargeType = \"PostPaid\",\n            DbEngineVersion = \"MongoDB_4_0\",\n            InstanceName = \"mongo-replica-be9995d32e4a\",\n            InstanceType = \"ReplicaSet\",\n            NodeSpec = \"mongo.2c4g\",\n            ProjectName = \"default\",\n            StorageSpaceGb = 20,\n            SubnetId = \"subnet-rrx4ns6abw1sv0x57wq6h47\",\n            SuperAccountPassword = \"******\",\n            Tags = \n            {\n                new Volcengine.Mongodb.Inputs.InstanceTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n            ZoneId = \"cn-beijing-a\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.NewInstance(ctx, \"foo\", \u0026mongodb.InstanceArgs{\n\t\t\tChargeType:           pulumi.String(\"PostPaid\"),\n\t\t\tDbEngineVersion:      pulumi.String(\"MongoDB_4_0\"),\n\t\t\tInstanceName:         pulumi.String(\"mongo-replica-be9995d32e4a\"),\n\t\t\tInstanceType:         pulumi.String(\"ReplicaSet\"),\n\t\t\tNodeSpec:             pulumi.String(\"mongo.2c4g\"),\n\t\t\tProjectName:          pulumi.String(\"default\"),\n\t\t\tStorageSpaceGb:       pulumi.Int(20),\n\t\t\tSubnetId:             pulumi.String(\"subnet-rrx4ns6abw1sv0x57wq6h47\"),\n\t\t\tSuperAccountPassword: pulumi.String(\"******\"),\n\t\t\tTags: mongodb.InstanceTagArray{\n\t\t\t\t\u0026mongodb.InstanceTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tZoneId: pulumi.String(\"cn-beijing-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Instance(\"foo\", InstanceArgs.builder()        \n            .chargeType(\"PostPaid\")\n            .dbEngineVersion(\"MongoDB_4_0\")\n            .instanceName(\"mongo-replica-be9995d32e4a\")\n            .instanceType(\"ReplicaSet\")\n            .nodeSpec(\"mongo.2c4g\")\n            .projectName(\"default\")\n            .storageSpaceGb(20)\n            .subnetId(\"subnet-rrx4ns6abw1sv0x57wq6h47\")\n            .superAccountPassword(\"******\")\n            .tags(InstanceTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .zoneId(\"cn-beijing-a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:mongodb:Instance\n    properties:\n      chargeType: PostPaid\n      dbEngineVersion: MongoDB_4_0\n      instanceName: mongo-replica-be9995d32e4a\n      instanceType: ReplicaSet\n      nodeSpec: mongo.2c4g\n      projectName: default\n      storageSpaceGb: 20\n      subnetId: subnet-rrx4ns6abw1sv0x57wq6h47\n      superAccountPassword: '******'\n      tags:\n        - key: k1\n          value: v1\n      zoneId: cn-beijing-a\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nmongodb instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:mongodb/instance:Instance default mongo-replica-e405f8e2****\n```\n\n ",
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to enable automatic renewal.\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of instance, valid value contains `Prepaid` or `PostPaid`.\n"
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_5_0`.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "The instance name.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of instance,the valid value contains `ReplicaSet` or `ShardedCluster`.\n"
                },
                "mongosNodeNumber": {
                    "type": "integer",
                    "description": "The mongos node number of shard cluster,value range is `2~23`, this parameter is required when `InstanceType` is `ShardedCluster`.\n"
                },
                "mongosNodeSpec": {
                    "type": "string",
                    "description": "The mongos node spec of shard cluster, this parameter is required when `InstanceType` is `ShardedCluster`.\n"
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "The spec of node.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The instance purchase duration,the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`, this parameter is required when `ChargeType` is `Prepaid`.\n"
                },
                "periodUnit": {
                    "type": "string",
                    "description": "The period unit,valid value contains `Year` or `Month`, this parameter is required when `ChargeType` is `Prepaid`.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name to which the instance belongs.\n"
                },
                "shardNumber": {
                    "type": "integer",
                    "description": "The number of shards in shard cluster,value range is `2~32`, this parameter is required when `InstanceType` is `ShardedCluster`.\n"
                },
                "storageSpaceGb": {
                    "type": "integer",
                    "description": "The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster, in GiB.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet id of instance.\n"
                },
                "superAccountPassword": {
                    "type": "string",
                    "description": "The password of database account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/InstanceTag:InstanceTag"
                    },
                    "description": "Tags.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc ID.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID of instance.\n"
                }
            },
            "required": [
                "autoRenew",
                "chargeType",
                "dbEngineVersion",
                "instanceName",
                "instanceType",
                "nodeSpec",
                "period",
                "periodUnit",
                "projectName",
                "storageSpaceGb",
                "subnetId",
                "vpcId",
                "zoneId"
            ],
            "inputProperties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to enable automatic renewal.\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of instance, valid value contains `Prepaid` or `PostPaid`.\n"
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_5_0`.\n",
                    "willReplaceOnChanges": true
                },
                "instanceName": {
                    "type": "string",
                    "description": "The instance name.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of instance,the valid value contains `ReplicaSet` or `ShardedCluster`.\n",
                    "willReplaceOnChanges": true
                },
                "mongosNodeNumber": {
                    "type": "integer",
                    "description": "The mongos node number of shard cluster,value range is `2~23`, this parameter is required when `InstanceType` is `ShardedCluster`.\n"
                },
                "mongosNodeSpec": {
                    "type": "string",
                    "description": "The mongos node spec of shard cluster, this parameter is required when `InstanceType` is `ShardedCluster`.\n"
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "The spec of node.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The instance purchase duration,the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`, this parameter is required when `ChargeType` is `Prepaid`.\n"
                },
                "periodUnit": {
                    "type": "string",
                    "description": "The period unit,valid value contains `Year` or `Month`, this parameter is required when `ChargeType` is `Prepaid`.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name to which the instance belongs.\n"
                },
                "shardNumber": {
                    "type": "integer",
                    "description": "The number of shards in shard cluster,value range is `2~32`, this parameter is required when `InstanceType` is `ShardedCluster`.\n"
                },
                "storageSpaceGb": {
                    "type": "integer",
                    "description": "The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster, in GiB.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet id of instance.\n",
                    "willReplaceOnChanges": true
                },
                "superAccountPassword": {
                    "type": "string",
                    "description": "The password of database account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:mongodb/InstanceTag:InstanceTag"
                    },
                    "description": "Tags.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc ID.\n",
                    "willReplaceOnChanges": true
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone ID of instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "nodeSpec",
                "storageSpaceGb",
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "autoRenew": {
                        "type": "boolean",
                        "description": "Whether to enable automatic renewal.\n"
                    },
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of instance, valid value contains `Prepaid` or `PostPaid`.\n"
                    },
                    "dbEngineVersion": {
                        "type": "string",
                        "description": "The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_5_0`.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The instance name.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of instance,the valid value contains `ReplicaSet` or `ShardedCluster`.\n",
                        "willReplaceOnChanges": true
                    },
                    "mongosNodeNumber": {
                        "type": "integer",
                        "description": "The mongos node number of shard cluster,value range is `2~23`, this parameter is required when `InstanceType` is `ShardedCluster`.\n"
                    },
                    "mongosNodeSpec": {
                        "type": "string",
                        "description": "The mongos node spec of shard cluster, this parameter is required when `InstanceType` is `ShardedCluster`.\n"
                    },
                    "nodeSpec": {
                        "type": "string",
                        "description": "The spec of node.\n"
                    },
                    "period": {
                        "type": "integer",
                        "description": "The instance purchase duration,the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`, this parameter is required when `ChargeType` is `Prepaid`.\n"
                    },
                    "periodUnit": {
                        "type": "string",
                        "description": "The period unit,valid value contains `Year` or `Month`, this parameter is required when `ChargeType` is `Prepaid`.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The project name to which the instance belongs.\n"
                    },
                    "shardNumber": {
                        "type": "integer",
                        "description": "The number of shards in shard cluster,value range is `2~32`, this parameter is required when `InstanceType` is `ShardedCluster`.\n"
                    },
                    "storageSpaceGb": {
                        "type": "integer",
                        "description": "The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster, in GiB.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The subnet id of instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "superAccountPassword": {
                        "type": "string",
                        "description": "The password of database account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:mongodb/InstanceTag:InstanceTag"
                        },
                        "description": "Tags.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone ID of instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:mongodb/instanceParameter:InstanceParameter": {
            "description": "Provides a resource to manage mongodb instance parameter\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\n//    该资源无法创建，需先import资源\n//    $ terraform import volcengine_mongodb_instance_parameter.default param:mongo-replica-f16e9298b121:connPoolMaxConnsPerHost\n//    请注意instance_id和parameter_name需与上述import的ID对应\nconst defaultInstanceParameter = new volcengine.mongodb.InstanceParameter(\"default\", {\n    instanceId: \"mongo-replica-f16e9298b121\", // 必填 import之后不允许修改\n    parameterName: \"connPoolMaxConnsPerHost\", // 必填 import之后不允许修改\n    parameterRole: \"Node\", // 必填\n    parameterValue: \"600\", // 必填\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\n#    该资源无法创建，需先import资源\n#    $ terraform import volcengine_mongodb_instance_parameter.default param:mongo-replica-f16e9298b121:connPoolMaxConnsPerHost\n#    请注意instance_id和parameter_name需与上述import的ID对应\ndefault = volcengine.mongodb.InstanceParameter(\"default\",\n    instance_id=\"mongo-replica-f16e9298b121\",\n    parameter_name=\"connPoolMaxConnsPerHost\",\n    parameter_role=\"Node\",\n    parameter_value=\"600\")\n# 必填\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        //    该资源无法创建，需先import资源\n        //    $ terraform import volcengine_mongodb_instance_parameter.default param:mongo-replica-f16e9298b121:connPoolMaxConnsPerHost\n        //    请注意instance_id和parameter_name需与上述import的ID对应\n        var @default = new Volcengine.Mongodb.InstanceParameter(\"default\", new Volcengine.Mongodb.InstanceParameterArgs\n        {\n            InstanceId = \"mongo-replica-f16e9298b121\",\n            ParameterName = \"connPoolMaxConnsPerHost\",\n            ParameterRole = \"Node\",\n            ParameterValue = \"600\",\n        });\n        // 必填\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.NewInstanceParameter(ctx, \"default\", \u0026mongodb.InstanceParameterArgs{\n\t\t\tInstanceId:     pulumi.String(\"mongo-replica-f16e9298b121\"),\n\t\t\tParameterName:  pulumi.String(\"connPoolMaxConnsPerHost\"),\n\t\t\tParameterRole:  pulumi.String(\"Node\"),\n\t\t\tParameterValue: pulumi.String(\"600\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new InstanceParameter(\"default\", InstanceParameterArgs.builder()        \n            .instanceId(\"mongo-replica-f16e9298b121\")\n            .parameterName(\"connPoolMaxConnsPerHost\")\n            .parameterRole(\"Node\")\n            .parameterValue(\"600\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:mongodb:InstanceParameter\n    properties:\n      instanceId: mongo-replica-f16e9298b121\n      parameterName: connPoolMaxConnsPerHost\n      parameterRole: Node\n      parameterValue: 600\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nmongodb parameter can be imported using the param:instanceId:parameterName, e.g.\n\n```sh\n $ pulumi import volcengine:mongodb/instanceParameter:InstanceParameter default param:mongo-replica-e405f8e2****:connPoolMaxConnsPerHost\n```\n\n NoteThis resource must be imported before it can be used. Please note that instance_id and parameter_name must correspond to the ID of the above import. ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The instance ID. This field cannot be modified after the resource is imported.\n"
                },
                "parameterName": {
                    "type": "string",
                    "description": "The name of parameter. This field cannot be modified after the resource is imported.\n"
                },
                "parameterRole": {
                    "type": "string",
                    "description": "The node type to which the parameter belongs. The value range is as follows: Node, Shard, ConfigServer, Mongos.\n"
                },
                "parameterValue": {
                    "type": "string",
                    "description": "The value of parameter.\n"
                }
            },
            "required": [
                "instanceId",
                "parameterName",
                "parameterRole",
                "parameterValue"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The instance ID. This field cannot be modified after the resource is imported.\n"
                },
                "parameterName": {
                    "type": "string",
                    "description": "The name of parameter. This field cannot be modified after the resource is imported.\n"
                },
                "parameterRole": {
                    "type": "string",
                    "description": "The node type to which the parameter belongs. The value range is as follows: Node, Shard, ConfigServer, Mongos.\n"
                },
                "parameterValue": {
                    "type": "string",
                    "description": "The value of parameter.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "parameterName",
                "parameterRole",
                "parameterValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceParameter resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The instance ID. This field cannot be modified after the resource is imported.\n"
                    },
                    "parameterName": {
                        "type": "string",
                        "description": "The name of parameter. This field cannot be modified after the resource is imported.\n"
                    },
                    "parameterRole": {
                        "type": "string",
                        "description": "The node type to which the parameter belongs. The value range is as follows: Node, Shard, ConfigServer, Mongos.\n"
                    },
                    "parameterValue": {
                        "type": "string",
                        "description": "The value of parameter.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:mongodb/mongoAllowList:MongoAllowList": {
            "description": "Provides a resource to manage mongodb allow list\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.mongodb.MongoAllowList(\"foo\", {\n    allowList: \"10.1.1.3,10.2.3.0/24,10.1.1.1\",\n    allowListDesc: \"test1\",\n    allowListName: \"tf-test-hh\",\n    allowListType: \"IPv4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.MongoAllowList(\"foo\",\n    allow_list=\"10.1.1.3,10.2.3.0/24,10.1.1.1\",\n    allow_list_desc=\"test1\",\n    allow_list_name=\"tf-test-hh\",\n    allow_list_type=\"IPv4\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Mongodb.MongoAllowList(\"foo\", new Volcengine.Mongodb.MongoAllowListArgs\n        {\n            AllowList = \"10.1.1.3,10.2.3.0/24,10.1.1.1\",\n            AllowListDesc = \"test1\",\n            AllowListName = \"tf-test-hh\",\n            AllowListType = \"IPv4\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.NewMongoAllowList(ctx, \"foo\", \u0026mongodb.MongoAllowListArgs{\n\t\t\tAllowList:     pulumi.String(\"10.1.1.3,10.2.3.0/24,10.1.1.1\"),\n\t\t\tAllowListDesc: pulumi.String(\"test1\"),\n\t\t\tAllowListName: pulumi.String(\"tf-test-hh\"),\n\t\t\tAllowListType: pulumi.String(\"IPv4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new MongoAllowList(\"foo\", MongoAllowListArgs.builder()        \n            .allowList(\"10.1.1.3,10.2.3.0/24,10.1.1.1\")\n            .allowListDesc(\"test1\")\n            .allowListName(\"tf-test-hh\")\n            .allowListType(\"IPv4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:mongodb:MongoAllowList\n    properties:\n      allowList: 10.1.1.3,10.2.3.0/24,10.1.1.1\n      allowListDesc: test1\n      allowListName: tf-test-hh\n      allowListType: IPv4\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nmongodb allow list can be imported using the allowListId, e.g.\n\n```sh\n $ pulumi import volcengine:mongodb/mongoAllowList:MongoAllowList default acl-d1fd76693bd54e658912e7337d5b****\n```\n\n ",
            "properties": {
                "allowList": {
                    "type": "string",
                    "description": "IP address or IP address segment in CIDR format.\n"
                },
                "allowListDesc": {
                    "type": "string",
                    "description": "The description of allow list.\n"
                },
                "allowListName": {
                    "type": "string",
                    "description": "The name of allow list.\n"
                },
                "allowListType": {
                    "type": "string",
                    "description": "The IP address type of allow list, valid value contains `IPv4`.\n"
                },
                "modifyMode": {
                    "type": "string",
                    "description": "The modify mode. Only support Cover mode.\n"
                }
            },
            "required": [
                "allowList",
                "allowListDesc",
                "allowListName"
            ],
            "inputProperties": {
                "allowList": {
                    "type": "string",
                    "description": "IP address or IP address segment in CIDR format.\n"
                },
                "allowListDesc": {
                    "type": "string",
                    "description": "The description of allow list.\n"
                },
                "allowListName": {
                    "type": "string",
                    "description": "The name of allow list.\n"
                },
                "allowListType": {
                    "type": "string",
                    "description": "The IP address type of allow list, valid value contains `IPv4`.\n"
                },
                "modifyMode": {
                    "type": "string",
                    "description": "The modify mode. Only support Cover mode.\n"
                }
            },
            "requiredInputs": [
                "allowList",
                "allowListName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MongoAllowList resources.\n",
                "properties": {
                    "allowList": {
                        "type": "string",
                        "description": "IP address or IP address segment in CIDR format.\n"
                    },
                    "allowListDesc": {
                        "type": "string",
                        "description": "The description of allow list.\n"
                    },
                    "allowListName": {
                        "type": "string",
                        "description": "The name of allow list.\n"
                    },
                    "allowListType": {
                        "type": "string",
                        "description": "The IP address type of allow list, valid value contains `IPv4`.\n"
                    },
                    "modifyMode": {
                        "type": "string",
                        "description": "The modify mode. Only support Cover mode.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:mongodb/mongoAllowListAssociate:MongoAllowListAssociate": {
            "description": "Provides a resource to manage mongodb allow list associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.mongodb.MongoAllowListAssociate(\"foo\", {\n    allowListId: \"acl-9e307ce4efe843fb9ffd8cb6a6cb225f\",\n    instanceId: \"mongo-replica-f16e9298b121\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.MongoAllowListAssociate(\"foo\",\n    allow_list_id=\"acl-9e307ce4efe843fb9ffd8cb6a6cb225f\",\n    instance_id=\"mongo-replica-f16e9298b121\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Mongodb.MongoAllowListAssociate(\"foo\", new Volcengine.Mongodb.MongoAllowListAssociateArgs\n        {\n            AllowListId = \"acl-9e307ce4efe843fb9ffd8cb6a6cb225f\",\n            InstanceId = \"mongo-replica-f16e9298b121\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.NewMongoAllowListAssociate(ctx, \"foo\", \u0026mongodb.MongoAllowListAssociateArgs{\n\t\t\tAllowListId: pulumi.String(\"acl-9e307ce4efe843fb9ffd8cb6a6cb225f\"),\n\t\t\tInstanceId:  pulumi.String(\"mongo-replica-f16e9298b121\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new MongoAllowListAssociate(\"foo\", MongoAllowListAssociateArgs.builder()        \n            .allowListId(\"acl-9e307ce4efe843fb9ffd8cb6a6cb225f\")\n            .instanceId(\"mongo-replica-f16e9298b121\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:mongodb:MongoAllowListAssociate\n    properties:\n      allowListId: acl-9e307ce4efe843fb9ffd8cb6a6cb225f\n      instanceId: mongo-replica-f16e9298b121\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nmongodb allow list associate can be imported using the instanceId:allowListId, e.g.\n\n```sh\n $ pulumi import volcengine:mongodb/mongoAllowListAssociate:MongoAllowListAssociate default mongo-replica-e405f8e2****:acl-d1fd76693bd54e658912e7337d5b****\n```\n\n ",
            "properties": {
                "allowListId": {
                    "type": "string",
                    "description": "Id of allow list to associate.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance to associate.\n"
                }
            },
            "required": [
                "allowListId",
                "instanceId"
            ],
            "inputProperties": {
                "allowListId": {
                    "type": "string",
                    "description": "Id of allow list to associate.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance to associate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "allowListId",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MongoAllowListAssociate resources.\n",
                "properties": {
                    "allowListId": {
                        "type": "string",
                        "description": "Id of allow list to associate.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of instance to associate.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:mongodb/sslState:SslState": {
            "description": "Provides a resource to manage mongodb ssl state\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.mongodb.SslState(\"foo\", {\n    instanceId: \"mongo-replica-f16e9298b121\", // 必填\n    sslAction: \"Update\", // 选填 仅支持Update \n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.SslState(\"foo\",\n    instance_id=\"mongo-replica-f16e9298b121\",\n    ssl_action=\"Update\")\n# 选填 仅支持Update\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Mongodb.SslState(\"foo\", new Volcengine.Mongodb.SslStateArgs\n        {\n            InstanceId = \"mongo-replica-f16e9298b121\",\n            SslAction = \"Update\",\n        });\n        // 选填 仅支持Update \n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.NewSslState(ctx, \"foo\", \u0026mongodb.SslStateArgs{\n\t\t\tInstanceId: pulumi.String(\"mongo-replica-f16e9298b121\"),\n\t\t\tSslAction:  pulumi.String(\"Update\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new SslState(\"foo\", SslStateArgs.builder()        \n            .instanceId(\"mongo-replica-f16e9298b121\")\n            .sslAction(\"Update\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:mongodb:SslState\n    properties:\n      instanceId: mongo-replica-f16e9298b121\n      sslAction: Update\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nmongodb ssl state can be imported using the ssl:instanceId, e.g.\n\n```sh\n $ pulumi import volcengine:mongodb/sslState:SslState default ssl:mongo-shard-d050db19xxx\n```\n\n Set `ssl_action` to `Update` will update ssl always when terraform apply. ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of mongodb instance.\n"
                },
                "isValid": {
                    "type": "boolean",
                    "description": "Whetehr SSL is valid.\n"
                },
                "sslAction": {
                    "type": "string",
                    "description": "The action of ssl, valid value contains `Update`. Set `ssl_action` to `Update` will update ssl always when terraform\napply.\n"
                },
                "sslEnable": {
                    "type": "boolean",
                    "description": "Whether SSL is enabled.\n"
                },
                "sslExpiredTime": {
                    "type": "string",
                    "description": "The expire time of SSL.\n"
                }
            },
            "required": [
                "instanceId",
                "isValid",
                "sslEnable",
                "sslExpiredTime"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of mongodb instance.\n",
                    "willReplaceOnChanges": true
                },
                "sslAction": {
                    "type": "string",
                    "description": "The action of ssl, valid value contains `Update`. Set `ssl_action` to `Update` will update ssl always when terraform\napply.\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SslState resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of mongodb instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "isValid": {
                        "type": "boolean",
                        "description": "Whetehr SSL is valid.\n"
                    },
                    "sslAction": {
                        "type": "string",
                        "description": "The action of ssl, valid value contains `Update`. Set `ssl_action` to `Update` will update ssl always when terraform\napply.\n"
                    },
                    "sslEnable": {
                        "type": "boolean",
                        "description": "Whether SSL is enabled.\n"
                    },
                    "sslExpiredTime": {
                        "type": "string",
                        "description": "The expire time of SSL.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:nat/dnatEntry:DnatEntry": {
            "description": "Provides a resource to manage dnat entry\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.nat.DnatEntry(\"foo\", {\n    dnatEntryName: \"terraform-test2\",\n    externalIp: \"10.249.186.68\",\n    externalPort: \"23\",\n    internalIp: \"193.168.1.1\",\n    internalPort: \"24\",\n    natGatewayId: \"ngw-imw3aej7e96o8gbssxkfbybv\",\n    protocol: \"tcp\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.nat.DnatEntry(\"foo\",\n    dnat_entry_name=\"terraform-test2\",\n    external_ip=\"10.249.186.68\",\n    external_port=\"23\",\n    internal_ip=\"193.168.1.1\",\n    internal_port=\"24\",\n    nat_gateway_id=\"ngw-imw3aej7e96o8gbssxkfbybv\",\n    protocol=\"tcp\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Nat.DnatEntry(\"foo\", new Volcengine.Nat.DnatEntryArgs\n        {\n            DnatEntryName = \"terraform-test2\",\n            ExternalIp = \"10.249.186.68\",\n            ExternalPort = \"23\",\n            InternalIp = \"193.168.1.1\",\n            InternalPort = \"24\",\n            NatGatewayId = \"ngw-imw3aej7e96o8gbssxkfbybv\",\n            Protocol = \"tcp\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nat.NewDnatEntry(ctx, \"foo\", \u0026nat.DnatEntryArgs{\n\t\t\tDnatEntryName: pulumi.String(\"terraform-test2\"),\n\t\t\tExternalIp:    pulumi.String(\"10.249.186.68\"),\n\t\t\tExternalPort:  pulumi.String(\"23\"),\n\t\t\tInternalIp:    pulumi.String(\"193.168.1.1\"),\n\t\t\tInternalPort:  pulumi.String(\"24\"),\n\t\t\tNatGatewayId:  pulumi.String(\"ngw-imw3aej7e96o8gbssxkfbybv\"),\n\t\t\tProtocol:      pulumi.String(\"tcp\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new DnatEntry(\"foo\", DnatEntryArgs.builder()        \n            .dnatEntryName(\"terraform-test2\")\n            .externalIp(\"10.249.186.68\")\n            .externalPort(\"23\")\n            .internalIp(\"193.168.1.1\")\n            .internalPort(\"24\")\n            .natGatewayId(\"ngw-imw3aej7e96o8gbssxkfbybv\")\n            .protocol(\"tcp\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:nat:DnatEntry\n    properties:\n      dnatEntryName: terraform-test2\n      externalIp: 10.249.186.68\n      externalPort: 23\n      internalIp: 193.168.1.1\n      internalPort: 24\n      natGatewayId: ngw-imw3aej7e96o8gbssxkfbybv\n      protocol: tcp\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDnat entry can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:nat/dnatEntry:DnatEntry default dnat-3fvhk47kf56****\n```\n\n ",
            "properties": {
                "dnatEntryId": {
                    "type": "string",
                    "description": "The id of the DNAT rule.\n"
                },
                "dnatEntryName": {
                    "type": "string",
                    "description": "The name of the DNAT rule.\n"
                },
                "externalIp": {
                    "type": "string",
                    "description": "Provides the public IP address for public network access.\n"
                },
                "externalPort": {
                    "type": "string",
                    "description": "The port or port segment that receives requests from the public network. If InternalPort is passed into the port segment, ExternalPort must also be passed into the port segment.\n"
                },
                "internalIp": {
                    "type": "string",
                    "description": "Provides the internal IP address.\n"
                },
                "internalPort": {
                    "type": "string",
                    "description": "The port or port segment on which the cloud server instance provides services to the public network.\n"
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The id of the nat gateway to which the entry belongs.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol.\n"
                }
            },
            "required": [
                "dnatEntryId",
                "externalIp",
                "externalPort",
                "internalIp",
                "internalPort",
                "natGatewayId",
                "protocol"
            ],
            "inputProperties": {
                "dnatEntryName": {
                    "type": "string",
                    "description": "The name of the DNAT rule.\n"
                },
                "externalIp": {
                    "type": "string",
                    "description": "Provides the public IP address for public network access.\n"
                },
                "externalPort": {
                    "type": "string",
                    "description": "The port or port segment that receives requests from the public network. If InternalPort is passed into the port segment, ExternalPort must also be passed into the port segment.\n"
                },
                "internalIp": {
                    "type": "string",
                    "description": "Provides the internal IP address.\n"
                },
                "internalPort": {
                    "type": "string",
                    "description": "The port or port segment on which the cloud server instance provides services to the public network.\n"
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The id of the nat gateway to which the entry belongs.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol.\n"
                }
            },
            "requiredInputs": [
                "externalIp",
                "externalPort",
                "internalIp",
                "internalPort",
                "natGatewayId",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnatEntry resources.\n",
                "properties": {
                    "dnatEntryId": {
                        "type": "string",
                        "description": "The id of the DNAT rule.\n"
                    },
                    "dnatEntryName": {
                        "type": "string",
                        "description": "The name of the DNAT rule.\n"
                    },
                    "externalIp": {
                        "type": "string",
                        "description": "Provides the public IP address for public network access.\n"
                    },
                    "externalPort": {
                        "type": "string",
                        "description": "The port or port segment that receives requests from the public network. If InternalPort is passed into the port segment, ExternalPort must also be passed into the port segment.\n"
                    },
                    "internalIp": {
                        "type": "string",
                        "description": "Provides the internal IP address.\n"
                    },
                    "internalPort": {
                        "type": "string",
                        "description": "The port or port segment on which the cloud server instance provides services to the public network.\n"
                    },
                    "natGatewayId": {
                        "type": "string",
                        "description": "The id of the nat gateway to which the entry belongs.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The network protocol.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:nat/gateway:Gateway": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.nat.Gateway(\"foo\", {\n    billingType: \"PostPaid\",\n    description: \"This nat gateway auto-created by terraform. \",\n    natGatewayName: \"tf-auto-demo-1\",\n    projectName: \"default\",\n    spec: \"Medium\",\n    subnetId: \"subnet-im67x70vxla88gbssz1hy1z2\",\n    vpcId: \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.nat.Gateway(\"foo\",\n    billing_type=\"PostPaid\",\n    description=\"This nat gateway auto-created by terraform. \",\n    nat_gateway_name=\"tf-auto-demo-1\",\n    project_name=\"default\",\n    spec=\"Medium\",\n    subnet_id=\"subnet-im67x70vxla88gbssz1hy1z2\",\n    vpc_id=\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Nat.Gateway(\"foo\", new Volcengine.Nat.GatewayArgs\n        {\n            BillingType = \"PostPaid\",\n            Description = \"This nat gateway auto-created by terraform. \",\n            NatGatewayName = \"tf-auto-demo-1\",\n            ProjectName = \"default\",\n            Spec = \"Medium\",\n            SubnetId = \"subnet-im67x70vxla88gbssz1hy1z2\",\n            VpcId = \"vpc-im67wjcikxkw8gbssx8ufpj8\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nat.NewGateway(ctx, \"foo\", \u0026nat.GatewayArgs{\n\t\t\tBillingType:    pulumi.String(\"PostPaid\"),\n\t\t\tDescription:    pulumi.String(\"This nat gateway auto-created by terraform. \"),\n\t\t\tNatGatewayName: pulumi.String(\"tf-auto-demo-1\"),\n\t\t\tProjectName:    pulumi.String(\"default\"),\n\t\t\tSpec:           pulumi.String(\"Medium\"),\n\t\t\tSubnetId:       pulumi.String(\"subnet-im67x70vxla88gbssz1hy1z2\"),\n\t\t\tVpcId:          pulumi.String(\"vpc-im67wjcikxkw8gbssx8ufpj8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Gateway(\"foo\", GatewayArgs.builder()        \n            .billingType(\"PostPaid\")\n            .description(\"This nat gateway auto-created by terraform. \")\n            .natGatewayName(\"tf-auto-demo-1\")\n            .projectName(\"default\")\n            .spec(\"Medium\")\n            .subnetId(\"subnet-im67x70vxla88gbssz1hy1z2\")\n            .vpcId(\"vpc-im67wjcikxkw8gbssx8ufpj8\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:nat:Gateway\n    properties:\n      billingType: PostPaid\n      description: 'This nat gateway auto-created by terraform. '\n      natGatewayName: tf-auto-demo-1\n      projectName: default\n      spec: Medium\n      subnetId: subnet-im67x70vxla88gbssz1hy1z2\n      vpcId: vpc-im67wjcikxkw8gbssx8ufpj8\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNatGateway can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:nat/gateway:Gateway default ngw-vv3t043k05sm****\n```\n\n ",
            "properties": {
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the NatGateway, the value is `PostPaid` or `PrePaid`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NatGateway.\n"
                },
                "natGatewayName": {
                    "type": "string",
                    "description": "The name of the NatGateway.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the NatGateway.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the Subnet.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:nat/GatewayTag:GatewayTag"
                    },
                    "description": "Tags.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC.\n"
                }
            },
            "required": [
                "subnetId",
                "vpcId"
            ],
            "inputProperties": {
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the NatGateway, the value is `PostPaid` or `PrePaid`.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NatGateway.\n"
                },
                "natGatewayName": {
                    "type": "string",
                    "description": "The name of the NatGateway.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the NatGateway.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the Subnet.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:nat/GatewayTag:GatewayTag"
                    },
                    "description": "Tags.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "subnetId",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gateway resources.\n",
                "properties": {
                    "billingType": {
                        "type": "string",
                        "description": "The billing type of the NatGateway, the value is `PostPaid` or `PrePaid`.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the NatGateway.\n"
                    },
                    "natGatewayName": {
                        "type": "string",
                        "description": "The name of the NatGateway.\n"
                    },
                    "period": {
                        "type": "integer",
                        "description": "The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the NatGateway.\n"
                    },
                    "spec": {
                        "type": "string",
                        "description": "The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of the Subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:nat/GatewayTag:GatewayTag"
                        },
                        "description": "Tags.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:nat/snatEntry:SnatEntry": {
            "description": "Provides a resource to manage snat entry\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.nat.SnatEntry(\"foo\", {\n    eipId: \"eip-274zlae117nr47fap8tzl24v4\",\n    natGatewayId: \"ngw-2743w1f6iqby87fap8tvm9kop\",\n    snatEntryName: \"tf-test-up\",\n    subnetId: \"subnet-2744i7u9alnnk7fap8tkq8aft\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.nat.SnatEntry(\"foo\",\n    eip_id=\"eip-274zlae117nr47fap8tzl24v4\",\n    nat_gateway_id=\"ngw-2743w1f6iqby87fap8tvm9kop\",\n    snat_entry_name=\"tf-test-up\",\n    subnet_id=\"subnet-2744i7u9alnnk7fap8tkq8aft\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Nat.SnatEntry(\"foo\", new Volcengine.Nat.SnatEntryArgs\n        {\n            EipId = \"eip-274zlae117nr47fap8tzl24v4\",\n            NatGatewayId = \"ngw-2743w1f6iqby87fap8tvm9kop\",\n            SnatEntryName = \"tf-test-up\",\n            SubnetId = \"subnet-2744i7u9alnnk7fap8tkq8aft\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nat.NewSnatEntry(ctx, \"foo\", \u0026nat.SnatEntryArgs{\n\t\t\tEipId:         pulumi.String(\"eip-274zlae117nr47fap8tzl24v4\"),\n\t\t\tNatGatewayId:  pulumi.String(\"ngw-2743w1f6iqby87fap8tvm9kop\"),\n\t\t\tSnatEntryName: pulumi.String(\"tf-test-up\"),\n\t\t\tSubnetId:      pulumi.String(\"subnet-2744i7u9alnnk7fap8tkq8aft\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new SnatEntry(\"foo\", SnatEntryArgs.builder()        \n            .eipId(\"eip-274zlae117nr47fap8tzl24v4\")\n            .natGatewayId(\"ngw-2743w1f6iqby87fap8tvm9kop\")\n            .snatEntryName(\"tf-test-up\")\n            .subnetId(\"subnet-2744i7u9alnnk7fap8tkq8aft\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:nat:SnatEntry\n    properties:\n      eipId: eip-274zlae117nr47fap8tzl24v4\n      natGatewayId: ngw-2743w1f6iqby87fap8tvm9kop\n      snatEntryName: tf-test-up\n      subnetId: subnet-2744i7u9alnnk7fap8tkq8aft\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSnat entry can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:nat/snatEntry:SnatEntry default snat-3fvhk47kf56****\n```\n\n ",
            "properties": {
                "eipId": {
                    "type": "string",
                    "description": "The id of the public ip address used by the SNAT entry.\n"
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The id of the nat gateway to which the entry belongs.\n"
                },
                "snatEntryName": {
                    "type": "string",
                    "description": "The name of the SNAT entry.\n"
                },
                "sourceCidr": {
                    "type": "string",
                    "description": "The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the SNAT entry.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.\n"
                }
            },
            "required": [
                "eipId",
                "natGatewayId",
                "snatEntryName",
                "status"
            ],
            "inputProperties": {
                "eipId": {
                    "type": "string",
                    "description": "The id of the public ip address used by the SNAT entry.\n"
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The id of the nat gateway to which the entry belongs.\n",
                    "willReplaceOnChanges": true
                },
                "snatEntryName": {
                    "type": "string",
                    "description": "The name of the SNAT entry.\n"
                },
                "sourceCidr": {
                    "type": "string",
                    "description": "The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "eipId",
                "natGatewayId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SnatEntry resources.\n",
                "properties": {
                    "eipId": {
                        "type": "string",
                        "description": "The id of the public ip address used by the SNAT entry.\n"
                    },
                    "natGatewayId": {
                        "type": "string",
                        "description": "The id of the nat gateway to which the entry belongs.\n",
                        "willReplaceOnChanges": true
                    },
                    "snatEntryName": {
                        "type": "string",
                        "description": "The name of the SNAT entry.\n"
                    },
                    "sourceCidr": {
                        "type": "string",
                        "description": "The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the SNAT entry.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:privatelink/securityGroup:SecurityGroup": {
            "description": "Provides a resource to manage privatelink security group\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.privatelink.SecurityGroup(\"foo\", {\n    endpointId: \"ep-2byz5npiuu1hc2dx0efkv7ehc\",\n    securityGroupId: \"sg-2d6722jpp55og58ozfd1sqtdb\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.privatelink.SecurityGroup(\"foo\",\n    endpoint_id=\"ep-2byz5npiuu1hc2dx0efkv7ehc\",\n    security_group_id=\"sg-2d6722jpp55og58ozfd1sqtdb\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Privatelink.SecurityGroup(\"foo\", new Volcengine.Privatelink.SecurityGroupArgs\n        {\n            EndpointId = \"ep-2byz5npiuu1hc2dx0efkv7ehc\",\n            SecurityGroupId = \"sg-2d6722jpp55og58ozfd1sqtdb\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.NewSecurityGroup(ctx, \"foo\", \u0026privatelink.SecurityGroupArgs{\n\t\t\tEndpointId:      pulumi.String(\"ep-2byz5npiuu1hc2dx0efkv7ehc\"),\n\t\t\tSecurityGroupId: pulumi.String(\"sg-2d6722jpp55og58ozfd1sqtdb\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new SecurityGroup(\"foo\", SecurityGroupArgs.builder()        \n            .endpointId(\"ep-2byz5npiuu1hc2dx0efkv7ehc\")\n            .securityGroupId(\"sg-2d6722jpp55og58ozfd1sqtdb\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:privatelink:SecurityGroup\n    properties:\n      endpointId: ep-2byz5npiuu1hc2dx0efkv7ehc\n      securityGroupId: sg-2d6722jpp55og58ozfd1sqtdb\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPrivateLink Security Group Service can be imported using the endpoint id and security group id, e.g.\n\n```sh\n $ pulumi import volcengine:privatelink/securityGroup:SecurityGroup default ep-2fe630gurkl37k5gfuy33****:sg-xxxxx\n```\n\n ",
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The id of the endpoint.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The id of the security group.\n"
                }
            },
            "required": [
                "endpointId",
                "securityGroupId"
            ],
            "inputProperties": {
                "endpointId": {
                    "type": "string",
                    "description": "The id of the endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The id of the security group.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "endpointId",
                "securityGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroup resources.\n",
                "properties": {
                    "endpointId": {
                        "type": "string",
                        "description": "The id of the endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The id of the security group.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:privatelink/vpcEndpoint:VpcEndpoint": {
            "description": "Provides a resource to manage privatelink vpc endpoint\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst endpoint = new volcengine.privatelink.VpcEndpoint(\"endpoint\", {\n    securityGroupIds: [\"sg-2d5z8cr53k45c58ozfdum****\"],\n    serviceId: \"epsvc-2byz5nzgiansw2dx0eehh****\",\n    endpointName: \"tf-test-ep\",\n    description: \"tf-test\",\n});\nconst zone = new volcengine.privatelink.VpcEndpointZone(\"zone\", {\n    endpointId: endpoint.id,\n    subnetId: \"subnet-2bz47q19zhx4w2dx0eevn****\",\n    privateIpAddress: \"172.16.0.252\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nendpoint = volcengine.privatelink.VpcEndpoint(\"endpoint\",\n    security_group_ids=[\"sg-2d5z8cr53k45c58ozfdum****\"],\n    service_id=\"epsvc-2byz5nzgiansw2dx0eehh****\",\n    endpoint_name=\"tf-test-ep\",\n    description=\"tf-test\")\nzone = volcengine.privatelink.VpcEndpointZone(\"zone\",\n    endpoint_id=endpoint.id,\n    subnet_id=\"subnet-2bz47q19zhx4w2dx0eevn****\",\n    private_ip_address=\"172.16.0.252\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var endpoint = new Volcengine.Privatelink.VpcEndpoint(\"endpoint\", new Volcengine.Privatelink.VpcEndpointArgs\n        {\n            SecurityGroupIds = \n            {\n                \"sg-2d5z8cr53k45c58ozfdum****\",\n            },\n            ServiceId = \"epsvc-2byz5nzgiansw2dx0eehh****\",\n            EndpointName = \"tf-test-ep\",\n            Description = \"tf-test\",\n        });\n        var zone = new Volcengine.Privatelink.VpcEndpointZone(\"zone\", new Volcengine.Privatelink.VpcEndpointZoneArgs\n        {\n            EndpointId = endpoint.Id,\n            SubnetId = \"subnet-2bz47q19zhx4w2dx0eevn****\",\n            PrivateIpAddress = \"172.16.0.252\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tendpoint, err := privatelink.NewVpcEndpoint(ctx, \"endpoint\", \u0026privatelink.VpcEndpointArgs{\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sg-2d5z8cr53k45c58ozfdum****\"),\n\t\t\t},\n\t\t\tServiceId:    pulumi.String(\"epsvc-2byz5nzgiansw2dx0eehh****\"),\n\t\t\tEndpointName: pulumi.String(\"tf-test-ep\"),\n\t\t\tDescription:  pulumi.String(\"tf-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = privatelink.NewVpcEndpointZone(ctx, \"zone\", \u0026privatelink.VpcEndpointZoneArgs{\n\t\t\tEndpointId:       endpoint.ID(),\n\t\t\tSubnetId:         pulumi.String(\"subnet-2bz47q19zhx4w2dx0eevn****\"),\n\t\t\tPrivateIpAddress: pulumi.String(\"172.16.0.252\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var endpoint = new VpcEndpoint(\"endpoint\", VpcEndpointArgs.builder()        \n            .securityGroupIds(\"sg-2d5z8cr53k45c58ozfdum****\")\n            .serviceId(\"epsvc-2byz5nzgiansw2dx0eehh****\")\n            .endpointName(\"tf-test-ep\")\n            .description(\"tf-test\")\n            .build());\n\n        var zone = new VpcEndpointZone(\"zone\", VpcEndpointZoneArgs.builder()        \n            .endpointId(endpoint.id())\n            .subnetId(\"subnet-2bz47q19zhx4w2dx0eevn****\")\n            .privateIpAddress(\"172.16.0.252\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  endpoint:\n    type: volcengine:privatelink:VpcEndpoint\n    properties:\n      securityGroupIds:\n        - sg-2d5z8cr53k45c58ozfdum****\n      serviceId: epsvc-2byz5nzgiansw2dx0eehh****\n      endpointName: tf-test-ep\n      description: tf-test\n  zone:\n    type: volcengine:privatelink:VpcEndpointZone\n    properties:\n      endpointId: ${endpoint.id}\n      subnetId: subnet-2bz47q19zhx4w2dx0eevn****\n      privateIpAddress: 172.16.0.252\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVpcEndpoint can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:privatelink/vpcEndpoint:VpcEndpoint default ep-3rel74u229dz45zsk2i6l****\n```\n\n ",
            "properties": {
                "businessStatus": {
                    "type": "string",
                    "description": "Whether the vpc endpoint is locked.\n"
                },
                "connectionStatus": {
                    "type": "string",
                    "description": "The connection  status of vpc endpoint.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of vpc endpoint.\n"
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The delete time of vpc endpoint.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of vpc endpoint.\n"
                },
                "endpointDomain": {
                    "type": "string",
                    "description": "The domain of vpc endpoint.\n"
                },
                "endpointName": {
                    "type": "string",
                    "description": "The name of vpc endpoint.\n"
                },
                "endpointType": {
                    "type": "string",
                    "description": "The type of vpc endpoint.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the security group ids of vpc endpoint.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The id of vpc endpoint service.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of vpc endpoint service.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of vpc endpoint.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of vpc endpoint.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc id of vpc endpoint.\n"
                }
            },
            "required": [
                "businessStatus",
                "connectionStatus",
                "creationTime",
                "deletedTime",
                "description",
                "endpointDomain",
                "endpointName",
                "endpointType",
                "securityGroupIds",
                "serviceId",
                "serviceName",
                "status",
                "updateTime",
                "vpcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of vpc endpoint.\n"
                },
                "endpointName": {
                    "type": "string",
                    "description": "The name of vpc endpoint.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the security group ids of vpc endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "serviceId": {
                    "type": "string",
                    "description": "The id of vpc endpoint service.\n",
                    "willReplaceOnChanges": true
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of vpc endpoint service.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "securityGroupIds",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcEndpoint resources.\n",
                "properties": {
                    "businessStatus": {
                        "type": "string",
                        "description": "Whether the vpc endpoint is locked.\n"
                    },
                    "connectionStatus": {
                        "type": "string",
                        "description": "The connection  status of vpc endpoint.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of vpc endpoint.\n"
                    },
                    "deletedTime": {
                        "type": "string",
                        "description": "The delete time of vpc endpoint.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of vpc endpoint.\n"
                    },
                    "endpointDomain": {
                        "type": "string",
                        "description": "The domain of vpc endpoint.\n"
                    },
                    "endpointName": {
                        "type": "string",
                        "description": "The name of vpc endpoint.\n"
                    },
                    "endpointType": {
                        "type": "string",
                        "description": "The type of vpc endpoint.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the security group ids of vpc endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The id of vpc endpoint service.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The name of vpc endpoint service.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of vpc endpoint.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of vpc endpoint.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc id of vpc endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:privatelink/vpcEndpointConnection:VpcEndpointConnection": {
            "description": "Provides a resource to manage privatelink vpc endpoint connection\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.privatelink.VpcEndpointConnection(\"foo\", {\n    endpointId: \"ep-3rel74u229dz45zsk2i6l69qa\",\n    serviceId: \"epsvc-2byz5mykk9y4g2dx0efs4aqz3\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.privatelink.VpcEndpointConnection(\"foo\",\n    endpoint_id=\"ep-3rel74u229dz45zsk2i6l69qa\",\n    service_id=\"epsvc-2byz5mykk9y4g2dx0efs4aqz3\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Privatelink.VpcEndpointConnection(\"foo\", new Volcengine.Privatelink.VpcEndpointConnectionArgs\n        {\n            EndpointId = \"ep-3rel74u229dz45zsk2i6l69qa\",\n            ServiceId = \"epsvc-2byz5mykk9y4g2dx0efs4aqz3\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.NewVpcEndpointConnection(ctx, \"foo\", \u0026privatelink.VpcEndpointConnectionArgs{\n\t\t\tEndpointId: pulumi.String(\"ep-3rel74u229dz45zsk2i6l69qa\"),\n\t\t\tServiceId:  pulumi.String(\"epsvc-2byz5mykk9y4g2dx0efs4aqz3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new VpcEndpointConnection(\"foo\", VpcEndpointConnectionArgs.builder()        \n            .endpointId(\"ep-3rel74u229dz45zsk2i6l69qa\")\n            .serviceId(\"epsvc-2byz5mykk9y4g2dx0efs4aqz3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:privatelink:VpcEndpointConnection\n    properties:\n      endpointId: ep-3rel74u229dz45zsk2i6l69qa\n      serviceId: epsvc-2byz5mykk9y4g2dx0efs4aqz3\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPrivateLink Vpc Endpoint Connection Service can be imported using the endpoint id and service id, e.g.\n\n```sh\n $ pulumi import volcengine:privatelink/vpcEndpointConnection:VpcEndpointConnection default ep-3rel74u229dz45zsk2i6l69qa:epsvc-2byz5mykk9y4g2dx0efs4aqz3\n```\n\n ",
            "properties": {
                "connectionStatus": {
                    "type": "string",
                    "description": "The status of the connection.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the connection.\n"
                },
                "endpointId": {
                    "type": "string",
                    "description": "The id of the endpoint.\n"
                },
                "endpointOwnerAccountId": {
                    "type": "string",
                    "description": "The account id of the vpc endpoint.\n"
                },
                "endpointVpcId": {
                    "type": "string",
                    "description": "The vpc id of the vpc endpoint.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The id of the security group.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the connection.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:privatelink/VpcEndpointConnectionZone:VpcEndpointConnectionZone"
                    },
                    "description": "The available zones.\n"
                }
            },
            "required": [
                "connectionStatus",
                "creationTime",
                "endpointId",
                "endpointOwnerAccountId",
                "endpointVpcId",
                "serviceId",
                "updateTime",
                "zones"
            ],
            "inputProperties": {
                "endpointId": {
                    "type": "string",
                    "description": "The id of the endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "serviceId": {
                    "type": "string",
                    "description": "The id of the security group.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "endpointId",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcEndpointConnection resources.\n",
                "properties": {
                    "connectionStatus": {
                        "type": "string",
                        "description": "The status of the connection.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of the connection.\n"
                    },
                    "endpointId": {
                        "type": "string",
                        "description": "The id of the endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "endpointOwnerAccountId": {
                        "type": "string",
                        "description": "The account id of the vpc endpoint.\n"
                    },
                    "endpointVpcId": {
                        "type": "string",
                        "description": "The vpc id of the vpc endpoint.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The id of the security group.\n",
                        "willReplaceOnChanges": true
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of the connection.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:privatelink/VpcEndpointConnectionZone:VpcEndpointConnectionZone"
                        },
                        "description": "The available zones.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:privatelink/vpcEndpointService:VpcEndpointService": {
            "description": "Provides a resource to manage privatelink vpc endpoint service\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.privatelink.VpcEndpointService(\"foo\", {\n    autoAcceptEnabled: true,\n    description: \"tftest\",\n    resources: [{\n        resourceId: \"clb-2bzxccdjo9uyo2dx0eg0orzla\",\n        resourceType: \"CLB\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.privatelink.VpcEndpointService(\"foo\",\n    auto_accept_enabled=True,\n    description=\"tftest\",\n    resources=[volcengine.privatelink.VpcEndpointServiceResourceArgs(\n        resource_id=\"clb-2bzxccdjo9uyo2dx0eg0orzla\",\n        resource_type=\"CLB\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Privatelink.VpcEndpointService(\"foo\", new Volcengine.Privatelink.VpcEndpointServiceArgs\n        {\n            AutoAcceptEnabled = true,\n            Description = \"tftest\",\n            Resources = \n            {\n                new Volcengine.Privatelink.Inputs.VpcEndpointServiceResourceArgs\n                {\n                    ResourceId = \"clb-2bzxccdjo9uyo2dx0eg0orzla\",\n                    ResourceType = \"CLB\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.NewVpcEndpointService(ctx, \"foo\", \u0026privatelink.VpcEndpointServiceArgs{\n\t\t\tAutoAcceptEnabled: pulumi.Bool(true),\n\t\t\tDescription:       pulumi.String(\"tftest\"),\n\t\t\tResources: privatelink.VpcEndpointServiceResourceArray{\n\t\t\t\t\u0026privatelink.VpcEndpointServiceResourceArgs{\n\t\t\t\t\tResourceId:   pulumi.String(\"clb-2bzxccdjo9uyo2dx0eg0orzla\"),\n\t\t\t\t\tResourceType: pulumi.String(\"CLB\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new VpcEndpointService(\"foo\", VpcEndpointServiceArgs.builder()        \n            .autoAcceptEnabled(true)\n            .description(\"tftest\")\n            .resources(VpcEndpointServiceResourceArgs.builder()\n                .resourceId(\"clb-2bzxccdjo9uyo2dx0eg0orzla\")\n                .resourceType(\"CLB\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:privatelink:VpcEndpointService\n    properties:\n      autoAcceptEnabled: true\n      description: tftest\n      resources:\n        - resourceId: clb-2bzxccdjo9uyo2dx0eg0orzla\n          resourceType: CLB\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVpcEndpointService can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:privatelink/vpcEndpointService:VpcEndpointService default epsvc-2fe630gurkl37k5gfuy33****\n```\n\n ",
            "properties": {
                "autoAcceptEnabled": {
                    "type": "boolean",
                    "description": "Whether auto accept node connect.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of service.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of service.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:privatelink/VpcEndpointServiceResource:VpcEndpointServiceResource"
                    },
                    "description": "The resources info. When create vpc endpoint service, the resource must exist.\n"
                },
                "serviceDomain": {
                    "type": "string",
                    "description": "The domain of service.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The Id of service.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of service.\n"
                },
                "serviceResourceType": {
                    "type": "string",
                    "description": "The resource type of service.\n"
                },
                "serviceType": {
                    "type": "string",
                    "description": "The type of service.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of service.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of service.\n"
                },
                "zoneIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of zones.\n"
                }
            },
            "required": [
                "creationTime",
                "resources",
                "serviceDomain",
                "serviceId",
                "serviceName",
                "serviceResourceType",
                "serviceType",
                "status",
                "updateTime",
                "zoneIds"
            ],
            "inputProperties": {
                "autoAcceptEnabled": {
                    "type": "boolean",
                    "description": "Whether auto accept node connect.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of service.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:privatelink/VpcEndpointServiceResource:VpcEndpointServiceResource"
                    },
                    "description": "The resources info. When create vpc endpoint service, the resource must exist.\n"
                }
            },
            "requiredInputs": [
                "resources"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcEndpointService resources.\n",
                "properties": {
                    "autoAcceptEnabled": {
                        "type": "boolean",
                        "description": "Whether auto accept node connect.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of service.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of service.\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:privatelink/VpcEndpointServiceResource:VpcEndpointServiceResource"
                        },
                        "description": "The resources info. When create vpc endpoint service, the resource must exist.\n"
                    },
                    "serviceDomain": {
                        "type": "string",
                        "description": "The domain of service.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The Id of service.\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The name of service.\n"
                    },
                    "serviceResourceType": {
                        "type": "string",
                        "description": "The resource type of service.\n"
                    },
                    "serviceType": {
                        "type": "string",
                        "description": "The type of service.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of service.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of service.\n"
                    },
                    "zoneIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of zones.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:privatelink/vpcEndpointServicePermission:VpcEndpointServicePermission": {
            "description": "Provides a resource to manage privatelink vpc endpoint service permission\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.privatelink.VpcEndpointServicePermission(\"foo\", {\n    permitAccountId: \"210000000\",\n    serviceId: \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n});\nconst foo1 = new volcengine.privatelink.VpcEndpointServicePermission(\"foo1\", {\n    permitAccountId: \"210000001\",\n    serviceId: \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.privatelink.VpcEndpointServicePermission(\"foo\",\n    permit_account_id=\"210000000\",\n    service_id=\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\nfoo1 = volcengine.privatelink.VpcEndpointServicePermission(\"foo1\",\n    permit_account_id=\"210000001\",\n    service_id=\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Privatelink.VpcEndpointServicePermission(\"foo\", new Volcengine.Privatelink.VpcEndpointServicePermissionArgs\n        {\n            PermitAccountId = \"210000000\",\n            ServiceId = \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n        });\n        var foo1 = new Volcengine.Privatelink.VpcEndpointServicePermission(\"foo1\", new Volcengine.Privatelink.VpcEndpointServicePermissionArgs\n        {\n            PermitAccountId = \"210000001\",\n            ServiceId = \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.NewVpcEndpointServicePermission(ctx, \"foo\", \u0026privatelink.VpcEndpointServicePermissionArgs{\n\t\t\tPermitAccountId: pulumi.String(\"210000000\"),\n\t\t\tServiceId:       pulumi.String(\"epsvc-3rel73uf2ewao5zsk2j2l58ro\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = privatelink.NewVpcEndpointServicePermission(ctx, \"foo1\", \u0026privatelink.VpcEndpointServicePermissionArgs{\n\t\t\tPermitAccountId: pulumi.String(\"210000001\"),\n\t\t\tServiceId:       pulumi.String(\"epsvc-3rel73uf2ewao5zsk2j2l58ro\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new VpcEndpointServicePermission(\"foo\", VpcEndpointServicePermissionArgs.builder()        \n            .permitAccountId(\"210000000\")\n            .serviceId(\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\n            .build());\n\n        var foo1 = new VpcEndpointServicePermission(\"foo1\", VpcEndpointServicePermissionArgs.builder()        \n            .permitAccountId(\"210000001\")\n            .serviceId(\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:privatelink:VpcEndpointServicePermission\n    properties:\n      permitAccountId: 210000000\n      serviceId: epsvc-3rel73uf2ewao5zsk2j2l58ro\n  foo1:\n    type: volcengine:privatelink:VpcEndpointServicePermission\n    properties:\n      permitAccountId: 210000001\n      serviceId: epsvc-3rel73uf2ewao5zsk2j2l58ro\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVpcEndpointServicePermission can be imported using the serviceId:permitAccountId, e.g.\n\n```sh\n $ pulumi import volcengine:privatelink/vpcEndpointServicePermission:VpcEndpointServicePermission default epsvc-2fe630gurkl37k5gfuy33****:2100000000\n```\n\n ",
            "properties": {
                "permitAccountId": {
                    "type": "string",
                    "description": "The id of account.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The id of service.\n"
                }
            },
            "required": [
                "permitAccountId",
                "serviceId"
            ],
            "inputProperties": {
                "permitAccountId": {
                    "type": "string",
                    "description": "The id of account.\n",
                    "willReplaceOnChanges": true
                },
                "serviceId": {
                    "type": "string",
                    "description": "The id of service.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permitAccountId",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcEndpointServicePermission resources.\n",
                "properties": {
                    "permitAccountId": {
                        "type": "string",
                        "description": "The id of account.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The id of service.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:privatelink/vpcEndpointServiceResource:VpcEndpointServiceResource": {
            "description": "Provides a resource to manage privatelink vpc endpoint service resource\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.privatelink.VpcEndpointServiceResource(\"foo\", {\n    resourceId: \"clb-3reii8qfbp7gg5zsk2hsrbe3c\",\n    serviceId: \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n});\nconst foo1 = new volcengine.privatelink.VpcEndpointServiceResource(\"foo1\", {\n    resourceId: \"clb-2d6sfye98rzls58ozfducee1o\",\n    serviceId: \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n});\nconst foo2 = new volcengine.privatelink.VpcEndpointServiceResource(\"foo2\", {\n    resourceId: \"clb-3refkvae02gow5zsk2ilaev5y\",\n    serviceId: \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.privatelink.VpcEndpointServiceResource(\"foo\",\n    resource_id=\"clb-3reii8qfbp7gg5zsk2hsrbe3c\",\n    service_id=\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\nfoo1 = volcengine.privatelink.VpcEndpointServiceResource(\"foo1\",\n    resource_id=\"clb-2d6sfye98rzls58ozfducee1o\",\n    service_id=\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\nfoo2 = volcengine.privatelink.VpcEndpointServiceResource(\"foo2\",\n    resource_id=\"clb-3refkvae02gow5zsk2ilaev5y\",\n    service_id=\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Privatelink.VpcEndpointServiceResource(\"foo\", new Volcengine.Privatelink.VpcEndpointServiceResourceArgs\n        {\n            ResourceId = \"clb-3reii8qfbp7gg5zsk2hsrbe3c\",\n            ServiceId = \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n        });\n        var foo1 = new Volcengine.Privatelink.VpcEndpointServiceResource(\"foo1\", new Volcengine.Privatelink.VpcEndpointServiceResourceArgs\n        {\n            ResourceId = \"clb-2d6sfye98rzls58ozfducee1o\",\n            ServiceId = \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n        });\n        var foo2 = new Volcengine.Privatelink.VpcEndpointServiceResource(\"foo2\", new Volcengine.Privatelink.VpcEndpointServiceResourceArgs\n        {\n            ResourceId = \"clb-3refkvae02gow5zsk2ilaev5y\",\n            ServiceId = \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.NewVpcEndpointServiceResource(ctx, \"foo\", \u0026privatelink.VpcEndpointServiceResourceArgs{\n\t\t\tResourceId: pulumi.String(\"clb-3reii8qfbp7gg5zsk2hsrbe3c\"),\n\t\t\tServiceId:  pulumi.String(\"epsvc-3rel73uf2ewao5zsk2j2l58ro\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = privatelink.NewVpcEndpointServiceResource(ctx, \"foo1\", \u0026privatelink.VpcEndpointServiceResourceArgs{\n\t\t\tResourceId: pulumi.String(\"clb-2d6sfye98rzls58ozfducee1o\"),\n\t\t\tServiceId:  pulumi.String(\"epsvc-3rel73uf2ewao5zsk2j2l58ro\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = privatelink.NewVpcEndpointServiceResource(ctx, \"foo2\", \u0026privatelink.VpcEndpointServiceResourceArgs{\n\t\t\tResourceId: pulumi.String(\"clb-3refkvae02gow5zsk2ilaev5y\"),\n\t\t\tServiceId:  pulumi.String(\"epsvc-3rel73uf2ewao5zsk2j2l58ro\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new VpcEndpointServiceResource(\"foo\", VpcEndpointServiceResourceArgs.builder()        \n            .resourceId(\"clb-3reii8qfbp7gg5zsk2hsrbe3c\")\n            .serviceId(\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\n            .build());\n\n        var foo1 = new VpcEndpointServiceResource(\"foo1\", VpcEndpointServiceResourceArgs.builder()        \n            .resourceId(\"clb-2d6sfye98rzls58ozfducee1o\")\n            .serviceId(\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\n            .build());\n\n        var foo2 = new VpcEndpointServiceResource(\"foo2\", VpcEndpointServiceResourceArgs.builder()        \n            .resourceId(\"clb-3refkvae02gow5zsk2ilaev5y\")\n            .serviceId(\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:privatelink:VpcEndpointServiceResource\n    properties:\n      resourceId: clb-3reii8qfbp7gg5zsk2hsrbe3c\n      serviceId: epsvc-3rel73uf2ewao5zsk2j2l58ro\n  foo1:\n    type: volcengine:privatelink:VpcEndpointServiceResource\n    properties:\n      resourceId: clb-2d6sfye98rzls58ozfducee1o\n      serviceId: epsvc-3rel73uf2ewao5zsk2j2l58ro\n  foo2:\n    type: volcengine:privatelink:VpcEndpointServiceResource\n    properties:\n      resourceId: clb-3refkvae02gow5zsk2ilaev5y\n      serviceId: epsvc-3rel73uf2ewao5zsk2j2l58ro\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVpcEndpointServiceResource can be imported using the serviceId:resourceId, e.g.\n\n```sh\n $ pulumi import volcengine:privatelink/vpcEndpointServiceResource:VpcEndpointServiceResource default epsvc-2fe630gurkl37k5gfuy33****:clb-bp1o94dp5i6ea****\n```\n\n ",
            "properties": {
                "resourceId": {
                    "type": "string",
                    "description": "The id of resource.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The id of service.\n"
                }
            },
            "required": [
                "resourceId",
                "serviceId"
            ],
            "inputProperties": {
                "resourceId": {
                    "type": "string",
                    "description": "The id of resource.\n",
                    "willReplaceOnChanges": true
                },
                "serviceId": {
                    "type": "string",
                    "description": "The id of service.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "resourceId",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcEndpointServiceResource resources.\n",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "The id of resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The id of service.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:privatelink/vpcEndpointZone:VpcEndpointZone": {
            "description": "Provides a resource to manage privatelink vpc endpoint zone\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.privatelink.VpcEndpointZone(\"foo\", {\n    endpointId: \"ep-2byz5nlkimc5c2dx0ef9g****\",\n    privateIpAddress: \"172.16.0.251\",\n    subnetId: \"subnet-2bz47q19zhx4w2dx0eevn****\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.privatelink.VpcEndpointZone(\"foo\",\n    endpoint_id=\"ep-2byz5nlkimc5c2dx0ef9g****\",\n    private_ip_address=\"172.16.0.251\",\n    subnet_id=\"subnet-2bz47q19zhx4w2dx0eevn****\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Privatelink.VpcEndpointZone(\"foo\", new Volcengine.Privatelink.VpcEndpointZoneArgs\n        {\n            EndpointId = \"ep-2byz5nlkimc5c2dx0ef9g****\",\n            PrivateIpAddress = \"172.16.0.251\",\n            SubnetId = \"subnet-2bz47q19zhx4w2dx0eevn****\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.NewVpcEndpointZone(ctx, \"foo\", \u0026privatelink.VpcEndpointZoneArgs{\n\t\t\tEndpointId:       pulumi.String(\"ep-2byz5nlkimc5c2dx0ef9g****\"),\n\t\t\tPrivateIpAddress: pulumi.String(\"172.16.0.251\"),\n\t\t\tSubnetId:         pulumi.String(\"subnet-2bz47q19zhx4w2dx0eevn****\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new VpcEndpointZone(\"foo\", VpcEndpointZoneArgs.builder()        \n            .endpointId(\"ep-2byz5nlkimc5c2dx0ef9g****\")\n            .privateIpAddress(\"172.16.0.251\")\n            .subnetId(\"subnet-2bz47q19zhx4w2dx0eevn****\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:privatelink:VpcEndpointZone\n    properties:\n      endpointId: ep-2byz5nlkimc5c2dx0ef9g****\n      privateIpAddress: 172.16.0.251\n      subnetId: subnet-2bz47q19zhx4w2dx0eevn****\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVpcEndpointZone can be imported using the endpointId:subnetId, e.g.\n\n```sh\n $ pulumi import volcengine:privatelink/vpcEndpointZone:VpcEndpointZone default ep-3rel75r081l345zsk2i59****:subnet-2bz47q19zhx4w2dx0eevn****\n```\n\n ",
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The endpoint id of vpc endpoint zone.\n"
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The network interface id of vpc endpoint.\n"
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "The private ip address of vpc endpoint zone.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet id of vpc endpoint zone.\n"
                },
                "zoneDomain": {
                    "type": "string",
                    "description": "The domain of vpc endpoint zone.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The Id of vpc endpoint zone.\n"
                },
                "zoneStatus": {
                    "type": "string",
                    "description": "The status of vpc endpoint zone.\n"
                }
            },
            "required": [
                "endpointId",
                "networkInterfaceId",
                "privateIpAddress",
                "subnetId",
                "zoneDomain",
                "zoneId",
                "zoneStatus"
            ],
            "inputProperties": {
                "endpointId": {
                    "type": "string",
                    "description": "The endpoint id of vpc endpoint zone.\n",
                    "willReplaceOnChanges": true
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "The private ip address of vpc endpoint zone.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet id of vpc endpoint zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "endpointId",
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcEndpointZone resources.\n",
                "properties": {
                    "endpointId": {
                        "type": "string",
                        "description": "The endpoint id of vpc endpoint zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "The network interface id of vpc endpoint.\n"
                    },
                    "privateIpAddress": {
                        "type": "string",
                        "description": "The private ip address of vpc endpoint zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The subnet id of vpc endpoint zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "zoneDomain": {
                        "type": "string",
                        "description": "The domain of vpc endpoint zone.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The Id of vpc endpoint zone.\n"
                    },
                    "zoneStatus": {
                        "type": "string",
                        "description": "The status of vpc endpoint zone.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds/account:Account": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds account\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.rds.Account(\"foo\", {\n    accountName: \"test\",\n    accountPassword: \"Aatest123\",\n    accountType: \"Normal\",\n    instanceId: \"mysql-0fdd3bab2e7c\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.rds.Account(\"foo\",\n    account_name=\"test\",\n    account_password=\"Aatest123\",\n    account_type=\"Normal\",\n    instance_id=\"mysql-0fdd3bab2e7c\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Rds.Account(\"foo\", new Volcengine.Rds.AccountArgs\n        {\n            AccountName = \"test\",\n            AccountPassword = \"Aatest123\",\n            AccountType = \"Normal\",\n            InstanceId = \"mysql-0fdd3bab2e7c\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds.NewAccount(ctx, \"foo\", \u0026rds.AccountArgs{\n\t\t\tAccountName:     pulumi.String(\"test\"),\n\t\t\tAccountPassword: pulumi.String(\"Aatest123\"),\n\t\t\tAccountType:     pulumi.String(\"Normal\"),\n\t\t\tInstanceId:      pulumi.String(\"mysql-0fdd3bab2e7c\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Account(\"foo\", AccountArgs.builder()        \n            .accountName(\"test\")\n            .accountPassword(\"Aatest123\")\n            .accountType(\"Normal\")\n            .instanceId(\"mysql-0fdd3bab2e7c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:rds:Account\n    properties:\n      accountName: test\n      accountPassword: Aatest123\n      accountType: Normal\n      instanceId: mysql-0fdd3bab2e7c\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRDS account can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:rds/account:Account default mysql-42b38c769c4b:test\n```\n\n ",
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Database account name. The rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\nThe [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.\n"
                },
                "accountPassword": {
                    "type": "string",
                    "description": "The password of the database account.\nillustrate\nCannot start with `!` or `@`.\nThe length is 8~32 characters.\nIt consists of any three of uppercase letters, lowercase letters, numbers, and special characters.\nThe special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "accountType": {
                    "type": "string",
                    "description": "Database account type, value:\nSuper: A high-privilege account. Only one database account can be created for an instance.\nNormal: An account with ordinary privileges.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n"
                }
            },
            "required": [
                "accountName",
                "accountPassword",
                "accountType",
                "instanceId"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Database account name. The rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\nThe [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.\n",
                    "willReplaceOnChanges": true
                },
                "accountPassword": {
                    "type": "string",
                    "description": "The password of the database account.\nillustrate\nCannot start with `!` or `@`.\nThe length is 8~32 characters.\nIt consists of any three of uppercase letters, lowercase letters, numbers, and special characters.\nThe special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "accountType": {
                    "type": "string",
                    "description": "Database account type, value:\nSuper: A high-privilege account. Only one database account can be created for an instance.\nNormal: An account with ordinary privileges.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "accountPassword",
                "accountType",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Database account name. The rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\nThe [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "accountPassword": {
                        "type": "string",
                        "description": "The password of the database account.\nillustrate\nCannot start with `!` or `@`.\nThe length is 8~32 characters.\nIt consists of any three of uppercase letters, lowercase letters, numbers, and special characters.\nThe special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "accountType": {
                        "type": "string",
                        "description": "Database account type, value:\nSuper: A high-privilege account. Only one database account can be created for an instance.\nNormal: An account with ordinary privileges.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds/accountPrivilege:AccountPrivilege": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds account privilege\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst appName = new volcengine.rds.Account(\"appName\", {\n    instanceId: \"mysql-0fdd3bab2e7c\",\n    accountName: \"terraform-test-app\",\n    accountPassword: \"Aatest123\",\n    accountType: \"Normal\",\n});\nconst foo = new volcengine.rds.AccountPrivilege(\"foo\", {\n    instanceId: \"mysql-0fdd3bab2e7c\",\n    accountName: appName.accountName,\n    dbPrivileges: [\n        {\n            dbName: \"foo\",\n            accountPrivilege: \"Custom\",\n            accountPrivilegeStr: \"ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES\",\n        },\n        {\n            dbName: \"bar\",\n            accountPrivilege: \"DDLOnly\",\n        },\n        {\n            dbName: \"demo\",\n            accountPrivilege: \"ReadWrite\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\napp_name = volcengine.rds.Account(\"appName\",\n    instance_id=\"mysql-0fdd3bab2e7c\",\n    account_name=\"terraform-test-app\",\n    account_password=\"Aatest123\",\n    account_type=\"Normal\")\nfoo = volcengine.rds.AccountPrivilege(\"foo\",\n    instance_id=\"mysql-0fdd3bab2e7c\",\n    account_name=app_name.account_name,\n    db_privileges=[\n        volcengine.rds.AccountPrivilegeDbPrivilegeArgs(\n            db_name=\"foo\",\n            account_privilege=\"Custom\",\n            account_privilege_str=\"ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES\",\n        ),\n        volcengine.rds.AccountPrivilegeDbPrivilegeArgs(\n            db_name=\"bar\",\n            account_privilege=\"DDLOnly\",\n        ),\n        volcengine.rds.AccountPrivilegeDbPrivilegeArgs(\n            db_name=\"demo\",\n            account_privilege=\"ReadWrite\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var appName = new Volcengine.Rds.Account(\"appName\", new Volcengine.Rds.AccountArgs\n        {\n            InstanceId = \"mysql-0fdd3bab2e7c\",\n            AccountName = \"terraform-test-app\",\n            AccountPassword = \"Aatest123\",\n            AccountType = \"Normal\",\n        });\n        var foo = new Volcengine.Rds.AccountPrivilege(\"foo\", new Volcengine.Rds.AccountPrivilegeArgs\n        {\n            InstanceId = \"mysql-0fdd3bab2e7c\",\n            AccountName = appName.AccountName,\n            DbPrivileges = \n            {\n                new Volcengine.Rds.Inputs.AccountPrivilegeDbPrivilegeArgs\n                {\n                    DbName = \"foo\",\n                    AccountPrivilege = \"Custom\",\n                    AccountPrivilegeStr = \"ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES\",\n                },\n                new Volcengine.Rds.Inputs.AccountPrivilegeDbPrivilegeArgs\n                {\n                    DbName = \"bar\",\n                    AccountPrivilege = \"DDLOnly\",\n                },\n                new Volcengine.Rds.Inputs.AccountPrivilegeDbPrivilegeArgs\n                {\n                    DbName = \"demo\",\n                    AccountPrivilege = \"ReadWrite\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tappName, err := rds.NewAccount(ctx, \"appName\", \u0026rds.AccountArgs{\n\t\t\tInstanceId:      pulumi.String(\"mysql-0fdd3bab2e7c\"),\n\t\t\tAccountName:     pulumi.String(\"terraform-test-app\"),\n\t\t\tAccountPassword: pulumi.String(\"Aatest123\"),\n\t\t\tAccountType:     pulumi.String(\"Normal\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rds.NewAccountPrivilege(ctx, \"foo\", \u0026rds.AccountPrivilegeArgs{\n\t\t\tInstanceId:  pulumi.String(\"mysql-0fdd3bab2e7c\"),\n\t\t\tAccountName: appName.AccountName,\n\t\t\tDbPrivileges: rds.AccountPrivilegeDbPrivilegeArray{\n\t\t\t\t\u0026rds.AccountPrivilegeDbPrivilegeArgs{\n\t\t\t\t\tDbName:              pulumi.String(\"foo\"),\n\t\t\t\t\tAccountPrivilege:    pulumi.String(\"Custom\"),\n\t\t\t\t\tAccountPrivilegeStr: pulumi.String(\"ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES\"),\n\t\t\t\t},\n\t\t\t\t\u0026rds.AccountPrivilegeDbPrivilegeArgs{\n\t\t\t\t\tDbName:           pulumi.String(\"bar\"),\n\t\t\t\t\tAccountPrivilege: pulumi.String(\"DDLOnly\"),\n\t\t\t\t},\n\t\t\t\t\u0026rds.AccountPrivilegeDbPrivilegeArgs{\n\t\t\t\t\tDbName:           pulumi.String(\"demo\"),\n\t\t\t\t\tAccountPrivilege: pulumi.String(\"ReadWrite\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var appName = new Account(\"appName\", AccountArgs.builder()        \n            .instanceId(\"mysql-0fdd3bab2e7c\")\n            .accountName(\"terraform-test-app\")\n            .accountPassword(\"Aatest123\")\n            .accountType(\"Normal\")\n            .build());\n\n        var foo = new AccountPrivilege(\"foo\", AccountPrivilegeArgs.builder()        \n            .instanceId(\"mysql-0fdd3bab2e7c\")\n            .accountName(appName.accountName())\n            .dbPrivileges(            \n                AccountPrivilegeDbPrivilegeArgs.builder()\n                    .dbName(\"foo\")\n                    .accountPrivilege(\"Custom\")\n                    .accountPrivilegeStr(\"ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES\")\n                    .build(),\n                AccountPrivilegeDbPrivilegeArgs.builder()\n                    .dbName(\"bar\")\n                    .accountPrivilege(\"DDLOnly\")\n                    .build(),\n                AccountPrivilegeDbPrivilegeArgs.builder()\n                    .dbName(\"demo\")\n                    .accountPrivilege(\"ReadWrite\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  appName:\n    type: volcengine:rds:Account\n    properties:\n      instanceId: mysql-0fdd3bab2e7c\n      accountName: terraform-test-app\n      accountPassword: Aatest123\n      accountType: Normal\n  foo:\n    type: volcengine:rds:AccountPrivilege\n    properties:\n      instanceId: mysql-0fdd3bab2e7c\n      accountName: ${appName.accountName}\n      dbPrivileges:\n        - dbName: foo\n          accountPrivilege: Custom\n          accountPrivilegeStr: ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES\n        - dbName: bar\n          accountPrivilege: DDLOnly\n        - dbName: demo\n          accountPrivilege: ReadWrite\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRDS account privilege can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:rds/accountPrivilege:AccountPrivilege default mysql-42b38c769c4b:account_name\n```\n\n ",
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Database account name. The rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\nThe [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.\n"
                },
                "dbPrivileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds/AccountPrivilegeDbPrivilege:AccountPrivilegeDbPrivilege"
                    },
                    "description": "The privileges of the account.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n"
                }
            },
            "required": [
                "accountName",
                "dbPrivileges",
                "instanceId"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Database account name. The rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\nThe [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.\n",
                    "willReplaceOnChanges": true
                },
                "dbPrivileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds/AccountPrivilegeDbPrivilege:AccountPrivilegeDbPrivilege"
                    },
                    "description": "The privileges of the account.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "dbPrivileges",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountPrivilege resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Database account name. The rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\nThe [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "dbPrivileges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds/AccountPrivilegeDbPrivilege:AccountPrivilegeDbPrivilege"
                        },
                        "description": "The privileges of the account.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds/database:Database": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds database\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.rds.Database(\"foo\", {\n    characterSetName: \"utf8mb4\",\n    dbName: \"foo\",\n    instanceId: \"mysql-0fdd3bab2e7c\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.rds.Database(\"foo\",\n    character_set_name=\"utf8mb4\",\n    db_name=\"foo\",\n    instance_id=\"mysql-0fdd3bab2e7c\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Rds.Database(\"foo\", new Volcengine.Rds.DatabaseArgs\n        {\n            CharacterSetName = \"utf8mb4\",\n            DbName = \"foo\",\n            InstanceId = \"mysql-0fdd3bab2e7c\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds.NewDatabase(ctx, \"foo\", \u0026rds.DatabaseArgs{\n\t\t\tCharacterSetName: pulumi.String(\"utf8mb4\"),\n\t\t\tDbName:           pulumi.String(\"foo\"),\n\t\t\tInstanceId:       pulumi.String(\"mysql-0fdd3bab2e7c\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Database(\"foo\", DatabaseArgs.builder()        \n            .characterSetName(\"utf8mb4\")\n            .dbName(\"foo\")\n            .instanceId(\"mysql-0fdd3bab2e7c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:rds:Database\n    properties:\n      characterSetName: utf8mb4\n      dbName: foo\n      instanceId: mysql-0fdd3bab2e7c\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDatabase can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:rds/database:Database default mysql-42b38c769c4b:dbname\n```\n\n ",
            "properties": {
                "characterSetName": {
                    "type": "string",
                    "description": "Database character set. Currently supported character sets include: utf8, utf8mb4, latin1, ascii.\n"
                },
                "dbName": {
                    "type": "string",
                    "description": "Name database.\nillustrate:\nUnique name.\nThe length is 2~64 characters.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, and underscores (_) or dashes (-).\nDatabase names are disabled [keywords](https://www.volcengine.com/docs/6313/66162).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n"
                }
            },
            "required": [
                "characterSetName",
                "dbName",
                "instanceId"
            ],
            "inputProperties": {
                "characterSetName": {
                    "type": "string",
                    "description": "Database character set. Currently supported character sets include: utf8, utf8mb4, latin1, ascii.\n",
                    "willReplaceOnChanges": true
                },
                "dbName": {
                    "type": "string",
                    "description": "Name database.\nillustrate:\nUnique name.\nThe length is 2~64 characters.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, and underscores (_) or dashes (-).\nDatabase names are disabled [keywords](https://www.volcengine.com/docs/6313/66162).\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "characterSetName",
                "dbName",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "characterSetName": {
                        "type": "string",
                        "description": "Database character set. Currently supported character sets include: utf8, utf8mb4, latin1, ascii.\n",
                        "willReplaceOnChanges": true
                    },
                    "dbName": {
                        "type": "string",
                        "description": "Name database.\nillustrate:\nUnique name.\nThe length is 2~64 characters.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, and underscores (_) or dashes (-).\nDatabase names are disabled [keywords](https://www.volcengine.com/docs/6313/66162).\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds/instance:Instance": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.rds.Instance(\"foo\", {\n    chargeType: \"PostPaid\",\n    dbEngine: \"MySQL\",\n    dbEngineVersion: \"MySQL_Community_5_7\",\n    instanceName: \"tf-test\",\n    instanceSpecName: \"rds.mysql.1c2g\",\n    instanceType: \"HA\",\n    region: \"cn-north-4\",\n    storageSpaceGb: 100,\n    storageType: \"LocalSSD\",\n    subnetId: \"subnet-1g0d4fkh1nabk8ibuxx1jtvss\",\n    vpcId: \"vpc-3cj17x7u9bzeo6c6rrtzfpaeb\",\n    zone: \"cn-langfang-b\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.rds.Instance(\"foo\",\n    charge_type=\"PostPaid\",\n    db_engine=\"MySQL\",\n    db_engine_version=\"MySQL_Community_5_7\",\n    instance_name=\"tf-test\",\n    instance_spec_name=\"rds.mysql.1c2g\",\n    instance_type=\"HA\",\n    region=\"cn-north-4\",\n    storage_space_gb=100,\n    storage_type=\"LocalSSD\",\n    subnet_id=\"subnet-1g0d4fkh1nabk8ibuxx1jtvss\",\n    vpc_id=\"vpc-3cj17x7u9bzeo6c6rrtzfpaeb\",\n    zone=\"cn-langfang-b\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Rds.Instance(\"foo\", new Volcengine.Rds.InstanceArgs\n        {\n            ChargeType = \"PostPaid\",\n            DbEngine = \"MySQL\",\n            DbEngineVersion = \"MySQL_Community_5_7\",\n            InstanceName = \"tf-test\",\n            InstanceSpecName = \"rds.mysql.1c2g\",\n            InstanceType = \"HA\",\n            Region = \"cn-north-4\",\n            StorageSpaceGb = 100,\n            StorageType = \"LocalSSD\",\n            SubnetId = \"subnet-1g0d4fkh1nabk8ibuxx1jtvss\",\n            VpcId = \"vpc-3cj17x7u9bzeo6c6rrtzfpaeb\",\n            Zone = \"cn-langfang-b\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds.NewInstance(ctx, \"foo\", \u0026rds.InstanceArgs{\n\t\t\tChargeType:       pulumi.String(\"PostPaid\"),\n\t\t\tDbEngine:         pulumi.String(\"MySQL\"),\n\t\t\tDbEngineVersion:  pulumi.String(\"MySQL_Community_5_7\"),\n\t\t\tInstanceName:     pulumi.String(\"tf-test\"),\n\t\t\tInstanceSpecName: pulumi.String(\"rds.mysql.1c2g\"),\n\t\t\tInstanceType:     pulumi.String(\"HA\"),\n\t\t\tRegion:           pulumi.String(\"cn-north-4\"),\n\t\t\tStorageSpaceGb:   pulumi.Int(100),\n\t\t\tStorageType:      pulumi.String(\"LocalSSD\"),\n\t\t\tSubnetId:         pulumi.String(\"subnet-1g0d4fkh1nabk8ibuxx1jtvss\"),\n\t\t\tVpcId:            pulumi.String(\"vpc-3cj17x7u9bzeo6c6rrtzfpaeb\"),\n\t\t\tZone:             pulumi.String(\"cn-langfang-b\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Instance(\"foo\", InstanceArgs.builder()        \n            .chargeType(\"PostPaid\")\n            .dbEngine(\"MySQL\")\n            .dbEngineVersion(\"MySQL_Community_5_7\")\n            .instanceName(\"tf-test\")\n            .instanceSpecName(\"rds.mysql.1c2g\")\n            .instanceType(\"HA\")\n            .region(\"cn-north-4\")\n            .storageSpaceGb(100)\n            .storageType(\"LocalSSD\")\n            .subnetId(\"subnet-1g0d4fkh1nabk8ibuxx1jtvss\")\n            .vpcId(\"vpc-3cj17x7u9bzeo6c6rrtzfpaeb\")\n            .zone(\"cn-langfang-b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:rds:Instance\n    properties:\n      chargeType: PostPaid\n      dbEngine: MySQL\n      dbEngineVersion: MySQL_Community_5_7\n      instanceName: tf-test\n      instanceSpecName: rds.mysql.1c2g\n      instanceType: HA\n      region: cn-north-4\n      storageSpaceGb: 100\n      storageType: LocalSSD\n      subnetId: subnet-1g0d4fkh1nabk8ibuxx1jtvss\n      vpcId: vpc-3cj17x7u9bzeo6c6rrtzfpaeb\n      zone: cn-langfang-b\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRDS Instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:rds/instance:Instance default mysql-42b38c769c4b\n```\n\n ",
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to automatically renew. Default: false. Value:\ntrue: yes.\nfalse: no. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "Billing type. Value:\nPostPaid: Postpaid (pay-as-you-go).\nPrepaid: Prepaid (yearly and monthly).\n"
                },
                "connectionInfo": {
                    "$ref": "#/types/volcengine:rds/InstanceConnectionInfo:InstanceConnectionInfo",
                    "description": "The connection info ot the RDS instance.\n"
                },
                "dbEngine": {
                    "type": "string",
                    "description": "Database type. Value:\nMySQL (default).\n"
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "Instance type. Value:\nMySQL_Community_5_7\nMySQL_8_0.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Set the name of the instance. The naming rules are as follows:\n"
                },
                "instanceSpecName": {
                    "type": "string",
                    "description": "Instance specification name, you can specify the specification name of the instance to be created. Value:\nrds.mysql.1c2g\nrds.mysql.2c4g\nrds.mysql.4c8g\nrds.mysql.4c16g\nrds.mysql.8c32g\nrds.mysql.16c64g\nrds.mysql.16c128g\nrds.mysql.32c128g\nrds.mysql.32c256g.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Instance type. Value:\nHA: High availability version.\n"
                },
                "prepaidPeriod": {
                    "type": "string",
                    "description": "The purchase cycle in the prepaid scenario. Value:\nMonth: monthly subscription.\nYear: yearly subscription. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "Select the project to which the instance belongs. If this parameter is left blank, the new instance will not be added to any project. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the RDS instance.\n"
                },
                "storageSpaceGb": {
                    "type": "integer",
                    "description": "The storage space(GB) of the RDS instance.\n"
                },
                "storageType": {
                    "type": "string",
                    "description": "Instance storage type. Value:\nLocalSSD: Local SSD disk.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet ID. The subnet must belong to the selected Availability Zone.\n"
                },
                "superAccountName": {
                    "type": "string",
                    "description": "Fill in the high-privileged user account name. The naming rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\n[Keywords](https://www.volcengine.com/docs/6313/66162) are not allowed for account names.\n"
                },
                "superAccountPassword": {
                    "type": "string",
                    "description": "Set a high-privilege account password. The rules are as follows:\nOnly uppercase and lowercase letters, numbers and the following special characters _#!@$%^*()+=-.\nThe length needs to be within 8~32 characters.\nContains at least 3 of uppercase letters, lowercase letters, numbers or special characters.\n"
                },
                "supperAccountPassword": {
                    "type": "string",
                    "description": "supper_account_password is deprecated, use super_account_password instead Set a high-privilege account password. The rules are as follows:\nOnly uppercase and lowercase letters, numbers and the following special characters _#!@$%^*()+=-.\nThe length needs to be within 8~32 characters.\nContains at least 3 of uppercase letters, lowercase letters, numbers or special characters.\n",
                    "deprecationMessage": "supper_account_password is deprecated, use super_account_password instead"
                },
                "usedTime": {
                    "type": "integer",
                    "description": "The purchase time of RDS instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc ID of the RDS instance.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The available zone of the RDS instance.\n"
                }
            },
            "required": [
                "chargeType",
                "connectionInfo",
                "dbEngineVersion",
                "instanceSpecName",
                "instanceType",
                "storageSpaceGb",
                "storageType",
                "subnetId",
                "vpcId",
                "zone"
            ],
            "inputProperties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to automatically renew. Default: false. Value:\ntrue: yes.\nfalse: no. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "chargeType": {
                    "type": "string",
                    "description": "Billing type. Value:\nPostPaid: Postpaid (pay-as-you-go).\nPrepaid: Prepaid (yearly and monthly).\n",
                    "willReplaceOnChanges": true
                },
                "dbEngine": {
                    "type": "string",
                    "description": "Database type. Value:\nMySQL (default).\n",
                    "willReplaceOnChanges": true
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "Instance type. Value:\nMySQL_Community_5_7\nMySQL_8_0.\n",
                    "willReplaceOnChanges": true
                },
                "instanceName": {
                    "type": "string",
                    "description": "Set the name of the instance. The naming rules are as follows:\n",
                    "willReplaceOnChanges": true
                },
                "instanceSpecName": {
                    "type": "string",
                    "description": "Instance specification name, you can specify the specification name of the instance to be created. Value:\nrds.mysql.1c2g\nrds.mysql.2c4g\nrds.mysql.4c8g\nrds.mysql.4c16g\nrds.mysql.8c32g\nrds.mysql.16c64g\nrds.mysql.16c128g\nrds.mysql.32c128g\nrds.mysql.32c256g.\n",
                    "willReplaceOnChanges": true
                },
                "instanceType": {
                    "type": "string",
                    "description": "Instance type. Value:\nHA: High availability version.\n",
                    "willReplaceOnChanges": true
                },
                "prepaidPeriod": {
                    "type": "string",
                    "description": "The purchase cycle in the prepaid scenario. Value:\nMonth: monthly subscription.\nYear: yearly subscription. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "projectName": {
                    "type": "string",
                    "description": "Select the project to which the instance belongs. If this parameter is left blank, the new instance will not be added to any project. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region of the RDS instance.\n",
                    "willReplaceOnChanges": true
                },
                "storageSpaceGb": {
                    "type": "integer",
                    "description": "The storage space(GB) of the RDS instance.\n",
                    "willReplaceOnChanges": true
                },
                "storageType": {
                    "type": "string",
                    "description": "Instance storage type. Value:\nLocalSSD: Local SSD disk.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet ID. The subnet must belong to the selected Availability Zone.\n",
                    "willReplaceOnChanges": true
                },
                "superAccountName": {
                    "type": "string",
                    "description": "Fill in the high-privileged user account name. The naming rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\n[Keywords](https://www.volcengine.com/docs/6313/66162) are not allowed for account names.\n",
                    "willReplaceOnChanges": true
                },
                "superAccountPassword": {
                    "type": "string",
                    "description": "Set a high-privilege account password. The rules are as follows:\nOnly uppercase and lowercase letters, numbers and the following special characters _#!@$%^*()+=-.\nThe length needs to be within 8~32 characters.\nContains at least 3 of uppercase letters, lowercase letters, numbers or special characters.\n",
                    "willReplaceOnChanges": true
                },
                "supperAccountPassword": {
                    "type": "string",
                    "description": "supper_account_password is deprecated, use super_account_password instead Set a high-privilege account password. The rules are as follows:\nOnly uppercase and lowercase letters, numbers and the following special characters _#!@$%^*()+=-.\nThe length needs to be within 8~32 characters.\nContains at least 3 of uppercase letters, lowercase letters, numbers or special characters.\n",
                    "deprecationMessage": "supper_account_password is deprecated, use super_account_password instead",
                    "willReplaceOnChanges": true
                },
                "usedTime": {
                    "type": "integer",
                    "description": "The purchase time of RDS instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc ID of the RDS instance.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "The available zone of the RDS instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "chargeType",
                "dbEngineVersion",
                "instanceSpecName",
                "instanceType",
                "storageSpaceGb",
                "storageType",
                "subnetId",
                "vpcId",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "autoRenew": {
                        "type": "boolean",
                        "description": "Whether to automatically renew. Default: false. Value:\ntrue: yes.\nfalse: no. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "chargeType": {
                        "type": "string",
                        "description": "Billing type. Value:\nPostPaid: Postpaid (pay-as-you-go).\nPrepaid: Prepaid (yearly and monthly).\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionInfo": {
                        "$ref": "#/types/volcengine:rds/InstanceConnectionInfo:InstanceConnectionInfo",
                        "description": "The connection info ot the RDS instance.\n"
                    },
                    "dbEngine": {
                        "type": "string",
                        "description": "Database type. Value:\nMySQL (default).\n",
                        "willReplaceOnChanges": true
                    },
                    "dbEngineVersion": {
                        "type": "string",
                        "description": "Instance type. Value:\nMySQL_Community_5_7\nMySQL_8_0.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Set the name of the instance. The naming rules are as follows:\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceSpecName": {
                        "type": "string",
                        "description": "Instance specification name, you can specify the specification name of the instance to be created. Value:\nrds.mysql.1c2g\nrds.mysql.2c4g\nrds.mysql.4c8g\nrds.mysql.4c16g\nrds.mysql.8c32g\nrds.mysql.16c64g\nrds.mysql.16c128g\nrds.mysql.32c128g\nrds.mysql.32c256g.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "Instance type. Value:\nHA: High availability version.\n",
                        "willReplaceOnChanges": true
                    },
                    "prepaidPeriod": {
                        "type": "string",
                        "description": "The purchase cycle in the prepaid scenario. Value:\nMonth: monthly subscription.\nYear: yearly subscription. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectName": {
                        "type": "string",
                        "description": "Select the project to which the instance belongs. If this parameter is left blank, the new instance will not be added to any project. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageSpaceGb": {
                        "type": "integer",
                        "description": "The storage space(GB) of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageType": {
                        "type": "string",
                        "description": "Instance storage type. Value:\nLocalSSD: Local SSD disk.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet ID. The subnet must belong to the selected Availability Zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "superAccountName": {
                        "type": "string",
                        "description": "Fill in the high-privileged user account name. The naming rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\n[Keywords](https://www.volcengine.com/docs/6313/66162) are not allowed for account names.\n",
                        "willReplaceOnChanges": true
                    },
                    "superAccountPassword": {
                        "type": "string",
                        "description": "Set a high-privilege account password. The rules are as follows:\nOnly uppercase and lowercase letters, numbers and the following special characters _#!@$%^*()+=-.\nThe length needs to be within 8~32 characters.\nContains at least 3 of uppercase letters, lowercase letters, numbers or special characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "supperAccountPassword": {
                        "type": "string",
                        "description": "supper_account_password is deprecated, use super_account_password instead Set a high-privilege account password. The rules are as follows:\nOnly uppercase and lowercase letters, numbers and the following special characters _#!@$%^*()+=-.\nThe length needs to be within 8~32 characters.\nContains at least 3 of uppercase letters, lowercase letters, numbers or special characters.\n",
                        "deprecationMessage": "supper_account_password is deprecated, use super_account_password instead",
                        "willReplaceOnChanges": true
                    },
                    "usedTime": {
                        "type": "integer",
                        "description": "The purchase time of RDS instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc ID of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "The available zone of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds/ipList:IpList": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds ip list\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.rds.IpList(\"foo\", {\n    groupName: \"foo\",\n    instanceId: \"mysql-0fdd3bab2e7c\",\n    ipLists: [\n        \"1.1.1.1\",\n        \"2.2.2.2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.rds.IpList(\"foo\",\n    group_name=\"foo\",\n    instance_id=\"mysql-0fdd3bab2e7c\",\n    ip_lists=[\n        \"1.1.1.1\",\n        \"2.2.2.2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Rds.IpList(\"foo\", new Volcengine.Rds.IpListArgs\n        {\n            GroupName = \"foo\",\n            InstanceId = \"mysql-0fdd3bab2e7c\",\n            IpLists = \n            {\n                \"1.1.1.1\",\n                \"2.2.2.2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds.NewIpList(ctx, \"foo\", \u0026rds.IpListArgs{\n\t\t\tGroupName:  pulumi.String(\"foo\"),\n\t\t\tInstanceId: pulumi.String(\"mysql-0fdd3bab2e7c\"),\n\t\t\tIpLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1.1.1.1\"),\n\t\t\t\tpulumi.String(\"2.2.2.2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new IpList(\"foo\", IpListArgs.builder()        \n            .groupName(\"foo\")\n            .instanceId(\"mysql-0fdd3bab2e7c\")\n            .ipLists(            \n                \"1.1.1.1\",\n                \"2.2.2.2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:rds:IpList\n    properties:\n      groupName: foo\n      instanceId: mysql-0fdd3bab2e7c\n      ipLists:\n        - 1.1.1.1\n        - 2.2.2.2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRDSIPList can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:rds/ipList:IpList default mysql-42b38c769c4b:group_name\n```\n\n ",
            "properties": {
                "groupName": {
                    "type": "string",
                    "description": "The name of the RDS ip list.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n"
                },
                "ipLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IP address.\n"
                }
            },
            "required": [
                "groupName",
                "instanceId",
                "ipLists"
            ],
            "inputProperties": {
                "groupName": {
                    "type": "string",
                    "description": "The name of the RDS ip list.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n",
                    "willReplaceOnChanges": true
                },
                "ipLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IP address.\n"
                }
            },
            "requiredInputs": [
                "groupName",
                "instanceId",
                "ipLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpList resources.\n",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "description": "The name of the RDS ip list.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of IP address.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds/parameterTemplate:ParameterTemplate": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds parameter template\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.rds.ParameterTemplate(\"foo\", {\n    templateDesc: \"created by terraform\",\n    templateName: \"tf-template\",\n    templateParams: [\n        {\n            name: \"auto_increment_increment\",\n            runningValue: \"2\",\n        },\n        {\n            name: \"slow_query_log\",\n            runningValue: \"ON\",\n        },\n        {\n            name: \"net_retry_count\",\n            runningValue: \"33\",\n        },\n    ],\n    templateType: \"MySQL\",\n    templateTypeVersion: \"MySQL_Community_5_7\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.rds.ParameterTemplate(\"foo\",\n    template_desc=\"created by terraform\",\n    template_name=\"tf-template\",\n    template_params=[\n        volcengine.rds.ParameterTemplateTemplateParamArgs(\n            name=\"auto_increment_increment\",\n            running_value=\"2\",\n        ),\n        volcengine.rds.ParameterTemplateTemplateParamArgs(\n            name=\"slow_query_log\",\n            running_value=\"ON\",\n        ),\n        volcengine.rds.ParameterTemplateTemplateParamArgs(\n            name=\"net_retry_count\",\n            running_value=\"33\",\n        ),\n    ],\n    template_type=\"MySQL\",\n    template_type_version=\"MySQL_Community_5_7\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Rds.ParameterTemplate(\"foo\", new Volcengine.Rds.ParameterTemplateArgs\n        {\n            TemplateDesc = \"created by terraform\",\n            TemplateName = \"tf-template\",\n            TemplateParams = \n            {\n                new Volcengine.Rds.Inputs.ParameterTemplateTemplateParamArgs\n                {\n                    Name = \"auto_increment_increment\",\n                    RunningValue = \"2\",\n                },\n                new Volcengine.Rds.Inputs.ParameterTemplateTemplateParamArgs\n                {\n                    Name = \"slow_query_log\",\n                    RunningValue = \"ON\",\n                },\n                new Volcengine.Rds.Inputs.ParameterTemplateTemplateParamArgs\n                {\n                    Name = \"net_retry_count\",\n                    RunningValue = \"33\",\n                },\n            },\n            TemplateType = \"MySQL\",\n            TemplateTypeVersion = \"MySQL_Community_5_7\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds.NewParameterTemplate(ctx, \"foo\", \u0026rds.ParameterTemplateArgs{\n\t\t\tTemplateDesc: pulumi.String(\"created by terraform\"),\n\t\t\tTemplateName: pulumi.String(\"tf-template\"),\n\t\t\tTemplateParams: rds.ParameterTemplateTemplateParamArray{\n\t\t\t\t\u0026rds.ParameterTemplateTemplateParamArgs{\n\t\t\t\t\tName:         pulumi.String(\"auto_increment_increment\"),\n\t\t\t\t\tRunningValue: pulumi.String(\"2\"),\n\t\t\t\t},\n\t\t\t\t\u0026rds.ParameterTemplateTemplateParamArgs{\n\t\t\t\t\tName:         pulumi.String(\"slow_query_log\"),\n\t\t\t\t\tRunningValue: pulumi.String(\"ON\"),\n\t\t\t\t},\n\t\t\t\t\u0026rds.ParameterTemplateTemplateParamArgs{\n\t\t\t\t\tName:         pulumi.String(\"net_retry_count\"),\n\t\t\t\t\tRunningValue: pulumi.String(\"33\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTemplateType:        pulumi.String(\"MySQL\"),\n\t\t\tTemplateTypeVersion: pulumi.String(\"MySQL_Community_5_7\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ParameterTemplate(\"foo\", ParameterTemplateArgs.builder()        \n            .templateDesc(\"created by terraform\")\n            .templateName(\"tf-template\")\n            .templateParams(            \n                ParameterTemplateTemplateParamArgs.builder()\n                    .name(\"auto_increment_increment\")\n                    .runningValue(\"2\")\n                    .build(),\n                ParameterTemplateTemplateParamArgs.builder()\n                    .name(\"slow_query_log\")\n                    .runningValue(\"ON\")\n                    .build(),\n                ParameterTemplateTemplateParamArgs.builder()\n                    .name(\"net_retry_count\")\n                    .runningValue(\"33\")\n                    .build())\n            .templateType(\"MySQL\")\n            .templateTypeVersion(\"MySQL_Community_5_7\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:rds:ParameterTemplate\n    properties:\n      templateDesc: created by terraform\n      templateName: tf-template\n      templateParams:\n        - name: auto_increment_increment\n          runningValue: 2\n        - name: slow_query_log\n          runningValue: ON\n        - name: net_retry_count\n          runningValue: 33\n      templateType: MySQL\n      templateTypeVersion: MySQL_Community_5_7\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRDS Instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:rds/parameterTemplate:ParameterTemplate default mysql-sys-80bb93aa14be22d0\n```\n\n ",
            "properties": {
                "templateDesc": {
                    "type": "string",
                    "description": "Parameter template description.\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "Parameter template name.\n"
                },
                "templateParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds/ParameterTemplateTemplateParam:ParameterTemplateTemplateParam"
                    },
                    "description": "Template parameters. InstanceParam only needs to pass Name and RunningValue.\n"
                },
                "templateType": {
                    "type": "string",
                    "description": "Parameter template database type, range of values:\nMySQL - MySQL database. (Defaults).\n"
                },
                "templateTypeVersion": {
                    "type": "string",
                    "description": "Parameter template database version, value range:\nMySQL_Community_5_7 - MySQL 5.7 (default)\nMySQL_8_0 - MySQL 8.0.\n"
                }
            },
            "required": [
                "templateName",
                "templateParams"
            ],
            "inputProperties": {
                "templateDesc": {
                    "type": "string",
                    "description": "Parameter template description.\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "Parameter template name.\n"
                },
                "templateParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds/ParameterTemplateTemplateParam:ParameterTemplateTemplateParam"
                    },
                    "description": "Template parameters. InstanceParam only needs to pass Name and RunningValue.\n"
                },
                "templateType": {
                    "type": "string",
                    "description": "Parameter template database type, range of values:\nMySQL - MySQL database. (Defaults).\n",
                    "willReplaceOnChanges": true
                },
                "templateTypeVersion": {
                    "type": "string",
                    "description": "Parameter template database version, value range:\nMySQL_Community_5_7 - MySQL 5.7 (default)\nMySQL_8_0 - MySQL 8.0.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "templateName",
                "templateParams"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ParameterTemplate resources.\n",
                "properties": {
                    "templateDesc": {
                        "type": "string",
                        "description": "Parameter template description.\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "Parameter template name.\n"
                    },
                    "templateParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds/ParameterTemplateTemplateParam:ParameterTemplateTemplateParam"
                        },
                        "description": "Template parameters. InstanceParam only needs to pass Name and RunningValue.\n"
                    },
                    "templateType": {
                        "type": "string",
                        "description": "Parameter template database type, range of values:\nMySQL - MySQL database. (Defaults).\n",
                        "willReplaceOnChanges": true
                    },
                    "templateTypeVersion": {
                        "type": "string",
                        "description": "Parameter template database version, value range:\nMySQL_Community_5_7 - MySQL 5.7 (default)\nMySQL_8_0 - MySQL 8.0.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds_mysql/account:Account": {
            "description": "Provides a resource to manage rds mysql account\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAccount = new volcengine.rds_mysql.Account(\"default\", {\n    accountName: \"test\",\n    accountPassword: \"xdjsuiahHUH@\",\n    accountType: \"Normal\",\n    instanceId: \"mysql-e9293705eed6\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds_mysql.Account(\"default\",\n    account_name=\"test\",\n    account_password=\"xdjsuiahHUH@\",\n    account_type=\"Normal\",\n    instance_id=\"mysql-e9293705eed6\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Volcengine.Rds_mysql.Account(\"default\", new Volcengine.Rds_mysql.AccountArgs\n        {\n            AccountName = \"test\",\n            AccountPassword = \"xdjsuiahHUH@\",\n            AccountType = \"Normal\",\n            InstanceId = \"mysql-e9293705eed6\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_mysql.NewAccount(ctx, \"default\", \u0026rds_mysql.AccountArgs{\n\t\t\tAccountName:     pulumi.String(\"test\"),\n\t\t\tAccountPassword: pulumi.String(\"xdjsuiahHUH@\"),\n\t\t\tAccountType:     pulumi.String(\"Normal\"),\n\t\t\tInstanceId:      pulumi.String(\"mysql-e9293705eed6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Account(\"default\", AccountArgs.builder()        \n            .accountName(\"test\")\n            .accountPassword(\"xdjsuiahHUH@\")\n            .accountType(\"Normal\")\n            .instanceId(\"mysql-e9293705eed6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:rds_mysql:Account\n    properties:\n      accountName: test\n      accountPassword: xdjsuiahHUH@\n      accountType: Normal\n      instanceId: mysql-e9293705eed6\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRDS mysql account can be imported using the instance_id:account_name, e.g.\n\n```sh\n $ pulumi import volcengine:rds_mysql/account:Account default mysql-42b38c769c4b:test\n```\n\n ",
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Database account name. The rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\nThe [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.\n"
                },
                "accountPassword": {
                    "type": "string",
                    "description": "The password of the database account.\nIllustrate:\nCannot start with `!` or `@`.\nThe length is 8~32 characters.\nIt consists of any three of uppercase letters, lowercase letters, numbers, and special characters.\nThe special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "accountPrivileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/AccountAccountPrivilege:AccountAccountPrivilege"
                    },
                    "description": "The privilege information of account.\n"
                },
                "accountType": {
                    "type": "string",
                    "description": "Database account type, value:\nSuper: A high-privilege account. Only one database account can be created for an instance.\nNormal: An account with ordinary privileges.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n"
                }
            },
            "required": [
                "accountName",
                "accountPassword",
                "accountType",
                "instanceId"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Database account name. The rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\nThe [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.\n",
                    "willReplaceOnChanges": true
                },
                "accountPassword": {
                    "type": "string",
                    "description": "The password of the database account.\nIllustrate:\nCannot start with `!` or `@`.\nThe length is 8~32 characters.\nIt consists of any three of uppercase letters, lowercase letters, numbers, and special characters.\nThe special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "accountPrivileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/AccountAccountPrivilege:AccountAccountPrivilege"
                    },
                    "description": "The privilege information of account.\n"
                },
                "accountType": {
                    "type": "string",
                    "description": "Database account type, value:\nSuper: A high-privilege account. Only one database account can be created for an instance.\nNormal: An account with ordinary privileges.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountName",
                "accountPassword",
                "accountType",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Database account name. The rules are as follows:\nUnique name.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, or underscores (_).\nThe length is 2~32 characters.\nThe [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "accountPassword": {
                        "type": "string",
                        "description": "The password of the database account.\nIllustrate:\nCannot start with `!` or `@`.\nThe length is 8~32 characters.\nIt consists of any three of uppercase letters, lowercase letters, numbers, and special characters.\nThe special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                    },
                    "accountPrivileges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_mysql/AccountAccountPrivilege:AccountAccountPrivilege"
                        },
                        "description": "The privilege information of account.\n"
                    },
                    "accountType": {
                        "type": "string",
                        "description": "Database account type, value:\nSuper: A high-privilege account. Only one database account can be created for an instance.\nNormal: An account with ordinary privileges.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds_mysql/allowlist:Allowlist": {
            "description": "Provides a resource to manage rds mysql allowlist\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.rds_mysql.Allowlist(\"foo\", {\n    allowLists: [\"127.0.0.1\"],\n    allowListDesc: \"terraform test zzm\",\n    allowListName: \"tf-test-opt\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.rds_mysql.Allowlist(\"foo\",\n    allow_lists=[\"127.0.0.1\"],\n    allow_list_desc=\"terraform test zzm\",\n    allow_list_name=\"tf-test-opt\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Rds_mysql.Allowlist(\"foo\", new Volcengine.Rds_mysql.AllowlistArgs\n        {\n            AllowLists = \n            {\n                \"127.0.0.1\",\n            },\n            AllowListDesc = \"terraform test zzm\",\n            AllowListName = \"tf-test-opt\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_mysql.NewAllowlist(ctx, \"foo\", \u0026rds_mysql.AllowlistArgs{\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"127.0.0.1\"),\n\t\t\t},\n\t\t\tAllowListDesc: pulumi.String(\"terraform test zzm\"),\n\t\t\tAllowListName: pulumi.String(\"tf-test-opt\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Allowlist(\"foo\", AllowlistArgs.builder()        \n            .allowLists(\"127.0.0.1\")\n            .allowListDesc(\"terraform test zzm\")\n            .allowListName(\"tf-test-opt\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:rds_mysql:Allowlist\n    properties:\n      allowLists:\n        - 127.0.0.1\n      allowListDesc: terraform test zzm\n      allowListName: tf-test-opt\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRDS AllowList can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:rds_mysql/allowlist:Allowlist default acl-d1fd76693bd54e658912e7337d5b****\n```\n\n ",
            "properties": {
                "allowListDesc": {
                    "type": "string",
                    "description": "The description of the allow list.\n"
                },
                "allowListId": {
                    "type": "string",
                    "description": "The id of the allow list.\n"
                },
                "allowListName": {
                    "type": "string",
                    "description": "The name of the allow list.\n"
                },
                "allowListType": {
                    "type": "string",
                    "description": "The type of IP address in the whitelist. Currently only IPv4 addresses are supported.\n"
                },
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Enter an IP address or a range of IP addresses in CIDR format.\n"
                }
            },
            "required": [
                "allowLists",
                "allowListId",
                "allowListName",
                "allowListType"
            ],
            "inputProperties": {
                "allowListDesc": {
                    "type": "string",
                    "description": "The description of the allow list.\n"
                },
                "allowListName": {
                    "type": "string",
                    "description": "The name of the allow list.\n"
                },
                "allowListType": {
                    "type": "string",
                    "description": "The type of IP address in the whitelist. Currently only IPv4 addresses are supported.\n"
                },
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Enter an IP address or a range of IP addresses in CIDR format.\n"
                }
            },
            "requiredInputs": [
                "allowLists",
                "allowListName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Allowlist resources.\n",
                "properties": {
                    "allowListDesc": {
                        "type": "string",
                        "description": "The description of the allow list.\n"
                    },
                    "allowListId": {
                        "type": "string",
                        "description": "The id of the allow list.\n"
                    },
                    "allowListName": {
                        "type": "string",
                        "description": "The name of the allow list.\n"
                    },
                    "allowListType": {
                        "type": "string",
                        "description": "The type of IP address in the whitelist. Currently only IPv4 addresses are supported.\n"
                    },
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Enter an IP address or a range of IP addresses in CIDR format.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds_mysql/allowlistAssociate:AllowlistAssociate": {
            "description": "Provides a resource to manage rds mysql allowlist associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.rds_mysql.AllowlistAssociate(\"foo\", {\n    allowListId: \"acl-15451212dcfa473baeda24be4baa02fe\",\n    instanceId: \"mysql-1b2c7b2d7583\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.rds_mysql.AllowlistAssociate(\"foo\",\n    allow_list_id=\"acl-15451212dcfa473baeda24be4baa02fe\",\n    instance_id=\"mysql-1b2c7b2d7583\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Rds_mysql.AllowlistAssociate(\"foo\", new Volcengine.Rds_mysql.AllowlistAssociateArgs\n        {\n            AllowListId = \"acl-15451212dcfa473baeda24be4baa02fe\",\n            InstanceId = \"mysql-1b2c7b2d7583\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_mysql.NewAllowlistAssociate(ctx, \"foo\", \u0026rds_mysql.AllowlistAssociateArgs{\n\t\t\tAllowListId: pulumi.String(\"acl-15451212dcfa473baeda24be4baa02fe\"),\n\t\t\tInstanceId:  pulumi.String(\"mysql-1b2c7b2d7583\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AllowlistAssociate(\"foo\", AllowlistAssociateArgs.builder()        \n            .allowListId(\"acl-15451212dcfa473baeda24be4baa02fe\")\n            .instanceId(\"mysql-1b2c7b2d7583\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:rds_mysql:AllowlistAssociate\n    properties:\n      allowListId: acl-15451212dcfa473baeda24be4baa02fe\n      instanceId: mysql-1b2c7b2d7583\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRDS AllowList Associate can be imported using the instance id and allow list id, e.g.\n\n```sh\n $ pulumi import volcengine:rds_mysql/allowlistAssociate:AllowlistAssociate default rds-mysql-h441603c68aaa:acl-d1fd76693bd54e658912e7337d5b****\n```\n\n ",
            "properties": {
                "allowListId": {
                    "type": "string",
                    "description": "The id of the allow list.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the mysql instance.\n"
                }
            },
            "required": [
                "allowListId",
                "instanceId"
            ],
            "inputProperties": {
                "allowListId": {
                    "type": "string",
                    "description": "The id of the allow list.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The id of the mysql instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "allowListId",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AllowlistAssociate resources.\n",
                "properties": {
                    "allowListId": {
                        "type": "string",
                        "description": "The id of the allow list.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the mysql instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds_mysql/database:Database": {
            "description": "Provides a resource to manage rds mysql database\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultDatabase = new volcengine.rds_mysql.Database(\"default\", {\n    characterSetName: \"utf8\",\n    dbName: \"xxx\",\n    instanceId: \"mysql-xxx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds_mysql.Database(\"default\",\n    character_set_name=\"utf8\",\n    db_name=\"xxx\",\n    instance_id=\"mysql-xxx\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Volcengine.Rds_mysql.Database(\"default\", new Volcengine.Rds_mysql.DatabaseArgs\n        {\n            CharacterSetName = \"utf8\",\n            DbName = \"xxx\",\n            InstanceId = \"mysql-xxx\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_mysql.NewDatabase(ctx, \"default\", \u0026rds_mysql.DatabaseArgs{\n\t\t\tCharacterSetName: pulumi.String(\"utf8\"),\n\t\t\tDbName:           pulumi.String(\"xxx\"),\n\t\t\tInstanceId:       pulumi.String(\"mysql-xxx\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Database(\"default\", DatabaseArgs.builder()        \n            .characterSetName(\"utf8\")\n            .dbName(\"xxx\")\n            .instanceId(\"mysql-xxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:rds_mysql:Database\n    properties:\n      characterSetName: utf8\n      dbName: xxx\n      instanceId: mysql-xxx\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDatabase can be imported using the instanceId:dbName, e.g.\n\n```sh\n $ pulumi import volcengine:rds_mysql/database:Database default mysql-42b38c769c4b:dbname\n```\n\n ",
            "properties": {
                "characterSetName": {
                    "type": "string",
                    "description": "Database character set. Currently supported character sets include: utf8, utf8mb4, latin1, ascii.\n"
                },
                "dbName": {
                    "type": "string",
                    "description": "Name database.\nillustrate:\nUnique name.\nThe length is 2~64 characters.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, and underscores (_) or dashes (-).\nDatabase names are disabled [keywords](https://www.volcengine.com/docs/6313/66162).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n"
                }
            },
            "required": [
                "dbName",
                "instanceId"
            ],
            "inputProperties": {
                "characterSetName": {
                    "type": "string",
                    "description": "Database character set. Currently supported character sets include: utf8, utf8mb4, latin1, ascii.\n",
                    "willReplaceOnChanges": true
                },
                "dbName": {
                    "type": "string",
                    "description": "Name database.\nillustrate:\nUnique name.\nThe length is 2~64 characters.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, and underscores (_) or dashes (-).\nDatabase names are disabled [keywords](https://www.volcengine.com/docs/6313/66162).\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the RDS instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dbName",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "characterSetName": {
                        "type": "string",
                        "description": "Database character set. Currently supported character sets include: utf8, utf8mb4, latin1, ascii.\n",
                        "willReplaceOnChanges": true
                    },
                    "dbName": {
                        "type": "string",
                        "description": "Name database.\nillustrate:\nUnique name.\nThe length is 2~64 characters.\nStart with a letter and end with a letter or number.\nConsists of lowercase letters, numbers, and underscores (_) or dashes (-).\nDatabase names are disabled [keywords](https://www.volcengine.com/docs/6313/66162).\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds_mysql/instance:Instance": {
            "description": "Provides a resource to manage rds mysql instance\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst foo = new volcengine.rds_mysql.Instance(\"foo\", {\n    dbEngineVersion: \"MySQL_5_7\",\n    nodeSpec: \"rds.mysql.1c2g\",\n    primaryZoneId: \"cn-guilin-a\",\n    secondaryZoneId: \"cn-guilin-b\",\n    storageSpace: 80,\n    subnetId: \"subnet-2d72yi377stts58ozfdrlk9f6\",\n    instanceName: \"tf-test\",\n    lowerCaseTableNames: \"1\",\n    chargeInfo: {\n        chargeType: \"PostPaid\",\n    },\n    allowListIds: [\n        \"acl-2dd8f8317e4d4159b21630d13ae2e6ec\",\n        \"acl-2eaa2a053b2a4a58b988e38ae975e81c\",\n    ],\n    parameters: [\n        {\n            parameterName: \"auto_increment_increment\",\n            parameterValue: \"2\",\n        },\n        {\n            parameterName: \"auto_increment_offset\",\n            parameterValue: \"4\",\n        },\n    ],\n});\nconst readonly = new volcengine.rds_mysql.InstanceReadonlyNode(\"readonly\", {\n    instanceId: foo.id,\n    nodeSpec: \"rds.mysql.2c4g\",\n    zoneId: \"cn-guilin-a\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.rds_mysql.Instance(\"foo\",\n    db_engine_version=\"MySQL_5_7\",\n    node_spec=\"rds.mysql.1c2g\",\n    primary_zone_id=\"cn-guilin-a\",\n    secondary_zone_id=\"cn-guilin-b\",\n    storage_space=80,\n    subnet_id=\"subnet-2d72yi377stts58ozfdrlk9f6\",\n    instance_name=\"tf-test\",\n    lower_case_table_names=\"1\",\n    charge_info=volcengine.rds.mysql.InstanceChargeInfoArgs(\n        charge_type=\"PostPaid\",\n    ),\n    allow_list_ids=[\n        \"acl-2dd8f8317e4d4159b21630d13ae2e6ec\",\n        \"acl-2eaa2a053b2a4a58b988e38ae975e81c\",\n    ],\n    parameters=[\n        volcengine.rds.mysql.InstanceParameterArgs(\n            parameter_name=\"auto_increment_increment\",\n            parameter_value=\"2\",\n        ),\n        volcengine.rds.mysql.InstanceParameterArgs(\n            parameter_name=\"auto_increment_offset\",\n            parameter_value=\"4\",\n        ),\n    ])\nreadonly = volcengine.rds_mysql.InstanceReadonlyNode(\"readonly\",\n    instance_id=foo.id,\n    node_spec=\"rds.mysql.2c4g\",\n    zone_id=\"cn-guilin-a\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Rds_mysql.Instance(\"foo\", new Volcengine.Rds_mysql.InstanceArgs\n        {\n            DbEngineVersion = \"MySQL_5_7\",\n            NodeSpec = \"rds.mysql.1c2g\",\n            PrimaryZoneId = \"cn-guilin-a\",\n            SecondaryZoneId = \"cn-guilin-b\",\n            StorageSpace = 80,\n            SubnetId = \"subnet-2d72yi377stts58ozfdrlk9f6\",\n            InstanceName = \"tf-test\",\n            LowerCaseTableNames = \"1\",\n            ChargeInfo = new Volcengine.Rds_mysql.Inputs.InstanceChargeInfoArgs\n            {\n                ChargeType = \"PostPaid\",\n            },\n            AllowListIds = \n            {\n                \"acl-2dd8f8317e4d4159b21630d13ae2e6ec\",\n                \"acl-2eaa2a053b2a4a58b988e38ae975e81c\",\n            },\n            Parameters = \n            {\n                new Volcengine.Rds_mysql.Inputs.InstanceParameterArgs\n                {\n                    ParameterName = \"auto_increment_increment\",\n                    ParameterValue = \"2\",\n                },\n                new Volcengine.Rds_mysql.Inputs.InstanceParameterArgs\n                {\n                    ParameterName = \"auto_increment_offset\",\n                    ParameterValue = \"4\",\n                },\n            },\n        });\n        var @readonly = new Volcengine.Rds_mysql.InstanceReadonlyNode(\"readonly\", new Volcengine.Rds_mysql.InstanceReadonlyNodeArgs\n        {\n            InstanceId = foo.Id,\n            NodeSpec = \"rds.mysql.2c4g\",\n            ZoneId = \"cn-guilin-a\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := rds_mysql.NewInstance(ctx, \"foo\", \u0026rds_mysql.InstanceArgs{\n\t\t\tDbEngineVersion:     pulumi.String(\"MySQL_5_7\"),\n\t\t\tNodeSpec:            pulumi.String(\"rds.mysql.1c2g\"),\n\t\t\tPrimaryZoneId:       pulumi.String(\"cn-guilin-a\"),\n\t\t\tSecondaryZoneId:     pulumi.String(\"cn-guilin-b\"),\n\t\t\tStorageSpace:        pulumi.Int(80),\n\t\t\tSubnetId:            pulumi.String(\"subnet-2d72yi377stts58ozfdrlk9f6\"),\n\t\t\tInstanceName:        pulumi.String(\"tf-test\"),\n\t\t\tLowerCaseTableNames: pulumi.String(\"1\"),\n\t\t\tChargeInfo: \u0026rds_mysql.InstanceChargeInfoArgs{\n\t\t\t\tChargeType: pulumi.String(\"PostPaid\"),\n\t\t\t},\n\t\t\tAllowListIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"acl-2dd8f8317e4d4159b21630d13ae2e6ec\"),\n\t\t\t\tpulumi.String(\"acl-2eaa2a053b2a4a58b988e38ae975e81c\"),\n\t\t\t},\n\t\t\tParameters: rds_mysql.InstanceParameterArray{\n\t\t\t\t\u0026rds_mysql.InstanceParameterArgs{\n\t\t\t\t\tParameterName:  pulumi.String(\"auto_increment_increment\"),\n\t\t\t\t\tParameterValue: pulumi.String(\"2\"),\n\t\t\t\t},\n\t\t\t\t\u0026rds_mysql.InstanceParameterArgs{\n\t\t\t\t\tParameterName:  pulumi.String(\"auto_increment_offset\"),\n\t\t\t\t\tParameterValue: pulumi.String(\"4\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rds_mysql.NewInstanceReadonlyNode(ctx, \"readonly\", \u0026rds_mysql.InstanceReadonlyNodeArgs{\n\t\t\tInstanceId: foo.ID(),\n\t\t\tNodeSpec:   pulumi.String(\"rds.mysql.2c4g\"),\n\t\t\tZoneId:     pulumi.String(\"cn-guilin-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Instance(\"foo\", InstanceArgs.builder()        \n            .dbEngineVersion(\"MySQL_5_7\")\n            .nodeSpec(\"rds.mysql.1c2g\")\n            .primaryZoneId(\"cn-guilin-a\")\n            .secondaryZoneId(\"cn-guilin-b\")\n            .storageSpace(80)\n            .subnetId(\"subnet-2d72yi377stts58ozfdrlk9f6\")\n            .instanceName(\"tf-test\")\n            .lowerCaseTableNames(\"1\")\n            .chargeInfo(InstanceChargeInfoArgs.builder()\n                .chargeType(\"PostPaid\")\n                .build())\n            .allowListIds(            \n                \"acl-2dd8f8317e4d4159b21630d13ae2e6ec\",\n                \"acl-2eaa2a053b2a4a58b988e38ae975e81c\")\n            .parameters(            \n                InstanceParameterArgs.builder()\n                    .parameterName(\"auto_increment_increment\")\n                    .parameterValue(\"2\")\n                    .build(),\n                InstanceParameterArgs.builder()\n                    .parameterName(\"auto_increment_offset\")\n                    .parameterValue(\"4\")\n                    .build())\n            .build());\n\n        var readonly = new InstanceReadonlyNode(\"readonly\", InstanceReadonlyNodeArgs.builder()        \n            .instanceId(foo.id())\n            .nodeSpec(\"rds.mysql.2c4g\")\n            .zoneId(\"cn-guilin-a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:rds_mysql:Instance\n    properties:\n      dbEngineVersion: MySQL_5_7\n      nodeSpec: rds.mysql.1c2g\n      primaryZoneId: cn-guilin-a\n      secondaryZoneId: cn-guilin-b\n      storageSpace: 80\n      subnetId: subnet-2d72yi377stts58ozfdrlk9f6\n      instanceName: tf-test\n      lowerCaseTableNames: 1\n      chargeInfo:\n        chargeType: PostPaid\n      allowListIds:\n        - acl-2dd8f8317e4d4159b21630d13ae2e6ec\n        - acl-2eaa2a053b2a4a58b988e38ae975e81c\n      parameters:\n        - parameterName: auto_increment_increment\n          parameterValue: 2\n        - parameterName: auto_increment_offset\n          parameterValue: 4\n  readonly:\n    type: volcengine:rds_mysql:InstanceReadonlyNode\n    properties:\n      instanceId: ${foo.id}\n      nodeSpec: rds.mysql.2c4g\n      zoneId: cn-guilin-a\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRds Mysql Instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:rds_mysql/instance:Instance default mysql-72da4258c2c7\n```\n\n ",
            "properties": {
                "allowListIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allow list Ids of the RDS instance.\n"
                },
                "allowListVersion": {
                    "type": "string",
                    "description": "The version of allow list.\n"
                },
                "backupUse": {
                    "type": "integer",
                    "description": "The instance has used backup space. Unit: GB.\n"
                },
                "chargeDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstanceChargeDetail:InstanceChargeDetail"
                    },
                    "description": "Payment methods.\n"
                },
                "chargeInfo": {
                    "$ref": "#/types/volcengine:rds_mysql/InstanceChargeInfo:InstanceChargeInfo",
                    "description": "Payment methods.\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "Node creation local time.\n"
                },
                "dataSyncMode": {
                    "type": "string",
                    "description": "Data synchronization mode.\n"
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "Instance type. Value:\nMySQL_5_7\nMySQL_8_0.\n"
                },
                "dbTimeZone": {
                    "type": "string",
                    "description": "Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstanceEndpoint:InstanceEndpoint"
                    },
                    "description": "The endpoint info of the RDS instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Instance ID.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Instance name. Cannot start with a number or a dash\nCan only contain Chinese characters, letters, numbers, underscores and dashes\nThe length is limited between 1 ~ 128.\n"
                },
                "instanceStatus": {
                    "type": "string",
                    "description": "The status of the RDS instance.\n"
                },
                "lowerCaseTableNames": {
                    "type": "string",
                    "description": "Whether the table name is case sensitive, the default value is 1.\nRanges:\n0: Table names are stored as fixed and table names are case-sensitive.\n1: Table names will be stored in lowercase and table names are not case sensitive.\n"
                },
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstanceMaintenanceWindow:InstanceMaintenanceWindow"
                    },
                    "description": "Maintenance Window.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "Memory size in GB.\n"
                },
                "nodeNumber": {
                    "type": "integer",
                    "description": "The number of nodes.\n"
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "The specification of primary node and secondary node.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstanceNode:InstanceNode"
                    },
                    "description": "Instance node information.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstanceParameter:InstanceParameter"
                    },
                    "description": "Parameter of the RDS instance. This field can only be added or modified. Deleting this field is invalid.\n"
                },
                "primaryZoneId": {
                    "type": "string",
                    "description": "The available zone of primary node.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The region of the RDS instance.\n"
                },
                "secondaryZoneId": {
                    "type": "string",
                    "description": "The available zone of secondary node.\n"
                },
                "storageSpace": {
                    "type": "integer",
                    "description": "Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.\n"
                },
                "storageType": {
                    "type": "string",
                    "description": "Instance storage type.\n"
                },
                "storageUse": {
                    "type": "integer",
                    "description": "The instance has used storage space. Unit: GB.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet ID of the RDS instance.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Time zone.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the RDS instance.\n"
                },
                "vCpu": {
                    "type": "integer",
                    "description": "CPU size.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc ID of the RDS instance.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone of the RDS instance.\n"
                }
            },
            "required": [
                "allowListVersion",
                "backupUse",
                "chargeDetails",
                "chargeInfo",
                "createTime",
                "dataSyncMode",
                "dbEngineVersion",
                "dbTimeZone",
                "endpoints",
                "instanceId",
                "instanceStatus",
                "maintenanceWindows",
                "memory",
                "nodeNumber",
                "nodeSpec",
                "nodes",
                "primaryZoneId",
                "regionId",
                "secondaryZoneId",
                "storageType",
                "storageUse",
                "subnetId",
                "timeZone",
                "updateTime",
                "vCpu",
                "vpcId",
                "zoneId"
            ],
            "inputProperties": {
                "allowListIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allow list Ids of the RDS instance.\n"
                },
                "chargeInfo": {
                    "$ref": "#/types/volcengine:rds_mysql/InstanceChargeInfo:InstanceChargeInfo",
                    "description": "Payment methods.\n",
                    "willReplaceOnChanges": true
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "Instance type. Value:\nMySQL_5_7\nMySQL_8_0.\n",
                    "willReplaceOnChanges": true
                },
                "dbTimeZone": {
                    "type": "string",
                    "description": "Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "instanceName": {
                    "type": "string",
                    "description": "Instance name. Cannot start with a number or a dash\nCan only contain Chinese characters, letters, numbers, underscores and dashes\nThe length is limited between 1 ~ 128.\n"
                },
                "lowerCaseTableNames": {
                    "type": "string",
                    "description": "Whether the table name is case sensitive, the default value is 1.\nRanges:\n0: Table names are stored as fixed and table names are case-sensitive.\n1: Table names will be stored in lowercase and table names are not case sensitive.\n",
                    "willReplaceOnChanges": true
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "The specification of primary node and secondary node.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_mysql/InstanceParameter:InstanceParameter"
                    },
                    "description": "Parameter of the RDS instance. This field can only be added or modified. Deleting this field is invalid.\n"
                },
                "primaryZoneId": {
                    "type": "string",
                    "description": "The available zone of primary node.\n",
                    "willReplaceOnChanges": true
                },
                "secondaryZoneId": {
                    "type": "string",
                    "description": "The available zone of secondary node.\n",
                    "willReplaceOnChanges": true
                },
                "storageSpace": {
                    "type": "integer",
                    "description": "Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet ID of the RDS instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "chargeInfo",
                "dbEngineVersion",
                "nodeSpec",
                "primaryZoneId",
                "secondaryZoneId",
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "allowListIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allow list Ids of the RDS instance.\n"
                    },
                    "allowListVersion": {
                        "type": "string",
                        "description": "The version of allow list.\n"
                    },
                    "backupUse": {
                        "type": "integer",
                        "description": "The instance has used backup space. Unit: GB.\n"
                    },
                    "chargeDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_mysql/InstanceChargeDetail:InstanceChargeDetail"
                        },
                        "description": "Payment methods.\n"
                    },
                    "chargeInfo": {
                        "$ref": "#/types/volcengine:rds_mysql/InstanceChargeInfo:InstanceChargeInfo",
                        "description": "Payment methods.\n",
                        "willReplaceOnChanges": true
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Node creation local time.\n"
                    },
                    "dataSyncMode": {
                        "type": "string",
                        "description": "Data synchronization mode.\n"
                    },
                    "dbEngineVersion": {
                        "type": "string",
                        "description": "Instance type. Value:\nMySQL_5_7\nMySQL_8_0.\n",
                        "willReplaceOnChanges": true
                    },
                    "dbTimeZone": {
                        "type": "string",
                        "description": "Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "endpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_mysql/InstanceEndpoint:InstanceEndpoint"
                        },
                        "description": "The endpoint info of the RDS instance.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Instance ID.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Instance name. Cannot start with a number or a dash\nCan only contain Chinese characters, letters, numbers, underscores and dashes\nThe length is limited between 1 ~ 128.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The status of the RDS instance.\n"
                    },
                    "lowerCaseTableNames": {
                        "type": "string",
                        "description": "Whether the table name is case sensitive, the default value is 1.\nRanges:\n0: Table names are stored as fixed and table names are case-sensitive.\n1: Table names will be stored in lowercase and table names are not case sensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "maintenanceWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_mysql/InstanceMaintenanceWindow:InstanceMaintenanceWindow"
                        },
                        "description": "Maintenance Window.\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "Memory size in GB.\n"
                    },
                    "nodeNumber": {
                        "type": "integer",
                        "description": "The number of nodes.\n"
                    },
                    "nodeSpec": {
                        "type": "string",
                        "description": "The specification of primary node and secondary node.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_mysql/InstanceNode:InstanceNode"
                        },
                        "description": "Instance node information.\n"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_mysql/InstanceParameter:InstanceParameter"
                        },
                        "description": "Parameter of the RDS instance. This field can only be added or modified. Deleting this field is invalid.\n"
                    },
                    "primaryZoneId": {
                        "type": "string",
                        "description": "The available zone of primary node.\n",
                        "willReplaceOnChanges": true
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The region of the RDS instance.\n"
                    },
                    "secondaryZoneId": {
                        "type": "string",
                        "description": "The available zone of secondary node.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageSpace": {
                        "type": "integer",
                        "description": "Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.\n"
                    },
                    "storageType": {
                        "type": "string",
                        "description": "Instance storage type.\n"
                    },
                    "storageUse": {
                        "type": "integer",
                        "description": "The instance has used storage space. Unit: GB.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet ID of the RDS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "Time zone.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of the RDS instance.\n"
                    },
                    "vCpu": {
                        "type": "integer",
                        "description": "CPU size.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc ID of the RDS instance.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone of the RDS instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds_mysql/instanceReadonlyNode:InstanceReadonlyNode": {
            "description": "Provides a resource to manage rds mysql instance readonly node\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.rds_mysql.InstanceReadonlyNode(\"foo\", {\n    instanceId: \"mysql-b3fca7f571d6\",\n    nodeSpec: \"rds.mysql.1c2g\",\n    zoneId: \"cn-guilin-b\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.rds_mysql.InstanceReadonlyNode(\"foo\",\n    instance_id=\"mysql-b3fca7f571d6\",\n    node_spec=\"rds.mysql.1c2g\",\n    zone_id=\"cn-guilin-b\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Rds_mysql.InstanceReadonlyNode(\"foo\", new Volcengine.Rds_mysql.InstanceReadonlyNodeArgs\n        {\n            InstanceId = \"mysql-b3fca7f571d6\",\n            NodeSpec = \"rds.mysql.1c2g\",\n            ZoneId = \"cn-guilin-b\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_mysql.NewInstanceReadonlyNode(ctx, \"foo\", \u0026rds_mysql.InstanceReadonlyNodeArgs{\n\t\t\tInstanceId: pulumi.String(\"mysql-b3fca7f571d6\"),\n\t\t\tNodeSpec:   pulumi.String(\"rds.mysql.1c2g\"),\n\t\t\tZoneId:     pulumi.String(\"cn-guilin-b\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new InstanceReadonlyNode(\"foo\", InstanceReadonlyNodeArgs.builder()        \n            .instanceId(\"mysql-b3fca7f571d6\")\n            .nodeSpec(\"rds.mysql.1c2g\")\n            .zoneId(\"cn-guilin-b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:rds_mysql:InstanceReadonlyNode\n    properties:\n      instanceId: mysql-b3fca7f571d6\n      nodeSpec: rds.mysql.1c2g\n      zoneId: cn-guilin-b\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRds Mysql Instance Readonly Node can be imported using the instance_id:node_id, e.g.\n\n```sh\n $ pulumi import volcengine:rds_mysql/instanceReadonlyNode:InstanceReadonlyNode default mysql-72da4258c2c7:mysql-72da4258c2c7-r7f93\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The RDS mysql instance id of the readonly node.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "The id of the readonly node.\n"
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "The specification of readonly node.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone of readonly node.\n"
                }
            },
            "required": [
                "instanceId",
                "nodeId",
                "nodeSpec",
                "zoneId"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The RDS mysql instance id of the readonly node.\n",
                    "willReplaceOnChanges": true
                },
                "nodeSpec": {
                    "type": "string",
                    "description": "The specification of readonly node.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone of readonly node.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "nodeSpec",
                "zoneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceReadonlyNode resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDS mysql instance id of the readonly node.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "The id of the readonly node.\n"
                    },
                    "nodeSpec": {
                        "type": "string",
                        "description": "The specification of readonly node.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone of readonly node.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:rds_v2/rdsInstanceV2:RdsInstanceV2": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds instance v2\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.rds_v2.RdsInstanceV2(\"foo\", {\n    chargeInfo: {\n        chargeType: \"PostPaid\",\n    },\n    dbEngineVersion: \"MySQL_5_7\",\n    instanceName: \"tf-test-v2\",\n    instanceType: \"HA\",\n    lowerCaseTableNames: \"1\",\n    nodeInfos: [\n        {\n            nodeSpec: \"rds.mysql.2c4g\",\n            nodeType: \"Primary\",\n            zoneId: \"cn-beijing-a\",\n        },\n        {\n            nodeSpec: \"rds.mysql.2c4g\",\n            nodeType: \"Secondary\",\n            zoneId: \"cn-beijing-a\",\n        },\n        {\n            nodeSpec: \"rds.mysql.1c2g\",\n            nodeType: \"ReadOnly\",\n            zoneId: \"cn-beijing-a\",\n        },\n    ],\n    projectName: \"yyy\",\n    storageSpace: 100,\n    storageType: \"LocalSSD\",\n    subnetId: \"subnet-mj92ij84m5fk5smt1arvwrtw\",\n    vpcId: \"vpc-13fawddpwi41s3n6nu4g2y8bt\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.rds_v2.RdsInstanceV2(\"foo\",\n    charge_info=volcengine.rds.v2.RdsInstanceV2ChargeInfoArgs(\n        charge_type=\"PostPaid\",\n    ),\n    db_engine_version=\"MySQL_5_7\",\n    instance_name=\"tf-test-v2\",\n    instance_type=\"HA\",\n    lower_case_table_names=\"1\",\n    node_infos=[\n        volcengine.rds.v2.RdsInstanceV2NodeInfoArgs(\n            node_spec=\"rds.mysql.2c4g\",\n            node_type=\"Primary\",\n            zone_id=\"cn-beijing-a\",\n        ),\n        volcengine.rds.v2.RdsInstanceV2NodeInfoArgs(\n            node_spec=\"rds.mysql.2c4g\",\n            node_type=\"Secondary\",\n            zone_id=\"cn-beijing-a\",\n        ),\n        volcengine.rds.v2.RdsInstanceV2NodeInfoArgs(\n            node_spec=\"rds.mysql.1c2g\",\n            node_type=\"ReadOnly\",\n            zone_id=\"cn-beijing-a\",\n        ),\n    ],\n    project_name=\"yyy\",\n    storage_space=100,\n    storage_type=\"LocalSSD\",\n    subnet_id=\"subnet-mj92ij84m5fk5smt1arvwrtw\",\n    vpc_id=\"vpc-13fawddpwi41s3n6nu4g2y8bt\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Rds_v2.RdsInstanceV2(\"foo\", new Volcengine.Rds_v2.RdsInstanceV2Args\n        {\n            ChargeInfo = new Volcengine.Rds_v2.Inputs.RdsInstanceV2ChargeInfoArgs\n            {\n                ChargeType = \"PostPaid\",\n            },\n            DbEngineVersion = \"MySQL_5_7\",\n            InstanceName = \"tf-test-v2\",\n            InstanceType = \"HA\",\n            LowerCaseTableNames = \"1\",\n            NodeInfos = \n            {\n                new Volcengine.Rds_v2.Inputs.RdsInstanceV2NodeInfoArgs\n                {\n                    NodeSpec = \"rds.mysql.2c4g\",\n                    NodeType = \"Primary\",\n                    ZoneId = \"cn-beijing-a\",\n                },\n                new Volcengine.Rds_v2.Inputs.RdsInstanceV2NodeInfoArgs\n                {\n                    NodeSpec = \"rds.mysql.2c4g\",\n                    NodeType = \"Secondary\",\n                    ZoneId = \"cn-beijing-a\",\n                },\n                new Volcengine.Rds_v2.Inputs.RdsInstanceV2NodeInfoArgs\n                {\n                    NodeSpec = \"rds.mysql.1c2g\",\n                    NodeType = \"ReadOnly\",\n                    ZoneId = \"cn-beijing-a\",\n                },\n            },\n            ProjectName = \"yyy\",\n            StorageSpace = 100,\n            StorageType = \"LocalSSD\",\n            SubnetId = \"subnet-mj92ij84m5fk5smt1arvwrtw\",\n            VpcId = \"vpc-13fawddpwi41s3n6nu4g2y8bt\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds_v2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_v2\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_v2.NewRdsInstanceV2(ctx, \"foo\", \u0026rds_v2.RdsInstanceV2Args{\n\t\t\tChargeInfo: \u0026rds_v2.RdsInstanceV2ChargeInfoArgs{\n\t\t\t\tChargeType: pulumi.String(\"PostPaid\"),\n\t\t\t},\n\t\t\tDbEngineVersion:     pulumi.String(\"MySQL_5_7\"),\n\t\t\tInstanceName:        pulumi.String(\"tf-test-v2\"),\n\t\t\tInstanceType:        pulumi.String(\"HA\"),\n\t\t\tLowerCaseTableNames: pulumi.String(\"1\"),\n\t\t\tNodeInfos: rds_v2.RdsInstanceV2NodeInfoArray{\n\t\t\t\t\u0026rds_v2.RdsInstanceV2NodeInfoArgs{\n\t\t\t\t\tNodeSpec: pulumi.String(\"rds.mysql.2c4g\"),\n\t\t\t\t\tNodeType: pulumi.String(\"Primary\"),\n\t\t\t\t\tZoneId:   pulumi.String(\"cn-beijing-a\"),\n\t\t\t\t},\n\t\t\t\t\u0026rds_v2.RdsInstanceV2NodeInfoArgs{\n\t\t\t\t\tNodeSpec: pulumi.String(\"rds.mysql.2c4g\"),\n\t\t\t\t\tNodeType: pulumi.String(\"Secondary\"),\n\t\t\t\t\tZoneId:   pulumi.String(\"cn-beijing-a\"),\n\t\t\t\t},\n\t\t\t\t\u0026rds_v2.RdsInstanceV2NodeInfoArgs{\n\t\t\t\t\tNodeSpec: pulumi.String(\"rds.mysql.1c2g\"),\n\t\t\t\t\tNodeType: pulumi.String(\"ReadOnly\"),\n\t\t\t\t\tZoneId:   pulumi.String(\"cn-beijing-a\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tProjectName:  pulumi.String(\"yyy\"),\n\t\t\tStorageSpace: pulumi.Int(100),\n\t\t\tStorageType:  pulumi.String(\"LocalSSD\"),\n\t\t\tSubnetId:     pulumi.String(\"subnet-mj92ij84m5fk5smt1arvwrtw\"),\n\t\t\tVpcId:        pulumi.String(\"vpc-13fawddpwi41s3n6nu4g2y8bt\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new RdsInstanceV2(\"foo\", RdsInstanceV2Args.builder()        \n            .chargeInfo(RdsInstanceV2ChargeInfoArgs.builder()\n                .chargeType(\"PostPaid\")\n                .build())\n            .dbEngineVersion(\"MySQL_5_7\")\n            .instanceName(\"tf-test-v2\")\n            .instanceType(\"HA\")\n            .lowerCaseTableNames(\"1\")\n            .nodeInfos(            \n                RdsInstanceV2NodeInfoArgs.builder()\n                    .nodeSpec(\"rds.mysql.2c4g\")\n                    .nodeType(\"Primary\")\n                    .zoneId(\"cn-beijing-a\")\n                    .build(),\n                RdsInstanceV2NodeInfoArgs.builder()\n                    .nodeSpec(\"rds.mysql.2c4g\")\n                    .nodeType(\"Secondary\")\n                    .zoneId(\"cn-beijing-a\")\n                    .build(),\n                RdsInstanceV2NodeInfoArgs.builder()\n                    .nodeSpec(\"rds.mysql.1c2g\")\n                    .nodeType(\"ReadOnly\")\n                    .zoneId(\"cn-beijing-a\")\n                    .build())\n            .projectName(\"yyy\")\n            .storageSpace(100)\n            .storageType(\"LocalSSD\")\n            .subnetId(\"subnet-mj92ij84m5fk5smt1arvwrtw\")\n            .vpcId(\"vpc-13fawddpwi41s3n6nu4g2y8bt\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:rds_v2:RdsInstanceV2\n    properties:\n      chargeInfo:\n        chargeType: PostPaid\n      dbEngineVersion: MySQL_5_7\n      instanceName: tf-test-v2\n      instanceType: HA\n      lowerCaseTableNames: 1\n      nodeInfos:\n        - nodeSpec: rds.mysql.2c4g\n          nodeType: Primary\n          zoneId: cn-beijing-a\n        - nodeSpec: rds.mysql.2c4g\n          nodeType: Secondary\n          zoneId: cn-beijing-a\n        - nodeSpec: rds.mysql.1c2g\n          nodeType: ReadOnly\n          zoneId: cn-beijing-a\n      projectName: yyy\n      storageSpace: 100\n      storageType: LocalSSD\n      subnetId: subnet-mj92ij84m5fk5smt1arvwrtw\n      vpcId: vpc-13fawddpwi41s3n6nu4g2y8bt\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRDS Instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:rds_v2/rdsInstanceV2:RdsInstanceV2 default mysql-42b38c769c4b\n```\n\n ",
            "properties": {
                "chargeInfo": {
                    "$ref": "#/types/volcengine:rds_v2/RdsInstanceV2ChargeInfo:RdsInstanceV2ChargeInfo",
                    "description": "Payment methods.\n"
                },
                "connectionInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_v2/RdsInstanceV2ConnectionInfo:RdsInstanceV2ConnectionInfo"
                    },
                    "description": "The connection info ot the RDS instance.\n"
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "Instance type. Value:\nMySQL_5_7\nMySQL_8_0.\n"
                },
                "dbParamGroupId": {
                    "type": "string",
                    "description": "Parameter template ID. It only takes effect when the database type is MySQL/PostgreSQL/SQL_Server. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "dbTimeZone": {
                    "type": "string",
                    "description": "Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Instance name. Cannot start with a number or a dash\nCan only contain Chinese characters, letters, numbers, underscores and dashes\nThe length is limited between 1 ~ 128.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Instance type. Value:\nHA: High availability version.\n"
                },
                "lowerCaseTableNames": {
                    "type": "string",
                    "description": "Whether the table name is case sensitive, the default value is 1.\nRanges:\n0: Table names are stored as fixed and table names are case-sensitive.\n1: Table names will be stored in lowercase and table names are not case sensitive.\n"
                },
                "nodeInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_v2/RdsInstanceV2NodeInfo:RdsInstanceV2NodeInfo"
                    },
                    "description": "Instance specification configuration. This parameter is required for RDS for MySQL, RDS for PostgreSQL and MySQL Sharding. There is one and only one Primary node, one and only one Secondary node, and 0-10 Read-Only nodes.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "Subordinate to the project.\n"
                },
                "storageSpace": {
                    "type": "integer",
                    "description": "Instance storage space.\nWhen the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, value range: [20, 3000], unit: GB, increments every 100GB.\nWhen the database type is veDB_MySQL/veDB_PostgreSQL, this parameter does not need to be passed.\n"
                },
                "storageType": {
                    "type": "string",
                    "description": "Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:\nLocalSSD - local SSD disk\nWhen the database type is veDB_MySQL/veDB_PostgreSQL, the value is:\nDistributedStorage - Distributed Storage.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet ID.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Private network (VPC) ID. You can call the DescribeVpcs query and use this parameter to specify the VPC where the instance is to be created.\n"
                }
            },
            "required": [
                "chargeInfo",
                "connectionInfos",
                "dbEngineVersion",
                "instanceType",
                "nodeInfos",
                "storageType",
                "subnetId",
                "vpcId"
            ],
            "inputProperties": {
                "chargeInfo": {
                    "$ref": "#/types/volcengine:rds_v2/RdsInstanceV2ChargeInfo:RdsInstanceV2ChargeInfo",
                    "description": "Payment methods.\n",
                    "willReplaceOnChanges": true
                },
                "dbEngineVersion": {
                    "type": "string",
                    "description": "Instance type. Value:\nMySQL_5_7\nMySQL_8_0.\n",
                    "willReplaceOnChanges": true
                },
                "dbParamGroupId": {
                    "type": "string",
                    "description": "Parameter template ID. It only takes effect when the database type is MySQL/PostgreSQL/SQL_Server. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "dbTimeZone": {
                    "type": "string",
                    "description": "Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                    "willReplaceOnChanges": true
                },
                "instanceName": {
                    "type": "string",
                    "description": "Instance name. Cannot start with a number or a dash\nCan only contain Chinese characters, letters, numbers, underscores and dashes\nThe length is limited between 1 ~ 128.\n",
                    "willReplaceOnChanges": true
                },
                "instanceType": {
                    "type": "string",
                    "description": "Instance type. Value:\nHA: High availability version.\n",
                    "willReplaceOnChanges": true
                },
                "lowerCaseTableNames": {
                    "type": "string",
                    "description": "Whether the table name is case sensitive, the default value is 1.\nRanges:\n0: Table names are stored as fixed and table names are case-sensitive.\n1: Table names will be stored in lowercase and table names are not case sensitive.\n",
                    "willReplaceOnChanges": true
                },
                "nodeInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:rds_v2/RdsInstanceV2NodeInfo:RdsInstanceV2NodeInfo"
                    },
                    "description": "Instance specification configuration. This parameter is required for RDS for MySQL, RDS for PostgreSQL and MySQL Sharding. There is one and only one Primary node, one and only one Secondary node, and 0-10 Read-Only nodes.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "Subordinate to the project.\n"
                },
                "storageSpace": {
                    "type": "integer",
                    "description": "Instance storage space.\nWhen the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, value range: [20, 3000], unit: GB, increments every 100GB.\nWhen the database type is veDB_MySQL/veDB_PostgreSQL, this parameter does not need to be passed.\n"
                },
                "storageType": {
                    "type": "string",
                    "description": "Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:\nLocalSSD - local SSD disk\nWhen the database type is veDB_MySQL/veDB_PostgreSQL, the value is:\nDistributedStorage - Distributed Storage.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet ID.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "Private network (VPC) ID. You can call the DescribeVpcs query and use this parameter to specify the VPC where the instance is to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "chargeInfo",
                "dbEngineVersion",
                "instanceType",
                "nodeInfos",
                "storageType",
                "subnetId",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdsInstanceV2 resources.\n",
                "properties": {
                    "chargeInfo": {
                        "$ref": "#/types/volcengine:rds_v2/RdsInstanceV2ChargeInfo:RdsInstanceV2ChargeInfo",
                        "description": "Payment methods.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_v2/RdsInstanceV2ConnectionInfo:RdsInstanceV2ConnectionInfo"
                        },
                        "description": "The connection info ot the RDS instance.\n"
                    },
                    "dbEngineVersion": {
                        "type": "string",
                        "description": "Instance type. Value:\nMySQL_5_7\nMySQL_8_0.\n",
                        "willReplaceOnChanges": true
                    },
                    "dbParamGroupId": {
                        "type": "string",
                        "description": "Parameter template ID. It only takes effect when the database type is MySQL/PostgreSQL/SQL_Server. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "dbTimeZone": {
                        "type": "string",
                        "description": "Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Instance name. Cannot start with a number or a dash\nCan only contain Chinese characters, letters, numbers, underscores and dashes\nThe length is limited between 1 ~ 128.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "Instance type. Value:\nHA: High availability version.\n",
                        "willReplaceOnChanges": true
                    },
                    "lowerCaseTableNames": {
                        "type": "string",
                        "description": "Whether the table name is case sensitive, the default value is 1.\nRanges:\n0: Table names are stored as fixed and table names are case-sensitive.\n1: Table names will be stored in lowercase and table names are not case sensitive.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_v2/RdsInstanceV2NodeInfo:RdsInstanceV2NodeInfo"
                        },
                        "description": "Instance specification configuration. This parameter is required for RDS for MySQL, RDS for PostgreSQL and MySQL Sharding. There is one and only one Primary node, one and only one Secondary node, and 0-10 Read-Only nodes.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "Subordinate to the project.\n"
                    },
                    "storageSpace": {
                        "type": "integer",
                        "description": "Instance storage space.\nWhen the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, value range: [20, 3000], unit: GB, increments every 100GB.\nWhen the database type is veDB_MySQL/veDB_PostgreSQL, this parameter does not need to be passed.\n"
                    },
                    "storageType": {
                        "type": "string",
                        "description": "Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:\nLocalSSD - local SSD disk\nWhen the database type is veDB_MySQL/veDB_PostgreSQL, the value is:\nDistributedStorage - Distributed Storage.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Private network (VPC) ID. You can call the DescribeVpcs query and use this parameter to specify the VPC where the instance is to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:redis/account:Account": {
            "description": "Provides a resource to manage redis account\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.redis.Account(\"foo\", {\n    accountName: \"test\",\n    description: \"test12345\",\n    instanceId: \"redis-cn0398aizj8cwmopx\",\n    password: \"1qaz!QAZ\",\n    roleName: \"ReadOnly\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.redis.Account(\"foo\",\n    account_name=\"test\",\n    description=\"test12345\",\n    instance_id=\"redis-cn0398aizj8cwmopx\",\n    password=\"1qaz!QAZ\",\n    role_name=\"ReadOnly\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Redis.Account(\"foo\", new Volcengine.Redis.AccountArgs\n        {\n            AccountName = \"test\",\n            Description = \"test12345\",\n            InstanceId = \"redis-cn0398aizj8cwmopx\",\n            Password = \"1qaz!QAZ\",\n            RoleName = \"ReadOnly\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.NewAccount(ctx, \"foo\", \u0026redis.AccountArgs{\n\t\t\tAccountName: pulumi.String(\"test\"),\n\t\t\tDescription: pulumi.String(\"test12345\"),\n\t\t\tInstanceId:  pulumi.String(\"redis-cn0398aizj8cwmopx\"),\n\t\t\tPassword:    pulumi.String(\"1qaz!QAZ\"),\n\t\t\tRoleName:    pulumi.String(\"ReadOnly\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Account(\"foo\", AccountArgs.builder()        \n            .accountName(\"test\")\n            .description(\"test12345\")\n            .instanceId(\"redis-cn0398aizj8cwmopx\")\n            .password(\"1qaz!QAZ\")\n            .roleName(\"ReadOnly\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:redis:Account\n    properties:\n      accountName: test\n      description: test12345\n      instanceId: redis-cn0398aizj8cwmopx\n      password: 1qaz!QAZ\n      roleName: ReadOnly\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRedis account can be imported using the instanceId:accountName, e.g.\n\n```sh\n $ pulumi import volcengine:redis/account:Account default redis-42b38c769c4b:test\n```\n\n ",
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Redis account name.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the redis account.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the Redis instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the redis account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Role type, the valid value can be `Administrator`, `ReadWrite`, `ReadOnly`, `NotDangerous`.\n"
                }
            },
            "required": [
                "accountName",
                "instanceId",
                "password",
                "roleName"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "Redis account name.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the redis account.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the Redis instance.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The password of the redis account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Role type, the valid value can be `Administrator`, `ReadWrite`, `ReadOnly`, `NotDangerous`.\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "instanceId",
                "password",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "Redis account name.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the redis account.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the Redis instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the redis account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Role type, the valid value can be `Administrator`, `ReadWrite`, `ReadOnly`, `NotDangerous`.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:redis/allowList:AllowList": {
            "description": "Provides a resource to manage redis allow list\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.redis.AllowList(\"foo\", {\n    allowLists: [\n        \"0.0.0.0/0\",\n        \"192.168.0.0/24\",\n        \"192.168.1.1\",\n        \"192.168.2.22\",\n    ],\n    allowListDesc: \"renxin terraform测试白xxxxxxx\",\n    allowListName: \"rx_test_tf_allowlist_create\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.redis.AllowList(\"foo\",\n    allow_lists=[\n        \"0.0.0.0/0\",\n        \"192.168.0.0/24\",\n        \"192.168.1.1\",\n        \"192.168.2.22\",\n    ],\n    allow_list_desc=\"renxin terraform测试白xxxxxxx\",\n    allow_list_name=\"rx_test_tf_allowlist_create\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Redis.AllowList(\"foo\", new Volcengine.Redis.AllowListArgs\n        {\n            AllowLists = \n            {\n                \"0.0.0.0/0\",\n                \"192.168.0.0/24\",\n                \"192.168.1.1\",\n                \"192.168.2.22\",\n            },\n            AllowListDesc = \"renxin terraform测试白xxxxxxx\",\n            AllowListName = \"rx_test_tf_allowlist_create\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.NewAllowList(ctx, \"foo\", \u0026redis.AllowListArgs{\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\tpulumi.String(\"192.168.0.0/24\"),\n\t\t\t\tpulumi.String(\"192.168.1.1\"),\n\t\t\t\tpulumi.String(\"192.168.2.22\"),\n\t\t\t},\n\t\t\tAllowListDesc: pulumi.String(\"renxin terraform测试白xxxxxxx\"),\n\t\t\tAllowListName: pulumi.String(\"rx_test_tf_allowlist_create\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AllowList(\"foo\", AllowListArgs.builder()        \n            .allowLists(            \n                \"0.0.0.0/0\",\n                \"192.168.0.0/24\",\n                \"192.168.1.1\",\n                \"192.168.2.22\")\n            .allowListDesc(\"renxin terraform测试白xxxxxxx\")\n            .allowListName(\"rx_test_tf_allowlist_create\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:redis:AllowList\n    properties:\n      allowLists:\n        - 0.0.0.0/0\n        - 192.168.0.0/24\n        - 192.168.1.1\n        - 192.168.2.22\n      allowListDesc: renxin terraform测试白xxxxxxx\n      allowListName: rx_test_tf_allowlist_create\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRedis AllowList can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:redis/allowList:AllowList default acl-cn03wk541s55c376xxxx\n```\n\n ",
            "properties": {
                "allowListDesc": {
                    "type": "string",
                    "description": "Description of allow list.\n"
                },
                "allowListId": {
                    "type": "string",
                    "description": "Id of allow list.\n"
                },
                "allowListIpNum": {
                    "type": "integer",
                    "description": "The IP number of allow list.\n"
                },
                "allowListName": {
                    "type": "string",
                    "description": "Name of allow list.\n"
                },
                "allowListType": {
                    "type": "string",
                    "description": "Type of allow list.\n"
                },
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ip list of allow list.\n"
                },
                "associatedInstanceNum": {
                    "type": "integer",
                    "description": "The number of instance that associated to allow list.\n"
                },
                "associatedInstances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/AllowListAssociatedInstance:AllowListAssociatedInstance"
                    },
                    "description": "Instances associated by this allow list.\n"
                }
            },
            "required": [
                "allowLists",
                "allowListId",
                "allowListIpNum",
                "allowListName",
                "allowListType",
                "associatedInstanceNum",
                "associatedInstances"
            ],
            "inputProperties": {
                "allowListDesc": {
                    "type": "string",
                    "description": "Description of allow list.\n"
                },
                "allowListName": {
                    "type": "string",
                    "description": "Name of allow list.\n"
                },
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ip list of allow list.\n"
                }
            },
            "requiredInputs": [
                "allowLists",
                "allowListName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AllowList resources.\n",
                "properties": {
                    "allowListDesc": {
                        "type": "string",
                        "description": "Description of allow list.\n"
                    },
                    "allowListId": {
                        "type": "string",
                        "description": "Id of allow list.\n"
                    },
                    "allowListIpNum": {
                        "type": "integer",
                        "description": "The IP number of allow list.\n"
                    },
                    "allowListName": {
                        "type": "string",
                        "description": "Name of allow list.\n"
                    },
                    "allowListType": {
                        "type": "string",
                        "description": "Type of allow list.\n"
                    },
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Ip list of allow list.\n"
                    },
                    "associatedInstanceNum": {
                        "type": "integer",
                        "description": "The number of instance that associated to allow list.\n"
                    },
                    "associatedInstances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/AllowListAssociatedInstance:AllowListAssociatedInstance"
                        },
                        "description": "Instances associated by this allow list.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:redis/allowListAssociate:AllowListAssociate": {
            "description": "Provides a resource to manage redis allow list associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAllowListAssociate = new volcengine.redis.AllowListAssociate(\"default\", {\n    allowListId: \"acl-cnlfc5zsxscu1gg2ajh\",\n    instanceId: \"redis-cnlfbzifs7bpvundz\",\n});\nconst default1 = new volcengine.redis.AllowListAssociate(\"default1\", {\n    allowListId: \"acl-cnlff2mb31zo85p5am7\",\n    instanceId: \"redis-cnlfbzifs7bpvundz\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.redis.AllowListAssociate(\"default\",\n    allow_list_id=\"acl-cnlfc5zsxscu1gg2ajh\",\n    instance_id=\"redis-cnlfbzifs7bpvundz\")\ndefault1 = volcengine.redis.AllowListAssociate(\"default1\",\n    allow_list_id=\"acl-cnlff2mb31zo85p5am7\",\n    instance_id=\"redis-cnlfbzifs7bpvundz\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Volcengine.Redis.AllowListAssociate(\"default\", new Volcengine.Redis.AllowListAssociateArgs\n        {\n            AllowListId = \"acl-cnlfc5zsxscu1gg2ajh\",\n            InstanceId = \"redis-cnlfbzifs7bpvundz\",\n        });\n        var default1 = new Volcengine.Redis.AllowListAssociate(\"default1\", new Volcengine.Redis.AllowListAssociateArgs\n        {\n            AllowListId = \"acl-cnlff2mb31zo85p5am7\",\n            InstanceId = \"redis-cnlfbzifs7bpvundz\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.NewAllowListAssociate(ctx, \"default\", \u0026redis.AllowListAssociateArgs{\n\t\t\tAllowListId: pulumi.String(\"acl-cnlfc5zsxscu1gg2ajh\"),\n\t\t\tInstanceId:  pulumi.String(\"redis-cnlfbzifs7bpvundz\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redis.NewAllowListAssociate(ctx, \"default1\", \u0026redis.AllowListAssociateArgs{\n\t\t\tAllowListId: pulumi.String(\"acl-cnlff2mb31zo85p5am7\"),\n\t\t\tInstanceId:  pulumi.String(\"redis-cnlfbzifs7bpvundz\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new AllowListAssociate(\"default\", AllowListAssociateArgs.builder()        \n            .allowListId(\"acl-cnlfc5zsxscu1gg2ajh\")\n            .instanceId(\"redis-cnlfbzifs7bpvundz\")\n            .build());\n\n        var default1 = new AllowListAssociate(\"default1\", AllowListAssociateArgs.builder()        \n            .allowListId(\"acl-cnlff2mb31zo85p5am7\")\n            .instanceId(\"redis-cnlfbzifs7bpvundz\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:redis:AllowListAssociate\n    properties:\n      allowListId: acl-cnlfc5zsxscu1gg2ajh\n      instanceId: redis-cnlfbzifs7bpvundz\n  default1:\n    type: volcengine:redis:AllowListAssociate\n    properties:\n      allowListId: acl-cnlff2mb31zo85p5am7\n      instanceId: redis-cnlfbzifs7bpvundz\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRedis AllowList Association can be imported using the instanceId:allowListId, e.g.\n\n```sh\n $ pulumi import volcengine:redis/allowListAssociate:AllowListAssociate default redis-asdljioeixxxx:acl-cn03wk541s55c376xxxx\n```\n\n ",
            "properties": {
                "allowListId": {
                    "type": "string",
                    "description": "Id of allow list to associate.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance to associate.\n"
                }
            },
            "required": [
                "allowListId",
                "instanceId"
            ],
            "inputProperties": {
                "allowListId": {
                    "type": "string",
                    "description": "Id of allow list to associate.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance to associate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "allowListId",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AllowListAssociate resources.\n",
                "properties": {
                    "allowListId": {
                        "type": "string",
                        "description": "Id of allow list to associate.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of instance to associate.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:redis/backup:Backup": {
            "description": "Provides a resource to manage redis backup\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultBackup = new volcengine.redis.Backup(\"default\", {\n    instanceId: \"redis-cnlfvrv4qye6u4lpa\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.redis.Backup(\"default\", instance_id=\"redis-cnlfvrv4qye6u4lpa\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Volcengine.Redis.Backup(\"default\", new Volcengine.Redis.BackupArgs\n        {\n            InstanceId = \"redis-cnlfvrv4qye6u4lpa\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.NewBackup(ctx, \"default\", \u0026redis.BackupArgs{\n\t\t\tInstanceId: pulumi.String(\"redis-cnlfvrv4qye6u4lpa\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Backup(\"default\", BackupArgs.builder()        \n            .instanceId(\"redis-cnlfvrv4qye6u4lpa\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:redis:Backup\n    properties:\n      instanceId: redis-cnlfvrv4qye6u4lpa\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRedis Backup can be imported using the instanceId:backupId, e.g.\n\n```sh\n $ pulumi import volcengine:redis/backup:Backup default redis-cn02aqusft7ws****:b-cn02xmmrp751i9cdzcphjmk4****\n```\n\n ",
            "properties": {
                "backupPointId": {
                    "type": "string",
                    "description": "The id of backup point.\n"
                },
                "backupStrategy": {
                    "type": "string",
                    "description": "Backup strategy.\n"
                },
                "backupType": {
                    "type": "string",
                    "description": "Backup type.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "End time of backup.\n"
                },
                "instanceDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/BackupInstanceDetail:BackupInstanceDetail"
                    },
                    "description": "Information of instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance to create backup.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size in MiB.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time of backup.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of backup (Creating/Available/Unavailable/Deleting).\n"
                }
            },
            "required": [
                "backupPointId",
                "backupStrategy",
                "backupType",
                "endTime",
                "instanceDetails",
                "instanceId",
                "size",
                "startTime",
                "status"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance to create backup.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Backup resources.\n",
                "properties": {
                    "backupPointId": {
                        "type": "string",
                        "description": "The id of backup point.\n"
                    },
                    "backupStrategy": {
                        "type": "string",
                        "description": "Backup strategy.\n"
                    },
                    "backupType": {
                        "type": "string",
                        "description": "Backup type.\n"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "End time of backup.\n"
                    },
                    "instanceDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/BackupInstanceDetail:BackupInstanceDetail"
                        },
                        "description": "Information of instance.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of instance to create backup.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size in MiB.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Start time of backup.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of backup (Creating/Available/Unavailable/Deleting).\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:redis/backupRestore:BackupRestore": {
            "description": "Provides a resource to manage redis backup restore\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultBackupRestore = new volcengine.redis.BackupRestore(\"default\", {\n    instanceId: \"redis-cnlfvrv4qye6u4lpa\",\n    timePoint: \"2023-04-14T02:51:51Z\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.redis.BackupRestore(\"default\",\n    instance_id=\"redis-cnlfvrv4qye6u4lpa\",\n    time_point=\"2023-04-14T02:51:51Z\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Volcengine.Redis.BackupRestore(\"default\", new Volcengine.Redis.BackupRestoreArgs\n        {\n            InstanceId = \"redis-cnlfvrv4qye6u4lpa\",\n            TimePoint = \"2023-04-14T02:51:51Z\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.NewBackupRestore(ctx, \"default\", \u0026redis.BackupRestoreArgs{\n\t\t\tInstanceId: pulumi.String(\"redis-cnlfvrv4qye6u4lpa\"),\n\t\t\tTimePoint:  pulumi.String(\"2023-04-14T02:51:51Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new BackupRestore(\"default\", BackupRestoreArgs.builder()        \n            .instanceId(\"redis-cnlfvrv4qye6u4lpa\")\n            .timePoint(\"2023-04-14T02:51:51Z\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:redis:BackupRestore\n    properties:\n      instanceId: redis-cnlfvrv4qye6u4lpa\n      timePoint: 2023-04-14T02:51:51Z\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRedis Backup Restore can be imported using the restore:instanceId, e.g.\n\n```sh\n $ pulumi import volcengine:redis/backupRestore:BackupRestore default restore:redis-asdljioeixxxx\n```\n\n ",
            "properties": {
                "backupType": {
                    "type": "string",
                    "description": "The type of backup. The value can be Full or Inc.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance.\n"
                },
                "timePoint": {
                    "type": "string",
                    "description": "Time point of backup, for example: 2021-11-09T06:07:26Z. Use lifecycle and ignore_changes in import.\n"
                }
            },
            "required": [
                "instanceId",
                "timePoint"
            ],
            "inputProperties": {
                "backupType": {
                    "type": "string",
                    "description": "The type of backup. The value can be Full or Inc.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance.\n",
                    "willReplaceOnChanges": true
                },
                "timePoint": {
                    "type": "string",
                    "description": "Time point of backup, for example: 2021-11-09T06:07:26Z. Use lifecycle and ignore_changes in import.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "timePoint"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BackupRestore resources.\n",
                "properties": {
                    "backupType": {
                        "type": "string",
                        "description": "The type of backup. The value can be Full or Inc.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "timePoint": {
                        "type": "string",
                        "description": "Time point of backup, for example: 2021-11-09T06:07:26Z. Use lifecycle and ignore_changes in import.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:redis/continuousBackup:ContinuousBackup": {
            "description": "Provides a resource to manage redis continuous backup\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.redis.ContinuousBackup(\"foo\", {\n    instanceId: \"redis-cnlficlt4974s****\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.redis.ContinuousBackup(\"foo\", instance_id=\"redis-cnlficlt4974s****\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Redis.ContinuousBackup(\"foo\", new Volcengine.Redis.ContinuousBackupArgs\n        {\n            InstanceId = \"redis-cnlficlt4974s****\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.NewContinuousBackup(ctx, \"foo\", \u0026redis.ContinuousBackupArgs{\n\t\t\tInstanceId: pulumi.String(\"redis-cnlficlt4974s****\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ContinuousBackup(\"foo\", ContinuousBackupArgs.builder()        \n            .instanceId(\"redis-cnlficlt4974s****\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:redis:ContinuousBackup\n    properties:\n      instanceId: redis-cnlficlt4974s****\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRedis Continuous Backup can be imported using the continuous:instanceId, e.g.\n\n```sh\n $ pulumi import volcengine:redis/continuousBackup:ContinuousBackup default continuous:redis-asdljioeixxxx\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The Id of redis instance.\n"
                }
            },
            "required": [
                "instanceId"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The Id of redis instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContinuousBackup resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The Id of redis instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:redis/endpoint:Endpoint": {
            "description": "Provides a resource to manage redis endpoint\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.redis.Endpoint(\"foo\", {\n    eipId: \"eip-274ho3mtx543k7fap8tyi****\",\n    instanceId: \"redis-cn03bb67g3tr2****\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.redis.Endpoint(\"foo\",\n    eip_id=\"eip-274ho3mtx543k7fap8tyi****\",\n    instance_id=\"redis-cn03bb67g3tr2****\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Redis.Endpoint(\"foo\", new Volcengine.Redis.EndpointArgs\n        {\n            EipId = \"eip-274ho3mtx543k7fap8tyi****\",\n            InstanceId = \"redis-cn03bb67g3tr2****\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.NewEndpoint(ctx, \"foo\", \u0026redis.EndpointArgs{\n\t\t\tEipId:      pulumi.String(\"eip-274ho3mtx543k7fap8tyi****\"),\n\t\t\tInstanceId: pulumi.String(\"redis-cn03bb67g3tr2****\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Endpoint(\"foo\", EndpointArgs.builder()        \n            .eipId(\"eip-274ho3mtx543k7fap8tyi****\")\n            .instanceId(\"redis-cn03bb67g3tr2****\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:redis:Endpoint\n    properties:\n      eipId: eip-274ho3mtx543k7fap8tyi****\n      instanceId: redis-cn03bb67g3tr2****\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRedis Endpoint can be imported using the instanceId:eipId, e.g.\n\n```sh\n $ pulumi import volcengine:redis/endpoint:Endpoint default redis-asdljioeixxxx:eip-2fef2qcfbfw8w5oxruw3w****\n```\n\n ",
            "properties": {
                "eipId": {
                    "type": "string",
                    "description": "Id of eip.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance.\n"
                }
            },
            "required": [
                "eipId",
                "instanceId"
            ],
            "inputProperties": {
                "eipId": {
                    "type": "string",
                    "description": "Id of eip.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "eipId",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Endpoint resources.\n",
                "properties": {
                    "eipId": {
                        "type": "string",
                        "description": "Id of eip.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:redis/instance:Instance": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.redis.Instance(\"foo\", {\n    applyImmediately: true,\n    backupActive: true,\n    backupHour: 4,\n    backupPeriods: [\n        1,\n        2,\n        3,\n    ],\n    chargeType: \"PostPaid\",\n    createBackup: false,\n    deletionProtection: \"disabled\",\n    engineVersion: \"5.0\",\n    instanceName: \"tf-test\",\n    nodeNumber: 2,\n    paramValues: [\n        {\n            name: \"active-defrag-cycle-min\",\n            value: \"5\",\n        },\n        {\n            name: \"active-defrag-cycle-max\",\n            value: \"28\",\n        },\n    ],\n    password: \"1qaz!QAZ12\",\n    //     purchase_months = 1\n    //     auto_renew = false\n    port: 6381,\n    projectName: \"default\",\n    shardCapacity: 1024,\n    shardNumber: 2,\n    shardedCluster: 1,\n    subnetId: \"subnet-13g7c3lot0lc03n6nu4wj****\",\n    tags: [\n        {\n            key: \"k1\",\n            value: \"v1\",\n        },\n        {\n            key: \"k3\",\n            value: \"v3\",\n        },\n    ],\n    vpcAuthMode: \"close\",\n    zoneIds: [\n        \"cn-beijing-a\",\n        \"cn-beijing-b\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.redis.Instance(\"foo\",\n    apply_immediately=True,\n    backup_active=True,\n    backup_hour=4,\n    backup_periods=[\n        1,\n        2,\n        3,\n    ],\n    charge_type=\"PostPaid\",\n    create_backup=False,\n    deletion_protection=\"disabled\",\n    engine_version=\"5.0\",\n    instance_name=\"tf-test\",\n    node_number=2,\n    param_values=[\n        volcengine.redis.InstanceParamValueArgs(\n            name=\"active-defrag-cycle-min\",\n            value=\"5\",\n        ),\n        volcengine.redis.InstanceParamValueArgs(\n            name=\"active-defrag-cycle-max\",\n            value=\"28\",\n        ),\n    ],\n    password=\"1qaz!QAZ12\",\n    port=6381,\n    project_name=\"default\",\n    shard_capacity=1024,\n    shard_number=2,\n    sharded_cluster=1,\n    subnet_id=\"subnet-13g7c3lot0lc03n6nu4wj****\",\n    tags=[\n        volcengine.redis.InstanceTagArgs(\n            key=\"k1\",\n            value=\"v1\",\n        ),\n        volcengine.redis.InstanceTagArgs(\n            key=\"k3\",\n            value=\"v3\",\n        ),\n    ],\n    vpc_auth_mode=\"close\",\n    zone_ids=[\n        \"cn-beijing-a\",\n        \"cn-beijing-b\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Redis.Instance(\"foo\", new Volcengine.Redis.InstanceArgs\n        {\n            ApplyImmediately = true,\n            BackupActive = true,\n            BackupHour = 4,\n            BackupPeriods = \n            {\n                1,\n                2,\n                3,\n            },\n            ChargeType = \"PostPaid\",\n            CreateBackup = false,\n            DeletionProtection = \"disabled\",\n            EngineVersion = \"5.0\",\n            InstanceName = \"tf-test\",\n            NodeNumber = 2,\n            ParamValues = \n            {\n                new Volcengine.Redis.Inputs.InstanceParamValueArgs\n                {\n                    Name = \"active-defrag-cycle-min\",\n                    Value = \"5\",\n                },\n                new Volcengine.Redis.Inputs.InstanceParamValueArgs\n                {\n                    Name = \"active-defrag-cycle-max\",\n                    Value = \"28\",\n                },\n            },\n            Password = \"1qaz!QAZ12\",\n            Port = 6381,\n            ProjectName = \"default\",\n            ShardCapacity = 1024,\n            ShardNumber = 2,\n            ShardedCluster = 1,\n            SubnetId = \"subnet-13g7c3lot0lc03n6nu4wj****\",\n            Tags = \n            {\n                new Volcengine.Redis.Inputs.InstanceTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n                new Volcengine.Redis.Inputs.InstanceTagArgs\n                {\n                    Key = \"k3\",\n                    Value = \"v3\",\n                },\n            },\n            VpcAuthMode = \"close\",\n            ZoneIds = \n            {\n                \"cn-beijing-a\",\n                \"cn-beijing-b\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/redis\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.NewInstance(ctx, \"foo\", \u0026redis.InstanceArgs{\n\t\t\tApplyImmediately: pulumi.Bool(true),\n\t\t\tBackupActive:     pulumi.Bool(true),\n\t\t\tBackupHour:       pulumi.Int(4),\n\t\t\tBackupPeriods: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t},\n\t\t\tChargeType:         pulumi.String(\"PostPaid\"),\n\t\t\tCreateBackup:       pulumi.Bool(false),\n\t\t\tDeletionProtection: pulumi.String(\"disabled\"),\n\t\t\tEngineVersion:      pulumi.String(\"5.0\"),\n\t\t\tInstanceName:       pulumi.String(\"tf-test\"),\n\t\t\tNodeNumber:         pulumi.Int(2),\n\t\t\tParamValues: redis.InstanceParamValueArray{\n\t\t\t\t\u0026redis.InstanceParamValueArgs{\n\t\t\t\t\tName:  pulumi.String(\"active-defrag-cycle-min\"),\n\t\t\t\t\tValue: pulumi.String(\"5\"),\n\t\t\t\t},\n\t\t\t\t\u0026redis.InstanceParamValueArgs{\n\t\t\t\t\tName:  pulumi.String(\"active-defrag-cycle-max\"),\n\t\t\t\t\tValue: pulumi.String(\"28\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPassword:       pulumi.String(\"1qaz!QAZ12\"),\n\t\t\tPort:           pulumi.Int(6381),\n\t\t\tProjectName:    pulumi.String(\"default\"),\n\t\t\tShardCapacity:  pulumi.Int(1024),\n\t\t\tShardNumber:    pulumi.Int(2),\n\t\t\tShardedCluster: pulumi.Int(1),\n\t\t\tSubnetId:       pulumi.String(\"subnet-13g7c3lot0lc03n6nu4wj****\"),\n\t\t\tTags: redis.InstanceTagArray{\n\t\t\t\t\u0026redis.InstanceTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t\t\u0026redis.InstanceTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k3\"),\n\t\t\t\t\tValue: pulumi.String(\"v3\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVpcAuthMode: pulumi.String(\"close\"),\n\t\t\tZoneIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"cn-beijing-a\"),\n\t\t\t\tpulumi.String(\"cn-beijing-b\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Instance(\"foo\", InstanceArgs.builder()        \n            .applyImmediately(true)\n            .backupActive(true)\n            .backupHour(4)\n            .backupPeriods(            \n                1,\n                2,\n                3)\n            .chargeType(\"PostPaid\")\n            .createBackup(false)\n            .deletionProtection(\"disabled\")\n            .engineVersion(\"5.0\")\n            .instanceName(\"tf-test\")\n            .nodeNumber(2)\n            .paramValues(            \n                InstanceParamValueArgs.builder()\n                    .name(\"active-defrag-cycle-min\")\n                    .value(\"5\")\n                    .build(),\n                InstanceParamValueArgs.builder()\n                    .name(\"active-defrag-cycle-max\")\n                    .value(\"28\")\n                    .build())\n            .password(\"1qaz!QAZ12\")\n            .port(6381)\n            .projectName(\"default\")\n            .shardCapacity(1024)\n            .shardNumber(2)\n            .shardedCluster(1)\n            .subnetId(\"subnet-13g7c3lot0lc03n6nu4wj****\")\n            .tags(            \n                InstanceTagArgs.builder()\n                    .key(\"k1\")\n                    .value(\"v1\")\n                    .build(),\n                InstanceTagArgs.builder()\n                    .key(\"k3\")\n                    .value(\"v3\")\n                    .build())\n            .vpcAuthMode(\"close\")\n            .zoneIds(            \n                \"cn-beijing-a\",\n                \"cn-beijing-b\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:redis:Instance\n    properties:\n      applyImmediately: true\n      backupActive: true\n      backupHour: 4\n      backupPeriods:\n        - 1\n        - 2\n        - 3\n      chargeType: PostPaid\n      createBackup: false\n      deletionProtection: disabled\n      engineVersion: 5.0\n      instanceName: tf-test\n      nodeNumber: 2\n      paramValues:\n        - name: active-defrag-cycle-min\n          value: 5\n        - name: active-defrag-cycle-max\n          value: 28\n      password: 1qaz!QAZ12\n      port: 6381\n      projectName: default\n      shardCapacity: 1024\n      shardNumber: 2\n      shardedCluster: 1\n      subnetId: subnet-13g7c3lot0lc03n6nu4wj****\n      tags:\n        - key: k1\n          value: v1\n        - key: k3\n          value: v3\n      vpcAuthMode: close\n      zoneIds:\n        - cn-beijing-a\n        - cn-beijing-b\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nredis instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:redis/instance:Instance default redis-n769ewmjjqyqh5dv\n```\n\n ",
            "properties": {
                "applyImmediately": {
                    "type": "boolean",
                    "description": "Whether to apply the instance configuration change operation immediately. The value of this field is false, means that the change operation will be applied within maintenance time.\n"
                },
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to enable automatic renewal. This field is valid only when `ChargeType` is `PrePaid`, the default value is false. \nWhen importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "backupActive": {
                    "type": "boolean",
                    "description": "Whether enable auto backup for redis instance. This field is valid and required when updating the backup plan of primary and secondary instance.\n"
                },
                "backupHour": {
                    "type": "integer",
                    "description": "The time period to start performing the backup. The valid value range is any integer between 0 and 23, where 0 means that the system will perform the backup in the period of 00:00~01:00, 1 means that the backup will be performed in the period of 01:00~02:00, and so on. \nThis field is valid and required when updating the backup plan of primary and secondary instance.\n"
                },
                "backupPeriods": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The backup period. The valid value can be any integer between 1 and 7. Among them, 1 means backup every Monday, 2 means backup every Tuesday, and so on. \nThis field is valid and required when updating the backup plan of primary and secondary instance.\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of redis instance. Valid value: `PostPaid`, `PrePaid`.\n"
                },
                "createBackup": {
                    "type": "boolean",
                    "description": "Whether to create a final backup when modify the instance configuration or destroy the redis instance.\n"
                },
                "deletionProtection": {
                    "type": "string",
                    "description": "Whether enable deletion protection for redis instance. Valid values: `enabled`, `disabled`(default).\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The engine version of redis instance. Valid value: `4.0`, `5.0`, `6.0`.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of the redis instance.\n"
                },
                "nodeNumber": {
                    "type": "integer",
                    "description": "The number of nodes in each shard, the valid value range is `1-6`. When the value is 1, it means creating a single node instance, and this field can not be modified. When the value is greater than 1, it means creating a primary and secondary instance, and this field can be modified.\n"
                },
                "paramValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/InstanceParamValue:InstanceParamValue"
                    },
                    "description": "The configuration item information to be modified. This field can only be added or modified. Deleting this field is invalid.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The account password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of custom define private network address. The valid value range is `1024-65535`. The default value is `6379`.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name to which the redis instance belongs, if this parameter is empty, the new redis instance will not be added to any project.\n"
                },
                "purchaseMonths": {
                    "type": "integer",
                    "description": "The purchase months of redis instance, the unit is month. the valid value range is as fallows: `1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36`. This field is valid and required when `ChargeType` is `Prepaid`. \nWhen importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "shardCapacity": {
                    "type": "integer",
                    "description": "The memory capacity of each shard, unit is MiB. The valid value range is as fallows: When the value of `ShardedCluster` is 0: 256, 1024, 2048, 4096, 8192, 16384, 32768, 65536. When the value of `ShardedCluster` is 1: 1024, 2048, 4096, 8192, 16384. When the value of `node_number` is 1, the value of this field can not be 256.\n"
                },
                "shardNumber": {
                    "type": "integer",
                    "description": "The number of shards in redis instance, the valid value range is `2-256`. This field is valid and required when the value of `ShardedCluster` is 1.\n"
                },
                "shardedCluster": {
                    "type": "integer",
                    "description": "Whether enable sharded cluster for the current redis instance. Valid values: 0, 1. 0 means disable, 1 means enable.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet id of the redis instance. The specified subnet id must belong to the zone ids.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/InstanceTag:InstanceTag"
                    },
                    "description": "Tags.\n"
                },
                "vpcAuthMode": {
                    "type": "string",
                    "description": "Whether to enable password-free access when connecting to an instance through a private network. Valid values: `open`, `close`. Works only on modified scenes.\n"
                },
                "zoneIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of zone IDs of instance. When creating a single node instance, only one zone id can be specified.\n"
                }
            },
            "required": [
                "backupActive",
                "backupHour",
                "backupPeriods",
                "engineVersion",
                "nodeNumber",
                "password",
                "projectName",
                "shardCapacity",
                "shardNumber",
                "shardedCluster",
                "subnetId",
                "vpcAuthMode",
                "zoneIds"
            ],
            "inputProperties": {
                "applyImmediately": {
                    "type": "boolean",
                    "description": "Whether to apply the instance configuration change operation immediately. The value of this field is false, means that the change operation will be applied within maintenance time.\n"
                },
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to enable automatic renewal. This field is valid only when `ChargeType` is `PrePaid`, the default value is false. \nWhen importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "backupActive": {
                    "type": "boolean",
                    "description": "Whether enable auto backup for redis instance. This field is valid and required when updating the backup plan of primary and secondary instance.\n"
                },
                "backupHour": {
                    "type": "integer",
                    "description": "The time period to start performing the backup. The valid value range is any integer between 0 and 23, where 0 means that the system will perform the backup in the period of 00:00~01:00, 1 means that the backup will be performed in the period of 01:00~02:00, and so on. \nThis field is valid and required when updating the backup plan of primary and secondary instance.\n"
                },
                "backupPeriods": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The backup period. The valid value can be any integer between 1 and 7. Among them, 1 means backup every Monday, 2 means backup every Tuesday, and so on. \nThis field is valid and required when updating the backup plan of primary and secondary instance.\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of redis instance. Valid value: `PostPaid`, `PrePaid`.\n"
                },
                "createBackup": {
                    "type": "boolean",
                    "description": "Whether to create a final backup when modify the instance configuration or destroy the redis instance.\n"
                },
                "deletionProtection": {
                    "type": "string",
                    "description": "Whether enable deletion protection for redis instance. Valid values: `enabled`, `disabled`(default).\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The engine version of redis instance. Valid value: `4.0`, `5.0`, `6.0`.\n",
                    "willReplaceOnChanges": true
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of the redis instance.\n"
                },
                "nodeNumber": {
                    "type": "integer",
                    "description": "The number of nodes in each shard, the valid value range is `1-6`. When the value is 1, it means creating a single node instance, and this field can not be modified. When the value is greater than 1, it means creating a primary and secondary instance, and this field can be modified.\n"
                },
                "paramValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/InstanceParamValue:InstanceParamValue"
                    },
                    "description": "The configuration item information to be modified. This field can only be added or modified. Deleting this field is invalid.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The account password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of custom define private network address. The valid value range is `1024-65535`. The default value is `6379`.\n",
                    "willReplaceOnChanges": true
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name to which the redis instance belongs, if this parameter is empty, the new redis instance will not be added to any project.\n",
                    "willReplaceOnChanges": true
                },
                "purchaseMonths": {
                    "type": "integer",
                    "description": "The purchase months of redis instance, the unit is month. the valid value range is as fallows: `1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36`. This field is valid and required when `ChargeType` is `Prepaid`. \nWhen importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "shardCapacity": {
                    "type": "integer",
                    "description": "The memory capacity of each shard, unit is MiB. The valid value range is as fallows: When the value of `ShardedCluster` is 0: 256, 1024, 2048, 4096, 8192, 16384, 32768, 65536. When the value of `ShardedCluster` is 1: 1024, 2048, 4096, 8192, 16384. When the value of `node_number` is 1, the value of this field can not be 256.\n"
                },
                "shardNumber": {
                    "type": "integer",
                    "description": "The number of shards in redis instance, the valid value range is `2-256`. This field is valid and required when the value of `ShardedCluster` is 1.\n"
                },
                "shardedCluster": {
                    "type": "integer",
                    "description": "Whether enable sharded cluster for the current redis instance. Valid values: 0, 1. 0 means disable, 1 means enable.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet id of the redis instance. The specified subnet id must belong to the zone ids.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:redis/InstanceTag:InstanceTag"
                    },
                    "description": "Tags.\n",
                    "willReplaceOnChanges": true
                },
                "vpcAuthMode": {
                    "type": "string",
                    "description": "Whether to enable password-free access when connecting to an instance through a private network. Valid values: `open`, `close`. Works only on modified scenes.\n"
                },
                "zoneIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of zone IDs of instance. When creating a single node instance, only one zone id can be specified.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "engineVersion",
                "nodeNumber",
                "password",
                "shardCapacity",
                "shardedCluster",
                "subnetId",
                "zoneIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "applyImmediately": {
                        "type": "boolean",
                        "description": "Whether to apply the instance configuration change operation immediately. The value of this field is false, means that the change operation will be applied within maintenance time.\n"
                    },
                    "autoRenew": {
                        "type": "boolean",
                        "description": "Whether to enable automatic renewal. This field is valid only when `ChargeType` is `PrePaid`, the default value is false. \nWhen importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                    },
                    "backupActive": {
                        "type": "boolean",
                        "description": "Whether enable auto backup for redis instance. This field is valid and required when updating the backup plan of primary and secondary instance.\n"
                    },
                    "backupHour": {
                        "type": "integer",
                        "description": "The time period to start performing the backup. The valid value range is any integer between 0 and 23, where 0 means that the system will perform the backup in the period of 00:00~01:00, 1 means that the backup will be performed in the period of 01:00~02:00, and so on. \nThis field is valid and required when updating the backup plan of primary and secondary instance.\n"
                    },
                    "backupPeriods": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The backup period. The valid value can be any integer between 1 and 7. Among them, 1 means backup every Monday, 2 means backup every Tuesday, and so on. \nThis field is valid and required when updating the backup plan of primary and secondary instance.\n"
                    },
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of redis instance. Valid value: `PostPaid`, `PrePaid`.\n"
                    },
                    "createBackup": {
                        "type": "boolean",
                        "description": "Whether to create a final backup when modify the instance configuration or destroy the redis instance.\n"
                    },
                    "deletionProtection": {
                        "type": "string",
                        "description": "Whether enable deletion protection for redis instance. Valid values: `enabled`, `disabled`(default).\n"
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "The engine version of redis instance. Valid value: `4.0`, `5.0`, `6.0`.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of the redis instance.\n"
                    },
                    "nodeNumber": {
                        "type": "integer",
                        "description": "The number of nodes in each shard, the valid value range is `1-6`. When the value is 1, it means creating a single node instance, and this field can not be modified. When the value is greater than 1, it means creating a primary and secondary instance, and this field can be modified.\n"
                    },
                    "paramValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/InstanceParamValue:InstanceParamValue"
                        },
                        "description": "The configuration item information to be modified. This field can only be added or modified. Deleting this field is invalid.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The account password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port of custom define private network address. The valid value range is `1024-65535`. The default value is `6379`.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The project name to which the redis instance belongs, if this parameter is empty, the new redis instance will not be added to any project.\n",
                        "willReplaceOnChanges": true
                    },
                    "purchaseMonths": {
                        "type": "integer",
                        "description": "The purchase months of redis instance, the unit is month. the valid value range is as fallows: `1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36`. This field is valid and required when `ChargeType` is `Prepaid`. \nWhen importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                    },
                    "shardCapacity": {
                        "type": "integer",
                        "description": "The memory capacity of each shard, unit is MiB. The valid value range is as fallows: When the value of `ShardedCluster` is 0: 256, 1024, 2048, 4096, 8192, 16384, 32768, 65536. When the value of `ShardedCluster` is 1: 1024, 2048, 4096, 8192, 16384. When the value of `node_number` is 1, the value of this field can not be 256.\n"
                    },
                    "shardNumber": {
                        "type": "integer",
                        "description": "The number of shards in redis instance, the valid value range is `2-256`. This field is valid and required when the value of `ShardedCluster` is 1.\n"
                    },
                    "shardedCluster": {
                        "type": "integer",
                        "description": "Whether enable sharded cluster for the current redis instance. Valid values: 0, 1. 0 means disable, 1 means enable.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The subnet id of the redis instance. The specified subnet id must belong to the zone ids.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/InstanceTag:InstanceTag"
                        },
                        "description": "Tags.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcAuthMode": {
                        "type": "string",
                        "description": "Whether to enable password-free access when connecting to an instance through a private network. Valid values: `open`, `close`. Works only on modified scenes.\n"
                    },
                    "zoneIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of zone IDs of instance. When creating a single node instance, only one zone id can be specified.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:redis/state:State": {
            "description": "Provides a resource to manage redis instance state\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.redis.State(\"foo\", {\n    action: \"Restart\",\n    instanceId: \"redis-cnlficlt4974swtbz\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.redis.State(\"foo\",\n    action=\"Restart\",\n    instance_id=\"redis-cnlficlt4974swtbz\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Redis.State(\"foo\", new Volcengine.Redis.StateArgs\n        {\n            Action = \"Restart\",\n            InstanceId = \"redis-cnlficlt4974swtbz\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.NewState(ctx, \"foo\", \u0026redis.StateArgs{\n\t\t\tAction:     pulumi.String(\"Restart\"),\n\t\t\tInstanceId: pulumi.String(\"redis-cnlficlt4974swtbz\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new State(\"foo\", StateArgs.builder()        \n            .action(\"Restart\")\n            .instanceId(\"redis-cnlficlt4974swtbz\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:redis:State\n    properties:\n      action: Restart\n      instanceId: redis-cnlficlt4974swtbz\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRedis State Instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:redis/state:State default state:redis-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Instance Action, the value can be `Restart`.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of Instance.\n"
                }
            },
            "required": [
                "action",
                "instanceId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Instance Action, the value can be `Restart`.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of Instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering State resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Instance Action, the value can be `Restart`.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of Instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tls/alarm:Alarm": {
            "description": "Provides a resource to manage tls alarm\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.tls.Alarm(\"foo\", {\n    alarmName: \"test\",\n    //status = true\n    //trigger_period = 1\n    //alarm_period = 10\n    alarmNotifyGroups: [\"3019107f-28a2-4208-a2b6-c33fcb97ac3a\"],\n    alarmPeriodDetail: {\n        email: 2,\n        generalWebhook: 3,\n        phone: 10,\n        sms: 10,\n    },\n    condition: \"$1.errNum\u003e0\",\n    projectId: \"cc44f8b6-0328-4622-b043-023fca735cd4\",\n    queryRequests: [{\n        endTimeOffset: 0,\n        number: 1,\n        query: \"Failed | select count(*) as errNum\",\n        startTimeOffset: -15,\n        topicId: \"af1a2240-ba62-4f18-b421-bde2f9684e57\",\n    }],\n    requestCycle: {\n        time: 11,\n        type: \"Period\",\n    },\n    userDefineMsg: \"test for terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.tls.Alarm(\"foo\",\n    alarm_name=\"test\",\n    alarm_notify_groups=[\"3019107f-28a2-4208-a2b6-c33fcb97ac3a\"],\n    alarm_period_detail=volcengine.tls.AlarmAlarmPeriodDetailArgs(\n        email=2,\n        general_webhook=3,\n        phone=10,\n        sms=10,\n    ),\n    condition=\"$1.errNum\u003e0\",\n    project_id=\"cc44f8b6-0328-4622-b043-023fca735cd4\",\n    query_requests=[volcengine.tls.AlarmQueryRequestArgs(\n        end_time_offset=0,\n        number=1,\n        query=\"Failed | select count(*) as errNum\",\n        start_time_offset=-15,\n        topic_id=\"af1a2240-ba62-4f18-b421-bde2f9684e57\",\n    )],\n    request_cycle=volcengine.tls.AlarmRequestCycleArgs(\n        time=11,\n        type=\"Period\",\n    ),\n    user_define_msg=\"test for terraform\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Tls.Alarm(\"foo\", new Volcengine.Tls.AlarmArgs\n        {\n            AlarmName = \"test\",\n            AlarmNotifyGroups = \n            {\n                \"3019107f-28a2-4208-a2b6-c33fcb97ac3a\",\n            },\n            AlarmPeriodDetail = new Volcengine.Tls.Inputs.AlarmAlarmPeriodDetailArgs\n            {\n                Email = 2,\n                GeneralWebhook = 3,\n                Phone = 10,\n                Sms = 10,\n            },\n            Condition = \"$1.errNum\u003e0\",\n            ProjectId = \"cc44f8b6-0328-4622-b043-023fca735cd4\",\n            QueryRequests = \n            {\n                new Volcengine.Tls.Inputs.AlarmQueryRequestArgs\n                {\n                    EndTimeOffset = 0,\n                    Number = 1,\n                    Query = \"Failed | select count(*) as errNum\",\n                    StartTimeOffset = -15,\n                    TopicId = \"af1a2240-ba62-4f18-b421-bde2f9684e57\",\n                },\n            },\n            RequestCycle = new Volcengine.Tls.Inputs.AlarmRequestCycleArgs\n            {\n                Time = 11,\n                Type = \"Period\",\n            },\n            UserDefineMsg = \"test for terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.NewAlarm(ctx, \"foo\", \u0026tls.AlarmArgs{\n\t\t\tAlarmName: pulumi.String(\"test\"),\n\t\t\tAlarmNotifyGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"3019107f-28a2-4208-a2b6-c33fcb97ac3a\"),\n\t\t\t},\n\t\t\tAlarmPeriodDetail: \u0026tls.AlarmAlarmPeriodDetailArgs{\n\t\t\t\tEmail:          pulumi.Int(2),\n\t\t\t\tGeneralWebhook: pulumi.Int(3),\n\t\t\t\tPhone:          pulumi.Int(10),\n\t\t\t\tSms:            pulumi.Int(10),\n\t\t\t},\n\t\t\tCondition: pulumi.String(fmt.Sprintf(\"%v%v\", \"$\", \"1.errNum\u003e0\")),\n\t\t\tProjectId: pulumi.String(\"cc44f8b6-0328-4622-b043-023fca735cd4\"),\n\t\t\tQueryRequests: tls.AlarmQueryRequestArray{\n\t\t\t\t\u0026tls.AlarmQueryRequestArgs{\n\t\t\t\t\tEndTimeOffset:   pulumi.Int(0),\n\t\t\t\t\tNumber:          pulumi.Int(1),\n\t\t\t\t\tQuery:           pulumi.String(\"Failed | select count(*) as errNum\"),\n\t\t\t\t\tStartTimeOffset: -15,\n\t\t\t\t\tTopicId:         pulumi.String(\"af1a2240-ba62-4f18-b421-bde2f9684e57\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRequestCycle: \u0026tls.AlarmRequestCycleArgs{\n\t\t\t\tTime: pulumi.Int(11),\n\t\t\t\tType: pulumi.String(\"Period\"),\n\t\t\t},\n\t\t\tUserDefineMsg: pulumi.String(\"test for terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\ntls alarm can be imported using the id and project id, e.g.\n\n```sh\n $ pulumi import volcengine:tls/alarm:Alarm default projectId:fc************\n```\n\n ",
            "properties": {
                "alarmId": {
                    "type": "string",
                    "description": "The alarm id.\n"
                },
                "alarmName": {
                    "type": "string",
                    "description": "The name of the alarm.\n"
                },
                "alarmNotifyGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification groups corresponding to the alarm.\n"
                },
                "alarmPeriod": {
                    "type": "integer",
                    "description": "Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.\n"
                },
                "alarmPeriodDetail": {
                    "$ref": "#/types/volcengine:tls/AlarmAlarmPeriodDetail:AlarmAlarmPeriodDetail",
                    "description": "Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "Alarm trigger condition.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id.\n"
                },
                "queryRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/AlarmQueryRequest:AlarmQueryRequest"
                    },
                    "description": "Search and analyze sentences, 1~3 can be configured.\n"
                },
                "requestCycle": {
                    "$ref": "#/types/volcengine:tls/AlarmRequestCycle:AlarmRequestCycle",
                    "description": "The execution period of the alarm task.\n"
                },
                "status": {
                    "type": "boolean",
                    "description": "Whether to enable the alert policy. The default value is true, that is, on.\n"
                },
                "triggerPeriod": {
                    "type": "integer",
                    "description": "Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.\n"
                },
                "userDefineMsg": {
                    "type": "string",
                    "description": "Customize the alarm notification content.\n"
                }
            },
            "required": [
                "alarmId",
                "alarmName",
                "alarmNotifyGroups",
                "condition",
                "projectId",
                "queryRequests",
                "requestCycle"
            ],
            "inputProperties": {
                "alarmName": {
                    "type": "string",
                    "description": "The name of the alarm.\n"
                },
                "alarmNotifyGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of notification groups corresponding to the alarm.\n",
                    "willReplaceOnChanges": true
                },
                "alarmPeriod": {
                    "type": "integer",
                    "description": "Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.\n"
                },
                "alarmPeriodDetail": {
                    "$ref": "#/types/volcengine:tls/AlarmAlarmPeriodDetail:AlarmAlarmPeriodDetail",
                    "description": "Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "Alarm trigger condition.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id.\n",
                    "willReplaceOnChanges": true
                },
                "queryRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/AlarmQueryRequest:AlarmQueryRequest"
                    },
                    "description": "Search and analyze sentences, 1~3 can be configured.\n"
                },
                "requestCycle": {
                    "$ref": "#/types/volcengine:tls/AlarmRequestCycle:AlarmRequestCycle",
                    "description": "The execution period of the alarm task.\n"
                },
                "status": {
                    "type": "boolean",
                    "description": "Whether to enable the alert policy. The default value is true, that is, on.\n"
                },
                "triggerPeriod": {
                    "type": "integer",
                    "description": "Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.\n"
                },
                "userDefineMsg": {
                    "type": "string",
                    "description": "Customize the alarm notification content.\n"
                }
            },
            "requiredInputs": [
                "alarmName",
                "alarmNotifyGroups",
                "condition",
                "projectId",
                "queryRequests",
                "requestCycle"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alarm resources.\n",
                "properties": {
                    "alarmId": {
                        "type": "string",
                        "description": "The alarm id.\n"
                    },
                    "alarmName": {
                        "type": "string",
                        "description": "The name of the alarm.\n"
                    },
                    "alarmNotifyGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of notification groups corresponding to the alarm.\n",
                        "willReplaceOnChanges": true
                    },
                    "alarmPeriod": {
                        "type": "integer",
                        "description": "Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.\n"
                    },
                    "alarmPeriodDetail": {
                        "$ref": "#/types/volcengine:tls/AlarmAlarmPeriodDetail:AlarmAlarmPeriodDetail",
                        "description": "Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.\n"
                    },
                    "condition": {
                        "type": "string",
                        "description": "Alarm trigger condition.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id.\n",
                        "willReplaceOnChanges": true
                    },
                    "queryRequests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/AlarmQueryRequest:AlarmQueryRequest"
                        },
                        "description": "Search and analyze sentences, 1~3 can be configured.\n"
                    },
                    "requestCycle": {
                        "$ref": "#/types/volcengine:tls/AlarmRequestCycle:AlarmRequestCycle",
                        "description": "The execution period of the alarm task.\n"
                    },
                    "status": {
                        "type": "boolean",
                        "description": "Whether to enable the alert policy. The default value is true, that is, on.\n"
                    },
                    "triggerPeriod": {
                        "type": "integer",
                        "description": "Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.\n"
                    },
                    "userDefineMsg": {
                        "type": "string",
                        "description": "Customize the alarm notification content.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tls/alarmNotifyGroup:AlarmNotifyGroup": {
            "description": "Provides a resource to manage tls alarm notify group\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.tls.AlarmNotifyGroup(\"foo\", {\n    alarmNotifyGroupName: \"tf-test\",\n    iamProjectName: \"yyy\",\n    notifyTypes: [\"Trigger\"],\n    receivers: [{\n        endTime: \"23:59:59\",\n        receiverChannels: [\n            \"Email\",\n            \"Sms\",\n        ],\n        receiverNames: [\"vke-qs\"],\n        receiverType: \"User\",\n        startTime: \"23:00:00\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.tls.AlarmNotifyGroup(\"foo\",\n    alarm_notify_group_name=\"tf-test\",\n    iam_project_name=\"yyy\",\n    notify_types=[\"Trigger\"],\n    receivers=[volcengine.tls.AlarmNotifyGroupReceiverArgs(\n        end_time=\"23:59:59\",\n        receiver_channels=[\n            \"Email\",\n            \"Sms\",\n        ],\n        receiver_names=[\"vke-qs\"],\n        receiver_type=\"User\",\n        start_time=\"23:00:00\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Tls.AlarmNotifyGroup(\"foo\", new Volcengine.Tls.AlarmNotifyGroupArgs\n        {\n            AlarmNotifyGroupName = \"tf-test\",\n            IamProjectName = \"yyy\",\n            NotifyTypes = \n            {\n                \"Trigger\",\n            },\n            Receivers = \n            {\n                new Volcengine.Tls.Inputs.AlarmNotifyGroupReceiverArgs\n                {\n                    EndTime = \"23:59:59\",\n                    ReceiverChannels = \n                    {\n                        \"Email\",\n                        \"Sms\",\n                    },\n                    ReceiverNames = \n                    {\n                        \"vke-qs\",\n                    },\n                    ReceiverType = \"User\",\n                    StartTime = \"23:00:00\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.NewAlarmNotifyGroup(ctx, \"foo\", \u0026tls.AlarmNotifyGroupArgs{\n\t\t\tAlarmNotifyGroupName: pulumi.String(\"tf-test\"),\n\t\t\tIamProjectName:       pulumi.String(\"yyy\"),\n\t\t\tNotifyTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Trigger\"),\n\t\t\t},\n\t\t\tReceivers: tls.AlarmNotifyGroupReceiverArray{\n\t\t\t\t\u0026tls.AlarmNotifyGroupReceiverArgs{\n\t\t\t\t\tEndTime: pulumi.String(\"23:59:59\"),\n\t\t\t\t\tReceiverChannels: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Email\"),\n\t\t\t\t\t\tpulumi.String(\"Sms\"),\n\t\t\t\t\t},\n\t\t\t\t\tReceiverNames: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"vke-qs\"),\n\t\t\t\t\t},\n\t\t\t\t\tReceiverType: pulumi.String(\"User\"),\n\t\t\t\t\tStartTime:    pulumi.String(\"23:00:00\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlarmNotifyGroup(\"foo\", AlarmNotifyGroupArgs.builder()        \n            .alarmNotifyGroupName(\"tf-test\")\n            .iamProjectName(\"yyy\")\n            .notifyTypes(\"Trigger\")\n            .receivers(AlarmNotifyGroupReceiverArgs.builder()\n                .endTime(\"23:59:59\")\n                .receiverChannels(                \n                    \"Email\",\n                    \"Sms\")\n                .receiverNames(\"vke-qs\")\n                .receiverType(\"User\")\n                .startTime(\"23:00:00\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:tls:AlarmNotifyGroup\n    properties:\n      alarmNotifyGroupName: tf-test\n      iamProjectName: yyy\n      notifyTypes:\n        - Trigger\n      receivers:\n        - endTime: 23:59:59\n          receiverChannels:\n            - Email\n            - Sms\n          receiverNames:\n            - vke-qs\n          receiverType: User\n          startTime: 23:00:00\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\ntls alarm notify group can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:tls/alarmNotifyGroup:AlarmNotifyGroup default fa************\n```\n\n ",
            "properties": {
                "alarmNotifyGroupId": {
                    "type": "string",
                    "description": "The alarm notification group id.\n"
                },
                "alarmNotifyGroupName": {
                    "type": "string",
                    "description": "The name of the notify group.\n"
                },
                "iamProjectName": {
                    "type": "string",
                    "description": "The name of the iam project.\n"
                },
                "notifyTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The notify type.\n"
                },
                "receivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/AlarmNotifyGroupReceiver:AlarmNotifyGroupReceiver"
                    },
                    "description": "List of IAM users to receive alerts.\n"
                }
            },
            "required": [
                "alarmNotifyGroupId",
                "alarmNotifyGroupName",
                "notifyTypes",
                "receivers"
            ],
            "inputProperties": {
                "alarmNotifyGroupName": {
                    "type": "string",
                    "description": "The name of the notify group.\n"
                },
                "iamProjectName": {
                    "type": "string",
                    "description": "The name of the iam project.\n"
                },
                "notifyTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The notify type.\n"
                },
                "receivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/AlarmNotifyGroupReceiver:AlarmNotifyGroupReceiver"
                    },
                    "description": "List of IAM users to receive alerts.\n"
                }
            },
            "requiredInputs": [
                "alarmNotifyGroupName",
                "notifyTypes",
                "receivers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlarmNotifyGroup resources.\n",
                "properties": {
                    "alarmNotifyGroupId": {
                        "type": "string",
                        "description": "The alarm notification group id.\n"
                    },
                    "alarmNotifyGroupName": {
                        "type": "string",
                        "description": "The name of the notify group.\n"
                    },
                    "iamProjectName": {
                        "type": "string",
                        "description": "The name of the iam project.\n"
                    },
                    "notifyTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The notify type.\n"
                    },
                    "receivers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/AlarmNotifyGroupReceiver:AlarmNotifyGroupReceiver"
                        },
                        "description": "List of IAM users to receive alerts.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tls/host:Host": {
            "description": "Provides a resource to manage tls host\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.tls.Host(\"foo\", {\n    hostGroupId: \"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\",\n    ip: \"10.180.50.18\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.tls.Host(\"foo\",\n    host_group_id=\"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\",\n    ip=\"10.180.50.18\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Tls.Host(\"foo\", new Volcengine.Tls.HostArgs\n        {\n            HostGroupId = \"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\",\n            Ip = \"10.180.50.18\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.NewHost(ctx, \"foo\", \u0026tls.HostArgs{\n\t\t\tHostGroupId: pulumi.String(\"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\"),\n\t\t\tIp:          pulumi.String(\"10.180.50.18\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Host(\"foo\", HostArgs.builder()        \n            .hostGroupId(\"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\")\n            .ip(\"10.180.50.18\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:tls:Host\n    properties:\n      hostGroupId: fbea6619-7b0c-40f3-ac7e-45c63e3f676e\n      ip: 10.180.50.18\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTls Host can be imported using the host_group_id:ip, e.g.\n\n```sh\n $ pulumi import volcengine:tls/host:Host default edf051ed-3c46-49:1.1.1.1\n```\n\n ",
            "properties": {
                "hostGroupId": {
                    "type": "string",
                    "description": "The id of host group.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip address.\n"
                }
            },
            "required": [
                "hostGroupId",
                "ip"
            ],
            "inputProperties": {
                "hostGroupId": {
                    "type": "string",
                    "description": "The id of host group.\n",
                    "willReplaceOnChanges": true
                },
                "ip": {
                    "type": "string",
                    "description": "The ip address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hostGroupId",
                "ip"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Host resources.\n",
                "properties": {
                    "hostGroupId": {
                        "type": "string",
                        "description": "The id of host group.\n",
                        "willReplaceOnChanges": true
                    },
                    "ip": {
                        "type": "string",
                        "description": "The ip address.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tls/hostGroup:HostGroup": {
            "description": "Provides a resource to manage tls host group\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.tls.HostGroup(\"foo\", {\n    autoUpdate: false,\n    hostGroupName: \"tfgroup\",\n    hostGroupType: \"Label\",\n    hostIdentifier: \"tf-controller\",\n    serviceLogging: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.tls.HostGroup(\"foo\",\n    auto_update=False,\n    host_group_name=\"tfgroup\",\n    host_group_type=\"Label\",\n    host_identifier=\"tf-controller\",\n    service_logging=False)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Tls.HostGroup(\"foo\", new Volcengine.Tls.HostGroupArgs\n        {\n            AutoUpdate = false,\n            HostGroupName = \"tfgroup\",\n            HostGroupType = \"Label\",\n            HostIdentifier = \"tf-controller\",\n            ServiceLogging = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.NewHostGroup(ctx, \"foo\", \u0026tls.HostGroupArgs{\n\t\t\tAutoUpdate:     pulumi.Bool(false),\n\t\t\tHostGroupName:  pulumi.String(\"tfgroup\"),\n\t\t\tHostGroupType:  pulumi.String(\"Label\"),\n\t\t\tHostIdentifier: pulumi.String(\"tf-controller\"),\n\t\t\tServiceLogging: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new HostGroup(\"foo\", HostGroupArgs.builder()        \n            .autoUpdate(false)\n            .hostGroupName(\"tfgroup\")\n            .hostGroupType(\"Label\")\n            .hostIdentifier(\"tf-controller\")\n            .serviceLogging(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:tls:HostGroup\n    properties:\n      autoUpdate: false\n      hostGroupName: tfgroup\n      hostGroupType: Label\n      hostIdentifier: tf-controller\n      serviceLogging: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTls Host Group can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:tls/hostGroup:HostGroup default edf052s21s*******dc15\n```\n\n ",
            "properties": {
                "abnormalHeartbeatStatusCount": {
                    "type": "integer",
                    "description": "The abnormal heartbeat status count of host.\n"
                },
                "agentLatestVersion": {
                    "type": "string",
                    "description": "The latest version of log collector.\n"
                },
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Whether enable auto update.\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of host group.\n"
                },
                "hostCount": {
                    "type": "integer",
                    "description": "The count of host.\n"
                },
                "hostGroupName": {
                    "type": "string",
                    "description": "The name of host group.\n"
                },
                "hostGroupType": {
                    "type": "string",
                    "description": "The type of host group. The value can be IP or Label.\n"
                },
                "hostIdentifier": {
                    "type": "string",
                    "description": "The identifier of host.\n"
                },
                "hostIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ip list of host group.\n"
                },
                "iamProjectName": {
                    "type": "string",
                    "description": "The project name of iam.\n"
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modify time of host group.\n"
                },
                "normalHeartbeatStatusCount": {
                    "type": "integer",
                    "description": "The normal heartbeat status count of host.\n"
                },
                "ruleCount": {
                    "type": "integer",
                    "description": "The rule count of host.\n"
                },
                "serviceLogging": {
                    "type": "boolean",
                    "description": "Whether enable service logging.\n"
                },
                "updateEndTime": {
                    "type": "string",
                    "description": "The update end time of log collector.\n"
                },
                "updateStartTime": {
                    "type": "string",
                    "description": "The update start time of log collector.\n"
                }
            },
            "required": [
                "abnormalHeartbeatStatusCount",
                "agentLatestVersion",
                "createTime",
                "hostCount",
                "hostGroupName",
                "hostGroupType",
                "hostIpLists",
                "modifyTime",
                "normalHeartbeatStatusCount",
                "ruleCount",
                "updateEndTime",
                "updateStartTime"
            ],
            "inputProperties": {
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Whether enable auto update.\n"
                },
                "hostGroupName": {
                    "type": "string",
                    "description": "The name of host group.\n"
                },
                "hostGroupType": {
                    "type": "string",
                    "description": "The type of host group. The value can be IP or Label.\n"
                },
                "hostIdentifier": {
                    "type": "string",
                    "description": "The identifier of host.\n"
                },
                "hostIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ip list of host group.\n"
                },
                "iamProjectName": {
                    "type": "string",
                    "description": "The project name of iam.\n",
                    "willReplaceOnChanges": true
                },
                "serviceLogging": {
                    "type": "boolean",
                    "description": "Whether enable service logging.\n"
                },
                "updateEndTime": {
                    "type": "string",
                    "description": "The update end time of log collector.\n"
                },
                "updateStartTime": {
                    "type": "string",
                    "description": "The update start time of log collector.\n"
                }
            },
            "requiredInputs": [
                "hostGroupName",
                "hostGroupType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostGroup resources.\n",
                "properties": {
                    "abnormalHeartbeatStatusCount": {
                        "type": "integer",
                        "description": "The abnormal heartbeat status count of host.\n"
                    },
                    "agentLatestVersion": {
                        "type": "string",
                        "description": "The latest version of log collector.\n"
                    },
                    "autoUpdate": {
                        "type": "boolean",
                        "description": "Whether enable auto update.\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The create time of host group.\n"
                    },
                    "hostCount": {
                        "type": "integer",
                        "description": "The count of host.\n"
                    },
                    "hostGroupName": {
                        "type": "string",
                        "description": "The name of host group.\n"
                    },
                    "hostGroupType": {
                        "type": "string",
                        "description": "The type of host group. The value can be IP or Label.\n"
                    },
                    "hostIdentifier": {
                        "type": "string",
                        "description": "The identifier of host.\n"
                    },
                    "hostIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ip list of host group.\n"
                    },
                    "iamProjectName": {
                        "type": "string",
                        "description": "The project name of iam.\n",
                        "willReplaceOnChanges": true
                    },
                    "modifyTime": {
                        "type": "string",
                        "description": "The modify time of host group.\n"
                    },
                    "normalHeartbeatStatusCount": {
                        "type": "integer",
                        "description": "The normal heartbeat status count of host.\n"
                    },
                    "ruleCount": {
                        "type": "integer",
                        "description": "The rule count of host.\n"
                    },
                    "serviceLogging": {
                        "type": "boolean",
                        "description": "Whether enable service logging.\n"
                    },
                    "updateEndTime": {
                        "type": "string",
                        "description": "The update end time of log collector.\n"
                    },
                    "updateStartTime": {
                        "type": "string",
                        "description": "The update start time of log collector.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tls/index:Index": {
            "description": "Provides a resource to manage tls index\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.tls.Index(\"foo\", {\n    fullText: {\n        caseSensitive: true,\n        delimiter: \"!\",\n        includeChinese: false,\n    },\n    keyValues: [\n        {\n            caseSensitive: true,\n            delimiter: \"!\",\n            includeChinese: false,\n            jsonKeys: [\n                {\n                    key: \"k2.k4\",\n                    valueType: \"text\",\n                },\n                {\n                    key: \"k3.k4\",\n                    valueType: \"long\",\n                },\n            ],\n            key: \"k1\",\n            sqlFlag: false,\n            valueType: \"json\",\n        },\n        {\n            caseSensitive: true,\n            delimiter: \"!\",\n            includeChinese: false,\n            key: \"k5\",\n            sqlFlag: false,\n            valueType: \"text\",\n        },\n    ],\n    topicId: \"65d67d34-c5b4-4ec8-b3a9-175d3366****\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.tls.Index(\"foo\",\n    full_text=volcengine.tls.IndexFullTextArgs(\n        case_sensitive=True,\n        delimiter=\"!\",\n        include_chinese=False,\n    ),\n    key_values=[\n        volcengine.tls.IndexKeyValueArgs(\n            case_sensitive=True,\n            delimiter=\"!\",\n            include_chinese=False,\n            json_keys=[\n                volcengine.tls.IndexKeyValueJsonKeyArgs(\n                    key=\"k2.k4\",\n                    value_type=\"text\",\n                ),\n                volcengine.tls.IndexKeyValueJsonKeyArgs(\n                    key=\"k3.k4\",\n                    value_type=\"long\",\n                ),\n            ],\n            key=\"k1\",\n            sql_flag=False,\n            value_type=\"json\",\n        ),\n        volcengine.tls.IndexKeyValueArgs(\n            case_sensitive=True,\n            delimiter=\"!\",\n            include_chinese=False,\n            key=\"k5\",\n            sql_flag=False,\n            value_type=\"text\",\n        ),\n    ],\n    topic_id=\"65d67d34-c5b4-4ec8-b3a9-175d3366****\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Tls.Index(\"foo\", new Volcengine.Tls.IndexArgs\n        {\n            FullText = new Volcengine.Tls.Inputs.IndexFullTextArgs\n            {\n                CaseSensitive = true,\n                Delimiter = \"!\",\n                IncludeChinese = false,\n            },\n            KeyValues = \n            {\n                new Volcengine.Tls.Inputs.IndexKeyValueArgs\n                {\n                    CaseSensitive = true,\n                    Delimiter = \"!\",\n                    IncludeChinese = false,\n                    JsonKeys = \n                    {\n                        new Volcengine.Tls.Inputs.IndexKeyValueJsonKeyArgs\n                        {\n                            Key = \"k2.k4\",\n                            ValueType = \"text\",\n                        },\n                        new Volcengine.Tls.Inputs.IndexKeyValueJsonKeyArgs\n                        {\n                            Key = \"k3.k4\",\n                            ValueType = \"long\",\n                        },\n                    },\n                    Key = \"k1\",\n                    SqlFlag = false,\n                    ValueType = \"json\",\n                },\n                new Volcengine.Tls.Inputs.IndexKeyValueArgs\n                {\n                    CaseSensitive = true,\n                    Delimiter = \"!\",\n                    IncludeChinese = false,\n                    Key = \"k5\",\n                    SqlFlag = false,\n                    ValueType = \"text\",\n                },\n            },\n            TopicId = \"65d67d34-c5b4-4ec8-b3a9-175d3366****\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.NewIndex(ctx, \"foo\", \u0026tls.IndexArgs{\n\t\t\tFullText: \u0026tls.IndexFullTextArgs{\n\t\t\t\tCaseSensitive:  pulumi.Bool(true),\n\t\t\t\tDelimiter:      pulumi.String(\"!\"),\n\t\t\t\tIncludeChinese: pulumi.Bool(false),\n\t\t\t},\n\t\t\tKeyValues: tls.IndexKeyValueArray{\n\t\t\t\t\u0026tls.IndexKeyValueArgs{\n\t\t\t\t\tCaseSensitive:  pulumi.Bool(true),\n\t\t\t\t\tDelimiter:      pulumi.String(\"!\"),\n\t\t\t\t\tIncludeChinese: pulumi.Bool(false),\n\t\t\t\t\tJsonKeys: tls.IndexKeyValueJsonKeyArray{\n\t\t\t\t\t\t\u0026tls.IndexKeyValueJsonKeyArgs{\n\t\t\t\t\t\t\tKey:       pulumi.String(\"k2.k4\"),\n\t\t\t\t\t\t\tValueType: pulumi.String(\"text\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026tls.IndexKeyValueJsonKeyArgs{\n\t\t\t\t\t\t\tKey:       pulumi.String(\"k3.k4\"),\n\t\t\t\t\t\t\tValueType: pulumi.String(\"long\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tKey:       pulumi.String(\"k1\"),\n\t\t\t\t\tSqlFlag:   pulumi.Bool(false),\n\t\t\t\t\tValueType: pulumi.String(\"json\"),\n\t\t\t\t},\n\t\t\t\t\u0026tls.IndexKeyValueArgs{\n\t\t\t\t\tCaseSensitive:  pulumi.Bool(true),\n\t\t\t\t\tDelimiter:      pulumi.String(\"!\"),\n\t\t\t\t\tIncludeChinese: pulumi.Bool(false),\n\t\t\t\t\tKey:            pulumi.String(\"k5\"),\n\t\t\t\t\tSqlFlag:        pulumi.Bool(false),\n\t\t\t\t\tValueType:      pulumi.String(\"text\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTopicId: pulumi.String(\"65d67d34-c5b4-4ec8-b3a9-175d3366****\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Index(\"foo\", IndexArgs.builder()        \n            .fullText(IndexFullTextArgs.builder()\n                .caseSensitive(true)\n                .delimiter(\"!\")\n                .includeChinese(false)\n                .build())\n            .keyValues(            \n                IndexKeyValueArgs.builder()\n                    .caseSensitive(true)\n                    .delimiter(\"!\")\n                    .includeChinese(false)\n                    .jsonKeys(                    \n                        IndexKeyValueJsonKeyArgs.builder()\n                            .key(\"k2.k4\")\n                            .valueType(\"text\")\n                            .build(),\n                        IndexKeyValueJsonKeyArgs.builder()\n                            .key(\"k3.k4\")\n                            .valueType(\"long\")\n                            .build())\n                    .key(\"k1\")\n                    .sqlFlag(false)\n                    .valueType(\"json\")\n                    .build(),\n                IndexKeyValueArgs.builder()\n                    .caseSensitive(true)\n                    .delimiter(\"!\")\n                    .includeChinese(false)\n                    .key(\"k5\")\n                    .sqlFlag(false)\n                    .valueType(\"text\")\n                    .build())\n            .topicId(\"65d67d34-c5b4-4ec8-b3a9-175d3366****\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:tls:Index\n    properties:\n      fullText:\n        caseSensitive: true\n        delimiter: '!'\n        includeChinese: false\n      keyValues:\n        - caseSensitive: true\n          delimiter: '!'\n          includeChinese: false\n          jsonKeys:\n            - key: k2.k4\n              valueType: text\n            - key: k3.k4\n              valueType: long\n          key: k1\n          sqlFlag: false\n          valueType: json\n        - caseSensitive: true\n          delimiter: '!'\n          includeChinese: false\n          key: k5\n          sqlFlag: false\n          valueType: text\n      topicId: 65d67d34-c5b4-4ec8-b3a9-175d3366****\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTls Index can be imported using the topic id, e.g.\n\n```sh\n $ pulumi import volcengine:tls/index:Index default index:edf051ed-3c46-49ba-9339-bea628fe****\n```\n\n ",
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The create time of the tls index.\n"
                },
                "fullText": {
                    "$ref": "#/types/volcengine:tls/IndexFullText:IndexFullText",
                    "description": "The full text info of the tls index.\n"
                },
                "keyValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/IndexKeyValue:IndexKeyValue"
                    },
                    "description": "The key value info of the tls index.\n"
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modify time of the tls index.\n"
                },
                "topicId": {
                    "type": "string",
                    "description": "The topic id of the tls index.\n"
                }
            },
            "required": [
                "createTime",
                "modifyTime",
                "topicId"
            ],
            "inputProperties": {
                "fullText": {
                    "$ref": "#/types/volcengine:tls/IndexFullText:IndexFullText",
                    "description": "The full text info of the tls index.\n"
                },
                "keyValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/IndexKeyValue:IndexKeyValue"
                    },
                    "description": "The key value info of the tls index.\n"
                },
                "topicId": {
                    "type": "string",
                    "description": "The topic id of the tls index.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "topicId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Index resources.\n",
                "properties": {
                    "createTime": {
                        "type": "string",
                        "description": "The create time of the tls index.\n"
                    },
                    "fullText": {
                        "$ref": "#/types/volcengine:tls/IndexFullText:IndexFullText",
                        "description": "The full text info of the tls index.\n"
                    },
                    "keyValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/IndexKeyValue:IndexKeyValue"
                        },
                        "description": "The key value info of the tls index.\n"
                    },
                    "modifyTime": {
                        "type": "string",
                        "description": "The modify time of the tls index.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The topic id of the tls index.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tls/kafkaConsumer:KafkaConsumer": {
            "description": "Provides a resource to manage tls kafka consumer\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.tls.KafkaConsumer(\"foo\", {\n    topicId: \"cfb5c08b-0c7a-44fa-8971-8afc12f1b123\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.tls.KafkaConsumer(\"foo\", topic_id=\"cfb5c08b-0c7a-44fa-8971-8afc12f1b123\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Tls.KafkaConsumer(\"foo\", new Volcengine.Tls.KafkaConsumerArgs\n        {\n            TopicId = \"cfb5c08b-0c7a-44fa-8971-8afc12f1b123\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.NewKafkaConsumer(ctx, \"foo\", \u0026tls.KafkaConsumerArgs{\n\t\t\tTopicId: pulumi.String(\"cfb5c08b-0c7a-44fa-8971-8afc12f1b123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new KafkaConsumer(\"foo\", KafkaConsumerArgs.builder()        \n            .topicId(\"cfb5c08b-0c7a-44fa-8971-8afc12f1b123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:tls:KafkaConsumer\n    properties:\n      topicId: cfb5c08b-0c7a-44fa-8971-8afc12f1b123\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTls Kafka Consumer can be imported using the kafka:topic_id, e.g.\n\n```sh\n $ pulumi import volcengine:tls/kafkaConsumer:KafkaConsumer default kafka:edf051ed-3c46-49ba-9339-bea628fedc15\n```\n\n ",
            "properties": {
                "allowConsume": {
                    "type": "boolean",
                    "description": "Whether allow consume.\n"
                },
                "consumeTopic": {
                    "type": "string",
                    "description": "The topic of consume.\n"
                },
                "topicId": {
                    "type": "string",
                    "description": "The id of topic.\n"
                }
            },
            "required": [
                "allowConsume",
                "consumeTopic",
                "topicId"
            ],
            "inputProperties": {
                "topicId": {
                    "type": "string",
                    "description": "The id of topic.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "topicId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KafkaConsumer resources.\n",
                "properties": {
                    "allowConsume": {
                        "type": "boolean",
                        "description": "Whether allow consume.\n"
                    },
                    "consumeTopic": {
                        "type": "string",
                        "description": "The topic of consume.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The id of topic.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tls/project:Project": {
            "description": "Provides a resource to manage tls project\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.tls.Project(\"foo\", {\n    description: \"tf-desc\",\n    iamProjectName: \"default\",\n    projectName: \"tf-test\",\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.tls.Project(\"foo\",\n    description=\"tf-desc\",\n    iam_project_name=\"default\",\n    project_name=\"tf-test\",\n    tags=[volcengine.tls.ProjectTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Tls.Project(\"foo\", new Volcengine.Tls.ProjectArgs\n        {\n            Description = \"tf-desc\",\n            IamProjectName = \"default\",\n            ProjectName = \"tf-test\",\n            Tags = \n            {\n                new Volcengine.Tls.Inputs.ProjectTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.NewProject(ctx, \"foo\", \u0026tls.ProjectArgs{\n\t\t\tDescription:    pulumi.String(\"tf-desc\"),\n\t\t\tIamProjectName: pulumi.String(\"default\"),\n\t\t\tProjectName:    pulumi.String(\"tf-test\"),\n\t\t\tTags: tls.ProjectTagArray{\n\t\t\t\t\u0026tls.ProjectTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Project(\"foo\", ProjectArgs.builder()        \n            .description(\"tf-desc\")\n            .iamProjectName(\"default\")\n            .projectName(\"tf-test\")\n            .tags(ProjectTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:tls:Project\n    properties:\n      description: tf-desc\n      iamProjectName: default\n      projectName: tf-test\n      tags:\n        - key: k1\n          value: v1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTls Project can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:tls/project:Project default e020c978-4f05-40e1-9167-0113d3ef****\n```\n\n ",
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The create time of the tls project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the tls project.\n"
                },
                "iamProjectName": {
                    "type": "string",
                    "description": "The IAM project name of the tls project.\n"
                },
                "innerNetDomain": {
                    "type": "string",
                    "description": "The inner net domain of the tls project.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The name of the tls project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/ProjectTag:ProjectTag"
                    },
                    "description": "Tags.\n"
                },
                "topicCount": {
                    "type": "integer",
                    "description": "The count of topics in the tls project.\n"
                }
            },
            "required": [
                "createTime",
                "description",
                "iamProjectName",
                "innerNetDomain",
                "projectName",
                "topicCount"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the tls project.\n"
                },
                "iamProjectName": {
                    "type": "string",
                    "description": "The IAM project name of the tls project.\n",
                    "willReplaceOnChanges": true
                },
                "projectName": {
                    "type": "string",
                    "description": "The name of the tls project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/ProjectTag:ProjectTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "requiredInputs": [
                "projectName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "createTime": {
                        "type": "string",
                        "description": "The create time of the tls project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the tls project.\n"
                    },
                    "iamProjectName": {
                        "type": "string",
                        "description": "The IAM project name of the tls project.\n",
                        "willReplaceOnChanges": true
                    },
                    "innerNetDomain": {
                        "type": "string",
                        "description": "The inner net domain of the tls project.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The name of the tls project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/ProjectTag:ProjectTag"
                        },
                        "description": "Tags.\n"
                    },
                    "topicCount": {
                        "type": "integer",
                        "description": "The count of topics in the tls project.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tls/rule:Rule": {
            "description": "Provides a resource to manage tls rule\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst foo = new volcengine.tls.Rule(\"foo\", {\n    topicId: \"7bfa2cdc-4f8b-4cf9-b4c9-0ed05c33349f\",\n    ruleName: \"test\",\n    logType: \"minimalist_log\",\n    logSample: \"2018-05-22 15:35:53.850 INFO XXXX\",\n    inputType: 1,\n    userDefineRule: {\n        enableRawLog: false,\n        tailFiles: true,\n        shardHashKey: {\n            hashKey: \"3C\",\n        },\n        plugin: {\n            processors: [\n                JSON.stringify({\n                    json: {\n                        field: \"__content__\",\n                        trim_keys: {\n                            mode: \"all\",\n                            chars: \"#\",\n                        },\n                        trim_values: {\n                            mode: \"all\",\n                            chars: \"#t\",\n                        },\n                        allow_overwrite_keys: true,\n                        allow_empty_values: true,\n                    },\n                }),\n                JSON.stringify({\n                    json: {\n                        field: \"__content__\",\n                        trim_keys: {\n                            mode: \"all\",\n                            chars: \"#xx\",\n                        },\n                        trim_values: {\n                            mode: \"all\",\n                            chars: \"#txxxt\",\n                        },\n                        allow_overwrite_keys: true,\n                        allow_empty_values: true,\n                    },\n                }),\n            ],\n        },\n        advanced: {\n            closeInactive: 10,\n            closeRemoved: false,\n            closeRenamed: false,\n            closeEof: false,\n            closeTimeout: 1,\n        },\n    },\n    containerRule: {\n        stream: \"all\",\n        containerNameRegex: \".*test.*\",\n        includeContainerLabelRegex: {\n            Key1: \"Value12\",\n            Key2: \"Value23\",\n        },\n        excludeContainerLabelRegex: {\n            Key1: \"Value12\",\n            Key2: \"Value22\",\n        },\n        includeContainerEnvRegex: {\n            Key1: \"Value1\",\n            Key2: \"Value2\",\n        },\n        excludeContainerEnvRegex: {\n            Key1: \"Value1\",\n            Key2: \"Value2\",\n        },\n        envTag: {\n            Key1: \"Value1\",\n            Key2: \"Value2\",\n        },\n        kubernetesRule: {\n            namespaceNameRegex: \".*test.*\",\n            workloadType: \"Deployment\",\n            workloadNameRegex: \".*test.*\",\n            includePodLabelRegex: {\n                Key1: \"Value1\",\n                Key2: \"Value2\",\n            },\n            excludePodLabelRegex: {\n                Key1: \"Value1\",\n                Key2: \"Value2\",\n            },\n            podNameRegex: \".*test.*\",\n            labelTag: {\n                Key1: \"Value1\",\n                Key2: \"Value2\",\n            },\n            annotationTag: {\n                Key1: \"Value1\",\n                Key2: \"Value2\",\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.tls.Rule(\"foo\",\n    topic_id=\"7bfa2cdc-4f8b-4cf9-b4c9-0ed05c33349f\",\n    rule_name=\"test\",\n    log_type=\"minimalist_log\",\n    log_sample=\"2018-05-22 15:35:53.850 INFO XXXX\",\n    input_type=1,\n    user_define_rule=volcengine.tls.RuleUserDefineRuleArgs(\n        enable_raw_log=False,\n        tail_files=True,\n        shard_hash_key=volcengine.tls.RuleUserDefineRuleShardHashKeyArgs(\n            hash_key=\"3C\",\n        ),\n        plugin=volcengine.tls.RuleUserDefineRulePluginArgs(\n            processors=[\n                json.dumps({\n                    \"json\": {\n                        \"field\": \"__content__\",\n                        \"trim_keys\": {\n                            \"mode\": \"all\",\n                            \"chars\": \"#\",\n                        },\n                        \"trim_values\": {\n                            \"mode\": \"all\",\n                            \"chars\": \"#t\",\n                        },\n                        \"allow_overwrite_keys\": True,\n                        \"allow_empty_values\": True,\n                    },\n                }),\n                json.dumps({\n                    \"json\": {\n                        \"field\": \"__content__\",\n                        \"trim_keys\": {\n                            \"mode\": \"all\",\n                            \"chars\": \"#xx\",\n                        },\n                        \"trim_values\": {\n                            \"mode\": \"all\",\n                            \"chars\": \"#txxxt\",\n                        },\n                        \"allow_overwrite_keys\": True,\n                        \"allow_empty_values\": True,\n                    },\n                }),\n            ],\n        ),\n        advanced=volcengine.tls.RuleUserDefineRuleAdvancedArgs(\n            close_inactive=10,\n            close_removed=False,\n            close_renamed=False,\n            close_eof=False,\n            close_timeout=1,\n        ),\n    ),\n    container_rule=volcengine.tls.RuleContainerRuleArgs(\n        stream=\"all\",\n        container_name_regex=\".*test.*\",\n        include_container_label_regex={\n            \"Key1\": \"Value12\",\n            \"Key2\": \"Value23\",\n        },\n        exclude_container_label_regex={\n            \"Key1\": \"Value12\",\n            \"Key2\": \"Value22\",\n        },\n        include_container_env_regex={\n            \"Key1\": \"Value1\",\n            \"Key2\": \"Value2\",\n        },\n        exclude_container_env_regex={\n            \"Key1\": \"Value1\",\n            \"Key2\": \"Value2\",\n        },\n        env_tag={\n            \"Key1\": \"Value1\",\n            \"Key2\": \"Value2\",\n        },\n        kubernetes_rule=volcengine.tls.RuleContainerRuleKubernetesRuleArgs(\n            namespace_name_regex=\".*test.*\",\n            workload_type=\"Deployment\",\n            workload_name_regex=\".*test.*\",\n            include_pod_label_regex={\n                \"Key1\": \"Value1\",\n                \"Key2\": \"Value2\",\n            },\n            exclude_pod_label_regex={\n                \"Key1\": \"Value1\",\n                \"Key2\": \"Value2\",\n            },\n            pod_name_regex=\".*test.*\",\n            label_tag={\n                \"Key1\": \"Value1\",\n                \"Key2\": \"Value2\",\n            },\n            annotation_tag={\n                \"Key1\": \"Value1\",\n                \"Key2\": \"Value2\",\n            },\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Tls.Rule(\"foo\", new Volcengine.Tls.RuleArgs\n        {\n            TopicId = \"7bfa2cdc-4f8b-4cf9-b4c9-0ed05c33349f\",\n            RuleName = \"test\",\n            LogType = \"minimalist_log\",\n            LogSample = \"2018-05-22 15:35:53.850 INFO XXXX\",\n            InputType = 1,\n            UserDefineRule = new Volcengine.Tls.Inputs.RuleUserDefineRuleArgs\n            {\n                EnableRawLog = false,\n                TailFiles = true,\n                ShardHashKey = new Volcengine.Tls.Inputs.RuleUserDefineRuleShardHashKeyArgs\n                {\n                    HashKey = \"3C\",\n                },\n                Plugin = new Volcengine.Tls.Inputs.RuleUserDefineRulePluginArgs\n                {\n                    Processors = \n                    {\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"json\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"field\", \"__content__\" },\n                                { \"trim_keys\", new Dictionary\u003cstring, object?\u003e\n                                {\n                                    { \"mode\", \"all\" },\n                                    { \"chars\", \"#\" },\n                                } },\n                                { \"trim_values\", new Dictionary\u003cstring, object?\u003e\n                                {\n                                    { \"mode\", \"all\" },\n                                    { \"chars\", \"#t\" },\n                                } },\n                                { \"allow_overwrite_keys\", true },\n                                { \"allow_empty_values\", true },\n                            } },\n                        }),\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"json\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"field\", \"__content__\" },\n                                { \"trim_keys\", new Dictionary\u003cstring, object?\u003e\n                                {\n                                    { \"mode\", \"all\" },\n                                    { \"chars\", \"#xx\" },\n                                } },\n                                { \"trim_values\", new Dictionary\u003cstring, object?\u003e\n                                {\n                                    { \"mode\", \"all\" },\n                                    { \"chars\", \"#txxxt\" },\n                                } },\n                                { \"allow_overwrite_keys\", true },\n                                { \"allow_empty_values\", true },\n                            } },\n                        }),\n                    },\n                },\n                Advanced = new Volcengine.Tls.Inputs.RuleUserDefineRuleAdvancedArgs\n                {\n                    CloseInactive = 10,\n                    CloseRemoved = false,\n                    CloseRenamed = false,\n                    CloseEof = false,\n                    CloseTimeout = 1,\n                },\n            },\n            ContainerRule = new Volcengine.Tls.Inputs.RuleContainerRuleArgs\n            {\n                Stream = \"all\",\n                ContainerNameRegex = \".*test.*\",\n                IncludeContainerLabelRegex = \n                {\n                    { \"Key1\", \"Value12\" },\n                    { \"Key2\", \"Value23\" },\n                },\n                ExcludeContainerLabelRegex = \n                {\n                    { \"Key1\", \"Value12\" },\n                    { \"Key2\", \"Value22\" },\n                },\n                IncludeContainerEnvRegex = \n                {\n                    { \"Key1\", \"Value1\" },\n                    { \"Key2\", \"Value2\" },\n                },\n                ExcludeContainerEnvRegex = \n                {\n                    { \"Key1\", \"Value1\" },\n                    { \"Key2\", \"Value2\" },\n                },\n                EnvTag = \n                {\n                    { \"Key1\", \"Value1\" },\n                    { \"Key2\", \"Value2\" },\n                },\n                KubernetesRule = new Volcengine.Tls.Inputs.RuleContainerRuleKubernetesRuleArgs\n                {\n                    NamespaceNameRegex = \".*test.*\",\n                    WorkloadType = \"Deployment\",\n                    WorkloadNameRegex = \".*test.*\",\n                    IncludePodLabelRegex = \n                    {\n                        { \"Key1\", \"Value1\" },\n                        { \"Key2\", \"Value2\" },\n                    },\n                    ExcludePodLabelRegex = \n                    {\n                        { \"Key1\", \"Value1\" },\n                        { \"Key2\", \"Value2\" },\n                    },\n                    PodNameRegex = \".*test.*\",\n                    LabelTag = \n                    {\n                        { \"Key1\", \"Value1\" },\n                        { \"Key2\", \"Value2\" },\n                    },\n                    AnnotationTag = \n                    {\n                        { \"Key1\", \"Value1\" },\n                        { \"Key2\", \"Value2\" },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"json\": map[string]interface{}{\n\t\t\t\t\"field\": \"__content__\",\n\t\t\t\t\"trim_keys\": map[string]interface{}{\n\t\t\t\t\t\"mode\":  \"all\",\n\t\t\t\t\t\"chars\": \"#\",\n\t\t\t\t},\n\t\t\t\t\"trim_values\": map[string]interface{}{\n\t\t\t\t\t\"mode\":  \"all\",\n\t\t\t\t\t\"chars\": \"#t\",\n\t\t\t\t},\n\t\t\t\t\"allow_overwrite_keys\": true,\n\t\t\t\t\"allow_empty_values\":   true,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"json\": map[string]interface{}{\n\t\t\t\t\"field\": \"__content__\",\n\t\t\t\t\"trim_keys\": map[string]interface{}{\n\t\t\t\t\t\"mode\":  \"all\",\n\t\t\t\t\t\"chars\": \"#xx\",\n\t\t\t\t},\n\t\t\t\t\"trim_values\": map[string]interface{}{\n\t\t\t\t\t\"mode\":  \"all\",\n\t\t\t\t\t\"chars\": \"#txxxt\",\n\t\t\t\t},\n\t\t\t\t\"allow_overwrite_keys\": true,\n\t\t\t\t\"allow_empty_values\":   true,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err := tls.NewRule(ctx, \"foo\", \u0026tls.RuleArgs{\n\t\t\tTopicId:   pulumi.String(\"7bfa2cdc-4f8b-4cf9-b4c9-0ed05c33349f\"),\n\t\t\tRuleName:  pulumi.String(\"test\"),\n\t\t\tLogType:   pulumi.String(\"minimalist_log\"),\n\t\t\tLogSample: pulumi.String(\"2018-05-22 15:35:53.850 INFO XXXX\"),\n\t\t\tInputType: pulumi.Int(1),\n\t\t\tUserDefineRule: \u0026tls.RuleUserDefineRuleArgs{\n\t\t\t\tEnableRawLog: pulumi.Bool(false),\n\t\t\t\tTailFiles:    pulumi.Bool(true),\n\t\t\t\tShardHashKey: \u0026tls.RuleUserDefineRuleShardHashKeyArgs{\n\t\t\t\t\tHashKey: pulumi.String(\"3C\"),\n\t\t\t\t},\n\t\t\t\tPlugin: \u0026tls.RuleUserDefineRulePluginArgs{\n\t\t\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(json0),\n\t\t\t\t\t\tpulumi.String(json1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tAdvanced: \u0026tls.RuleUserDefineRuleAdvancedArgs{\n\t\t\t\t\tCloseInactive: pulumi.Int(10),\n\t\t\t\t\tCloseRemoved:  pulumi.Bool(false),\n\t\t\t\t\tCloseRenamed:  pulumi.Bool(false),\n\t\t\t\t\tCloseEof:      pulumi.Bool(false),\n\t\t\t\t\tCloseTimeout:  pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tContainerRule: \u0026tls.RuleContainerRuleArgs{\n\t\t\t\tStream:             pulumi.String(\"all\"),\n\t\t\t\tContainerNameRegex: pulumi.String(\".*test.*\"),\n\t\t\t\tIncludeContainerLabelRegex: pulumi.StringMap{\n\t\t\t\t\t\"Key1\": pulumi.String(\"Value12\"),\n\t\t\t\t\t\"Key2\": pulumi.String(\"Value23\"),\n\t\t\t\t},\n\t\t\t\tExcludeContainerLabelRegex: pulumi.StringMap{\n\t\t\t\t\t\"Key1\": pulumi.String(\"Value12\"),\n\t\t\t\t\t\"Key2\": pulumi.String(\"Value22\"),\n\t\t\t\t},\n\t\t\t\tIncludeContainerEnvRegex: pulumi.StringMap{\n\t\t\t\t\t\"Key1\": pulumi.String(\"Value1\"),\n\t\t\t\t\t\"Key2\": pulumi.String(\"Value2\"),\n\t\t\t\t},\n\t\t\t\tExcludeContainerEnvRegex: pulumi.StringMap{\n\t\t\t\t\t\"Key1\": pulumi.String(\"Value1\"),\n\t\t\t\t\t\"Key2\": pulumi.String(\"Value2\"),\n\t\t\t\t},\n\t\t\t\tEnvTag: pulumi.StringMap{\n\t\t\t\t\t\"Key1\": pulumi.String(\"Value1\"),\n\t\t\t\t\t\"Key2\": pulumi.String(\"Value2\"),\n\t\t\t\t},\n\t\t\t\tKubernetesRule: \u0026tls.RuleContainerRuleKubernetesRuleArgs{\n\t\t\t\t\tNamespaceNameRegex: pulumi.String(\".*test.*\"),\n\t\t\t\t\tWorkloadType:       pulumi.String(\"Deployment\"),\n\t\t\t\t\tWorkloadNameRegex:  pulumi.String(\".*test.*\"),\n\t\t\t\t\tIncludePodLabelRegex: pulumi.StringMap{\n\t\t\t\t\t\t\"Key1\": pulumi.String(\"Value1\"),\n\t\t\t\t\t\t\"Key2\": pulumi.String(\"Value2\"),\n\t\t\t\t\t},\n\t\t\t\t\tExcludePodLabelRegex: pulumi.StringMap{\n\t\t\t\t\t\t\"Key1\": pulumi.String(\"Value1\"),\n\t\t\t\t\t\t\"Key2\": pulumi.String(\"Value2\"),\n\t\t\t\t\t},\n\t\t\t\t\tPodNameRegex: pulumi.String(\".*test.*\"),\n\t\t\t\t\tLabelTag: pulumi.StringMap{\n\t\t\t\t\t\t\"Key1\": pulumi.String(\"Value1\"),\n\t\t\t\t\t\t\"Key2\": pulumi.String(\"Value2\"),\n\t\t\t\t\t},\n\t\t\t\t\tAnnotationTag: pulumi.StringMap{\n\t\t\t\t\t\t\"Key1\": pulumi.String(\"Value1\"),\n\t\t\t\t\t\t\"Key2\": pulumi.String(\"Value2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport static com.pulumi.codegen.internal.Serialization.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Rule(\"foo\", RuleArgs.builder()        \n            .topicId(\"7bfa2cdc-4f8b-4cf9-b4c9-0ed05c33349f\")\n            .ruleName(\"test\")\n            .logType(\"minimalist_log\")\n            .logSample(\"2018-05-22 15:35:53.850 INFO XXXX\")\n            .inputType(1)\n            .userDefineRule(RuleUserDefineRuleArgs.builder()\n                .enableRawLog(false)\n                .tailFiles(true)\n                .shardHashKey(RuleUserDefineRuleShardHashKeyArgs.builder()\n                    .hashKey(\"3C\")\n                    .build())\n                .plugin(RuleUserDefineRulePluginArgs.builder()\n                    .processors(                    \n                        serializeJson(\n                            jsonObject(\n                                jsonProperty(\"json\", jsonObject(\n                                    jsonProperty(\"field\", \"__content__\"),\n                                    jsonProperty(\"trim_keys\", jsonObject(\n                                        jsonProperty(\"mode\", \"all\"),\n                                        jsonProperty(\"chars\", \"#\")\n                                    )),\n                                    jsonProperty(\"trim_values\", jsonObject(\n                                        jsonProperty(\"mode\", \"all\"),\n                                        jsonProperty(\"chars\", \"#t\")\n                                    )),\n                                    jsonProperty(\"allow_overwrite_keys\", true),\n                                    jsonProperty(\"allow_empty_values\", true)\n                                ))\n                            )),\n                        serializeJson(\n                            jsonObject(\n                                jsonProperty(\"json\", jsonObject(\n                                    jsonProperty(\"field\", \"__content__\"),\n                                    jsonProperty(\"trim_keys\", jsonObject(\n                                        jsonProperty(\"mode\", \"all\"),\n                                        jsonProperty(\"chars\", \"#xx\")\n                                    )),\n                                    jsonProperty(\"trim_values\", jsonObject(\n                                        jsonProperty(\"mode\", \"all\"),\n                                        jsonProperty(\"chars\", \"#txxxt\")\n                                    )),\n                                    jsonProperty(\"allow_overwrite_keys\", true),\n                                    jsonProperty(\"allow_empty_values\", true)\n                                ))\n                            )))\n                    .build())\n                .advanced(RuleUserDefineRuleAdvancedArgs.builder()\n                    .closeInactive(10)\n                    .closeRemoved(false)\n                    .closeRenamed(false)\n                    .closeEof(false)\n                    .closeTimeout(1)\n                    .build())\n                .build())\n            .containerRule(RuleContainerRuleArgs.builder()\n                .stream(\"all\")\n                .containerNameRegex(\".*test.*\")\n                .includeContainerLabelRegex(Map.ofEntries(\n                    Map.entry(\"Key1\", \"Value12\"),\n                    Map.entry(\"Key2\", \"Value23\")\n                ))\n                .excludeContainerLabelRegex(Map.ofEntries(\n                    Map.entry(\"Key1\", \"Value12\"),\n                    Map.entry(\"Key2\", \"Value22\")\n                ))\n                .includeContainerEnvRegex(Map.ofEntries(\n                    Map.entry(\"Key1\", \"Value1\"),\n                    Map.entry(\"Key2\", \"Value2\")\n                ))\n                .excludeContainerEnvRegex(Map.ofEntries(\n                    Map.entry(\"Key1\", \"Value1\"),\n                    Map.entry(\"Key2\", \"Value2\")\n                ))\n                .envTag(Map.ofEntries(\n                    Map.entry(\"Key1\", \"Value1\"),\n                    Map.entry(\"Key2\", \"Value2\")\n                ))\n                .kubernetesRule(RuleContainerRuleKubernetesRuleArgs.builder()\n                    .namespaceNameRegex(\".*test.*\")\n                    .workloadType(\"Deployment\")\n                    .workloadNameRegex(\".*test.*\")\n                    .includePodLabelRegex(Map.ofEntries(\n                        Map.entry(\"Key1\", \"Value1\"),\n                        Map.entry(\"Key2\", \"Value2\")\n                    ))\n                    .excludePodLabelRegex(Map.ofEntries(\n                        Map.entry(\"Key1\", \"Value1\"),\n                        Map.entry(\"Key2\", \"Value2\")\n                    ))\n                    .podNameRegex(\".*test.*\")\n                    .labelTag(Map.ofEntries(\n                        Map.entry(\"Key1\", \"Value1\"),\n                        Map.entry(\"Key2\", \"Value2\")\n                    ))\n                    .annotationTag(Map.ofEntries(\n                        Map.entry(\"Key1\", \"Value1\"),\n                        Map.entry(\"Key2\", \"Value2\")\n                    ))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:tls:Rule\n    properties:\n      topicId: 7bfa2cdc-4f8b-4cf9-b4c9-0ed05c33349f\n      ruleName: test\n      logType: minimalist_log\n      logSample: 2018-05-22 15:35:53.850 INFO XXXX\n      inputType: 1\n      userDefineRule:\n        enableRawLog: false\n        tailFiles: true\n        shardHashKey:\n          hashKey: 3C\n        plugin:\n          processors:\n            - Fn::ToJSON:\n                json:\n                  field: __content__\n                  trim_keys:\n                    mode: all\n                    chars: '#'\n                  trim_values:\n                    mode: all\n                    chars: '#t'\n                  allow_overwrite_keys: true\n                  allow_empty_values: true\n            - Fn::ToJSON:\n                json:\n                  field: __content__\n                  trim_keys:\n                    mode: all\n                    chars: '#xx'\n                  trim_values:\n                    mode: all\n                    chars: '#txxxt'\n                  allow_overwrite_keys: true\n                  allow_empty_values: true\n        advanced:\n          closeInactive: 10\n          closeRemoved: false\n          closeRenamed: false\n          closeEof: false\n          closeTimeout: 1\n      containerRule:\n        stream: all\n        containerNameRegex: .*test.*\n        includeContainerLabelRegex:\n          Key1: Value12\n          Key2: Value23\n        excludeContainerLabelRegex:\n          Key1: Value12\n          Key2: Value22\n        includeContainerEnvRegex:\n          Key1: Value1\n          Key2: Value2\n        excludeContainerEnvRegex:\n          Key1: Value1\n          Key2: Value2\n        envTag:\n          Key1: Value1\n          Key2: Value2\n        kubernetesRule:\n          namespaceNameRegex: .*test.*\n          workloadType: Deployment\n          workloadNameRegex: .*test.*\n          includePodLabelRegex:\n            Key1: Value1\n            Key2: Value2\n          excludePodLabelRegex:\n            Key1: Value1\n            Key2: Value2\n          podNameRegex: .*test.*\n          labelTag:\n            Key1: Value1\n            Key2: Value2\n          annotationTag:\n            Key1: Value1\n            Key2: Value2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\ntls rule can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:tls/rule:Rule default fa************\n```\n\n ",
            "properties": {
                "containerRule": {
                    "$ref": "#/types/volcengine:tls/RuleContainerRule:RuleContainerRule",
                    "description": "Container collection rules.\n"
                },
                "excludePaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleExcludePath:RuleExcludePath"
                    },
                    "description": "Collect the blacklist list.\n"
                },
                "extractRule": {
                    "$ref": "#/types/volcengine:tls/RuleExtractRule:RuleExtractRule",
                    "description": "The extract rule.\n"
                },
                "inputType": {
                    "type": "integer",
                    "description": "The type of the collection configuration. Validate value can be `0`(host log file), `1`(K8s container standard output) and `2`(Log files in the K8s container).\n"
                },
                "logSample": {
                    "type": "string",
                    "description": "The sample of the log.\n"
                },
                "logType": {
                    "type": "string",
                    "description": "The log type. The value can be one of the following: `minimalist_log`, `json_log`, `delimiter_log`, `multiline_log`, `fullregex_log`.\n"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Collection path list.\n"
                },
                "ruleId": {
                    "type": "string",
                    "description": "The id of the rule.\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "The name of the collection configuration.\n"
                },
                "topicId": {
                    "type": "string",
                    "description": "The ID of the log topic to which the collection configuration belongs.\n"
                },
                "userDefineRule": {
                    "$ref": "#/types/volcengine:tls/RuleUserDefineRule:RuleUserDefineRule",
                    "description": "User-defined collection rules.\n"
                }
            },
            "required": [
                "extractRule",
                "ruleId",
                "ruleName",
                "topicId"
            ],
            "inputProperties": {
                "containerRule": {
                    "$ref": "#/types/volcengine:tls/RuleContainerRule:RuleContainerRule",
                    "description": "Container collection rules.\n"
                },
                "excludePaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/RuleExcludePath:RuleExcludePath"
                    },
                    "description": "Collect the blacklist list.\n"
                },
                "extractRule": {
                    "$ref": "#/types/volcengine:tls/RuleExtractRule:RuleExtractRule",
                    "description": "The extract rule.\n"
                },
                "inputType": {
                    "type": "integer",
                    "description": "The type of the collection configuration. Validate value can be `0`(host log file), `1`(K8s container standard output) and `2`(Log files in the K8s container).\n"
                },
                "logSample": {
                    "type": "string",
                    "description": "The sample of the log.\n"
                },
                "logType": {
                    "type": "string",
                    "description": "The log type. The value can be one of the following: `minimalist_log`, `json_log`, `delimiter_log`, `multiline_log`, `fullregex_log`.\n"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Collection path list.\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "The name of the collection configuration.\n"
                },
                "topicId": {
                    "type": "string",
                    "description": "The ID of the log topic to which the collection configuration belongs.\n",
                    "willReplaceOnChanges": true
                },
                "userDefineRule": {
                    "$ref": "#/types/volcengine:tls/RuleUserDefineRule:RuleUserDefineRule",
                    "description": "User-defined collection rules.\n"
                }
            },
            "requiredInputs": [
                "ruleName",
                "topicId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "containerRule": {
                        "$ref": "#/types/volcengine:tls/RuleContainerRule:RuleContainerRule",
                        "description": "Container collection rules.\n"
                    },
                    "excludePaths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/RuleExcludePath:RuleExcludePath"
                        },
                        "description": "Collect the blacklist list.\n"
                    },
                    "extractRule": {
                        "$ref": "#/types/volcengine:tls/RuleExtractRule:RuleExtractRule",
                        "description": "The extract rule.\n"
                    },
                    "inputType": {
                        "type": "integer",
                        "description": "The type of the collection configuration. Validate value can be `0`(host log file), `1`(K8s container standard output) and `2`(Log files in the K8s container).\n"
                    },
                    "logSample": {
                        "type": "string",
                        "description": "The sample of the log.\n"
                    },
                    "logType": {
                        "type": "string",
                        "description": "The log type. The value can be one of the following: `minimalist_log`, `json_log`, `delimiter_log`, `multiline_log`, `fullregex_log`.\n"
                    },
                    "paths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Collection path list.\n"
                    },
                    "ruleId": {
                        "type": "string",
                        "description": "The id of the rule.\n"
                    },
                    "ruleName": {
                        "type": "string",
                        "description": "The name of the collection configuration.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The ID of the log topic to which the collection configuration belongs.\n",
                        "willReplaceOnChanges": true
                    },
                    "userDefineRule": {
                        "$ref": "#/types/volcengine:tls/RuleUserDefineRule:RuleUserDefineRule",
                        "description": "User-defined collection rules.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tls/ruleApplier:RuleApplier": {
            "description": "Provides a resource to manage tls rule applier\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.tls.RuleApplier(\"foo\", {\n    hostGroupId: \"a2a9e8c5-9835-434f-b866-2c1cfa82887d\",\n    ruleId: \"25104b0f-28b7-4a5c-8339-7f9c431d77c8\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.tls.RuleApplier(\"foo\",\n    host_group_id=\"a2a9e8c5-9835-434f-b866-2c1cfa82887d\",\n    rule_id=\"25104b0f-28b7-4a5c-8339-7f9c431d77c8\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Tls.RuleApplier(\"foo\", new Volcengine.Tls.RuleApplierArgs\n        {\n            HostGroupId = \"a2a9e8c5-9835-434f-b866-2c1cfa82887d\",\n            RuleId = \"25104b0f-28b7-4a5c-8339-7f9c431d77c8\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.NewRuleApplier(ctx, \"foo\", \u0026tls.RuleApplierArgs{\n\t\t\tHostGroupId: pulumi.String(\"a2a9e8c5-9835-434f-b866-2c1cfa82887d\"),\n\t\t\tRuleId:      pulumi.String(\"25104b0f-28b7-4a5c-8339-7f9c431d77c8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new RuleApplier(\"foo\", RuleApplierArgs.builder()        \n            .hostGroupId(\"a2a9e8c5-9835-434f-b866-2c1cfa82887d\")\n            .ruleId(\"25104b0f-28b7-4a5c-8339-7f9c431d77c8\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:tls:RuleApplier\n    properties:\n      hostGroupId: a2a9e8c5-9835-434f-b866-2c1cfa82887d\n      ruleId: 25104b0f-28b7-4a5c-8339-7f9c431d77c8\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\ntls rule applier can be imported using the rule id and host group id, e.g.\n\n```sh\n $ pulumi import volcengine:tls/ruleApplier:RuleApplier default fa************:bcb*******\n```\n\n ",
            "properties": {
                "hostGroupId": {
                    "type": "string",
                    "description": "The id of the host group.\n"
                },
                "ruleId": {
                    "type": "string",
                    "description": "The id of the rule.\n"
                }
            },
            "required": [
                "hostGroupId",
                "ruleId"
            ],
            "inputProperties": {
                "hostGroupId": {
                    "type": "string",
                    "description": "The id of the host group.\n",
                    "willReplaceOnChanges": true
                },
                "ruleId": {
                    "type": "string",
                    "description": "The id of the rule.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hostGroupId",
                "ruleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleApplier resources.\n",
                "properties": {
                    "hostGroupId": {
                        "type": "string",
                        "description": "The id of the host group.\n",
                        "willReplaceOnChanges": true
                    },
                    "ruleId": {
                        "type": "string",
                        "description": "The id of the rule.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tls/topic:Topic": {
            "description": "Provides a resource to manage tls topic\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.tls.Topic(\"foo\", {\n    autoSplit: true,\n    description: \"test\",\n    enableTracking: true,\n    maxSplitShard: 10,\n    projectId: \"e020c978-4f05-40e1-9167-0113d3ef****\",\n    shardCount: 2,\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n    timeFormat: \"%Y-%m-%dT%H:%M:%S,%f\",\n    timeKey: \"request_time\",\n    topicName: \"tf-test-topic\",\n    ttl: 10,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.tls.Topic(\"foo\",\n    auto_split=True,\n    description=\"test\",\n    enable_tracking=True,\n    max_split_shard=10,\n    project_id=\"e020c978-4f05-40e1-9167-0113d3ef****\",\n    shard_count=2,\n    tags=[volcengine.tls.TopicTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )],\n    time_format=\"%Y-%m-%dT%H:%M:%S,%f\",\n    time_key=\"request_time\",\n    topic_name=\"tf-test-topic\",\n    ttl=10)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Tls.Topic(\"foo\", new Volcengine.Tls.TopicArgs\n        {\n            AutoSplit = true,\n            Description = \"test\",\n            EnableTracking = true,\n            MaxSplitShard = 10,\n            ProjectId = \"e020c978-4f05-40e1-9167-0113d3ef****\",\n            ShardCount = 2,\n            Tags = \n            {\n                new Volcengine.Tls.Inputs.TopicTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n            TimeFormat = \"%Y-%m-%dT%H:%M:%S,%f\",\n            TimeKey = \"request_time\",\n            TopicName = \"tf-test-topic\",\n            Ttl = 10,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.NewTopic(ctx, \"foo\", \u0026tls.TopicArgs{\n\t\t\tAutoSplit:      pulumi.Bool(true),\n\t\t\tDescription:    pulumi.String(\"test\"),\n\t\t\tEnableTracking: pulumi.Bool(true),\n\t\t\tMaxSplitShard:  pulumi.Int(10),\n\t\t\tProjectId:      pulumi.String(\"e020c978-4f05-40e1-9167-0113d3ef****\"),\n\t\t\tShardCount:     pulumi.Int(2),\n\t\t\tTags: tls.TopicTagArray{\n\t\t\t\t\u0026tls.TopicTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeFormat: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v%v%v\", \"%\", \"Y-\", \"%\", \"m-\", \"%\", \"dT\", \"%\", \"H:\", \"%\", \"M:\", \"%\", \"S,\", \"%\", \"f\")),\n\t\t\tTimeKey:    pulumi.String(\"request_time\"),\n\t\t\tTopicName:  pulumi.String(\"tf-test-topic\"),\n\t\t\tTtl:        pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Topic(\"foo\", TopicArgs.builder()        \n            .autoSplit(true)\n            .description(\"test\")\n            .enableTracking(true)\n            .maxSplitShard(10)\n            .projectId(\"e020c978-4f05-40e1-9167-0113d3ef****\")\n            .shardCount(2)\n            .tags(TopicTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .timeFormat(\"%Y-%m-%dT%H:%M:%S,%f\")\n            .timeKey(\"request_time\")\n            .topicName(\"tf-test-topic\")\n            .ttl(10)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:tls:Topic\n    properties:\n      autoSplit: true\n      description: test\n      enableTracking: true\n      maxSplitShard: 10\n      projectId: e020c978-4f05-40e1-9167-0113d3ef****\n      shardCount: 2\n      tags:\n        - key: k1\n          value: v1\n      timeFormat: '%Y-%m-%dT%H:%M:%S,%f'\n      timeKey: request_time\n      topicName: tf-test-topic\n      ttl: 10\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTls Topic can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:tls/topic:Topic default edf051ed-3c46-49ba-9339-bea628fe****\n```\n\n ",
            "properties": {
                "autoSplit": {
                    "type": "boolean",
                    "description": "Whether to enable automatic partition splitting function of the tls topic.\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of the tls topic.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the tls project.\n"
                },
                "enableTracking": {
                    "type": "boolean",
                    "description": "Whether to enable WebTracking function of the tls topic.\n"
                },
                "maxSplitShard": {
                    "type": "integer",
                    "description": "The max count of shards in the tls topic.\n"
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modify time of the tls topic.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id of the tls topic.\n"
                },
                "shardCount": {
                    "type": "integer",
                    "description": "The count of shards in the tls topic. Valid value range: 1-10.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/TopicTag:TopicTag"
                    },
                    "description": "Tags.\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "The format of the time field.\n"
                },
                "timeKey": {
                    "type": "string",
                    "description": "The name of the time field.\n"
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of the tls topic.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The data storage time of the tls topic. Unit: Day. Valid value range: 1-3650.\n"
                }
            },
            "required": [
                "autoSplit",
                "createTime",
                "description",
                "enableTracking",
                "maxSplitShard",
                "modifyTime",
                "projectId",
                "shardCount",
                "timeFormat",
                "timeKey",
                "topicName",
                "ttl"
            ],
            "inputProperties": {
                "autoSplit": {
                    "type": "boolean",
                    "description": "Whether to enable automatic partition splitting function of the tls topic.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the tls project.\n"
                },
                "enableTracking": {
                    "type": "boolean",
                    "description": "Whether to enable WebTracking function of the tls topic.\n"
                },
                "maxSplitShard": {
                    "type": "integer",
                    "description": "The max count of shards in the tls topic.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id of the tls topic.\n",
                    "willReplaceOnChanges": true
                },
                "shardCount": {
                    "type": "integer",
                    "description": "The count of shards in the tls topic. Valid value range: 1-10.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tls/TopicTag:TopicTag"
                    },
                    "description": "Tags.\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "The format of the time field.\n"
                },
                "timeKey": {
                    "type": "string",
                    "description": "The name of the time field.\n"
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of the tls topic.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The data storage time of the tls topic. Unit: Day. Valid value range: 1-3650.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "shardCount",
                "topicName",
                "ttl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Topic resources.\n",
                "properties": {
                    "autoSplit": {
                        "type": "boolean",
                        "description": "Whether to enable automatic partition splitting function of the tls topic.\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The create time of the tls topic.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the tls project.\n"
                    },
                    "enableTracking": {
                        "type": "boolean",
                        "description": "Whether to enable WebTracking function of the tls topic.\n"
                    },
                    "maxSplitShard": {
                        "type": "integer",
                        "description": "The max count of shards in the tls topic.\n"
                    },
                    "modifyTime": {
                        "type": "string",
                        "description": "The modify time of the tls topic.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id of the tls topic.\n",
                        "willReplaceOnChanges": true
                    },
                    "shardCount": {
                        "type": "integer",
                        "description": "The count of shards in the tls topic. Valid value range: 1-10.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/TopicTag:TopicTag"
                        },
                        "description": "Tags.\n"
                    },
                    "timeFormat": {
                        "type": "string",
                        "description": "The format of the time field.\n"
                    },
                    "timeKey": {
                        "type": "string",
                        "description": "The name of the time field.\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The name of the tls topic.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The data storage time of the tls topic. Unit: Day. Valid value range: 1-3650.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tos/bucket:Bucket": {
            "description": "Provides a resource to manage tos bucket\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultBucket = new volcengine.tos.Bucket(\"default\", {\n    accountAcls: [\n        {\n            accountId: \"1\",\n            permission: \"READ\",\n        },\n        {\n            accountId: \"2001\",\n            permission: \"WRITE_ACP\",\n        },\n    ],\n    bucketName: \"test-xym-1\",\n    enableVersion: true,\n    //  storage_class =\"IA\"\n    publicAcl: \"private\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tos.Bucket(\"default\",\n    account_acls=[\n        volcengine.tos.BucketAccountAclArgs(\n            account_id=\"1\",\n            permission=\"READ\",\n        ),\n        volcengine.tos.BucketAccountAclArgs(\n            account_id=\"2001\",\n            permission=\"WRITE_ACP\",\n        ),\n    ],\n    bucket_name=\"test-xym-1\",\n    enable_version=True,\n    public_acl=\"private\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Volcengine.Tos.Bucket(\"default\", new Volcengine.Tos.BucketArgs\n        {\n            AccountAcls = \n            {\n                new Volcengine.Tos.Inputs.BucketAccountAclArgs\n                {\n                    AccountId = \"1\",\n                    Permission = \"READ\",\n                },\n                new Volcengine.Tos.Inputs.BucketAccountAclArgs\n                {\n                    AccountId = \"2001\",\n                    Permission = \"WRITE_ACP\",\n                },\n            },\n            BucketName = \"test-xym-1\",\n            EnableVersion = true,\n            PublicAcl = \"private\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tos\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tos\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tos.NewBucket(ctx, \"default\", \u0026tos.BucketArgs{\n\t\t\tAccountAcls: tos.BucketAccountAclArray{\n\t\t\t\t\u0026tos.BucketAccountAclArgs{\n\t\t\t\t\tAccountId:  pulumi.String(\"1\"),\n\t\t\t\t\tPermission: pulumi.String(\"READ\"),\n\t\t\t\t},\n\t\t\t\t\u0026tos.BucketAccountAclArgs{\n\t\t\t\t\tAccountId:  pulumi.String(\"2001\"),\n\t\t\t\t\tPermission: pulumi.String(\"WRITE_ACP\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBucketName:    pulumi.String(\"test-xym-1\"),\n\t\t\tEnableVersion: pulumi.Bool(true),\n\t\t\tPublicAcl:     pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Bucket(\"default\", BucketArgs.builder()        \n            .accountAcls(            \n                BucketAccountAclArgs.builder()\n                    .accountId(\"1\")\n                    .permission(\"READ\")\n                    .build(),\n                BucketAccountAclArgs.builder()\n                    .accountId(\"2001\")\n                    .permission(\"WRITE_ACP\")\n                    .build())\n            .bucketName(\"test-xym-1\")\n            .enableVersion(true)\n            .publicAcl(\"private\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:tos:Bucket\n    properties:\n      accountAcls:\n        - accountId: 1\n          permission: READ\n        - accountId: 2001\n          permission: WRITE_ACP\n      bucketName: test-xym-1\n      enableVersion: true\n      publicAcl: private\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTos Bucket can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:tos/bucket:Bucket default bucketName\n```\n\n ",
            "properties": {
                "accountAcls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tos/BucketAccountAcl:BucketAccountAcl"
                    },
                    "description": "The user set of grant full control.\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "creationDate": {
                    "type": "string",
                    "description": "The create date of the TOS bucket.\n"
                },
                "enableVersion": {
                    "type": "boolean",
                    "description": "The flag of enable tos version.\n"
                },
                "extranetEndpoint": {
                    "type": "string",
                    "description": "The extranet endpoint of the TOS bucket.\n"
                },
                "intranetEndpoint": {
                    "type": "string",
                    "description": "The intranet endpoint the TOS bucket.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of the TOS bucket.\n"
                },
                "publicAcl": {
                    "type": "string",
                    "description": "The public acl control of object.Valid value is private|public-read|public-read-write|authenticated-read|bucket-owner-read.\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "The storage type of the object.Valid value is STANDARD|IA|ARCHIVE_FR.Default is STANDARD.\n"
                }
            },
            "required": [
                "bucketName",
                "creationDate",
                "extranetEndpoint",
                "intranetEndpoint",
                "location"
            ],
            "inputProperties": {
                "accountAcls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tos/BucketAccountAcl:BucketAccountAcl"
                    },
                    "description": "The user set of grant full control.\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "enableVersion": {
                    "type": "boolean",
                    "description": "The flag of enable tos version.\n"
                },
                "publicAcl": {
                    "type": "string",
                    "description": "The public acl control of object.Valid value is private|public-read|public-read-write|authenticated-read|bucket-owner-read.\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "The storage type of the object.Valid value is STANDARD|IA|ARCHIVE_FR.Default is STANDARD.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bucketName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Bucket resources.\n",
                "properties": {
                    "accountAcls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tos/BucketAccountAcl:BucketAccountAcl"
                        },
                        "description": "The user set of grant full control.\n"
                    },
                    "bucketName": {
                        "type": "string",
                        "description": "The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "The create date of the TOS bucket.\n"
                    },
                    "enableVersion": {
                        "type": "boolean",
                        "description": "The flag of enable tos version.\n"
                    },
                    "extranetEndpoint": {
                        "type": "string",
                        "description": "The extranet endpoint of the TOS bucket.\n"
                    },
                    "intranetEndpoint": {
                        "type": "string",
                        "description": "The intranet endpoint the TOS bucket.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of the TOS bucket.\n"
                    },
                    "publicAcl": {
                        "type": "string",
                        "description": "The public acl control of object.Valid value is private|public-read|public-read-write|authenticated-read|bucket-owner-read.\n"
                    },
                    "storageClass": {
                        "type": "string",
                        "description": "The storage type of the object.Valid value is STANDARD|IA|ARCHIVE_FR.Default is STANDARD.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tos/bucketObject:BucketObject": {
            "description": "Provides a resource to manage tos object\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultBucketObject = new volcengine.tos.BucketObject(\"default\", {\n    accountAcls: [\n        //content_type = \"text/plain\"\n        {\n            accountId: \"1\",\n            permission: \"READ\",\n        },\n        {\n            accountId: \"2001\",\n            permission: \"WRITE_ACP\",\n        },\n    ],\n    bucketName: \"test-xym-1\",\n    encryption: \"AES256\",\n    filePath: \"/Users/bytedance/Work/Go/build/test.txt\",\n    objectName: \"demo_xym\",\n    //  storage_class =\"IA\"\n    publicAcl: \"private\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tos.BucketObject(\"default\",\n    account_acls=[\n        volcengine.tos.BucketObjectAccountAclArgs(\n            account_id=\"1\",\n            permission=\"READ\",\n        ),\n        volcengine.tos.BucketObjectAccountAclArgs(\n            account_id=\"2001\",\n            permission=\"WRITE_ACP\",\n        ),\n    ],\n    bucket_name=\"test-xym-1\",\n    encryption=\"AES256\",\n    file_path=\"/Users/bytedance/Work/Go/build/test.txt\",\n    object_name=\"demo_xym\",\n    public_acl=\"private\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Volcengine.Tos.BucketObject(\"default\", new Volcengine.Tos.BucketObjectArgs\n        {\n            AccountAcls = \n            {\n                new Volcengine.Tos.Inputs.BucketObjectAccountAclArgs\n                {\n                    AccountId = \"1\",\n                    Permission = \"READ\",\n                },\n                new Volcengine.Tos.Inputs.BucketObjectAccountAclArgs\n                {\n                    AccountId = \"2001\",\n                    Permission = \"WRITE_ACP\",\n                },\n            },\n            BucketName = \"test-xym-1\",\n            Encryption = \"AES256\",\n            FilePath = \"/Users/bytedance/Work/Go/build/test.txt\",\n            ObjectName = \"demo_xym\",\n            PublicAcl = \"private\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tos\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tos\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tos.NewBucketObject(ctx, \"default\", \u0026tos.BucketObjectArgs{\n\t\t\tAccountAcls: tos.BucketObjectAccountAclArray{\n\t\t\t\t\u0026tos.BucketObjectAccountAclArgs{\n\t\t\t\t\tAccountId:  pulumi.String(\"1\"),\n\t\t\t\t\tPermission: pulumi.String(\"READ\"),\n\t\t\t\t},\n\t\t\t\t\u0026tos.BucketObjectAccountAclArgs{\n\t\t\t\t\tAccountId:  pulumi.String(\"2001\"),\n\t\t\t\t\tPermission: pulumi.String(\"WRITE_ACP\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBucketName: pulumi.String(\"test-xym-1\"),\n\t\t\tEncryption: pulumi.String(\"AES256\"),\n\t\t\tFilePath:   pulumi.String(\"/Users/bytedance/Work/Go/build/test.txt\"),\n\t\t\tObjectName: pulumi.String(\"demo_xym\"),\n\t\t\tPublicAcl:  pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new BucketObject(\"default\", BucketObjectArgs.builder()        \n            .accountAcls(            \n                BucketObjectAccountAclArgs.builder()\n                    .accountId(\"1\")\n                    .permission(\"READ\")\n                    .build(),\n                BucketObjectAccountAclArgs.builder()\n                    .accountId(\"2001\")\n                    .permission(\"WRITE_ACP\")\n                    .build())\n            .bucketName(\"test-xym-1\")\n            .encryption(\"AES256\")\n            .filePath(\"/Users/bytedance/Work/Go/build/test.txt\")\n            .objectName(\"demo_xym\")\n            .publicAcl(\"private\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:tos:BucketObject\n    properties:\n      accountAcls:\n        - accountId: 1\n          permission: READ\n        - accountId: 2001\n          permission: WRITE_ACP\n      bucketName: test-xym-1\n      encryption: AES256\n      filePath: /Users/bytedance/Work/Go/build/test.txt\n      objectName: demo_xym\n      publicAcl: private\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTOS Object can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:tos/bucketObject:BucketObject default bucketName:objectName\n```\n\n ",
            "properties": {
                "accountAcls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tos/BucketObjectAccountAcl:BucketObjectAccountAcl"
                    },
                    "description": "The user set of grant full control.\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "contentMd5": {
                    "type": "string",
                    "description": "The file md5 sum (32-bit hexadecimal string) for upload.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content type of the object.\n"
                },
                "enableVersion": {
                    "type": "boolean",
                    "description": "The flag of enable tos version.\n"
                },
                "encryption": {
                    "type": "string",
                    "description": "The encryption of the object.Valid value is AES256.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The file path for upload.\n"
                },
                "objectName": {
                    "type": "string",
                    "description": "The name of the object.\n"
                },
                "publicAcl": {
                    "type": "string",
                    "description": "The public acl control of object.Valid value is private|public-read|public-read-write|authenticated-read|bucket-owner-read.\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "The storage type of the object.Valid value is STANDARD|IA.\n"
                },
                "versionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The version ids of the object if exist.\n"
                }
            },
            "required": [
                "bucketName",
                "contentType",
                "enableVersion",
                "filePath",
                "objectName",
                "versionIds"
            ],
            "inputProperties": {
                "accountAcls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:tos/BucketObjectAccountAcl:BucketObjectAccountAcl"
                    },
                    "description": "The user set of grant full control.\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "contentMd5": {
                    "type": "string",
                    "description": "The file md5 sum (32-bit hexadecimal string) for upload.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content type of the object.\n",
                    "willReplaceOnChanges": true
                },
                "encryption": {
                    "type": "string",
                    "description": "The encryption of the object.Valid value is AES256.\n",
                    "willReplaceOnChanges": true
                },
                "filePath": {
                    "type": "string",
                    "description": "The file path for upload.\n"
                },
                "objectName": {
                    "type": "string",
                    "description": "The name of the object.\n",
                    "willReplaceOnChanges": true
                },
                "publicAcl": {
                    "type": "string",
                    "description": "The public acl control of object.Valid value is private|public-read|public-read-write|authenticated-read|bucket-owner-read.\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "The storage type of the object.Valid value is STANDARD|IA.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bucketName",
                "filePath",
                "objectName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BucketObject resources.\n",
                "properties": {
                    "accountAcls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tos/BucketObjectAccountAcl:BucketObjectAccountAcl"
                        },
                        "description": "The user set of grant full control.\n"
                    },
                    "bucketName": {
                        "type": "string",
                        "description": "The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "contentMd5": {
                        "type": "string",
                        "description": "The file md5 sum (32-bit hexadecimal string) for upload.\n"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content type of the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableVersion": {
                        "type": "boolean",
                        "description": "The flag of enable tos version.\n"
                    },
                    "encryption": {
                        "type": "string",
                        "description": "The encryption of the object.Valid value is AES256.\n",
                        "willReplaceOnChanges": true
                    },
                    "filePath": {
                        "type": "string",
                        "description": "The file path for upload.\n"
                    },
                    "objectName": {
                        "type": "string",
                        "description": "The name of the object.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicAcl": {
                        "type": "string",
                        "description": "The public acl control of object.Valid value is private|public-read|public-read-write|authenticated-read|bucket-owner-read.\n"
                    },
                    "storageClass": {
                        "type": "string",
                        "description": "The storage type of the object.Valid value is STANDARD|IA.\n",
                        "willReplaceOnChanges": true
                    },
                    "versionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The version ids of the object if exist.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:tos/bucketPolicy:BucketPolicy": {
            "description": "Provides a resource to manage tos bucket policy\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst _default = new volcengine.tos.BucketPolicy(\"default\", {\n    bucketName: \"bucket-20230418\",\n    policy: JSON.stringify({\n        Statement: [{\n            Sid: \"test\",\n            Effect: \"Allow\",\n            Principal: [\"AccountId/subUserName\"],\n            Action: [\"tos:List*\"],\n            Resource: [\"trn:tos:::bucket-20230418\"],\n        }],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tos.BucketPolicy(\"default\",\n    bucket_name=\"bucket-20230418\",\n    policy=json.dumps({\n        \"Statement\": [{\n            \"Sid\": \"test\",\n            \"Effect\": \"Allow\",\n            \"Principal\": [\"AccountId/subUserName\"],\n            \"Action\": [\"tos:List*\"],\n            \"Resource\": [\"trn:tos:::bucket-20230418\"],\n        }],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Volcengine.Tos.BucketPolicy(\"default\", new Volcengine.Tos.BucketPolicyArgs\n        {\n            BucketName = \"bucket-20230418\",\n            Policy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"Statement\", new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"Sid\", \"test\" },\n                            { \"Effect\", \"Allow\" },\n                            { \"Principal\", new[]\n                                {\n                                    \"AccountId/subUserName\",\n                                }\n                             },\n                            { \"Action\", new[]\n                                {\n                                    \"tos:List*\",\n                                }\n                             },\n                            { \"Resource\", new[]\n                                {\n                                    \"trn:tos:::bucket-20230418\",\n                                }\n                             },\n                        },\n                    }\n                 },\n            }),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tos\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Sid\":    \"test\",\n\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\"Principal\": []string{\n\t\t\t\t\t\t\"AccountId/subUserName\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\"tos:List*\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Resource\": []string{\n\t\t\t\t\t\t\"trn:tos:::bucket-20230418\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err := tos.NewBucketPolicy(ctx, \"default\", \u0026tos.BucketPolicyArgs{\n\t\t\tBucketName: pulumi.String(\"bucket-20230418\"),\n\t\t\tPolicy:     pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport static com.pulumi.codegen.internal.Serialization.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new BucketPolicy(\"default\", BucketPolicyArgs.builder()        \n            .bucketName(\"bucket-20230418\")\n            .policy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Statement\", jsonArray(jsonObject(\n                        jsonProperty(\"Sid\", \"test\"),\n                        jsonProperty(\"Effect\", \"Allow\"),\n                        jsonProperty(\"Principal\", jsonArray(\"AccountId/subUserName\")),\n                        jsonProperty(\"Action\", jsonArray(\"tos:List*\")),\n                        jsonProperty(\"Resource\", jsonArray(\"trn:tos:::bucket-20230418\"))\n                    )))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:tos:BucketPolicy\n    properties:\n      bucketName: bucket-20230418\n      policy:\n        Fn::ToJSON:\n          Statement:\n            - Sid: test\n              Effect: Allow\n              Principal:\n                - AccountId/subUserName\n              Action:\n                - tos:List*\n              Resource:\n                - trn:tos:::bucket-20230418\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTos Bucket can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:tos/bucketPolicy:BucketPolicy default bucketName:policy\n```\n\n ",
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The policy document. This is a JSON formatted string. For more information about building Volcengine IAM policy\ndocuments with Terraform, see the [Volcengine IAM Policy Document Guide](https://www.volcengine.com/docs/6349/102127).\n"
                }
            },
            "required": [
                "bucketName",
                "policy"
            ],
            "inputProperties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "policy": {
                    "type": "string",
                    "description": "The policy document. This is a JSON formatted string. For more information about building Volcengine IAM policy\ndocuments with Terraform, see the [Volcengine IAM Policy Document Guide](https://www.volcengine.com/docs/6349/102127).\n"
                }
            },
            "requiredInputs": [
                "bucketName",
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BucketPolicy resources.\n",
                "properties": {
                    "bucketName": {
                        "type": "string",
                        "description": "The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "policy": {
                        "type": "string",
                        "description": "The policy document. This is a JSON formatted string. For more information about building Volcengine IAM policy\ndocuments with Terraform, see the [Volcengine IAM Policy Document Guide](https://www.volcengine.com/docs/6349/102127).\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:veenedge/cloudServer:CloudServer": {
            "description": "Provides a resource to manage veenedge cloud server\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.veenedge.CloudServer(\"foo\", {\n    billingConfig: {\n        bandwidthBillingMethod: \"MonthlyP95\",\n        computingBillingMethod: \"MonthlyPeak\",\n    },\n    cloudserverName: \"tf-test\",\n    defaultAreaName: \"C******na\",\n    defaultIsp: \"CMCC\",\n    imageId: \"image*****viqm\",\n    networkConfig: {\n        bandwidthPeak: \"5\",\n    },\n    scheduleStrategy: {\n        networkStrategy: \"region\",\n        priceStrategy: \"high_priority\",\n        scheduleStrategy: \"dispersion\",\n    },\n    secretData: \"sshkey-47*****wgc\",\n    secretType: \"KeyPair\",\n    serverAreaLevel: \"region\",\n    specName: \"veEN****rge\",\n    storageConfig: {\n        dataDiskLists: [{\n            capacity: \"20\",\n            storageType: \"CloudBlockSSD\",\n        }],\n        systemDisk: {\n            capacity: \"40\",\n            storageType: \"CloudBlockSSD\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.veenedge.CloudServer(\"foo\",\n    billing_config=volcengine.veenedge.CloudServerBillingConfigArgs(\n        bandwidth_billing_method=\"MonthlyP95\",\n        computing_billing_method=\"MonthlyPeak\",\n    ),\n    cloudserver_name=\"tf-test\",\n    default_area_name=\"C******na\",\n    default_isp=\"CMCC\",\n    image_id=\"image*****viqm\",\n    network_config=volcengine.veenedge.CloudServerNetworkConfigArgs(\n        bandwidth_peak=\"5\",\n    ),\n    schedule_strategy=volcengine.veenedge.CloudServerScheduleStrategyArgs(\n        network_strategy=\"region\",\n        price_strategy=\"high_priority\",\n        schedule_strategy=\"dispersion\",\n    ),\n    secret_data=\"sshkey-47*****wgc\",\n    secret_type=\"KeyPair\",\n    server_area_level=\"region\",\n    spec_name=\"veEN****rge\",\n    storage_config=volcengine.veenedge.CloudServerStorageConfigArgs(\n        data_disk_lists=[volcengine.veenedge.CloudServerStorageConfigDataDiskListArgs(\n            capacity=\"20\",\n            storage_type=\"CloudBlockSSD\",\n        )],\n        system_disk=volcengine.veenedge.CloudServerStorageConfigSystemDiskArgs(\n            capacity=\"40\",\n            storage_type=\"CloudBlockSSD\",\n        ),\n    ))\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Veenedge.CloudServer(\"foo\", new Volcengine.Veenedge.CloudServerArgs\n        {\n            BillingConfig = new Volcengine.Veenedge.Inputs.CloudServerBillingConfigArgs\n            {\n                BandwidthBillingMethod = \"MonthlyP95\",\n                ComputingBillingMethod = \"MonthlyPeak\",\n            },\n            CloudserverName = \"tf-test\",\n            DefaultAreaName = \"C******na\",\n            DefaultIsp = \"CMCC\",\n            ImageId = \"image*****viqm\",\n            NetworkConfig = new Volcengine.Veenedge.Inputs.CloudServerNetworkConfigArgs\n            {\n                BandwidthPeak = \"5\",\n            },\n            ScheduleStrategy = new Volcengine.Veenedge.Inputs.CloudServerScheduleStrategyArgs\n            {\n                NetworkStrategy = \"region\",\n                PriceStrategy = \"high_priority\",\n                ScheduleStrategy = \"dispersion\",\n            },\n            SecretData = \"sshkey-47*****wgc\",\n            SecretType = \"KeyPair\",\n            ServerAreaLevel = \"region\",\n            SpecName = \"veEN****rge\",\n            StorageConfig = new Volcengine.Veenedge.Inputs.CloudServerStorageConfigArgs\n            {\n                DataDiskLists = \n                {\n                    new Volcengine.Veenedge.Inputs.CloudServerStorageConfigDataDiskListArgs\n                    {\n                        Capacity = \"20\",\n                        StorageType = \"CloudBlockSSD\",\n                    },\n                },\n                SystemDisk = new Volcengine.Veenedge.Inputs.CloudServerStorageConfigSystemDiskArgs\n                {\n                    Capacity = \"40\",\n                    StorageType = \"CloudBlockSSD\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := veenedge.NewCloudServer(ctx, \"foo\", \u0026veenedge.CloudServerArgs{\n\t\t\tBillingConfig: \u0026veenedge.CloudServerBillingConfigArgs{\n\t\t\t\tBandwidthBillingMethod: pulumi.String(\"MonthlyP95\"),\n\t\t\t\tComputingBillingMethod: pulumi.String(\"MonthlyPeak\"),\n\t\t\t},\n\t\t\tCloudserverName: pulumi.String(\"tf-test\"),\n\t\t\tDefaultAreaName: pulumi.String(\"C******na\"),\n\t\t\tDefaultIsp:      pulumi.String(\"CMCC\"),\n\t\t\tImageId:         pulumi.String(\"image*****viqm\"),\n\t\t\tNetworkConfig: \u0026veenedge.CloudServerNetworkConfigArgs{\n\t\t\t\tBandwidthPeak: pulumi.String(\"5\"),\n\t\t\t},\n\t\t\tScheduleStrategy: \u0026veenedge.CloudServerScheduleStrategyArgs{\n\t\t\t\tNetworkStrategy:  pulumi.String(\"region\"),\n\t\t\t\tPriceStrategy:    pulumi.String(\"high_priority\"),\n\t\t\t\tScheduleStrategy: pulumi.String(\"dispersion\"),\n\t\t\t},\n\t\t\tSecretData:      pulumi.String(\"sshkey-47*****wgc\"),\n\t\t\tSecretType:      pulumi.String(\"KeyPair\"),\n\t\t\tServerAreaLevel: pulumi.String(\"region\"),\n\t\t\tSpecName:        pulumi.String(\"veEN****rge\"),\n\t\t\tStorageConfig: \u0026veenedge.CloudServerStorageConfigArgs{\n\t\t\t\tDataDiskLists: veenedge.CloudServerStorageConfigDataDiskListArray{\n\t\t\t\t\t\u0026veenedge.CloudServerStorageConfigDataDiskListArgs{\n\t\t\t\t\t\tCapacity:    pulumi.String(\"20\"),\n\t\t\t\t\t\tStorageType: pulumi.String(\"CloudBlockSSD\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSystemDisk: \u0026veenedge.CloudServerStorageConfigSystemDiskArgs{\n\t\t\t\t\tCapacity:    pulumi.String(\"40\"),\n\t\t\t\t\tStorageType: pulumi.String(\"CloudBlockSSD\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new CloudServer(\"foo\", CloudServerArgs.builder()        \n            .billingConfig(CloudServerBillingConfigArgs.builder()\n                .bandwidthBillingMethod(\"MonthlyP95\")\n                .computingBillingMethod(\"MonthlyPeak\")\n                .build())\n            .cloudserverName(\"tf-test\")\n            .defaultAreaName(\"C******na\")\n            .defaultIsp(\"CMCC\")\n            .imageId(\"image*****viqm\")\n            .networkConfig(CloudServerNetworkConfigArgs.builder()\n                .bandwidthPeak(5)\n                .build())\n            .scheduleStrategy(CloudServerScheduleStrategyArgs.builder()\n                .networkStrategy(\"region\")\n                .priceStrategy(\"high_priority\")\n                .scheduleStrategy(\"dispersion\")\n                .build())\n            .secretData(\"sshkey-47*****wgc\")\n            .secretType(\"KeyPair\")\n            .serverAreaLevel(\"region\")\n            .specName(\"veEN****rge\")\n            .storageConfig(CloudServerStorageConfigArgs.builder()\n                .dataDiskLists(CloudServerStorageConfigDataDiskListArgs.builder()\n                    .capacity(20)\n                    .storageType(\"CloudBlockSSD\")\n                    .build())\n                .systemDisk(CloudServerStorageConfigSystemDiskArgs.builder()\n                    .capacity(40)\n                    .storageType(\"CloudBlockSSD\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:veenedge:CloudServer\n    properties:\n      billingConfig:\n        bandwidthBillingMethod: MonthlyP95\n        computingBillingMethod: MonthlyPeak\n      cloudserverName: tf-test\n      defaultAreaName: C******na\n      defaultIsp: CMCC\n      imageId: image*****viqm\n      networkConfig:\n        bandwidthPeak: 5\n      scheduleStrategy:\n        networkStrategy: region\n        priceStrategy: high_priority\n        scheduleStrategy: dispersion\n      secretData: sshkey-47*****wgc\n      secretType: KeyPair\n      serverAreaLevel: region\n      specName: veEN****rge\n      storageConfig:\n        dataDiskLists:\n          - capacity: 20\n            storageType: CloudBlockSSD\n        systemDisk:\n          capacity: 40\n          storageType: CloudBlockSSD\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCloudServer can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:veenedge/cloudServer:CloudServer default cloudserver-n769ewmjjqyqh5dv\n```\n\n After the veenedge cloud server is created, a default edge instance will be created, we recommend managing this default instance as follows resource \"volcengine_veenedge_instance\" \"foo1\" {\n\n instance_id = volcengine_veenedge_cloud_server.foo.default_instance_id } ",
            "properties": {
                "billingConfig": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerBillingConfig:CloudServerBillingConfig",
                    "description": "The config of the billing.\n"
                },
                "cloudserverName": {
                    "type": "string",
                    "description": "The name of cloud server.\n"
                },
                "customData": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerCustomData:CloudServerCustomData",
                    "description": "The custom data.\n"
                },
                "defaultAreaName": {
                    "type": "string",
                    "description": "The name of default area.\n"
                },
                "defaultClusterName": {
                    "type": "string",
                    "description": "The name of default cluster.\n"
                },
                "defaultInstanceId": {
                    "type": "string",
                    "description": "The default instance id generate by cloud server.\n"
                },
                "defaultIsp": {
                    "type": "string",
                    "description": "The default isp info.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The image id of cloud server.\n"
                },
                "networkConfig": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerNetworkConfig:CloudServerNetworkConfig",
                    "description": "The config of the network.\n"
                },
                "scheduleStrategy": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerScheduleStrategy:CloudServerScheduleStrategy",
                    "description": "The schedule strategy.\n"
                },
                "secretData": {
                    "type": "string",
                    "description": "The data of secret. The value can be Password or KeyPair ID.\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "The type of secret. The value can be `KeyPair` or `Password`.\n"
                },
                "serverAreaLevel": {
                    "type": "string",
                    "description": "The server area level. The value can be `region` or `city`.\n"
                },
                "specName": {
                    "type": "string",
                    "description": "The spec name of cloud server.\n"
                },
                "storageConfig": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerStorageConfig:CloudServerStorageConfig",
                    "description": "The config of the storage.\n"
                }
            },
            "required": [
                "cloudserverName",
                "customData",
                "defaultAreaName",
                "defaultInstanceId",
                "defaultIsp",
                "imageId",
                "networkConfig",
                "scheduleStrategy",
                "secretType",
                "serverAreaLevel",
                "specName",
                "storageConfig"
            ],
            "inputProperties": {
                "billingConfig": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerBillingConfig:CloudServerBillingConfig",
                    "description": "The config of the billing.\n",
                    "willReplaceOnChanges": true
                },
                "cloudserverName": {
                    "type": "string",
                    "description": "The name of cloud server.\n",
                    "willReplaceOnChanges": true
                },
                "customData": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerCustomData:CloudServerCustomData",
                    "description": "The custom data.\n",
                    "willReplaceOnChanges": true
                },
                "defaultAreaName": {
                    "type": "string",
                    "description": "The name of default area.\n"
                },
                "defaultClusterName": {
                    "type": "string",
                    "description": "The name of default cluster.\n"
                },
                "defaultIsp": {
                    "type": "string",
                    "description": "The default isp info.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The image id of cloud server.\n",
                    "willReplaceOnChanges": true
                },
                "networkConfig": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerNetworkConfig:CloudServerNetworkConfig",
                    "description": "The config of the network.\n",
                    "willReplaceOnChanges": true
                },
                "scheduleStrategy": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerScheduleStrategy:CloudServerScheduleStrategy",
                    "description": "The schedule strategy.\n",
                    "willReplaceOnChanges": true
                },
                "secretData": {
                    "type": "string",
                    "description": "The data of secret. The value can be Password or KeyPair ID.\n",
                    "willReplaceOnChanges": true
                },
                "secretType": {
                    "type": "string",
                    "description": "The type of secret. The value can be `KeyPair` or `Password`.\n",
                    "willReplaceOnChanges": true
                },
                "serverAreaLevel": {
                    "type": "string",
                    "description": "The server area level. The value can be `region` or `city`.\n",
                    "willReplaceOnChanges": true
                },
                "specName": {
                    "type": "string",
                    "description": "The spec name of cloud server.\n",
                    "willReplaceOnChanges": true
                },
                "storageConfig": {
                    "$ref": "#/types/volcengine:veenedge/CloudServerStorageConfig:CloudServerStorageConfig",
                    "description": "The config of the storage.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cloudserverName",
                "defaultAreaName",
                "defaultIsp",
                "imageId",
                "networkConfig",
                "scheduleStrategy",
                "secretType",
                "serverAreaLevel",
                "specName",
                "storageConfig"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudServer resources.\n",
                "properties": {
                    "billingConfig": {
                        "$ref": "#/types/volcengine:veenedge/CloudServerBillingConfig:CloudServerBillingConfig",
                        "description": "The config of the billing.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudserverName": {
                        "type": "string",
                        "description": "The name of cloud server.\n",
                        "willReplaceOnChanges": true
                    },
                    "customData": {
                        "$ref": "#/types/volcengine:veenedge/CloudServerCustomData:CloudServerCustomData",
                        "description": "The custom data.\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultAreaName": {
                        "type": "string",
                        "description": "The name of default area.\n"
                    },
                    "defaultClusterName": {
                        "type": "string",
                        "description": "The name of default cluster.\n"
                    },
                    "defaultInstanceId": {
                        "type": "string",
                        "description": "The default instance id generate by cloud server.\n"
                    },
                    "defaultIsp": {
                        "type": "string",
                        "description": "The default isp info.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image id of cloud server.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkConfig": {
                        "$ref": "#/types/volcengine:veenedge/CloudServerNetworkConfig:CloudServerNetworkConfig",
                        "description": "The config of the network.\n",
                        "willReplaceOnChanges": true
                    },
                    "scheduleStrategy": {
                        "$ref": "#/types/volcengine:veenedge/CloudServerScheduleStrategy:CloudServerScheduleStrategy",
                        "description": "The schedule strategy.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretData": {
                        "type": "string",
                        "description": "The data of secret. The value can be Password or KeyPair ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretType": {
                        "type": "string",
                        "description": "The type of secret. The value can be `KeyPair` or `Password`.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverAreaLevel": {
                        "type": "string",
                        "description": "The server area level. The value can be `region` or `city`.\n",
                        "willReplaceOnChanges": true
                    },
                    "specName": {
                        "type": "string",
                        "description": "The spec name of cloud server.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageConfig": {
                        "$ref": "#/types/volcengine:veenedge/CloudServerStorageConfig:CloudServerStorageConfig",
                        "description": "The config of the storage.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:veenedge/instance:Instance": {
            "description": "Provides a resource to manage veenedge instance\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.veenedge.Instance(\"foo\", {\n    areaName: \"*****\",\n    cloudserverId: \"cloudserver-x92*****jcc8f\",\n    isp: \"CMCC\",\n});\nconst foo1 = new volcengine.veenedge.Instance(\"foo1\", {\n    instanceId: \"veen0*****0111112\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.veenedge.Instance(\"foo\",\n    area_name=\"*****\",\n    cloudserver_id=\"cloudserver-x92*****jcc8f\",\n    isp=\"CMCC\")\nfoo1 = volcengine.veenedge.Instance(\"foo1\", instance_id=\"veen0*****0111112\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Veenedge.Instance(\"foo\", new Volcengine.Veenedge.InstanceArgs\n        {\n            AreaName = \"*****\",\n            CloudserverId = \"cloudserver-x92*****jcc8f\",\n            Isp = \"CMCC\",\n        });\n        var foo1 = new Volcengine.Veenedge.Instance(\"foo1\", new Volcengine.Veenedge.InstanceArgs\n        {\n            InstanceId = \"veen0*****0111112\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := veenedge.NewInstance(ctx, \"foo\", \u0026veenedge.InstanceArgs{\n\t\t\tAreaName:      pulumi.String(\"*****\"),\n\t\t\tCloudserverId: pulumi.String(\"cloudserver-x92*****jcc8f\"),\n\t\t\tIsp:           pulumi.String(\"CMCC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = veenedge.NewInstance(ctx, \"foo1\", \u0026veenedge.InstanceArgs{\n\t\t\tInstanceId: pulumi.String(\"veen0*****0111112\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Instance(\"foo\", InstanceArgs.builder()        \n            .areaName(\"*****\")\n            .cloudserverId(\"cloudserver-x92*****jcc8f\")\n            .isp(\"CMCC\")\n            .build());\n\n        var foo1 = new Instance(\"foo1\", InstanceArgs.builder()        \n            .instanceId(\"veen0*****0111112\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:veenedge:Instance\n    properties:\n      areaName: '*****'\n      cloudserverId: cloudserver-x92*****jcc8f\n      isp: CMCC\n  foo1:\n    type: volcengine:veenedge:Instance\n    properties:\n      instanceId: veen0*****0111112\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nInstance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:veenedge/instance:Instance default veenn769ewmjjqyqh5dv\n```\n\n ",
            "properties": {
                "areaName": {
                    "type": "string",
                    "description": "The area name.\n"
                },
                "cloudserverId": {
                    "type": "string",
                    "description": "The id of cloud server.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of cluster.\n"
                },
                "defaultIsp": {
                    "type": "string",
                    "description": "The default isp for multi line node.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Import an exist instance, usually for import a default instance generated with cloud server creating.\n"
                },
                "isp": {
                    "type": "string",
                    "description": "The isp info.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of instance, only effected in update scene.\n"
                },
                "secretData": {
                    "type": "string",
                    "description": "The data of secret, only effected in update scene.\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "The type of secret, only effected in update scene. The value can be `KeyPair` or `Password`.\n"
                }
            },
            "required": [
                "areaName",
                "cloudserverId",
                "clusterName",
                "instanceId",
                "isp",
                "name"
            ],
            "inputProperties": {
                "areaName": {
                    "type": "string",
                    "description": "The area name.\n",
                    "willReplaceOnChanges": true
                },
                "cloudserverId": {
                    "type": "string",
                    "description": "The id of cloud server.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of cluster.\n",
                    "willReplaceOnChanges": true
                },
                "defaultIsp": {
                    "type": "string",
                    "description": "The default isp for multi line node.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "Import an exist instance, usually for import a default instance generated with cloud server creating.\n",
                    "willReplaceOnChanges": true
                },
                "isp": {
                    "type": "string",
                    "description": "The isp info.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of instance, only effected in update scene.\n"
                },
                "secretData": {
                    "type": "string",
                    "description": "The data of secret, only effected in update scene.\n"
                },
                "secretType": {
                    "type": "string",
                    "description": "The type of secret, only effected in update scene. The value can be `KeyPair` or `Password`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "areaName": {
                        "type": "string",
                        "description": "The area name.\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudserverId": {
                        "type": "string",
                        "description": "The id of cloud server.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The name of cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultIsp": {
                        "type": "string",
                        "description": "The default isp for multi line node.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Import an exist instance, usually for import a default instance generated with cloud server creating.\n",
                        "willReplaceOnChanges": true
                    },
                    "isp": {
                        "type": "string",
                        "description": "The isp info.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of instance, only effected in update scene.\n"
                    },
                    "secretData": {
                        "type": "string",
                        "description": "The data of secret, only effected in update scene.\n"
                    },
                    "secretType": {
                        "type": "string",
                        "description": "The type of secret, only effected in update scene. The value can be `KeyPair` or `Password`.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:veenedge/vpc:Vpc": {
            "description": "Provides a resource to manage veenedge vpc\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.veenedge.Vpc(\"foo\", {\n    clusterName: \"b****t02\",\n    vpcName: \"tf-test-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.veenedge.Vpc(\"foo\",\n    cluster_name=\"b****t02\",\n    vpc_name=\"tf-test-2\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Veenedge.Vpc(\"foo\", new Volcengine.Veenedge.VpcArgs\n        {\n            ClusterName = \"b****t02\",\n            VpcName = \"tf-test-2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := veenedge.NewVpc(ctx, \"foo\", \u0026veenedge.VpcArgs{\n\t\t\tClusterName: pulumi.String(\"b****t02\"),\n\t\t\tVpcName:     pulumi.String(\"tf-test-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Vpc(\"foo\", VpcArgs.builder()        \n            .clusterName(\"b****t02\")\n            .vpcName(\"tf-test-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:veenedge:Vpc\n    properties:\n      clusterName: b****t02\n      vpcName: tf-test-2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVPC can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:veenedge/vpc:Vpc default vpc-mizl7m1k\n```\n\n If you need to create a VPC, you need to apply for permission from the administrator in advance. You can only delete the vpc from web consul ",
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "The cidr info.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "desc": {
                    "type": "string",
                    "description": "The description of the VPC.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of the VPC.\n"
                }
            },
            "required": [
                "clusterName",
                "desc",
                "vpcName"
            ],
            "inputProperties": {
                "cidr": {
                    "type": "string",
                    "description": "The cidr info.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "desc": {
                    "type": "string",
                    "description": "The description of the VPC.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterName",
                "desc",
                "vpcName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "The cidr info.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The name of the cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "desc": {
                        "type": "string",
                        "description": "The description of the VPC.\n"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "The name of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vke/addon:Addon": {
            "description": "Provides a resource to manage vke addon\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vke.Addon(\"foo\", {\n    clusterId: \"cccctv1vqtofp49d96ujg\",\n    config: \"{\\\"xxx\\\":\\\"true\\\"}\",\n    deployMode: \"Unmanaged\",\n    deployNodeType: \"Node\",\n    version: \"v0.1.3\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vke.Addon(\"foo\",\n    cluster_id=\"cccctv1vqtofp49d96ujg\",\n    config=\"{\\\"xxx\\\":\\\"true\\\"}\",\n    deploy_mode=\"Unmanaged\",\n    deploy_node_type=\"Node\",\n    version=\"v0.1.3\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vke.Addon(\"foo\", new Volcengine.Vke.AddonArgs\n        {\n            ClusterId = \"cccctv1vqtofp49d96ujg\",\n            Config = \"{\\\"xxx\\\":\\\"true\\\"}\",\n            DeployMode = \"Unmanaged\",\n            DeployNodeType = \"Node\",\n            Version = \"v0.1.3\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.NewAddon(ctx, \"foo\", \u0026vke.AddonArgs{\n\t\t\tClusterId:      pulumi.String(\"cccctv1vqtofp49d96ujg\"),\n\t\t\tConfig:         pulumi.String(\"{\\\"xxx\\\":\\\"true\\\"}\"),\n\t\t\tDeployMode:     pulumi.String(\"Unmanaged\"),\n\t\t\tDeployNodeType: pulumi.String(\"Node\"),\n\t\t\tVersion:        pulumi.String(\"v0.1.3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Addon(\"foo\", AddonArgs.builder()        \n            .clusterId(\"cccctv1vqtofp49d96ujg\")\n            .config(\"{\\\"xxx\\\":\\\"true\\\"}\")\n            .deployMode(\"Unmanaged\")\n            .deployNodeType(\"Node\")\n            .version(\"v0.1.3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vke:Addon\n    properties:\n      clusterId: cccctv1vqtofp49d96ujg\n      config: '{\"xxx\":\"true\"}'\n      deployMode: Unmanaged\n      deployNodeType: Node\n      version: v0.1.3\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVkeAddon can be imported using the clusterId:Name, e.g.\n\n```sh\n $ pulumi import volcengine:vke/addon:Addon default cc9l74mvqtofjnoj5****:nginx-ingress\n```\n\n Notice Some kind of VKEAddon can not be removed from volcengine, and it will make a forbidden error when try to destroy. If you want to remove it from terraform state, please use command $ terraform state rm volcengine_vke_addon.${name} ",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the addon.\n"
                },
                "config": {
                    "type": "string",
                    "description": "The config info of addon. Please notice that `ingress-nginx` component prohibits updating config, can only works on the web console.\n"
                },
                "deployMode": {
                    "type": "string",
                    "description": "The deploy mode.\n"
                },
                "deployNodeType": {
                    "type": "string",
                    "description": "The deploy node type.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the addon.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version info of the cluster.\n"
                }
            },
            "required": [
                "clusterId",
                "config",
                "deployMode",
                "deployNodeType",
                "name",
                "version"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the addon.\n",
                    "willReplaceOnChanges": true
                },
                "config": {
                    "type": "string",
                    "description": "The config info of addon. Please notice that `ingress-nginx` component prohibits updating config, can only works on the web console.\n"
                },
                "deployMode": {
                    "type": "string",
                    "description": "The deploy mode.\n",
                    "willReplaceOnChanges": true
                },
                "deployNodeType": {
                    "type": "string",
                    "description": "The deploy node type.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the addon.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "The version info of the cluster.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Addon resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the addon.\n",
                        "willReplaceOnChanges": true
                    },
                    "config": {
                        "type": "string",
                        "description": "The config info of addon. Please notice that `ingress-nginx` component prohibits updating config, can only works on the web console.\n"
                    },
                    "deployMode": {
                        "type": "string",
                        "description": "The deploy mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "deployNodeType": {
                        "type": "string",
                        "description": "The deploy node type.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the addon.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The version info of the cluster.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vke/cluster:Cluster": {
            "description": "Provides a resource to manage vke cluster\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vke.Cluster(\"foo\", {\n    clusterConfig: {\n        apiServerPublicAccessConfig: {\n            publicAccessNetworkConfig: {\n                bandwidth: 1,\n                billingType: \"PostPaidByBandwidth\",\n            },\n        },\n        apiServerPublicAccessEnabled: true,\n        resourcePublicAccessDefaultEnabled: true,\n        subnetIds: [\"subnet-rrqvkt2nq1hcv0x57ccqf3x\"],\n    },\n    deleteProtectionEnabled: false,\n    description: \"created by terraform\",\n    loggingConfig: {\n        //log_project_id = \"3189316d-a1ee-4892-a8fc-9a566489d590\"\n        logSetups: [{\n            enabled: false,\n            logTtl: 30,\n            logType: \"Audit\",\n        }],\n    },\n    podsConfig: {\n        podNetworkMode: \"VpcCniShared\",\n        //    flannel_config {\n        //      pod_cidrs = [\"172.27.224.0/19\"]\n        //      max_pods_per_node = 64\n        //    }\n        vpcCniConfig: {\n            subnetIds: [\n                \"subnet-rrqvkt2nq1hcv0x57ccqf3x\",\n                \"subnet-miklcqh75vcw5smt1amo4ik5\",\n                \"subnet-13g0x0ytpm0hs3n6nu5j591lv\",\n            ],\n        },\n    },\n    servicesConfig: {\n        serviceCidrsv4s: [\"172.30.0.0/18\"],\n    },\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vke.Cluster(\"foo\",\n    cluster_config=volcengine.vke.ClusterClusterConfigArgs(\n        api_server_public_access_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigArgs(\n            public_access_network_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs(\n                bandwidth=1,\n                billing_type=\"PostPaidByBandwidth\",\n            ),\n        ),\n        api_server_public_access_enabled=True,\n        resource_public_access_default_enabled=True,\n        subnet_ids=[\"subnet-rrqvkt2nq1hcv0x57ccqf3x\"],\n    ),\n    delete_protection_enabled=False,\n    description=\"created by terraform\",\n    logging_config=volcengine.vke.ClusterLoggingConfigArgs(\n        log_setups=[volcengine.vke.ClusterLoggingConfigLogSetupArgs(\n            enabled=False,\n            log_ttl=30,\n            log_type=\"Audit\",\n        )],\n    ),\n    pods_config=volcengine.vke.ClusterPodsConfigArgs(\n        pod_network_mode=\"VpcCniShared\",\n        vpc_cni_config=volcengine.vke.ClusterPodsConfigVpcCniConfigArgs(\n            subnet_ids=[\n                \"subnet-rrqvkt2nq1hcv0x57ccqf3x\",\n                \"subnet-miklcqh75vcw5smt1amo4ik5\",\n                \"subnet-13g0x0ytpm0hs3n6nu5j591lv\",\n            ],\n        ),\n    ),\n    services_config=volcengine.vke.ClusterServicesConfigArgs(\n        service_cidrsv4s=[\"172.30.0.0/18\"],\n    ),\n    tags=[volcengine.vke.ClusterTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vke.Cluster(\"foo\", new Volcengine.Vke.ClusterArgs\n        {\n            ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs\n            {\n                ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs\n                {\n                    PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs\n                    {\n                        Bandwidth = 1,\n                        BillingType = \"PostPaidByBandwidth\",\n                    },\n                },\n                ApiServerPublicAccessEnabled = true,\n                ResourcePublicAccessDefaultEnabled = true,\n                SubnetIds = \n                {\n                    \"subnet-rrqvkt2nq1hcv0x57ccqf3x\",\n                },\n            },\n            DeleteProtectionEnabled = false,\n            Description = \"created by terraform\",\n            LoggingConfig = new Volcengine.Vke.Inputs.ClusterLoggingConfigArgs\n            {\n                LogSetups = \n                {\n                    new Volcengine.Vke.Inputs.ClusterLoggingConfigLogSetupArgs\n                    {\n                        Enabled = false,\n                        LogTtl = 30,\n                        LogType = \"Audit\",\n                    },\n                },\n            },\n            PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs\n            {\n                PodNetworkMode = \"VpcCniShared\",\n                VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs\n                {\n                    SubnetIds = \n                    {\n                        \"subnet-rrqvkt2nq1hcv0x57ccqf3x\",\n                        \"subnet-miklcqh75vcw5smt1amo4ik5\",\n                        \"subnet-13g0x0ytpm0hs3n6nu5j591lv\",\n                    },\n                },\n            },\n            ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs\n            {\n                ServiceCidrsv4s = \n                {\n                    \"172.30.0.0/18\",\n                },\n            },\n            Tags = \n            {\n                new Volcengine.Vke.Inputs.ClusterTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.NewCluster(ctx, \"foo\", \u0026vke.ClusterArgs{\n\t\t\tClusterConfig: \u0026vke.ClusterClusterConfigArgs{\n\t\t\t\tApiServerPublicAccessConfig: \u0026vke.ClusterClusterConfigApiServerPublicAccessConfigArgs{\n\t\t\t\t\tPublicAccessNetworkConfig: \u0026vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs{\n\t\t\t\t\t\tBandwidth:   pulumi.Int(1),\n\t\t\t\t\t\tBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tApiServerPublicAccessEnabled:       pulumi.Bool(true),\n\t\t\t\tResourcePublicAccessDefaultEnabled: pulumi.Bool(true),\n\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"subnet-rrqvkt2nq1hcv0x57ccqf3x\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDeleteProtectionEnabled: pulumi.Bool(false),\n\t\t\tDescription:             pulumi.String(\"created by terraform\"),\n\t\t\tLoggingConfig: \u0026vke.ClusterLoggingConfigArgs{\n\t\t\t\tLogSetups: vke.ClusterLoggingConfigLogSetupArray{\n\t\t\t\t\t\u0026vke.ClusterLoggingConfigLogSetupArgs{\n\t\t\t\t\t\tEnabled: pulumi.Bool(false),\n\t\t\t\t\t\tLogTtl:  pulumi.Int(30),\n\t\t\t\t\t\tLogType: pulumi.String(\"Audit\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tPodsConfig: \u0026vke.ClusterPodsConfigArgs{\n\t\t\t\tPodNetworkMode: pulumi.String(\"VpcCniShared\"),\n\t\t\t\tVpcCniConfig: \u0026vke.ClusterPodsConfigVpcCniConfigArgs{\n\t\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"subnet-rrqvkt2nq1hcv0x57ccqf3x\"),\n\t\t\t\t\t\tpulumi.String(\"subnet-miklcqh75vcw5smt1amo4ik5\"),\n\t\t\t\t\t\tpulumi.String(\"subnet-13g0x0ytpm0hs3n6nu5j591lv\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tServicesConfig: \u0026vke.ClusterServicesConfigArgs{\n\t\t\t\tServiceCidrsv4s: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"172.30.0.0/18\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: vke.ClusterTagArray{\n\t\t\t\t\u0026vke.ClusterTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Cluster(\"foo\", ClusterArgs.builder()        \n            .clusterConfig(ClusterClusterConfigArgs.builder()\n                .apiServerPublicAccessConfig(ClusterClusterConfigApiServerPublicAccessConfigArgs.builder()\n                    .publicAccessNetworkConfig(ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs.builder()\n                        .bandwidth(1)\n                        .billingType(\"PostPaidByBandwidth\")\n                        .build())\n                    .build())\n                .apiServerPublicAccessEnabled(true)\n                .resourcePublicAccessDefaultEnabled(true)\n                .subnetIds(\"subnet-rrqvkt2nq1hcv0x57ccqf3x\")\n                .build())\n            .deleteProtectionEnabled(false)\n            .description(\"created by terraform\")\n            .loggingConfig(ClusterLoggingConfigArgs.builder()\n                .logSetups(ClusterLoggingConfigLogSetupArgs.builder()\n                    .enabled(false)\n                    .logTtl(30)\n                    .logType(\"Audit\")\n                    .build())\n                .build())\n            .podsConfig(ClusterPodsConfigArgs.builder()\n                .podNetworkMode(\"VpcCniShared\")\n                .vpcCniConfig(ClusterPodsConfigVpcCniConfigArgs.builder()\n                    .subnetIds(                    \n                        \"subnet-rrqvkt2nq1hcv0x57ccqf3x\",\n                        \"subnet-miklcqh75vcw5smt1amo4ik5\",\n                        \"subnet-13g0x0ytpm0hs3n6nu5j591lv\")\n                    .build())\n                .build())\n            .servicesConfig(ClusterServicesConfigArgs.builder()\n                .serviceCidrsv4s(\"172.30.0.0/18\")\n                .build())\n            .tags(ClusterTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vke:Cluster\n    properties:\n      clusterConfig:\n        apiServerPublicAccessConfig:\n          publicAccessNetworkConfig:\n            bandwidth: 1\n            billingType: PostPaidByBandwidth\n        apiServerPublicAccessEnabled: true\n        resourcePublicAccessDefaultEnabled: true\n        subnetIds:\n          - subnet-rrqvkt2nq1hcv0x57ccqf3x\n      deleteProtectionEnabled: false\n      description: created by terraform\n      loggingConfig:\n        logSetups:\n          - enabled: false\n            logTtl: 30\n            logType: Audit\n      podsConfig:\n        podNetworkMode: VpcCniShared\n        vpcCniConfig:\n          subnetIds:\n            - subnet-rrqvkt2nq1hcv0x57ccqf3x\n            - subnet-miklcqh75vcw5smt1amo4ik5\n            - subnet-13g0x0ytpm0hs3n6nu5j591lv\n      servicesConfig:\n        serviceCidrsv4s:\n          - 172.30.0.0/18\n      tags:\n        - key: k1\n          value: v1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVkeCluster can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vke/cluster:Cluster default cc9l74mvqtofjnoj5****\n```\n\n ",
            "properties": {
                "clientToken": {
                    "type": "string",
                    "description": "ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.\n"
                },
                "clusterConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterClusterConfig:ClusterClusterConfig",
                    "description": "The config of the cluster.\n"
                },
                "deleteProtectionEnabled": {
                    "type": "boolean",
                    "description": "The delete protection of the cluster, the value is `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cluster.\n"
                },
                "eipAllocationId": {
                    "type": "string",
                    "description": "Eip allocation Id.\n"
                },
                "kubeconfigPrivate": {
                    "type": "string",
                    "description": "Kubeconfig data with private network access, returned in BASE64 encoding, it is suggested to use vke_kubeconfig instead.\n"
                },
                "kubeconfigPublic": {
                    "type": "string",
                    "description": "Kubeconfig data with public network access, returned in BASE64 encoding, it is suggested to use vke_kubeconfig instead.\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of Kubernetes specified when creating a VKE cluster (specified to patch version), if not specified, the latest Kubernetes version supported by VKE is used by default, which is a 3-segment version format starting with a lowercase v, that is, KubernetesVersion with IsLatestVersion=True in the return value of ListSupportedVersions.\n"
                },
                "loggingConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterLoggingConfig:ClusterLoggingConfig",
                    "description": "Cluster log configuration information.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "podsConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterPodsConfig:ClusterPodsConfig",
                    "description": "The config of the pods.\n"
                },
                "servicesConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterServicesConfig:ClusterServicesConfig",
                    "description": "The config of the services.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/ClusterTag:ClusterTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "required": [
                "clusterConfig",
                "eipAllocationId",
                "kubeconfigPrivate",
                "kubeconfigPublic",
                "kubernetesVersion",
                "name",
                "podsConfig",
                "servicesConfig"
            ],
            "inputProperties": {
                "clientToken": {
                    "type": "string",
                    "description": "ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.\n"
                },
                "clusterConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterClusterConfig:ClusterClusterConfig",
                    "description": "The config of the cluster.\n"
                },
                "deleteProtectionEnabled": {
                    "type": "boolean",
                    "description": "The delete protection of the cluster, the value is `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cluster.\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of Kubernetes specified when creating a VKE cluster (specified to patch version), if not specified, the latest Kubernetes version supported by VKE is used by default, which is a 3-segment version format starting with a lowercase v, that is, KubernetesVersion with IsLatestVersion=True in the return value of ListSupportedVersions.\n",
                    "willReplaceOnChanges": true
                },
                "loggingConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterLoggingConfig:ClusterLoggingConfig",
                    "description": "Cluster log configuration information.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "podsConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterPodsConfig:ClusterPodsConfig",
                    "description": "The config of the pods.\n"
                },
                "servicesConfig": {
                    "$ref": "#/types/volcengine:vke/ClusterServicesConfig:ClusterServicesConfig",
                    "description": "The config of the services.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/ClusterTag:ClusterTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "requiredInputs": [
                "clusterConfig",
                "podsConfig",
                "servicesConfig"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "clientToken": {
                        "type": "string",
                        "description": "ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.\n"
                    },
                    "clusterConfig": {
                        "$ref": "#/types/volcengine:vke/ClusterClusterConfig:ClusterClusterConfig",
                        "description": "The config of the cluster.\n"
                    },
                    "deleteProtectionEnabled": {
                        "type": "boolean",
                        "description": "The delete protection of the cluster, the value is `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the cluster.\n"
                    },
                    "eipAllocationId": {
                        "type": "string",
                        "description": "Eip allocation Id.\n"
                    },
                    "kubeconfigPrivate": {
                        "type": "string",
                        "description": "Kubeconfig data with private network access, returned in BASE64 encoding, it is suggested to use vke_kubeconfig instead.\n"
                    },
                    "kubeconfigPublic": {
                        "type": "string",
                        "description": "Kubeconfig data with public network access, returned in BASE64 encoding, it is suggested to use vke_kubeconfig instead.\n"
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "The version of Kubernetes specified when creating a VKE cluster (specified to patch version), if not specified, the latest Kubernetes version supported by VKE is used by default, which is a 3-segment version format starting with a lowercase v, that is, KubernetesVersion with IsLatestVersion=True in the return value of ListSupportedVersions.\n",
                        "willReplaceOnChanges": true
                    },
                    "loggingConfig": {
                        "$ref": "#/types/volcengine:vke/ClusterLoggingConfig:ClusterLoggingConfig",
                        "description": "Cluster log configuration information.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster.\n"
                    },
                    "podsConfig": {
                        "$ref": "#/types/volcengine:vke/ClusterPodsConfig:ClusterPodsConfig",
                        "description": "The config of the pods.\n"
                    },
                    "servicesConfig": {
                        "$ref": "#/types/volcengine:vke/ClusterServicesConfig:ClusterServicesConfig",
                        "description": "The config of the services.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/ClusterTag:ClusterTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vke/defaultNodePool:DefaultNodePool": {
            "description": "Provides a resource to manage vke default node pool\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultDefaultNodePool = new volcengine.vke.DefaultNodePool(\"default\", {\n    clusterId: \"ccc2umdnqtoflv91lqtq0\",\n    instances: [\n        {\n            additionalContainerStorageEnabled: false,\n            instanceId: \"i-ybvza90ohwexzk8emaa3\",\n            keepInstanceName: false,\n        },\n        {\n            additionalContainerStorageEnabled: true,\n            containerStoragePath: \"/\",\n            instanceId: \"i-ybvza90ohxexzkm4zihf\",\n            keepInstanceName: false,\n        },\n    ],\n    kubernetesConfig: {\n        cordon: true,\n        labels: [\n            {\n                key: \"aa\",\n                value: \"bb\",\n            },\n            {\n                key: \"cccc\",\n                value: \"dddd\",\n            },\n        ],\n        taints: [\n            {\n                effect: \"NoSchedule\",\n                key: \"cccc\",\n                value: \"dddd\",\n            },\n            {\n                effect: \"NoSchedule\",\n                key: \"aa11\",\n                value: \"111\",\n            },\n        ],\n    },\n    nodeConfig: {\n        ecsTags: [{\n            key: \"ecs_k1\",\n            value: \"ecs_v1\",\n        }],\n        initializeScript: \"ISMvYmluL2Jhc2gKZWNobyAx\",\n        security: {\n            login: {\n                password: \"amw4WTdVcTRJVVFsUXpVTw==\",\n            },\n            securityGroupIds: [\n                \"sg-2d6t6djr2wge858ozfczv41xq\",\n                \"sg-3re6v4lz76yv45zsk2hjvvwcj\",\n            ],\n            securityStrategies: [\"Hids\"],\n        },\n    },\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vke.DefaultNodePool(\"default\",\n    cluster_id=\"ccc2umdnqtoflv91lqtq0\",\n    instances=[\n        volcengine.vke.DefaultNodePoolInstanceArgs(\n            additional_container_storage_enabled=False,\n            instance_id=\"i-ybvza90ohwexzk8emaa3\",\n            keep_instance_name=False,\n        ),\n        volcengine.vke.DefaultNodePoolInstanceArgs(\n            additional_container_storage_enabled=True,\n            container_storage_path=\"/\",\n            instance_id=\"i-ybvza90ohxexzkm4zihf\",\n            keep_instance_name=False,\n        ),\n    ],\n    kubernetes_config=volcengine.vke.DefaultNodePoolKubernetesConfigArgs(\n        cordon=True,\n        labels=[\n            volcengine.vke.DefaultNodePoolKubernetesConfigLabelArgs(\n                key=\"aa\",\n                value=\"bb\",\n            ),\n            volcengine.vke.DefaultNodePoolKubernetesConfigLabelArgs(\n                key=\"cccc\",\n                value=\"dddd\",\n            ),\n        ],\n        taints=[\n            volcengine.vke.DefaultNodePoolKubernetesConfigTaintArgs(\n                effect=\"NoSchedule\",\n                key=\"cccc\",\n                value=\"dddd\",\n            ),\n            volcengine.vke.DefaultNodePoolKubernetesConfigTaintArgs(\n                effect=\"NoSchedule\",\n                key=\"aa11\",\n                value=\"111\",\n            ),\n        ],\n    ),\n    node_config=volcengine.vke.DefaultNodePoolNodeConfigArgs(\n        ecs_tags=[volcengine.vke.DefaultNodePoolNodeConfigEcsTagArgs(\n            key=\"ecs_k1\",\n            value=\"ecs_v1\",\n        )],\n        initialize_script=\"ISMvYmluL2Jhc2gKZWNobyAx\",\n        security=volcengine.vke.DefaultNodePoolNodeConfigSecurityArgs(\n            login=volcengine.vke.DefaultNodePoolNodeConfigSecurityLoginArgs(\n                password=\"amw4WTdVcTRJVVFsUXpVTw==\",\n            ),\n            security_group_ids=[\n                \"sg-2d6t6djr2wge858ozfczv41xq\",\n                \"sg-3re6v4lz76yv45zsk2hjvvwcj\",\n            ],\n            security_strategies=[\"Hids\"],\n        ),\n    ),\n    tags=[volcengine.vke.DefaultNodePoolTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Volcengine.Vke.DefaultNodePool(\"default\", new Volcengine.Vke.DefaultNodePoolArgs\n        {\n            ClusterId = \"ccc2umdnqtoflv91lqtq0\",\n            Instances = \n            {\n                new Volcengine.Vke.Inputs.DefaultNodePoolInstanceArgs\n                {\n                    AdditionalContainerStorageEnabled = false,\n                    InstanceId = \"i-ybvza90ohwexzk8emaa3\",\n                    KeepInstanceName = false,\n                },\n                new Volcengine.Vke.Inputs.DefaultNodePoolInstanceArgs\n                {\n                    AdditionalContainerStorageEnabled = true,\n                    ContainerStoragePath = \"/\",\n                    InstanceId = \"i-ybvza90ohxexzkm4zihf\",\n                    KeepInstanceName = false,\n                },\n            },\n            KubernetesConfig = new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigArgs\n            {\n                Cordon = true,\n                Labels = \n                {\n                    new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigLabelArgs\n                    {\n                        Key = \"aa\",\n                        Value = \"bb\",\n                    },\n                    new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigLabelArgs\n                    {\n                        Key = \"cccc\",\n                        Value = \"dddd\",\n                    },\n                },\n                Taints = \n                {\n                    new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigTaintArgs\n                    {\n                        Effect = \"NoSchedule\",\n                        Key = \"cccc\",\n                        Value = \"dddd\",\n                    },\n                    new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigTaintArgs\n                    {\n                        Effect = \"NoSchedule\",\n                        Key = \"aa11\",\n                        Value = \"111\",\n                    },\n                },\n            },\n            NodeConfig = new Volcengine.Vke.Inputs.DefaultNodePoolNodeConfigArgs\n            {\n                EcsTags = \n                {\n                    new Volcengine.Vke.Inputs.DefaultNodePoolNodeConfigEcsTagArgs\n                    {\n                        Key = \"ecs_k1\",\n                        Value = \"ecs_v1\",\n                    },\n                },\n                InitializeScript = \"ISMvYmluL2Jhc2gKZWNobyAx\",\n                Security = new Volcengine.Vke.Inputs.DefaultNodePoolNodeConfigSecurityArgs\n                {\n                    Login = new Volcengine.Vke.Inputs.DefaultNodePoolNodeConfigSecurityLoginArgs\n                    {\n                        Password = \"amw4WTdVcTRJVVFsUXpVTw==\",\n                    },\n                    SecurityGroupIds = \n                    {\n                        \"sg-2d6t6djr2wge858ozfczv41xq\",\n                        \"sg-3re6v4lz76yv45zsk2hjvvwcj\",\n                    },\n                    SecurityStrategies = \n                    {\n                        \"Hids\",\n                    },\n                },\n            },\n            Tags = \n            {\n                new Volcengine.Vke.Inputs.DefaultNodePoolTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.NewDefaultNodePool(ctx, \"default\", \u0026vke.DefaultNodePoolArgs{\n\t\t\tClusterId: pulumi.String(\"ccc2umdnqtoflv91lqtq0\"),\n\t\t\tInstances: vke.DefaultNodePoolInstanceArray{\n\t\t\t\t\u0026vke.DefaultNodePoolInstanceArgs{\n\t\t\t\t\tAdditionalContainerStorageEnabled: pulumi.Bool(false),\n\t\t\t\t\tInstanceId:                        pulumi.String(\"i-ybvza90ohwexzk8emaa3\"),\n\t\t\t\t\tKeepInstanceName:                  pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t\t\u0026vke.DefaultNodePoolInstanceArgs{\n\t\t\t\t\tAdditionalContainerStorageEnabled: pulumi.Bool(true),\n\t\t\t\t\tContainerStoragePath:              pulumi.String(\"/\"),\n\t\t\t\t\tInstanceId:                        pulumi.String(\"i-ybvza90ohxexzkm4zihf\"),\n\t\t\t\t\tKeepInstanceName:                  pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\tKubernetesConfig: \u0026vke.DefaultNodePoolKubernetesConfigArgs{\n\t\t\t\tCordon: pulumi.Bool(true),\n\t\t\t\tLabels: vke.DefaultNodePoolKubernetesConfigLabelArray{\n\t\t\t\t\t\u0026vke.DefaultNodePoolKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"aa\"),\n\t\t\t\t\t\tValue: pulumi.String(\"bb\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.DefaultNodePoolKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"cccc\"),\n\t\t\t\t\t\tValue: pulumi.String(\"dddd\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTaints: vke.DefaultNodePoolKubernetesConfigTaintArray{\n\t\t\t\t\t\u0026vke.DefaultNodePoolKubernetesConfigTaintArgs{\n\t\t\t\t\t\tEffect: pulumi.String(\"NoSchedule\"),\n\t\t\t\t\t\tKey:    pulumi.String(\"cccc\"),\n\t\t\t\t\t\tValue:  pulumi.String(\"dddd\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.DefaultNodePoolKubernetesConfigTaintArgs{\n\t\t\t\t\t\tEffect: pulumi.String(\"NoSchedule\"),\n\t\t\t\t\t\tKey:    pulumi.String(\"aa11\"),\n\t\t\t\t\t\tValue:  pulumi.String(\"111\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tNodeConfig: \u0026vke.DefaultNodePoolNodeConfigArgs{\n\t\t\t\tEcsTags: vke.DefaultNodePoolNodeConfigEcsTagArray{\n\t\t\t\t\t\u0026vke.DefaultNodePoolNodeConfigEcsTagArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"ecs_k1\"),\n\t\t\t\t\t\tValue: pulumi.String(\"ecs_v1\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tInitializeScript: pulumi.String(\"ISMvYmluL2Jhc2gKZWNobyAx\"),\n\t\t\t\tSecurity: \u0026vke.DefaultNodePoolNodeConfigSecurityArgs{\n\t\t\t\t\tLogin: \u0026vke.DefaultNodePoolNodeConfigSecurityLoginArgs{\n\t\t\t\t\t\tPassword: pulumi.String(\"amw4WTdVcTRJVVFsUXpVTw==\"),\n\t\t\t\t\t},\n\t\t\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"sg-2d6t6djr2wge858ozfczv41xq\"),\n\t\t\t\t\t\tpulumi.String(\"sg-3re6v4lz76yv45zsk2hjvvwcj\"),\n\t\t\t\t\t},\n\t\t\t\t\tSecurityStrategies: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Hids\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: vke.DefaultNodePoolTagArray{\n\t\t\t\t\u0026vke.DefaultNodePoolTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new DefaultNodePool(\"default\", DefaultNodePoolArgs.builder()        \n            .clusterId(\"ccc2umdnqtoflv91lqtq0\")\n            .instances(            \n                DefaultNodePoolInstanceArgs.builder()\n                    .additionalContainerStorageEnabled(false)\n                    .instanceId(\"i-ybvza90ohwexzk8emaa3\")\n                    .keepInstanceName(false)\n                    .build(),\n                DefaultNodePoolInstanceArgs.builder()\n                    .additionalContainerStorageEnabled(true)\n                    .containerStoragePath(\"/\")\n                    .instanceId(\"i-ybvza90ohxexzkm4zihf\")\n                    .keepInstanceName(false)\n                    .build())\n            .kubernetesConfig(DefaultNodePoolKubernetesConfigArgs.builder()\n                .cordon(true)\n                .labels(                \n                    DefaultNodePoolKubernetesConfigLabelArgs.builder()\n                        .key(\"aa\")\n                        .value(\"bb\")\n                        .build(),\n                    DefaultNodePoolKubernetesConfigLabelArgs.builder()\n                        .key(\"cccc\")\n                        .value(\"dddd\")\n                        .build())\n                .taints(                \n                    DefaultNodePoolKubernetesConfigTaintArgs.builder()\n                        .effect(\"NoSchedule\")\n                        .key(\"cccc\")\n                        .value(\"dddd\")\n                        .build(),\n                    DefaultNodePoolKubernetesConfigTaintArgs.builder()\n                        .effect(\"NoSchedule\")\n                        .key(\"aa11\")\n                        .value(\"111\")\n                        .build())\n                .build())\n            .nodeConfig(DefaultNodePoolNodeConfigArgs.builder()\n                .ecsTags(DefaultNodePoolNodeConfigEcsTagArgs.builder()\n                    .key(\"ecs_k1\")\n                    .value(\"ecs_v1\")\n                    .build())\n                .initializeScript(\"ISMvYmluL2Jhc2gKZWNobyAx\")\n                .security(DefaultNodePoolNodeConfigSecurityArgs.builder()\n                    .login(DefaultNodePoolNodeConfigSecurityLoginArgs.builder()\n                        .password(\"amw4WTdVcTRJVVFsUXpVTw==\")\n                        .build())\n                    .securityGroupIds(                    \n                        \"sg-2d6t6djr2wge858ozfczv41xq\",\n                        \"sg-3re6v4lz76yv45zsk2hjvvwcj\")\n                    .securityStrategies(\"Hids\")\n                    .build())\n                .build())\n            .tags(DefaultNodePoolTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: volcengine:vke:DefaultNodePool\n    properties:\n      clusterId: ccc2umdnqtoflv91lqtq0\n      instances:\n        - additionalContainerStorageEnabled: false\n          instanceId: i-ybvza90ohwexzk8emaa3\n          keepInstanceName: false\n        - additionalContainerStorageEnabled: true\n          containerStoragePath: /\n          instanceId: i-ybvza90ohxexzkm4zihf\n          keepInstanceName: false\n      kubernetesConfig:\n        cordon: true\n        labels:\n          - key: aa\n            value: bb\n          - key: cccc\n            value: dddd\n        taints:\n          - effect: NoSchedule\n            key: cccc\n            value: dddd\n          - effect: NoSchedule\n            key: aa11\n            value: 111\n      nodeConfig:\n        ecsTags:\n          - key: ecs_k1\n            value: ecs_v1\n        initializeScript: ISMvYmluL2Jhc2gKZWNobyAx\n        security:\n          login:\n            password: amw4WTdVcTRJVVFsUXpVTw==\n          securityGroupIds:\n            - sg-2d6t6djr2wge858ozfczv41xq\n            - sg-3re6v4lz76yv45zsk2hjvvwcj\n          securityStrategies:\n            - Hids\n      tags:\n        - key: k1\n          value: v1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVKE default node can be imported using the node id, e.g.\n\n```sh\n $ pulumi import volcengine:vke/defaultNodePool:DefaultNodePool default nc5t5epmrsf****\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ClusterId of NodePool.\n"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolInstance:DefaultNodePoolInstance"
                    },
                    "description": "The ECS InstanceIds add to NodePool.\n"
                },
                "isImport": {
                    "type": "boolean",
                    "description": "Is import of the DefaultNodePool. It only works when imported, set to true.\n"
                },
                "kubernetesConfig": {
                    "$ref": "#/types/volcengine:vke/DefaultNodePoolKubernetesConfig:DefaultNodePoolKubernetesConfig",
                    "description": "The KubernetesConfig of NodeConfig.\n"
                },
                "nodeConfig": {
                    "$ref": "#/types/volcengine:vke/DefaultNodePoolNodeConfig:DefaultNodePoolNodeConfig",
                    "description": "The Config of NodePool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolTag:DefaultNodePoolTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "required": [
                "clusterId",
                "isImport",
                "kubernetesConfig",
                "nodeConfig"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ClusterId of NodePool.\n",
                    "willReplaceOnChanges": true
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolInstance:DefaultNodePoolInstance"
                    },
                    "description": "The ECS InstanceIds add to NodePool.\n"
                },
                "kubernetesConfig": {
                    "$ref": "#/types/volcengine:vke/DefaultNodePoolKubernetesConfig:DefaultNodePoolKubernetesConfig",
                    "description": "The KubernetesConfig of NodeConfig.\n"
                },
                "nodeConfig": {
                    "$ref": "#/types/volcengine:vke/DefaultNodePoolNodeConfig:DefaultNodePoolNodeConfig",
                    "description": "The Config of NodePool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolTag:DefaultNodePoolTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "kubernetesConfig",
                "nodeConfig"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultNodePool resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ClusterId of NodePool.\n",
                        "willReplaceOnChanges": true
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/DefaultNodePoolInstance:DefaultNodePoolInstance"
                        },
                        "description": "The ECS InstanceIds add to NodePool.\n"
                    },
                    "isImport": {
                        "type": "boolean",
                        "description": "Is import of the DefaultNodePool. It only works when imported, set to true.\n"
                    },
                    "kubernetesConfig": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolKubernetesConfig:DefaultNodePoolKubernetesConfig",
                        "description": "The KubernetesConfig of NodeConfig.\n"
                    },
                    "nodeConfig": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolNodeConfig:DefaultNodePoolNodeConfig",
                        "description": "The Config of NodePool.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/DefaultNodePoolTag:DefaultNodePoolTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vke/defaultNodePoolBatchAttach:DefaultNodePoolBatchAttach": {
            "description": "Provides a resource to manage vke default node pool batch attach\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-project1\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-subnet-test-2\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: \"cn-beijing-a\",\n    vpcId: fooVpc.id,\n});\nconst fooSecurityGroup = new volcengine.vpc.SecurityGroup(\"fooSecurityGroup\", {\n    vpcId: fooVpc.id,\n    securityGroupName: \"acc-test-security-group2\",\n});\nconst fooInstance = new volcengine.ecs.Instance(\"fooInstance\", {\n    imageId: \"image-ybqi99s7yq8rx7mnk44b\",\n    instanceType: \"ecs.g1ie.large\",\n    instanceName: \"acc-test-ecs-name2\",\n    password: \"93f0cb0614Aab12\",\n    instanceChargeType: \"PostPaid\",\n    systemVolumeType: \"ESSD_PL0\",\n    systemVolumeSize: 40,\n    subnetId: fooSubnet.id,\n    securityGroupIds: [fooSecurityGroup.id],\n});\nconst fooCluster = new volcengine.vke.Cluster(\"fooCluster\", {\n    description: \"created by terraform\",\n    deleteProtectionEnabled: false,\n    clusterConfig: {\n        subnetIds: [fooSubnet.id],\n        apiServerPublicAccessEnabled: true,\n        apiServerPublicAccessConfig: {\n            publicAccessNetworkConfig: {\n                billingType: \"PostPaidByBandwidth\",\n                bandwidth: 1,\n            },\n        },\n        resourcePublicAccessDefaultEnabled: true,\n    },\n    podsConfig: {\n        podNetworkMode: \"VpcCniShared\",\n        vpcCniConfig: {\n            subnetIds: [fooSubnet.id],\n        },\n    },\n    servicesConfig: {\n        serviceCidrsv4s: [\"172.30.0.0/18\"],\n    },\n    tags: [{\n        key: \"tf-k1\",\n        value: \"tf-v1\",\n    }],\n});\nconst defaultDefaultNodePool = new volcengine.vke.DefaultNodePool(\"defaultDefaultNodePool\", {\n    clusterId: fooCluster.id,\n    nodeConfig: {\n        security: {\n            login: {\n                password: \"amw4WTdVcTRJVVFsUXpVTw==\",\n            },\n            securityGroupIds: [fooSecurityGroup.id],\n            securityStrategies: [\"Hids\"],\n        },\n        initializeScript: \"ISMvYmluL2Jhc2gKZWNobyAx\",\n    },\n    kubernetesConfig: {\n        labels: [\n            {\n                key: \"tf-key1\",\n                value: \"tf-value1\",\n            },\n            {\n                key: \"tf-key2\",\n                value: \"tf-value2\",\n            },\n        ],\n        taints: [\n            {\n                key: \"tf-key3\",\n                value: \"tf-value3\",\n                effect: \"NoSchedule\",\n            },\n            {\n                key: \"tf-key4\",\n                value: \"tf-value4\",\n                effect: \"NoSchedule\",\n            },\n        ],\n        cordon: true,\n    },\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n});\nconst defaultDefaultNodePoolBatchAttach = new volcengine.vke.DefaultNodePoolBatchAttach(\"defaultDefaultNodePoolBatchAttach\", {\n    clusterId: fooCluster.id,\n    defaultNodePoolId: defaultDefaultNodePool.id,\n    instances: [{\n        instanceId: fooInstance.id,\n        keepInstanceName: true,\n        additionalContainerStorageEnabled: false,\n    }],\n    kubernetesConfig: {\n        labels: [\n            {\n                key: \"tf-key1\",\n                value: \"tf-value1\",\n            },\n            {\n                key: \"tf-key2\",\n                value: \"tf-value2\",\n            },\n        ],\n        taints: [\n            {\n                key: \"tf-key3\",\n                value: \"tf-value3\",\n                effect: \"NoSchedule\",\n            },\n            {\n                key: \"tf-key4\",\n                value: \"tf-value4\",\n                effect: \"NoSchedule\",\n            },\n        ],\n        cordon: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-project1\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-subnet-test-2\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=\"cn-beijing-a\",\n    vpc_id=foo_vpc.id)\nfoo_security_group = volcengine.vpc.SecurityGroup(\"fooSecurityGroup\",\n    vpc_id=foo_vpc.id,\n    security_group_name=\"acc-test-security-group2\")\nfoo_instance = volcengine.ecs.Instance(\"fooInstance\",\n    image_id=\"image-ybqi99s7yq8rx7mnk44b\",\n    instance_type=\"ecs.g1ie.large\",\n    instance_name=\"acc-test-ecs-name2\",\n    password=\"93f0cb0614Aab12\",\n    instance_charge_type=\"PostPaid\",\n    system_volume_type=\"ESSD_PL0\",\n    system_volume_size=40,\n    subnet_id=foo_subnet.id,\n    security_group_ids=[foo_security_group.id])\nfoo_cluster = volcengine.vke.Cluster(\"fooCluster\",\n    description=\"created by terraform\",\n    delete_protection_enabled=False,\n    cluster_config=volcengine.vke.ClusterClusterConfigArgs(\n        subnet_ids=[foo_subnet.id],\n        api_server_public_access_enabled=True,\n        api_server_public_access_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigArgs(\n            public_access_network_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs(\n                billing_type=\"PostPaidByBandwidth\",\n                bandwidth=1,\n            ),\n        ),\n        resource_public_access_default_enabled=True,\n    ),\n    pods_config=volcengine.vke.ClusterPodsConfigArgs(\n        pod_network_mode=\"VpcCniShared\",\n        vpc_cni_config=volcengine.vke.ClusterPodsConfigVpcCniConfigArgs(\n            subnet_ids=[foo_subnet.id],\n        ),\n    ),\n    services_config=volcengine.vke.ClusterServicesConfigArgs(\n        service_cidrsv4s=[\"172.30.0.0/18\"],\n    ),\n    tags=[volcengine.vke.ClusterTagArgs(\n        key=\"tf-k1\",\n        value=\"tf-v1\",\n    )])\ndefault_default_node_pool = volcengine.vke.DefaultNodePool(\"defaultDefaultNodePool\",\n    cluster_id=foo_cluster.id,\n    node_config=volcengine.vke.DefaultNodePoolNodeConfigArgs(\n        security=volcengine.vke.DefaultNodePoolNodeConfigSecurityArgs(\n            login=volcengine.vke.DefaultNodePoolNodeConfigSecurityLoginArgs(\n                password=\"amw4WTdVcTRJVVFsUXpVTw==\",\n            ),\n            security_group_ids=[foo_security_group.id],\n            security_strategies=[\"Hids\"],\n        ),\n        initialize_script=\"ISMvYmluL2Jhc2gKZWNobyAx\",\n    ),\n    kubernetes_config=volcengine.vke.DefaultNodePoolKubernetesConfigArgs(\n        labels=[\n            volcengine.vke.DefaultNodePoolKubernetesConfigLabelArgs(\n                key=\"tf-key1\",\n                value=\"tf-value1\",\n            ),\n            volcengine.vke.DefaultNodePoolKubernetesConfigLabelArgs(\n                key=\"tf-key2\",\n                value=\"tf-value2\",\n            ),\n        ],\n        taints=[\n            volcengine.vke.DefaultNodePoolKubernetesConfigTaintArgs(\n                key=\"tf-key3\",\n                value=\"tf-value3\",\n                effect=\"NoSchedule\",\n            ),\n            volcengine.vke.DefaultNodePoolKubernetesConfigTaintArgs(\n                key=\"tf-key4\",\n                value=\"tf-value4\",\n                effect=\"NoSchedule\",\n            ),\n        ],\n        cordon=True,\n    ),\n    tags=[volcengine.vke.DefaultNodePoolTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )])\ndefault_default_node_pool_batch_attach = volcengine.vke.DefaultNodePoolBatchAttach(\"defaultDefaultNodePoolBatchAttach\",\n    cluster_id=foo_cluster.id,\n    default_node_pool_id=default_default_node_pool.id,\n    instances=[volcengine.vke.DefaultNodePoolBatchAttachInstanceArgs(\n        instance_id=foo_instance.id,\n        keep_instance_name=True,\n        additional_container_storage_enabled=False,\n    )],\n    kubernetes_config=volcengine.vke.DefaultNodePoolBatchAttachKubernetesConfigArgs(\n        labels=[\n            volcengine.vke.DefaultNodePoolBatchAttachKubernetesConfigLabelArgs(\n                key=\"tf-key1\",\n                value=\"tf-value1\",\n            ),\n            volcengine.vke.DefaultNodePoolBatchAttachKubernetesConfigLabelArgs(\n                key=\"tf-key2\",\n                value=\"tf-value2\",\n            ),\n        ],\n        taints=[\n            volcengine.vke.DefaultNodePoolBatchAttachKubernetesConfigTaintArgs(\n                key=\"tf-key3\",\n                value=\"tf-value3\",\n                effect=\"NoSchedule\",\n            ),\n            volcengine.vke.DefaultNodePoolBatchAttachKubernetesConfigTaintArgs(\n                key=\"tf-key4\",\n                value=\"tf-value4\",\n                effect=\"NoSchedule\",\n            ),\n        ],\n        cordon=True,\n    ))\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-project1\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-subnet-test-2\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = \"cn-beijing-a\",\n            VpcId = fooVpc.Id,\n        });\n        var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup(\"fooSecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            VpcId = fooVpc.Id,\n            SecurityGroupName = \"acc-test-security-group2\",\n        });\n        var fooInstance = new Volcengine.Ecs.Instance(\"fooInstance\", new Volcengine.Ecs.InstanceArgs\n        {\n            ImageId = \"image-ybqi99s7yq8rx7mnk44b\",\n            InstanceType = \"ecs.g1ie.large\",\n            InstanceName = \"acc-test-ecs-name2\",\n            Password = \"93f0cb0614Aab12\",\n            InstanceChargeType = \"PostPaid\",\n            SystemVolumeType = \"ESSD_PL0\",\n            SystemVolumeSize = 40,\n            SubnetId = fooSubnet.Id,\n            SecurityGroupIds = \n            {\n                fooSecurityGroup.Id,\n            },\n        });\n        var fooCluster = new Volcengine.Vke.Cluster(\"fooCluster\", new Volcengine.Vke.ClusterArgs\n        {\n            Description = \"created by terraform\",\n            DeleteProtectionEnabled = false,\n            ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs\n            {\n                SubnetIds = \n                {\n                    fooSubnet.Id,\n                },\n                ApiServerPublicAccessEnabled = true,\n                ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs\n                {\n                    PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs\n                    {\n                        BillingType = \"PostPaidByBandwidth\",\n                        Bandwidth = 1,\n                    },\n                },\n                ResourcePublicAccessDefaultEnabled = true,\n            },\n            PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs\n            {\n                PodNetworkMode = \"VpcCniShared\",\n                VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs\n                {\n                    SubnetIds = \n                    {\n                        fooSubnet.Id,\n                    },\n                },\n            },\n            ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs\n            {\n                ServiceCidrsv4s = \n                {\n                    \"172.30.0.0/18\",\n                },\n            },\n            Tags = \n            {\n                new Volcengine.Vke.Inputs.ClusterTagArgs\n                {\n                    Key = \"tf-k1\",\n                    Value = \"tf-v1\",\n                },\n            },\n        });\n        var defaultDefaultNodePool = new Volcengine.Vke.DefaultNodePool(\"defaultDefaultNodePool\", new Volcengine.Vke.DefaultNodePoolArgs\n        {\n            ClusterId = fooCluster.Id,\n            NodeConfig = new Volcengine.Vke.Inputs.DefaultNodePoolNodeConfigArgs\n            {\n                Security = new Volcengine.Vke.Inputs.DefaultNodePoolNodeConfigSecurityArgs\n                {\n                    Login = new Volcengine.Vke.Inputs.DefaultNodePoolNodeConfigSecurityLoginArgs\n                    {\n                        Password = \"amw4WTdVcTRJVVFsUXpVTw==\",\n                    },\n                    SecurityGroupIds = \n                    {\n                        fooSecurityGroup.Id,\n                    },\n                    SecurityStrategies = \n                    {\n                        \"Hids\",\n                    },\n                },\n                InitializeScript = \"ISMvYmluL2Jhc2gKZWNobyAx\",\n            },\n            KubernetesConfig = new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigArgs\n            {\n                Labels = \n                {\n                    new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigLabelArgs\n                    {\n                        Key = \"tf-key1\",\n                        Value = \"tf-value1\",\n                    },\n                    new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigLabelArgs\n                    {\n                        Key = \"tf-key2\",\n                        Value = \"tf-value2\",\n                    },\n                },\n                Taints = \n                {\n                    new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigTaintArgs\n                    {\n                        Key = \"tf-key3\",\n                        Value = \"tf-value3\",\n                        Effect = \"NoSchedule\",\n                    },\n                    new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigTaintArgs\n                    {\n                        Key = \"tf-key4\",\n                        Value = \"tf-value4\",\n                        Effect = \"NoSchedule\",\n                    },\n                },\n                Cordon = true,\n            },\n            Tags = \n            {\n                new Volcengine.Vke.Inputs.DefaultNodePoolTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n        });\n        var defaultDefaultNodePoolBatchAttach = new Volcengine.Vke.DefaultNodePoolBatchAttach(\"defaultDefaultNodePoolBatchAttach\", new Volcengine.Vke.DefaultNodePoolBatchAttachArgs\n        {\n            ClusterId = fooCluster.Id,\n            DefaultNodePoolId = defaultDefaultNodePool.Id,\n            Instances = \n            {\n                new Volcengine.Vke.Inputs.DefaultNodePoolBatchAttachInstanceArgs\n                {\n                    InstanceId = fooInstance.Id,\n                    KeepInstanceName = true,\n                    AdditionalContainerStorageEnabled = false,\n                },\n            },\n            KubernetesConfig = new Volcengine.Vke.Inputs.DefaultNodePoolBatchAttachKubernetesConfigArgs\n            {\n                Labels = \n                {\n                    new Volcengine.Vke.Inputs.DefaultNodePoolBatchAttachKubernetesConfigLabelArgs\n                    {\n                        Key = \"tf-key1\",\n                        Value = \"tf-value1\",\n                    },\n                    new Volcengine.Vke.Inputs.DefaultNodePoolBatchAttachKubernetesConfigLabelArgs\n                    {\n                        Key = \"tf-key2\",\n                        Value = \"tf-value2\",\n                    },\n                },\n                Taints = \n                {\n                    new Volcengine.Vke.Inputs.DefaultNodePoolBatchAttachKubernetesConfigTaintArgs\n                    {\n                        Key = \"tf-key3\",\n                        Value = \"tf-value3\",\n                        Effect = \"NoSchedule\",\n                    },\n                    new Volcengine.Vke.Inputs.DefaultNodePoolBatchAttachKubernetesConfigTaintArgs\n                    {\n                        Key = \"tf-key4\",\n                        Value = \"tf-value4\",\n                        Effect = \"NoSchedule\",\n                    },\n                },\n                Cordon = true,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-project1\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-subnet-test-2\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(\"cn-beijing-a\"),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSecurityGroup, err := vpc.NewSecurityGroup(ctx, \"fooSecurityGroup\", \u0026vpc.SecurityGroupArgs{\n\t\t\tVpcId:             fooVpc.ID(),\n\t\t\tSecurityGroupName: pulumi.String(\"acc-test-security-group2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooInstance, err := ecs.NewInstance(ctx, \"fooInstance\", \u0026ecs.InstanceArgs{\n\t\t\tImageId:            pulumi.String(\"image-ybqi99s7yq8rx7mnk44b\"),\n\t\t\tInstanceType:       pulumi.String(\"ecs.g1ie.large\"),\n\t\t\tInstanceName:       pulumi.String(\"acc-test-ecs-name2\"),\n\t\t\tPassword:           pulumi.String(\"93f0cb0614Aab12\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tSystemVolumeType:   pulumi.String(\"ESSD_PL0\"),\n\t\t\tSystemVolumeSize:   pulumi.Int(40),\n\t\t\tSubnetId:           fooSubnet.ID(),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tfooSecurityGroup.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooCluster, err := vke.NewCluster(ctx, \"fooCluster\", \u0026vke.ClusterArgs{\n\t\t\tDescription:             pulumi.String(\"created by terraform\"),\n\t\t\tDeleteProtectionEnabled: pulumi.Bool(false),\n\t\t\tClusterConfig: \u0026vke.ClusterClusterConfigArgs{\n\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\tfooSubnet.ID(),\n\t\t\t\t},\n\t\t\t\tApiServerPublicAccessEnabled: pulumi.Bool(true),\n\t\t\t\tApiServerPublicAccessConfig: \u0026vke.ClusterClusterConfigApiServerPublicAccessConfigArgs{\n\t\t\t\t\tPublicAccessNetworkConfig: \u0026vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs{\n\t\t\t\t\t\tBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\t\t\tBandwidth:   pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tResourcePublicAccessDefaultEnabled: pulumi.Bool(true),\n\t\t\t},\n\t\t\tPodsConfig: \u0026vke.ClusterPodsConfigArgs{\n\t\t\t\tPodNetworkMode: pulumi.String(\"VpcCniShared\"),\n\t\t\t\tVpcCniConfig: \u0026vke.ClusterPodsConfigVpcCniConfigArgs{\n\t\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\t\tfooSubnet.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tServicesConfig: \u0026vke.ClusterServicesConfigArgs{\n\t\t\t\tServiceCidrsv4s: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"172.30.0.0/18\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: vke.ClusterTagArray{\n\t\t\t\t\u0026vke.ClusterTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"tf-k1\"),\n\t\t\t\t\tValue: pulumi.String(\"tf-v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefaultDefaultNodePool, err := vke.NewDefaultNodePool(ctx, \"defaultDefaultNodePool\", \u0026vke.DefaultNodePoolArgs{\n\t\t\tClusterId: fooCluster.ID(),\n\t\t\tNodeConfig: \u0026vke.DefaultNodePoolNodeConfigArgs{\n\t\t\t\tSecurity: \u0026vke.DefaultNodePoolNodeConfigSecurityArgs{\n\t\t\t\t\tLogin: \u0026vke.DefaultNodePoolNodeConfigSecurityLoginArgs{\n\t\t\t\t\t\tPassword: pulumi.String(\"amw4WTdVcTRJVVFsUXpVTw==\"),\n\t\t\t\t\t},\n\t\t\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\t\t\tfooSecurityGroup.ID(),\n\t\t\t\t\t},\n\t\t\t\t\tSecurityStrategies: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Hids\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tInitializeScript: pulumi.String(\"ISMvYmluL2Jhc2gKZWNobyAx\"),\n\t\t\t},\n\t\t\tKubernetesConfig: \u0026vke.DefaultNodePoolKubernetesConfigArgs{\n\t\t\t\tLabels: vke.DefaultNodePoolKubernetesConfigLabelArray{\n\t\t\t\t\t\u0026vke.DefaultNodePoolKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"tf-key1\"),\n\t\t\t\t\t\tValue: pulumi.String(\"tf-value1\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.DefaultNodePoolKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"tf-key2\"),\n\t\t\t\t\t\tValue: pulumi.String(\"tf-value2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTaints: vke.DefaultNodePoolKubernetesConfigTaintArray{\n\t\t\t\t\t\u0026vke.DefaultNodePoolKubernetesConfigTaintArgs{\n\t\t\t\t\t\tKey:    pulumi.String(\"tf-key3\"),\n\t\t\t\t\t\tValue:  pulumi.String(\"tf-value3\"),\n\t\t\t\t\t\tEffect: pulumi.String(\"NoSchedule\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.DefaultNodePoolKubernetesConfigTaintArgs{\n\t\t\t\t\t\tKey:    pulumi.String(\"tf-key4\"),\n\t\t\t\t\t\tValue:  pulumi.String(\"tf-value4\"),\n\t\t\t\t\t\tEffect: pulumi.String(\"NoSchedule\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tCordon: pulumi.Bool(true),\n\t\t\t},\n\t\t\tTags: vke.DefaultNodePoolTagArray{\n\t\t\t\t\u0026vke.DefaultNodePoolTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vke.NewDefaultNodePoolBatchAttach(ctx, \"defaultDefaultNodePoolBatchAttach\", \u0026vke.DefaultNodePoolBatchAttachArgs{\n\t\t\tClusterId:         fooCluster.ID(),\n\t\t\tDefaultNodePoolId: defaultDefaultNodePool.ID(),\n\t\t\tInstances: vke.DefaultNodePoolBatchAttachInstanceArray{\n\t\t\t\t\u0026vke.DefaultNodePoolBatchAttachInstanceArgs{\n\t\t\t\t\tInstanceId:                        fooInstance.ID(),\n\t\t\t\t\tKeepInstanceName:                  pulumi.Bool(true),\n\t\t\t\t\tAdditionalContainerStorageEnabled: pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\tKubernetesConfig: \u0026vke.DefaultNodePoolBatchAttachKubernetesConfigArgs{\n\t\t\t\tLabels: vke.DefaultNodePoolBatchAttachKubernetesConfigLabelArray{\n\t\t\t\t\t\u0026vke.DefaultNodePoolBatchAttachKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"tf-key1\"),\n\t\t\t\t\t\tValue: pulumi.String(\"tf-value1\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.DefaultNodePoolBatchAttachKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"tf-key2\"),\n\t\t\t\t\t\tValue: pulumi.String(\"tf-value2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTaints: vke.DefaultNodePoolBatchAttachKubernetesConfigTaintArray{\n\t\t\t\t\t\u0026vke.DefaultNodePoolBatchAttachKubernetesConfigTaintArgs{\n\t\t\t\t\t\tKey:    pulumi.String(\"tf-key3\"),\n\t\t\t\t\t\tValue:  pulumi.String(\"tf-value3\"),\n\t\t\t\t\t\tEffect: pulumi.String(\"NoSchedule\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.DefaultNodePoolBatchAttachKubernetesConfigTaintArgs{\n\t\t\t\t\t\tKey:    pulumi.String(\"tf-key4\"),\n\t\t\t\t\t\tValue:  pulumi.String(\"tf-value4\"),\n\t\t\t\t\t\tEffect: pulumi.String(\"NoSchedule\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tCordon: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-project1\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-subnet-test-2\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(\"cn-beijing-a\")\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooSecurityGroup = new SecurityGroup(\"fooSecurityGroup\", SecurityGroupArgs.builder()        \n            .vpcId(fooVpc.id())\n            .securityGroupName(\"acc-test-security-group2\")\n            .build());\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .imageId(\"image-ybqi99s7yq8rx7mnk44b\")\n            .instanceType(\"ecs.g1ie.large\")\n            .instanceName(\"acc-test-ecs-name2\")\n            .password(\"93f0cb0614Aab12\")\n            .instanceChargeType(\"PostPaid\")\n            .systemVolumeType(\"ESSD_PL0\")\n            .systemVolumeSize(40)\n            .subnetId(fooSubnet.id())\n            .securityGroupIds(fooSecurityGroup.id())\n            .build());\n\n        var fooCluster = new Cluster(\"fooCluster\", ClusterArgs.builder()        \n            .description(\"created by terraform\")\n            .deleteProtectionEnabled(false)\n            .clusterConfig(ClusterClusterConfigArgs.builder()\n                .subnetIds(fooSubnet.id())\n                .apiServerPublicAccessEnabled(true)\n                .apiServerPublicAccessConfig(ClusterClusterConfigApiServerPublicAccessConfigArgs.builder()\n                    .publicAccessNetworkConfig(ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs.builder()\n                        .billingType(\"PostPaidByBandwidth\")\n                        .bandwidth(1)\n                        .build())\n                    .build())\n                .resourcePublicAccessDefaultEnabled(true)\n                .build())\n            .podsConfig(ClusterPodsConfigArgs.builder()\n                .podNetworkMode(\"VpcCniShared\")\n                .vpcCniConfig(ClusterPodsConfigVpcCniConfigArgs.builder()\n                    .subnetIds(fooSubnet.id())\n                    .build())\n                .build())\n            .servicesConfig(ClusterServicesConfigArgs.builder()\n                .serviceCidrsv4s(\"172.30.0.0/18\")\n                .build())\n            .tags(ClusterTagArgs.builder()\n                .key(\"tf-k1\")\n                .value(\"tf-v1\")\n                .build())\n            .build());\n\n        var defaultDefaultNodePool = new DefaultNodePool(\"defaultDefaultNodePool\", DefaultNodePoolArgs.builder()        \n            .clusterId(fooCluster.id())\n            .nodeConfig(DefaultNodePoolNodeConfigArgs.builder()\n                .security(DefaultNodePoolNodeConfigSecurityArgs.builder()\n                    .login(DefaultNodePoolNodeConfigSecurityLoginArgs.builder()\n                        .password(\"amw4WTdVcTRJVVFsUXpVTw==\")\n                        .build())\n                    .securityGroupIds(fooSecurityGroup.id())\n                    .securityStrategies(\"Hids\")\n                    .build())\n                .initializeScript(\"ISMvYmluL2Jhc2gKZWNobyAx\")\n                .build())\n            .kubernetesConfig(DefaultNodePoolKubernetesConfigArgs.builder()\n                .labels(                \n                    DefaultNodePoolKubernetesConfigLabelArgs.builder()\n                        .key(\"tf-key1\")\n                        .value(\"tf-value1\")\n                        .build(),\n                    DefaultNodePoolKubernetesConfigLabelArgs.builder()\n                        .key(\"tf-key2\")\n                        .value(\"tf-value2\")\n                        .build())\n                .taints(                \n                    DefaultNodePoolKubernetesConfigTaintArgs.builder()\n                        .key(\"tf-key3\")\n                        .value(\"tf-value3\")\n                        .effect(\"NoSchedule\")\n                        .build(),\n                    DefaultNodePoolKubernetesConfigTaintArgs.builder()\n                        .key(\"tf-key4\")\n                        .value(\"tf-value4\")\n                        .effect(\"NoSchedule\")\n                        .build())\n                .cordon(true)\n                .build())\n            .tags(DefaultNodePoolTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .build());\n\n        var defaultDefaultNodePoolBatchAttach = new DefaultNodePoolBatchAttach(\"defaultDefaultNodePoolBatchAttach\", DefaultNodePoolBatchAttachArgs.builder()        \n            .clusterId(fooCluster.id())\n            .defaultNodePoolId(defaultDefaultNodePool.id())\n            .instances(DefaultNodePoolBatchAttachInstanceArgs.builder()\n                .instanceId(fooInstance.id())\n                .keepInstanceName(true)\n                .additionalContainerStorageEnabled(false)\n                .build())\n            .kubernetesConfig(DefaultNodePoolBatchAttachKubernetesConfigArgs.builder()\n                .labels(                \n                    DefaultNodePoolBatchAttachKubernetesConfigLabelArgs.builder()\n                        .key(\"tf-key1\")\n                        .value(\"tf-value1\")\n                        .build(),\n                    DefaultNodePoolBatchAttachKubernetesConfigLabelArgs.builder()\n                        .key(\"tf-key2\")\n                        .value(\"tf-value2\")\n                        .build())\n                .taints(                \n                    DefaultNodePoolBatchAttachKubernetesConfigTaintArgs.builder()\n                        .key(\"tf-key3\")\n                        .value(\"tf-value3\")\n                        .effect(\"NoSchedule\")\n                        .build(),\n                    DefaultNodePoolBatchAttachKubernetesConfigTaintArgs.builder()\n                        .key(\"tf-key4\")\n                        .value(\"tf-value4\")\n                        .effect(\"NoSchedule\")\n                        .build())\n                .cordon(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-project1\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-subnet-test-2\n      cidrBlock: 172.16.0.0/24\n      zoneId: cn-beijing-a\n      vpcId: ${fooVpc.id}\n  fooSecurityGroup:\n    type: volcengine:vpc:SecurityGroup\n    properties:\n      vpcId: ${fooVpc.id}\n      securityGroupName: acc-test-security-group2\n  fooInstance:\n    type: volcengine:ecs:Instance\n    properties:\n      imageId: image-ybqi99s7yq8rx7mnk44b\n      instanceType: ecs.g1ie.large\n      instanceName: acc-test-ecs-name2\n      password: 93f0cb0614Aab12\n      instanceChargeType: PostPaid\n      systemVolumeType: ESSD_PL0\n      systemVolumeSize: 40\n      subnetId: ${fooSubnet.id}\n      securityGroupIds:\n        - ${fooSecurityGroup.id}\n  fooCluster:\n    type: volcengine:vke:Cluster\n    properties:\n      description: created by terraform\n      deleteProtectionEnabled: false\n      clusterConfig:\n        subnetIds:\n          - ${fooSubnet.id}\n        apiServerPublicAccessEnabled: true\n        apiServerPublicAccessConfig:\n          publicAccessNetworkConfig:\n            billingType: PostPaidByBandwidth\n            bandwidth: 1\n        resourcePublicAccessDefaultEnabled: true\n      podsConfig:\n        podNetworkMode: VpcCniShared\n        vpcCniConfig:\n          subnetIds:\n            - ${fooSubnet.id}\n      servicesConfig:\n        serviceCidrsv4s:\n          - 172.30.0.0/18\n      tags:\n        - key: tf-k1\n          value: tf-v1\n  defaultDefaultNodePool:\n    type: volcengine:vke:DefaultNodePool\n    properties:\n      clusterId: ${fooCluster.id}\n      nodeConfig:\n        security:\n          login:\n            password: amw4WTdVcTRJVVFsUXpVTw==\n          securityGroupIds:\n            - ${fooSecurityGroup.id}\n          securityStrategies:\n            - Hids\n        initializeScript: ISMvYmluL2Jhc2gKZWNobyAx\n      kubernetesConfig:\n        labels:\n          - key: tf-key1\n            value: tf-value1\n          - key: tf-key2\n            value: tf-value2\n        taints:\n          - key: tf-key3\n            value: tf-value3\n            effect: NoSchedule\n          - key: tf-key4\n            value: tf-value4\n            effect: NoSchedule\n        cordon: true\n      tags:\n        - key: k1\n          value: v1\n  defaultDefaultNodePoolBatchAttach:\n    type: volcengine:vke:DefaultNodePoolBatchAttach\n    properties:\n      clusterId: ${fooCluster.id}\n      defaultNodePoolId: ${defaultDefaultNodePool.id}\n      instances:\n        - instanceId: ${fooInstance.id}\n          keepInstanceName: true\n          additionalContainerStorageEnabled: false\n      kubernetesConfig:\n        labels:\n          - key: tf-key1\n            value: tf-value1\n          - key: tf-key2\n            value: tf-value2\n        taints:\n          - key: tf-key3\n            value: tf-value3\n            effect: NoSchedule\n          - key: tf-key4\n            value: tf-value4\n            effect: NoSchedule\n        cordon: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ClusterId of NodePool.\n"
                },
                "defaultNodePoolId": {
                    "type": "string",
                    "description": "The default NodePool ID.\n"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachInstance:DefaultNodePoolBatchAttachInstance"
                    },
                    "description": "The ECS InstanceIds add to NodePool.\n"
                },
                "isImport": {
                    "type": "boolean",
                    "description": "Is import of the DefaultNodePool. It only works when imported, set to true.\n"
                },
                "kubernetesConfig": {
                    "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachKubernetesConfig:DefaultNodePoolBatchAttachKubernetesConfig",
                    "description": "The KubernetesConfig of NodeConfig. Please note that this field is the configuration of the node. The same key is subject to the config of the node pool. Different keys take effect together.\n"
                },
                "nodeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachNodeConfig:DefaultNodePoolBatchAttachNodeConfig"
                    },
                    "description": "The Config of NodePool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachTag:DefaultNodePoolBatchAttachTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "required": [
                "clusterId",
                "defaultNodePoolId",
                "isImport",
                "nodeConfigs",
                "tags"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ClusterId of NodePool.\n",
                    "willReplaceOnChanges": true
                },
                "defaultNodePoolId": {
                    "type": "string",
                    "description": "The default NodePool ID.\n",
                    "willReplaceOnChanges": true
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachInstance:DefaultNodePoolBatchAttachInstance"
                    },
                    "description": "The ECS InstanceIds add to NodePool.\n"
                },
                "kubernetesConfig": {
                    "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachKubernetesConfig:DefaultNodePoolBatchAttachKubernetesConfig",
                    "description": "The KubernetesConfig of NodeConfig. Please note that this field is the configuration of the node. The same key is subject to the config of the node pool. Different keys take effect together.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId",
                "defaultNodePoolId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultNodePoolBatchAttach resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ClusterId of NodePool.\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultNodePoolId": {
                        "type": "string",
                        "description": "The default NodePool ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachInstance:DefaultNodePoolBatchAttachInstance"
                        },
                        "description": "The ECS InstanceIds add to NodePool.\n"
                    },
                    "isImport": {
                        "type": "boolean",
                        "description": "Is import of the DefaultNodePool. It only works when imported, set to true.\n"
                    },
                    "kubernetesConfig": {
                        "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachKubernetesConfig:DefaultNodePoolBatchAttachKubernetesConfig",
                        "description": "The KubernetesConfig of NodeConfig. Please note that this field is the configuration of the node. The same key is subject to the config of the node pool. Different keys take effect together.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachNodeConfig:DefaultNodePoolBatchAttachNodeConfig"
                        },
                        "description": "The Config of NodePool.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/DefaultNodePoolBatchAttachTag:DefaultNodePoolBatchAttachTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vke/kubeconfig:Kubeconfig": {
            "description": "Provides a resource to manage vke kubeconfig\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vke.Kubeconfig(\"foo\", {\n    clusterId: \"cce7hb97qtofmj1oi4udg\",\n    type: \"Private\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vke.Kubeconfig(\"foo\",\n    cluster_id=\"cce7hb97qtofmj1oi4udg\",\n    type=\"Private\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vke.Kubeconfig(\"foo\", new Volcengine.Vke.KubeconfigArgs\n        {\n            ClusterId = \"cce7hb97qtofmj1oi4udg\",\n            Type = \"Private\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.NewKubeconfig(ctx, \"foo\", \u0026vke.KubeconfigArgs{\n\t\t\tClusterId: pulumi.String(\"cce7hb97qtofmj1oi4udg\"),\n\t\t\tType:      pulumi.String(\"Private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Kubeconfig(\"foo\", KubeconfigArgs.builder()        \n            .clusterId(\"cce7hb97qtofmj1oi4udg\")\n            .type(\"Private\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vke:Kubeconfig\n    properties:\n      clusterId: cce7hb97qtofmj1oi4udg\n      type: Private\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVkeKubeconfig can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vke/kubeconfig:Kubeconfig default kce8simvqtofl0l6u4qd0\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the Kubeconfig.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Kubeconfig, the value of type should be Public or Private.\n"
                },
                "validDuration": {
                    "type": "integer",
                    "description": "The ValidDuration of the Kubeconfig, the range of the ValidDuration is 1 hour to 43800 hour.\n"
                }
            },
            "required": [
                "clusterId",
                "type"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the Kubeconfig.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Kubeconfig, the value of type should be Public or Private.\n",
                    "willReplaceOnChanges": true
                },
                "validDuration": {
                    "type": "integer",
                    "description": "The ValidDuration of the Kubeconfig, the range of the ValidDuration is 1 hour to 43800 hour.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubeconfig resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the Kubeconfig.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the Kubeconfig, the value of type should be Public or Private.\n",
                        "willReplaceOnChanges": true
                    },
                    "validDuration": {
                        "type": "integer",
                        "description": "The ValidDuration of the Kubeconfig, the range of the ValidDuration is 1 hour to 43800 hour.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vke/node:Node": {
            "description": "Provides a resource to manage vke node\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-project1\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-subnet-test-2\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: \"cn-beijing-a\",\n    vpcId: fooVpc.id,\n});\nconst fooSecurityGroup = new volcengine.vpc.SecurityGroup(\"fooSecurityGroup\", {\n    vpcId: fooVpc.id,\n    securityGroupName: \"acc-test-security-group2\",\n});\nconst fooInstance = new volcengine.ecs.Instance(\"fooInstance\", {\n    imageId: \"image-ybqi99s7yq8rx7mnk44b\",\n    instanceType: \"ecs.g1ie.large\",\n    instanceName: \"acc-test-ecs-name2\",\n    password: \"93f0cb0614Aab12\",\n    instanceChargeType: \"PostPaid\",\n    systemVolumeType: \"ESSD_PL0\",\n    systemVolumeSize: 40,\n    subnetId: fooSubnet.id,\n    securityGroupIds: [fooSecurityGroup.id],\n    projectName: \"default\",\n});\nconst fooCluster = new volcengine.vke.Cluster(\"fooCluster\", {\n    description: \"created by terraform\",\n    deleteProtectionEnabled: false,\n    clusterConfig: {\n        subnetIds: [fooSubnet.id],\n        apiServerPublicAccessEnabled: true,\n        apiServerPublicAccessConfig: {\n            publicAccessNetworkConfig: {\n                billingType: \"PostPaidByBandwidth\",\n                bandwidth: 1,\n            },\n        },\n        resourcePublicAccessDefaultEnabled: true,\n    },\n    podsConfig: {\n        podNetworkMode: \"VpcCniShared\",\n        vpcCniConfig: {\n            subnetIds: [fooSubnet.id],\n        },\n    },\n    servicesConfig: {\n        serviceCidrsv4s: [\"172.30.0.0/18\"],\n    },\n    tags: [{\n        key: \"tf-k1\",\n        value: \"tf-v1\",\n    }],\n});\nconst fooNodePool = new volcengine.vke.NodePool(\"fooNodePool\", {\n    clusterId: fooCluster.id,\n    nodeConfig: {\n        instanceTypeIds: [\"ecs.g1ie.large\"],\n        subnetIds: [fooSubnet.id],\n        security: {\n            login: {\n                password: \"UHdkMTIzNDU2\",\n            },\n            securityGroupIds: [fooSecurityGroup.id],\n        },\n        instanceChargeType: \"PostPaid\",\n        period: 1,\n    },\n    kubernetesConfig: {\n        labels: [\n            {\n                key: \"aa\",\n                value: \"bb\",\n            },\n            {\n                key: \"cccc\",\n                value: \"dddd\",\n            },\n        ],\n        cordon: false,\n    },\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n});\nconst fooNode = new volcengine.vke.Node(\"fooNode\", {\n    clusterId: fooCluster.id,\n    instanceId: fooInstance.id,\n    keepInstanceName: true,\n    additionalContainerStorageEnabled: false,\n    containerStoragePath: \"\",\n    nodePoolId: fooNodePool.id,\n    kubernetesConfig: {\n        labels: [\n            {\n                key: \"tf-key1\",\n                value: \"tf-value1\",\n            },\n            {\n                key: \"tf-key2\",\n                value: \"tf-value2\",\n            },\n        ],\n        taints: [\n            {\n                key: \"tf-key3\",\n                value: \"tf-value3\",\n                effect: \"NoSchedule\",\n            },\n            {\n                key: \"tf-key4\",\n                value: \"tf-value4\",\n                effect: \"NoSchedule\",\n            },\n        ],\n        cordon: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-project1\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-subnet-test-2\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=\"cn-beijing-a\",\n    vpc_id=foo_vpc.id)\nfoo_security_group = volcengine.vpc.SecurityGroup(\"fooSecurityGroup\",\n    vpc_id=foo_vpc.id,\n    security_group_name=\"acc-test-security-group2\")\nfoo_instance = volcengine.ecs.Instance(\"fooInstance\",\n    image_id=\"image-ybqi99s7yq8rx7mnk44b\",\n    instance_type=\"ecs.g1ie.large\",\n    instance_name=\"acc-test-ecs-name2\",\n    password=\"93f0cb0614Aab12\",\n    instance_charge_type=\"PostPaid\",\n    system_volume_type=\"ESSD_PL0\",\n    system_volume_size=40,\n    subnet_id=foo_subnet.id,\n    security_group_ids=[foo_security_group.id],\n    project_name=\"default\")\nfoo_cluster = volcengine.vke.Cluster(\"fooCluster\",\n    description=\"created by terraform\",\n    delete_protection_enabled=False,\n    cluster_config=volcengine.vke.ClusterClusterConfigArgs(\n        subnet_ids=[foo_subnet.id],\n        api_server_public_access_enabled=True,\n        api_server_public_access_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigArgs(\n            public_access_network_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs(\n                billing_type=\"PostPaidByBandwidth\",\n                bandwidth=1,\n            ),\n        ),\n        resource_public_access_default_enabled=True,\n    ),\n    pods_config=volcengine.vke.ClusterPodsConfigArgs(\n        pod_network_mode=\"VpcCniShared\",\n        vpc_cni_config=volcengine.vke.ClusterPodsConfigVpcCniConfigArgs(\n            subnet_ids=[foo_subnet.id],\n        ),\n    ),\n    services_config=volcengine.vke.ClusterServicesConfigArgs(\n        service_cidrsv4s=[\"172.30.0.0/18\"],\n    ),\n    tags=[volcengine.vke.ClusterTagArgs(\n        key=\"tf-k1\",\n        value=\"tf-v1\",\n    )])\nfoo_node_pool = volcengine.vke.NodePool(\"fooNodePool\",\n    cluster_id=foo_cluster.id,\n    node_config=volcengine.vke.NodePoolNodeConfigArgs(\n        instance_type_ids=[\"ecs.g1ie.large\"],\n        subnet_ids=[foo_subnet.id],\n        security=volcengine.vke.NodePoolNodeConfigSecurityArgs(\n            login=volcengine.vke.NodePoolNodeConfigSecurityLoginArgs(\n                password=\"UHdkMTIzNDU2\",\n            ),\n            security_group_ids=[foo_security_group.id],\n        ),\n        instance_charge_type=\"PostPaid\",\n        period=1,\n    ),\n    kubernetes_config=volcengine.vke.NodePoolKubernetesConfigArgs(\n        labels=[\n            volcengine.vke.NodePoolKubernetesConfigLabelArgs(\n                key=\"aa\",\n                value=\"bb\",\n            ),\n            volcengine.vke.NodePoolKubernetesConfigLabelArgs(\n                key=\"cccc\",\n                value=\"dddd\",\n            ),\n        ],\n        cordon=False,\n    ),\n    tags=[volcengine.vke.NodePoolTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )])\nfoo_node = volcengine.vke.Node(\"fooNode\",\n    cluster_id=foo_cluster.id,\n    instance_id=foo_instance.id,\n    keep_instance_name=True,\n    additional_container_storage_enabled=False,\n    container_storage_path=\"\",\n    node_pool_id=foo_node_pool.id,\n    kubernetes_config=volcengine.vke.NodeKubernetesConfigArgs(\n        labels=[\n            volcengine.vke.NodeKubernetesConfigLabelArgs(\n                key=\"tf-key1\",\n                value=\"tf-value1\",\n            ),\n            volcengine.vke.NodeKubernetesConfigLabelArgs(\n                key=\"tf-key2\",\n                value=\"tf-value2\",\n            ),\n        ],\n        taints=[\n            volcengine.vke.NodeKubernetesConfigTaintArgs(\n                key=\"tf-key3\",\n                value=\"tf-value3\",\n                effect=\"NoSchedule\",\n            ),\n            volcengine.vke.NodeKubernetesConfigTaintArgs(\n                key=\"tf-key4\",\n                value=\"tf-value4\",\n                effect=\"NoSchedule\",\n            ),\n        ],\n        cordon=True,\n    ))\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-project1\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-subnet-test-2\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = \"cn-beijing-a\",\n            VpcId = fooVpc.Id,\n        });\n        var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup(\"fooSecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            VpcId = fooVpc.Id,\n            SecurityGroupName = \"acc-test-security-group2\",\n        });\n        var fooInstance = new Volcengine.Ecs.Instance(\"fooInstance\", new Volcengine.Ecs.InstanceArgs\n        {\n            ImageId = \"image-ybqi99s7yq8rx7mnk44b\",\n            InstanceType = \"ecs.g1ie.large\",\n            InstanceName = \"acc-test-ecs-name2\",\n            Password = \"93f0cb0614Aab12\",\n            InstanceChargeType = \"PostPaid\",\n            SystemVolumeType = \"ESSD_PL0\",\n            SystemVolumeSize = 40,\n            SubnetId = fooSubnet.Id,\n            SecurityGroupIds = \n            {\n                fooSecurityGroup.Id,\n            },\n            ProjectName = \"default\",\n        });\n        var fooCluster = new Volcengine.Vke.Cluster(\"fooCluster\", new Volcengine.Vke.ClusterArgs\n        {\n            Description = \"created by terraform\",\n            DeleteProtectionEnabled = false,\n            ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs\n            {\n                SubnetIds = \n                {\n                    fooSubnet.Id,\n                },\n                ApiServerPublicAccessEnabled = true,\n                ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs\n                {\n                    PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs\n                    {\n                        BillingType = \"PostPaidByBandwidth\",\n                        Bandwidth = 1,\n                    },\n                },\n                ResourcePublicAccessDefaultEnabled = true,\n            },\n            PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs\n            {\n                PodNetworkMode = \"VpcCniShared\",\n                VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs\n                {\n                    SubnetIds = \n                    {\n                        fooSubnet.Id,\n                    },\n                },\n            },\n            ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs\n            {\n                ServiceCidrsv4s = \n                {\n                    \"172.30.0.0/18\",\n                },\n            },\n            Tags = \n            {\n                new Volcengine.Vke.Inputs.ClusterTagArgs\n                {\n                    Key = \"tf-k1\",\n                    Value = \"tf-v1\",\n                },\n            },\n        });\n        var fooNodePool = new Volcengine.Vke.NodePool(\"fooNodePool\", new Volcengine.Vke.NodePoolArgs\n        {\n            ClusterId = fooCluster.Id,\n            NodeConfig = new Volcengine.Vke.Inputs.NodePoolNodeConfigArgs\n            {\n                InstanceTypeIds = \n                {\n                    \"ecs.g1ie.large\",\n                },\n                SubnetIds = \n                {\n                    fooSubnet.Id,\n                },\n                Security = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityArgs\n                {\n                    Login = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityLoginArgs\n                    {\n                        Password = \"UHdkMTIzNDU2\",\n                    },\n                    SecurityGroupIds = \n                    {\n                        fooSecurityGroup.Id,\n                    },\n                },\n                InstanceChargeType = \"PostPaid\",\n                Period = 1,\n            },\n            KubernetesConfig = new Volcengine.Vke.Inputs.NodePoolKubernetesConfigArgs\n            {\n                Labels = \n                {\n                    new Volcengine.Vke.Inputs.NodePoolKubernetesConfigLabelArgs\n                    {\n                        Key = \"aa\",\n                        Value = \"bb\",\n                    },\n                    new Volcengine.Vke.Inputs.NodePoolKubernetesConfigLabelArgs\n                    {\n                        Key = \"cccc\",\n                        Value = \"dddd\",\n                    },\n                },\n                Cordon = false,\n            },\n            Tags = \n            {\n                new Volcengine.Vke.Inputs.NodePoolTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n        });\n        var fooNode = new Volcengine.Vke.Node(\"fooNode\", new Volcengine.Vke.NodeArgs\n        {\n            ClusterId = fooCluster.Id,\n            InstanceId = fooInstance.Id,\n            KeepInstanceName = true,\n            AdditionalContainerStorageEnabled = false,\n            ContainerStoragePath = \"\",\n            NodePoolId = fooNodePool.Id,\n            KubernetesConfig = new Volcengine.Vke.Inputs.NodeKubernetesConfigArgs\n            {\n                Labels = \n                {\n                    new Volcengine.Vke.Inputs.NodeKubernetesConfigLabelArgs\n                    {\n                        Key = \"tf-key1\",\n                        Value = \"tf-value1\",\n                    },\n                    new Volcengine.Vke.Inputs.NodeKubernetesConfigLabelArgs\n                    {\n                        Key = \"tf-key2\",\n                        Value = \"tf-value2\",\n                    },\n                },\n                Taints = \n                {\n                    new Volcengine.Vke.Inputs.NodeKubernetesConfigTaintArgs\n                    {\n                        Key = \"tf-key3\",\n                        Value = \"tf-value3\",\n                        Effect = \"NoSchedule\",\n                    },\n                    new Volcengine.Vke.Inputs.NodeKubernetesConfigTaintArgs\n                    {\n                        Key = \"tf-key4\",\n                        Value = \"tf-value4\",\n                        Effect = \"NoSchedule\",\n                    },\n                },\n                Cordon = true,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-project1\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-subnet-test-2\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(\"cn-beijing-a\"),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSecurityGroup, err := vpc.NewSecurityGroup(ctx, \"fooSecurityGroup\", \u0026vpc.SecurityGroupArgs{\n\t\t\tVpcId:             fooVpc.ID(),\n\t\t\tSecurityGroupName: pulumi.String(\"acc-test-security-group2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooInstance, err := ecs.NewInstance(ctx, \"fooInstance\", \u0026ecs.InstanceArgs{\n\t\t\tImageId:            pulumi.String(\"image-ybqi99s7yq8rx7mnk44b\"),\n\t\t\tInstanceType:       pulumi.String(\"ecs.g1ie.large\"),\n\t\t\tInstanceName:       pulumi.String(\"acc-test-ecs-name2\"),\n\t\t\tPassword:           pulumi.String(\"93f0cb0614Aab12\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tSystemVolumeType:   pulumi.String(\"ESSD_PL0\"),\n\t\t\tSystemVolumeSize:   pulumi.Int(40),\n\t\t\tSubnetId:           fooSubnet.ID(),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tfooSecurityGroup.ID(),\n\t\t\t},\n\t\t\tProjectName: pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooCluster, err := vke.NewCluster(ctx, \"fooCluster\", \u0026vke.ClusterArgs{\n\t\t\tDescription:             pulumi.String(\"created by terraform\"),\n\t\t\tDeleteProtectionEnabled: pulumi.Bool(false),\n\t\t\tClusterConfig: \u0026vke.ClusterClusterConfigArgs{\n\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\tfooSubnet.ID(),\n\t\t\t\t},\n\t\t\t\tApiServerPublicAccessEnabled: pulumi.Bool(true),\n\t\t\t\tApiServerPublicAccessConfig: \u0026vke.ClusterClusterConfigApiServerPublicAccessConfigArgs{\n\t\t\t\t\tPublicAccessNetworkConfig: \u0026vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs{\n\t\t\t\t\t\tBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\t\t\tBandwidth:   pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tResourcePublicAccessDefaultEnabled: pulumi.Bool(true),\n\t\t\t},\n\t\t\tPodsConfig: \u0026vke.ClusterPodsConfigArgs{\n\t\t\t\tPodNetworkMode: pulumi.String(\"VpcCniShared\"),\n\t\t\t\tVpcCniConfig: \u0026vke.ClusterPodsConfigVpcCniConfigArgs{\n\t\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\t\tfooSubnet.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tServicesConfig: \u0026vke.ClusterServicesConfigArgs{\n\t\t\t\tServiceCidrsv4s: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"172.30.0.0/18\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: vke.ClusterTagArray{\n\t\t\t\t\u0026vke.ClusterTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"tf-k1\"),\n\t\t\t\t\tValue: pulumi.String(\"tf-v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooNodePool, err := vke.NewNodePool(ctx, \"fooNodePool\", \u0026vke.NodePoolArgs{\n\t\t\tClusterId: fooCluster.ID(),\n\t\t\tNodeConfig: \u0026vke.NodePoolNodeConfigArgs{\n\t\t\t\tInstanceTypeIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ecs.g1ie.large\"),\n\t\t\t\t},\n\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\tfooSubnet.ID(),\n\t\t\t\t},\n\t\t\t\tSecurity: \u0026vke.NodePoolNodeConfigSecurityArgs{\n\t\t\t\t\tLogin: \u0026vke.NodePoolNodeConfigSecurityLoginArgs{\n\t\t\t\t\t\tPassword: pulumi.String(\"UHdkMTIzNDU2\"),\n\t\t\t\t\t},\n\t\t\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\t\t\tfooSecurityGroup.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\t\tPeriod:             pulumi.Int(1),\n\t\t\t},\n\t\t\tKubernetesConfig: \u0026vke.NodePoolKubernetesConfigArgs{\n\t\t\t\tLabels: vke.NodePoolKubernetesConfigLabelArray{\n\t\t\t\t\t\u0026vke.NodePoolKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"aa\"),\n\t\t\t\t\t\tValue: pulumi.String(\"bb\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.NodePoolKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"cccc\"),\n\t\t\t\t\t\tValue: pulumi.String(\"dddd\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tCordon: pulumi.Bool(false),\n\t\t\t},\n\t\t\tTags: vke.NodePoolTagArray{\n\t\t\t\t\u0026vke.NodePoolTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vke.NewNode(ctx, \"fooNode\", \u0026vke.NodeArgs{\n\t\t\tClusterId:                         fooCluster.ID(),\n\t\t\tInstanceId:                        fooInstance.ID(),\n\t\t\tKeepInstanceName:                  pulumi.Bool(true),\n\t\t\tAdditionalContainerStorageEnabled: pulumi.Bool(false),\n\t\t\tContainerStoragePath:              pulumi.String(\"\"),\n\t\t\tNodePoolId:                        fooNodePool.ID(),\n\t\t\tKubernetesConfig: \u0026vke.NodeKubernetesConfigArgs{\n\t\t\t\tLabels: vke.NodeKubernetesConfigLabelArray{\n\t\t\t\t\t\u0026vke.NodeKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"tf-key1\"),\n\t\t\t\t\t\tValue: pulumi.String(\"tf-value1\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.NodeKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"tf-key2\"),\n\t\t\t\t\t\tValue: pulumi.String(\"tf-value2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTaints: vke.NodeKubernetesConfigTaintArray{\n\t\t\t\t\t\u0026vke.NodeKubernetesConfigTaintArgs{\n\t\t\t\t\t\tKey:    pulumi.String(\"tf-key3\"),\n\t\t\t\t\t\tValue:  pulumi.String(\"tf-value3\"),\n\t\t\t\t\t\tEffect: pulumi.String(\"NoSchedule\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.NodeKubernetesConfigTaintArgs{\n\t\t\t\t\t\tKey:    pulumi.String(\"tf-key4\"),\n\t\t\t\t\t\tValue:  pulumi.String(\"tf-value4\"),\n\t\t\t\t\t\tEffect: pulumi.String(\"NoSchedule\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tCordon: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-project1\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-subnet-test-2\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(\"cn-beijing-a\")\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooSecurityGroup = new SecurityGroup(\"fooSecurityGroup\", SecurityGroupArgs.builder()        \n            .vpcId(fooVpc.id())\n            .securityGroupName(\"acc-test-security-group2\")\n            .build());\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .imageId(\"image-ybqi99s7yq8rx7mnk44b\")\n            .instanceType(\"ecs.g1ie.large\")\n            .instanceName(\"acc-test-ecs-name2\")\n            .password(\"93f0cb0614Aab12\")\n            .instanceChargeType(\"PostPaid\")\n            .systemVolumeType(\"ESSD_PL0\")\n            .systemVolumeSize(40)\n            .subnetId(fooSubnet.id())\n            .securityGroupIds(fooSecurityGroup.id())\n            .projectName(\"default\")\n            .build());\n\n        var fooCluster = new Cluster(\"fooCluster\", ClusterArgs.builder()        \n            .description(\"created by terraform\")\n            .deleteProtectionEnabled(false)\n            .clusterConfig(ClusterClusterConfigArgs.builder()\n                .subnetIds(fooSubnet.id())\n                .apiServerPublicAccessEnabled(true)\n                .apiServerPublicAccessConfig(ClusterClusterConfigApiServerPublicAccessConfigArgs.builder()\n                    .publicAccessNetworkConfig(ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs.builder()\n                        .billingType(\"PostPaidByBandwidth\")\n                        .bandwidth(1)\n                        .build())\n                    .build())\n                .resourcePublicAccessDefaultEnabled(true)\n                .build())\n            .podsConfig(ClusterPodsConfigArgs.builder()\n                .podNetworkMode(\"VpcCniShared\")\n                .vpcCniConfig(ClusterPodsConfigVpcCniConfigArgs.builder()\n                    .subnetIds(fooSubnet.id())\n                    .build())\n                .build())\n            .servicesConfig(ClusterServicesConfigArgs.builder()\n                .serviceCidrsv4s(\"172.30.0.0/18\")\n                .build())\n            .tags(ClusterTagArgs.builder()\n                .key(\"tf-k1\")\n                .value(\"tf-v1\")\n                .build())\n            .build());\n\n        var fooNodePool = new NodePool(\"fooNodePool\", NodePoolArgs.builder()        \n            .clusterId(fooCluster.id())\n            .nodeConfig(NodePoolNodeConfigArgs.builder()\n                .instanceTypeIds(\"ecs.g1ie.large\")\n                .subnetIds(fooSubnet.id())\n                .security(NodePoolNodeConfigSecurityArgs.builder()\n                    .login(NodePoolNodeConfigSecurityLoginArgs.builder()\n                        .password(\"UHdkMTIzNDU2\")\n                        .build())\n                    .securityGroupIds(fooSecurityGroup.id())\n                    .build())\n                .instanceChargeType(\"PostPaid\")\n                .period(1)\n                .build())\n            .kubernetesConfig(NodePoolKubernetesConfigArgs.builder()\n                .labels(                \n                    NodePoolKubernetesConfigLabelArgs.builder()\n                        .key(\"aa\")\n                        .value(\"bb\")\n                        .build(),\n                    NodePoolKubernetesConfigLabelArgs.builder()\n                        .key(\"cccc\")\n                        .value(\"dddd\")\n                        .build())\n                .cordon(false)\n                .build())\n            .tags(NodePoolTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .build());\n\n        var fooNode = new Node(\"fooNode\", NodeArgs.builder()        \n            .clusterId(fooCluster.id())\n            .instanceId(fooInstance.id())\n            .keepInstanceName(true)\n            .additionalContainerStorageEnabled(false)\n            .containerStoragePath(\"\")\n            .nodePoolId(fooNodePool.id())\n            .kubernetesConfig(NodeKubernetesConfigArgs.builder()\n                .labels(                \n                    NodeKubernetesConfigLabelArgs.builder()\n                        .key(\"tf-key1\")\n                        .value(\"tf-value1\")\n                        .build(),\n                    NodeKubernetesConfigLabelArgs.builder()\n                        .key(\"tf-key2\")\n                        .value(\"tf-value2\")\n                        .build())\n                .taints(                \n                    NodeKubernetesConfigTaintArgs.builder()\n                        .key(\"tf-key3\")\n                        .value(\"tf-value3\")\n                        .effect(\"NoSchedule\")\n                        .build(),\n                    NodeKubernetesConfigTaintArgs.builder()\n                        .key(\"tf-key4\")\n                        .value(\"tf-value4\")\n                        .effect(\"NoSchedule\")\n                        .build())\n                .cordon(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-project1\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-subnet-test-2\n      cidrBlock: 172.16.0.0/24\n      zoneId: cn-beijing-a\n      vpcId: ${fooVpc.id}\n  fooSecurityGroup:\n    type: volcengine:vpc:SecurityGroup\n    properties:\n      vpcId: ${fooVpc.id}\n      securityGroupName: acc-test-security-group2\n  fooInstance:\n    type: volcengine:ecs:Instance\n    properties:\n      imageId: image-ybqi99s7yq8rx7mnk44b\n      instanceType: ecs.g1ie.large\n      instanceName: acc-test-ecs-name2\n      password: 93f0cb0614Aab12\n      instanceChargeType: PostPaid\n      systemVolumeType: ESSD_PL0\n      systemVolumeSize: 40\n      subnetId: ${fooSubnet.id}\n      securityGroupIds:\n        - ${fooSecurityGroup.id}\n      projectName: default\n  fooCluster:\n    type: volcengine:vke:Cluster\n    properties:\n      description: created by terraform\n      deleteProtectionEnabled: false\n      clusterConfig:\n        subnetIds:\n          - ${fooSubnet.id}\n        apiServerPublicAccessEnabled: true\n        apiServerPublicAccessConfig:\n          publicAccessNetworkConfig:\n            billingType: PostPaidByBandwidth\n            bandwidth: 1\n        resourcePublicAccessDefaultEnabled: true\n      podsConfig:\n        podNetworkMode: VpcCniShared\n        vpcCniConfig:\n          subnetIds:\n            - ${fooSubnet.id}\n      servicesConfig:\n        serviceCidrsv4s:\n          - 172.30.0.0/18\n      tags:\n        - key: tf-k1\n          value: tf-v1\n  fooNodePool:\n    type: volcengine:vke:NodePool\n    properties:\n      clusterId: ${fooCluster.id}\n      nodeConfig:\n        instanceTypeIds:\n          - ecs.g1ie.large\n        subnetIds:\n          - ${fooSubnet.id}\n        security:\n          login:\n            password: UHdkMTIzNDU2\n          securityGroupIds:\n            - ${fooSecurityGroup.id}\n        instanceChargeType: PostPaid\n        period: 1\n      kubernetesConfig:\n        labels:\n          - key: aa\n            value: bb\n          - key: cccc\n            value: dddd\n        cordon: false\n      tags:\n        - key: k1\n          value: v1\n  fooNode:\n    type: volcengine:vke:Node\n    properties:\n      clusterId: ${fooCluster.id}\n      instanceId: ${fooInstance.id}\n      keepInstanceName: true\n      additionalContainerStorageEnabled: false\n      containerStoragePath:\n      nodePoolId: ${fooNodePool.id}\n      kubernetesConfig:\n        labels:\n          - key: tf-key1\n            value: tf-value1\n          - key: tf-key2\n            value: tf-value2\n        taints:\n          - key: tf-key3\n            value: tf-value3\n            effect: NoSchedule\n          - key: tf-key4\n            value: tf-value4\n            effect: NoSchedule\n        cordon: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVKE node can be imported using the node id, e.g.\n\n```sh\n $ pulumi import volcengine:vke/node:Node default nc5t5epmrsf****\n```\n\n ",
            "properties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "The flag of additional container storage enable, the value is `true` or `false`.\n"
                },
                "clientToken": {
                    "type": "string",
                    "description": "The client token.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id.\n"
                },
                "containerStoragePath": {
                    "type": "string",
                    "description": "The container storage path.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The ImageId of NodeConfig.\n"
                },
                "initializeScript": {
                    "type": "string",
                    "description": "The initializeScript of Node.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id.\n"
                },
                "keepInstanceName": {
                    "type": "boolean",
                    "description": "The flag of keep instance name, the value is `true` or `false`.\n"
                },
                "kubernetesConfig": {
                    "$ref": "#/types/volcengine:vke/NodeKubernetesConfig:NodeKubernetesConfig",
                    "description": "The KubernetesConfig of Node.\n"
                },
                "nodePoolId": {
                    "type": "string",
                    "description": "The node pool id.\n"
                }
            },
            "required": [
                "clientToken",
                "clusterId",
                "containerStoragePath",
                "imageId",
                "initializeScript",
                "instanceId",
                "kubernetesConfig",
                "nodePoolId"
            ],
            "inputProperties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "The flag of additional container storage enable, the value is `true` or `false`.\n",
                    "willReplaceOnChanges": true
                },
                "clientToken": {
                    "type": "string",
                    "description": "The client token.\n",
                    "willReplaceOnChanges": true
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id.\n",
                    "willReplaceOnChanges": true
                },
                "containerStoragePath": {
                    "type": "string",
                    "description": "The container storage path.\n",
                    "willReplaceOnChanges": true
                },
                "imageId": {
                    "type": "string",
                    "description": "The ImageId of NodeConfig.\n",
                    "willReplaceOnChanges": true
                },
                "initializeScript": {
                    "type": "string",
                    "description": "The initializeScript of Node.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id.\n",
                    "willReplaceOnChanges": true
                },
                "keepInstanceName": {
                    "type": "boolean",
                    "description": "The flag of keep instance name, the value is `true` or `false`.\n"
                },
                "kubernetesConfig": {
                    "$ref": "#/types/volcengine:vke/NodeKubernetesConfig:NodeKubernetesConfig",
                    "description": "The KubernetesConfig of Node.\n",
                    "willReplaceOnChanges": true
                },
                "nodePoolId": {
                    "type": "string",
                    "description": "The node pool id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Node resources.\n",
                "properties": {
                    "additionalContainerStorageEnabled": {
                        "type": "boolean",
                        "description": "The flag of additional container storage enable, the value is `true` or `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "clientToken": {
                        "type": "string",
                        "description": "The client token.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id.\n",
                        "willReplaceOnChanges": true
                    },
                    "containerStoragePath": {
                        "type": "string",
                        "description": "The container storage path.\n",
                        "willReplaceOnChanges": true
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The ImageId of NodeConfig.\n",
                        "willReplaceOnChanges": true
                    },
                    "initializeScript": {
                        "type": "string",
                        "description": "The initializeScript of Node.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance id.\n",
                        "willReplaceOnChanges": true
                    },
                    "keepInstanceName": {
                        "type": "boolean",
                        "description": "The flag of keep instance name, the value is `true` or `false`.\n"
                    },
                    "kubernetesConfig": {
                        "$ref": "#/types/volcengine:vke/NodeKubernetesConfig:NodeKubernetesConfig",
                        "description": "The KubernetesConfig of Node.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodePoolId": {
                        "type": "string",
                        "description": "The node pool id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vke/nodePool:NodePool": {
            "description": "Provides a resource to manage vke node pool\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst vkeTest = new volcengine.vke.NodePool(\"vke_test\", {\n    autoScaling: {\n        enabled: true,\n        subnetPolicy: \"ZoneBalance\",\n    },\n    clusterId: \"ccgd6066rsfegs2dkhlog\",\n    kubernetesConfig: {\n        cordon: false,\n        labels: [\n            {\n                key: \"aa\",\n                value: \"bb\",\n            },\n            {\n                key: \"cccc\",\n                value: \"dddd\",\n            },\n        ],\n    },\n    nodeConfig: {\n        dataVolumes: [{\n            size: 60,\n            type: \"ESSD_PL0\",\n        }],\n        ecsTags: [{\n            key: \"ecs_k1\",\n            value: \"ecs_v1\",\n        }],\n        instanceChargeType: \"PostPaid\",\n        instanceTypeIds: [\"ecs.g1ie.xlarge\"],\n        period: 1,\n        security: {\n            login: {\n                //      ssh_key_pair_name = \"ssh-6fbl66fxqm\"\n                password: \"UHdkMTIzNDU2\",\n            },\n            securityGroupIds: [\n                \"sg-13fbyz0sok3y83n6nu4hv1q10\",\n                \"sg-mj1e9tbztgqo5smt1ah8l4bh\",\n            ],\n        },\n        subnetIds: [\"subnet-mj1e9jgu96v45smt1a674x3h\"],\n    },\n    tags: [{\n        key: \"k1\",\n        value: \"v1\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nvke_test = volcengine.vke.NodePool(\"vkeTest\",\n    auto_scaling=volcengine.vke.NodePoolAutoScalingArgs(\n        enabled=True,\n        subnet_policy=\"ZoneBalance\",\n    ),\n    cluster_id=\"ccgd6066rsfegs2dkhlog\",\n    kubernetes_config=volcengine.vke.NodePoolKubernetesConfigArgs(\n        cordon=False,\n        labels=[\n            volcengine.vke.NodePoolKubernetesConfigLabelArgs(\n                key=\"aa\",\n                value=\"bb\",\n            ),\n            volcengine.vke.NodePoolKubernetesConfigLabelArgs(\n                key=\"cccc\",\n                value=\"dddd\",\n            ),\n        ],\n    ),\n    node_config=volcengine.vke.NodePoolNodeConfigArgs(\n        data_volumes=[volcengine.vke.NodePoolNodeConfigDataVolumeArgs(\n            size=60,\n            type=\"ESSD_PL0\",\n        )],\n        ecs_tags=[volcengine.vke.NodePoolNodeConfigEcsTagArgs(\n            key=\"ecs_k1\",\n            value=\"ecs_v1\",\n        )],\n        instance_charge_type=\"PostPaid\",\n        instance_type_ids=[\"ecs.g1ie.xlarge\"],\n        period=1,\n        security=volcengine.vke.NodePoolNodeConfigSecurityArgs(\n            login=volcengine.vke.NodePoolNodeConfigSecurityLoginArgs(\n                password=\"UHdkMTIzNDU2\",\n            ),\n            security_group_ids=[\n                \"sg-13fbyz0sok3y83n6nu4hv1q10\",\n                \"sg-mj1e9tbztgqo5smt1ah8l4bh\",\n            ],\n        ),\n        subnet_ids=[\"subnet-mj1e9jgu96v45smt1a674x3h\"],\n    ),\n    tags=[volcengine.vke.NodePoolTagArgs(\n        key=\"k1\",\n        value=\"v1\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vkeTest = new Volcengine.Vke.NodePool(\"vkeTest\", new Volcengine.Vke.NodePoolArgs\n        {\n            AutoScaling = new Volcengine.Vke.Inputs.NodePoolAutoScalingArgs\n            {\n                Enabled = true,\n                SubnetPolicy = \"ZoneBalance\",\n            },\n            ClusterId = \"ccgd6066rsfegs2dkhlog\",\n            KubernetesConfig = new Volcengine.Vke.Inputs.NodePoolKubernetesConfigArgs\n            {\n                Cordon = false,\n                Labels = \n                {\n                    new Volcengine.Vke.Inputs.NodePoolKubernetesConfigLabelArgs\n                    {\n                        Key = \"aa\",\n                        Value = \"bb\",\n                    },\n                    new Volcengine.Vke.Inputs.NodePoolKubernetesConfigLabelArgs\n                    {\n                        Key = \"cccc\",\n                        Value = \"dddd\",\n                    },\n                },\n            },\n            NodeConfig = new Volcengine.Vke.Inputs.NodePoolNodeConfigArgs\n            {\n                DataVolumes = \n                {\n                    new Volcengine.Vke.Inputs.NodePoolNodeConfigDataVolumeArgs\n                    {\n                        Size = 60,\n                        Type = \"ESSD_PL0\",\n                    },\n                },\n                EcsTags = \n                {\n                    new Volcengine.Vke.Inputs.NodePoolNodeConfigEcsTagArgs\n                    {\n                        Key = \"ecs_k1\",\n                        Value = \"ecs_v1\",\n                    },\n                },\n                InstanceChargeType = \"PostPaid\",\n                InstanceTypeIds = \n                {\n                    \"ecs.g1ie.xlarge\",\n                },\n                Period = 1,\n                Security = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityArgs\n                {\n                    Login = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityLoginArgs\n                    {\n                        Password = \"UHdkMTIzNDU2\",\n                    },\n                    SecurityGroupIds = \n                    {\n                        \"sg-13fbyz0sok3y83n6nu4hv1q10\",\n                        \"sg-mj1e9tbztgqo5smt1ah8l4bh\",\n                    },\n                },\n                SubnetIds = \n                {\n                    \"subnet-mj1e9jgu96v45smt1a674x3h\",\n                },\n            },\n            Tags = \n            {\n                new Volcengine.Vke.Inputs.NodePoolTagArgs\n                {\n                    Key = \"k1\",\n                    Value = \"v1\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.NewNodePool(ctx, \"vkeTest\", \u0026vke.NodePoolArgs{\n\t\t\tAutoScaling: \u0026vke.NodePoolAutoScalingArgs{\n\t\t\t\tEnabled:      pulumi.Bool(true),\n\t\t\t\tSubnetPolicy: pulumi.String(\"ZoneBalance\"),\n\t\t\t},\n\t\t\tClusterId: pulumi.String(\"ccgd6066rsfegs2dkhlog\"),\n\t\t\tKubernetesConfig: \u0026vke.NodePoolKubernetesConfigArgs{\n\t\t\t\tCordon: pulumi.Bool(false),\n\t\t\t\tLabels: vke.NodePoolKubernetesConfigLabelArray{\n\t\t\t\t\t\u0026vke.NodePoolKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"aa\"),\n\t\t\t\t\t\tValue: pulumi.String(\"bb\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.NodePoolKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"cccc\"),\n\t\t\t\t\t\tValue: pulumi.String(\"dddd\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tNodeConfig: \u0026vke.NodePoolNodeConfigArgs{\n\t\t\t\tDataVolumes: vke.NodePoolNodeConfigDataVolumeArray{\n\t\t\t\t\t\u0026vke.NodePoolNodeConfigDataVolumeArgs{\n\t\t\t\t\t\tSize: pulumi.Int(60),\n\t\t\t\t\t\tType: pulumi.String(\"ESSD_PL0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tEcsTags: vke.NodePoolNodeConfigEcsTagArray{\n\t\t\t\t\t\u0026vke.NodePoolNodeConfigEcsTagArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"ecs_k1\"),\n\t\t\t\t\t\tValue: pulumi.String(\"ecs_v1\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\t\tInstanceTypeIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ecs.g1ie.xlarge\"),\n\t\t\t\t},\n\t\t\t\tPeriod: pulumi.Int(1),\n\t\t\t\tSecurity: \u0026vke.NodePoolNodeConfigSecurityArgs{\n\t\t\t\t\tLogin: \u0026vke.NodePoolNodeConfigSecurityLoginArgs{\n\t\t\t\t\t\tPassword: pulumi.String(\"UHdkMTIzNDU2\"),\n\t\t\t\t\t},\n\t\t\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"sg-13fbyz0sok3y83n6nu4hv1q10\"),\n\t\t\t\t\t\tpulumi.String(\"sg-mj1e9tbztgqo5smt1ah8l4bh\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"subnet-mj1e9jgu96v45smt1a674x3h\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: vke.NodePoolTagArray{\n\t\t\t\t\u0026vke.NodePoolTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"k1\"),\n\t\t\t\t\tValue: pulumi.String(\"v1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vkeTest = new NodePool(\"vkeTest\", NodePoolArgs.builder()        \n            .autoScaling(NodePoolAutoScalingArgs.builder()\n                .enabled(true)\n                .subnetPolicy(\"ZoneBalance\")\n                .build())\n            .clusterId(\"ccgd6066rsfegs2dkhlog\")\n            .kubernetesConfig(NodePoolKubernetesConfigArgs.builder()\n                .cordon(false)\n                .labels(                \n                    NodePoolKubernetesConfigLabelArgs.builder()\n                        .key(\"aa\")\n                        .value(\"bb\")\n                        .build(),\n                    NodePoolKubernetesConfigLabelArgs.builder()\n                        .key(\"cccc\")\n                        .value(\"dddd\")\n                        .build())\n                .build())\n            .nodeConfig(NodePoolNodeConfigArgs.builder()\n                .dataVolumes(NodePoolNodeConfigDataVolumeArgs.builder()\n                    .size(\"60\")\n                    .type(\"ESSD_PL0\")\n                    .build())\n                .ecsTags(NodePoolNodeConfigEcsTagArgs.builder()\n                    .key(\"ecs_k1\")\n                    .value(\"ecs_v1\")\n                    .build())\n                .instanceChargeType(\"PostPaid\")\n                .instanceTypeIds(\"ecs.g1ie.xlarge\")\n                .period(1)\n                .security(NodePoolNodeConfigSecurityArgs.builder()\n                    .login(NodePoolNodeConfigSecurityLoginArgs.builder()\n                        .password(\"UHdkMTIzNDU2\")\n                        .build())\n                    .securityGroupIds(                    \n                        \"sg-13fbyz0sok3y83n6nu4hv1q10\",\n                        \"sg-mj1e9tbztgqo5smt1ah8l4bh\")\n                    .build())\n                .subnetIds(\"subnet-mj1e9jgu96v45smt1a674x3h\")\n                .build())\n            .tags(NodePoolTagArgs.builder()\n                .key(\"k1\")\n                .value(\"v1\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vkeTest:\n    type: volcengine:vke:NodePool\n    properties:\n      autoScaling:\n        enabled: true\n        subnetPolicy: ZoneBalance\n      clusterId: ccgd6066rsfegs2dkhlog\n      kubernetesConfig:\n        cordon: false\n        labels:\n          - key: aa\n            value: bb\n          - key: cccc\n            value: dddd\n      nodeConfig:\n        dataVolumes:\n          - size: 60\n            type: ESSD_PL0\n        ecsTags:\n          - key: ecs_k1\n            value: ecs_v1\n        instanceChargeType: PostPaid\n        instanceTypeIds:\n          - ecs.g1ie.xlarge\n        period: 1\n        security:\n          login:\n            password: UHdkMTIzNDU2\n          securityGroupIds:\n            - sg-13fbyz0sok3y83n6nu4hv1q10\n            - sg-mj1e9tbztgqo5smt1ah8l4bh\n        subnetIds:\n          - subnet-mj1e9jgu96v45smt1a674x3h\n      tags:\n        - key: k1\n          value: v1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNodePool can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vke/nodePool:NodePool default pcabe57vqtofgrbln3dp0\n```\n\n ",
            "properties": {
                "autoScaling": {
                    "$ref": "#/types/volcengine:vke/NodePoolAutoScaling:NodePoolAutoScaling",
                    "description": "The node pool elastic scaling configuration information.\n"
                },
                "clientToken": {
                    "type": "string",
                    "description": "The ClientToken of NodePool.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ClusterId of NodePool.\n"
                },
                "kubernetesConfig": {
                    "$ref": "#/types/volcengine:vke/NodePoolKubernetesConfig:NodePoolKubernetesConfig",
                    "description": "The KubernetesConfig of NodeConfig.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Name of NodePool.\n"
                },
                "nodeConfig": {
                    "$ref": "#/types/volcengine:vke/NodePoolNodeConfig:NodePoolNodeConfig",
                    "description": "The Config of NodePool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolTag:NodePoolTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "required": [
                "autoScaling",
                "kubernetesConfig",
                "name",
                "nodeConfig"
            ],
            "inputProperties": {
                "autoScaling": {
                    "$ref": "#/types/volcengine:vke/NodePoolAutoScaling:NodePoolAutoScaling",
                    "description": "The node pool elastic scaling configuration information.\n"
                },
                "clientToken": {
                    "type": "string",
                    "description": "The ClientToken of NodePool.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ClusterId of NodePool.\n",
                    "willReplaceOnChanges": true
                },
                "kubernetesConfig": {
                    "$ref": "#/types/volcengine:vke/NodePoolKubernetesConfig:NodePoolKubernetesConfig",
                    "description": "The KubernetesConfig of NodeConfig.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Name of NodePool.\n"
                },
                "nodeConfig": {
                    "$ref": "#/types/volcengine:vke/NodePoolNodeConfig:NodePoolNodeConfig",
                    "description": "The Config of NodePool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vke/NodePoolTag:NodePoolTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "requiredInputs": [
                "kubernetesConfig",
                "nodeConfig"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodePool resources.\n",
                "properties": {
                    "autoScaling": {
                        "$ref": "#/types/volcengine:vke/NodePoolAutoScaling:NodePoolAutoScaling",
                        "description": "The node pool elastic scaling configuration information.\n"
                    },
                    "clientToken": {
                        "type": "string",
                        "description": "The ClientToken of NodePool.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ClusterId of NodePool.\n",
                        "willReplaceOnChanges": true
                    },
                    "kubernetesConfig": {
                        "$ref": "#/types/volcengine:vke/NodePoolKubernetesConfig:NodePoolKubernetesConfig",
                        "description": "The KubernetesConfig of NodeConfig.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Name of NodePool.\n"
                    },
                    "nodeConfig": {
                        "$ref": "#/types/volcengine:vke/NodePoolNodeConfig:NodePoolNodeConfig",
                        "description": "The Config of NodePool.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/NodePoolTag:NodePoolTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/ipv6AddressBandwidth:Ipv6AddressBandwidth": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst dataEcs = volcengine.ecs.Instances({\n    ids: [\"i-ycal1mtpucl8j0hjiihy\"],\n});\nconst dataIpv6 = dataEcs.then(dataEcs =\u003e volcengine.vpc.Ipv6Addresses({\n    associatedInstanceId: dataEcs.instances?[0]?.instanceId,\n}));\nconst foo = new volcengine.vpc.Ipv6AddressBandwidth(\"foo\", {\n    ipv6Address: dataIpv6.then(dataIpv6 =\u003e dataIpv6.ipv6Addresses?[0]?.ipv6Address),\n    billingType: \"PostPaidByBandwidth\",\n    bandwidth: 5,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndata_ecs = volcengine.ecs.instances(ids=[\"i-ycal1mtpucl8j0hjiihy\"])\ndata_ipv6 = volcengine.vpc.ipv6_addresses(associated_instance_id=data_ecs.instances[0].instance_id)\nfoo = volcengine.vpc.Ipv6AddressBandwidth(\"foo\",\n    ipv6_address=data_ipv6.ipv6_addresses[0].ipv6_address,\n    billing_type=\"PostPaidByBandwidth\",\n    bandwidth=5)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dataEcs = Output.Create(Volcengine.Ecs.Instances.InvokeAsync(new Volcengine.Ecs.InstancesArgs\n        {\n            Ids = \n            {\n                \"i-ycal1mtpucl8j0hjiihy\",\n            },\n        }));\n        var dataIpv6 = dataEcs.Apply(dataEcs =\u003e Output.Create(Volcengine.Vpc.Ipv6Addresses.InvokeAsync(new Volcengine.Vpc.Ipv6AddressesArgs\n        {\n            AssociatedInstanceId = dataEcs.Instances?[0]?.InstanceId,\n        })));\n        var foo = new Volcengine.Vpc.Ipv6AddressBandwidth(\"foo\", new Volcengine.Vpc.Ipv6AddressBandwidthArgs\n        {\n            Ipv6Address = dataIpv6.Apply(dataIpv6 =\u003e dataIpv6.Ipv6Addresses?[0]?.Ipv6Address),\n            BillingType = \"PostPaidByBandwidth\",\n            Bandwidth = 5,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdataEcs, err := ecs.Instances(ctx, \u0026ecs.InstancesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"i-ycal1mtpucl8j0hjiihy\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdataIpv6, err := vpc.Ipv6Addresses(ctx, \u0026vpc.Ipv6AddressesArgs{\n\t\t\tAssociatedInstanceId: pulumi.StringRef(dataEcs.Instances[0].InstanceId),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewIpv6AddressBandwidth(ctx, \"foo\", \u0026vpc.Ipv6AddressBandwidthArgs{\n\t\t\tIpv6Address: pulumi.String(dataIpv6.Ipv6Addresses[0].Ipv6Address),\n\t\t\tBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\tBandwidth:   pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dataEcs = EcsFunctions.Instances();\n\n        final var dataIpv6 = VpcFunctions.Ipv6Addresses();\n\n        var foo = new Ipv6AddressBandwidth(\"foo\", Ipv6AddressBandwidthArgs.builder()        \n            .ipv6Address(dataIpv6.ipv6Addresses()[0].ipv6Address())\n            .billingType(\"PostPaidByBandwidth\")\n            .bandwidth(5)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:Ipv6AddressBandwidth\n    properties:\n      ipv6Address: ${dataIpv6.ipv6Addresses[0].ipv6Address}\n      billingType: PostPaidByBandwidth\n      bandwidth: 5\nvariables:\n  dataEcs:\n    Fn::Invoke:\n      Function: volcengine:ecs:Instances\n      Arguments:\n        ids:\n          - i-ycal1mtpucl8j0hjiihy\n  dataIpv6:\n    Fn::Invoke:\n      Function: volcengine:vpc:Ipv6Addresses\n      Arguments:\n        associatedInstanceId: ${dataEcs.instances[0].instanceId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIpv6AddressBandwidth can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/ipv6AddressBandwidth:Ipv6AddressBandwidth default eip-2fede9fsgnr4059gp674m6ney\n```\n\n ",
            "properties": {
                "allocationId": {
                    "type": "string",
                    "description": "The ID of the Ipv6AddressBandwidth.\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "Peek bandwidth of the Ipv6 address. Valid values: 1 to 200. Unit: Mbit/s.\n"
                },
                "billingType": {
                    "type": "string",
                    "description": "BillingType of the Ipv6 bandwidth. Valid values: `PostPaidByBandwidth`; `PostPaidByTraffic`.\n"
                },
                "businessStatus": {
                    "type": "string",
                    "description": "The BusinessStatus of the Ipv6AddressBandwidth.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of the Ipv6AddressBandwidth.\n"
                },
                "deleteTime": {
                    "type": "string",
                    "description": "Delete time of the Ipv6AddressBandwidth.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the associated instance.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the associated instance.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "Ipv6 address.\n"
                },
                "isp": {
                    "type": "string",
                    "description": "The ISP of the Ipv6AddressBandwidth.\n"
                },
                "lockReason": {
                    "type": "string",
                    "description": "The BusinessStatus of the Ipv6AddressBandwidth.\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "The network type of the Ipv6AddressBandwidth.\n"
                },
                "overdueTime": {
                    "type": "string",
                    "description": "Overdue time of the Ipv6AddressBandwidth.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Ipv6AddressBandwidth.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "Update time of the Ipv6AddressBandwidth.\n"
                }
            },
            "required": [
                "allocationId",
                "bandwidth",
                "billingType",
                "businessStatus",
                "creationTime",
                "deleteTime",
                "instanceId",
                "instanceType",
                "ipv6Address",
                "isp",
                "lockReason",
                "networkType",
                "overdueTime",
                "status",
                "updateTime"
            ],
            "inputProperties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "Peek bandwidth of the Ipv6 address. Valid values: 1 to 200. Unit: Mbit/s.\n"
                },
                "billingType": {
                    "type": "string",
                    "description": "BillingType of the Ipv6 bandwidth. Valid values: `PostPaidByBandwidth`; `PostPaidByTraffic`.\n",
                    "willReplaceOnChanges": true
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "Ipv6 address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "billingType",
                "ipv6Address"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ipv6AddressBandwidth resources.\n",
                "properties": {
                    "allocationId": {
                        "type": "string",
                        "description": "The ID of the Ipv6AddressBandwidth.\n"
                    },
                    "bandwidth": {
                        "type": "integer",
                        "description": "Peek bandwidth of the Ipv6 address. Valid values: 1 to 200. Unit: Mbit/s.\n"
                    },
                    "billingType": {
                        "type": "string",
                        "description": "BillingType of the Ipv6 bandwidth. Valid values: `PostPaidByBandwidth`; `PostPaidByTraffic`.\n",
                        "willReplaceOnChanges": true
                    },
                    "businessStatus": {
                        "type": "string",
                        "description": "The BusinessStatus of the Ipv6AddressBandwidth.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time of the Ipv6AddressBandwidth.\n"
                    },
                    "deleteTime": {
                        "type": "string",
                        "description": "Delete time of the Ipv6AddressBandwidth.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the associated instance.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of the associated instance.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "Ipv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "isp": {
                        "type": "string",
                        "description": "The ISP of the Ipv6AddressBandwidth.\n"
                    },
                    "lockReason": {
                        "type": "string",
                        "description": "The BusinessStatus of the Ipv6AddressBandwidth.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "The network type of the Ipv6AddressBandwidth.\n"
                    },
                    "overdueTime": {
                        "type": "string",
                        "description": "Overdue time of the Ipv6AddressBandwidth.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Ipv6AddressBandwidth.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "Update time of the Ipv6AddressBandwidth.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/ipv6Gateway:Ipv6Gateway": {
            "description": "Provides a resource to manage vpc ipv6 gateway\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpc.Ipv6Gateway(\"foo\", {\n    description: \"test\",\n    vpcId: \"vpc-12afxho4sxyio17q7y2kkp8ej\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.Ipv6Gateway(\"foo\",\n    description=\"test\",\n    vpc_id=\"vpc-12afxho4sxyio17q7y2kkp8ej\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.Ipv6Gateway(\"foo\", new Volcengine.Vpc.Ipv6GatewayArgs\n        {\n            Description = \"test\",\n            VpcId = \"vpc-12afxho4sxyio17q7y2kkp8ej\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewIpv6Gateway(ctx, \"foo\", \u0026vpc.Ipv6GatewayArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tVpcId:       pulumi.String(\"vpc-12afxho4sxyio17q7y2kkp8ej\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Ipv6Gateway(\"foo\", Ipv6GatewayArgs.builder()        \n            .description(\"test\")\n            .vpcId(\"vpc-12afxho4sxyio17q7y2kkp8ej\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:Ipv6Gateway\n    properties:\n      description: test\n      vpcId: vpc-12afxho4sxyio17q7y2kkp8ej\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIpv6Gateway can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/ipv6Gateway:Ipv6Gateway default ipv6gw-12bcapllb5ukg17q7y2sd3thx\n```\n\n ",
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of the Ipv6Gateway.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Ipv6Gateway.\n"
                },
                "ipv6GatewayId": {
                    "type": "string",
                    "description": "The ID of the Ipv6Gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Ipv6Gateway.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The Status of the Ipv6Gateway.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "Update time of the Ipv6Gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC which the Ipv6Gateway belongs to.\n"
                }
            },
            "required": [
                "creationTime",
                "description",
                "ipv6GatewayId",
                "name",
                "status",
                "updateTime",
                "vpcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Ipv6Gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Ipv6Gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC which the Ipv6Gateway belongs to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ipv6Gateway resources.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time of the Ipv6Gateway.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Ipv6Gateway.\n"
                    },
                    "ipv6GatewayId": {
                        "type": "string",
                        "description": "The ID of the Ipv6Gateway.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Ipv6Gateway.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The Status of the Ipv6Gateway.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "Update time of the Ipv6Gateway.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of the VPC which the Ipv6Gateway belongs to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/networkAcl:NetworkAcl": {
            "description": "Provides a resource to manage network acl\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpc.NetworkAcl(\"foo\", {\n    egressAclEntries: [{\n        destinationCidrIp: \"192.168.0.0/16\",\n        networkAclEntryName: \"egress2\",\n        policy: \"accept\",\n        protocol: \"all\",\n    }],\n    ingressAclEntries: [\n        {\n            networkAclEntryName: \"ingress1\",\n            policy: \"accept\",\n            protocol: \"all\",\n            sourceCidrIp: \"192.168.0.0/24\",\n        },\n        {\n            networkAclEntryName: \"ingress3\",\n            policy: \"accept\",\n            port: \"80/80\",\n            protocol: \"tcp\",\n            sourceCidrIp: \"192.168.0.0/24\",\n        },\n    ],\n    networkAclName: \"tf-test-acl\",\n    projectName: \"default\",\n    vpcId: \"vpc-2d6jskar243k058ozfdae13ne\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.NetworkAcl(\"foo\",\n    egress_acl_entries=[volcengine.vpc.NetworkAclEgressAclEntryArgs(\n        destination_cidr_ip=\"192.168.0.0/16\",\n        network_acl_entry_name=\"egress2\",\n        policy=\"accept\",\n        protocol=\"all\",\n    )],\n    ingress_acl_entries=[\n        volcengine.vpc.NetworkAclIngressAclEntryArgs(\n            network_acl_entry_name=\"ingress1\",\n            policy=\"accept\",\n            protocol=\"all\",\n            source_cidr_ip=\"192.168.0.0/24\",\n        ),\n        volcengine.vpc.NetworkAclIngressAclEntryArgs(\n            network_acl_entry_name=\"ingress3\",\n            policy=\"accept\",\n            port=\"80/80\",\n            protocol=\"tcp\",\n            source_cidr_ip=\"192.168.0.0/24\",\n        ),\n    ],\n    network_acl_name=\"tf-test-acl\",\n    project_name=\"default\",\n    vpc_id=\"vpc-2d6jskar243k058ozfdae13ne\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.NetworkAcl(\"foo\", new Volcengine.Vpc.NetworkAclArgs\n        {\n            EgressAclEntries = \n            {\n                new Volcengine.Vpc.Inputs.NetworkAclEgressAclEntryArgs\n                {\n                    DestinationCidrIp = \"192.168.0.0/16\",\n                    NetworkAclEntryName = \"egress2\",\n                    Policy = \"accept\",\n                    Protocol = \"all\",\n                },\n            },\n            IngressAclEntries = \n            {\n                new Volcengine.Vpc.Inputs.NetworkAclIngressAclEntryArgs\n                {\n                    NetworkAclEntryName = \"ingress1\",\n                    Policy = \"accept\",\n                    Protocol = \"all\",\n                    SourceCidrIp = \"192.168.0.0/24\",\n                },\n                new Volcengine.Vpc.Inputs.NetworkAclIngressAclEntryArgs\n                {\n                    NetworkAclEntryName = \"ingress3\",\n                    Policy = \"accept\",\n                    Port = \"80/80\",\n                    Protocol = \"tcp\",\n                    SourceCidrIp = \"192.168.0.0/24\",\n                },\n            },\n            NetworkAclName = \"tf-test-acl\",\n            ProjectName = \"default\",\n            VpcId = \"vpc-2d6jskar243k058ozfdae13ne\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewNetworkAcl(ctx, \"foo\", \u0026vpc.NetworkAclArgs{\n\t\t\tEgressAclEntries: vpc.NetworkAclEgressAclEntryArray{\n\t\t\t\t\u0026vpc.NetworkAclEgressAclEntryArgs{\n\t\t\t\t\tDestinationCidrIp:   pulumi.String(\"192.168.0.0/16\"),\n\t\t\t\t\tNetworkAclEntryName: pulumi.String(\"egress2\"),\n\t\t\t\t\tPolicy:              pulumi.String(\"accept\"),\n\t\t\t\t\tProtocol:            pulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tIngressAclEntries: vpc.NetworkAclIngressAclEntryArray{\n\t\t\t\t\u0026vpc.NetworkAclIngressAclEntryArgs{\n\t\t\t\t\tNetworkAclEntryName: pulumi.String(\"ingress1\"),\n\t\t\t\t\tPolicy:              pulumi.String(\"accept\"),\n\t\t\t\t\tProtocol:            pulumi.String(\"all\"),\n\t\t\t\t\tSourceCidrIp:        pulumi.String(\"192.168.0.0/24\"),\n\t\t\t\t},\n\t\t\t\t\u0026vpc.NetworkAclIngressAclEntryArgs{\n\t\t\t\t\tNetworkAclEntryName: pulumi.String(\"ingress3\"),\n\t\t\t\t\tPolicy:              pulumi.String(\"accept\"),\n\t\t\t\t\tPort:                pulumi.String(\"80/80\"),\n\t\t\t\t\tProtocol:            pulumi.String(\"tcp\"),\n\t\t\t\t\tSourceCidrIp:        pulumi.String(\"192.168.0.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNetworkAclName: pulumi.String(\"tf-test-acl\"),\n\t\t\tProjectName:    pulumi.String(\"default\"),\n\t\t\tVpcId:          pulumi.String(\"vpc-2d6jskar243k058ozfdae13ne\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NetworkAcl(\"foo\", NetworkAclArgs.builder()        \n            .egressAclEntries(NetworkAclEgressAclEntryArgs.builder()\n                .destinationCidrIp(\"192.168.0.0/16\")\n                .networkAclEntryName(\"egress2\")\n                .policy(\"accept\")\n                .protocol(\"all\")\n                .build())\n            .ingressAclEntries(            \n                NetworkAclIngressAclEntryArgs.builder()\n                    .networkAclEntryName(\"ingress1\")\n                    .policy(\"accept\")\n                    .protocol(\"all\")\n                    .sourceCidrIp(\"192.168.0.0/24\")\n                    .build(),\n                NetworkAclIngressAclEntryArgs.builder()\n                    .networkAclEntryName(\"ingress3\")\n                    .policy(\"accept\")\n                    .port(\"80/80\")\n                    .protocol(\"tcp\")\n                    .sourceCidrIp(\"192.168.0.0/24\")\n                    .build())\n            .networkAclName(\"tf-test-acl\")\n            .projectName(\"default\")\n            .vpcId(\"vpc-2d6jskar243k058ozfdae13ne\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:NetworkAcl\n    properties:\n      egressAclEntries:\n        - destinationCidrIp: 192.168.0.0/16\n          networkAclEntryName: egress2\n          policy: accept\n          protocol: all\n      ingressAclEntries:\n        - networkAclEntryName: ingress1\n          policy: accept\n          protocol: all\n          sourceCidrIp: 192.168.0.0/24\n        - networkAclEntryName: ingress3\n          policy: accept\n          port: 80/80\n          protocol: tcp\n          sourceCidrIp: 192.168.0.0/24\n      networkAclName: tf-test-acl\n      projectName: default\n      vpcId: vpc-2d6jskar243k058ozfdae13ne\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetwork Acl can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/networkAcl:NetworkAcl default nacl-172leak37mi9s4d1w33pswqkh\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Network Acl.\n"
                },
                "egressAclEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkAclEgressAclEntry:NetworkAclEgressAclEntry"
                    },
                    "description": "The egress entries of Network Acl.\n"
                },
                "ingressAclEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkAclIngressAclEntry:NetworkAclIngressAclEntry"
                    },
                    "description": "The ingress entries of Network Acl.\n"
                },
                "networkAclName": {
                    "type": "string",
                    "description": "The name of Network Acl.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name of the network acl.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc id of Network Acl.\n"
                }
            },
            "required": [
                "egressAclEntries",
                "ingressAclEntries",
                "networkAclName",
                "vpcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Network Acl.\n"
                },
                "egressAclEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkAclEgressAclEntry:NetworkAclEgressAclEntry"
                    },
                    "description": "The egress entries of Network Acl.\n"
                },
                "ingressAclEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkAclIngressAclEntry:NetworkAclIngressAclEntry"
                    },
                    "description": "The ingress entries of Network Acl.\n"
                },
                "networkAclName": {
                    "type": "string",
                    "description": "The name of Network Acl.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name of the network acl.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc id of Network Acl.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkAcl resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Network Acl.\n"
                    },
                    "egressAclEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/NetworkAclEgressAclEntry:NetworkAclEgressAclEntry"
                        },
                        "description": "The egress entries of Network Acl.\n"
                    },
                    "ingressAclEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/NetworkAclIngressAclEntry:NetworkAclIngressAclEntry"
                        },
                        "description": "The ingress entries of Network Acl.\n"
                    },
                    "networkAclName": {
                        "type": "string",
                        "description": "The name of Network Acl.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The project name of the network acl.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc id of Network Acl.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/networkAclAssociate:NetworkAclAssociate": {
            "description": "Provides a resource to manage network acl associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\n\nconst foo = new volcengine.vpc.NetworkAcl(\"foo\", {\n    vpcId: \"vpc-ru0wv9alfoxsu3nuld85rpp\",\n    networkAclName: \"tf-test-acl\",\n});\nconst foo1 = new volcengine.vpc.NetworkAclAssociate(\"foo1\", {\n    networkAclId: foo.id,\n    resourceId: \"subnet-637jxq81u5mon3gd6ivc7rj\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.NetworkAcl(\"foo\",\n    vpc_id=\"vpc-ru0wv9alfoxsu3nuld85rpp\",\n    network_acl_name=\"tf-test-acl\")\nfoo1 = volcengine.vpc.NetworkAclAssociate(\"foo1\",\n    network_acl_id=foo.id,\n    resource_id=\"subnet-637jxq81u5mon3gd6ivc7rj\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.NetworkAcl(\"foo\", new Volcengine.Vpc.NetworkAclArgs\n        {\n            VpcId = \"vpc-ru0wv9alfoxsu3nuld85rpp\",\n            NetworkAclName = \"tf-test-acl\",\n        });\n        var foo1 = new Volcengine.Vpc.NetworkAclAssociate(\"foo1\", new Volcengine.Vpc.NetworkAclAssociateArgs\n        {\n            NetworkAclId = foo.Id,\n            ResourceId = \"subnet-637jxq81u5mon3gd6ivc7rj\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := vpc.NewNetworkAcl(ctx, \"foo\", \u0026vpc.NetworkAclArgs{\n\t\t\tVpcId:          pulumi.String(\"vpc-ru0wv9alfoxsu3nuld85rpp\"),\n\t\t\tNetworkAclName: pulumi.String(\"tf-test-acl\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewNetworkAclAssociate(ctx, \"foo1\", \u0026vpc.NetworkAclAssociateArgs{\n\t\t\tNetworkAclId: foo.ID(),\n\t\t\tResourceId:   pulumi.String(\"subnet-637jxq81u5mon3gd6ivc7rj\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NetworkAcl(\"foo\", NetworkAclArgs.builder()        \n            .vpcId(\"vpc-ru0wv9alfoxsu3nuld85rpp\")\n            .networkAclName(\"tf-test-acl\")\n            .build());\n\n        var foo1 = new NetworkAclAssociate(\"foo1\", NetworkAclAssociateArgs.builder()        \n            .networkAclId(foo.id())\n            .resourceId(\"subnet-637jxq81u5mon3gd6ivc7rj\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:NetworkAcl\n    properties:\n      vpcId: vpc-ru0wv9alfoxsu3nuld85rpp\n      networkAclName: tf-test-acl\n  foo1:\n    type: volcengine:vpc:NetworkAclAssociate\n    properties:\n      networkAclId: ${foo.id}\n      resourceId: subnet-637jxq81u5mon3gd6ivc7rj\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetworkAcl associate can be imported using the network_acl_id:resource_id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/networkAclAssociate:NetworkAclAssociate default nacl-172leak37mi9s4d1w33pswqkh:subnet-637jxq81u5mon3gd6ivc7rj\n```\n\n ",
            "properties": {
                "networkAclId": {
                    "type": "string",
                    "description": "The id of Network Acl.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The resource id of Network Acl.\n"
                }
            },
            "required": [
                "networkAclId",
                "resourceId"
            ],
            "inputProperties": {
                "networkAclId": {
                    "type": "string",
                    "description": "The id of Network Acl.\n",
                    "willReplaceOnChanges": true
                },
                "resourceId": {
                    "type": "string",
                    "description": "The resource id of Network Acl.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "networkAclId",
                "resourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkAclAssociate resources.\n",
                "properties": {
                    "networkAclId": {
                        "type": "string",
                        "description": "The id of Network Acl.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The resource id of Network Acl.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/networkInterface:NetworkInterface": {
            "description": "Provides a resource to manage network interface\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpc.NetworkInterface(\"foo\", {\n    description: \"tf-test-up\",\n    networkInterfaceName: \"tf-test-up\",\n    portSecurityEnabled: false,\n    primaryIpAddress: \"192.168.5.253\",\n    privateIpAddresses: [\"192.168.5.2\"],\n    projectName: \"default\",\n    securityGroupIds: [\"sg-2fepz3c793g1s59gp67y21r34\"],\n    subnetId: \"subnet-2fe79j7c8o5c059gp68ksxr93\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.NetworkInterface(\"foo\",\n    description=\"tf-test-up\",\n    network_interface_name=\"tf-test-up\",\n    port_security_enabled=False,\n    primary_ip_address=\"192.168.5.253\",\n    private_ip_addresses=[\"192.168.5.2\"],\n    project_name=\"default\",\n    security_group_ids=[\"sg-2fepz3c793g1s59gp67y21r34\"],\n    subnet_id=\"subnet-2fe79j7c8o5c059gp68ksxr93\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.NetworkInterface(\"foo\", new Volcengine.Vpc.NetworkInterfaceArgs\n        {\n            Description = \"tf-test-up\",\n            NetworkInterfaceName = \"tf-test-up\",\n            PortSecurityEnabled = false,\n            PrimaryIpAddress = \"192.168.5.253\",\n            PrivateIpAddresses = \n            {\n                \"192.168.5.2\",\n            },\n            ProjectName = \"default\",\n            SecurityGroupIds = \n            {\n                \"sg-2fepz3c793g1s59gp67y21r34\",\n            },\n            SubnetId = \"subnet-2fe79j7c8o5c059gp68ksxr93\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewNetworkInterface(ctx, \"foo\", \u0026vpc.NetworkInterfaceArgs{\n\t\t\tDescription:          pulumi.String(\"tf-test-up\"),\n\t\t\tNetworkInterfaceName: pulumi.String(\"tf-test-up\"),\n\t\t\tPortSecurityEnabled:  pulumi.Bool(false),\n\t\t\tPrimaryIpAddress:     pulumi.String(\"192.168.5.253\"),\n\t\t\tPrivateIpAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.5.2\"),\n\t\t\t},\n\t\t\tProjectName: pulumi.String(\"default\"),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sg-2fepz3c793g1s59gp67y21r34\"),\n\t\t\t},\n\t\t\tSubnetId: pulumi.String(\"subnet-2fe79j7c8o5c059gp68ksxr93\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NetworkInterface(\"foo\", NetworkInterfaceArgs.builder()        \n            .description(\"tf-test-up\")\n            .networkInterfaceName(\"tf-test-up\")\n            .portSecurityEnabled(false)\n            .primaryIpAddress(\"192.168.5.253\")\n            .privateIpAddresses(\"192.168.5.2\")\n            .projectName(\"default\")\n            .securityGroupIds(\"sg-2fepz3c793g1s59gp67y21r34\")\n            .subnetId(\"subnet-2fe79j7c8o5c059gp68ksxr93\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:NetworkInterface\n    properties:\n      description: tf-test-up\n      networkInterfaceName: tf-test-up\n      portSecurityEnabled: false\n      primaryIpAddress: 192.168.5.253\n      privateIpAddresses:\n        - 192.168.5.2\n      projectName: default\n      securityGroupIds:\n        - sg-2fepz3c793g1s59gp67y21r34\n      subnetId: subnet-2fe79j7c8o5c059gp68ksxr93\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetwork interface can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/networkInterface:NetworkInterface default eni-bp1fgnh68xyz9****\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the ENI.\n"
                },
                "networkInterfaceName": {
                    "type": "string",
                    "description": "The name of the ENI.\n"
                },
                "portSecurityEnabled": {
                    "type": "boolean",
                    "description": "Set port security enable or disable.\n"
                },
                "primaryIpAddress": {
                    "type": "string",
                    "description": "The primary IP address of the ENI.\n"
                },
                "privateIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of private ip address. This field conflicts with `secondary_private_ip_address_count`.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the ENI.\n"
                },
                "secondaryPrivateIpAddressCount": {
                    "type": "integer",
                    "description": "The count of secondary private ip address. This field conflicts with `private_ip_address`.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the security group id to which the secondary ENI belongs.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the ENI.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet to which the ENI is connected.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkInterfaceTag:NetworkInterfaceTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "required": [
                "networkInterfaceName",
                "portSecurityEnabled",
                "primaryIpAddress",
                "privateIpAddresses",
                "secondaryPrivateIpAddressCount",
                "securityGroupIds",
                "status",
                "subnetId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the ENI.\n"
                },
                "networkInterfaceName": {
                    "type": "string",
                    "description": "The name of the ENI.\n"
                },
                "portSecurityEnabled": {
                    "type": "boolean",
                    "description": "Set port security enable or disable.\n"
                },
                "primaryIpAddress": {
                    "type": "string",
                    "description": "The primary IP address of the ENI.\n",
                    "willReplaceOnChanges": true
                },
                "privateIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of private ip address. This field conflicts with `secondary_private_ip_address_count`.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the ENI.\n"
                },
                "secondaryPrivateIpAddressCount": {
                    "type": "integer",
                    "description": "The count of secondary private ip address. This field conflicts with `private_ip_address`.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the security group id to which the secondary ENI belongs.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet to which the ENI is connected.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/NetworkInterfaceTag:NetworkInterfaceTag"
                    },
                    "description": "Tags.\n"
                }
            },
            "requiredInputs": [
                "securityGroupIds",
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkInterface resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the ENI.\n"
                    },
                    "networkInterfaceName": {
                        "type": "string",
                        "description": "The name of the ENI.\n"
                    },
                    "portSecurityEnabled": {
                        "type": "boolean",
                        "description": "Set port security enable or disable.\n"
                    },
                    "primaryIpAddress": {
                        "type": "string",
                        "description": "The primary IP address of the ENI.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of private ip address. This field conflicts with `secondary_private_ip_address_count`.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the ENI.\n"
                    },
                    "secondaryPrivateIpAddressCount": {
                        "type": "integer",
                        "description": "The count of secondary private ip address. This field conflicts with `private_ip_address`.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the security group id to which the secondary ENI belongs.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the ENI.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the subnet to which the ENI is connected.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/NetworkInterfaceTag:NetworkInterfaceTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/networkInterfaceAttach:NetworkInterfaceAttach": {
            "description": "Provides a resource to manage network interface attach\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpc.NetworkInterfaceAttach(\"foo\", {\n    instanceId: \"i-72q20hi6s082wcafdem8\",\n    networkInterfaceId: \"eni-274ecj646ylts7fap8t6xbba1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.NetworkInterfaceAttach(\"foo\",\n    instance_id=\"i-72q20hi6s082wcafdem8\",\n    network_interface_id=\"eni-274ecj646ylts7fap8t6xbba1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.NetworkInterfaceAttach(\"foo\", new Volcengine.Vpc.NetworkInterfaceAttachArgs\n        {\n            InstanceId = \"i-72q20hi6s082wcafdem8\",\n            NetworkInterfaceId = \"eni-274ecj646ylts7fap8t6xbba1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewNetworkInterfaceAttach(ctx, \"foo\", \u0026vpc.NetworkInterfaceAttachArgs{\n\t\t\tInstanceId:         pulumi.String(\"i-72q20hi6s082wcafdem8\"),\n\t\t\tNetworkInterfaceId: pulumi.String(\"eni-274ecj646ylts7fap8t6xbba1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NetworkInterfaceAttach(\"foo\", NetworkInterfaceAttachArgs.builder()        \n            .instanceId(\"i-72q20hi6s082wcafdem8\")\n            .networkInterfaceId(\"eni-274ecj646ylts7fap8t6xbba1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:NetworkInterfaceAttach\n    properties:\n      instanceId: i-72q20hi6s082wcafdem8\n      networkInterfaceId: eni-274ecj646ylts7fap8t6xbba1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetwork interface attach can be imported using the network_interface_id:instance_id.\n\n```sh\n $ pulumi import volcengine:vpc/networkInterfaceAttach:NetworkInterfaceAttach default eni-bp1fg655nh68xyz9***:i-wijfn35c****\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The id of the instance to which the ENI is bound.\n"
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The id of the ENI.\n"
                }
            },
            "required": [
                "instanceId",
                "networkInterfaceId"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The id of the instance to which the ENI is bound.\n",
                    "willReplaceOnChanges": true
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The id of the ENI.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "networkInterfaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkInterfaceAttach resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the instance to which the ENI is bound.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "The id of the ENI.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/routeEntry:RouteEntry": {
            "description": "Provides a resource to manage route entry\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpc.RouteEntry(\"foo\", {\n    description: \"tf-test-up\",\n    destinationCidrBlock: \"0.0.0.0/2\",\n    nextHopId: \"ngw-274gwbqe340zk7fap8spkzo7x\",\n    nextHopType: \"NatGW\",\n    routeEntryName: \"tf-test-up\",\n    routeTableId: \"vtb-2744hslq5b7r47fap8tjomgnj\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.RouteEntry(\"foo\",\n    description=\"tf-test-up\",\n    destination_cidr_block=\"0.0.0.0/2\",\n    next_hop_id=\"ngw-274gwbqe340zk7fap8spkzo7x\",\n    next_hop_type=\"NatGW\",\n    route_entry_name=\"tf-test-up\",\n    route_table_id=\"vtb-2744hslq5b7r47fap8tjomgnj\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.RouteEntry(\"foo\", new Volcengine.Vpc.RouteEntryArgs\n        {\n            Description = \"tf-test-up\",\n            DestinationCidrBlock = \"0.0.0.0/2\",\n            NextHopId = \"ngw-274gwbqe340zk7fap8spkzo7x\",\n            NextHopType = \"NatGW\",\n            RouteEntryName = \"tf-test-up\",\n            RouteTableId = \"vtb-2744hslq5b7r47fap8tjomgnj\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewRouteEntry(ctx, \"foo\", \u0026vpc.RouteEntryArgs{\n\t\t\tDescription:          pulumi.String(\"tf-test-up\"),\n\t\t\tDestinationCidrBlock: pulumi.String(\"0.0.0.0/2\"),\n\t\t\tNextHopId:            pulumi.String(\"ngw-274gwbqe340zk7fap8spkzo7x\"),\n\t\t\tNextHopType:          pulumi.String(\"NatGW\"),\n\t\t\tRouteEntryName:       pulumi.String(\"tf-test-up\"),\n\t\t\tRouteTableId:         pulumi.String(\"vtb-2744hslq5b7r47fap8tjomgnj\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new RouteEntry(\"foo\", RouteEntryArgs.builder()        \n            .description(\"tf-test-up\")\n            .destinationCidrBlock(\"0.0.0.0/2\")\n            .nextHopId(\"ngw-274gwbqe340zk7fap8spkzo7x\")\n            .nextHopType(\"NatGW\")\n            .routeEntryName(\"tf-test-up\")\n            .routeTableId(\"vtb-2744hslq5b7r47fap8tjomgnj\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:RouteEntry\n    properties:\n      description: tf-test-up\n      destinationCidrBlock: 0.0.0.0/2\n      nextHopId: ngw-274gwbqe340zk7fap8spkzo7x\n      nextHopType: NatGW\n      routeEntryName: tf-test-up\n      routeTableId: vtb-2744hslq5b7r47fap8tjomgnj\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoute entry can be imported using the route_table_id:route_entry_id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/routeEntry:RouteEntry default vtb-274e19skkuhog7fap8u4i8ird:rte-274e1g9ei4k5c7fap8sp974fq\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the route entry.\n"
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "The destination CIDR block of the route entry.\n"
                },
                "nextHopId": {
                    "type": "string",
                    "description": "The id of the next hop.\n"
                },
                "nextHopType": {
                    "type": "string",
                    "description": "The type of the next hop, Optional choice contains `Instance`, `NetworkInterface`, `NatGW`, `VpnGW`, `TransitRouter`.\n"
                },
                "routeEntryId": {
                    "type": "string",
                    "description": "The id of the route entry.\n"
                },
                "routeEntryName": {
                    "type": "string",
                    "description": "The name of the route entry.\n"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "The id of the route table.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The description of the route entry.\n"
                }
            },
            "required": [
                "destinationCidrBlock",
                "nextHopId",
                "nextHopType",
                "routeEntryId",
                "routeTableId",
                "status"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the route entry.\n"
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "The destination CIDR block of the route entry.\n",
                    "willReplaceOnChanges": true
                },
                "nextHopId": {
                    "type": "string",
                    "description": "The id of the next hop.\n",
                    "willReplaceOnChanges": true
                },
                "nextHopType": {
                    "type": "string",
                    "description": "The type of the next hop, Optional choice contains `Instance`, `NetworkInterface`, `NatGW`, `VpnGW`, `TransitRouter`.\n",
                    "willReplaceOnChanges": true
                },
                "routeEntryName": {
                    "type": "string",
                    "description": "The name of the route entry.\n"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "The id of the route table.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "destinationCidrBlock",
                "nextHopId",
                "nextHopType",
                "routeTableId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RouteEntry resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the route entry.\n"
                    },
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "The destination CIDR block of the route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextHopId": {
                        "type": "string",
                        "description": "The id of the next hop.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextHopType": {
                        "type": "string",
                        "description": "The type of the next hop, Optional choice contains `Instance`, `NetworkInterface`, `NatGW`, `VpnGW`, `TransitRouter`.\n",
                        "willReplaceOnChanges": true
                    },
                    "routeEntryId": {
                        "type": "string",
                        "description": "The id of the route entry.\n"
                    },
                    "routeEntryName": {
                        "type": "string",
                        "description": "The name of the route entry.\n"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "The id of the route table.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The description of the route entry.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/routeTable:RouteTable": {
            "description": "Provides a resource to manage route table\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpc.RouteTable(\"foo\", {\n    description: \"tf-test1\",\n    projectName: \"yuwao\",\n    routeTableName: \"tf-project-1\",\n    vpcId: \"vpc-2feppmy1ugt1c59gp688n1fld\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.RouteTable(\"foo\",\n    description=\"tf-test1\",\n    project_name=\"yuwao\",\n    route_table_name=\"tf-project-1\",\n    vpc_id=\"vpc-2feppmy1ugt1c59gp688n1fld\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.RouteTable(\"foo\", new Volcengine.Vpc.RouteTableArgs\n        {\n            Description = \"tf-test1\",\n            ProjectName = \"yuwao\",\n            RouteTableName = \"tf-project-1\",\n            VpcId = \"vpc-2feppmy1ugt1c59gp688n1fld\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewRouteTable(ctx, \"foo\", \u0026vpc.RouteTableArgs{\n\t\t\tDescription:    pulumi.String(\"tf-test1\"),\n\t\t\tProjectName:    pulumi.String(\"yuwao\"),\n\t\t\tRouteTableName: pulumi.String(\"tf-project-1\"),\n\t\t\tVpcId:          pulumi.String(\"vpc-2feppmy1ugt1c59gp688n1fld\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new RouteTable(\"foo\", RouteTableArgs.builder()        \n            .description(\"tf-test1\")\n            .projectName(\"yuwao\")\n            .routeTableName(\"tf-project-1\")\n            .vpcId(\"vpc-2feppmy1ugt1c59gp688n1fld\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:RouteTable\n    properties:\n      description: tf-test1\n      projectName: yuwao\n      routeTableName: tf-project-1\n      vpcId: vpc-2feppmy1ugt1c59gp688n1fld\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoute table can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/routeTable:RouteTable default vtb-274e0syt9av407fap8tle16kb\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the route table.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the route table.\n"
                },
                "routeTableName": {
                    "type": "string",
                    "description": "The name of the route table.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n"
                }
            },
            "required": [
                "routeTableName",
                "vpcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the route table.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the route table.\n"
                },
                "routeTableName": {
                    "type": "string",
                    "description": "The name of the route table.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RouteTable resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the route table.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the route table.\n"
                    },
                    "routeTableName": {
                        "type": "string",
                        "description": "The name of the route table.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/routeTableAssociate:RouteTableAssociate": {
            "description": "Provides a resource to manage route table associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpc.RouteTableAssociate(\"foo\", {\n    routeTableId: \"vtb-274e19skkuhog7fap8u4i8ird\",\n    subnetId: \"subnet-2744ht7fhjthc7fap8tm10eqg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.RouteTableAssociate(\"foo\",\n    route_table_id=\"vtb-274e19skkuhog7fap8u4i8ird\",\n    subnet_id=\"subnet-2744ht7fhjthc7fap8tm10eqg\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.RouteTableAssociate(\"foo\", new Volcengine.Vpc.RouteTableAssociateArgs\n        {\n            RouteTableId = \"vtb-274e19skkuhog7fap8u4i8ird\",\n            SubnetId = \"subnet-2744ht7fhjthc7fap8tm10eqg\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewRouteTableAssociate(ctx, \"foo\", \u0026vpc.RouteTableAssociateArgs{\n\t\t\tRouteTableId: pulumi.String(\"vtb-274e19skkuhog7fap8u4i8ird\"),\n\t\t\tSubnetId:     pulumi.String(\"subnet-2744ht7fhjthc7fap8tm10eqg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new RouteTableAssociate(\"foo\", RouteTableAssociateArgs.builder()        \n            .routeTableId(\"vtb-274e19skkuhog7fap8u4i8ird\")\n            .subnetId(\"subnet-2744ht7fhjthc7fap8tm10eqg\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:RouteTableAssociate\n    properties:\n      routeTableId: vtb-274e19skkuhog7fap8u4i8ird\n      subnetId: subnet-2744ht7fhjthc7fap8tm10eqg\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoute table associate address can be imported using the route_table_id:subnet_id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/routeTableAssociate:RouteTableAssociate default vtb-2fdzao4h726f45******:subnet-2fdzaou4liw3k5oxruv******\n```\n\n ",
            "properties": {
                "routeTableId": {
                    "type": "string",
                    "description": "The id of the route table.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet.\n"
                }
            },
            "required": [
                "routeTableId",
                "subnetId"
            ],
            "inputProperties": {
                "routeTableId": {
                    "type": "string",
                    "description": "The id of the route table.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "routeTableId",
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RouteTableAssociate resources.\n",
                "properties": {
                    "routeTableId": {
                        "type": "string",
                        "description": "The id of the route table.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the subnet.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/securityGroup:SecurityGroup": {
            "description": "Provides a resource to manage security group\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst g1test1 = new volcengine.vpc.SecurityGroup(\"g1test1\", {\n    projectName: \"yuwenhao\",\n    vpcId: \"vpc-2feppmy1ugt1c59gp688n1fld\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ng1test1 = volcengine.vpc.SecurityGroup(\"g1test1\",\n    project_name=\"yuwenhao\",\n    vpc_id=\"vpc-2feppmy1ugt1c59gp688n1fld\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var g1test1 = new Volcengine.Vpc.SecurityGroup(\"g1test1\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            ProjectName = \"yuwenhao\",\n            VpcId = \"vpc-2feppmy1ugt1c59gp688n1fld\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewSecurityGroup(ctx, \"g1test1\", \u0026vpc.SecurityGroupArgs{\n\t\t\tProjectName: pulumi.String(\"yuwenhao\"),\n\t\t\tVpcId:       pulumi.String(\"vpc-2feppmy1ugt1c59gp688n1fld\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var g1test1 = new SecurityGroup(\"g1test1\", SecurityGroupArgs.builder()        \n            .projectName(\"yuwenhao\")\n            .vpcId(\"vpc-2feppmy1ugt1c59gp688n1fld\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  g1test1:\n    type: volcengine:vpc:SecurityGroup\n    properties:\n      projectName: yuwenhao\n      vpcId: vpc-2feppmy1ugt1c59gp688n1fld\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSecurityGroup can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/securityGroup:SecurityGroup default sg-273ycgql3ig3k7fap8t3dyvqx\n```\n\n ",
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of SecurityGroup.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of SecurityGroup.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of SecurityGroup.\n"
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "Name of SecurityGroup.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of SecurityGroup.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/SecurityGroupTag:SecurityGroupTag"
                    },
                    "description": "Tags.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Id of the VPC.\n"
                }
            },
            "required": [
                "creationTime",
                "securityGroupName",
                "status",
                "vpcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of SecurityGroup.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of SecurityGroup.\n"
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "Name of SecurityGroup.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/SecurityGroupTag:SecurityGroupTag"
                    },
                    "description": "Tags.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Id of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroup resources.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time of SecurityGroup.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of SecurityGroup.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of SecurityGroup.\n"
                    },
                    "securityGroupName": {
                        "type": "string",
                        "description": "Name of SecurityGroup.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of SecurityGroup.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/SecurityGroupTag:SecurityGroupTag"
                        },
                        "description": "Tags.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Id of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/securityGroupRule:SecurityGroupRule": {
            "description": "Provides a resource to manage security group rule\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst g1test3 = new volcengine.vpc.SecurityGroupRule(\"g1test3\", {\n    cidrIp: \"10.0.0.0/8\",\n    description: \"tft1234\",\n    direction: \"egress\",\n    portEnd: 9003,\n    portStart: 8000,\n    protocol: \"tcp\",\n    securityGroupId: \"sg-2d6722jpp55og58ozfd1sqtdb\",\n});\nconst g1test2 = new volcengine.vpc.SecurityGroupRule(\"g1test2\", {\n    cidrIp: \"10.0.0.0/24\",\n    direction: \"egress\",\n    portEnd: 9003,\n    portStart: 8000,\n    protocol: \"tcp\",\n    securityGroupId: \"sg-2d6722jpp55og58ozfd1sqtdb\",\n});\nconst g1test1 = new volcengine.vpc.SecurityGroupRule(\"g1test1\", {\n    cidrIp: \"10.0.0.0/24\",\n    direction: \"egress\",\n    portEnd: 9003,\n    portStart: 8000,\n    priority: 2,\n    protocol: \"tcp\",\n    securityGroupId: \"sg-2d6722jpp55og58ozfd1sqtdb\",\n});\nconst g1test0 = new volcengine.vpc.SecurityGroupRule(\"g1test0\", {\n    cidrIp: \"10.0.0.0/24\",\n    description: \"tft\",\n    direction: \"ingress\",\n    policy: \"drop\",\n    portEnd: 80,\n    portStart: 80,\n    priority: 2,\n    protocol: \"tcp\",\n    securityGroupId: \"sg-2d6722jpp55og58ozfd1sqtdb\",\n});\nconst g1test06 = new volcengine.vpc.SecurityGroupRule(\"g1test06\", {\n    description: \"tft\",\n    direction: \"ingress\",\n    policy: \"drop\",\n    portEnd: 9003,\n    portStart: 8000,\n    priority: 2,\n    protocol: \"tcp\",\n    securityGroupId: \"sg-2d6722jpp55og58ozfd1sqtdb\",\n    sourceGroupId: \"sg-3rfe5j4xdnklc5zsk2hcw5c6q\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ng1test3 = volcengine.vpc.SecurityGroupRule(\"g1test3\",\n    cidr_ip=\"10.0.0.0/8\",\n    description=\"tft1234\",\n    direction=\"egress\",\n    port_end=9003,\n    port_start=8000,\n    protocol=\"tcp\",\n    security_group_id=\"sg-2d6722jpp55og58ozfd1sqtdb\")\ng1test2 = volcengine.vpc.SecurityGroupRule(\"g1test2\",\n    cidr_ip=\"10.0.0.0/24\",\n    direction=\"egress\",\n    port_end=9003,\n    port_start=8000,\n    protocol=\"tcp\",\n    security_group_id=\"sg-2d6722jpp55og58ozfd1sqtdb\")\ng1test1 = volcengine.vpc.SecurityGroupRule(\"g1test1\",\n    cidr_ip=\"10.0.0.0/24\",\n    direction=\"egress\",\n    port_end=9003,\n    port_start=8000,\n    priority=2,\n    protocol=\"tcp\",\n    security_group_id=\"sg-2d6722jpp55og58ozfd1sqtdb\")\ng1test0 = volcengine.vpc.SecurityGroupRule(\"g1test0\",\n    cidr_ip=\"10.0.0.0/24\",\n    description=\"tft\",\n    direction=\"ingress\",\n    policy=\"drop\",\n    port_end=80,\n    port_start=80,\n    priority=2,\n    protocol=\"tcp\",\n    security_group_id=\"sg-2d6722jpp55og58ozfd1sqtdb\")\ng1test06 = volcengine.vpc.SecurityGroupRule(\"g1test06\",\n    description=\"tft\",\n    direction=\"ingress\",\n    policy=\"drop\",\n    port_end=9003,\n    port_start=8000,\n    priority=2,\n    protocol=\"tcp\",\n    security_group_id=\"sg-2d6722jpp55og58ozfd1sqtdb\",\n    source_group_id=\"sg-3rfe5j4xdnklc5zsk2hcw5c6q\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var g1test3 = new Volcengine.Vpc.SecurityGroupRule(\"g1test3\", new Volcengine.Vpc.SecurityGroupRuleArgs\n        {\n            CidrIp = \"10.0.0.0/8\",\n            Description = \"tft1234\",\n            Direction = \"egress\",\n            PortEnd = 9003,\n            PortStart = 8000,\n            Protocol = \"tcp\",\n            SecurityGroupId = \"sg-2d6722jpp55og58ozfd1sqtdb\",\n        });\n        var g1test2 = new Volcengine.Vpc.SecurityGroupRule(\"g1test2\", new Volcengine.Vpc.SecurityGroupRuleArgs\n        {\n            CidrIp = \"10.0.0.0/24\",\n            Direction = \"egress\",\n            PortEnd = 9003,\n            PortStart = 8000,\n            Protocol = \"tcp\",\n            SecurityGroupId = \"sg-2d6722jpp55og58ozfd1sqtdb\",\n        });\n        var g1test1 = new Volcengine.Vpc.SecurityGroupRule(\"g1test1\", new Volcengine.Vpc.SecurityGroupRuleArgs\n        {\n            CidrIp = \"10.0.0.0/24\",\n            Direction = \"egress\",\n            PortEnd = 9003,\n            PortStart = 8000,\n            Priority = 2,\n            Protocol = \"tcp\",\n            SecurityGroupId = \"sg-2d6722jpp55og58ozfd1sqtdb\",\n        });\n        var g1test0 = new Volcengine.Vpc.SecurityGroupRule(\"g1test0\", new Volcengine.Vpc.SecurityGroupRuleArgs\n        {\n            CidrIp = \"10.0.0.0/24\",\n            Description = \"tft\",\n            Direction = \"ingress\",\n            Policy = \"drop\",\n            PortEnd = 80,\n            PortStart = 80,\n            Priority = 2,\n            Protocol = \"tcp\",\n            SecurityGroupId = \"sg-2d6722jpp55og58ozfd1sqtdb\",\n        });\n        var g1test06 = new Volcengine.Vpc.SecurityGroupRule(\"g1test06\", new Volcengine.Vpc.SecurityGroupRuleArgs\n        {\n            Description = \"tft\",\n            Direction = \"ingress\",\n            Policy = \"drop\",\n            PortEnd = 9003,\n            PortStart = 8000,\n            Priority = 2,\n            Protocol = \"tcp\",\n            SecurityGroupId = \"sg-2d6722jpp55og58ozfd1sqtdb\",\n            SourceGroupId = \"sg-3rfe5j4xdnklc5zsk2hcw5c6q\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewSecurityGroupRule(ctx, \"g1test3\", \u0026vpc.SecurityGroupRuleArgs{\n\t\t\tCidrIp:          pulumi.String(\"10.0.0.0/8\"),\n\t\t\tDescription:     pulumi.String(\"tft1234\"),\n\t\t\tDirection:       pulumi.String(\"egress\"),\n\t\t\tPortEnd:         pulumi.Int(9003),\n\t\t\tPortStart:       pulumi.Int(8000),\n\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\tSecurityGroupId: pulumi.String(\"sg-2d6722jpp55og58ozfd1sqtdb\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewSecurityGroupRule(ctx, \"g1test2\", \u0026vpc.SecurityGroupRuleArgs{\n\t\t\tCidrIp:          pulumi.String(\"10.0.0.0/24\"),\n\t\t\tDirection:       pulumi.String(\"egress\"),\n\t\t\tPortEnd:         pulumi.Int(9003),\n\t\t\tPortStart:       pulumi.Int(8000),\n\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\tSecurityGroupId: pulumi.String(\"sg-2d6722jpp55og58ozfd1sqtdb\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewSecurityGroupRule(ctx, \"g1test1\", \u0026vpc.SecurityGroupRuleArgs{\n\t\t\tCidrIp:          pulumi.String(\"10.0.0.0/24\"),\n\t\t\tDirection:       pulumi.String(\"egress\"),\n\t\t\tPortEnd:         pulumi.Int(9003),\n\t\t\tPortStart:       pulumi.Int(8000),\n\t\t\tPriority:        pulumi.Int(2),\n\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\tSecurityGroupId: pulumi.String(\"sg-2d6722jpp55og58ozfd1sqtdb\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewSecurityGroupRule(ctx, \"g1test0\", \u0026vpc.SecurityGroupRuleArgs{\n\t\t\tCidrIp:          pulumi.String(\"10.0.0.0/24\"),\n\t\t\tDescription:     pulumi.String(\"tft\"),\n\t\t\tDirection:       pulumi.String(\"ingress\"),\n\t\t\tPolicy:          pulumi.String(\"drop\"),\n\t\t\tPortEnd:         pulumi.Int(80),\n\t\t\tPortStart:       pulumi.Int(80),\n\t\t\tPriority:        pulumi.Int(2),\n\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\tSecurityGroupId: pulumi.String(\"sg-2d6722jpp55og58ozfd1sqtdb\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewSecurityGroupRule(ctx, \"g1test06\", \u0026vpc.SecurityGroupRuleArgs{\n\t\t\tDescription:     pulumi.String(\"tft\"),\n\t\t\tDirection:       pulumi.String(\"ingress\"),\n\t\t\tPolicy:          pulumi.String(\"drop\"),\n\t\t\tPortEnd:         pulumi.Int(9003),\n\t\t\tPortStart:       pulumi.Int(8000),\n\t\t\tPriority:        pulumi.Int(2),\n\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\tSecurityGroupId: pulumi.String(\"sg-2d6722jpp55og58ozfd1sqtdb\"),\n\t\t\tSourceGroupId:   pulumi.String(\"sg-3rfe5j4xdnklc5zsk2hcw5c6q\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var g1test3 = new SecurityGroupRule(\"g1test3\", SecurityGroupRuleArgs.builder()        \n            .cidrIp(\"10.0.0.0/8\")\n            .description(\"tft1234\")\n            .direction(\"egress\")\n            .portEnd(9003)\n            .portStart(8000)\n            .protocol(\"tcp\")\n            .securityGroupId(\"sg-2d6722jpp55og58ozfd1sqtdb\")\n            .build());\n\n        var g1test2 = new SecurityGroupRule(\"g1test2\", SecurityGroupRuleArgs.builder()        \n            .cidrIp(\"10.0.0.0/24\")\n            .direction(\"egress\")\n            .portEnd(9003)\n            .portStart(8000)\n            .protocol(\"tcp\")\n            .securityGroupId(\"sg-2d6722jpp55og58ozfd1sqtdb\")\n            .build());\n\n        var g1test1 = new SecurityGroupRule(\"g1test1\", SecurityGroupRuleArgs.builder()        \n            .cidrIp(\"10.0.0.0/24\")\n            .direction(\"egress\")\n            .portEnd(9003)\n            .portStart(8000)\n            .priority(2)\n            .protocol(\"tcp\")\n            .securityGroupId(\"sg-2d6722jpp55og58ozfd1sqtdb\")\n            .build());\n\n        var g1test0 = new SecurityGroupRule(\"g1test0\", SecurityGroupRuleArgs.builder()        \n            .cidrIp(\"10.0.0.0/24\")\n            .description(\"tft\")\n            .direction(\"ingress\")\n            .policy(\"drop\")\n            .portEnd(80)\n            .portStart(80)\n            .priority(2)\n            .protocol(\"tcp\")\n            .securityGroupId(\"sg-2d6722jpp55og58ozfd1sqtdb\")\n            .build());\n\n        var g1test06 = new SecurityGroupRule(\"g1test06\", SecurityGroupRuleArgs.builder()        \n            .description(\"tft\")\n            .direction(\"ingress\")\n            .policy(\"drop\")\n            .portEnd(9003)\n            .portStart(8000)\n            .priority(2)\n            .protocol(\"tcp\")\n            .securityGroupId(\"sg-2d6722jpp55og58ozfd1sqtdb\")\n            .sourceGroupId(\"sg-3rfe5j4xdnklc5zsk2hcw5c6q\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  g1test3:\n    type: volcengine:vpc:SecurityGroupRule\n    properties:\n      cidrIp: 10.0.0.0/8\n      description: tft1234\n      direction: egress\n      portEnd: 9003\n      portStart: 8000\n      protocol: tcp\n      securityGroupId: sg-2d6722jpp55og58ozfd1sqtdb\n  g1test2:\n    type: volcengine:vpc:SecurityGroupRule\n    properties:\n      cidrIp: 10.0.0.0/24\n      direction: egress\n      portEnd: 9003\n      portStart: 8000\n      protocol: tcp\n      securityGroupId: sg-2d6722jpp55og58ozfd1sqtdb\n  g1test1:\n    type: volcengine:vpc:SecurityGroupRule\n    properties:\n      cidrIp: 10.0.0.0/24\n      direction: egress\n      portEnd: 9003\n      portStart: 8000\n      priority: 2\n      protocol: tcp\n      securityGroupId: sg-2d6722jpp55og58ozfd1sqtdb\n  g1test0:\n    type: volcengine:vpc:SecurityGroupRule\n    properties:\n      cidrIp: 10.0.0.0/24\n      description: tft\n      direction: ingress\n      policy: drop\n      portEnd: 80\n      portStart: 80\n      priority: 2\n      protocol: tcp\n      securityGroupId: sg-2d6722jpp55og58ozfd1sqtdb\n  g1test06:\n    type: volcengine:vpc:SecurityGroupRule\n    properties:\n      description: tft\n      direction: ingress\n      policy: drop\n      portEnd: 9003\n      portStart: 8000\n      priority: 2\n      protocol: tcp\n      securityGroupId: sg-2d6722jpp55og58ozfd1sqtdb\n      sourceGroupId: sg-3rfe5j4xdnklc5zsk2hcw5c6q\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSecurityGroupRule can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/securityGroupRule:SecurityGroupRule default ID is a string concatenated with colons(SecurityGroupId:Protocol:PortStart:PortEnd:CidrIp:SourceGroupId:Direction:Policy:Priority)\n```\n\n ",
            "properties": {
                "cidrIp": {
                    "type": "string",
                    "description": "Cidr ip of egress/ingress Rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of a egress rule.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of rule, ingress (inbound) or egress (outbound).\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Access strategy.\n"
                },
                "portEnd": {
                    "type": "integer",
                    "description": "Port end of egress/ingress Rule.\n"
                },
                "portStart": {
                    "type": "integer",
                    "description": "Port start of egress/ingress Rule.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of a security group rule.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the SecurityGroup, the value can be `tcp` or `udp` or `icmp` or `all` or `icmpv6`.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Id of SecurityGroup.\n"
                },
                "sourceGroupId": {
                    "type": "string",
                    "description": "ID of the source security group whose access permission you want to set.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of SecurityGroup.\n"
                }
            },
            "required": [
                "direction",
                "portEnd",
                "portStart",
                "protocol",
                "securityGroupId",
                "status"
            ],
            "inputProperties": {
                "cidrIp": {
                    "type": "string",
                    "description": "Cidr ip of egress/ingress Rule.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "description of a egress rule.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of rule, ingress (inbound) or egress (outbound).\n",
                    "willReplaceOnChanges": true
                },
                "policy": {
                    "type": "string",
                    "description": "Access strategy.\n",
                    "willReplaceOnChanges": true
                },
                "portEnd": {
                    "type": "integer",
                    "description": "Port end of egress/ingress Rule.\n",
                    "willReplaceOnChanges": true
                },
                "portStart": {
                    "type": "integer",
                    "description": "Port start of egress/ingress Rule.\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of a security group rule.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the SecurityGroup, the value can be `tcp` or `udp` or `icmp` or `all` or `icmpv6`.\n",
                    "willReplaceOnChanges": true
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Id of SecurityGroup.\n",
                    "willReplaceOnChanges": true
                },
                "sourceGroupId": {
                    "type": "string",
                    "description": "ID of the source security group whose access permission you want to set.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "direction",
                "portEnd",
                "portStart",
                "protocol",
                "securityGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroupRule resources.\n",
                "properties": {
                    "cidrIp": {
                        "type": "string",
                        "description": "Cidr ip of egress/ingress Rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "description of a egress rule.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Direction of rule, ingress (inbound) or egress (outbound).\n",
                        "willReplaceOnChanges": true
                    },
                    "policy": {
                        "type": "string",
                        "description": "Access strategy.\n",
                        "willReplaceOnChanges": true
                    },
                    "portEnd": {
                        "type": "integer",
                        "description": "Port end of egress/ingress Rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "portStart": {
                        "type": "integer",
                        "description": "Port start of egress/ingress Rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of a security group rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol of the SecurityGroup, the value can be `tcp` or `udp` or `icmp` or `all` or `icmpv6`.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Id of SecurityGroup.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceGroupId": {
                        "type": "string",
                        "description": "ID of the source security group whose access permission you want to set.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of SecurityGroup.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/subnet:Subnet": {
            "description": "Provides a resource to manage subnet\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpc.Subnet(\"foo\", {\n    cidrBlock: \"192.168.1.0/24\",\n    subnetName: \"subnet-test-2\",\n    vpcId: \"vpc-2749wnlhro3y87fap8u5ztvt5\",\n    zoneId: \"cn-beijing\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.Subnet(\"foo\",\n    cidr_block=\"192.168.1.0/24\",\n    subnet_name=\"subnet-test-2\",\n    vpc_id=\"vpc-2749wnlhro3y87fap8u5ztvt5\",\n    zone_id=\"cn-beijing\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.Subnet(\"foo\", new Volcengine.Vpc.SubnetArgs\n        {\n            CidrBlock = \"192.168.1.0/24\",\n            SubnetName = \"subnet-test-2\",\n            VpcId = \"vpc-2749wnlhro3y87fap8u5ztvt5\",\n            ZoneId = \"cn-beijing\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewSubnet(ctx, \"foo\", \u0026vpc.SubnetArgs{\n\t\t\tCidrBlock:  pulumi.String(\"192.168.1.0/24\"),\n\t\t\tSubnetName: pulumi.String(\"subnet-test-2\"),\n\t\t\tVpcId:      pulumi.String(\"vpc-2749wnlhro3y87fap8u5ztvt5\"),\n\t\t\tZoneId:     pulumi.String(\"cn-beijing\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Subnet(\"foo\", SubnetArgs.builder()        \n            .cidrBlock(\"192.168.1.0/24\")\n            .subnetName(\"subnet-test-2\")\n            .vpcId(\"vpc-2749wnlhro3y87fap8u5ztvt5\")\n            .zoneId(\"cn-beijing\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:Subnet\n    properties:\n      cidrBlock: 192.168.1.0/24\n      subnetName: subnet-test-2\n      vpcId: vpc-2749wnlhro3y87fap8u5ztvt5\n      zoneId: cn-beijing\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSubnet can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/subnet:Subnet default subnet-274oj9a8rs9a87fap8sf9515b\n```\n\n ",
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of Subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Subnet.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.\n"
                },
                "ipv6CidrBlock": {
                    "type": "integer",
                    "description": "The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Subnet.\n"
                },
                "subnetName": {
                    "type": "string",
                    "description": "The name of the Subnet.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Id of the VPC.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "Id of the Zone.\n"
                }
            },
            "required": [
                "cidrBlock",
                "creationTime",
                "enableIpv6",
                "ipv6CidrBlock",
                "status",
                "subnetName",
                "vpcId",
                "zoneId"
            ],
            "inputProperties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Subnet.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.\n"
                },
                "ipv6CidrBlock": {
                    "type": "integer",
                    "description": "The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.\n"
                },
                "subnetName": {
                    "type": "string",
                    "description": "The name of the Subnet.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Id of the VPC.\n",
                    "willReplaceOnChanges": true
                },
                "zoneId": {
                    "type": "string",
                    "description": "Id of the Zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cidrBlock",
                "vpcId",
                "zoneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subnet resources.\n",
                "properties": {
                    "cidrBlock": {
                        "type": "string",
                        "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n",
                        "willReplaceOnChanges": true
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time of Subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Subnet.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.\n"
                    },
                    "ipv6CidrBlock": {
                        "type": "integer",
                        "description": "The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of Subnet.\n"
                    },
                    "subnetName": {
                        "type": "string",
                        "description": "The name of the Subnet.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Id of the VPC.\n",
                        "willReplaceOnChanges": true
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "Id of the Zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpc/vpc:Vpc": {
            "description": "Provides a resource to manage vpc\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpc.Vpc(\"foo\", {\n    cidrBlock: \"172.16.0.0/16\",\n    dnsServers: [\n        \"8.8.8.8\",\n        \"114.114.114.114\",\n    ],\n    projectName: \"AS_test\",\n    vpcName: \"tf-project-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.Vpc(\"foo\",\n    cidr_block=\"172.16.0.0/16\",\n    dns_servers=[\n        \"8.8.8.8\",\n        \"114.114.114.114\",\n    ],\n    project_name=\"AS_test\",\n    vpc_name=\"tf-project-1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.Vpc(\"foo\", new Volcengine.Vpc.VpcArgs\n        {\n            CidrBlock = \"172.16.0.0/16\",\n            DnsServers = \n            {\n                \"8.8.8.8\",\n                \"114.114.114.114\",\n            },\n            ProjectName = \"AS_test\",\n            VpcName = \"tf-project-1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewVpc(ctx, \"foo\", \u0026vpc.VpcArgs{\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t\tDnsServers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t\tpulumi.String(\"114.114.114.114\"),\n\t\t\t},\n\t\t\tProjectName: pulumi.String(\"AS_test\"),\n\t\t\tVpcName:     pulumi.String(\"tf-project-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Vpc(\"foo\", VpcArgs.builder()        \n            .cidrBlock(\"172.16.0.0/16\")\n            .dnsServers(            \n                \"8.8.8.8\",\n                \"114.114.114.114\")\n            .projectName(\"AS_test\")\n            .vpcName(\"tf-project-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpc:Vpc\n    properties:\n      cidrBlock: 172.16.0.0/16\n      dnsServers:\n        - 8.8.8.8\n        - 114.114.114.114\n      projectName: AS_test\n      vpcName: tf-project-1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVPC can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpc/vpc:Vpc default vpc-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of VPC.\n"
                },
                "associateCens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/VpcAssociateCen:VpcAssociateCen"
                    },
                    "description": "The associate cen list of VPC.\n"
                },
                "auxiliaryCidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The auxiliary cidr block list of VPC.\n"
                },
                "cidrBlock": {
                    "type": "string",
                    "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of VPC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VPC.\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Specifies whether to enable the IPv6 CIDR block of the VPC.\n"
                },
                "ipv6CidrBlock": {
                    "type": "string",
                    "description": "The IPv6 CIDR block of the VPC.\n"
                },
                "natGatewayIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The nat gateway ID list of VPC.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the VPC.\n"
                },
                "routeTableIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The route table ID list of VPC.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID list of VPC.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of VPC.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ID list of VPC.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/VpcTag:VpcTag"
                    },
                    "description": "Tags.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of VPC.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of the VPC.\n"
                }
            },
            "required": [
                "accountId",
                "associateCens",
                "auxiliaryCidrBlocks",
                "cidrBlock",
                "creationTime",
                "enableIpv6",
                "ipv6CidrBlock",
                "natGatewayIds",
                "routeTableIds",
                "securityGroupIds",
                "status",
                "subnetIds",
                "updateTime",
                "vpcId",
                "vpcName"
            ],
            "inputProperties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VPC.\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Specifies whether to enable the IPv6 CIDR block of the VPC.\n"
                },
                "ipv6CidrBlock": {
                    "type": "string",
                    "description": "The IPv6 CIDR block of the VPC.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The ProjectName of the VPC.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpc/VpcTag:VpcTag"
                    },
                    "description": "Tags.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of the VPC.\n"
                }
            },
            "requiredInputs": [
                "cidrBlock"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of VPC.\n"
                    },
                    "associateCens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/VpcAssociateCen:VpcAssociateCen"
                        },
                        "description": "The associate cen list of VPC.\n"
                    },
                    "auxiliaryCidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The auxiliary cidr block list of VPC.\n"
                    },
                    "cidrBlock": {
                        "type": "string",
                        "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n",
                        "willReplaceOnChanges": true
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time of VPC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the VPC.\n"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Specifies whether to enable the IPv6 CIDR block of the VPC.\n"
                    },
                    "ipv6CidrBlock": {
                        "type": "string",
                        "description": "The IPv6 CIDR block of the VPC.\n"
                    },
                    "natGatewayIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The nat gateway ID list of VPC.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the VPC.\n"
                    },
                    "routeTableIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The route table ID list of VPC.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The security group ID list of VPC.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of VPC.\n"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The subnet ID list of VPC.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/VpcTag:VpcTag"
                        },
                        "description": "Tags.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of VPC.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC.\n"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "The name of the VPC.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpn/connection:Connection": {
            "description": "Provides a resource to manage vpn connection\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpn.Connection(\"foo\", {\n    customerGatewayId: \"cgw-12ayj1s157gn417q7y29bixqy\",\n    description: \"tf-test\",\n    dpdAction: \"none\",\n    ikeConfigAuthAlg: \"md5\",\n    ikeConfigDhGroup: \"group2\",\n    ikeConfigEncAlg: \"aes\",\n    ikeConfigLifetime: 9000,\n    ikeConfigLocalId: \"tf_test\",\n    ikeConfigMode: \"main\",\n    ikeConfigPsk: \"tftest@!3\",\n    ikeConfigRemoteId: \"tf_test\",\n    ikeConfigVersion: \"ikev1\",\n    ipsecConfigAuthAlg: \"sha256\",\n    ipsecConfigDhGroup: \"group2\",\n    ipsecConfigEncAlg: \"aes\",\n    ipsecConfigLifetime: 9000,\n    localSubnets: [\"192.168.0.0/22\"],\n    natTraversal: true,\n    projectName: \"default\",\n    remoteSubnets: [\"192.161.0.0/20\"],\n    vpnConnectionName: \"tf-test\",\n    vpnGatewayId: \"vgw-2feq19gnyc9hc59gp68914u6o\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpn.Connection(\"foo\",\n    customer_gateway_id=\"cgw-12ayj1s157gn417q7y29bixqy\",\n    description=\"tf-test\",\n    dpd_action=\"none\",\n    ike_config_auth_alg=\"md5\",\n    ike_config_dh_group=\"group2\",\n    ike_config_enc_alg=\"aes\",\n    ike_config_lifetime=9000,\n    ike_config_local_id=\"tf_test\",\n    ike_config_mode=\"main\",\n    ike_config_psk=\"tftest@!3\",\n    ike_config_remote_id=\"tf_test\",\n    ike_config_version=\"ikev1\",\n    ipsec_config_auth_alg=\"sha256\",\n    ipsec_config_dh_group=\"group2\",\n    ipsec_config_enc_alg=\"aes\",\n    ipsec_config_lifetime=9000,\n    local_subnets=[\"192.168.0.0/22\"],\n    nat_traversal=True,\n    project_name=\"default\",\n    remote_subnets=[\"192.161.0.0/20\"],\n    vpn_connection_name=\"tf-test\",\n    vpn_gateway_id=\"vgw-2feq19gnyc9hc59gp68914u6o\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpn.Connection(\"foo\", new Volcengine.Vpn.ConnectionArgs\n        {\n            CustomerGatewayId = \"cgw-12ayj1s157gn417q7y29bixqy\",\n            Description = \"tf-test\",\n            DpdAction = \"none\",\n            IkeConfigAuthAlg = \"md5\",\n            IkeConfigDhGroup = \"group2\",\n            IkeConfigEncAlg = \"aes\",\n            IkeConfigLifetime = 9000,\n            IkeConfigLocalId = \"tf_test\",\n            IkeConfigMode = \"main\",\n            IkeConfigPsk = \"tftest@!3\",\n            IkeConfigRemoteId = \"tf_test\",\n            IkeConfigVersion = \"ikev1\",\n            IpsecConfigAuthAlg = \"sha256\",\n            IpsecConfigDhGroup = \"group2\",\n            IpsecConfigEncAlg = \"aes\",\n            IpsecConfigLifetime = 9000,\n            LocalSubnets = \n            {\n                \"192.168.0.0/22\",\n            },\n            NatTraversal = true,\n            ProjectName = \"default\",\n            RemoteSubnets = \n            {\n                \"192.161.0.0/20\",\n            },\n            VpnConnectionName = \"tf-test\",\n            VpnGatewayId = \"vgw-2feq19gnyc9hc59gp68914u6o\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpn.NewConnection(ctx, \"foo\", \u0026vpn.ConnectionArgs{\n\t\t\tCustomerGatewayId:   pulumi.String(\"cgw-12ayj1s157gn417q7y29bixqy\"),\n\t\t\tDescription:         pulumi.String(\"tf-test\"),\n\t\t\tDpdAction:           pulumi.String(\"none\"),\n\t\t\tIkeConfigAuthAlg:    pulumi.String(\"md5\"),\n\t\t\tIkeConfigDhGroup:    pulumi.String(\"group2\"),\n\t\t\tIkeConfigEncAlg:     pulumi.String(\"aes\"),\n\t\t\tIkeConfigLifetime:   pulumi.Int(9000),\n\t\t\tIkeConfigLocalId:    pulumi.String(\"tf_test\"),\n\t\t\tIkeConfigMode:       pulumi.String(\"main\"),\n\t\t\tIkeConfigPsk:        pulumi.String(\"tftest@!3\"),\n\t\t\tIkeConfigRemoteId:   pulumi.String(\"tf_test\"),\n\t\t\tIkeConfigVersion:    pulumi.String(\"ikev1\"),\n\t\t\tIpsecConfigAuthAlg:  pulumi.String(\"sha256\"),\n\t\t\tIpsecConfigDhGroup:  pulumi.String(\"group2\"),\n\t\t\tIpsecConfigEncAlg:   pulumi.String(\"aes\"),\n\t\t\tIpsecConfigLifetime: pulumi.Int(9000),\n\t\t\tLocalSubnets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.0/22\"),\n\t\t\t},\n\t\t\tNatTraversal: pulumi.Bool(true),\n\t\t\tProjectName:  pulumi.String(\"default\"),\n\t\t\tRemoteSubnets: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.161.0.0/20\"),\n\t\t\t},\n\t\t\tVpnConnectionName: pulumi.String(\"tf-test\"),\n\t\t\tVpnGatewayId:      pulumi.String(\"vgw-2feq19gnyc9hc59gp68914u6o\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Connection(\"foo\", ConnectionArgs.builder()        \n            .customerGatewayId(\"cgw-12ayj1s157gn417q7y29bixqy\")\n            .description(\"tf-test\")\n            .dpdAction(\"none\")\n            .ikeConfigAuthAlg(\"md5\")\n            .ikeConfigDhGroup(\"group2\")\n            .ikeConfigEncAlg(\"aes\")\n            .ikeConfigLifetime(9000)\n            .ikeConfigLocalId(\"tf_test\")\n            .ikeConfigMode(\"main\")\n            .ikeConfigPsk(\"tftest@!3\")\n            .ikeConfigRemoteId(\"tf_test\")\n            .ikeConfigVersion(\"ikev1\")\n            .ipsecConfigAuthAlg(\"sha256\")\n            .ipsecConfigDhGroup(\"group2\")\n            .ipsecConfigEncAlg(\"aes\")\n            .ipsecConfigLifetime(9000)\n            .localSubnets(\"192.168.0.0/22\")\n            .natTraversal(true)\n            .projectName(\"default\")\n            .remoteSubnets(\"192.161.0.0/20\")\n            .vpnConnectionName(\"tf-test\")\n            .vpnGatewayId(\"vgw-2feq19gnyc9hc59gp68914u6o\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpn:Connection\n    properties:\n      customerGatewayId: cgw-12ayj1s157gn417q7y29bixqy\n      description: tf-test\n      dpdAction: none\n      ikeConfigAuthAlg: md5\n      ikeConfigDhGroup: group2\n      ikeConfigEncAlg: aes\n      ikeConfigLifetime: 9000\n      ikeConfigLocalId: tf_test\n      ikeConfigMode: main\n      ikeConfigPsk: tftest@!3\n      ikeConfigRemoteId: tf_test\n      ikeConfigVersion: ikev1\n      ipsecConfigAuthAlg: sha256\n      ipsecConfigDhGroup: group2\n      ipsecConfigEncAlg: aes\n      ipsecConfigLifetime: 9000\n      localSubnets:\n        - 192.168.0.0/22\n      natTraversal: true\n      projectName: default\n      remoteSubnets:\n        - 192.161.0.0/20\n      vpnConnectionName: tf-test\n      vpnGatewayId: vgw-2feq19gnyc9hc59gp68914u6o\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVpnConnection can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpn/connection:Connection default vgc-3tex2x1cwd4c6c0v****\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the VPN connection.\n"
                },
                "attachStatus": {
                    "type": "string",
                    "description": "The IPsec attach status.\n"
                },
                "attachType": {
                    "type": "string",
                    "description": "The attach type of the VPN connection, the value can be `VpnGateway` or `TransitRouter`.\n"
                },
                "businessStatus": {
                    "type": "string",
                    "description": "The business status of IPsec connection, valid when the attach type is 'TransitRouter'.\n"
                },
                "connectStatus": {
                    "type": "string",
                    "description": "The connect status of the VPN connection.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of VPN connection.\n"
                },
                "customerGatewayId": {
                    "type": "string",
                    "description": "The ID of the customer gateway.\n"
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The delete time of resource, valid when the attach type is 'TransitRouter'.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VPN connection.\n"
                },
                "dpdAction": {
                    "type": "string",
                    "description": "The dpd action of the VPN connection.\n"
                },
                "ikeConfigAuthAlg": {
                    "type": "string",
                    "description": "The auth alg of the ike config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.\n"
                },
                "ikeConfigDhGroup": {
                    "type": "string",
                    "description": "The dk group of the ike config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14`. The default value is `group2`.\n"
                },
                "ikeConfigEncAlg": {
                    "type": "string",
                    "description": "The enc alg of the ike config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.\n"
                },
                "ikeConfigLifetime": {
                    "type": "integer",
                    "description": "The lifetime of the ike config of the VPN connection. Value: 900~86400.\n"
                },
                "ikeConfigLocalId": {
                    "type": "string",
                    "description": "The local_id of the ike config of the VPN connection.\n"
                },
                "ikeConfigMode": {
                    "type": "string",
                    "description": "The mode of the ike config of the VPN connection. Valid values are `main`, `aggressive`, and default value is `main`.\n"
                },
                "ikeConfigPsk": {
                    "type": "string",
                    "description": "The psk of the ike config of the VPN connection. The length does not exceed 100 characters, and only uppercase and lowercase letters, special symbols and numbers are allowed.\n"
                },
                "ikeConfigRemoteId": {
                    "type": "string",
                    "description": "The remote id of the ike config of the VPN connection.\n"
                },
                "ikeConfigVersion": {
                    "type": "string",
                    "description": "The version of the ike config of the VPN connection. The value can be `ikev1` or `ikev2`. The default value is `ikev1`.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The ip address of transit router, valid when the attach type is 'TransitRouter'.\n"
                },
                "ipsecConfigAuthAlg": {
                    "type": "string",
                    "description": "The auth alg of the ipsec config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.\n"
                },
                "ipsecConfigDhGroup": {
                    "type": "string",
                    "description": "The dh group of the ipsec config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14` and `disable`. The default value is `group2`.\n"
                },
                "ipsecConfigEncAlg": {
                    "type": "string",
                    "description": "The enc alg of the ipsec config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.\n"
                },
                "ipsecConfigLifetime": {
                    "type": "integer",
                    "description": "The ipsec config of the ike config of the VPN connection. Value: 900~86400.\n"
                },
                "localSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The local subnet of the VPN connection. Up to 5 network segments are supported.\n"
                },
                "logEnabled": {
                    "type": "boolean",
                    "description": "Whether to enable connection logging. After enabling Connection Day, you can view and download IPsec connection logs, and use the log information to troubleshoot IPsec connection problems yourself.\n"
                },
                "natTraversal": {
                    "type": "boolean",
                    "description": "The nat traversal of the VPN connection.\n"
                },
                "negotiateInstantly": {
                    "type": "boolean",
                    "description": "Whether to initiate negotiation mode immediately.\n"
                },
                "overdueTime": {
                    "type": "string",
                    "description": "The overdue time of resource, valid when the attach type is 'TransitRouter'.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name of the VPN connection.\n"
                },
                "remoteSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The remote subnet of the VPN connection. Up to 5 network segments are supported.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the VPN connection.\n"
                },
                "transitRouterId": {
                    "type": "string",
                    "description": "The id of transit router, valid when the attach type is 'TransitRouter'.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of VPN connection.\n"
                },
                "vpnConnectionId": {
                    "type": "string",
                    "description": "The ID of the VPN connection.\n"
                },
                "vpnConnectionName": {
                    "type": "string",
                    "description": "The name of the VPN connection.\n"
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "The ID of the vpn gateway. If the `AttachType` is not passed or the passed value is `VpnGateway`, this parameter must be filled. If the value of `AttachType` is `TransitRouter`, this parameter does not need to be filled.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone id of transit router, valid when the attach type is 'TransitRouter'.\n"
                }
            },
            "required": [
                "accountId",
                "attachStatus",
                "businessStatus",
                "connectStatus",
                "creationTime",
                "customerGatewayId",
                "deletedTime",
                "description",
                "ikeConfigLocalId",
                "ikeConfigPsk",
                "ikeConfigRemoteId",
                "ipAddress",
                "localSubnets",
                "overdueTime",
                "remoteSubnets",
                "status",
                "transitRouterId",
                "updateTime",
                "vpnConnectionId",
                "vpnConnectionName",
                "zoneId"
            ],
            "inputProperties": {
                "attachType": {
                    "type": "string",
                    "description": "The attach type of the VPN connection, the value can be `VpnGateway` or `TransitRouter`.\n",
                    "willReplaceOnChanges": true
                },
                "customerGatewayId": {
                    "type": "string",
                    "description": "The ID of the customer gateway.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VPN connection.\n"
                },
                "dpdAction": {
                    "type": "string",
                    "description": "The dpd action of the VPN connection.\n"
                },
                "ikeConfigAuthAlg": {
                    "type": "string",
                    "description": "The auth alg of the ike config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.\n"
                },
                "ikeConfigDhGroup": {
                    "type": "string",
                    "description": "The dk group of the ike config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14`. The default value is `group2`.\n"
                },
                "ikeConfigEncAlg": {
                    "type": "string",
                    "description": "The enc alg of the ike config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.\n"
                },
                "ikeConfigLifetime": {
                    "type": "integer",
                    "description": "The lifetime of the ike config of the VPN connection. Value: 900~86400.\n"
                },
                "ikeConfigLocalId": {
                    "type": "string",
                    "description": "The local_id of the ike config of the VPN connection.\n"
                },
                "ikeConfigMode": {
                    "type": "string",
                    "description": "The mode of the ike config of the VPN connection. Valid values are `main`, `aggressive`, and default value is `main`.\n"
                },
                "ikeConfigPsk": {
                    "type": "string",
                    "description": "The psk of the ike config of the VPN connection. The length does not exceed 100 characters, and only uppercase and lowercase letters, special symbols and numbers are allowed.\n"
                },
                "ikeConfigRemoteId": {
                    "type": "string",
                    "description": "The remote id of the ike config of the VPN connection.\n"
                },
                "ikeConfigVersion": {
                    "type": "string",
                    "description": "The version of the ike config of the VPN connection. The value can be `ikev1` or `ikev2`. The default value is `ikev1`.\n"
                },
                "ipsecConfigAuthAlg": {
                    "type": "string",
                    "description": "The auth alg of the ipsec config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.\n"
                },
                "ipsecConfigDhGroup": {
                    "type": "string",
                    "description": "The dh group of the ipsec config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14` and `disable`. The default value is `group2`.\n"
                },
                "ipsecConfigEncAlg": {
                    "type": "string",
                    "description": "The enc alg of the ipsec config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.\n"
                },
                "ipsecConfigLifetime": {
                    "type": "integer",
                    "description": "The ipsec config of the ike config of the VPN connection. Value: 900~86400.\n"
                },
                "localSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The local subnet of the VPN connection. Up to 5 network segments are supported.\n"
                },
                "logEnabled": {
                    "type": "boolean",
                    "description": "Whether to enable connection logging. After enabling Connection Day, you can view and download IPsec connection logs, and use the log information to troubleshoot IPsec connection problems yourself.\n"
                },
                "natTraversal": {
                    "type": "boolean",
                    "description": "The nat traversal of the VPN connection.\n"
                },
                "negotiateInstantly": {
                    "type": "boolean",
                    "description": "Whether to initiate negotiation mode immediately.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name of the VPN connection.\n"
                },
                "remoteSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The remote subnet of the VPN connection. Up to 5 network segments are supported.\n"
                },
                "vpnConnectionName": {
                    "type": "string",
                    "description": "The name of the VPN connection.\n"
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "The ID of the vpn gateway. If the `AttachType` is not passed or the passed value is `VpnGateway`, this parameter must be filled. If the value of `AttachType` is `TransitRouter`, this parameter does not need to be filled.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "customerGatewayId",
                "ikeConfigPsk",
                "localSubnets",
                "remoteSubnets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connection resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of the VPN connection.\n"
                    },
                    "attachStatus": {
                        "type": "string",
                        "description": "The IPsec attach status.\n"
                    },
                    "attachType": {
                        "type": "string",
                        "description": "The attach type of the VPN connection, the value can be `VpnGateway` or `TransitRouter`.\n",
                        "willReplaceOnChanges": true
                    },
                    "businessStatus": {
                        "type": "string",
                        "description": "The business status of IPsec connection, valid when the attach type is 'TransitRouter'.\n"
                    },
                    "connectStatus": {
                        "type": "string",
                        "description": "The connect status of the VPN connection.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of VPN connection.\n"
                    },
                    "customerGatewayId": {
                        "type": "string",
                        "description": "The ID of the customer gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "deletedTime": {
                        "type": "string",
                        "description": "The delete time of resource, valid when the attach type is 'TransitRouter'.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the VPN connection.\n"
                    },
                    "dpdAction": {
                        "type": "string",
                        "description": "The dpd action of the VPN connection.\n"
                    },
                    "ikeConfigAuthAlg": {
                        "type": "string",
                        "description": "The auth alg of the ike config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.\n"
                    },
                    "ikeConfigDhGroup": {
                        "type": "string",
                        "description": "The dk group of the ike config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14`. The default value is `group2`.\n"
                    },
                    "ikeConfigEncAlg": {
                        "type": "string",
                        "description": "The enc alg of the ike config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.\n"
                    },
                    "ikeConfigLifetime": {
                        "type": "integer",
                        "description": "The lifetime of the ike config of the VPN connection. Value: 900~86400.\n"
                    },
                    "ikeConfigLocalId": {
                        "type": "string",
                        "description": "The local_id of the ike config of the VPN connection.\n"
                    },
                    "ikeConfigMode": {
                        "type": "string",
                        "description": "The mode of the ike config of the VPN connection. Valid values are `main`, `aggressive`, and default value is `main`.\n"
                    },
                    "ikeConfigPsk": {
                        "type": "string",
                        "description": "The psk of the ike config of the VPN connection. The length does not exceed 100 characters, and only uppercase and lowercase letters, special symbols and numbers are allowed.\n"
                    },
                    "ikeConfigRemoteId": {
                        "type": "string",
                        "description": "The remote id of the ike config of the VPN connection.\n"
                    },
                    "ikeConfigVersion": {
                        "type": "string",
                        "description": "The version of the ike config of the VPN connection. The value can be `ikev1` or `ikev2`. The default value is `ikev1`.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The ip address of transit router, valid when the attach type is 'TransitRouter'.\n"
                    },
                    "ipsecConfigAuthAlg": {
                        "type": "string",
                        "description": "The auth alg of the ipsec config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.\n"
                    },
                    "ipsecConfigDhGroup": {
                        "type": "string",
                        "description": "The dh group of the ipsec config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14` and `disable`. The default value is `group2`.\n"
                    },
                    "ipsecConfigEncAlg": {
                        "type": "string",
                        "description": "The enc alg of the ipsec config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.\n"
                    },
                    "ipsecConfigLifetime": {
                        "type": "integer",
                        "description": "The ipsec config of the ike config of the VPN connection. Value: 900~86400.\n"
                    },
                    "localSubnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The local subnet of the VPN connection. Up to 5 network segments are supported.\n"
                    },
                    "logEnabled": {
                        "type": "boolean",
                        "description": "Whether to enable connection logging. After enabling Connection Day, you can view and download IPsec connection logs, and use the log information to troubleshoot IPsec connection problems yourself.\n"
                    },
                    "natTraversal": {
                        "type": "boolean",
                        "description": "The nat traversal of the VPN connection.\n"
                    },
                    "negotiateInstantly": {
                        "type": "boolean",
                        "description": "Whether to initiate negotiation mode immediately.\n"
                    },
                    "overdueTime": {
                        "type": "string",
                        "description": "The overdue time of resource, valid when the attach type is 'TransitRouter'.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The project name of the VPN connection.\n"
                    },
                    "remoteSubnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The remote subnet of the VPN connection. Up to 5 network segments are supported.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the VPN connection.\n"
                    },
                    "transitRouterId": {
                        "type": "string",
                        "description": "The id of transit router, valid when the attach type is 'TransitRouter'.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of VPN connection.\n"
                    },
                    "vpnConnectionId": {
                        "type": "string",
                        "description": "The ID of the VPN connection.\n"
                    },
                    "vpnConnectionName": {
                        "type": "string",
                        "description": "The name of the VPN connection.\n"
                    },
                    "vpnGatewayId": {
                        "type": "string",
                        "description": "The ID of the vpn gateway. If the `AttachType` is not passed or the passed value is `VpnGateway`, this parameter must be filled. If the value of `AttachType` is `TransitRouter`, this parameter does not need to be filled.\n",
                        "willReplaceOnChanges": true
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone id of transit router, valid when the attach type is 'TransitRouter'.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpn/customerGateway:CustomerGateway": {
            "description": "Provides a resource to manage customer gateway\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpn.CustomerGateway(\"foo\", {\n    customerGatewayName: \"tf-test\",\n    description: \"tf-test\",\n    ipAddress: \"192.0.1.3\",\n    projectName: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpn.CustomerGateway(\"foo\",\n    customer_gateway_name=\"tf-test\",\n    description=\"tf-test\",\n    ip_address=\"192.0.1.3\",\n    project_name=\"default\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpn.CustomerGateway(\"foo\", new Volcengine.Vpn.CustomerGatewayArgs\n        {\n            CustomerGatewayName = \"tf-test\",\n            Description = \"tf-test\",\n            IpAddress = \"192.0.1.3\",\n            ProjectName = \"default\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpn.NewCustomerGateway(ctx, \"foo\", \u0026vpn.CustomerGatewayArgs{\n\t\t\tCustomerGatewayName: pulumi.String(\"tf-test\"),\n\t\t\tDescription:         pulumi.String(\"tf-test\"),\n\t\t\tIpAddress:           pulumi.String(\"192.0.1.3\"),\n\t\t\tProjectName:         pulumi.String(\"default\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new CustomerGateway(\"foo\", CustomerGatewayArgs.builder()        \n            .customerGatewayName(\"tf-test\")\n            .description(\"tf-test\")\n            .ipAddress(\"192.0.1.3\")\n            .projectName(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpn:CustomerGateway\n    properties:\n      customerGatewayName: tf-test\n      description: tf-test\n      ipAddress: 192.0.1.3\n      projectName: default\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCustomerGateway can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpn/customerGateway:CustomerGateway default cgw-2byswc356dybk2dx0eed2****\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the customer gateway.\n"
                },
                "connectionCount": {
                    "type": "integer",
                    "description": "The connection count of the customer gateway.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of customer gateway.\n"
                },
                "customerGatewayId": {
                    "type": "string",
                    "description": "The ID of the customer gateway.\n"
                },
                "customerGatewayName": {
                    "type": "string",
                    "description": "The name of the customer gateway.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the customer gateway.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the customer gateway.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name of the VPN customer gateway.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the customer gateway.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of customer gateway.\n"
                }
            },
            "required": [
                "accountId",
                "connectionCount",
                "creationTime",
                "customerGatewayId",
                "customerGatewayName",
                "description",
                "ipAddress",
                "status",
                "updateTime"
            ],
            "inputProperties": {
                "customerGatewayName": {
                    "type": "string",
                    "description": "The name of the customer gateway.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the customer gateway.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the customer gateway.\n",
                    "willReplaceOnChanges": true
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name of the VPN customer gateway.\n"
                }
            },
            "requiredInputs": [
                "ipAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomerGateway resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of the customer gateway.\n"
                    },
                    "connectionCount": {
                        "type": "integer",
                        "description": "The connection count of the customer gateway.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of customer gateway.\n"
                    },
                    "customerGatewayId": {
                        "type": "string",
                        "description": "The ID of the customer gateway.\n"
                    },
                    "customerGatewayName": {
                        "type": "string",
                        "description": "The name of the customer gateway.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the customer gateway.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address of the customer gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The project name of the VPN customer gateway.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the customer gateway.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of customer gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpn/gateway:Gateway": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpn.Gateway(\"foo\", {\n    bandwidth: 20,\n    description: \"tf-test\",\n    period: 2,\n    projectName: \"default\",\n    subnetId: \"subnet-12bh8g2d7fshs17q7y2nx82uk\",\n    vpcId: \"vpc-12b31m7z2kc8w17q7y2fih9ts\",\n    vpnGatewayName: \"tf-test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpn.Gateway(\"foo\",\n    bandwidth=20,\n    description=\"tf-test\",\n    period=2,\n    project_name=\"default\",\n    subnet_id=\"subnet-12bh8g2d7fshs17q7y2nx82uk\",\n    vpc_id=\"vpc-12b31m7z2kc8w17q7y2fih9ts\",\n    vpn_gateway_name=\"tf-test\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpn.Gateway(\"foo\", new Volcengine.Vpn.GatewayArgs\n        {\n            Bandwidth = 20,\n            Description = \"tf-test\",\n            Period = 2,\n            ProjectName = \"default\",\n            SubnetId = \"subnet-12bh8g2d7fshs17q7y2nx82uk\",\n            VpcId = \"vpc-12b31m7z2kc8w17q7y2fih9ts\",\n            VpnGatewayName = \"tf-test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpn.NewGateway(ctx, \"foo\", \u0026vpn.GatewayArgs{\n\t\t\tBandwidth:      pulumi.Int(20),\n\t\t\tDescription:    pulumi.String(\"tf-test\"),\n\t\t\tPeriod:         pulumi.Int(2),\n\t\t\tProjectName:    pulumi.String(\"default\"),\n\t\t\tSubnetId:       pulumi.String(\"subnet-12bh8g2d7fshs17q7y2nx82uk\"),\n\t\t\tVpcId:          pulumi.String(\"vpc-12b31m7z2kc8w17q7y2fih9ts\"),\n\t\t\tVpnGatewayName: pulumi.String(\"tf-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Gateway(\"foo\", GatewayArgs.builder()        \n            .bandwidth(20)\n            .description(\"tf-test\")\n            .period(2)\n            .projectName(\"default\")\n            .subnetId(\"subnet-12bh8g2d7fshs17q7y2nx82uk\")\n            .vpcId(\"vpc-12b31m7z2kc8w17q7y2fih9ts\")\n            .vpnGatewayName(\"tf-test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpn:Gateway\n    properties:\n      bandwidth: 20\n      description: tf-test\n      period: 2\n      projectName: default\n      subnetId: subnet-12bh8g2d7fshs17q7y2nx82uk\n      vpcId: vpc-12b31m7z2kc8w17q7y2fih9ts\n      vpnGatewayName: tf-test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVpnGateway can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpn/gateway:Gateway default vgw-273zkshb2qayo7fap8t2****\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of the VPN gateway.\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "The bandwidth of the VPN gateway. Unit: Mbps. Values: 5, 10, 20, 50, 100, 200, 500.\n"
                },
                "billingType": {
                    "type": "string",
                    "description": "The BillingType of the VPN gateway. Only support `PrePaid`. Terraform will only remove the PrePaid VPN gateway from the\nstate file, not actually remove.\n"
                },
                "businessStatus": {
                    "type": "string",
                    "description": "The business status of the VPN gateway.\n"
                },
                "connectionCount": {
                    "type": "integer",
                    "description": "The connection count of the VPN gateway.\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of VPN gateway.\n"
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The deleted time of the VPN gateway.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VPN gateway.\n"
                },
                "expiredTime": {
                    "type": "string",
                    "description": "The expired time of the VPN gateway.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the VPN gateway.\n"
                },
                "lockReason": {
                    "type": "string",
                    "description": "The lock reason of the VPN gateway.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The Period of the VPN gateway. Default value is 12. This parameter is only useful when creating vpn gateway. Default period unit is Month.\nValue range: 1~9, 12, 24, 36. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name of the VPN gateway.\n"
                },
                "renewType": {
                    "type": "string",
                    "description": "The renew type of the VPN gateway.\n"
                },
                "routeCount": {
                    "type": "integer",
                    "description": "The route count of the VPN gateway.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the VPN gateway.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet where you want to create the VPN gateway.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpn/GatewayTag:GatewayTag"
                    },
                    "description": "Tags.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of VPN gateway.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC where you want to create the VPN gateway.\n"
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "The ID of the VPN gateway.\n"
                },
                "vpnGatewayName": {
                    "type": "string",
                    "description": "The name of the VPN gateway.\n"
                }
            },
            "required": [
                "accountId",
                "bandwidth",
                "businessStatus",
                "connectionCount",
                "creationTime",
                "deletedTime",
                "description",
                "expiredTime",
                "ipAddress",
                "lockReason",
                "renewType",
                "routeCount",
                "status",
                "subnetId",
                "updateTime",
                "vpcId",
                "vpnGatewayId",
                "vpnGatewayName"
            ],
            "inputProperties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The bandwidth of the VPN gateway. Unit: Mbps. Values: 5, 10, 20, 50, 100, 200, 500.\n"
                },
                "billingType": {
                    "type": "string",
                    "description": "The BillingType of the VPN gateway. Only support `PrePaid`. Terraform will only remove the PrePaid VPN gateway from the\nstate file, not actually remove.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VPN gateway.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The Period of the VPN gateway. Default value is 12. This parameter is only useful when creating vpn gateway. Default period unit is Month.\nValue range: 1~9, 12, 24, 36. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The project name of the VPN gateway.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet where you want to create the VPN gateway.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:vpn/GatewayTag:GatewayTag"
                    },
                    "description": "Tags.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC where you want to create the VPN gateway.\n",
                    "willReplaceOnChanges": true
                },
                "vpnGatewayName": {
                    "type": "string",
                    "description": "The name of the VPN gateway.\n"
                }
            },
            "requiredInputs": [
                "bandwidth",
                "subnetId",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gateway resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of the VPN gateway.\n"
                    },
                    "bandwidth": {
                        "type": "integer",
                        "description": "The bandwidth of the VPN gateway. Unit: Mbps. Values: 5, 10, 20, 50, 100, 200, 500.\n"
                    },
                    "billingType": {
                        "type": "string",
                        "description": "The BillingType of the VPN gateway. Only support `PrePaid`. Terraform will only remove the PrePaid VPN gateway from the\nstate file, not actually remove.\n",
                        "willReplaceOnChanges": true
                    },
                    "businessStatus": {
                        "type": "string",
                        "description": "The business status of the VPN gateway.\n"
                    },
                    "connectionCount": {
                        "type": "integer",
                        "description": "The connection count of the VPN gateway.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of VPN gateway.\n"
                    },
                    "deletedTime": {
                        "type": "string",
                        "description": "The deleted time of the VPN gateway.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the VPN gateway.\n"
                    },
                    "expiredTime": {
                        "type": "string",
                        "description": "The expired time of the VPN gateway.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address of the VPN gateway.\n"
                    },
                    "lockReason": {
                        "type": "string",
                        "description": "The lock reason of the VPN gateway.\n"
                    },
                    "period": {
                        "type": "integer",
                        "description": "The Period of the VPN gateway. Default value is 12. This parameter is only useful when creating vpn gateway. Default period unit is Month.\nValue range: 1~9, 12, 24, 36. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The project name of the VPN gateway.\n"
                    },
                    "renewType": {
                        "type": "string",
                        "description": "The renew type of the VPN gateway.\n"
                    },
                    "routeCount": {
                        "type": "integer",
                        "description": "The route count of the VPN gateway.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the VPN gateway.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of the subnet where you want to create the VPN gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpn/GatewayTag:GatewayTag"
                        },
                        "description": "Tags.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of VPN gateway.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of the VPC where you want to create the VPN gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpnGatewayId": {
                        "type": "string",
                        "description": "The ID of the VPN gateway.\n"
                    },
                    "vpnGatewayName": {
                        "type": "string",
                        "description": "The name of the VPN gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:vpn/gatewayRoute:GatewayRoute": {
            "description": "Provides a resource to manage vpn gateway route\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpn.GatewayRoute(\"foo\", {\n    destinationCidrBlock: \"192.168.0.0/20\",\n    nextHopId: \"vgc-2d5ww3ww2lwcg58ozfe61ppc3\",\n    vpnGatewayId: \"vgw-2c012ea9fm5mo2dx0efxg46qi\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpn.GatewayRoute(\"foo\",\n    destination_cidr_block=\"192.168.0.0/20\",\n    next_hop_id=\"vgc-2d5ww3ww2lwcg58ozfe61ppc3\",\n    vpn_gateway_id=\"vgw-2c012ea9fm5mo2dx0efxg46qi\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpn.GatewayRoute(\"foo\", new Volcengine.Vpn.GatewayRouteArgs\n        {\n            DestinationCidrBlock = \"192.168.0.0/20\",\n            NextHopId = \"vgc-2d5ww3ww2lwcg58ozfe61ppc3\",\n            VpnGatewayId = \"vgw-2c012ea9fm5mo2dx0efxg46qi\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpn.NewGatewayRoute(ctx, \"foo\", \u0026vpn.GatewayRouteArgs{\n\t\t\tDestinationCidrBlock: pulumi.String(\"192.168.0.0/20\"),\n\t\t\tNextHopId:            pulumi.String(\"vgc-2d5ww3ww2lwcg58ozfe61ppc3\"),\n\t\t\tVpnGatewayId:         pulumi.String(\"vgw-2c012ea9fm5mo2dx0efxg46qi\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new GatewayRoute(\"foo\", GatewayRouteArgs.builder()        \n            .destinationCidrBlock(\"192.168.0.0/20\")\n            .nextHopId(\"vgc-2d5ww3ww2lwcg58ozfe61ppc3\")\n            .vpnGatewayId(\"vgw-2c012ea9fm5mo2dx0efxg46qi\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:vpn:GatewayRoute\n    properties:\n      destinationCidrBlock: 192.168.0.0/20\n      nextHopId: vgc-2d5ww3ww2lwcg58ozfe61ppc3\n      vpnGatewayId: vgw-2c012ea9fm5mo2dx0efxg46qi\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVpnGatewayRoute can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:vpn/gatewayRoute:GatewayRoute default vgr-3tex2c6c0v844c****\n```\n\n ",
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "The create time of VPN gateway route.\n"
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "The destination cidr block of the VPN gateway route.\n"
                },
                "nextHopId": {
                    "type": "string",
                    "description": "The next hop id of the VPN gateway route.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the VPN gateway route.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of VPN gateway route.\n"
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "The ID of the VPN gateway of the VPN gateway route.\n"
                },
                "vpnGatewayRouteId": {
                    "type": "string",
                    "description": "The ID of the VPN gateway route.\n"
                }
            },
            "required": [
                "creationTime",
                "destinationCidrBlock",
                "nextHopId",
                "status",
                "updateTime",
                "vpnGatewayId",
                "vpnGatewayRouteId"
            ],
            "inputProperties": {
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "The destination cidr block of the VPN gateway route.\n",
                    "willReplaceOnChanges": true
                },
                "nextHopId": {
                    "type": "string",
                    "description": "The next hop id of the VPN gateway route.\n",
                    "willReplaceOnChanges": true
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "The ID of the VPN gateway of the VPN gateway route.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "destinationCidrBlock",
                "nextHopId",
                "vpnGatewayId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayRoute resources.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "The create time of VPN gateway route.\n"
                    },
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "The destination cidr block of the VPN gateway route.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextHopId": {
                        "type": "string",
                        "description": "The next hop id of the VPN gateway route.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the VPN gateway route.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of VPN gateway route.\n"
                    },
                    "vpnGatewayId": {
                        "type": "string",
                        "description": "The ID of the VPN gateway of the VPN gateway route.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpnGatewayRouteId": {
                        "type": "string",
                        "description": "The ID of the VPN gateway route.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "volcengine:autoscaling/scalingActivities:ScalingActivities": {
            "description": "Use this data source to query detailed information of scaling activities\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultScalingActivities = pulumi.output(volcengine.autoscaling.ScalingActivities({\n    scalingGroupId: \"scg-ybqm0b6kcigh9zu9ce6t\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.autoscaling.scaling_activities(scaling_group_id=\"scg-ybqm0b6kcigh9zu9ce6t\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Autoscaling.ScalingActivities.InvokeAsync(new Volcengine.Autoscaling.ScalingActivitiesArgs\n        {\n            ScalingGroupId = \"scg-ybqm0b6kcigh9zu9ce6t\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.ScalingActivities(ctx, \u0026autoscaling.ScalingActivitiesArgs{\n\t\t\tScalingGroupId: \"scg-ybqm0b6kcigh9zu9ce6t\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = AutoscalingFunctions.ScalingActivities();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:autoscaling:ScalingActivities\n      Arguments:\n        scalingGroupId: scg-ybqm0b6kcigh9zu9ce6t\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ScalingActivities.\n",
                "properties": {
                    "endTime": {
                        "type": "string",
                        "description": "An end time to start a Scaling Activity.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Scaling Activity IDs.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "A Id of Scaling Group.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "A start time to start a Scaling Activity.\n"
                    },
                    "statusCode": {
                        "type": "string",
                        "description": "A status code of Scaling Activity. Valid values: Init, Running, Success, PartialSuccess, Error, Rejected, Exception.\n"
                    }
                },
                "type": "object",
                "required": [
                    "scalingGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ScalingActivities.\n",
                "properties": {
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:autoscaling/ScalingActivitiesActivity:ScalingActivitiesActivity"
                        },
                        "description": "The collection of Scaling Activity query.\n"
                    },
                    "endTime": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The scaling group Id.\n"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "statusCode": {
                        "type": "string",
                        "description": "The Status Code of Scaling Activity.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Scaling Activity query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "activities",
                    "scalingGroupId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:autoscaling/scalingConfigurations:ScalingConfigurations": {
            "description": "Use this data source to query detailed information of scaling configurations\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultScalingConfigurations = pulumi.output(volcengine.autoscaling.ScalingConfigurations({\n    ids: [\"scc-ybrurj4uw6gh9zecj327\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.autoscaling.scaling_configurations(ids=[\"scc-ybrurj4uw6gh9zecj327\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Autoscaling.ScalingConfigurations.InvokeAsync(new Volcengine.Autoscaling.ScalingConfigurationsArgs\n        {\n            Ids = \n            {\n                \"scc-ybrurj4uw6gh9zecj327\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.ScalingConfigurations(ctx, \u0026autoscaling.ScalingConfigurationsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"scc-ybrurj4uw6gh9zecj327\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = AutoscalingFunctions.ScalingConfigurations();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:autoscaling:ScalingConfigurations\n      Arguments:\n        ids:\n          - scc-ybrurj4uw6gh9zecj327\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ScalingConfigurations.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of scaling configuration ids.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of scaling configuration.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "scalingConfigurationNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of scaling configuration names.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "An id of scaling group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by ScalingConfigurations.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "scalingConfigurationNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scalingConfigurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:autoscaling/ScalingConfigurationsScalingConfiguration:ScalingConfigurationsScalingConfiguration"
                        },
                        "description": "The collection of scaling configuration query.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group to which the scaling configuration belongs.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of scaling configuration query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "scalingConfigurations",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:autoscaling/scalingGroups:ScalingGroups": {
            "description": "Use this data source to query detailed information of scaling groups\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultScalingGroups = pulumi.output(volcengine.autoscaling.ScalingGroups({\n    ids: [\"scg-ybru8pazhgl8j1di4tyd\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.autoscaling.scaling_groups(ids=[\"scg-ybru8pazhgl8j1di4tyd\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Autoscaling.ScalingGroups.InvokeAsync(new Volcengine.Autoscaling.ScalingGroupsArgs\n        {\n            Ids = \n            {\n                \"scg-ybru8pazhgl8j1di4tyd\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.ScalingGroups(ctx, \u0026autoscaling.ScalingGroupsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"scg-ybru8pazhgl8j1di4tyd\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = AutoscalingFunctions.ScalingGroups();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:autoscaling:ScalingGroups\n      Arguments:\n        ids:\n          - scg-ybru8pazhgl8j1di4tyd\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ScalingGroups.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of scaling group ids.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of scaling group.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "scalingGroupNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of scaling group names.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by ScalingGroups.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "scalingGroupNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scalingGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:autoscaling/ScalingGroupsScalingGroup:ScalingGroupsScalingGroup"
                        },
                        "description": "The collection of scaling group query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of scaling group query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "scalingGroups",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:autoscaling/scalingInstances:ScalingInstances": {
            "description": "Use this data source to query detailed information of scaling instances\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultScalingInstances = pulumi.output(volcengine.autoscaling.ScalingInstances({\n    ids: [\n        \"i-ybzl4u5uogl8j07hgcbg\",\n        \"i-ybyncrcpzpgh9zmlct0w\",\n        \"i-ybyncrcpzogh9z4ax9tv\",\n    ],\n    scalingConfigurationId: \"scc-ybtawzucw95pkgon0wst\",\n    scalingGroupId: \"scg-ybtawtznszgh9yv8agcp\",\n    status: \"InService\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.autoscaling.scaling_instances(ids=[\n        \"i-ybzl4u5uogl8j07hgcbg\",\n        \"i-ybyncrcpzpgh9zmlct0w\",\n        \"i-ybyncrcpzogh9z4ax9tv\",\n    ],\n    scaling_configuration_id=\"scc-ybtawzucw95pkgon0wst\",\n    scaling_group_id=\"scg-ybtawtznszgh9yv8agcp\",\n    status=\"InService\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Autoscaling.ScalingInstances.InvokeAsync(new Volcengine.Autoscaling.ScalingInstancesArgs\n        {\n            Ids = \n            {\n                \"i-ybzl4u5uogl8j07hgcbg\",\n                \"i-ybyncrcpzpgh9zmlct0w\",\n                \"i-ybyncrcpzogh9z4ax9tv\",\n            },\n            ScalingConfigurationId = \"scc-ybtawzucw95pkgon0wst\",\n            ScalingGroupId = \"scg-ybtawtznszgh9yv8agcp\",\n            Status = \"InService\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.ScalingInstances(ctx, \u0026autoscaling.ScalingInstancesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"i-ybzl4u5uogl8j07hgcbg\",\n\t\t\t\t\"i-ybyncrcpzpgh9zmlct0w\",\n\t\t\t\t\"i-ybyncrcpzogh9z4ax9tv\",\n\t\t\t},\n\t\t\tScalingConfigurationId: pulumi.StringRef(\"scc-ybtawzucw95pkgon0wst\"),\n\t\t\tScalingGroupId:         \"scg-ybtawtznszgh9yv8agcp\",\n\t\t\tStatus:                 pulumi.StringRef(\"InService\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = AutoscalingFunctions.ScalingInstances();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:autoscaling:ScalingInstances\n      Arguments:\n        ids:\n          - i-ybzl4u5uogl8j07hgcbg\n          - i-ybyncrcpzpgh9zmlct0w\n          - i-ybyncrcpzogh9z4ax9tv\n        scalingConfigurationId: scc-ybtawzucw95pkgon0wst\n        scalingGroupId: scg-ybtawtznszgh9yv8agcp\n        status: InService\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ScalingInstances.\n",
                "properties": {
                    "creationType": {
                        "type": "string",
                        "description": "The creation type of the instances. Valid values: AutoCreated, Attached.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of instance ids.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "scalingConfigurationId": {
                        "type": "string",
                        "description": "The id of the scaling configuration id.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of instances. Valid values: Init, Pending, Pending:Wait, InService, Error, Removing, Removing:Wait, Stopped, Protected.\n"
                    }
                },
                "type": "object",
                "required": [
                    "scalingGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ScalingInstances.\n",
                "properties": {
                    "creationType": {
                        "type": "string",
                        "description": "The creation type of the instance. Valid values: AutoCreated, Attached.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "scalingConfigurationId": {
                        "type": "string",
                        "description": "The id of the scaling configuration.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group.\n"
                    },
                    "scalingInstances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:autoscaling/ScalingInstancesScalingInstance:ScalingInstancesScalingInstance"
                        },
                        "description": "The collection of scaling instances.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of instances.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of scaling instances query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "scalingGroupId",
                    "scalingInstances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:autoscaling/scalingLifecycleHooks:ScalingLifecycleHooks": {
            "description": "Use this data source to query detailed information of scaling lifecycle hooks\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultScalingLifecycleHooks = pulumi.output(volcengine.autoscaling.ScalingLifecycleHooks({\n    scalingGroupId: \"scg-ybru8pazhgl8j1di4tyd\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.autoscaling.scaling_lifecycle_hooks(scaling_group_id=\"scg-ybru8pazhgl8j1di4tyd\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Autoscaling.ScalingLifecycleHooks.InvokeAsync(new Volcengine.Autoscaling.ScalingLifecycleHooksArgs\n        {\n            ScalingGroupId = \"scg-ybru8pazhgl8j1di4tyd\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.ScalingLifecycleHooks(ctx, \u0026autoscaling.ScalingLifecycleHooksArgs{\n\t\t\tScalingGroupId: \"scg-ybru8pazhgl8j1di4tyd\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = AutoscalingFunctions.ScalingLifecycleHooks();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:autoscaling:ScalingLifecycleHooks\n      Arguments:\n        scalingGroupId: scg-ybru8pazhgl8j1di4tyd\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ScalingLifecycleHooks.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of lifecycle hook ids.\n"
                    },
                    "lifecycleHookNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of lifecycle hook names.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of lifecycle hook.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "An id of scaling group id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "scalingGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ScalingLifecycleHooks.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lifecycleHookNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lifecycleHooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:autoscaling/ScalingLifecycleHooksLifecycleHook:ScalingLifecycleHooksLifecycleHook"
                        },
                        "description": "The collection of lifecycle hook query.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of lifecycle hook query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "lifecycleHooks",
                    "scalingGroupId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:autoscaling/scalingPolicies:ScalingPolicies": {
            "description": "Use this data source to query detailed information of scaling policies\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultScalingPolicies = pulumi.output(volcengine.autoscaling.ScalingPolicies({\n    ids: [\"sp-ybruzckr8bgh9zrxw29v\"],\n    scalingGroupId: \"scg-ybqm0b6kcigh9zu9ce6t\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.autoscaling.scaling_policies(ids=[\"sp-ybruzckr8bgh9zrxw29v\"],\n    scaling_group_id=\"scg-ybqm0b6kcigh9zu9ce6t\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Autoscaling.ScalingPolicies.InvokeAsync(new Volcengine.Autoscaling.ScalingPoliciesArgs\n        {\n            Ids = \n            {\n                \"sp-ybruzckr8bgh9zrxw29v\",\n            },\n            ScalingGroupId = \"scg-ybqm0b6kcigh9zu9ce6t\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.ScalingPolicies(ctx, \u0026autoscaling.ScalingPoliciesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"sp-ybruzckr8bgh9zrxw29v\",\n\t\t\t},\n\t\t\tScalingGroupId: \"scg-ybqm0b6kcigh9zu9ce6t\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = AutoscalingFunctions.ScalingPolicies();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:autoscaling:ScalingPolicies\n      Arguments:\n        ids:\n          - sp-ybruzckr8bgh9zrxw29v\n        scalingGroupId: scg-ybqm0b6kcigh9zu9ce6t\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ScalingPolicies.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of scaling policy ids.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of scaling policy.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "An id of the scaling group to which the scaling policy belongs.\n"
                    },
                    "scalingPolicyNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of scaling policy names.\n"
                    },
                    "scalingPolicyType": {
                        "type": "string",
                        "description": "A type of scaling policy. Valid values: Scheduled, Recurrence, Manual, Alarm.\n"
                    }
                },
                "type": "object",
                "required": [
                    "scalingGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ScalingPolicies.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "scalingGroupId": {
                        "type": "string",
                        "description": "The id of the scaling group to which the scaling policy belongs.\n"
                    },
                    "scalingPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:autoscaling/ScalingPoliciesScalingPolicy:ScalingPoliciesScalingPolicy"
                        },
                        "description": "The collection of scaling policy query.\n"
                    },
                    "scalingPolicyNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scalingPolicyType": {
                        "type": "string",
                        "description": "The type of the scaling policy.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of scaling policy query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "scalingGroupId",
                    "scalingPolicies",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:bioos/clusters:Clusters": {
            "description": "Use this data source to query detailed information of bioos clusters\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultClusters = pulumi.output(volcengine.bioos.Clusters());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.bioos.clusters()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Bioos.Clusters.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/bioos\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/bioos\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bioos.Clusters(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = BioosFunctions.Clusters();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:bioos:Clusters\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Clusters.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of cluster ids.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "whether it is a public cluster.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The status of the clusters.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The type of the clusters.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Clusters.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:bioos/ClustersItem:ClustersItem"
                        },
                        "description": "The list of clusters.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "whether it is a public cluster.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Cluster query.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:bioos/workspaces:Workspaces": {
            "description": "Use this data source to query detailed information of bioos workspaces\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultWorkspaces = pulumi.output(volcengine.bioos.Workspaces());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.bioos.workspaces()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Bioos.Workspaces.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/bioos\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/bioos\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bioos.Workspaces(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = BioosFunctions.Workspaces();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:bioos:Workspaces\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Workspaces.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of workspace ids.\n"
                    },
                    "keyword": {
                        "type": "string",
                        "description": "Keyword to filter by workspace name or description.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "sortBy": {
                        "type": "string",
                        "description": "Sort Field (Name CreateTime).\n"
                    },
                    "sortOrder": {
                        "type": "string",
                        "description": "The sort order.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Workspaces.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:bioos/WorkspacesItem:WorkspacesItem"
                        },
                        "description": "A list of workspaces.\n"
                    },
                    "keyword": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "sortBy": {
                        "type": "string"
                    },
                    "sortOrder": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Workspace query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cen/attachInstances:AttachInstances": {
            "description": "Use this data source to query detailed information of cen attach instances\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cen.AttachInstances({\n    cenId: \"cen-2bzrl3srxsv0g2dx0efyoojn3\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.attach_instances(cen_id=\"cen-2bzrl3srxsv0g2dx0efyoojn3\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cen.AttachInstances.InvokeAsync(new Volcengine.Cen.AttachInstancesArgs\n        {\n            CenId = \"cen-2bzrl3srxsv0g2dx0efyoojn3\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cen\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.AttachInstances(ctx, \u0026cen.AttachInstancesArgs{\n\t\t\tCenId: pulumi.StringRef(\"cen-2bzrl3srxsv0g2dx0efyoojn3\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CenFunctions.AttachInstances();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cen:AttachInstances\n      Arguments:\n        cenId: cen-2bzrl3srxsv0g2dx0efyoojn3\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking AttachInstances.\n",
                "properties": {
                    "cenId": {
                        "type": "string",
                        "description": "A cen ID.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "An instance ID.\n"
                    },
                    "instanceRegionId": {
                        "type": "string",
                        "description": "A region id of instance.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "An instance type.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by AttachInstances.\n",
                "properties": {
                    "attachInstances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/AttachInstancesAttachInstance:AttachInstancesAttachInstance"
                        },
                        "description": "The collection of cen attach instance query.\n"
                    },
                    "cenId": {
                        "type": "string",
                        "description": "The ID of the cen.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the instance.\n"
                    },
                    "instanceRegionId": {
                        "type": "string",
                        "description": "The region id of the instance.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of the instance.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of cen attach instance query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "attachInstances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cen/bandwidthPackages:BandwidthPackages": {
            "description": "Use this data source to query detailed information of cen bandwidth packages\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cen.BandwidthPackages({\n    cenId: \"cen-2bzrl3srxsv0g2dx0efyoojn3\",\n    ids: [\"cbp-2bzeew3s8p79c2dx0eeohej4x\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.bandwidth_packages(cen_id=\"cen-2bzrl3srxsv0g2dx0efyoojn3\",\n    ids=[\"cbp-2bzeew3s8p79c2dx0eeohej4x\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cen.BandwidthPackages.InvokeAsync(new Volcengine.Cen.BandwidthPackagesArgs\n        {\n            CenId = \"cen-2bzrl3srxsv0g2dx0efyoojn3\",\n            Ids = \n            {\n                \"cbp-2bzeew3s8p79c2dx0eeohej4x\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cen\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.BandwidthPackages(ctx, \u0026cen.BandwidthPackagesArgs{\n\t\t\tCenId: pulumi.StringRef(\"cen-2bzrl3srxsv0g2dx0efyoojn3\"),\n\t\t\tIds: []string{\n\t\t\t\t\"cbp-2bzeew3s8p79c2dx0eeohej4x\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CenFunctions.BandwidthPackages();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cen:BandwidthPackages\n      Arguments:\n        cenId: cen-2bzrl3srxsv0g2dx0efyoojn3\n        ids:\n          - cbp-2bzeew3s8p79c2dx0eeohej4x\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking BandwidthPackages.\n",
                "properties": {
                    "cenBandwidthPackageNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of cen bandwidth package names.\n"
                    },
                    "cenId": {
                        "type": "string",
                        "description": "A cen id.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of cen bandwidth package IDs.\n"
                    },
                    "localGeographicRegionSetId": {
                        "type": "string",
                        "description": "A local geographic region set id.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of cen bandwidth package.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "peerGeographicRegionSetId": {
                        "type": "string",
                        "description": "A peer geographic region set id.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/BandwidthPackagesTag:BandwidthPackagesTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by BandwidthPackages.\n",
                "properties": {
                    "bandwidthPackages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/BandwidthPackagesBandwidthPackage:BandwidthPackagesBandwidthPackage"
                        },
                        "description": "The collection of cen bandwidth package query.\n"
                    },
                    "cenBandwidthPackageNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cenId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "localGeographicRegionSetId": {
                        "type": "string",
                        "description": "The local geographic region set id of the cen bandwidth package.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "peerGeographicRegionSetId": {
                        "type": "string",
                        "description": "The peer geographic region set id of the cen bandwidth package.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/BandwidthPackagesTag:BandwidthPackagesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of cen bandwidth package query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bandwidthPackages",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cen/cens:Cens": {
            "description": "Use this data source to query detailed information of cens\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cen.Cens({\n    ids: [\"cen-2bzrl3srxsv0g2dx0efyoojn3\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.cens(ids=[\"cen-2bzrl3srxsv0g2dx0efyoojn3\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cen.Cens.InvokeAsync(new Volcengine.Cen.CensArgs\n        {\n            Ids = \n            {\n                \"cen-2bzrl3srxsv0g2dx0efyoojn3\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cen\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.Cens(ctx, \u0026cen.CensArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"cen-2bzrl3srxsv0g2dx0efyoojn3\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CenFunctions.Cens();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cen:Cens\n      Arguments:\n        ids:\n          - cen-2bzrl3srxsv0g2dx0efyoojn3\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Cens.\n",
                "properties": {
                    "cenNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of cen names.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of cen IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of cen.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/CensTag:CensTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Cens.\n",
                "properties": {
                    "cenNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/CensCen:CensCen"
                        },
                        "description": "The collection of cen query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/CensTag:CensTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of cen query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cens",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cen/interRegionBandwidths:InterRegionBandwidths": {
            "description": "Use this data source to query detailed information of cen inter region bandwidths\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cen.InterRegionBandwidths({\n    ids: [\"cirb-274q484wxao007fap8tlvl6si\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.inter_region_bandwidths(ids=[\"cirb-274q484wxao007fap8tlvl6si\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cen.InterRegionBandwidths.InvokeAsync(new Volcengine.Cen.InterRegionBandwidthsArgs\n        {\n            Ids = \n            {\n                \"cirb-274q484wxao007fap8tlvl6si\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cen\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.InterRegionBandwidths(ctx, \u0026cen.InterRegionBandwidthsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"cirb-274q484wxao007fap8tlvl6si\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CenFunctions.InterRegionBandwidths();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cen:InterRegionBandwidths\n      Arguments:\n        ids:\n          - cirb-274q484wxao007fap8tlvl6si\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking InterRegionBandwidths.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of cen inter region bandwidth IDs.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by InterRegionBandwidths.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "interRegionBandwidths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/InterRegionBandwidthsInterRegionBandwidth:InterRegionBandwidthsInterRegionBandwidth"
                        },
                        "description": "The collection of cen inter region bandwidth query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of cen inter region bandwidth query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "interRegionBandwidths",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cen/routeEntries:RouteEntries": {
            "description": "Use this data source to query detailed information of cen route entries\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cen.RouteEntries({\n    cenId: \"cen-12ar8uclj68sg17q7y20v9gil\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cen.route_entries(cen_id=\"cen-12ar8uclj68sg17q7y20v9gil\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cen.RouteEntries.InvokeAsync(new Volcengine.Cen.RouteEntriesArgs\n        {\n            CenId = \"cen-12ar8uclj68sg17q7y20v9gil\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cen\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.RouteEntries(ctx, \u0026cen.RouteEntriesArgs{\n\t\t\tCenId: \"cen-12ar8uclj68sg17q7y20v9gil\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CenFunctions.RouteEntries();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cen:RouteEntries\n      Arguments:\n        cenId: cen-12ar8uclj68sg17q7y20v9gil\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking RouteEntries.\n",
                "properties": {
                    "cenId": {
                        "type": "string",
                        "description": "A cen ID.\n"
                    },
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "A destination cidr block.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "An instance ID.\n"
                    },
                    "instanceRegionId": {
                        "type": "string",
                        "description": "An instance region ID.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "An instance type.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cenId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by RouteEntries.\n",
                "properties": {
                    "cenId": {
                        "type": "string",
                        "description": "The cen ID of the cen route entry.\n"
                    },
                    "cenRouteEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/RouteEntriesCenRouteEntry:RouteEntriesCenRouteEntry"
                        },
                        "description": "The collection of cen route entry query.\n"
                    },
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "The destination cidr block of the cen route entry.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance id of the next hop of the cen route entry.\n"
                    },
                    "instanceRegionId": {
                        "type": "string",
                        "description": "The instance region id of the next hop of the cen route entry.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The instance type of the next hop of the cen route entry.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of cen route entry.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cenId",
                    "cenRouteEntries",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cen/serviceRouteEntries:ServiceRouteEntries": {
            "description": "Use this data source to query detailed information of cen service route entries\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultServiceRouteEntries = pulumi.output(volcengine.cen.ServiceRouteEntries({\n    cenId: \"cen-12ar8uclj68sg17q7y20v9gil\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.cen.service_route_entries(cen_id=\"cen-12ar8uclj68sg17q7y20v9gil\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Cen.ServiceRouteEntries.InvokeAsync(new Volcengine.Cen.ServiceRouteEntriesArgs\n        {\n            CenId = \"cen-12ar8uclj68sg17q7y20v9gil\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cen\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cen.ServiceRouteEntries(ctx, \u0026cen.ServiceRouteEntriesArgs{\n\t\t\tCenId: pulumi.StringRef(\"cen-12ar8uclj68sg17q7y20v9gil\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = CenFunctions.ServiceRouteEntries();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:cen:ServiceRouteEntries\n      Arguments:\n        cenId: cen-12ar8uclj68sg17q7y20v9gil\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ServiceRouteEntries.\n",
                "properties": {
                    "cenId": {
                        "type": "string",
                        "description": "A cen ID.\n"
                    },
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "A destination cidr block.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "serviceRegionId": {
                        "type": "string",
                        "description": "A service region id.\n"
                    },
                    "serviceVpcId": {
                        "type": "string",
                        "description": "A service VPC id.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by ServiceRouteEntries.\n",
                "properties": {
                    "cenId": {
                        "type": "string",
                        "description": "The cen ID of the cen service route entry.\n"
                    },
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "The destination cidr block of the cen service route entry.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "serviceRegionId": {
                        "type": "string",
                        "description": "The service region id of the cen service route entry.\n"
                    },
                    "serviceRouteEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cen/ServiceRouteEntriesServiceRouteEntry:ServiceRouteEntriesServiceRouteEntry"
                        },
                        "description": "The collection of cen service route entry query.\n"
                    },
                    "serviceVpcId": {
                        "type": "string",
                        "description": "The service VPC id of the cen service route entry.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of cen service route entry.\n"
                    }
                },
                "type": "object",
                "required": [
                    "serviceRouteEntries",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:clb/acls:Acls": {
            "description": "Use this data source to query detailed information of acls\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAcls = pulumi.output(volcengine.clb.Acls({\n    ids: [\"acl-3ti8n0rurx4bwbh9jzdy\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.clb.acls(ids=[\"acl-3ti8n0rurx4bwbh9jzdy\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Clb.Acls.InvokeAsync(new Volcengine.Clb.AclsArgs\n        {\n            Ids = \n            {\n                \"acl-3ti8n0rurx4bwbh9jzdy\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := clb.Acls(ctx, \u0026clb.AclsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"acl-3ti8n0rurx4bwbh9jzdy\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ClbFunctions.Acls();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:clb:Acls\n      Arguments:\n        ids:\n          - acl-3ti8n0rurx4bwbh9jzdy\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Acls.\n",
                "properties": {
                    "aclName": {
                        "type": "string",
                        "description": "The name of acl.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Acl IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Acl.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of Acl.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Acls.\n",
                "properties": {
                    "aclName": {
                        "type": "string",
                        "description": "The Name of Acl.\n"
                    },
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/AclsAcl:AclsAcl"
                        },
                        "description": "The collection of Acl query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of Acl.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Acl query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:clb/certificates:Certificates": {
            "description": "Use this data source to query detailed information of certificates\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooCertificate: volcengine.clb.Certificate[];\nfor (const range = {value: 0}; range.value \u003c 3; range.value++) {\n    fooCertificate.push(new volcengine.clb.Certificate(`fooCertificate-${range.value}`, {\n        certificateName: `acc-test-certificate-${range.value}`,\n        description: \"acc-test-demo\",\n        publicKey: `-----BEGIN CERTIFICATE-----\nMIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\nBAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX\naWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF\nMQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\ngQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP\nY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5\ntWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV\nHQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP\nrfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0\n5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f\nlKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf\nt07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==\n-----END CERTIFICATE-----`,\n        privateKey: `-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9\nBVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C\nNIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB\nAoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t\ndmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED\nK8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG\nNw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji\n0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY\nB9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW\nxNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi\njY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP\nrmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ\nV4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=\n-----END RSA PRIVATE KEY-----`,\n        projectName: \"default\",\n        tags: [{\n            key: \"k1\",\n            value: \"v1\",\n        }],\n    }));\n}\nconst fooCertificates = volcengine.clb.CertificatesOutput({\n    ids: fooCertificate.map(__item =\u003e __item.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_certificate = []\nfor range in [{\"value\": i} for i in range(0, 3)]:\n    foo_certificate.append(volcengine.clb.Certificate(f\"fooCertificate-{range['value']}\",\n        certificate_name=f\"acc-test-certificate-{range['value']}\",\n        description=\"acc-test-demo\",\n        public_key=\"\"\"-----BEGIN CERTIFICATE-----\nMIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\nBAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX\naWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF\nMQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\ngQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP\nY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5\ntWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV\nHQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP\nrfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0\n5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f\nlKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf\nt07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==\n-----END CERTIFICATE-----\"\"\",\n        private_key=\"\"\"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9\nBVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C\nNIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB\nAoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t\ndmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED\nK8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG\nNw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji\n0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY\nB9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW\nxNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi\njY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP\nrmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ\nV4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=\n-----END RSA PRIVATE KEY-----\"\"\",\n        project_name=\"default\",\n        tags=[volcengine.clb.CertificateTagArgs(\n            key=\"k1\",\n            value=\"v1\",\n        )]))\nfoo_certificates = volcengine.clb.certificates_output(ids=[__item.id for __item in foo_certificate])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooCertificate = new List\u003cVolcengine.Clb.Certificate\u003e();\n        for (var rangeIndex = 0; rangeIndex \u003c 3; rangeIndex++)\n        {\n            var range = new { Value = rangeIndex };\n            fooCertificate.Add(new Volcengine.Clb.Certificate($\"fooCertificate-{range.Value}\", new Volcengine.Clb.CertificateArgs\n            {\n                CertificateName = $\"acc-test-certificate-{range.Value}\",\n                Description = \"acc-test-demo\",\n                PublicKey = @\"-----BEGIN CERTIFICATE-----\nMIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\nBAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX\naWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF\nMQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\ngQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP\nY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5\ntWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV\nHQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP\nrfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0\n5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f\nlKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf\nt07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==\n-----END CERTIFICATE-----\",\n                PrivateKey = @\"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9\nBVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C\nNIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB\nAoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t\ndmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED\nK8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG\nNw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji\n0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY\nB9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW\nxNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi\njY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP\nrmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ\nV4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=\n-----END RSA PRIVATE KEY-----\",\n                ProjectName = \"default\",\n                Tags = \n                {\n                    new Volcengine.Clb.Inputs.CertificateTagArgs\n                    {\n                        Key = \"k1\",\n                        Value = \"v1\",\n                    },\n                },\n            }));\n        }\n        var fooCertificates = Volcengine.Clb.Certificates.Invoke(new Volcengine.Clb.CertificatesInvokeArgs\n        {\n            Ids = fooCertificate.Select(__item =\u003e __item.Id).ToList(),\n        });\n    }\n\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport com.pulumi.codegen.internal.KeyedValue;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        for (var i = 0; i \u003c 3; i++) {\n            new Certificate(\"fooCertificate-\" + i, CertificateArgs.builder()            \n                .certificateName(String.format(\"acc-test-certificate-%s\", range.value()))\n                .description(\"acc-test-demo\")\n                .publicKey(\"\"\"\n-----BEGIN CERTIFICATE-----\nMIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\nBAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX\naWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF\nMQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\ngQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP\nY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5\ntWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV\nHQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP\nrfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0\n5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f\nlKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf\nt07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==\n-----END CERTIFICATE-----                \"\"\")\n                .privateKey(\"\"\"\n-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9\nBVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C\nNIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB\nAoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t\ndmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED\nK8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG\nNw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji\n0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY\nB9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW\nxNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi\njY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP\nrmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ\nV4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=\n-----END RSA PRIVATE KEY-----                \"\"\")\n                .projectName(\"default\")\n                .tags(CertificateTagArgs.builder()\n                    .key(\"k1\")\n                    .value(\"v1\")\n                    .build())\n                .build());\n\n        \n}\n        final var fooCertificates = ClbFunctions.Certificates(Map.of(\"ids\", fooCertificate.stream().map(element -\u003e element.id()).collect(toList())));\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Certificates.\n",
                "properties": {
                    "certificateName": {
                        "type": "string",
                        "description": "The name of the Certificate.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Certificate IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "The Name Regex of Certificate.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of Certificate.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/CertificatesTag:CertificatesTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Certificates.\n",
                "properties": {
                    "certificateName": {
                        "type": "string",
                        "description": "The name of the Certificate.\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/CertificatesCertificate:CertificatesCertificate"
                        },
                        "description": "The collection of Certificate query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the Certificate.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/CertificatesTag:CertificatesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Certificate query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "certificates",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:clb/clbs:Clbs": {
            "description": "Use this data source to query detailed information of clbs\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooClb: volcengine.clb.Clb[];\nfor (const range = {value: 0}; range.value \u003c 3; range.value++) {\n    fooClb.push(new volcengine.clb.Clb(`fooClb-${range.value}`, {\n        type: \"public\",\n        subnetId: fooSubnet.id,\n        loadBalancerSpec: \"small_1\",\n        description: \"acc-test-demo\",\n        loadBalancerName: `acc-test-clb-${range.value}`,\n        loadBalancerBillingType: \"PostPaid\",\n        eipBillingConfig: {\n            isp: \"BGP\",\n            eipBillingType: \"PostPaidByBandwidth\",\n            bandwidth: 1,\n        },\n        tags: [{\n            key: \"k1\",\n            value: \"v1\",\n        }],\n    }));\n}\nconst fooClbs = volcengine.clb.ClbsOutput({\n    ids: fooClb.map(__item =\u003e __item.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_clb = []\nfor range in [{\"value\": i} for i in range(0, 3)]:\n    foo_clb.append(volcengine.clb.Clb(f\"fooClb-{range['value']}\",\n        type=\"public\",\n        subnet_id=foo_subnet.id,\n        load_balancer_spec=\"small_1\",\n        description=\"acc-test-demo\",\n        load_balancer_name=f\"acc-test-clb-{range['value']}\",\n        load_balancer_billing_type=\"PostPaid\",\n        eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n            isp=\"BGP\",\n            eip_billing_type=\"PostPaidByBandwidth\",\n            bandwidth=1,\n        ),\n        tags=[volcengine.clb.ClbTagArgs(\n            key=\"k1\",\n            value=\"v1\",\n        )]))\nfoo_clbs = volcengine.clb.clbs_output(ids=[__item.id for __item in foo_clb])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooClb = new List\u003cVolcengine.Clb.Clb\u003e();\n        for (var rangeIndex = 0; rangeIndex \u003c 3; rangeIndex++)\n        {\n            var range = new { Value = rangeIndex };\n            fooClb.Add(new Volcengine.Clb.Clb($\"fooClb-{range.Value}\", new Volcengine.Clb.ClbArgs\n            {\n                Type = \"public\",\n                SubnetId = fooSubnet.Id,\n                LoadBalancerSpec = \"small_1\",\n                Description = \"acc-test-demo\",\n                LoadBalancerName = $\"acc-test-clb-{range.Value}\",\n                LoadBalancerBillingType = \"PostPaid\",\n                EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n                {\n                    Isp = \"BGP\",\n                    EipBillingType = \"PostPaidByBandwidth\",\n                    Bandwidth = 1,\n                },\n                Tags = \n                {\n                    new Volcengine.Clb.Inputs.ClbTagArgs\n                    {\n                        Key = \"k1\",\n                        Value = \"v1\",\n                    },\n                },\n            }));\n        }\n        var fooClbs = Volcengine.Clb.Clbs.Invoke(new Volcengine.Clb.ClbsInvokeArgs\n        {\n            Ids = fooClb.Select(__item =\u003e __item.Id).ToList(),\n        });\n    }\n\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport com.pulumi.codegen.internal.KeyedValue;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        for (var i = 0; i \u003c 3; i++) {\n            new Clb(\"fooClb-\" + i, ClbArgs.builder()            \n                .type(\"public\")\n                .subnetId(fooSubnet.id())\n                .loadBalancerSpec(\"small_1\")\n                .description(\"acc-test-demo\")\n                .loadBalancerName(String.format(\"acc-test-clb-%s\", range.value()))\n                .loadBalancerBillingType(\"PostPaid\")\n                .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                    .isp(\"BGP\")\n                    .eipBillingType(\"PostPaidByBandwidth\")\n                    .bandwidth(1)\n                    .build())\n                .tags(ClbTagArgs.builder()\n                    .key(\"k1\")\n                    .value(\"v1\")\n                    .build())\n                .build());\n\n        \n}\n        final var fooClbs = ClbFunctions.Clbs(Map.of(\"ids\", fooClb.stream().map(element -\u003e element.id()).collect(toList())));\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Clbs.\n",
                "properties": {
                    "eniAddress": {
                        "type": "string",
                        "description": "The private ip address of the Clb.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Clb IDs.\n"
                    },
                    "loadBalancerName": {
                        "type": "string",
                        "description": "The name of the Clb.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Clb.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of Clb.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/ClbsTag:ClbsTag"
                        },
                        "description": "Tags.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the VPC.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Clbs.\n",
                "properties": {
                    "clbs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/ClbsClb:ClbsClb"
                        },
                        "description": "The collection of Clb query.\n"
                    },
                    "eniAddress": {
                        "type": "string",
                        "description": "The Eni address of the Clb.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "loadBalancerName": {
                        "type": "string",
                        "description": "The name of the Clb.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the Clb.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/ClbsTag:ClbsTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Clb query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc ID of the Clb.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clbs",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:clb/listeners:Listeners": {
            "description": "Use this data source to query detailed information of listeners\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooClb = new volcengine.clb.Clb(\"fooClb\", {\n    type: \"public\",\n    subnetId: fooSubnet.id,\n    loadBalancerSpec: \"small_1\",\n    description: \"acc0Demo\",\n    loadBalancerName: \"acc-test-create\",\n    eipBillingConfig: {\n        isp: \"BGP\",\n        eipBillingType: \"PostPaidByBandwidth\",\n        bandwidth: 1,\n    },\n});\nconst fooServerGroup = new volcengine.clb.ServerGroup(\"fooServerGroup\", {\n    loadBalancerId: fooClb.id,\n    serverGroupName: \"acc-test-create\",\n    description: \"hello demo11\",\n});\nconst fooListener = new volcengine.clb.Listener(\"fooListener\", {\n    loadBalancerId: fooClb.id,\n    listenerName: \"acc-test-listener\",\n    protocol: \"HTTP\",\n    port: 90,\n    serverGroupId: fooServerGroup.id,\n    healthCheck: {\n        enabled: \"on\",\n        interval: 10,\n        timeout: 3,\n        healthyThreshold: 5,\n        unHealthyThreshold: 2,\n        domain: \"volcengine.com\",\n        httpCode: \"http_2xx\",\n        method: \"GET\",\n        uri: \"/\",\n    },\n    enabled: \"on\",\n});\nconst fooListeners = volcengine.clb.ListenersOutput({\n    ids: [fooListener.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_clb = volcengine.clb.Clb(\"fooClb\",\n    type=\"public\",\n    subnet_id=foo_subnet.id,\n    load_balancer_spec=\"small_1\",\n    description=\"acc0Demo\",\n    load_balancer_name=\"acc-test-create\",\n    eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n        isp=\"BGP\",\n        eip_billing_type=\"PostPaidByBandwidth\",\n        bandwidth=1,\n    ))\nfoo_server_group = volcengine.clb.ServerGroup(\"fooServerGroup\",\n    load_balancer_id=foo_clb.id,\n    server_group_name=\"acc-test-create\",\n    description=\"hello demo11\")\nfoo_listener = volcengine.clb.Listener(\"fooListener\",\n    load_balancer_id=foo_clb.id,\n    listener_name=\"acc-test-listener\",\n    protocol=\"HTTP\",\n    port=90,\n    server_group_id=foo_server_group.id,\n    health_check=volcengine.clb.ListenerHealthCheckArgs(\n        enabled=\"on\",\n        interval=10,\n        timeout=3,\n        healthy_threshold=5,\n        un_healthy_threshold=2,\n        domain=\"volcengine.com\",\n        http_code=\"http_2xx\",\n        method=\"GET\",\n        uri=\"/\",\n    ),\n    enabled=\"on\")\nfoo_listeners = volcengine.clb.listeners_output(ids=[foo_listener.id])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooClb = new Volcengine.Clb.Clb(\"fooClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"public\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc0Demo\",\n            LoadBalancerName = \"acc-test-create\",\n            EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n            {\n                Isp = \"BGP\",\n                EipBillingType = \"PostPaidByBandwidth\",\n                Bandwidth = 1,\n            },\n        });\n        var fooServerGroup = new Volcengine.Clb.ServerGroup(\"fooServerGroup\", new Volcengine.Clb.ServerGroupArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ServerGroupName = \"acc-test-create\",\n            Description = \"hello demo11\",\n        });\n        var fooListener = new Volcengine.Clb.Listener(\"fooListener\", new Volcengine.Clb.ListenerArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ListenerName = \"acc-test-listener\",\n            Protocol = \"HTTP\",\n            Port = 90,\n            ServerGroupId = fooServerGroup.Id,\n            HealthCheck = new Volcengine.Clb.Inputs.ListenerHealthCheckArgs\n            {\n                Enabled = \"on\",\n                Interval = 10,\n                Timeout = 3,\n                HealthyThreshold = 5,\n                UnHealthyThreshold = 2,\n                Domain = \"volcengine.com\",\n                HttpCode = \"http_2xx\",\n                Method = \"GET\",\n                Uri = \"/\",\n            },\n            Enabled = \"on\",\n        });\n        var fooListeners = Volcengine.Clb.Listeners.Invoke(new Volcengine.Clb.ListenersInvokeArgs\n        {\n            Ids = \n            {\n                fooListener.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooClb, err := clb.NewClb(ctx, \"fooClb\", \u0026clb.ClbArgs{\n\t\t\tType:             pulumi.String(\"public\"),\n\t\t\tSubnetId:         fooSubnet.ID(),\n\t\t\tLoadBalancerSpec: pulumi.String(\"small_1\"),\n\t\t\tDescription:      pulumi.String(\"acc0Demo\"),\n\t\t\tLoadBalancerName: pulumi.String(\"acc-test-create\"),\n\t\t\tEipBillingConfig: \u0026clb.ClbEipBillingConfigArgs{\n\t\t\t\tIsp:            pulumi.String(\"BGP\"),\n\t\t\t\tEipBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\tBandwidth:      pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooServerGroup, err := clb.NewServerGroup(ctx, \"fooServerGroup\", \u0026clb.ServerGroupArgs{\n\t\t\tLoadBalancerId:  fooClb.ID(),\n\t\t\tServerGroupName: pulumi.String(\"acc-test-create\"),\n\t\t\tDescription:     pulumi.String(\"hello demo11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooListener, err := clb.NewListener(ctx, \"fooListener\", \u0026clb.ListenerArgs{\n\t\t\tLoadBalancerId: fooClb.ID(),\n\t\t\tListenerName:   pulumi.String(\"acc-test-listener\"),\n\t\t\tProtocol:       pulumi.String(\"HTTP\"),\n\t\t\tPort:           pulumi.Int(90),\n\t\t\tServerGroupId:  fooServerGroup.ID(),\n\t\t\tHealthCheck: \u0026clb.ListenerHealthCheckArgs{\n\t\t\t\tEnabled:            pulumi.String(\"on\"),\n\t\t\t\tInterval:           pulumi.Int(10),\n\t\t\t\tTimeout:            pulumi.Int(3),\n\t\t\t\tHealthyThreshold:   pulumi.Int(5),\n\t\t\t\tUnHealthyThreshold: pulumi.Int(2),\n\t\t\t\tDomain:             pulumi.String(\"volcengine.com\"),\n\t\t\t\tHttpCode:           pulumi.String(\"http_2xx\"),\n\t\t\t\tMethod:             pulumi.String(\"GET\"),\n\t\t\t\tUri:                pulumi.String(\"/\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.String(\"on\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = clb.ListenersOutput(ctx, clb.ListenersOutputArgs{\n\t\t\tIds: pulumi.StringArray{\n\t\t\t\tfooListener.ID(),\n\t\t\t},\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooClb = new Clb(\"fooClb\", ClbArgs.builder()        \n            .type(\"public\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc0Demo\")\n            .loadBalancerName(\"acc-test-create\")\n            .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                .isp(\"BGP\")\n                .eipBillingType(\"PostPaidByBandwidth\")\n                .bandwidth(1)\n                .build())\n            .build());\n\n        var fooServerGroup = new ServerGroup(\"fooServerGroup\", ServerGroupArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .serverGroupName(\"acc-test-create\")\n            .description(\"hello demo11\")\n            .build());\n\n        var fooListener = new Listener(\"fooListener\", ListenerArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .listenerName(\"acc-test-listener\")\n            .protocol(\"HTTP\")\n            .port(90)\n            .serverGroupId(fooServerGroup.id())\n            .healthCheck(ListenerHealthCheckArgs.builder()\n                .enabled(\"on\")\n                .interval(10)\n                .timeout(3)\n                .healthyThreshold(5)\n                .unHealthyThreshold(2)\n                .domain(\"volcengine.com\")\n                .httpCode(\"http_2xx\")\n                .method(\"GET\")\n                .uri(\"/\")\n                .build())\n            .enabled(\"on\")\n            .build());\n\n        final var fooListeners = ClbFunctions.Listeners(Map.of(\"ids\", fooListener.id()));\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooClb:\n    type: volcengine:clb:Clb\n    properties:\n      type: public\n      subnetId: ${fooSubnet.id}\n      loadBalancerSpec: small_1\n      description: acc0Demo\n      loadBalancerName: acc-test-create\n      eipBillingConfig:\n        isp: BGP\n        eipBillingType: PostPaidByBandwidth\n        bandwidth: 1\n  fooServerGroup:\n    type: volcengine:clb:ServerGroup\n    properties:\n      loadBalancerId: ${fooClb.id}\n      serverGroupName: acc-test-create\n      description: hello demo11\n  fooListener:\n    type: volcengine:clb:Listener\n    properties:\n      loadBalancerId: ${fooClb.id}\n      listenerName: acc-test-listener\n      protocol: HTTP\n      port: 90\n      serverGroupId: ${fooServerGroup.id}\n      healthCheck:\n        enabled: on\n        interval: 10\n        timeout: 3\n        healthyThreshold: 5\n        unHealthyThreshold: 2\n        domain: volcengine.com\n        httpCode: http_2xx\n        method: GET\n        uri: /\n      enabled: on\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n  fooListeners:\n    Fn::Invoke:\n      Function: volcengine:clb:Listeners\n      Arguments:\n        ids:\n          - ${fooListener.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Listeners.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Listener IDs.\n"
                    },
                    "listenerName": {
                        "type": "string",
                        "description": "The name of the Listener.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The id of the Clb.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Listener.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Listeners.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "listenerName": {
                        "type": "string",
                        "description": "The name of the Listener.\n"
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/ListenersListener:ListenersListener"
                        },
                        "description": "The collection of Listener query.\n"
                    },
                    "loadBalancerId": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Listener query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "listeners",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:clb/rules:Rules": {
            "description": "Use this data source to query detailed information of clb rules\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooClb = new volcengine.clb.Clb(\"fooClb\", {\n    type: \"public\",\n    subnetId: fooSubnet.id,\n    loadBalancerSpec: \"small_1\",\n    description: \"acc0Demo\",\n    loadBalancerName: \"acc-test-create\",\n    eipBillingConfig: {\n        isp: \"BGP\",\n        eipBillingType: \"PostPaidByBandwidth\",\n        bandwidth: 1,\n    },\n});\nconst fooServerGroup = new volcengine.clb.ServerGroup(\"fooServerGroup\", {\n    loadBalancerId: fooClb.id,\n    serverGroupName: \"acc-test-create\",\n    description: \"hello demo11\",\n});\nconst fooListener = new volcengine.clb.Listener(\"fooListener\", {\n    loadBalancerId: fooClb.id,\n    listenerName: \"acc-test-listener\",\n    protocol: \"HTTP\",\n    port: 90,\n    serverGroupId: fooServerGroup.id,\n    healthCheck: {\n        enabled: \"on\",\n        interval: 10,\n        timeout: 3,\n        healthyThreshold: 5,\n        unHealthyThreshold: 2,\n        domain: \"volcengine.com\",\n        httpCode: \"http_2xx\",\n        method: \"GET\",\n        uri: \"/\",\n    },\n    enabled: \"on\",\n});\nconst fooRule = new volcengine.clb.Rule(\"fooRule\", {\n    listenerId: fooListener.id,\n    serverGroupId: fooServerGroup.id,\n    domain: \"test-volc123.com\",\n    url: \"/yyyy\",\n});\nconst fooRules = volcengine.clb.RulesOutput({\n    ids: [fooRule.id],\n    listenerId: fooListener.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_clb = volcengine.clb.Clb(\"fooClb\",\n    type=\"public\",\n    subnet_id=foo_subnet.id,\n    load_balancer_spec=\"small_1\",\n    description=\"acc0Demo\",\n    load_balancer_name=\"acc-test-create\",\n    eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n        isp=\"BGP\",\n        eip_billing_type=\"PostPaidByBandwidth\",\n        bandwidth=1,\n    ))\nfoo_server_group = volcengine.clb.ServerGroup(\"fooServerGroup\",\n    load_balancer_id=foo_clb.id,\n    server_group_name=\"acc-test-create\",\n    description=\"hello demo11\")\nfoo_listener = volcengine.clb.Listener(\"fooListener\",\n    load_balancer_id=foo_clb.id,\n    listener_name=\"acc-test-listener\",\n    protocol=\"HTTP\",\n    port=90,\n    server_group_id=foo_server_group.id,\n    health_check=volcengine.clb.ListenerHealthCheckArgs(\n        enabled=\"on\",\n        interval=10,\n        timeout=3,\n        healthy_threshold=5,\n        un_healthy_threshold=2,\n        domain=\"volcengine.com\",\n        http_code=\"http_2xx\",\n        method=\"GET\",\n        uri=\"/\",\n    ),\n    enabled=\"on\")\nfoo_rule = volcengine.clb.Rule(\"fooRule\",\n    listener_id=foo_listener.id,\n    server_group_id=foo_server_group.id,\n    domain=\"test-volc123.com\",\n    url=\"/yyyy\")\nfoo_rules = volcengine.clb.rules_output(ids=[foo_rule.id],\n    listener_id=foo_listener.id)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooClb = new Volcengine.Clb.Clb(\"fooClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"public\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc0Demo\",\n            LoadBalancerName = \"acc-test-create\",\n            EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n            {\n                Isp = \"BGP\",\n                EipBillingType = \"PostPaidByBandwidth\",\n                Bandwidth = 1,\n            },\n        });\n        var fooServerGroup = new Volcengine.Clb.ServerGroup(\"fooServerGroup\", new Volcengine.Clb.ServerGroupArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ServerGroupName = \"acc-test-create\",\n            Description = \"hello demo11\",\n        });\n        var fooListener = new Volcengine.Clb.Listener(\"fooListener\", new Volcengine.Clb.ListenerArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ListenerName = \"acc-test-listener\",\n            Protocol = \"HTTP\",\n            Port = 90,\n            ServerGroupId = fooServerGroup.Id,\n            HealthCheck = new Volcengine.Clb.Inputs.ListenerHealthCheckArgs\n            {\n                Enabled = \"on\",\n                Interval = 10,\n                Timeout = 3,\n                HealthyThreshold = 5,\n                UnHealthyThreshold = 2,\n                Domain = \"volcengine.com\",\n                HttpCode = \"http_2xx\",\n                Method = \"GET\",\n                Uri = \"/\",\n            },\n            Enabled = \"on\",\n        });\n        var fooRule = new Volcengine.Clb.Rule(\"fooRule\", new Volcengine.Clb.RuleArgs\n        {\n            ListenerId = fooListener.Id,\n            ServerGroupId = fooServerGroup.Id,\n            Domain = \"test-volc123.com\",\n            Url = \"/yyyy\",\n        });\n        var fooRules = Volcengine.Clb.Rules.Invoke(new Volcengine.Clb.RulesInvokeArgs\n        {\n            Ids = \n            {\n                fooRule.Id,\n            },\n            ListenerId = fooListener.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooClb, err := clb.NewClb(ctx, \"fooClb\", \u0026clb.ClbArgs{\n\t\t\tType:             pulumi.String(\"public\"),\n\t\t\tSubnetId:         fooSubnet.ID(),\n\t\t\tLoadBalancerSpec: pulumi.String(\"small_1\"),\n\t\t\tDescription:      pulumi.String(\"acc0Demo\"),\n\t\t\tLoadBalancerName: pulumi.String(\"acc-test-create\"),\n\t\t\tEipBillingConfig: \u0026clb.ClbEipBillingConfigArgs{\n\t\t\t\tIsp:            pulumi.String(\"BGP\"),\n\t\t\t\tEipBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\tBandwidth:      pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooServerGroup, err := clb.NewServerGroup(ctx, \"fooServerGroup\", \u0026clb.ServerGroupArgs{\n\t\t\tLoadBalancerId:  fooClb.ID(),\n\t\t\tServerGroupName: pulumi.String(\"acc-test-create\"),\n\t\t\tDescription:     pulumi.String(\"hello demo11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooListener, err := clb.NewListener(ctx, \"fooListener\", \u0026clb.ListenerArgs{\n\t\t\tLoadBalancerId: fooClb.ID(),\n\t\t\tListenerName:   pulumi.String(\"acc-test-listener\"),\n\t\t\tProtocol:       pulumi.String(\"HTTP\"),\n\t\t\tPort:           pulumi.Int(90),\n\t\t\tServerGroupId:  fooServerGroup.ID(),\n\t\t\tHealthCheck: \u0026clb.ListenerHealthCheckArgs{\n\t\t\t\tEnabled:            pulumi.String(\"on\"),\n\t\t\t\tInterval:           pulumi.Int(10),\n\t\t\t\tTimeout:            pulumi.Int(3),\n\t\t\t\tHealthyThreshold:   pulumi.Int(5),\n\t\t\t\tUnHealthyThreshold: pulumi.Int(2),\n\t\t\t\tDomain:             pulumi.String(\"volcengine.com\"),\n\t\t\t\tHttpCode:           pulumi.String(\"http_2xx\"),\n\t\t\t\tMethod:             pulumi.String(\"GET\"),\n\t\t\t\tUri:                pulumi.String(\"/\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.String(\"on\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooRule, err := clb.NewRule(ctx, \"fooRule\", \u0026clb.RuleArgs{\n\t\t\tListenerId:    fooListener.ID(),\n\t\t\tServerGroupId: fooServerGroup.ID(),\n\t\t\tDomain:        pulumi.String(\"test-volc123.com\"),\n\t\t\tUrl:           pulumi.String(\"/yyyy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = clb.RulesOutput(ctx, clb.RulesOutputArgs{\n\t\t\tIds: pulumi.StringArray{\n\t\t\t\tfooRule.ID(),\n\t\t\t},\n\t\t\tListenerId: fooListener.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooClb = new Clb(\"fooClb\", ClbArgs.builder()        \n            .type(\"public\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc0Demo\")\n            .loadBalancerName(\"acc-test-create\")\n            .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                .isp(\"BGP\")\n                .eipBillingType(\"PostPaidByBandwidth\")\n                .bandwidth(1)\n                .build())\n            .build());\n\n        var fooServerGroup = new ServerGroup(\"fooServerGroup\", ServerGroupArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .serverGroupName(\"acc-test-create\")\n            .description(\"hello demo11\")\n            .build());\n\n        var fooListener = new Listener(\"fooListener\", ListenerArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .listenerName(\"acc-test-listener\")\n            .protocol(\"HTTP\")\n            .port(90)\n            .serverGroupId(fooServerGroup.id())\n            .healthCheck(ListenerHealthCheckArgs.builder()\n                .enabled(\"on\")\n                .interval(10)\n                .timeout(3)\n                .healthyThreshold(5)\n                .unHealthyThreshold(2)\n                .domain(\"volcengine.com\")\n                .httpCode(\"http_2xx\")\n                .method(\"GET\")\n                .uri(\"/\")\n                .build())\n            .enabled(\"on\")\n            .build());\n\n        var fooRule = new Rule(\"fooRule\", RuleArgs.builder()        \n            .listenerId(fooListener.id())\n            .serverGroupId(fooServerGroup.id())\n            .domain(\"test-volc123.com\")\n            .url(\"/yyyy\")\n            .build());\n\n        final var fooRules = ClbFunctions.Rules(Map.ofEntries(\n            Map.entry(\"ids\", fooRule.id()),\n            Map.entry(\"listenerId\", fooListener.id())\n        ));\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooClb:\n    type: volcengine:clb:Clb\n    properties:\n      type: public\n      subnetId: ${fooSubnet.id}\n      loadBalancerSpec: small_1\n      description: acc0Demo\n      loadBalancerName: acc-test-create\n      eipBillingConfig:\n        isp: BGP\n        eipBillingType: PostPaidByBandwidth\n        bandwidth: 1\n  fooServerGroup:\n    type: volcengine:clb:ServerGroup\n    properties:\n      loadBalancerId: ${fooClb.id}\n      serverGroupName: acc-test-create\n      description: hello demo11\n  fooListener:\n    type: volcengine:clb:Listener\n    properties:\n      loadBalancerId: ${fooClb.id}\n      listenerName: acc-test-listener\n      protocol: HTTP\n      port: 90\n      serverGroupId: ${fooServerGroup.id}\n      healthCheck:\n        enabled: on\n        interval: 10\n        timeout: 3\n        healthyThreshold: 5\n        unHealthyThreshold: 2\n        domain: volcengine.com\n        httpCode: http_2xx\n        method: GET\n        uri: /\n      enabled: on\n  fooRule:\n    type: volcengine:clb:Rule\n    properties:\n      listenerId: ${fooListener.id}\n      serverGroupId: ${fooServerGroup.id}\n      domain: test-volc123.com\n      url: /yyyy\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n  fooRules:\n    Fn::Invoke:\n      Function: volcengine:clb:Rules\n      Arguments:\n        ids:\n          - ${fooRule.id}\n        listenerId: ${fooListener.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Rules.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Rule IDs.\n"
                    },
                    "listenerId": {
                        "type": "string",
                        "description": "The Id of listener.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "listenerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Rules.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "listenerId": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/RulesRule:RulesRule"
                        },
                        "description": "The collection of Rule query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "listenerId",
                    "rules",
                    "id"
                ]
            }
        },
        "volcengine:clb/serverGroupServers:ServerGroupServers": {
            "description": "Use this data source to query detailed information of server group servers\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooClb = new volcengine.clb.Clb(\"fooClb\", {\n    type: \"public\",\n    subnetId: fooSubnet.id,\n    loadBalancerSpec: \"small_1\",\n    description: \"acc0Demo\",\n    loadBalancerName: \"acc-test-create\",\n    eipBillingConfig: {\n        isp: \"BGP\",\n        eipBillingType: \"PostPaidByBandwidth\",\n        bandwidth: 1,\n    },\n});\nconst fooServerGroup = new volcengine.clb.ServerGroup(\"fooServerGroup\", {\n    loadBalancerId: fooClb.id,\n    serverGroupName: \"acc-test-create\",\n    description: \"hello demo11\",\n});\nconst fooSecurityGroup = new volcengine.vpc.SecurityGroup(\"fooSecurityGroup\", {\n    vpcId: fooVpc.id,\n    securityGroupName: \"acc-test-security-group\",\n});\nconst fooInstance = new volcengine.ecs.Instance(\"fooInstance\", {\n    imageId: \"image-ycjwwciuzy5pkh54xx8f\",\n    instanceType: \"ecs.c3i.large\",\n    instanceName: \"acc-test-ecs-name\",\n    password: \"93f0cb0614Aab12\",\n    instanceChargeType: \"PostPaid\",\n    systemVolumeType: \"ESSD_PL0\",\n    systemVolumeSize: 40,\n    subnetId: fooSubnet.id,\n    securityGroupIds: [fooSecurityGroup.id],\n});\nconst fooServerGroupServer = new volcengine.clb.ServerGroupServer(\"fooServerGroupServer\", {\n    serverGroupId: fooServerGroup.id,\n    instanceId: fooInstance.id,\n    type: \"ecs\",\n    weight: 100,\n    port: 80,\n    description: \"This is a acc test server\",\n});\nconst fooServerGroupServers = volcengine.clb.ServerGroupServersOutput({\n    ids: [pulumi.all([fooServerGroupServer.id.apply(id =\u003e id.split(\":\")), fooServerGroupServer.id.apply(id =\u003e id.split(\":\")).length]).apply(([split, length]) =\u003e split[length - 1])],\n    serverGroupId: fooServerGroup.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_clb = volcengine.clb.Clb(\"fooClb\",\n    type=\"public\",\n    subnet_id=foo_subnet.id,\n    load_balancer_spec=\"small_1\",\n    description=\"acc0Demo\",\n    load_balancer_name=\"acc-test-create\",\n    eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n        isp=\"BGP\",\n        eip_billing_type=\"PostPaidByBandwidth\",\n        bandwidth=1,\n    ))\nfoo_server_group = volcengine.clb.ServerGroup(\"fooServerGroup\",\n    load_balancer_id=foo_clb.id,\n    server_group_name=\"acc-test-create\",\n    description=\"hello demo11\")\nfoo_security_group = volcengine.vpc.SecurityGroup(\"fooSecurityGroup\",\n    vpc_id=foo_vpc.id,\n    security_group_name=\"acc-test-security-group\")\nfoo_instance = volcengine.ecs.Instance(\"fooInstance\",\n    image_id=\"image-ycjwwciuzy5pkh54xx8f\",\n    instance_type=\"ecs.c3i.large\",\n    instance_name=\"acc-test-ecs-name\",\n    password=\"93f0cb0614Aab12\",\n    instance_charge_type=\"PostPaid\",\n    system_volume_type=\"ESSD_PL0\",\n    system_volume_size=40,\n    subnet_id=foo_subnet.id,\n    security_group_ids=[foo_security_group.id])\nfoo_server_group_server = volcengine.clb.ServerGroupServer(\"fooServerGroupServer\",\n    server_group_id=foo_server_group.id,\n    instance_id=foo_instance.id,\n    type=\"ecs\",\n    weight=100,\n    port=80,\n    description=\"This is a acc test server\")\nfoo_server_group_servers = volcengine.clb.server_group_servers_output(ids=[pulumi.Output.all(foo_server_group_server.id.apply(lambda id: id.split(\":\")), len(foo_server_group_server.id.apply(lambda id: id.split(\":\")))).apply(lambda split, length: split[length - 1])],\n    server_group_id=foo_server_group.id)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooClb = new Volcengine.Clb.Clb(\"fooClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"public\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc0Demo\",\n            LoadBalancerName = \"acc-test-create\",\n            EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n            {\n                Isp = \"BGP\",\n                EipBillingType = \"PostPaidByBandwidth\",\n                Bandwidth = 1,\n            },\n        });\n        var fooServerGroup = new Volcengine.Clb.ServerGroup(\"fooServerGroup\", new Volcengine.Clb.ServerGroupArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ServerGroupName = \"acc-test-create\",\n            Description = \"hello demo11\",\n        });\n        var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup(\"fooSecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            VpcId = fooVpc.Id,\n            SecurityGroupName = \"acc-test-security-group\",\n        });\n        var fooInstance = new Volcengine.Ecs.Instance(\"fooInstance\", new Volcengine.Ecs.InstanceArgs\n        {\n            ImageId = \"image-ycjwwciuzy5pkh54xx8f\",\n            InstanceType = \"ecs.c3i.large\",\n            InstanceName = \"acc-test-ecs-name\",\n            Password = \"93f0cb0614Aab12\",\n            InstanceChargeType = \"PostPaid\",\n            SystemVolumeType = \"ESSD_PL0\",\n            SystemVolumeSize = 40,\n            SubnetId = fooSubnet.Id,\n            SecurityGroupIds = \n            {\n                fooSecurityGroup.Id,\n            },\n        });\n        var fooServerGroupServer = new Volcengine.Clb.ServerGroupServer(\"fooServerGroupServer\", new Volcengine.Clb.ServerGroupServerArgs\n        {\n            ServerGroupId = fooServerGroup.Id,\n            InstanceId = fooInstance.Id,\n            Type = \"ecs\",\n            Weight = 100,\n            Port = 80,\n            Description = \"This is a acc test server\",\n        });\n        var fooServerGroupServers = Volcengine.Clb.ServerGroupServers.Invoke(new Volcengine.Clb.ServerGroupServersInvokeArgs\n        {\n            Ids = \n            {\n                Output.Tuple(fooServerGroupServer.Id.Apply(id =\u003e id.Split(\":\")), fooServerGroupServer.Id.Apply(id =\u003e id.Split(\":\")).Length).Apply(values =\u003e\n                {\n                    var split = values.Item1;\n                    var length = values.Item2;\n                    return split[length - 1];\n                }),\n            },\n            ServerGroupId = fooServerGroup.Id,\n        });\n    }\n\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooClb = new Clb(\"fooClb\", ClbArgs.builder()        \n            .type(\"public\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc0Demo\")\n            .loadBalancerName(\"acc-test-create\")\n            .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                .isp(\"BGP\")\n                .eipBillingType(\"PostPaidByBandwidth\")\n                .bandwidth(1)\n                .build())\n            .build());\n\n        var fooServerGroup = new ServerGroup(\"fooServerGroup\", ServerGroupArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .serverGroupName(\"acc-test-create\")\n            .description(\"hello demo11\")\n            .build());\n\n        var fooSecurityGroup = new SecurityGroup(\"fooSecurityGroup\", SecurityGroupArgs.builder()        \n            .vpcId(fooVpc.id())\n            .securityGroupName(\"acc-test-security-group\")\n            .build());\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .imageId(\"image-ycjwwciuzy5pkh54xx8f\")\n            .instanceType(\"ecs.c3i.large\")\n            .instanceName(\"acc-test-ecs-name\")\n            .password(\"93f0cb0614Aab12\")\n            .instanceChargeType(\"PostPaid\")\n            .systemVolumeType(\"ESSD_PL0\")\n            .systemVolumeSize(40)\n            .subnetId(fooSubnet.id())\n            .securityGroupIds(fooSecurityGroup.id())\n            .build());\n\n        var fooServerGroupServer = new ServerGroupServer(\"fooServerGroupServer\", ServerGroupServerArgs.builder()        \n            .serverGroupId(fooServerGroup.id())\n            .instanceId(fooInstance.id())\n            .type(\"ecs\")\n            .weight(100)\n            .port(80)\n            .description(\"This is a acc test server\")\n            .build());\n\n        final var fooServerGroupServers = ClbFunctions.ServerGroupServers(Map.ofEntries(\n            Map.entry(\"ids\", Output.tuple(fooServerGroupServer.id().apply(id -\u003e id.split(\":\")), fooServerGroupServer.id().apply(id -\u003e id.split(\":\")).length()).apply(values -\u003e {\n                var split = values.t1;\n                var length = values.t2;\n                return split[length - 1];\n            })),\n            Map.entry(\"serverGroupId\", fooServerGroup.id())\n        ));\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ServerGroupServers.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of ServerGroupServer IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of ServerGroupServer.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "serverGroupId": {
                        "type": "string",
                        "description": "The ID of the ServerGroup.\n"
                    }
                },
                "type": "object",
                "required": [
                    "serverGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ServerGroupServers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "serverGroupId": {
                        "type": "string"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/ServerGroupServersServer:ServerGroupServersServer"
                        },
                        "description": "The server list of ServerGroup.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of ServerGroupServer query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "serverGroupId",
                    "servers",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:clb/serverGroups:ServerGroups": {
            "description": "Use this data source to query detailed information of server groups\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooClb = new volcengine.clb.Clb(\"fooClb\", {\n    type: \"public\",\n    subnetId: fooSubnet.id,\n    loadBalancerSpec: \"small_1\",\n    description: \"acc0Demo\",\n    loadBalancerName: \"acc-test-create\",\n    eipBillingConfig: {\n        isp: \"BGP\",\n        eipBillingType: \"PostPaidByBandwidth\",\n        bandwidth: 1,\n    },\n});\nconst fooServerGroup = new volcengine.clb.ServerGroup(\"fooServerGroup\", {\n    loadBalancerId: fooClb.id,\n    serverGroupName: \"acc-test-create\",\n    description: \"hello demo11\",\n});\nconst fooServerGroups = volcengine.clb.ServerGroupsOutput({\n    ids: [fooServerGroup.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_clb = volcengine.clb.Clb(\"fooClb\",\n    type=\"public\",\n    subnet_id=foo_subnet.id,\n    load_balancer_spec=\"small_1\",\n    description=\"acc0Demo\",\n    load_balancer_name=\"acc-test-create\",\n    eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(\n        isp=\"BGP\",\n        eip_billing_type=\"PostPaidByBandwidth\",\n        bandwidth=1,\n    ))\nfoo_server_group = volcengine.clb.ServerGroup(\"fooServerGroup\",\n    load_balancer_id=foo_clb.id,\n    server_group_name=\"acc-test-create\",\n    description=\"hello demo11\")\nfoo_server_groups = volcengine.clb.server_groups_output(ids=[foo_server_group.id])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooClb = new Volcengine.Clb.Clb(\"fooClb\", new Volcengine.Clb.ClbArgs\n        {\n            Type = \"public\",\n            SubnetId = fooSubnet.Id,\n            LoadBalancerSpec = \"small_1\",\n            Description = \"acc0Demo\",\n            LoadBalancerName = \"acc-test-create\",\n            EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs\n            {\n                Isp = \"BGP\",\n                EipBillingType = \"PostPaidByBandwidth\",\n                Bandwidth = 1,\n            },\n        });\n        var fooServerGroup = new Volcengine.Clb.ServerGroup(\"fooServerGroup\", new Volcengine.Clb.ServerGroupArgs\n        {\n            LoadBalancerId = fooClb.Id,\n            ServerGroupName = \"acc-test-create\",\n            Description = \"hello demo11\",\n        });\n        var fooServerGroups = Volcengine.Clb.ServerGroups.Invoke(new Volcengine.Clb.ServerGroupsInvokeArgs\n        {\n            Ids = \n            {\n                fooServerGroup.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooZones, err := ecs.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpc, err := vpc.NewVpc(ctx, \"fooVpc\", \u0026vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"acc-test-vpc\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"acc-test-subnet\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.0.0/24\"),\n\t\t\tZoneId:     pulumi.String(fooZones.Zones[0].Id),\n\t\t\tVpcId:      fooVpc.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooClb, err := clb.NewClb(ctx, \"fooClb\", \u0026clb.ClbArgs{\n\t\t\tType:             pulumi.String(\"public\"),\n\t\t\tSubnetId:         fooSubnet.ID(),\n\t\t\tLoadBalancerSpec: pulumi.String(\"small_1\"),\n\t\t\tDescription:      pulumi.String(\"acc0Demo\"),\n\t\t\tLoadBalancerName: pulumi.String(\"acc-test-create\"),\n\t\t\tEipBillingConfig: \u0026clb.ClbEipBillingConfigArgs{\n\t\t\t\tIsp:            pulumi.String(\"BGP\"),\n\t\t\t\tEipBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\tBandwidth:      pulumi.Int(1),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooServerGroup, err := clb.NewServerGroup(ctx, \"fooServerGroup\", \u0026clb.ServerGroupArgs{\n\t\t\tLoadBalancerId:  fooClb.ID(),\n\t\t\tServerGroupName: pulumi.String(\"acc-test-create\"),\n\t\t\tDescription:     pulumi.String(\"hello demo11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = clb.ServerGroupsOutput(ctx, clb.ServerGroupsOutputArgs{\n\t\t\tIds: pulumi.StringArray{\n\t\t\t\tfooServerGroup.ID(),\n\t\t\t},\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooClb = new Clb(\"fooClb\", ClbArgs.builder()        \n            .type(\"public\")\n            .subnetId(fooSubnet.id())\n            .loadBalancerSpec(\"small_1\")\n            .description(\"acc0Demo\")\n            .loadBalancerName(\"acc-test-create\")\n            .eipBillingConfig(ClbEipBillingConfigArgs.builder()\n                .isp(\"BGP\")\n                .eipBillingType(\"PostPaidByBandwidth\")\n                .bandwidth(1)\n                .build())\n            .build());\n\n        var fooServerGroup = new ServerGroup(\"fooServerGroup\", ServerGroupArgs.builder()        \n            .loadBalancerId(fooClb.id())\n            .serverGroupName(\"acc-test-create\")\n            .description(\"hello demo11\")\n            .build());\n\n        final var fooServerGroups = ClbFunctions.ServerGroups(Map.of(\"ids\", fooServerGroup.id()));\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpc:\n    type: volcengine:vpc:Vpc\n    properties:\n      vpcName: acc-test-vpc\n      cidrBlock: 172.16.0.0/16\n  fooSubnet:\n    type: volcengine:vpc:Subnet\n    properties:\n      subnetName: acc-test-subnet\n      cidrBlock: 172.16.0.0/24\n      zoneId: ${fooZones.zones[0].id}\n      vpcId: ${fooVpc.id}\n  fooClb:\n    type: volcengine:clb:Clb\n    properties:\n      type: public\n      subnetId: ${fooSubnet.id}\n      loadBalancerSpec: small_1\n      description: acc0Demo\n      loadBalancerName: acc-test-create\n      eipBillingConfig:\n        isp: BGP\n        eipBillingType: PostPaidByBandwidth\n        bandwidth: 1\n  fooServerGroup:\n    type: volcengine:clb:ServerGroup\n    properties:\n      loadBalancerId: ${fooClb.id}\n      serverGroupName: acc-test-create\n      description: hello demo11\nvariables:\n  fooZones:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments: {}\n  fooServerGroups:\n    Fn::Invoke:\n      Function: volcengine:clb:ServerGroups\n      Arguments:\n        ids:\n          - ${fooServerGroup.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ServerGroups.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of ServerGroup IDs.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The id of the Clb.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of ServerGroup.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "serverGroupName": {
                        "type": "string",
                        "description": "The name of the ServerGroup.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by ServerGroups.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/ServerGroupsGroup:ServerGroupsGroup"
                        },
                        "description": "The collection of ServerGroup query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "loadBalancerId": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "serverGroupName": {
                        "type": "string",
                        "description": "The name of the ServerGroup.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of ServerGroup query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:clb/zones:Zones": {
            "description": "Use this data source to query detailed information of clb zones\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultZones = pulumi.output(volcengine.clb.Zones());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.clb.zones()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Clb.Zones.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := clb.Zones(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ClbFunctions.Zones();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:clb:Zones\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Zones.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Zones.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "masterZones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:clb/ZonesMasterZone:ZonesMasterZone"
                        },
                        "description": "The master zones list.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of zone query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "masterZones",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cr/authorizationTokens:AuthorizationTokens": {
            "description": "Use this data source to query detailed information of cr authorization tokens\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cr.AuthorizationTokens({\n    registry: \"tf-1\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.authorization_tokens(registry=\"tf-1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cr.AuthorizationTokens.InvokeAsync(new Volcengine.Cr.AuthorizationTokensArgs\n        {\n            Registry = \"tf-1\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.AuthorizationTokens(ctx, \u0026cr.AuthorizationTokensArgs{\n\t\t\tRegistry: \"tf-1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CrFunctions.AuthorizationTokens();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cr:AuthorizationTokens\n      Arguments:\n        registry: tf-1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking AuthorizationTokens.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The cr instance name want to query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "registry"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by AuthorizationTokens.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "tokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/AuthorizationTokensToken:AuthorizationTokensToken"
                        },
                        "description": "The collection of users.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of instance query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "registry",
                    "tokens",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cr/endpoints:Endpoints": {
            "description": "Use this data source to query detailed information of cr endpoints\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cr.Endpoints({\n    registry: \"tf-1\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.endpoints(registry=\"tf-1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cr.Endpoints.InvokeAsync(new Volcengine.Cr.EndpointsArgs\n        {\n            Registry = \"tf-1\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.Endpoints(ctx, \u0026cr.EndpointsArgs{\n\t\t\tRegistry: \"tf-1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CrFunctions.Endpoints();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cr:Endpoints\n      Arguments:\n        registry: tf-1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Endpoints.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The CR instance name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "registry"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Endpoints.\n",
                "properties": {
                    "endpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/EndpointsEndpoint:EndpointsEndpoint"
                        },
                        "description": "The collection of endpoint query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The name of CR instance.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of tag query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "endpoints",
                    "registry",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cr/namespaces:Namespaces": {
            "description": "Use this data source to query detailed information of cr namespaces\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cr.Namespaces({\n    names: [\"namespace-*\"],\n    registry: \"tf-1\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.namespaces(names=[\"namespace-*\"],\n    registry=\"tf-1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cr.Namespaces.InvokeAsync(new Volcengine.Cr.NamespacesArgs\n        {\n            Names = \n            {\n                \"namespace-*\",\n            },\n            Registry = \"tf-1\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.Namespaces(ctx, \u0026cr.NamespacesArgs{\n\t\t\tNames: []string{\n\t\t\t\t\"namespace-*\",\n\t\t\t},\n\t\t\tRegistry: \"tf-1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CrFunctions.Namespaces();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cr:Namespaces\n      Arguments:\n        names:\n          - namespace-*\n        registry: tf-1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Namespaces.\n",
                "properties": {
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of instance IDs.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The target cr instance name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "registry"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Namespaces.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "namespaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/NamespacesNamespace:NamespacesNamespace"
                        },
                        "description": "The collection of namespaces query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of instance query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "namespaces",
                    "registry",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cr/registries:Registries": {
            "description": "Use this data source to query detailed information of cr registries\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cr.Registries({\n    // names=[\"liaoliuqing-prune-test\"]\n    // types=[\"Enterprise\"]\n    statuses: [{\n        condition: \"Ok\",\n        phase: \"Running\",\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.registries(statuses=[volcengine.cr.RegistriesStatusArgs(\n    condition=\"Ok\",\n    phase=\"Running\",\n)])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cr.Registries.InvokeAsync(new Volcengine.Cr.RegistriesArgs\n        {\n            Statuses = \n            {\n                new Volcengine.Cr.Inputs.RegistriesStatusArgs\n                {\n                    Condition = \"Ok\",\n                    Phase = \"Running\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.Registries(ctx, \u0026cr.RegistriesArgs{\n\t\t\tStatuses: []cr.RegistriesStatus{\n\t\t\t\tcr.RegistriesStatus{\n\t\t\t\t\tCondition: pulumi.StringRef(\"Ok\"),\n\t\t\t\t\tPhase:     pulumi.StringRef(\"Running\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CrFunctions.Registries();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cr:Registries\n      Arguments:\n        statuses:\n          - condition: Ok\n            phase: Running\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Registries.\n",
                "properties": {
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of registry names to query.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/RegistriesStatus:RegistriesStatus"
                        },
                        "description": "The list of registry statuses.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of registry types to query.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Registries.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/RegistriesRegistry:RegistriesRegistry"
                        },
                        "description": "The collection of registry query.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/RegistriesStatus:RegistriesStatus"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of registry query.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "registries",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cr/repositories:Repositories": {
            "description": "Use this data source to query detailed information of cr repositories\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cr.Repositories({\n    // access_levels = [\"Private\"]\n    // namespaces = [\"namespace*\"]\n    names: [\"repo*\"],\n    registry: \"tf-1\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.repositories(names=[\"repo*\"],\n    registry=\"tf-1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cr.Repositories.InvokeAsync(new Volcengine.Cr.RepositoriesArgs\n        {\n            Names = \n            {\n                \"repo*\",\n            },\n            Registry = \"tf-1\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.Repositories(ctx, \u0026cr.RepositoriesArgs{\n\t\t\tNames: []string{\n\t\t\t\t\"repo*\",\n\t\t\t},\n\t\t\tRegistry: \"tf-1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CrFunctions.Repositories();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cr:Repositories\n      Arguments:\n        names:\n          - repo*\n        registry: tf-1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Repositories.\n",
                "properties": {
                    "accessLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of instance access level.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of instance names.\n"
                    },
                    "namespaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of instance namespace.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The CR instance name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "registry"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Repositories.\n",
                "properties": {
                    "accessLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "namespaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/RepositoriesRepository:RepositoriesRepository"
                        },
                        "description": "The collection of repository query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of instance query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "registry",
                    "repositories",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cr/tags:Tags": {
            "description": "Use this data source to query detailed information of cr tags\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.cr.Tags({\n    namespace: \"test\",\n    registry: \"enterprise-1\",\n    repository: \"repo\",\n    types: [\"Image\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.cr.tags(namespace=\"test\",\n    registry=\"enterprise-1\",\n    repository=\"repo\",\n    types=[\"Image\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Cr.Tags.InvokeAsync(new Volcengine.Cr.TagsArgs\n        {\n            Namespace = \"test\",\n            Registry = \"enterprise-1\",\n            Repository = \"repo\",\n            Types = \n            {\n                \"Image\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.Tags(ctx, \u0026cr.TagsArgs{\n\t\t\tNamespace:  \"test\",\n\t\t\tRegistry:   \"enterprise-1\",\n\t\t\tRepository: \"repo\",\n\t\t\tTypes: []string{\n\t\t\t\t\"Image\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = CrFunctions.Tags();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:cr:Tags\n      Arguments:\n        namespace: test\n        registry: enterprise-1\n        repository: repo\n        types:\n          - Image\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Tags.\n",
                "properties": {
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of instance names.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The CR namespace.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The CR instance name.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository name.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of OCI product tag type.\n"
                    }
                },
                "type": "object",
                "required": [
                    "namespace",
                    "registry",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Tags.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/TagsTag:TagsTag"
                        },
                        "description": "The collection of repository query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of tag query.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "namespace",
                    "registry",
                    "repository",
                    "tags",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:cr/vpcEndpoints:VpcEndpoints": {
            "description": "Use this data source to query detailed information of cr vpc endpoints\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultVpcEndpoints = pulumi.output(volcengine.cr.VpcEndpoints({\n    registry: \"enterprise-1\",\n    statuses: [\n        \"Enabled\",\n        \"Enabling\",\n        \"Disabling\",\n        \"Failed\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.cr.vpc_endpoints(registry=\"enterprise-1\",\n    statuses=[\n        \"Enabled\",\n        \"Enabling\",\n        \"Disabling\",\n        \"Failed\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Cr.VpcEndpoints.InvokeAsync(new Volcengine.Cr.VpcEndpointsArgs\n        {\n            Registry = \"enterprise-1\",\n            Statuses = \n            {\n                \"Enabled\",\n                \"Enabling\",\n                \"Disabling\",\n                \"Failed\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/cr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cr.VpcEndpoints(ctx, \u0026cr.VpcEndpointsArgs{\n\t\t\tRegistry: \"enterprise-1\",\n\t\t\tStatuses: []string{\n\t\t\t\t\"Enabled\",\n\t\t\t\t\"Enabling\",\n\t\t\t\t\"Disabling\",\n\t\t\t\t\"Failed\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = CrFunctions.VpcEndpoints();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:cr:VpcEndpoints\n      Arguments:\n        registry: enterprise-1\n        statuses:\n          - Enabled\n          - Enabling\n          - Disabling\n          - Failed\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking VpcEndpoints.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The CR registry name.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "VPC access entry state array, used to filter out VPC access entries in the specified state. Available values are Enabling, Enabled, Disabling, Failed.\n"
                    }
                },
                "type": "object",
                "required": [
                    "registry"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by VpcEndpoints.\n",
                "properties": {
                    "endpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:cr/VpcEndpointsEndpoint:VpcEndpointsEndpoint"
                        },
                        "description": "List of CR vpc endpoints.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The name of CR registry.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of CR vpc endpoints query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "endpoints",
                    "registry",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:ebs/volumes:Volumes": {
            "description": "Use this data source to query detailed information of volumes\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultVolumes = pulumi.output(volcengine.ebs.Volumes({\n    ids: [\"vol-3tzg6y5imn3b9fchkedb\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.ebs.volumes(ids=[\"vol-3tzg6y5imn3b9fchkedb\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Ebs.Volumes.InvokeAsync(new Volcengine.Ebs.VolumesArgs\n        {\n            Ids = \n            {\n                \"vol-3tzg6y5imn3b9fchkedb\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ebs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ebs.Volumes(ctx, \u0026ebs.VolumesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"vol-3tzg6y5imn3b9fchkedb\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = EbsFunctions.Volumes();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:ebs:Volumes\n      Arguments:\n        ids:\n          - vol-3tzg6y5imn3b9fchkedb\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Volumes.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Volume IDs.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The Id of instance.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The Kind of Volume.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Volume.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "volumeName": {
                        "type": "string",
                        "description": "The name of Volume.\n"
                    },
                    "volumeStatus": {
                        "type": "string",
                        "description": "The Status of Volume, the value can be `available` or `attaching` or `attached` or `detaching` or `creating` or `deleting` or `error` or `extending`.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "The type of Volume.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The Id of Zone.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Volumes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Volume query.\n"
                    },
                    "volumeName": {
                        "type": "string"
                    },
                    "volumeStatus": {
                        "type": "string"
                    },
                    "volumeType": {
                        "type": "string"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ebs/VolumesVolume:VolumesVolume"
                        },
                        "description": "The collection of Volume query.\n"
                    },
                    "zoneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "volumes",
                    "id"
                ]
            }
        },
        "volcengine:ecs/deploymentSets:DeploymentSets": {
            "description": "Use this data source to query detailed information of ecs deployment sets\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooDeploymentSet: volcengine.ecs.DeploymentSet[];\nfor (const range = {value: 0}; range.value \u003c 3; range.value++) {\n    fooDeploymentSet.push(new volcengine.ecs.DeploymentSet(`fooDeploymentSet-${range.value}`, {\n        deploymentSetName: `acc-test-ecs-ds-${range.value}`,\n        description: \"acc-test\",\n        granularity: \"switch\",\n        strategy: \"Availability\",\n    }));\n}\nconst fooDeploymentSets = volcengine.ecs.DeploymentSetsOutput({\n    granularity: \"switch\",\n    ids: fooDeploymentSet.map(__item =\u003e __item.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_deployment_set = []\nfor range in [{\"value\": i} for i in range(0, 3)]:\n    foo_deployment_set.append(volcengine.ecs.DeploymentSet(f\"fooDeploymentSet-{range['value']}\",\n        deployment_set_name=f\"acc-test-ecs-ds-{range['value']}\",\n        description=\"acc-test\",\n        granularity=\"switch\",\n        strategy=\"Availability\"))\nfoo_deployment_sets = volcengine.ecs.deployment_sets_output(granularity=\"switch\",\n    ids=[__item.id for __item in foo_deployment_set])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooDeploymentSet = new List\u003cVolcengine.Ecs.DeploymentSet\u003e();\n        for (var rangeIndex = 0; rangeIndex \u003c 3; rangeIndex++)\n        {\n            var range = new { Value = rangeIndex };\n            fooDeploymentSet.Add(new Volcengine.Ecs.DeploymentSet($\"fooDeploymentSet-{range.Value}\", new Volcengine.Ecs.DeploymentSetArgs\n            {\n                DeploymentSetName = $\"acc-test-ecs-ds-{range.Value}\",\n                Description = \"acc-test\",\n                Granularity = \"switch\",\n                Strategy = \"Availability\",\n            }));\n        }\n        var fooDeploymentSets = Volcengine.Ecs.DeploymentSets.Invoke(new Volcengine.Ecs.DeploymentSetsInvokeArgs\n        {\n            Granularity = \"switch\",\n            Ids = fooDeploymentSet.Select(__item =\u003e __item.Id).ToList(),\n        });\n    }\n\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport com.pulumi.codegen.internal.KeyedValue;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        for (var i = 0; i \u003c 3; i++) {\n            new DeploymentSet(\"fooDeploymentSet-\" + i, DeploymentSetArgs.builder()            \n                .deploymentSetName(String.format(\"acc-test-ecs-ds-%s\", range.value()))\n                .description(\"acc-test\")\n                .granularity(\"switch\")\n                .strategy(\"Availability\")\n                .build());\n\n        \n}\n        final var fooDeploymentSets = EcsFunctions.DeploymentSets(Map.ofEntries(\n            Map.entry(\"granularity\", \"switch\"),\n            Map.entry(\"ids\", fooDeploymentSet.stream().map(element -\u003e element.id()).collect(toList()))\n        ));\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking DeploymentSets.\n",
                "properties": {
                    "granularity": {
                        "type": "string",
                        "description": "The granularity of ECS DeploymentSet.Valid values: switch, host, rack.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of ECS DeploymentSet IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of ECS DeploymentSet.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by DeploymentSets.\n",
                "properties": {
                    "deploymentSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/DeploymentSetsDeploymentSet:DeploymentSetsDeploymentSet"
                        },
                        "description": "The collection of ECS DeploymentSet query.\n"
                    },
                    "granularity": {
                        "type": "string",
                        "description": "The granularity of ECS DeploymentSet.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of ECS DeploymentSet query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deploymentSets",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:ecs/images:Images": {
            "description": "Use this data source to query detailed information of images\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.ecs.Images({\n    instanceTypeId: \"ecs.g1.large\",\n    osType: \"Linux\",\n    visibility: \"public\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.ecs.images(instance_type_id=\"ecs.g1.large\",\n    os_type=\"Linux\",\n    visibility=\"public\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Ecs.Images.InvokeAsync(new Volcengine.Ecs.ImagesArgs\n        {\n            InstanceTypeId = \"ecs.g1.large\",\n            OsType = \"Linux\",\n            Visibility = \"public\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ecs.Images(ctx, \u0026ecs.ImagesArgs{\n\t\t\tInstanceTypeId: pulumi.StringRef(\"ecs.g1.large\"),\n\t\t\tOsType:         pulumi.StringRef(\"Linux\"),\n\t\t\tVisibility:     pulumi.StringRef(\"public\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = EcsFunctions.Images();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:ecs:Images\n      Arguments:\n        instanceTypeId: ecs.g1.large\n        osType: Linux\n        visibility: public\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Images.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Image IDs.\n"
                    },
                    "instanceTypeId": {
                        "type": "string",
                        "description": "The specification of  Instance.\n"
                    },
                    "isSupportCloudInit": {
                        "type": "boolean",
                        "description": "Whether the Image support cloud-init.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Image.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "The operating system type of Image.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Image status, the value can be `available` or `creating` or `error`.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The visibility of Image.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Images.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/ImagesImage:ImagesImage"
                        },
                        "description": "The collection of Image query.\n"
                    },
                    "instanceTypeId": {
                        "type": "string"
                    },
                    "isSupportCloudInit": {
                        "type": "boolean",
                        "description": "Whether the Image support cloud-init.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "osType": {
                        "type": "string",
                        "description": "The operating system type of Image.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The status of Image.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Image query.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The visibility of Image.\n"
                    }
                },
                "type": "object",
                "required": [
                    "images",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:ecs/instances:Instances": {
            "description": "Use this data source to query detailed information of ecs instances\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooZones = volcengine.ecs.Zones({});\nconst fooVpc = new volcengine.vpc.Vpc(\"fooVpc\", {\n    vpcName: \"acc-test-vpc\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst fooSubnet = new volcengine.vpc.Subnet(\"fooSubnet\", {\n    subnetName: \"acc-test-subnet\",\n    cidrBlock: \"172.16.0.0/24\",\n    zoneId: fooZones.then(fooZones =\u003e fooZones.zones?[0]?.id),\n    vpcId: fooVpc.id,\n});\nconst fooSecurityGroup = new volcengine.vpc.SecurityGroup(\"fooSecurityGroup\", {\n    securityGroupName: \"acc-test-security-group\",\n    vpcId: fooVpc.id,\n});\nconst fooImages = volcengine.ecs.Images({\n    osType: \"Linux\",\n    visibility: \"public\",\n    instanceTypeId: \"ecs.g1.large\",\n});\nconst fooInstance: volcengine.ecs.Instance[];\nfor (const range = {value: 0}; range.value \u003c 2; range.value++) {\n    fooInstance.push(new volcengine.ecs.Instance(`fooInstance-${range.value}`, {\n        instanceName: `acc-test-ecs-${range.value}`,\n        description: \"acc-test\",\n        hostName: \"tf-acc-test\",\n        imageId: fooImages.then(fooImages =\u003e fooImages.images?[0]?.imageId),\n        instanceType: \"ecs.g1.large\",\n        password: \"93f0cb0614Aab12\",\n        instanceChargeType: \"PostPaid\",\n        systemVolumeType: \"ESSD_PL0\",\n        systemVolumeSize: 40,\n        dataVolumes: [{\n            volumeType: \"ESSD_PL0\",\n            size: 50,\n            deleteWithInstance: true,\n        }],\n        subnetId: fooSubnet.id,\n        securityGroupIds: [fooSecurityGroup.id],\n        projectName: \"default\",\n        tags: [{\n            key: \"k1\",\n            value: \"v1\",\n        }],\n    }));\n}\nconst fooInstances = volcengine.ecs.InstancesOutput({\n    ids: fooInstance.map(__item =\u003e __item.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_zones = volcengine.ecs.zones()\nfoo_vpc = volcengine.vpc.Vpc(\"fooVpc\",\n    vpc_name=\"acc-test-vpc\",\n    cidr_block=\"172.16.0.0/16\")\nfoo_subnet = volcengine.vpc.Subnet(\"fooSubnet\",\n    subnet_name=\"acc-test-subnet\",\n    cidr_block=\"172.16.0.0/24\",\n    zone_id=foo_zones.zones[0].id,\n    vpc_id=foo_vpc.id)\nfoo_security_group = volcengine.vpc.SecurityGroup(\"fooSecurityGroup\",\n    security_group_name=\"acc-test-security-group\",\n    vpc_id=foo_vpc.id)\nfoo_images = volcengine.ecs.images(os_type=\"Linux\",\n    visibility=\"public\",\n    instance_type_id=\"ecs.g1.large\")\nfoo_instance = []\nfor range in [{\"value\": i} for i in range(0, 2)]:\n    foo_instance.append(volcengine.ecs.Instance(f\"fooInstance-{range['value']}\",\n        instance_name=f\"acc-test-ecs-{range['value']}\",\n        description=\"acc-test\",\n        host_name=\"tf-acc-test\",\n        image_id=foo_images.images[0].image_id,\n        instance_type=\"ecs.g1.large\",\n        password=\"93f0cb0614Aab12\",\n        instance_charge_type=\"PostPaid\",\n        system_volume_type=\"ESSD_PL0\",\n        system_volume_size=40,\n        data_volumes=[volcengine.ecs.InstanceDataVolumeArgs(\n            volume_type=\"ESSD_PL0\",\n            size=50,\n            delete_with_instance=True,\n        )],\n        subnet_id=foo_subnet.id,\n        security_group_ids=[foo_security_group.id],\n        project_name=\"default\",\n        tags=[volcengine.ecs.InstanceTagArgs(\n            key=\"k1\",\n            value=\"v1\",\n        )]))\nfoo_instances = volcengine.ecs.instances_output(ids=[__item.id for __item in foo_instance])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());\n        var fooVpc = new Volcengine.Vpc.Vpc(\"fooVpc\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"acc-test-vpc\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var fooSubnet = new Volcengine.Vpc.Subnet(\"fooSubnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"acc-test-subnet\",\n            CidrBlock = \"172.16.0.0/24\",\n            ZoneId = fooZones.Apply(fooZones =\u003e fooZones.Zones?[0]?.Id),\n            VpcId = fooVpc.Id,\n        });\n        var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup(\"fooSecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            SecurityGroupName = \"acc-test-security-group\",\n            VpcId = fooVpc.Id,\n        });\n        var fooImages = Output.Create(Volcengine.Ecs.Images.InvokeAsync(new Volcengine.Ecs.ImagesArgs\n        {\n            OsType = \"Linux\",\n            Visibility = \"public\",\n            InstanceTypeId = \"ecs.g1.large\",\n        }));\n        var fooInstance = new List\u003cVolcengine.Ecs.Instance\u003e();\n        for (var rangeIndex = 0; rangeIndex \u003c 2; rangeIndex++)\n        {\n            var range = new { Value = rangeIndex };\n            fooInstance.Add(new Volcengine.Ecs.Instance($\"fooInstance-{range.Value}\", new Volcengine.Ecs.InstanceArgs\n            {\n                InstanceName = $\"acc-test-ecs-{range.Value}\",\n                Description = \"acc-test\",\n                HostName = \"tf-acc-test\",\n                ImageId = fooImages.Apply(fooImages =\u003e fooImages.Images?[0]?.ImageId),\n                InstanceType = \"ecs.g1.large\",\n                Password = \"93f0cb0614Aab12\",\n                InstanceChargeType = \"PostPaid\",\n                SystemVolumeType = \"ESSD_PL0\",\n                SystemVolumeSize = 40,\n                DataVolumes = \n                {\n                    new Volcengine.Ecs.Inputs.InstanceDataVolumeArgs\n                    {\n                        VolumeType = \"ESSD_PL0\",\n                        Size = 50,\n                        DeleteWithInstance = true,\n                    },\n                },\n                SubnetId = fooSubnet.Id,\n                SecurityGroupIds = \n                {\n                    fooSecurityGroup.Id,\n                },\n                ProjectName = \"default\",\n                Tags = \n                {\n                    new Volcengine.Ecs.Inputs.InstanceTagArgs\n                    {\n                        Key = \"k1\",\n                        Value = \"v1\",\n                    },\n                },\n            }));\n        }\n        var fooInstances = Volcengine.Ecs.Instances.Invoke(new Volcengine.Ecs.InstancesInvokeArgs\n        {\n            Ids = fooInstance.Select(__item =\u003e __item.Id).ToList(),\n        });\n    }\n\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport com.pulumi.codegen.internal.KeyedValue;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fooZones = EcsFunctions.Zones();\n\n        var fooVpc = new Vpc(\"fooVpc\", VpcArgs.builder()        \n            .vpcName(\"acc-test-vpc\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var fooSubnet = new Subnet(\"fooSubnet\", SubnetArgs.builder()        \n            .subnetName(\"acc-test-subnet\")\n            .cidrBlock(\"172.16.0.0/24\")\n            .zoneId(fooZones.zones()[0].id())\n            .vpcId(fooVpc.id())\n            .build());\n\n        var fooSecurityGroup = new SecurityGroup(\"fooSecurityGroup\", SecurityGroupArgs.builder()        \n            .securityGroupName(\"acc-test-security-group\")\n            .vpcId(fooVpc.id())\n            .build());\n\n        final var fooImages = EcsFunctions.Images();\n\n        for (var i = 0; i \u003c 2; i++) {\n            new Instance(\"fooInstance-\" + i, InstanceArgs.builder()            \n                .instanceName(String.format(\"acc-test-ecs-%s\", range.value()))\n                .description(\"acc-test\")\n                .hostName(\"tf-acc-test\")\n                .imageId(fooImages.images()[0].imageId())\n                .instanceType(\"ecs.g1.large\")\n                .password(\"93f0cb0614Aab12\")\n                .instanceChargeType(\"PostPaid\")\n                .systemVolumeType(\"ESSD_PL0\")\n                .systemVolumeSize(40)\n                .dataVolumes(InstanceDataVolumeArgs.builder()\n                    .volumeType(\"ESSD_PL0\")\n                    .size(50)\n                    .deleteWithInstance(true)\n                    .build())\n                .subnetId(fooSubnet.id())\n                .securityGroupIds(fooSecurityGroup.id())\n                .projectName(\"default\")\n                .tags(InstanceTagArgs.builder()\n                    .key(\"k1\")\n                    .value(\"v1\")\n                    .build())\n                .build());\n\n        \n}\n        final var fooInstances = EcsFunctions.Instances(Map.of(\"ids\", fooInstance.stream().map(element -\u003e element.id()).collect(toList())));\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Instances.\n",
                "properties": {
                    "deploymentSetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of DeploymentSet IDs.\n"
                    },
                    "hpcClusterId": {
                        "type": "string",
                        "description": "The hpc cluster ID of ECS instance.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of ECS instance IDs.\n"
                    },
                    "instanceChargeType": {
                        "type": "string",
                        "description": "The charge type of ECS instance.\n"
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "The key pair name of ECS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of ECS instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "primaryIpAddress": {
                        "type": "string",
                        "description": "The primary ip address of ECS instance.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of ECS instance.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of ECS instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/InstancesTag:InstancesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC ID of ECS instance.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone ID of ECS instance.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Instances.\n",
                "properties": {
                    "deploymentSetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hpcClusterId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instanceChargeType": {
                        "type": "string",
                        "description": "The charge type of ECS instance.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/InstancesInstance:InstancesInstance"
                        },
                        "description": "The collection of ECS instance query.\n"
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "The ssh key name of ECS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "primaryIpAddress": {
                        "type": "string",
                        "description": "The private ip address of networkInterface.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of ECS instance.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of ECS instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/InstancesTag:InstancesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of ECS instance query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC ID of ECS instance.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone ID of ECS instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:ecs/keyPairs:KeyPairs": {
            "description": "Use this data source to query detailed information of ecs key pairs\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooKeyPair = new volcengine.ecs.KeyPair(\"fooKeyPair\", {\n    keyPairName: \"acc-test-key-name\",\n    description: \"acc-test\",\n});\nconst fooKeyPairs = volcengine.ecs.KeyPairsOutput({\n    keyPairName: fooKeyPair.keyPairName,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_key_pair = volcengine.ecs.KeyPair(\"fooKeyPair\",\n    key_pair_name=\"acc-test-key-name\",\n    description=\"acc-test\")\nfoo_key_pairs = volcengine.ecs.key_pairs_output(key_pair_name=foo_key_pair.key_pair_name)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooKeyPair = new Volcengine.Ecs.KeyPair(\"fooKeyPair\", new Volcengine.Ecs.KeyPairArgs\n        {\n            KeyPairName = \"acc-test-key-name\",\n            Description = \"acc-test\",\n        });\n        var fooKeyPairs = Volcengine.Ecs.KeyPairs.Invoke(new Volcengine.Ecs.KeyPairsInvokeArgs\n        {\n            KeyPairName = fooKeyPair.KeyPairName,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooKeyPair, err := ecs.NewKeyPair(ctx, \"fooKeyPair\", \u0026ecs.KeyPairArgs{\n\t\t\tKeyPairName: pulumi.String(\"acc-test-key-name\"),\n\t\t\tDescription: pulumi.String(\"acc-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = ecs.KeyPairsOutput(ctx, ecs.KeyPairsOutputArgs{\n\t\t\tKeyPairName: fooKeyPair.KeyPairName,\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooKeyPair = new KeyPair(\"fooKeyPair\", KeyPairArgs.builder()        \n            .keyPairName(\"acc-test-key-name\")\n            .description(\"acc-test\")\n            .build());\n\n        final var fooKeyPairs = EcsFunctions.KeyPairs(Map.of(\"keyPairName\", fooKeyPair.keyPairName()));\n\n    }\n}\n```\n```yaml\nresources:\n  fooKeyPair:\n    type: volcengine:ecs:KeyPair\n    properties:\n      keyPairName: acc-test-key-name\n      description: acc-test\nvariables:\n  fooKeyPairs:\n    Fn::Invoke:\n      Function: volcengine:ecs:KeyPairs\n      Arguments:\n        keyPairName: ${fooKeyPair.keyPairName}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking KeyPairs.\n",
                "properties": {
                    "fingerPrint": {
                        "type": "string",
                        "description": "The finger print info.\n"
                    },
                    "keyPairIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Ids of key pair.\n"
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "Name of key pair.\n"
                    },
                    "keyPairNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Key pair names info.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of ECS key pairs.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by KeyPairs.\n",
                "properties": {
                    "fingerPrint": {
                        "type": "string",
                        "description": "The finger print info.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keyPairIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "The name of key pair.\n"
                    },
                    "keyPairNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "keyPairs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/KeyPairsKeyPair:KeyPairsKeyPair"
                        },
                        "description": "The target query key pairs info.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of ECS key pair query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "keyPairs",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:ecs/launchTemplates:LaunchTemplates": {
            "description": "Use this data source to query detailed information of ecs launch templates\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooLaunchTemplate = new volcengine.ecs.LaunchTemplate(\"fooLaunchTemplate\", {\n    description: \"acc-test-desc\",\n    eipBandwidth: 1,\n    eipBillingType: \"PostPaidByBandwidth\",\n    eipIsp: \"ChinaMobile\",\n    hostName: \"tf-host-name\",\n    hpcClusterId: \"hpcCluster-l8u24ovdmoab6opf\",\n    imageId: \"image-ycjwwciuzy5pkh54xx8f\",\n    instanceChargeType: \"PostPaid\",\n    instanceName: \"tf-acc-name\",\n    instanceTypeId: \"ecs.g1.large\",\n    keyPairName: \"tf-key-pair\",\n    launchTemplateName: \"tf-acc-template\",\n});\nconst fooLaunchTemplates = volcengine.ecs.LaunchTemplatesOutput({\n    ids: [fooLaunchTemplate.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_launch_template = volcengine.ecs.LaunchTemplate(\"fooLaunchTemplate\",\n    description=\"acc-test-desc\",\n    eip_bandwidth=1,\n    eip_billing_type=\"PostPaidByBandwidth\",\n    eip_isp=\"ChinaMobile\",\n    host_name=\"tf-host-name\",\n    hpc_cluster_id=\"hpcCluster-l8u24ovdmoab6opf\",\n    image_id=\"image-ycjwwciuzy5pkh54xx8f\",\n    instance_charge_type=\"PostPaid\",\n    instance_name=\"tf-acc-name\",\n    instance_type_id=\"ecs.g1.large\",\n    key_pair_name=\"tf-key-pair\",\n    launch_template_name=\"tf-acc-template\")\nfoo_launch_templates = volcengine.ecs.launch_templates_output(ids=[foo_launch_template.id])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooLaunchTemplate = new Volcengine.Ecs.LaunchTemplate(\"fooLaunchTemplate\", new Volcengine.Ecs.LaunchTemplateArgs\n        {\n            Description = \"acc-test-desc\",\n            EipBandwidth = 1,\n            EipBillingType = \"PostPaidByBandwidth\",\n            EipIsp = \"ChinaMobile\",\n            HostName = \"tf-host-name\",\n            HpcClusterId = \"hpcCluster-l8u24ovdmoab6opf\",\n            ImageId = \"image-ycjwwciuzy5pkh54xx8f\",\n            InstanceChargeType = \"PostPaid\",\n            InstanceName = \"tf-acc-name\",\n            InstanceTypeId = \"ecs.g1.large\",\n            KeyPairName = \"tf-key-pair\",\n            LaunchTemplateName = \"tf-acc-template\",\n        });\n        var fooLaunchTemplates = Volcengine.Ecs.LaunchTemplates.Invoke(new Volcengine.Ecs.LaunchTemplatesInvokeArgs\n        {\n            Ids = \n            {\n                fooLaunchTemplate.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooLaunchTemplate, err := ecs.NewLaunchTemplate(ctx, \"fooLaunchTemplate\", \u0026ecs.LaunchTemplateArgs{\n\t\t\tDescription:        pulumi.String(\"acc-test-desc\"),\n\t\t\tEipBandwidth:       pulumi.Int(1),\n\t\t\tEipBillingType:     pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\tEipIsp:             pulumi.String(\"ChinaMobile\"),\n\t\t\tHostName:           pulumi.String(\"tf-host-name\"),\n\t\t\tHpcClusterId:       pulumi.String(\"hpcCluster-l8u24ovdmoab6opf\"),\n\t\t\tImageId:            pulumi.String(\"image-ycjwwciuzy5pkh54xx8f\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tInstanceName:       pulumi.String(\"tf-acc-name\"),\n\t\t\tInstanceTypeId:     pulumi.String(\"ecs.g1.large\"),\n\t\t\tKeyPairName:        pulumi.String(\"tf-key-pair\"),\n\t\t\tLaunchTemplateName: pulumi.String(\"tf-acc-template\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = ecs.LaunchTemplatesOutput(ctx, ecs.LaunchTemplatesOutputArgs{\n\t\t\tIds: pulumi.StringArray{\n\t\t\t\tfooLaunchTemplate.ID(),\n\t\t\t},\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooLaunchTemplate = new LaunchTemplate(\"fooLaunchTemplate\", LaunchTemplateArgs.builder()        \n            .description(\"acc-test-desc\")\n            .eipBandwidth(1)\n            .eipBillingType(\"PostPaidByBandwidth\")\n            .eipIsp(\"ChinaMobile\")\n            .hostName(\"tf-host-name\")\n            .hpcClusterId(\"hpcCluster-l8u24ovdmoab6opf\")\n            .imageId(\"image-ycjwwciuzy5pkh54xx8f\")\n            .instanceChargeType(\"PostPaid\")\n            .instanceName(\"tf-acc-name\")\n            .instanceTypeId(\"ecs.g1.large\")\n            .keyPairName(\"tf-key-pair\")\n            .launchTemplateName(\"tf-acc-template\")\n            .build());\n\n        final var fooLaunchTemplates = EcsFunctions.LaunchTemplates(Map.of(\"ids\", fooLaunchTemplate.id()));\n\n    }\n}\n```\n```yaml\nresources:\n  fooLaunchTemplate:\n    type: volcengine:ecs:LaunchTemplate\n    properties:\n      description: acc-test-desc\n      eipBandwidth: 1\n      eipBillingType: PostPaidByBandwidth\n      eipIsp: ChinaMobile\n      hostName: tf-host-name\n      hpcClusterId: hpcCluster-l8u24ovdmoab6opf\n      imageId: image-ycjwwciuzy5pkh54xx8f\n      instanceChargeType: PostPaid\n      instanceName: tf-acc-name\n      instanceTypeId: ecs.g1.large\n      keyPairName: tf-key-pair\n      launchTemplateName: tf-acc-template\nvariables:\n  fooLaunchTemplates:\n    Fn::Invoke:\n      Function: volcengine:ecs:LaunchTemplates\n      Arguments:\n        ids:\n          - ${fooLaunchTemplate.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking LaunchTemplates.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of launch template ids.\n"
                    },
                    "launchTemplateNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of launch template names.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of scaling policy.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by LaunchTemplates.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "launchTemplateNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "launchTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/LaunchTemplatesLaunchTemplate:LaunchTemplatesLaunchTemplate"
                        },
                        "description": "The collection of launch templates.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of scaling policy query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "launchTemplates",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:ecs/zones:Zones": {
            "description": "Use this data source to query detailed information of zones\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultZones = pulumi.output(volcengine.ecs.Zones({\n    ids: [\"cn-beijing-a\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.ecs.zones(ids=[\"cn-beijing-a\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Ecs.Zones.InvokeAsync(new Volcengine.Ecs.ZonesArgs\n        {\n            Ids = \n            {\n                \"cn-beijing-a\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ecs.Zones(ctx, \u0026ecs.ZonesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"cn-beijing-a\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = EcsFunctions.Zones();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:ecs:Zones\n      Arguments:\n        ids:\n          - cn-beijing-a\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Zones.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of zone ids.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Zones.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of zone query.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:ecs/ZonesZone:ZonesZone"
                        },
                        "description": "The collection of zone query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "zones",
                    "id"
                ]
            }
        },
        "volcengine:eip/addresses:Addresses": {
            "description": "Use this data source to query detailed information of eip addresses\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@volcengine/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooAddress = new volcengine.eip.Address(\"fooAddress\", {billingType: \"PostPaidByTraffic\"});\nconst fooAddresses = volcengine.eip.AddressesOutput({\n    ids: [fooAddress.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_address = volcengine.eip.Address(\"fooAddress\", billing_type=\"PostPaidByTraffic\")\nfoo_addresses = volcengine.eip.addresses_output(ids=[foo_address.id])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\nusing Volcengine = Volcengine.PulumiPackage.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooAddress = new Volcengine.Eip.Address(\"fooAddress\", new Volcengine.Eip.AddressArgs\n        {\n            BillingType = \"PostPaidByTraffic\",\n        });\n        var fooAddresses = Volcengine.Eip.Addresses.Invoke(new Volcengine.Eip.AddressesInvokeArgs\n        {\n            Ids = \n            {\n                fooAddress.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/eip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/eip\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAddress, err := eip.NewAddress(ctx, \"fooAddress\", \u0026eip.AddressArgs{\n\t\t\tBillingType: pulumi.String(\"PostPaidByTraffic\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = eip.AddressesOutput(ctx, eip.AddressesOutputArgs{\n\t\t\tIds: pulumi.StringArray{\n\t\t\t\tfooAddress.ID(),\n\t\t\t},\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooAddress = new Address(\"fooAddress\", AddressArgs.builder()        \n            .billingType(\"PostPaidByTraffic\")\n            .build());\n\n        final var fooAddresses = EipFunctions.Addresses(Map.of(\"ids\", fooAddress.id()));\n\n    }\n}\n```\n```yaml\nresources:\n  fooAddress:\n    type: volcengine:eip:Address\n    properties:\n      billingType: PostPaidByTraffic\nvariables:\n  fooAddresses:\n    Fn::Invoke:\n      Function: volcengine:eip:Addresses\n      Arguments:\n        ids:\n          - ${fooAddress.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Addresses.\n",
                "properties": {
                    "associatedInstanceId": {
                        "type": "string",
                        "description": "An id of associated instance.\n"
                    },
                    "associatedInstanceType": {
                        "type": "string",
                        "description": "A type of associated instance, the value can be `Nat`, `NetworkInterface`, `ClbInstance` or `EcsInstance`.\n"
                    },
                    "eipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of EIP ip address that you want to query.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of EIP allocation ids.\n"
                    },
                    "isp": {
                        "type": "string",
                        "description": "An ISP of EIP Address, the value can be `BGP` or `ChinaMobile` or `ChinaUnicom` or `ChinaTelecom`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name of EIP.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of EIP.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "A status of EIP, the value can be `Attaching` or `Detaching` or `Attached` or `Available`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:eip/AddressesTag:AddressesTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Addresses.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:eip/AddressesAddress:AddressesAddress"
                        },
                        "description": "The collection of EIP addresses.\n"
                    },
                    "associatedInstanceId": {
                        "type": "string"
                    },
                    "associatedInstanceType": {
                        "type": "string"
                    },
                    "eipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isp": {
                        "type": "string",
                        "description": "The ISP of EIP Address.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the EIP.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the EIP.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the EIP.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:eip/AddressesTag:AddressesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of EIP addresses query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addresses",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:escloud/instances:Instances": {
            "description": "Use this data source to query detailed information of escloud instances\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultInstances = pulumi.output(volcengine.escloud.Instances({\n    ids: [\"d3gftqjvnah74eie\"],\n    statuses: [\"Running\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.escloud.instances(ids=[\"d3gftqjvnah74eie\"],\n    statuses=[\"Running\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Escloud.Instances.InvokeAsync(new Volcengine.Escloud.InstancesArgs\n        {\n            Ids = \n            {\n                \"d3gftqjvnah74eie\",\n            },\n            Statuses = \n            {\n                \"Running\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/escloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/escloud\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := escloud.Instances(ctx, \u0026escloud.InstancesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"d3gftqjvnah74eie\",\n\t\t\t},\n\t\t\tStatuses: []string{\n\t\t\t\t\"Running\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = EscloudFunctions.Instances();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:escloud:Instances\n      Arguments:\n        ids:\n          - d3gftqjvnah74eie\n        statuses:\n          - Running\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Instances.\n",
                "properties": {
                    "chargeTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The charge types of instance.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of instance IDs.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list status of instance.\n"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The versions of instance.\n"
                    },
                    "zoneIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The available zone IDs of instance.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Instances.\n",
                "properties": {
                    "chargeTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:escloud/InstancesInstance:InstancesInstance"
                        },
                        "description": "The collection of instance query.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of instance query.\n"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "zoneIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:escloud/regions:Regions": {
            "description": "Use this data source to query detailed information of escloud regions\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRegions = pulumi.output(volcengine.escloud.Regions());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.escloud.regions()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Escloud.Regions.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/escloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/escloud\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := escloud.Regions(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = EscloudFunctions.Regions();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:escloud:Regions\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Regions.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Regions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:escloud/RegionsRegion:RegionsRegion"
                        },
                        "description": "The collection of region query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of region query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regions",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:escloud/zones:Zones": {
            "description": "Use this data source to query detailed information of escloud zones\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultZones = pulumi.output(volcengine.escloud.Zones({\n    regionId: \"xxx\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.escloud.zones(region_id=\"xxx\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Escloud.Zones.InvokeAsync(new Volcengine.Escloud.ZonesArgs\n        {\n            RegionId = \"xxx\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/escloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/escloud\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := escloud.Zones(ctx, \u0026escloud.ZonesArgs{\n\t\t\tRegionId: \"xxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = EscloudFunctions.Zones();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:escloud:Zones\n      Arguments:\n        regionId: xxx\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Zones.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The Id of Region.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Zones.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of zone query.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:escloud/ZonesZone:ZonesZone"
                        },
                        "description": "The collection of zone query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regionId",
                    "totalCount",
                    "zones",
                    "id"
                ]
            }
        },
        "volcengine:iam/policies:Policies": {
            "description": "Use this data source to query detailed information of iam policies\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultPolicies = pulumi.output(volcengine.iam.Policies({\n    query: \"AdministratorAccess\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.iam.policies(query=\"AdministratorAccess\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Iam.Policies.InvokeAsync(new Volcengine.Iam.PoliciesArgs\n        {\n            Query = \"AdministratorAccess\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.Policies(ctx, \u0026iam.PoliciesArgs{\n\t\t\tQuery: pulumi.StringRef(\"AdministratorAccess\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = IamFunctions.Policies();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:iam:Policies\n      Arguments:\n        query: AdministratorAccess\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Policies.\n",
                "properties": {
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Policy.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Query policies, support policy name or description.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the IAM role.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the Policy.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of policy.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The name of the IAM user.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Policies.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:iam/PoliciesPolicy:PoliciesPolicy"
                        },
                        "description": "The collection of Policy query.\n"
                    },
                    "query": {
                        "type": "string"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the IAM role.The data show only query with role_name.\n"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Policy query.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The name of the IAM user.The data show only query with user_name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "policies",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:iam/roles:Roles": {
            "description": "Use this data source to query detailed information of iam roles\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRoles = pulumi.output(volcengine.iam.Roles());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.iam.roles()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Iam.Roles.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.Roles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = IamFunctions.Roles();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:iam:Roles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Roles.\n",
                "properties": {
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Role.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "The query field of Role.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the Role, comma separated.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Roles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "query": {
                        "type": "string"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the Role.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:iam/RolesRole:RolesRole"
                        },
                        "description": "The collection of Role query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Role query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "roles",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:iam/users:Users": {
            "description": "Use this data source to query detailed information of iam users\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultUsers = pulumi.output(volcengine.iam.Users());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.iam.users()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Iam.Users.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.Users(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = IamFunctions.Users();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:iam:Users\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Users.\n",
                "properties": {
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of IAM.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "userNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user names.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Users.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of user query.\n"
                    },
                    "userNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:iam/UsersUser:UsersUser"
                        },
                        "description": "The collection of user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "users",
                    "id"
                ]
            }
        },
        "volcengine:mongodb/accounts:Accounts": {
            "description": "Use this data source to query detailed information of mongodb accounts\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAccounts = pulumi.output(volcengine.mongodb.Accounts({\n    instanceId: \"mongo-replica-xxx\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.mongodb.accounts(instance_id=\"mongo-replica-xxx\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Mongodb.Accounts.InvokeAsync(new Volcengine.Mongodb.AccountsArgs\n        {\n            InstanceId = \"mongo-replica-xxx\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.Accounts(ctx, \u0026mongodb.AccountsArgs{\n\t\t\tInstanceId: \"mongo-replica-xxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = MongodbFunctions.Accounts();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:mongodb:Accounts\n      Arguments:\n        instanceId: mongo-replica-xxx\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Accounts.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The name of account, current support only `root`.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Target query mongo instance id.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Accounts.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The name of account.\n"
                    },
                    "accounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:mongodb/AccountsAccount:AccountsAccount"
                        },
                        "description": "The collection of accounts query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of accounts query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accounts",
                    "instanceId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:mongodb/endpoints:Endpoints": {
            "description": "Use this data source to query detailed information of mongodb endpoints\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.mongodb.Endpoints({\n    instanceId: \"mongo-shard-xxx\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.endpoints(instance_id=\"mongo-shard-xxx\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Mongodb.Endpoints.InvokeAsync(new Volcengine.Mongodb.EndpointsArgs\n        {\n            InstanceId = \"mongo-shard-xxx\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.Endpoints(ctx, \u0026mongodb.EndpointsArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"mongo-shard-xxx\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = MongodbFunctions.Endpoints();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:mongodb:Endpoints\n      Arguments:\n        instanceId: mongo-shard-xxx\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Endpoints.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The instance ID to query.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Endpoints.\n",
                "properties": {
                    "endpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:mongodb/EndpointsEndpoint:EndpointsEndpoint"
                        },
                        "description": "The collection of mongodb endpoints query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of mongodb endpoint query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "endpoints",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:mongodb/instanceParameterLogs:InstanceParameterLogs": {
            "description": "Use this data source to query detailed information of mongodb instance parameter logs\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.mongodb.InstanceParameterLogs({\n    endTime: \"2023-11-14 18:15Z\", // 必填\n    instanceId: \"mongo-replica-f16e9298b121\", // 必填\n    startTime: \"2022-11-14 00:00Z\", // 必填\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.instance_parameter_logs(end_time=\"2023-11-14 18:15Z\",\n    instance_id=\"mongo-replica-f16e9298b121\",\n    start_time=\"2022-11-14 00:00Z\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Mongodb.InstanceParameterLogs.InvokeAsync(new Volcengine.Mongodb.InstanceParameterLogsArgs\n        {\n            EndTime = \"2023-11-14 18:15Z\",\n            InstanceId = \"mongo-replica-f16e9298b121\",\n            StartTime = \"2022-11-14 00:00Z\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.InstanceParameterLogs(ctx, \u0026mongodb.InstanceParameterLogsArgs{\n\t\t\tEndTime:    \"2023-11-14 18:15Z\",\n\t\t\tInstanceId: \"mongo-replica-f16e9298b121\",\n\t\t\tStartTime:  \"2022-11-14 00:00Z\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = MongodbFunctions.InstanceParameterLogs();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:mongodb:InstanceParameterLogs\n      Arguments:\n        endTime: 2023-11-14 18:15Z\n        instanceId: mongo-replica-f16e9298b121\n        startTime: 2022-11-14 00:00Z\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking InstanceParameterLogs.\n",
                "properties": {
                    "endTime": {
                        "type": "string",
                        "description": "The end time to query.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance ID to query.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "The start time to query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "endTime",
                    "instanceId",
                    "startTime"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by InstanceParameterLogs.\n",
                "properties": {
                    "endTime": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "parameterChangeLogs": {
                        "$ref": "#/types/volcengine:mongodb/InstanceParameterLogsParameterChangeLogs:InstanceParameterLogsParameterChangeLogs",
                        "description": "The collection of parameter change log query.\n"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of mongodb instance parameter log query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "endTime",
                    "instanceId",
                    "parameterChangeLogs",
                    "startTime",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:mongodb/instanceParameters:InstanceParameters": {
            "description": "Use this data source to query detailed information of mongodb instance parameters\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.mongodb.InstanceParameters({\n    instanceId: \"mongo-replica-f16e9298b121\", // 必填\n    parameterNames: \"connPoolMaxConnsPerHost\", // 选填\n    parameterRole: \"Node\", // 选填\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.instance_parameters(instance_id=\"mongo-replica-f16e9298b121\",\n    parameter_names=\"connPoolMaxConnsPerHost\",\n    parameter_role=\"Node\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Mongodb.InstanceParameters.InvokeAsync(new Volcengine.Mongodb.InstanceParametersArgs\n        {\n            InstanceId = \"mongo-replica-f16e9298b121\",\n            ParameterNames = \"connPoolMaxConnsPerHost\",\n            ParameterRole = \"Node\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.InstanceParameters(ctx, \u0026mongodb.InstanceParametersArgs{\n\t\t\tInstanceId:     \"mongo-replica-f16e9298b121\",\n\t\t\tParameterNames: pulumi.StringRef(\"connPoolMaxConnsPerHost\"),\n\t\t\tParameterRole:  pulumi.StringRef(\"Node\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = MongodbFunctions.InstanceParameters();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:mongodb:InstanceParameters\n      Arguments:\n        instanceId: mongo-replica-f16e9298b121\n        parameterNames: connPoolMaxConnsPerHost\n        parameterRole: Node\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking InstanceParameters.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The instance ID to query.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "parameterNames": {
                        "type": "string",
                        "description": "The parameter names, support fuzzy query, case insensitive.\n"
                    },
                    "parameterRole": {
                        "type": "string",
                        "description": "The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by InstanceParameters.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance ID.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "parameterNames": {
                        "type": "string"
                    },
                    "parameterRole": {
                        "type": "string",
                        "description": "The node type to which the parameter belongs.\n"
                    },
                    "parameters": {
                        "$ref": "#/types/volcengine:mongodb/InstanceParametersParameters:InstanceParametersParameters",
                        "description": "The collection of parameter query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of mongodb instance parameter query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "parameters",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:mongodb/instances:Instances": {
            "description": "Use this data source to query detailed information of mongodb instances\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.mongodb.Instances({\n    instanceId: \"mongo-replica-xxx\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.instances(instance_id=\"mongo-replica-xxx\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Mongodb.Instances.InvokeAsync(new Volcengine.Mongodb.InstancesArgs\n        {\n            InstanceId = \"mongo-replica-xxx\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.Instances(ctx, \u0026mongodb.InstancesArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"mongo-replica-xxx\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = MongodbFunctions.Instances();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:mongodb:Instances\n      Arguments:\n        instanceId: mongo-replica-xxx\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Instances.\n",
                "properties": {
                    "createEndTime": {
                        "type": "string",
                        "description": "The end time of creation to query.\n"
                    },
                    "createStartTime": {
                        "type": "string",
                        "description": "The start time of creation to query.\n"
                    },
                    "dbEngine": {
                        "type": "string",
                        "description": "The db engine to query, valid value contains `MongoDB`.\n"
                    },
                    "dbEngineVersion": {
                        "type": "string",
                        "description": "The version of db engine to query, valid value contains `MongoDB_4_0`.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance ID to query.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The instance name to query.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The instance status to query.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of instance to query, the valid value contains `ReplicaSet` or `ShardedCluster`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of DB instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:mongodb/InstancesTag:InstancesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "updateEndTime": {
                        "type": "string",
                        "description": "The end time of update to query.\n"
                    },
                    "updateStartTime": {
                        "type": "string",
                        "description": "The start time of update to query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc id of instance to query.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone ID to query.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Instances.\n",
                "properties": {
                    "createEndTime": {
                        "type": "string"
                    },
                    "createStartTime": {
                        "type": "string"
                    },
                    "dbEngine": {
                        "type": "string",
                        "description": "The db engine.\n"
                    },
                    "dbEngineVersion": {
                        "type": "string",
                        "description": "The version of database engine.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance ID.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The instance name.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The instance status.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The instance type.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:mongodb/InstancesInstance:InstancesInstance"
                        },
                        "description": "The collection of mongodb instances query.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:mongodb/InstancesTag:InstancesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of mongodb instances query.\n"
                    },
                    "updateEndTime": {
                        "type": "string"
                    },
                    "updateStartTime": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc ID.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone ID of instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:mongodb/mongoAllowLists:MongoAllowLists": {
            "description": "Use this data source to query detailed information of mongodb allow lists\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultMongoAllowLists = pulumi.output(volcengine.mongodb.MongoAllowLists({\n    instanceId: \"mongo-replica-xxx\",\n    regionId: \"cn-xxx\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.mongodb.mongo_allow_lists(instance_id=\"mongo-replica-xxx\",\n    region_id=\"cn-xxx\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Mongodb.MongoAllowLists.InvokeAsync(new Volcengine.Mongodb.MongoAllowListsArgs\n        {\n            InstanceId = \"mongo-replica-xxx\",\n            RegionId = \"cn-xxx\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.MongoAllowLists(ctx, \u0026mongodb.MongoAllowListsArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"mongo-replica-xxx\"),\n\t\t\tRegionId:   \"cn-xxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = MongodbFunctions.MongoAllowLists();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:mongodb:MongoAllowLists\n      Arguments:\n        instanceId: mongo-replica-xxx\n        regionId: cn-xxx\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking MongoAllowLists.\n",
                "properties": {
                    "allowListIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The allow list IDs to query.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance ID to query.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The region ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by MongoAllowLists.\n",
                "properties": {
                    "allowListIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:mongodb/MongoAllowListsAllowList:MongoAllowListsAllowList"
                        },
                        "description": "The collection of mongodb allow list query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance id that bound to the allow list.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of mongodb allow lists query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowLists",
                    "regionId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:mongodb/regions:Regions": {
            "description": "Use this data source to query detailed information of mongodb regions\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRegions = pulumi.output(volcengine.mongodb.Regions());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.mongodb.regions()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Mongodb.Regions.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.Regions(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = MongodbFunctions.Regions();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:mongodb:Regions\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Regions.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Regions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:mongodb/RegionsRegion:RegionsRegion"
                        },
                        "description": "The collection of region query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of region query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regions",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:mongodb/specs:Specs": {
            "description": "Use this data source to query detailed information of mongodb specs\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.mongodb.Specs());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.specs()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Mongodb.Specs.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.Specs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = MongodbFunctions.Specs();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:mongodb:Specs\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Specs.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The region ID to query.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Specs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string"
                    },
                    "specs": {
                        "$ref": "#/types/volcengine:mongodb/SpecsSpecs:SpecsSpecs",
                        "description": "A list of supported node specification information for MongoDB instances.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of region query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "specs",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:mongodb/sslStates:SslStates": {
            "description": "Use this data source to query detailed information of mongodb ssl states\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.mongodb.SslStates({\n    instanceId: \"mongo-replica-f16e9298b121\", // 必填\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.mongodb.ssl_states(instance_id=\"mongo-replica-f16e9298b121\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Mongodb.SslStates.InvokeAsync(new Volcengine.Mongodb.SslStatesArgs\n        {\n            InstanceId = \"mongo-replica-f16e9298b121\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.SslStates(ctx, \u0026mongodb.SslStatesArgs{\n\t\t\tInstanceId: \"mongo-replica-f16e9298b121\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = MongodbFunctions.SslStates();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:mongodb:SslStates\n      Arguments:\n        instanceId: mongo-replica-f16e9298b121\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking SslStates.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The mongodb instance ID to query.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by SslStates.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The mongodb instance id.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "sslStates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:mongodb/SslStatesSslState:SslStatesSslState"
                        },
                        "description": "The collection of mongodb ssl state query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of mongodb ssl state query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "sslStates",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:mongodb/zones:Zones": {
            "description": "Use this data source to query detailed information of mongodb zones\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultZones = pulumi.output(volcengine.mongodb.Zones({\n    regionId: \"XXX\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.mongodb.zones(region_id=\"XXX\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Mongodb.Zones.InvokeAsync(new Volcengine.Mongodb.ZonesArgs\n        {\n            RegionId = \"XXX\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mongodb.Zones(ctx, \u0026mongodb.ZonesArgs{\n\t\t\tRegionId: \"XXX\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = MongodbFunctions.Zones();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:mongodb:Zones\n      Arguments:\n        regionId: XXX\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Zones.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The Id of Region.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Zones.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of zone query.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:mongodb/ZonesZone:ZonesZone"
                        },
                        "description": "The collection of zone query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regionId",
                    "totalCount",
                    "zones",
                    "id"
                ]
            }
        },
        "volcengine:nat/dnatEntries:DnatEntries": {
            "description": "Use this data source to query detailed information of dnat entries\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultDnatEntries = pulumi.output(volcengine.nat.DnatEntries());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.nat.dnat_entries()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Nat.DnatEntries.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/nat\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nat.DnatEntries(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = NatFunctions.DnatEntries();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:nat:DnatEntries\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking DnatEntries.\n",
                "properties": {
                    "dnatEntryName": {
                        "type": "string",
                        "description": "The name of the DNAT entry.\n"
                    },
                    "externalIp": {
                        "type": "string",
                        "description": "Provides the public IP address for public network access.\n"
                    },
                    "externalPort": {
                        "type": "string",
                        "description": "The port or port segment that receives requests from the public network. If InternalPort is passed into the port segment, ExternalPort must also be passed into the port segment.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of DNAT entry ids.\n"
                    },
                    "internalIp": {
                        "type": "string",
                        "description": "Provides the internal IP address.\n"
                    },
                    "internalPort": {
                        "type": "string",
                        "description": "The port or port segment on which the cloud server instance provides services to the public network.\n"
                    },
                    "natGatewayId": {
                        "type": "string",
                        "description": "The id of the NAT gateway.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The network protocol.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by DnatEntries.\n",
                "properties": {
                    "dnatEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:nat/DnatEntriesDnatEntry:DnatEntriesDnatEntry"
                        },
                        "description": "List of DNAT entries.\n"
                    },
                    "dnatEntryName": {
                        "type": "string",
                        "description": "The name of the DNAT entry.\n"
                    },
                    "externalIp": {
                        "type": "string",
                        "description": "Provides the public IP address for public network access.\n"
                    },
                    "externalPort": {
                        "type": "string",
                        "description": "The port or port segment that receives requests from the public network. If InternalPort is passed into the port segment, ExternalPort must also be passed into the port segment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "internalIp": {
                        "type": "string",
                        "description": "Provides the internal IP address.\n"
                    },
                    "internalPort": {
                        "type": "string",
                        "description": "The port or port segment on which the cloud server instance provides services to the public network.\n"
                    },
                    "natGatewayId": {
                        "type": "string",
                        "description": "The ID of the NAT gateway.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The network protocol.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of snat entries query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dnatEntries",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:nat/gateways:Gateways": {
            "description": "Use this data source to query detailed information of nat gateways\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultGateways = pulumi.output(volcengine.nat.Gateways({\n    ids: [\n        \"ngw-2743w1f6iqby87fap8tvm9kop\",\n        \"ngw-274gwbqe340zk7fap8spkzo7x\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.nat.gateways(ids=[\n    \"ngw-2743w1f6iqby87fap8tvm9kop\",\n    \"ngw-274gwbqe340zk7fap8spkzo7x\",\n])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Nat.Gateways.InvokeAsync(new Volcengine.Nat.GatewaysArgs\n        {\n            Ids = \n            {\n                \"ngw-2743w1f6iqby87fap8tvm9kop\",\n                \"ngw-274gwbqe340zk7fap8spkzo7x\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/nat\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nat.Gateways(ctx, \u0026nat.GatewaysArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"ngw-2743w1f6iqby87fap8tvm9kop\",\n\t\t\t\t\"ngw-274gwbqe340zk7fap8spkzo7x\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = NatFunctions.Gateways();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:nat:Gateways\n      Arguments:\n        ids:\n          - ngw-2743w1f6iqby87fap8tvm9kop\n          - ngw-274gwbqe340zk7fap8spkzo7x\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Gateways.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NatGateway.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of NatGateway IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "The Name Regex of NatGateway.\n"
                    },
                    "natGatewayName": {
                        "type": "string",
                        "description": "The name of the NatGateway.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "spec": {
                        "type": "string",
                        "description": "The specification of the NatGateway.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the Subnet.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:nat/GatewaysTag:GatewaysTag"
                        },
                        "description": "Tags.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the VPC.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Gateways.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NatGateway.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "natGatewayName": {
                        "type": "string",
                        "description": "The name of the NatGateway.\n"
                    },
                    "natGateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:nat/GatewaysNatGateway:GatewaysNatGateway"
                        },
                        "description": "The collection of NatGateway query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "spec": {
                        "type": "string",
                        "description": "The specification of the NatGateway.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of the Subnet.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:nat/GatewaysTag:GatewaysTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of NatGateway query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of the VPC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "natGateways",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:nat/snatEntries:SnatEntries": {
            "description": "Use this data source to query detailed information of snat entries\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultSnatEntries = pulumi.output(volcengine.nat.SnatEntries({\n    ids: [\"snat-274zl8b1kxzb47fap8u35uune\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.nat.snat_entries(ids=[\"snat-274zl8b1kxzb47fap8u35uune\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Nat.SnatEntries.InvokeAsync(new Volcengine.Nat.SnatEntriesArgs\n        {\n            Ids = \n            {\n                \"snat-274zl8b1kxzb47fap8u35uune\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/nat\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nat.SnatEntries(ctx, \u0026nat.SnatEntriesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"snat-274zl8b1kxzb47fap8u35uune\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = NatFunctions.SnatEntries();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:nat:SnatEntries\n      Arguments:\n        ids:\n          - snat-274zl8b1kxzb47fap8u35uune\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking SnatEntries.\n",
                "properties": {
                    "eipId": {
                        "type": "string",
                        "description": "An id of the public ip address used by the SNAT entry.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SNAT entry ids.\n"
                    },
                    "natGatewayId": {
                        "type": "string",
                        "description": "An id of the nat gateway to which the entry belongs.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "snatEntryName": {
                        "type": "string",
                        "description": "A name of SNAT entry.\n"
                    },
                    "sourceCidr": {
                        "type": "string",
                        "description": "The SourceCidr of SNAT entry.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "An id of the subnet that is required to access the Internet.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by SnatEntries.\n",
                "properties": {
                    "eipId": {
                        "type": "string",
                        "description": "The id of the public ip address used by the SNAT entry.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "natGatewayId": {
                        "type": "string",
                        "description": "The id of the nat gateway to which the entry belongs.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "snatEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:nat/SnatEntriesSnatEntry:SnatEntriesSnatEntry"
                        },
                        "description": "The collection of snat entries.\n"
                    },
                    "snatEntryName": {
                        "type": "string",
                        "description": "The name of the SNAT entry.\n"
                    },
                    "sourceCidr": {
                        "type": "string",
                        "description": "The SourceCidr of the SNAT entry.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the subnet that is required to access the internet.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of snat entries query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "snatEntries",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:privatelink/vpcEndpointConnections:VpcEndpointConnections": {
            "description": "Use this data source to query detailed information of privatelink vpc endpoint connections\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultVpcEndpointConnections = pulumi.output(volcengine.privatelink.VpcEndpointConnections({\n    endpointId: \"ep-3rel74u229dz45zsk2i6l69qa\",\n    serviceId: \"epsvc-2byz5mykk9y4g2dx0efs4aqz3\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.privatelink.vpc_endpoint_connections(endpoint_id=\"ep-3rel74u229dz45zsk2i6l69qa\",\n    service_id=\"epsvc-2byz5mykk9y4g2dx0efs4aqz3\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Privatelink.VpcEndpointConnections.InvokeAsync(new Volcengine.Privatelink.VpcEndpointConnectionsArgs\n        {\n            EndpointId = \"ep-3rel74u229dz45zsk2i6l69qa\",\n            ServiceId = \"epsvc-2byz5mykk9y4g2dx0efs4aqz3\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.VpcEndpointConnections(ctx, \u0026privatelink.VpcEndpointConnectionsArgs{\n\t\t\tEndpointId: pulumi.StringRef(\"ep-3rel74u229dz45zsk2i6l69qa\"),\n\t\t\tServiceId:  \"epsvc-2byz5mykk9y4g2dx0efs4aqz3\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = PrivatelinkFunctions.VpcEndpointConnections();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:privatelink:VpcEndpointConnections\n      Arguments:\n        endpointId: ep-3rel74u229dz45zsk2i6l69qa\n        serviceId: epsvc-2byz5mykk9y4g2dx0efs4aqz3\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking VpcEndpointConnections.\n",
                "properties": {
                    "endpointId": {
                        "type": "string",
                        "description": "The id of the vpc endpoint.\n"
                    },
                    "endpointOwnerAccountId": {
                        "type": "string",
                        "description": "The account id of the vpc endpoint.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The id of the vpc endpoint service.\n"
                    }
                },
                "type": "object",
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by VpcEndpointConnections.\n",
                "properties": {
                    "connections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:privatelink/VpcEndpointConnectionsConnection:VpcEndpointConnectionsConnection"
                        },
                        "description": "The list of query.\n"
                    },
                    "endpointId": {
                        "type": "string",
                        "description": "The id of the vpc endpoint.\n"
                    },
                    "endpointOwnerAccountId": {
                        "type": "string",
                        "description": "The account id of the vpc endpoint.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The id of the vpc endpoint service.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Returns the total amount of the data list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connections",
                    "serviceId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:privatelink/vpcEndpointServicePermissions:VpcEndpointServicePermissions": {
            "description": "Use this data source to query detailed information of privatelink vpc endpoint service permissions\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultVpcEndpointServicePermissions = pulumi.output(volcengine.privatelink.VpcEndpointServicePermissions({\n    serviceId: \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.privatelink.vpc_endpoint_service_permissions(service_id=\"epsvc-3rel73uf2ewao5zsk2j2l58ro\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Privatelink.VpcEndpointServicePermissions.InvokeAsync(new Volcengine.Privatelink.VpcEndpointServicePermissionsArgs\n        {\n            ServiceId = \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.VpcEndpointServicePermissions(ctx, \u0026privatelink.VpcEndpointServicePermissionsArgs{\n\t\t\tServiceId: \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = PrivatelinkFunctions.VpcEndpointServicePermissions();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:privatelink:VpcEndpointServicePermissions\n      Arguments:\n        serviceId: epsvc-3rel73uf2ewao5zsk2j2l58ro\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking VpcEndpointServicePermissions.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "permitAccountId": {
                        "type": "string",
                        "description": "The Id of permit account.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The Id of service.\n"
                    }
                },
                "type": "object",
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by VpcEndpointServicePermissions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:privatelink/VpcEndpointServicePermissionsPermission:VpcEndpointServicePermissionsPermission"
                        },
                        "description": "The collection of query.\n"
                    },
                    "permitAccountId": {
                        "type": "string",
                        "description": "The permit account id.\n"
                    },
                    "serviceId": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Returns the total amount of the data list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "permissions",
                    "serviceId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:privatelink/vpcEndpointServices:VpcEndpointServices": {
            "description": "Use this data source to query detailed information of privatelink vpc endpoint services\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultVpcEndpointServices = pulumi.output(volcengine.privatelink.VpcEndpointServices({\n    ids: [\n        \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n        \"epsvc-2d72mxjgq02yo58ozfe5tndeh\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.privatelink.vpc_endpoint_services(ids=[\n    \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n    \"epsvc-2d72mxjgq02yo58ozfe5tndeh\",\n])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Privatelink.VpcEndpointServices.InvokeAsync(new Volcengine.Privatelink.VpcEndpointServicesArgs\n        {\n            Ids = \n            {\n                \"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n                \"epsvc-2d72mxjgq02yo58ozfe5tndeh\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.VpcEndpointServices(ctx, \u0026privatelink.VpcEndpointServicesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"epsvc-3rel73uf2ewao5zsk2j2l58ro\",\n\t\t\t\t\"epsvc-2d72mxjgq02yo58ozfe5tndeh\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = PrivatelinkFunctions.VpcEndpointServices();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:privatelink:VpcEndpointServices\n      Arguments:\n        ids:\n          - epsvc-3rel73uf2ewao5zsk2j2l58ro\n          - epsvc-2d72mxjgq02yo58ozfe5tndeh\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking VpcEndpointServices.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of vpc endpoint service.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of vpc endpoint service.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The name of vpc endpoint service.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by VpcEndpointServices.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The name of service.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:privatelink/VpcEndpointServicesService:VpcEndpointServicesService"
                        },
                        "description": "The collection of query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Returns the total amount of the data list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "services",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:privatelink/vpcEndpointZones:VpcEndpointZones": {
            "description": "Use this data source to query detailed information of privatelink vpc endpoint zones\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultVpcEndpointZones = pulumi.output(volcengine.privatelink.VpcEndpointZones({\n    endpointId: \"ep-2byz5npiuu1hc2dx0efkv****\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.privatelink.vpc_endpoint_zones(endpoint_id=\"ep-2byz5npiuu1hc2dx0efkv****\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Privatelink.VpcEndpointZones.InvokeAsync(new Volcengine.Privatelink.VpcEndpointZonesArgs\n        {\n            EndpointId = \"ep-2byz5npiuu1hc2dx0efkv****\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.VpcEndpointZones(ctx, \u0026privatelink.VpcEndpointZonesArgs{\n\t\t\tEndpointId: pulumi.StringRef(\"ep-2byz5npiuu1hc2dx0efkv****\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = PrivatelinkFunctions.VpcEndpointZones();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:privatelink:VpcEndpointZones\n      Arguments:\n        endpointId: ep-2byz5npiuu1hc2dx0efkv****\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking VpcEndpointZones.\n",
                "properties": {
                    "endpointId": {
                        "type": "string",
                        "description": "The endpoint id of query.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by VpcEndpointZones.\n",
                "properties": {
                    "endpointId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Returns the total amount of the data list.\n"
                    },
                    "vpcEndpointZones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:privatelink/VpcEndpointZonesVpcEndpointZone:VpcEndpointZonesVpcEndpointZone"
                        },
                        "description": "The collection of query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "vpcEndpointZones",
                    "id"
                ]
            }
        },
        "volcengine:privatelink/vpcEndpoints:VpcEndpoints": {
            "description": "Use this data source to query detailed information of privatelink vpc endpoints\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultVpcEndpoints = pulumi.output(volcengine.privatelink.VpcEndpoints({\n    ids: [\"ep-3rel74u229dz45zsk2i6l****\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.privatelink.vpc_endpoints(ids=[\"ep-3rel74u229dz45zsk2i6l****\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Privatelink.VpcEndpoints.InvokeAsync(new Volcengine.Privatelink.VpcEndpointsArgs\n        {\n            Ids = \n            {\n                \"ep-3rel74u229dz45zsk2i6l****\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/privatelink\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := privatelink.VpcEndpoints(ctx, \u0026privatelink.VpcEndpointsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"ep-3rel74u229dz45zsk2i6l****\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = PrivatelinkFunctions.VpcEndpoints();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:privatelink:VpcEndpoints\n      Arguments:\n        ids:\n          - ep-3rel74u229dz45zsk2i6l****\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking VpcEndpoints.\n",
                "properties": {
                    "endpointName": {
                        "type": "string",
                        "description": "The name of vpc endpoint.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of vpc endpoint.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of vpc endpoint.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The name of vpc endpoint service.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of vpc endpoint. Valid values: `Creating`, `Pending`, `Available`, `Deleting`, `Inactive`.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc id of vpc endpoint.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by VpcEndpoints.\n",
                "properties": {
                    "endpointName": {
                        "type": "string",
                        "description": "The name of vpc endpoint.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The name of vpc endpoint service.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of vpc endpoint.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Returns the total amount of the data list.\n"
                    },
                    "vpcEndpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:privatelink/VpcEndpointsVpcEndpoint:VpcEndpointsVpcEndpoint"
                        },
                        "description": "The collection of query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc id of vpc endpoint.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "vpcEndpoints",
                    "id"
                ]
            }
        },
        "volcengine:rds/accounts:Accounts": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Use this data source to query detailed information of rds accounts\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAccounts = pulumi.output(volcengine.rds.Accounts({\n    instanceId: \"mysql-0fdd3bab2e7c\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds.accounts(instance_id=\"mysql-0fdd3bab2e7c\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Rds.Accounts.InvokeAsync(new Volcengine.Rds.AccountsArgs\n        {\n            InstanceId = \"mysql-0fdd3bab2e7c\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds.Accounts(ctx, \u0026rds.AccountsArgs{\n\t\t\tInstanceId: \"mysql-0fdd3bab2e7c\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RdsFunctions.Accounts();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:rds:Accounts\n      Arguments:\n        instanceId: mysql-0fdd3bab2e7c\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Accounts.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The name of the database account.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the RDS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of database account.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Accounts.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The name of the database account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "rdsAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds/AccountsRdsAccount:AccountsRdsAccount"
                        },
                        "description": "The collection of RDS instance account query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of database account query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "rdsAccounts",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:rds/databases:Databases": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Use this data source to query detailed information of rds databases\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultDatabases = pulumi.output(volcengine.rds.Databases({\n    instanceId: \"mysql-0fdd3bab2e7c\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds.databases(instance_id=\"mysql-0fdd3bab2e7c\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Rds.Databases.InvokeAsync(new Volcengine.Rds.DatabasesArgs\n        {\n            InstanceId = \"mysql-0fdd3bab2e7c\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds.Databases(ctx, \u0026rds.DatabasesArgs{\n\t\t\tInstanceId: \"mysql-0fdd3bab2e7c\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RdsFunctions.Databases();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:rds:Databases\n      Arguments:\n        instanceId: mysql-0fdd3bab2e7c\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Databases.\n",
                "properties": {
                    "dbStatus": {
                        "type": "string",
                        "description": "The status of the RDS database.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the RDS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of RDS database.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Databases.\n",
                "properties": {
                    "dbStatus": {
                        "type": "string",
                        "description": "The status of the RDS database.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "rdsDatabases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds/DatabasesRdsDatabase:DatabasesRdsDatabase"
                        },
                        "description": "The collection of RDS instance account query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of RDS database query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "rdsDatabases",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:rds/instances:Instances": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Use this data source to query detailed information of rds instances\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultInstances = pulumi.output(volcengine.rds.Instances({\n    instanceId: \"mysql-0fdd3bab2e7c\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds.instances(instance_id=\"mysql-0fdd3bab2e7c\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Rds.Instances.InvokeAsync(new Volcengine.Rds.InstancesArgs\n        {\n            InstanceId = \"mysql-0fdd3bab2e7c\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds.Instances(ctx, \u0026rds.InstancesArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"mysql-0fdd3bab2e7c\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RdsFunctions.Instances();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:rds:Instances\n      Arguments:\n        instanceId: mysql-0fdd3bab2e7c\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Instances.\n",
                "properties": {
                    "createEndTime": {
                        "type": "string",
                        "description": "The end time of creating RDS instance.\n"
                    },
                    "createStartTime": {
                        "type": "string",
                        "description": "The start time of creating RDS instance.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the RDS instance.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The status of the RDS instance.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of the RDS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of RDS instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the RDS instance.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The available zone of the RDS instance.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Instances.\n",
                "properties": {
                    "createEndTime": {
                        "type": "string"
                    },
                    "createStartTime": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the RDS instance.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The status of the RDS instance.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of the RDS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "rdsInstances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds/InstancesRdsInstance:InstancesRdsInstance"
                        },
                        "description": "The collection of RDS instance query.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the RDS instance.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of RDS instance query.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The available zone of the RDS instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "rdsInstances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:rds/ipLists:IpLists": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Use this data source to query detailed information of rds ip lists\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultIpLists = pulumi.output(volcengine.rds.IpLists({\n    instanceId: \"mysql-0fdd3bab2e7c\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds.ip_lists(instance_id=\"mysql-0fdd3bab2e7c\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Rds.IpLists.InvokeAsync(new Volcengine.Rds.IpListsArgs\n        {\n            InstanceId = \"mysql-0fdd3bab2e7c\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds.IpLists(ctx, \u0026rds.IpListsArgs{\n\t\t\tInstanceId: \"mysql-0fdd3bab2e7c\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RdsFunctions.IpLists();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:rds:IpLists\n      Arguments:\n        instanceId: mysql-0fdd3bab2e7c\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking IpLists.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the RDS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of RDS ip list.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by IpLists.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "rdsIpLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds/IpListsRdsIpList:IpListsRdsIpList"
                        },
                        "description": "The collection of RDS ip list account query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of RDS ip list query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "rdsIpLists",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:rds/parameterTemplates:ParameterTemplates": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Use this data source to query detailed information of rds parameter templates\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultParameterTemplates = pulumi.output(volcengine.rds.ParameterTemplates());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds.parameter_templates()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Rds.ParameterTemplates.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds.ParameterTemplates(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RdsFunctions.ParameterTemplates();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:rds:ParameterTemplates\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ParameterTemplates.\n",
                "properties": {
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of RDS parameter template.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "templateCategory": {
                        "type": "string",
                        "description": "Parameter template type, range of values:\nDBEngine - Engine parameters.\n"
                    },
                    "templateSource": {
                        "type": "string",
                        "description": "Template source, value range:\nSystem - System\nUser - the user.\n"
                    },
                    "templateType": {
                        "type": "string",
                        "description": "Parameter template database type, range of values:\nMySQL - MySQL database.\n"
                    },
                    "templateTypeVersion": {
                        "type": "string",
                        "description": "Parameter template database version, value range:\nMySQL_Community_5_7 - MySQL 5.7\nMySQL_8_0 - MySQL 8.0.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by ParameterTemplates.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "rdsParameterTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds/ParameterTemplatesRdsParameterTemplate:ParameterTemplatesRdsParameterTemplate"
                        },
                        "description": "The collection of RDS parameter templates query.\n"
                    },
                    "templateCategory": {
                        "type": "string"
                    },
                    "templateSource": {
                        "type": "string"
                    },
                    "templateType": {
                        "type": "string",
                        "description": "Parameter template database type, range of values:\nMySQL - MySQL database.\n"
                    },
                    "templateTypeVersion": {
                        "type": "string",
                        "description": "Parameter template database version, value range:\nMySQL_Community_5_7 - MySQL 5.7\nMySQL_8_0 - MySQL 8.0.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of RDS parameter templates query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "rdsParameterTemplates",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:rds_mysql/accounts:Accounts": {
            "description": "Use this data source to query detailed information of rds mysql accounts\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAccounts = pulumi.output(volcengine.rds_mysql.Accounts({\n    accountName: \"\",\n    instanceId: \"mysql-47d6bc58762b\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds_mysql.accounts(account_name=\"\",\n    instance_id=\"mysql-47d6bc58762b\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Rds_mysql.Accounts.InvokeAsync(new Volcengine.Rds_mysql.AccountsArgs\n        {\n            AccountName = \"\",\n            InstanceId = \"mysql-47d6bc58762b\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_mysql.Accounts(ctx, \u0026rds_mysql.AccountsArgs{\n\t\t\tAccountName: pulumi.StringRef(\"\"),\n\t\t\tInstanceId:  \"mysql-47d6bc58762b\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = Rds_mysqlFunctions.Accounts();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:rds_mysql:Accounts\n      Arguments:\n        accountName:\n        instanceId: mysql-47d6bc58762b\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Accounts.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The name of the database account. This field supports fuzzy query.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the RDS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of database account.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Accounts.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The name of the database account.\n"
                    },
                    "accounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_mysql/AccountsAccount:AccountsAccount"
                        },
                        "description": "The collection of RDS instance account query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of database account query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accounts",
                    "instanceId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:rds_mysql/allowlists:Allowlists": {
            "description": "Use this data source to query detailed information of rds mysql allowlists\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAllowlists = pulumi.output(volcengine.rds_mysql.Allowlists({\n    regionId: \"cn-guilin-boe\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds_mysql.allowlists(region_id=\"cn-guilin-boe\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Rds_mysql.Allowlists.InvokeAsync(new Volcengine.Rds_mysql.AllowlistsArgs\n        {\n            RegionId = \"cn-guilin-boe\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_mysql.Allowlists(ctx, \u0026rds_mysql.AllowlistsArgs{\n\t\t\tRegionId: \"cn-guilin-boe\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = Rds_mysqlFunctions.Allowlists();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:rds_mysql:Allowlists\n      Arguments:\n        regionId: cn-guilin-boe\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Allowlists.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The region of the allow lists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Allowlists.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_mysql/AllowlistsAllowList:AllowlistsAllowList"
                        },
                        "description": "The list of allowed list.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the instance.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Scaling Activity query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowLists",
                    "regionId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:rds_mysql/databases:Databases": {
            "description": "Use this data source to query detailed information of rds mysql databases\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultDatabases = pulumi.output(volcengine.rds_mysql.Databases({\n    dbName: \"\",\n    instanceId: \"\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds_mysql.databases(db_name=\"\",\n    instance_id=\"\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Rds_mysql.Databases.InvokeAsync(new Volcengine.Rds_mysql.DatabasesArgs\n        {\n            DbName = \"\",\n            InstanceId = \"\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_mysql.Databases(ctx, \u0026rds_mysql.DatabasesArgs{\n\t\t\tDbName:     pulumi.StringRef(\"\"),\n\t\t\tInstanceId: \"\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = Rds_mysqlFunctions.Databases();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:rds_mysql:Databases\n      Arguments:\n        dbName:\n        instanceId:\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Databases.\n",
                "properties": {
                    "dbName": {
                        "type": "string",
                        "description": "The name of the RDS database.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the RDS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of RDS database.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Databases.\n",
                "properties": {
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_mysql/DatabasesDatabase:DatabasesDatabase"
                        },
                        "description": "The collection of RDS instance account query.\n"
                    },
                    "dbName": {
                        "type": "string",
                        "description": "The name of the RDS database. This field supports fuzzy queries.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of RDS database query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databases",
                    "instanceId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:rds_mysql/instances:Instances": {
            "description": "Use this data source to query detailed information of rds mysql instances\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultInstances = pulumi.output(volcengine.rds_mysql.Instances({\n    instanceId: \"mysql-72da4258c2c7\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds_mysql.instances(instance_id=\"mysql-72da4258c2c7\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Rds_mysql.Instances.InvokeAsync(new Volcengine.Rds_mysql.InstancesArgs\n        {\n            InstanceId = \"mysql-72da4258c2c7\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_mysql.Instances(ctx, \u0026rds_mysql.InstancesArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"mysql-72da4258c2c7\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = Rds_mysqlFunctions.Instances();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:rds_mysql:Instances\n      Arguments:\n        instanceId: mysql-72da4258c2c7\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Instances.\n",
                "properties": {
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of the RDS instance.\n"
                    },
                    "createTimeEnd": {
                        "type": "string",
                        "description": "The end time of creating RDS instance.\n"
                    },
                    "createTimeStart": {
                        "type": "string",
                        "description": "The start time of creating RDS instance.\n"
                    },
                    "dbEngineVersion": {
                        "type": "string",
                        "description": "The version of the RDS instance.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the RDS instance.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of the RDS instance.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The status of the RDS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of RDS instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone of the RDS instance.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Instances.\n",
                "properties": {
                    "chargeType": {
                        "type": "string",
                        "description": "Payment type. Value:\nPostPaid - Pay-As-You-Go\nPrePaid - Yearly and monthly (default).\n"
                    },
                    "createTimeEnd": {
                        "type": "string"
                    },
                    "createTimeStart": {
                        "type": "string"
                    },
                    "dbEngineVersion": {
                        "type": "string",
                        "description": "The engine version of the RDS instance.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Instance ID.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of the RDS instance.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The status of the RDS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "rdsMysqlInstances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_mysql/InstancesRdsMysqlInstance:InstancesRdsMysqlInstance"
                        },
                        "description": "The collection of RDS instance query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of RDS instance query.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone of the RDS instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "rdsMysqlInstances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:rds_v2/rdsInstancesV2:RdsInstancesV2": {
            "description": "(Deprecated! Recommend use volcengine_rds_mysql_*** replace) Use this data source to query detailed information of rds instances v2\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRdsInstancesV2 = pulumi.output(volcengine.rds_v2.RdsInstancesV2());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.rds_v2.rds_instances_v2()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Rds_v2.RdsInstancesV2.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/rds_v2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_v2\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rds_v2.RdsInstancesV2(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = Rds_v2Functions.RdsInstancesV2();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:rds_v2:RdsInstancesV2\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking RdsInstancesV2.\n",
                "properties": {
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of the RDS instance.\n"
                    },
                    "createTimeEnd": {
                        "type": "string",
                        "description": "The end time of creating RDS instance.\n"
                    },
                    "createTimeStart": {
                        "type": "string",
                        "description": "The start time of creating RDS instance.\n"
                    },
                    "dbEngineVersion": {
                        "type": "string",
                        "description": "The version of the RDS instance, Value:\nMySQL Community:\nMySQL_5.7 - MySQL 5.7\nMySQL_8_0 - MySQL 8.0\nPostgreSQL Community:\nPostgreSQL_11 - PostgreSQL 11\nPostgreSQL_12 - PostgreSQL 12\nMicrosoft SQL Server: Not available at this time\nSQLServer_2019 - SQL Server 2019\nveDB for MySQL:\nMySQL_8_0 - MySQL 8.0\nveDB for PostgreSQL:\nPostgreSQL_13 - PostgreSQL 13.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the RDS instance.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of the RDS instance.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The status of the RDS instance, Value:\nRunning - running\nCreating - Creating\nDeleting - Deleting\nRestarting - Restarting\nRestoring - Restoring\nUpdating - changing\nUpgrading - Upgrading\nError - the error.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of the RDS instance, Value:\nValue:\nRDS for MySQL:\nHA - high availability version;\nRDS for PostgreSQL:\nHA - high availability version;\nMicrosoft SQL Server: Not available at this time\nEnterprise - Enterprise Edition\nStandard - Standard Edition\nWeb - Web version\nveDB for MySQL:\nCluster - Cluster Edition\nveDB for PostgreSQL:\nCluster - Cluster Edition\nMySQL Sharding:\nHA - high availability version;.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of RDS instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone of the RDS instance.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by RdsInstancesV2.\n",
                "properties": {
                    "chargeType": {
                        "type": "string",
                        "description": "Payment type. Value:\nPostPaid - Pay-As-You-Go\nPrePaid - Yearly and monthly (default).\n"
                    },
                    "createTimeEnd": {
                        "type": "string"
                    },
                    "createTimeStart": {
                        "type": "string"
                    },
                    "dbEngineVersion": {
                        "type": "string",
                        "description": "The engine version of the RDS instance.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Instance ID.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of the RDS instance.\n"
                    },
                    "instanceStatus": {
                        "type": "string",
                        "description": "The status of the RDS instance.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of the RDS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "rdsInstances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:rds_v2/RdsInstancesV2RdsInstance:RdsInstancesV2RdsInstance"
                        },
                        "description": "The collection of RDS instance query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of RDS instance query.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone of the RDS instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "rdsInstances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:redis/accounts:Accounts": {
            "description": "Use this data source to query detailed information of redis accounts\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAccounts = pulumi.output(volcengine.redis.Accounts({\n    instanceId: \"redis-cn0398aizj8cwmopx\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.redis.accounts(instance_id=\"redis-cn0398aizj8cwmopx\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Redis.Accounts.InvokeAsync(new Volcengine.Redis.AccountsArgs\n        {\n            InstanceId = \"redis-cn0398aizj8cwmopx\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/redis\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.Accounts(ctx, \u0026redis.AccountsArgs{\n\t\t\tInstanceId: \"redis-cn0398aizj8cwmopx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RedisFunctions.Accounts();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:redis:Accounts\n      Arguments:\n        instanceId: redis-cn0398aizj8cwmopx\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Accounts.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The name of the redis account.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the Redis instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Accounts.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The name of the redis account.\n"
                    },
                    "accounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/AccountsAccount:AccountsAccount"
                        },
                        "description": "The collection of redis instance account query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of instance.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of redis accounts query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accounts",
                    "instanceId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:redis/allowLists:AllowLists": {
            "description": "Use this data source to query detailed information of redis allow lists\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAllowLists = pulumi.output(volcengine.redis.AllowLists({\n    regionId: \"cn-beijing\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.redis.allow_lists(region_id=\"cn-beijing\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Redis.AllowLists.InvokeAsync(new Volcengine.Redis.AllowListsArgs\n        {\n            RegionId = \"cn-beijing\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/redis\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.AllowLists(ctx, \u0026redis.AllowListsArgs{\n\t\t\tRegionId: \"cn-beijing\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RedisFunctions.AllowLists();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:redis:AllowLists\n      Arguments:\n        regionId: cn-beijing\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking AllowLists.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The Id of instance.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Allow List.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The Id of region.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by AllowLists.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/AllowListsAllowList:AllowListsAllowList"
                        },
                        "description": "Information of list of allow list.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of instance.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of allow list query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowLists",
                    "regionId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:redis/backups:Backups": {
            "description": "Use this data source to query detailed information of redis backups\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultBackups = pulumi.output(volcengine.redis.Backups({\n    backupStrategyLists: [\"ManualBackup\"],\n    instanceId: \"redis-cnlfvrv4qye6u4lpa\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.redis.backups(backup_strategy_lists=[\"ManualBackup\"],\n    instance_id=\"redis-cnlfvrv4qye6u4lpa\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Redis.Backups.InvokeAsync(new Volcengine.Redis.BackupsArgs\n        {\n            BackupStrategyLists = \n            {\n                \"ManualBackup\",\n            },\n            InstanceId = \"redis-cnlfvrv4qye6u4lpa\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/redis\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.Backups(ctx, \u0026redis.BackupsArgs{\n\t\t\tBackupStrategyLists: []string{\n\t\t\t\t\"ManualBackup\",\n\t\t\t},\n\t\t\tInstanceId: \"redis-cnlfvrv4qye6u4lpa\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RedisFunctions.Backups();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:redis:Backups\n      Arguments:\n        backupStrategyLists:\n          - ManualBackup\n        instanceId: redis-cnlfvrv4qye6u4lpa\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Backups.\n",
                "properties": {
                    "backupStrategyLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of backup strategy, support AutomatedBackup and ManualBackup.\n"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "Query end time.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Query start time.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Backups.\n",
                "properties": {
                    "backupStrategyLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "backups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/BackupsBackup:BackupsBackup"
                        },
                        "description": "Information of backups.\n"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "End time of backup.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of instance.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Start time of backup.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of backup query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "backups",
                    "instanceId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:redis/instances:Instances": {
            "description": "Use this data source to query detailed information of redis instances\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultInstances = pulumi.output(volcengine.redis.Instances({\n    instanceId: \"redis-cnlf2lh1kksvv****\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.redis.instances(instance_id=\"redis-cnlf2lh1kksvv****\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Redis.Instances.InvokeAsync(new Volcengine.Redis.InstancesArgs\n        {\n            InstanceId = \"redis-cnlf2lh1kksvv****\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/redis\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.Instances(ctx, \u0026redis.InstancesArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"redis-cnlf2lh1kksvv****\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RedisFunctions.Instances();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:redis:Instances\n      Arguments:\n        instanceId: redis-cnlf2lh1kksvv****\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Instances.\n",
                "properties": {
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of redis instance to query. Valid values: `PostPaid`, `PrePaid`.\n"
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "The engine version of redis instance to query. Valid values: `4.0`, `5.0`, `6.0`.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of redis instance to query. This field supports fuzzy queries.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of redis instance to query. This field supports fuzzy queries.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A name regex of redis.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The project name of redis instance to query.\n"
                    },
                    "shardedCluster": {
                        "type": "integer",
                        "description": "Whether enable sharded cluster for redis instance. Valid values: 0, 1.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of redis instance to query.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/InstancesTag:InstancesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc id of redis instance to query. This field supports fuzzy queries.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone id of redis instance to query. This field supports fuzzy queries.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Instances.\n",
                "properties": {
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of the redis instance.\n"
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "The engine version of the redis instance.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the redis instance.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of the redis instance.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/InstancesInstance:InstancesInstance"
                        },
                        "description": "The collection of redis instances query.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The project name of the redis instance.\n"
                    },
                    "shardedCluster": {
                        "type": "integer",
                        "description": "Whether enable sharded cluster for the redis instance.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the redis instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/InstancesTag:InstancesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of redis instances query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc ID of the redis instance.\n"
                    },
                    "zoneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:redis/pitrTimeWindows:PitrTimeWindows": {
            "inputs": {
                "description": "A collection of arguments for invoking PitrTimeWindows.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ids"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by PitrTimeWindows.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "periods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/PitrTimeWindowsPeriod:PitrTimeWindowsPeriod"
                        }
                    },
                    "totalCount": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "periods",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:redis/regions:Regions": {
            "description": "Use this data source to query detailed information of redis regions\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRegions = pulumi.output(volcengine.redis.Regions({\n    regionId: \"cn-north-3\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.redis.regions(region_id=\"cn-north-3\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Redis.Regions.InvokeAsync(new Volcengine.Redis.RegionsArgs\n        {\n            RegionId = \"cn-north-3\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/redis\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.Regions(ctx, \u0026redis.RegionsArgs{\n\t\t\tRegionId: pulumi.StringRef(\"cn-north-3\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RedisFunctions.Regions();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:redis:Regions\n      Arguments:\n        regionId: cn-north-3\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Regions.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "Target region info.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Regions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The id of the region.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/RegionsRegion:RegionsRegion"
                        },
                        "description": "The collection of region query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of region query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regions",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:redis/zones:Zones": {
            "description": "Use this data source to query detailed information of redis zones\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultZones = pulumi.output(volcengine.redis.Zones({\n    regionId: \"cn-north-3\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.redis.zones(region_id=\"cn-north-3\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Redis.Zones.InvokeAsync(new Volcengine.Redis.ZonesArgs\n        {\n            RegionId = \"cn-north-3\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/redis\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redis.Zones(ctx, \u0026redis.ZonesArgs{\n\t\t\tRegionId: \"cn-north-3\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = RedisFunctions.Zones();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:redis:Zones\n      Arguments:\n        regionId: cn-north-3\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Zones.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The Id of Region.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Zones.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of zone query.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:redis/ZonesZone:ZonesZone"
                        },
                        "description": "The collection of zone query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "regionId",
                    "totalCount",
                    "zones",
                    "id"
                ]
            }
        },
        "volcengine:tls/alarmNotifyGroups:AlarmNotifyGroups": {
            "description": "Use this data source to query detailed information of tls alarm notify groups\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAlarmNotifyGroups = pulumi.output(volcengine.tls.AlarmNotifyGroups());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.alarm_notify_groups()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.AlarmNotifyGroups.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.AlarmNotifyGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.AlarmNotifyGroups();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:AlarmNotifyGroups\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking AlarmNotifyGroups.\n",
                "properties": {
                    "alarmNotifyGroupId": {
                        "type": "string",
                        "description": "The id of the alarm notify group.\n"
                    },
                    "alarmNotifyGroupName": {
                        "type": "string",
                        "description": "The name of the alarm notify group.\n"
                    },
                    "iamProjectName": {
                        "type": "string",
                        "description": "The name of the iam project.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "receiverName": {
                        "type": "string",
                        "description": "The name of the receiver.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by AlarmNotifyGroups.\n",
                "properties": {
                    "alarmNotifyGroupId": {
                        "type": "string",
                        "description": "The id of the notify group.\n"
                    },
                    "alarmNotifyGroupName": {
                        "type": "string",
                        "description": "Name of the notification group.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/AlarmNotifyGroupsGroup:AlarmNotifyGroupsGroup"
                        },
                        "description": "The list of the notify groups.\n"
                    },
                    "iamProjectName": {
                        "type": "string",
                        "description": "The iam project name.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "receiverName": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tls/alarms:Alarms": {
            "description": "Use this data source to query detailed information of tls alarms\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAlarms = pulumi.output(volcengine.tls.Alarms({\n    projectId: \"cc44f8b6-0328-4622-b043-023fca735cd4\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.alarms(project_id=\"cc44f8b6-0328-4622-b043-023fca735cd4\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.Alarms.InvokeAsync(new Volcengine.Tls.AlarmsArgs\n        {\n            ProjectId = \"cc44f8b6-0328-4622-b043-023fca735cd4\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.Alarms(ctx, \u0026tls.AlarmsArgs{\n\t\t\tProjectId: \"cc44f8b6-0328-4622-b043-023fca735cd4\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.Alarms();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:Alarms\n      Arguments:\n        projectId: cc44f8b6-0328-4622-b043-023fca735cd4\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Alarms.\n",
                "properties": {
                    "alarmId": {
                        "type": "string",
                        "description": "The alarm id.\n"
                    },
                    "alarmName": {
                        "type": "string",
                        "description": "The alarm name.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id.\n"
                    },
                    "status": {
                        "type": "boolean",
                        "description": "The status.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The topic id.\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The topic name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Alarms.\n",
                "properties": {
                    "alarmId": {
                        "type": "string",
                        "description": "The alarm id.\n"
                    },
                    "alarmName": {
                        "type": "string",
                        "description": "The name of the alarm.\n"
                    },
                    "alarms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/AlarmsAlarm:AlarmsAlarm"
                        },
                        "description": "The list of alarms.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id.\n"
                    },
                    "status": {
                        "type": "boolean",
                        "description": "Whether to enable the alert policy. The default value is true, that is, on.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The id of the topic.\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The name of the topic.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alarms",
                    "projectId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tls/hostGroups:HostGroups": {
            "description": "Use this data source to query detailed information of tls host groups\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultHostGroups = pulumi.output(volcengine.tls.HostGroups({\n    hostGroupId: \"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\",\n    hostGroupName: \"cn\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.host_groups(host_group_id=\"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\",\n    host_group_name=\"cn\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.HostGroups.InvokeAsync(new Volcengine.Tls.HostGroupsArgs\n        {\n            HostGroupId = \"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\",\n            HostGroupName = \"cn\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.HostGroups(ctx, \u0026tls.HostGroupsArgs{\n\t\t\tHostGroupId:   pulumi.StringRef(\"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\"),\n\t\t\tHostGroupName: pulumi.StringRef(\"cn\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.HostGroups();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:HostGroups\n      Arguments:\n        hostGroupId: fbea6619-7b0c-40f3-ac7e-45c63e3f676e\n        hostGroupName: cn\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking HostGroups.\n",
                "properties": {
                    "autoUpdate": {
                        "type": "boolean",
                        "description": "Whether enable auto update.\n"
                    },
                    "hostGroupId": {
                        "type": "string",
                        "description": "The id of host group.\n"
                    },
                    "hostGroupName": {
                        "type": "string",
                        "description": "The name of host group.\n"
                    },
                    "hostIdentifier": {
                        "type": "string",
                        "description": "The identifier of host.\n"
                    },
                    "iamProjectName": {
                        "type": "string",
                        "description": "The project name of iam.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "serviceLogging": {
                        "type": "boolean",
                        "description": "Whether enable service logging.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by HostGroups.\n",
                "properties": {
                    "autoUpdate": {
                        "type": "boolean",
                        "description": "Whether enable auto update.\n"
                    },
                    "hostGroupId": {
                        "type": "string",
                        "description": "The id of host group.\n"
                    },
                    "hostGroupName": {
                        "type": "string",
                        "description": "The name of host group.\n"
                    },
                    "hostIdentifier": {
                        "type": "string",
                        "description": "The identifier of host.\n"
                    },
                    "iamProjectName": {
                        "type": "string",
                        "description": "The project name of iam.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/HostGroupsInfo:HostGroupsInfo"
                        },
                        "description": "The collection of query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "serviceLogging": {
                        "type": "boolean",
                        "description": "Whether enable service logging.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "infos",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tls/hosts:Hosts": {
            "description": "Use this data source to query detailed information of tls hosts\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultHosts = pulumi.output(volcengine.tls.Hosts({\n    hostGroupId: \"527102e2-1e4f-45f4-a990-751152125da7\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.hosts(host_group_id=\"527102e2-1e4f-45f4-a990-751152125da7\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.Hosts.InvokeAsync(new Volcengine.Tls.HostsArgs\n        {\n            HostGroupId = \"527102e2-1e4f-45f4-a990-751152125da7\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.Hosts(ctx, \u0026tls.HostsArgs{\n\t\t\tHostGroupId: \"527102e2-1e4f-45f4-a990-751152125da7\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.Hosts();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:Hosts\n      Arguments:\n        hostGroupId: 527102e2-1e4f-45f4-a990-751152125da7\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Hosts.\n",
                "properties": {
                    "heartbeatStatus": {
                        "type": "integer",
                        "description": "The the heartbeat status.\n"
                    },
                    "hostGroupId": {
                        "type": "string",
                        "description": "The id of host group.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The ip address.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Hosts.\n",
                "properties": {
                    "heartbeatStatus": {
                        "type": "integer",
                        "description": "The the heartbeat status.\n"
                    },
                    "hostGroupId": {
                        "type": "string",
                        "description": "The id of host group.\n"
                    },
                    "hostInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/HostsHostInfo:HostsHostInfo"
                        },
                        "description": "The collection of query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The ip address.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostGroupId",
                    "hostInfos",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tls/indexes:Indexes": {
            "description": "Use this data source to query detailed information of tls indexes\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultIndexes = pulumi.output(volcengine.tls.Indexes({\n    ids: [\"65d67d34-c5b4-4ec8-b3a9-175d3366****\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.indexes(ids=[\"65d67d34-c5b4-4ec8-b3a9-175d3366****\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.Indexes.InvokeAsync(new Volcengine.Tls.IndexesArgs\n        {\n            Ids = \n            {\n                \"65d67d34-c5b4-4ec8-b3a9-175d3366****\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.Indexes(ctx, \u0026tls.IndexesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"65d67d34-c5b4-4ec8-b3a9-175d3366****\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.Indexes();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:Indexes\n      Arguments:\n        ids:\n          - 65d67d34-c5b4-4ec8-b3a9-175d3366****\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Indexes.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of topic id of tls index.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Indexes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tlsIndexes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/IndexesTlsIndex:IndexesTlsIndex"
                        },
                        "description": "The collection of tls index query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of tls index query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "tlsIndexes",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tls/kafkaConsumers:KafkaConsumers": {
            "description": "Use this data source to query detailed information of tls kafka consumers\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultKafkaConsumers = pulumi.output(volcengine.tls.KafkaConsumers({\n    ids: [\n        \"65d67d34-c5b4-4ec8-b3a9-175d33668b45\",\n        \"cfb5c08b-0c7a-44fa-8971-8afc12f1b123\",\n        \"edf051ed-3c46-49ba-9339-bea628fedc15\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.kafka_consumers(ids=[\n    \"65d67d34-c5b4-4ec8-b3a9-175d33668b45\",\n    \"cfb5c08b-0c7a-44fa-8971-8afc12f1b123\",\n    \"edf051ed-3c46-49ba-9339-bea628fedc15\",\n])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.KafkaConsumers.InvokeAsync(new Volcengine.Tls.KafkaConsumersArgs\n        {\n            Ids = \n            {\n                \"65d67d34-c5b4-4ec8-b3a9-175d33668b45\",\n                \"cfb5c08b-0c7a-44fa-8971-8afc12f1b123\",\n                \"edf051ed-3c46-49ba-9339-bea628fedc15\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.KafkaConsumers(ctx, \u0026tls.KafkaConsumersArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"65d67d34-c5b4-4ec8-b3a9-175d33668b45\",\n\t\t\t\t\"cfb5c08b-0c7a-44fa-8971-8afc12f1b123\",\n\t\t\t\t\"edf051ed-3c46-49ba-9339-bea628fedc15\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.KafkaConsumers();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:KafkaConsumers\n      Arguments:\n        ids:\n          - 65d67d34-c5b4-4ec8-b3a9-175d33668b45\n          - cfb5c08b-0c7a-44fa-8971-8afc12f1b123\n          - edf051ed-3c46-49ba-9339-bea628fedc15\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking KafkaConsumers.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of topic IDs.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by KafkaConsumers.\n",
                "properties": {
                    "datas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/KafkaConsumersData:KafkaConsumersData"
                        },
                        "description": "The collection of query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "datas",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tls/projects:Projects": {
            "description": "Use this data source to query detailed information of tls projects\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultProjects = pulumi.output(volcengine.tls.Projects({\n    projectId: \"e020c978-4f05-40e1-9167-0113d3ef****\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.projects(project_id=\"e020c978-4f05-40e1-9167-0113d3ef****\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.Projects.InvokeAsync(new Volcengine.Tls.ProjectsArgs\n        {\n            ProjectId = \"e020c978-4f05-40e1-9167-0113d3ef****\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.Projects(ctx, \u0026tls.ProjectsArgs{\n\t\t\tProjectId: pulumi.StringRef(\"e020c978-4f05-40e1-9167-0113d3ef****\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.Projects();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:Projects\n      Arguments:\n        projectId: e020c978-4f05-40e1-9167-0113d3ef****\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Projects.\n",
                "properties": {
                    "iamProjectName": {
                        "type": "string",
                        "description": "The IAM project name of the tls project.\n"
                    },
                    "isFullName": {
                        "type": "boolean",
                        "description": "Whether to match accurately when filtering based on ProjectName.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of tls project.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The name of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/ProjectsTag:ProjectsTag"
                        },
                        "description": "Tags.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Projects.\n",
                "properties": {
                    "iamProjectName": {
                        "type": "string",
                        "description": "The IAM project name of the tls project.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isFullName": {
                        "type": "boolean"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the tls project.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The name of the tls project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/ProjectsTag:ProjectsTag"
                        },
                        "description": "Tags.\n"
                    },
                    "tlsProjects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/ProjectsTlsProject:ProjectsTlsProject"
                        },
                        "description": "The collection of tls project query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of tls project query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tlsProjects",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tls/ruleAppliers:RuleAppliers": {
            "description": "Use this data source to query detailed information of tls rule appliers\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRuleAppliers = pulumi.output(volcengine.tls.RuleAppliers({\n    hostGroupId: \"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.rule_appliers(host_group_id=\"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.RuleAppliers.InvokeAsync(new Volcengine.Tls.RuleAppliersArgs\n        {\n            HostGroupId = \"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.RuleAppliers(ctx, \u0026tls.RuleAppliersArgs{\n\t\t\tHostGroupId: \"fbea6619-7b0c-40f3-ac7e-45c63e3f676e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.RuleAppliers();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:RuleAppliers\n      Arguments:\n        hostGroupId: fbea6619-7b0c-40f3-ac7e-45c63e3f676e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking RuleAppliers.\n",
                "properties": {
                    "hostGroupId": {
                        "type": "string",
                        "description": "The host group id.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by RuleAppliers.\n",
                "properties": {
                    "hostGroupId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/RuleAppliersRule:RuleAppliersRule"
                        },
                        "description": "The rules list.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostGroupId",
                    "rules",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tls/rules:Rules": {
            "description": "Use this data source to query detailed information of tls rules\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRules = pulumi.output(volcengine.tls.Rules({\n    projectId: \"cc44f8b6-0328-4622-b043-023fca735cd4\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.rules(project_id=\"cc44f8b6-0328-4622-b043-023fca735cd4\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.Rules.InvokeAsync(new Volcengine.Tls.RulesArgs\n        {\n            ProjectId = \"cc44f8b6-0328-4622-b043-023fca735cd4\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.Rules(ctx, \u0026tls.RulesArgs{\n\t\t\tProjectId: \"cc44f8b6-0328-4622-b043-023fca735cd4\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.Rules();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:Rules\n      Arguments:\n        projectId: cc44f8b6-0328-4622-b043-023fca735cd4\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Rules.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id.\n"
                    },
                    "ruleId": {
                        "type": "string",
                        "description": "The rule id.\n"
                    },
                    "ruleName": {
                        "type": "string",
                        "description": "The rule name.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The topic id.\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The topic name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Rules.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "ruleId": {
                        "type": "string",
                        "description": "The rule id.\n"
                    },
                    "ruleName": {
                        "type": "string",
                        "description": "The rule name.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/RulesRule:RulesRule"
                        },
                        "description": "The rules list.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The topic id.\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The topic name.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "rules",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tls/shards:Shards": {
            "description": "Use this data source to query detailed information of tls shards\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultShards = pulumi.output(volcengine.tls.Shards({\n    topicId: \"edf051ed-3c46-49ba-9339-bea628fedc15\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.shards(topic_id=\"edf051ed-3c46-49ba-9339-bea628fedc15\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.Shards.InvokeAsync(new Volcengine.Tls.ShardsArgs\n        {\n            TopicId = \"edf051ed-3c46-49ba-9339-bea628fedc15\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.Shards(ctx, \u0026tls.ShardsArgs{\n\t\t\tTopicId: \"edf051ed-3c46-49ba-9339-bea628fedc15\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.Shards();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:Shards\n      Arguments:\n        topicId: edf051ed-3c46-49ba-9339-bea628fedc15\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Shards.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The id of topic.\n"
                    }
                },
                "type": "object",
                "required": [
                    "topicId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Shards.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "shards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/ShardsShard:ShardsShard"
                        },
                        "description": "The collection of query.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The ID of topic.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "shards",
                    "topicId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tls/topics:Topics": {
            "description": "Use this data source to query detailed information of tls topics\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultTopics = pulumi.output(volcengine.tls.Topics({\n    projectId: \"e020c978-4f05-40e1-9167-0113d3ef****\",\n    topicId: \"edf051ed-3c46-49ba-9339-bea628fe****\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tls.topics(project_id=\"e020c978-4f05-40e1-9167-0113d3ef****\",\n    topic_id=\"edf051ed-3c46-49ba-9339-bea628fe****\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tls.Topics.InvokeAsync(new Volcengine.Tls.TopicsArgs\n        {\n            ProjectId = \"e020c978-4f05-40e1-9167-0113d3ef****\",\n            TopicId = \"edf051ed-3c46-49ba-9339-bea628fe****\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tls.Topics(ctx, \u0026tls.TopicsArgs{\n\t\t\tProjectId: \"e020c978-4f05-40e1-9167-0113d3ef****\",\n\t\t\tTopicId:   pulumi.StringRef(\"edf051ed-3c46-49ba-9339-bea628fe****\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TlsFunctions.Topics();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tls:Topics\n      Arguments:\n        projectId: e020c978-4f05-40e1-9167-0113d3ef****\n        topicId: edf051ed-3c46-49ba-9339-bea628fe****\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Topics.\n",
                "properties": {
                    "isFullName": {
                        "type": "boolean",
                        "description": "Whether to match accurately when filtering based on TopicName.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of tls topic.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id of tls topic.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/TopicsTag:TopicsTag"
                        },
                        "description": "Tags.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The id of tls topic. This field supports fuzzy queries. It is not supported to specify both TopicName and TopicId at the same time.\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The name of tls topic. This field supports fuzzy queries. It is not supported to specify both TopicName and TopicId at the same time.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by Topics.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isFullName": {
                        "type": "boolean"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id of the tls topic.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/TopicsTag:TopicsTag"
                        },
                        "description": "Tags.\n"
                    },
                    "tlsTopics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tls/TopicsTlsTopic:TopicsTlsTopic"
                        },
                        "description": "The collection of tls topic query.\n"
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The ID of the tls topic.\n"
                    },
                    "topicName": {
                        "type": "string",
                        "description": "The name of the tls topic.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of tls topic query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "tlsTopics",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tos/bucketObjects:BucketObjects": {
            "description": "Use this data source to query detailed information of tos objects\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultBucketObjects = pulumi.output(volcengine.tos.BucketObjects({\n    bucketName: \"test\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tos.bucket_objects(bucket_name=\"test\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tos.BucketObjects.InvokeAsync(new Volcengine.Tos.BucketObjectsArgs\n        {\n            BucketName = \"test\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tos\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tos\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tos.BucketObjects(ctx, \u0026tos.BucketObjectsArgs{\n\t\t\tBucketName: \"test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TosFunctions.BucketObjects();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tos:BucketObjects\n      Arguments:\n        bucketName: test\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking BucketObjects.\n",
                "properties": {
                    "bucketName": {
                        "type": "string",
                        "description": "The name the TOS bucket.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of TOS Object.\n"
                    },
                    "objectName": {
                        "type": "string",
                        "description": "The name the TOS Object.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bucketName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by BucketObjects.\n",
                "properties": {
                    "bucketName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "objectName": {
                        "type": "string"
                    },
                    "objects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tos/BucketObjectsObject:BucketObjectsObject"
                        },
                        "description": "The collection of TOS Object query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of TOS Object query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bucketName",
                    "objects",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:tos/buckets:Buckets": {
            "description": "Use this data source to query detailed information of tos buckets\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultBuckets = pulumi.output(volcengine.tos.Buckets({\n    nameRegex: \"test\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.tos.buckets(name_regex=\"test\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Tos.Buckets.InvokeAsync(new Volcengine.Tos.BucketsArgs\n        {\n            NameRegex = \"test\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/tos\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tos\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tos.Buckets(ctx, \u0026tos.BucketsArgs{\n\t\t\tNameRegex: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = TosFunctions.Buckets();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:tos:Buckets\n      Arguments:\n        nameRegex: test\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Buckets.\n",
                "properties": {
                    "bucketName": {
                        "type": "string",
                        "description": "The name the TOS bucket.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of TOS bucket.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Buckets.\n",
                "properties": {
                    "bucketName": {
                        "type": "string"
                    },
                    "buckets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:tos/BucketsBucket:BucketsBucket"
                        },
                        "description": "The collection of TOS bucket query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of TOS bucket query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "buckets",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:veenedge/availableResources:AvailableResources": {
            "description": "Use this data source to query detailed information of veenedge available resources\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAvailableResources = pulumi.output(volcengine.veenedge.AvailableResources({\n    bandwithLimit: 20,\n    cloudDiskType: \"CloudSSD\",\n    instanceType: \"ve******rge\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.veenedge.available_resources(bandwith_limit=20,\n    cloud_disk_type=\"CloudSSD\",\n    instance_type=\"ve******rge\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Veenedge.AvailableResources.InvokeAsync(new Volcengine.Veenedge.AvailableResourcesArgs\n        {\n            BandwithLimit = 20,\n            CloudDiskType = \"CloudSSD\",\n            InstanceType = \"ve******rge\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := veenedge.AvailableResources(ctx, \u0026veenedge.AvailableResourcesArgs{\n\t\t\tBandwithLimit: 20,\n\t\t\tCloudDiskType: \"CloudSSD\",\n\t\t\tInstanceType:  \"ve******rge\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VeenedgeFunctions.AvailableResources();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:veenedge:AvailableResources\n      Arguments:\n        bandwithLimit: 20\n        cloudDiskType: CloudSSD\n        instanceType: ve******rge\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking AvailableResources.\n",
                "properties": {
                    "bandwithLimit": {
                        "type": "integer",
                        "description": "The limit of bandwidth.\n"
                    },
                    "cloudDiskType": {
                        "type": "string",
                        "description": "The type of storage. The value can be `CloudHDD` or `CloudSSD`.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bandwithLimit",
                    "cloudDiskType",
                    "instanceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by AvailableResources.\n",
                "properties": {
                    "bandwithLimit": {
                        "type": "integer"
                    },
                    "cloudDiskType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:veenedge/AvailableResourcesRegion:AvailableResourcesRegion"
                        },
                        "description": "The collection of resource query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of resource query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bandwithLimit",
                    "cloudDiskType",
                    "instanceType",
                    "regions",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:veenedge/cloudServers:CloudServers": {
            "description": "Use this data source to query detailed information of veenedge cloud servers\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultCloudServers = pulumi.output(volcengine.veenedge.CloudServers());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.veenedge.cloud_servers()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Veenedge.CloudServers.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := veenedge.CloudServers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VeenedgeFunctions.CloudServers();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:veenedge:CloudServers\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking CloudServers.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of cloud server IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Cloud Server.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by CloudServers.\n",
                "properties": {
                    "cloudServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:veenedge/CloudServersCloudServer:CloudServersCloudServer"
                        },
                        "description": "The collection of cloud servers query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of cloud servers query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudServers",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:veenedge/instanceTypes:InstanceTypes": {
            "description": "Use this data source to query detailed information of veenedge instance types\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultInstanceTypes = pulumi.output(volcengine.veenedge.InstanceTypes());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.veenedge.instance_types()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Veenedge.InstanceTypes.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := veenedge.InstanceTypes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VeenedgeFunctions.InstanceTypes();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:veenedge:InstanceTypes\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking InstanceTypes.\n",
                "properties": {
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by InstanceTypes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceTypeConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:veenedge/InstanceTypesInstanceTypeConfig:InstanceTypesInstanceTypeConfig"
                        },
                        "description": "The collection of instance types query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of instance types query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceTypeConfigs",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:veenedge/instances:Instances": {
            "description": "Use this data source to query detailed information of veenedge instances\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultInstances = pulumi.output(volcengine.veenedge.Instances({\n    ids: [\n        \"veen28*****21\",\n        \"veen177110*****172\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.veenedge.instances(ids=[\n    \"veen28*****21\",\n    \"veen177110*****172\",\n])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Veenedge.Instances.InvokeAsync(new Volcengine.Veenedge.InstancesArgs\n        {\n            Ids = \n            {\n                \"veen28*****21\",\n                \"veen177110*****172\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := veenedge.Instances(ctx, \u0026veenedge.InstancesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"veen28*****21\",\n\t\t\t\t\"veen177110*****172\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VeenedgeFunctions.Instances();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:veenedge:Instances\n      Arguments:\n        ids:\n          - veen28*****21\n          - veen177110*****172\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Instances.\n",
                "properties": {
                    "cloudServerIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of cloud server ids.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of instance IDs.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of instance names.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of instance status. The value can be `opening` or `starting` or `running` or `stopping` or `stop` or `rebooting` or `terminating`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Instances.\n",
                "properties": {
                    "cloudServerIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:veenedge/InstancesInstance:InstancesInstance"
                        },
                        "description": "The collection of instance query.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of instance query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:veenedge/vpcs:Vpcs": {
            "description": "Use this data source to query detailed information of veenedge vpcs\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.veenedge.Vpcs());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.veenedge.vpcs()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Veenedge.Vpcs.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := veenedge.Vpcs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = VeenedgeFunctions.Vpcs();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:veenedge:Vpcs\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Vpcs.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of vpc IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Vpc.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Vpcs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Vpc query.\n"
                    },
                    "vpcInstances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:veenedge/VpcsVpcInstance:VpcsVpcInstance"
                        },
                        "description": "The collection of Vpc query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "vpcInstances",
                    "id"
                ]
            }
        },
        "volcengine:vke/addons:Addons": {
            "description": "Use this data source to query detailed information of vke addons\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAddons = pulumi.output(volcengine.vke.Addons({\n    clusterIds: [\"cccctv1vqtofp49d96ujg\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vke.addons(cluster_ids=[\"cccctv1vqtofp49d96ujg\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vke.Addons.InvokeAsync(new Volcengine.Vke.AddonsArgs\n        {\n            ClusterIds = \n            {\n                \"cccctv1vqtofp49d96ujg\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.Addons(ctx, \u0026vke.AddonsArgs{\n\t\t\tClusterIds: []string{\n\t\t\t\t\"cccctv1vqtofp49d96ujg\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VkeFunctions.Addons();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vke:Addons\n      Arguments:\n        clusterIds:\n          - cccctv1vqtofp49d96ujg\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Addons.\n",
                "properties": {
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of Cluster.\n"
                    },
                    "createClientToken": {
                        "type": "string",
                        "description": "ClientToken when the addon is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n"
                    },
                    "deployModes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The deploy model, the value is `Managed` or `Unmanaged`.\n"
                    },
                    "deployNodeTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of addon.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Names of addons.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/AddonsStatus:AddonsStatus"
                        },
                        "description": "Array of addon states to filter.\n"
                    },
                    "updateClientToken": {
                        "type": "string",
                        "description": "The ClientToken when the last addon update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Addons.\n",
                "properties": {
                    "addons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/AddonsAddon:AddonsAddon"
                        },
                        "description": "The collection of addon query.\n"
                    },
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createClientToken": {
                        "type": "string"
                    },
                    "deployModes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "deployNodeTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/AddonsStatus:AddonsStatus"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of addon query.\n"
                    },
                    "updateClientToken": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "addons",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vke/clusters:Clusters": {
            "description": "Use this data source to query detailed information of vke clusters\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultClusters = pulumi.output(volcengine.vke.Clusters({\n    podsConfigPodNetworkMode: \"VpcCniShared\",\n    statuses: [{\n        conditionsType: \"Progressing\",\n        phase: \"Creating\",\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vke.clusters(pods_config_pod_network_mode=\"VpcCniShared\",\n    statuses=[volcengine.vke.ClustersStatusArgs(\n        conditions_type=\"Progressing\",\n        phase=\"Creating\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vke.Clusters.InvokeAsync(new Volcengine.Vke.ClustersArgs\n        {\n            PodsConfigPodNetworkMode = \"VpcCniShared\",\n            Statuses = \n            {\n                new Volcengine.Vke.Inputs.ClustersStatusArgs\n                {\n                    ConditionsType = \"Progressing\",\n                    Phase = \"Creating\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.Clusters(ctx, \u0026vke.ClustersArgs{\n\t\t\tPodsConfigPodNetworkMode: pulumi.StringRef(\"VpcCniShared\"),\n\t\t\tStatuses: []vke.ClustersStatus{\n\t\t\t\tvke.ClustersStatus{\n\t\t\t\t\tConditionsType: pulumi.StringRef(\"Progressing\"),\n\t\t\t\t\tPhase:          pulumi.StringRef(\"Creating\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VkeFunctions.Clusters();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vke:Clusters\n      Arguments:\n        podsConfigPodNetworkMode: VpcCniShared\n        statuses:\n          - conditionsType: Progressing\n            phase: Creating\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Clusters.\n",
                "properties": {
                    "createClientToken": {
                        "type": "string",
                        "description": "ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n"
                    },
                    "deleteProtectionEnabled": {
                        "type": "boolean",
                        "description": "The delete protection of the cluster, the value is `true` or `false`.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Cluster IDs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Cluster.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "pageNumber": {
                        "type": "integer",
                        "description": "The page number of clusters query.\n"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The page size of clusters query.\n"
                    },
                    "podsConfigPodNetworkMode": {
                        "type": "string",
                        "description": "The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/ClustersStatus:ClustersStatus"
                        },
                        "description": "Array of cluster states to filter. (The elements of the array are logically ORed. A maximum of 15 state array elements can be filled at a time).\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/ClustersTag:ClustersTag"
                        },
                        "description": "Tags.\n"
                    },
                    "updateClientToken": {
                        "type": "string",
                        "description": "The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Clusters.\n",
                "properties": {
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/ClustersCluster:ClustersCluster"
                        },
                        "description": "The collection of VkeCluster query.\n"
                    },
                    "createClientToken": {
                        "type": "string"
                    },
                    "deleteProtectionEnabled": {
                        "type": "boolean",
                        "description": "The delete protection of the cluster, the value is `true` or `false`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "pageNumber": {
                        "type": "integer"
                    },
                    "pageSize": {
                        "type": "integer"
                    },
                    "podsConfigPodNetworkMode": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/ClustersStatus:ClustersStatus"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/ClustersTag:ClustersTag"
                        },
                        "description": "Tags of the Cluster.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Cluster query.\n"
                    },
                    "updateClientToken": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusters",
                    "pageNumber",
                    "pageSize",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vke/kubeconfigs:Kubeconfigs": {
            "description": "Use this data source to query detailed information of vke kubeconfigs\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultKubeconfigs = pulumi.output(volcengine.vke.Kubeconfigs({\n    clusterIds: [\"cce7hb97qtofmj1oi4udg\"],\n    types: [\n        \"Private\",\n        \"Public\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vke.kubeconfigs(cluster_ids=[\"cce7hb97qtofmj1oi4udg\"],\n    types=[\n        \"Private\",\n        \"Public\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vke.Kubeconfigs.InvokeAsync(new Volcengine.Vke.KubeconfigsArgs\n        {\n            ClusterIds = \n            {\n                \"cce7hb97qtofmj1oi4udg\",\n            },\n            Types = \n            {\n                \"Private\",\n                \"Public\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.Kubeconfigs(ctx, \u0026vke.KubeconfigsArgs{\n\t\t\tClusterIds: []string{\n\t\t\t\t\"cce7hb97qtofmj1oi4udg\",\n\t\t\t},\n\t\t\tTypes: []string{\n\t\t\t\t\"Private\",\n\t\t\t\t\"Public\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VkeFunctions.Kubeconfigs();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vke:Kubeconfigs\n      Arguments:\n        clusterIds:\n          - cce7hb97qtofmj1oi4udg\n        types:\n          - Private\n          - Public\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Kubeconfigs.\n",
                "properties": {
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Cluster IDs.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Kubeconfig IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Kubeconfig.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "pageNumber": {
                        "type": "integer",
                        "description": "The page number of Kubeconfigs query.\n"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The page size of Kubeconfigs query.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The type of Kubeconfigs query.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Kubeconfigs.\n",
                "properties": {
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/KubeconfigsKubeconfig:KubeconfigsKubeconfig"
                        },
                        "description": "The collection of VkeKubeconfig query.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "pageNumber": {
                        "type": "integer"
                    },
                    "pageSize": {
                        "type": "integer"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Kubeconfig query.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "kubeconfigs",
                    "pageNumber",
                    "pageSize",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vke/nodePools:NodePools": {
            "description": "Use this data source to query detailed information of vke node pools\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst vkeTest = pulumi.output(volcengine.vke.NodePools({\n    clusterIds: [\"ccabe57fqtofgrbln3dog\"],\n    name: \"demo\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nvke_test = volcengine.vke.node_pools(cluster_ids=[\"ccabe57fqtofgrbln3dog\"],\n    name=\"demo\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vkeTest = Output.Create(Volcengine.Vke.NodePools.InvokeAsync(new Volcengine.Vke.NodePoolsArgs\n        {\n            ClusterIds = \n            {\n                \"ccabe57fqtofgrbln3dog\",\n            },\n            Name = \"demo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.NodePools(ctx, \u0026vke.NodePoolsArgs{\n\t\t\tClusterIds: []string{\n\t\t\t\t\"ccabe57fqtofgrbln3dog\",\n\t\t\t},\n\t\t\tName: pulumi.StringRef(\"demo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vkeTest = VkeFunctions.NodePools();\n\n    }\n}\n```\n```yaml\nvariables:\n  vkeTest:\n    Fn::Invoke:\n      Function: volcengine:vke:NodePools\n      Arguments:\n        clusterIds:\n          - ccabe57fqtofgrbln3dog\n        name: demo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking NodePools.\n",
                "properties": {
                    "autoScalingEnabled": {
                        "type": "boolean",
                        "description": "Is enabled of AutoScaling.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ClusterId of NodePool.\n"
                    },
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ClusterIds of NodePool IDs.\n"
                    },
                    "createClientToken": {
                        "type": "string",
                        "description": "The ClientToken when successfully created.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of NodePool.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Name of NodePool.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of NodePool.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/NodePoolsStatus:NodePoolsStatus"
                        },
                        "description": "The Status of NodePool.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/NodePoolsTag:NodePoolsTag"
                        },
                        "description": "Tags.\n"
                    },
                    "updateClientToken": {
                        "type": "string",
                        "description": "The ClientToken when last update was successful.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by NodePools.\n",
                "properties": {
                    "autoScalingEnabled": {
                        "type": "boolean"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ClusterId of NodePool.\n"
                    },
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createClientToken": {
                        "type": "string",
                        "description": "The ClientToken when successfully created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The Name of NodePool.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "nodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/NodePoolsNodePool:NodePoolsNodePool"
                        },
                        "description": "The collection of NodePools query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/NodePoolsStatus:NodePoolsStatus"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/NodePoolsTag:NodePoolsTag"
                        },
                        "description": "Tags of the NodePool.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Returns the total amount of the data list.\n"
                    },
                    "updateClientToken": {
                        "type": "string",
                        "description": "The ClientToken when last update was successful.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nodePools",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vke/nodes:Nodes": {
            "description": "Use this data source to query detailed information of vke nodes\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultNodes = pulumi.output(volcengine.vke.Nodes({\n    clusterIds: [\n        \"c123\",\n        \"c456\",\n    ],\n    ids: [\"ncaa3e5mrsferqkomi190\"],\n    statuses: [\n        {\n            conditionsType: \"Progressing\",\n            phase: \"Creating\",\n        },\n        {\n            conditionsType: \"Progressing123\",\n            phase: \"Creating123\",\n        },\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vke.nodes(cluster_ids=[\n        \"c123\",\n        \"c456\",\n    ],\n    ids=[\"ncaa3e5mrsferqkomi190\"],\n    statuses=[\n        volcengine.vke.NodesStatusArgs(\n            conditions_type=\"Progressing\",\n            phase=\"Creating\",\n        ),\n        volcengine.vke.NodesStatusArgs(\n            conditions_type=\"Progressing123\",\n            phase=\"Creating123\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vke.Nodes.InvokeAsync(new Volcengine.Vke.NodesArgs\n        {\n            ClusterIds = \n            {\n                \"c123\",\n                \"c456\",\n            },\n            Ids = \n            {\n                \"ncaa3e5mrsferqkomi190\",\n            },\n            Statuses = \n            {\n                new Volcengine.Vke.Inputs.NodesStatusArgs\n                {\n                    ConditionsType = \"Progressing\",\n                    Phase = \"Creating\",\n                },\n                new Volcengine.Vke.Inputs.NodesStatusArgs\n                {\n                    ConditionsType = \"Progressing123\",\n                    Phase = \"Creating123\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.Nodes(ctx, \u0026vke.NodesArgs{\n\t\t\tClusterIds: []string{\n\t\t\t\t\"c123\",\n\t\t\t\t\"c456\",\n\t\t\t},\n\t\t\tIds: []string{\n\t\t\t\t\"ncaa3e5mrsferqkomi190\",\n\t\t\t},\n\t\t\tStatuses: []vke.NodesStatus{\n\t\t\t\tvke.NodesStatus{\n\t\t\t\t\tConditionsType: pulumi.StringRef(\"Progressing\"),\n\t\t\t\t\tPhase:          pulumi.StringRef(\"Creating\"),\n\t\t\t\t},\n\t\t\t\tvke.NodesStatus{\n\t\t\t\t\tConditionsType: pulumi.StringRef(\"Progressing123\"),\n\t\t\t\t\tPhase:          pulumi.StringRef(\"Creating123\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VkeFunctions.Nodes();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vke:Nodes\n      Arguments:\n        clusterIds:\n          - c123\n          - c456\n        ids:\n          - ncaa3e5mrsferqkomi190\n        statuses:\n          - conditionsType: Progressing\n            phase: Creating\n          - conditionsType: Progressing123\n            phase: Creating123\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Nodes.\n",
                "properties": {
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Cluster IDs.\n"
                    },
                    "createClientToken": {
                        "type": "string",
                        "description": "The Create Client Token.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Node IDs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Name of Node.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Node.\n"
                    },
                    "nodePoolIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Node Pool IDs.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/NodesStatus:NodesStatus"
                        },
                        "description": "The Status of filter.\n"
                    },
                    "zoneIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Zone IDs.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Nodes.\n",
                "properties": {
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createClientToken": {
                        "type": "string",
                        "description": "The create client token of node.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of Node.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "nodePoolIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/NodesNode:NodesNode"
                        },
                        "description": "The collection of Node query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/NodesStatus:NodesStatus"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Node query.\n"
                    },
                    "zoneIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "nodes",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vke/supportAddons:SupportAddons": {
            "description": "Use this data source to query detailed information of vke support addons\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultSupportAddons = pulumi.output(volcengine.vke.SupportAddons({\n    categories: [\"Monitor\"],\n    name: \"metrics-server\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vke.support_addons(categories=[\"Monitor\"],\n    name=\"metrics-server\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vke.SupportAddons.InvokeAsync(new Volcengine.Vke.SupportAddonsArgs\n        {\n            Categories = \n            {\n                \"Monitor\",\n            },\n            Name = \"metrics-server\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vke.SupportAddons(ctx, \u0026vke.SupportAddonsArgs{\n\t\t\tCategories: []string{\n\t\t\t\t\"Monitor\",\n\t\t\t},\n\t\t\tName: pulumi.StringRef(\"metrics-server\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VkeFunctions.SupportAddons();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vke:SupportAddons\n      Arguments:\n        categories:\n          - Monitor\n        name: metrics-server\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking SupportAddons.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.\n"
                    },
                    "deployModes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The deploy model, the value is `Managed` or `Unmanaged`.\n"
                    },
                    "deployNodeTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.\n"
                    },
                    "kubernetesVersions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Kubernetes Versions.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the addon.\n"
                    },
                    "necessaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The necessaries of addons, the value is `Required` or `Recommended` or `OnDemand`.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "podNetworkModes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by SupportAddons.\n",
                "properties": {
                    "addons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vke/SupportAddonsAddon:SupportAddonsAddon"
                        },
                        "description": "The collection of addons query.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "deployModes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "deployNodeTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The deploy node types.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kubernetesVersions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of addon.\n"
                    },
                    "necessaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "podNetworkModes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The network modes of pod.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of addons query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addons",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpc/ipv6AddressBandwidths:Ipv6AddressBandwidths": {
            "description": "Use this data source to query detailed information of vpc ipv6 address bandwidths\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultIpv6AddressBandwidths = pulumi.output(volcengine.vpc.Ipv6AddressBandwidths({\n    ids: [\"eip-in2y2duvtlhc8gbssyfnhfre\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.ipv6_address_bandwidths(ids=[\"eip-in2y2duvtlhc8gbssyfnhfre\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Ipv6AddressBandwidths.InvokeAsync(new Volcengine.Vpc.Ipv6AddressBandwidthsArgs\n        {\n            Ids = \n            {\n                \"eip-in2y2duvtlhc8gbssyfnhfre\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.Ipv6AddressBandwidths(ctx, \u0026vpc.Ipv6AddressBandwidthsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"eip-in2y2duvtlhc8gbssyfnhfre\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Ipv6AddressBandwidths();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:Ipv6AddressBandwidths\n      Arguments:\n        ids:\n          - eip-in2y2duvtlhc8gbssyfnhfre\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Ipv6AddressBandwidths.\n",
                "properties": {
                    "associatedInstanceId": {
                        "type": "string",
                        "description": "The ID of the associated instance.\n"
                    },
                    "associatedInstanceType": {
                        "type": "string",
                        "description": "The type of the associated instance.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allocation IDs of the Ipv6 address width.\n"
                    },
                    "ipv6Addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ipv6 addresses.\n"
                    },
                    "isp": {
                        "type": "string",
                        "description": "ISP of the ipv6 address.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "The network type of the ipv6 address.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of Vpc the ipv6 address in.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Ipv6AddressBandwidths.\n",
                "properties": {
                    "associatedInstanceId": {
                        "type": "string"
                    },
                    "associatedInstanceType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ipv6AddressBandwidths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/Ipv6AddressBandwidthsIpv6AddressBandwidth:Ipv6AddressBandwidthsIpv6AddressBandwidth"
                        },
                        "description": "The collection of Ipv6AddressBandwidth query.\n"
                    },
                    "ipv6Addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isp": {
                        "type": "string",
                        "description": "The ISP of the Ipv6AddressBandwidth.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "The network type of the Ipv6AddressBandwidth.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Ipv6AddressBandwidth query.\n"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ipv6AddressBandwidths",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpc/ipv6Addresses:Ipv6Addresses": {
            "description": "Use this data source to query detailed information of vpc ipv6 addresses\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultIpv6Addresses = pulumi.output(volcengine.vpc.Ipv6Addresses({\n    associatedInstanceId: \"i-yca53yuhj6gh9zl53kav\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.ipv6_addresses(associated_instance_id=\"i-yca53yuhj6gh9zl53kav\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Ipv6Addresses.InvokeAsync(new Volcengine.Vpc.Ipv6AddressesArgs\n        {\n            AssociatedInstanceId = \"i-yca53yuhj6gh9zl53kav\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.Ipv6Addresses(ctx, \u0026vpc.Ipv6AddressesArgs{\n\t\t\tAssociatedInstanceId: pulumi.StringRef(\"i-yca53yuhj6gh9zl53kav\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Ipv6Addresses();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:Ipv6Addresses\n      Arguments:\n        associatedInstanceId: i-yca53yuhj6gh9zl53kav\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Ipv6Addresses.\n",
                "properties": {
                    "associatedInstanceId": {
                        "type": "string",
                        "description": "The ID of the ECS instance that is assigned the IPv6 address.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Ipv6Addresses.\n",
                "properties": {
                    "associatedInstanceId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipv6Addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/Ipv6AddressesIpv6Address:Ipv6AddressesIpv6Address"
                        },
                        "description": "The collection of Ipv6Address query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Ipv6Address query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ipv6Addresses",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpc/ipv6Gateways:Ipv6Gateways": {
            "description": "Use this data source to query detailed information of vpc ipv6 gateways\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultIpv6Gateways = pulumi.output(volcengine.vpc.Ipv6Gateways({\n    ids: [\"ipv6gw-12bcapllb5ukg17q7y2sd3thx\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.ipv6_gateways(ids=[\"ipv6gw-12bcapllb5ukg17q7y2sd3thx\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Ipv6Gateways.InvokeAsync(new Volcengine.Vpc.Ipv6GatewaysArgs\n        {\n            Ids = \n            {\n                \"ipv6gw-12bcapllb5ukg17q7y2sd3thx\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.Ipv6Gateways(ctx, \u0026vpc.Ipv6GatewaysArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"ipv6gw-12bcapllb5ukg17q7y2sd3thx\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Ipv6Gateways();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:Ipv6Gateways\n      Arguments:\n        ids:\n          - ipv6gw-12bcapllb5ukg17q7y2sd3thx\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Ipv6Gateways.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ID list of the Ipv6Gateways.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Ipv6Gateway.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of the Ipv6Gateway.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "vpcIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ID list of the VPC which the Ipv6Gateway belongs to.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Ipv6Gateways.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ipv6Gateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/Ipv6GatewaysIpv6Gateway:Ipv6GatewaysIpv6Gateway"
                        },
                        "description": "The collection of Ipv6Gateway query.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Name of the Ipv6Gateway.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Ipv6Gateway query.\n"
                    },
                    "vpcIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "ipv6Gateways",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpc/networkAcls:NetworkAcls": {
            "description": "Use this data source to query detailed information of network acls\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultNetworkAcls = pulumi.output(volcengine.vpc.NetworkAcls({\n    //  ids = [\"nacl-172leak37mi9s4d1w33pswqkh\"]\n    //  vpc_id = \"vpc-ru0wv9alfoxsu3nuld85rpp\"\n    //  subnet_id = \"subnet-637jxq81u5mon3gd6ivc7rj\"\n    networkAclName: \"ms-tf-acl\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.network_acls(network_acl_name=\"ms-tf-acl\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.NetworkAcls.InvokeAsync(new Volcengine.Vpc.NetworkAclsArgs\n        {\n            NetworkAclName = \"ms-tf-acl\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NetworkAcls(ctx, \u0026vpc.NetworkAclsArgs{\n\t\t\tNetworkAclName: pulumi.StringRef(\"ms-tf-acl\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.NetworkAcls();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:NetworkAcls\n      Arguments:\n        networkAclName: ms-tf-acl\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking NetworkAcls.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Network Acl IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Network Acl.\n"
                    },
                    "networkAclName": {
                        "type": "string",
                        "description": "The name of Network Acl.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The subnet id of Network Acl.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc id of Network Acl.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by NetworkAcls.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "networkAclName": {
                        "type": "string",
                        "description": "The Name of Network Acl.\n"
                    },
                    "networkAcls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/NetworkAclsNetworkAcl:NetworkAclsNetworkAcl"
                        },
                        "description": "The collection of Network Acl query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "subnetId": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Network Acl query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc id of Network Acl.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkAcls",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpc/networkInterfaces:NetworkInterfaces": {
            "description": "Use this data source to query detailed information of network interfaces\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultNetworkInterfaces = pulumi.output(volcengine.vpc.NetworkInterfaces({\n    ids: [\"eni-2744htx2w0j5s7fap8t3ivwze\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.network_interfaces(ids=[\"eni-2744htx2w0j5s7fap8t3ivwze\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.NetworkInterfaces.InvokeAsync(new Volcengine.Vpc.NetworkInterfacesArgs\n        {\n            Ids = \n            {\n                \"eni-2744htx2w0j5s7fap8t3ivwze\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NetworkInterfaces(ctx, \u0026vpc.NetworkInterfacesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"eni-2744htx2w0j5s7fap8t3ivwze\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.NetworkInterfaces();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:NetworkInterfaces\n      Arguments:\n        ids:\n          - eni-2744htx2w0j5s7fap8t3ivwze\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking NetworkInterfaces.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of ENI ids.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "An id of the instance to which the ENI is bound.\n"
                    },
                    "networkInterfaceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network interface ids.\n"
                    },
                    "networkInterfaceName": {
                        "type": "string",
                        "description": "A name of ENI.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "primaryIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of primary IP address of ENI.\n"
                    },
                    "privateIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of private IP addresses.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the ENI.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "An id of the security group to which the secondary ENI belongs.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "A status of ENI, Optional choice contains `Creating`, `Available`, `Attaching`, `InUse`, `Detaching`, `Deleting`.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "An id of the subnet to which the ENI is connected.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/NetworkInterfacesTag:NetworkInterfacesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type of ENI, Optional choice contains `primary`, `secondary`.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "An id of the virtual private cloud (VPC) to which the ENI belongs.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone ID.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by NetworkInterfaces.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "networkInterfaceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "networkInterfaceName": {
                        "type": "string",
                        "description": "The name of the ENI.\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/NetworkInterfacesNetworkInterface:NetworkInterfacesNetworkInterface"
                        },
                        "description": "The collection of ENI.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "primaryIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "privateIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the ENI.\n"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the ENI.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the subnet to which the ENI is connected.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/NetworkInterfacesTag:NetworkInterfacesTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of ENI query.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the ENI.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the virtual private cloud (VPC) to which the ENI belongs.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The zone id of the ENI.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkInterfaces",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpc/routeEntries:RouteEntries": {
            "description": "Use this data source to query detailed information of route entries\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRouteEntries = pulumi.output(volcengine.vpc.RouteEntries({\n    ids: [],\n    routeTableId: \"vtb-274e19skkuhog7fap8u4i8ird\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.route_entries(ids=[],\n    route_table_id=\"vtb-274e19skkuhog7fap8u4i8ird\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.RouteEntries.InvokeAsync(new Volcengine.Vpc.RouteEntriesArgs\n        {\n            Ids = {},\n            RouteTableId = \"vtb-274e19skkuhog7fap8u4i8ird\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.RouteEntries(ctx, \u0026vpc.RouteEntriesArgs{\n\t\t\tIds:          []interface{}{},\n\t\t\tRouteTableId: \"vtb-274e19skkuhog7fap8u4i8ird\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.RouteEntries();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:RouteEntries\n      Arguments:\n        ids: []\n        routeTableId: vtb-274e19skkuhog7fap8u4i8ird\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking RouteEntries.\n",
                "properties": {
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "A destination CIDR block of route entry.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of route entry ids.\n"
                    },
                    "nextHopId": {
                        "type": "string",
                        "description": "An id of next hop.\n"
                    },
                    "nextHopType": {
                        "type": "string",
                        "description": "A type of next hop, Optional choice contains `Instance`, `NetworkInterface`, `NatGW`, `VpnGW`.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "routeEntryName": {
                        "type": "string",
                        "description": "A name of route entry.\n"
                    },
                    "routeEntryType": {
                        "type": "string",
                        "description": "A type of route entry.\n"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "An id of route table.\n"
                    }
                },
                "type": "object",
                "required": [
                    "routeTableId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by RouteEntries.\n",
                "properties": {
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "The destination CIDR block of the route entry.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nextHopId": {
                        "type": "string",
                        "description": "The id of the next hop.\n"
                    },
                    "nextHopType": {
                        "type": "string",
                        "description": "The type of the next hop.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "routeEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/RouteEntriesRouteEntry:RouteEntriesRouteEntry"
                        },
                        "description": "The collection of route tables.\n"
                    },
                    "routeEntryName": {
                        "type": "string",
                        "description": "The name of the route entry.\n"
                    },
                    "routeEntryType": {
                        "type": "string"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "The id of the route table to which the route entry belongs.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of route entry query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "routeEntries",
                    "routeTableId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpc/routeTables:RouteTables": {
            "description": "Use this data source to query detailed information of route tables\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRouteTables = pulumi.output(volcengine.vpc.RouteTables({\n    ids: [\n        \"vtb-274e19skkuhog7fap8u4i8ird\",\n        \"vtb-2744hslq5b7r47fap8tjomgnj\",\n    ],\n    routeTableName: \"vpc-fast\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.route_tables(ids=[\n        \"vtb-274e19skkuhog7fap8u4i8ird\",\n        \"vtb-2744hslq5b7r47fap8tjomgnj\",\n    ],\n    route_table_name=\"vpc-fast\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.RouteTables.InvokeAsync(new Volcengine.Vpc.RouteTablesArgs\n        {\n            Ids = \n            {\n                \"vtb-274e19skkuhog7fap8u4i8ird\",\n                \"vtb-2744hslq5b7r47fap8tjomgnj\",\n            },\n            RouteTableName = \"vpc-fast\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.RouteTables(ctx, \u0026vpc.RouteTablesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"vtb-274e19skkuhog7fap8u4i8ird\",\n\t\t\t\t\"vtb-2744hslq5b7r47fap8tjomgnj\",\n\t\t\t},\n\t\t\tRouteTableName: pulumi.StringRef(\"vpc-fast\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.RouteTables();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:RouteTables\n      Arguments:\n        ids:\n          - vtb-274e19skkuhog7fap8u4i8ird\n          - vtb-2744hslq5b7r47fap8tjomgnj\n        routeTableName: vpc-fast\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking RouteTables.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of route table ids.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the route table.\n"
                    },
                    "routeTableName": {
                        "type": "string",
                        "description": "A name of route table.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "An id of VPC.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by RouteTables.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the route table.\n"
                    },
                    "routeTableName": {
                        "type": "string",
                        "description": "The name of the route table.\n"
                    },
                    "routeTables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/RouteTablesRouteTable:RouteTablesRouteTable"
                        },
                        "description": "The collection of route tables.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of route table query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the virtual private cloud (VPC) to which the route entry belongs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "routeTables",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpc/securityGroupRules:SecurityGroupRules": {
            "description": "Use this data source to query detailed information of security group rules\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultSecurityGroupRules = pulumi.output(volcengine.vpc.SecurityGroupRules({\n    securityGroupId: \"sg-13f2nau7x93wg3n6nu3z5sxib\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.security_group_rules(security_group_id=\"sg-13f2nau7x93wg3n6nu3z5sxib\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.SecurityGroupRules.InvokeAsync(new Volcengine.Vpc.SecurityGroupRulesArgs\n        {\n            SecurityGroupId = \"sg-13f2nau7x93wg3n6nu3z5sxib\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.SecurityGroupRules(ctx, \u0026vpc.SecurityGroupRulesArgs{\n\t\t\tSecurityGroupId: \"sg-13f2nau7x93wg3n6nu3z5sxib\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.SecurityGroupRules();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:SecurityGroupRules\n      Arguments:\n        securityGroupId: sg-13f2nau7x93wg3n6nu3z5sxib\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking SecurityGroupRules.\n",
                "properties": {
                    "cidrIp": {
                        "type": "string",
                        "description": "Cidr ip of egress/ingress Rule.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Direction of rule, ingress (inbound) or egress (outbound).\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol of the SecurityGroup, the value can be `tcp` or `udp` or `icmp` or `all`.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "SecurityGroup ID.\n"
                    },
                    "sourceGroupId": {
                        "type": "string",
                        "description": "ID of the source security group whose access permission you want to set.\n"
                    }
                },
                "type": "object",
                "required": [
                    "securityGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by SecurityGroupRules.\n",
                "properties": {
                    "cidrIp": {
                        "type": "string",
                        "description": "Cidr ip of egress/ingress Rule.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Direction of rule, ingress (inbound) or egress (outbound).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol of the SecurityGroup, the value can be `tcp` or `udp` or `icmp` or `all`.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Id of SecurityGroup.\n"
                    },
                    "securityGroupRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/SecurityGroupRulesSecurityGroupRule:SecurityGroupRulesSecurityGroupRule"
                        },
                        "description": "The collection of SecurityGroup query.\n"
                    },
                    "sourceGroupId": {
                        "type": "string",
                        "description": "ID of the source security group whose access permission you want to set.\n"
                    }
                },
                "type": "object",
                "required": [
                    "securityGroupId",
                    "securityGroupRules",
                    "id"
                ]
            }
        },
        "volcengine:vpc/securityGroups:SecurityGroups": {
            "description": "Use this data source to query detailed information of security groups\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultSecurityGroups = pulumi.output(volcengine.vpc.SecurityGroups({\n    ids: [\"sg-273ycgql3ig3k7fap8t3dyvqx\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.security_groups(ids=[\"sg-273ycgql3ig3k7fap8t3dyvqx\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.SecurityGroups.InvokeAsync(new Volcengine.Vpc.SecurityGroupsArgs\n        {\n            Ids = \n            {\n                \"sg-273ycgql3ig3k7fap8t3dyvqx\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.SecurityGroups(ctx, \u0026vpc.SecurityGroupsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"sg-273ycgql3ig3k7fap8t3dyvqx\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.SecurityGroups();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:SecurityGroups\n      Arguments:\n        ids:\n          - sg-273ycgql3ig3k7fap8t3dyvqx\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking SecurityGroups.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SecurityGroup IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of SecurityGroup.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of SecurityGroup.\n"
                    },
                    "securityGroupNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of security group name to query.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/SecurityGroupsTag:SecurityGroupsTag"
                        },
                        "description": "Tags.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of vpc where security group is located.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by SecurityGroups.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of SecurityGroup.\n"
                    },
                    "securityGroupNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "securityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/SecurityGroupsSecurityGroup:SecurityGroupsSecurityGroup"
                        },
                        "description": "The collection of SecurityGroup query.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/SecurityGroupsTag:SecurityGroupsTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of SecurityGroup query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of Vpc.\n"
                    }
                },
                "type": "object",
                "required": [
                    "securityGroups",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpc/subnets:Subnets": {
            "description": "Use this data source to query detailed information of subnets\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultSubnets = pulumi.output(volcengine.vpc.Subnets({\n    ids: [\"subnet-274zsa5kfmj287fap8soo5e19\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.subnets(ids=[\"subnet-274zsa5kfmj287fap8soo5e19\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Subnets.InvokeAsync(new Volcengine.Vpc.SubnetsArgs\n        {\n            Ids = \n            {\n                \"subnet-274zsa5kfmj287fap8soo5e19\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.Subnets(ctx, \u0026vpc.SubnetsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"subnet-274zsa5kfmj287fap8soo5e19\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Subnets();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:Subnets\n      Arguments:\n        ids:\n          - subnet-274zsa5kfmj287fap8soo5e19\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Subnets.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Subnet IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Subnet.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "The ID of route table which subnet associated with.\n"
                    },
                    "subnetName": {
                        "type": "string",
                        "description": "The subnet name to query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC which subnet belongs to.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The ID of zone which subnet belongs to.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Subnets.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "The route table ID.\n"
                    },
                    "subnetName": {
                        "type": "string",
                        "description": "The Name of Subnet.\n"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/SubnetsSubnet:SubnetsSubnet"
                        },
                        "description": "The collection of Subnet query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Subnet query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The Vpc ID of Subnet.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The ID of Zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "subnets",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpc/vpcs:Vpcs": {
            "description": "Use this data source to query detailed information of vpcs\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultVpcs = pulumi.output(volcengine.vpc.Vpcs({\n    ids: [\"vpc-mizl7m1kqccg5smt1bdpijuj\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpc.vpcs(ids=[\"vpc-mizl7m1kqccg5smt1bdpijuj\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Vpcs.InvokeAsync(new Volcengine.Vpc.VpcsArgs\n        {\n            Ids = \n            {\n                \"vpc-mizl7m1kqccg5smt1bdpijuj\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.Vpcs(ctx, \u0026vpc.VpcsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"vpc-mizl7m1kqccg5smt1bdpijuj\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Vpcs();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpc:Vpcs\n      Arguments:\n        ids:\n          - vpc-mizl7m1kqccg5smt1bdpijuj\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Vpcs.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPC IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Vpc.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the VPC.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/VpcsTag:VpcsTag"
                        },
                        "description": "Tags.\n"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "The vpc name to query.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Vpcs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The ProjectName of the VPC.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/VpcsTag:VpcsTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Vpc query.\n"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "The name of VPC.\n"
                    },
                    "vpcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpc/VpcsVpc:VpcsVpc"
                        },
                        "description": "The collection of Vpc query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "vpcs",
                    "id"
                ]
            }
        },
        "volcengine:vpn/connections:Connections": {
            "description": "Use this data source to query detailed information of vpn connections\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultConnections = pulumi.output(volcengine.vpn.Connections({\n    ids: [\"vgc-2d5wwids8cdts58ozfe63k2uq\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpn.connections(ids=[\"vgc-2d5wwids8cdts58ozfe63k2uq\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpn.Connections.InvokeAsync(new Volcengine.Vpn.ConnectionsArgs\n        {\n            Ids = \n            {\n                \"vgc-2d5wwids8cdts58ozfe63k2uq\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpn.Connections(ctx, \u0026vpn.ConnectionsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"vgc-2d5wwids8cdts58ozfe63k2uq\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpnFunctions.Connections();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpn:Connections\n      Arguments:\n        ids:\n          - vgc-2d5wwids8cdts58ozfe63k2uq\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Connections.\n",
                "properties": {
                    "customerGatewayId": {
                        "type": "string",
                        "description": "An ID of customer gateway.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPN connection ids.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of VPN connection.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "vpnConnectionNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPN connection names.\n"
                    },
                    "vpnGatewayId": {
                        "type": "string",
                        "description": "An ID of VPN gateway.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Connections.\n",
                "properties": {
                    "customerGatewayId": {
                        "type": "string",
                        "description": "The ID of the customer gateway.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of VPN connection query.\n"
                    },
                    "vpnConnectionNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "vpnConnections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpn/ConnectionsVpnConnection:ConnectionsVpnConnection"
                        },
                        "description": "The collection of VPN connection query.\n"
                    },
                    "vpnGatewayId": {
                        "type": "string",
                        "description": "The ID of the vpn gateway.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "vpnConnections",
                    "id"
                ]
            }
        },
        "volcengine:vpn/customerGateways:CustomerGateways": {
            "description": "Use this data source to query detailed information of customer gateways\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.vpn.CustomerGateways({\n    ids: [\"cgw-2d68c4zglycjk58ozfe96norh\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpn.customer_gateways(ids=[\"cgw-2d68c4zglycjk58ozfe96norh\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Vpn.CustomerGateways.InvokeAsync(new Volcengine.Vpn.CustomerGatewaysArgs\n        {\n            Ids = \n            {\n                \"cgw-2d68c4zglycjk58ozfe96norh\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpn.CustomerGateways(ctx, \u0026vpn.CustomerGatewaysArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"cgw-2d68c4zglycjk58ozfe96norh\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = VpnFunctions.CustomerGateways();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:vpn:CustomerGateways\n      Arguments:\n        ids:\n          - cgw-2d68c4zglycjk58ozfe96norh\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking CustomerGateways.\n",
                "properties": {
                    "customerGatewayNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of customer gateway names.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of customer gateway ids.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "A IP address of the customer gateway.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of customer gateway.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by CustomerGateways.\n",
                "properties": {
                    "customerGatewayNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "customerGateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpn/CustomerGatewaysCustomerGateway:CustomerGatewaysCustomerGateway"
                        },
                        "description": "The collection of customer gateway query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address of the customer gateway.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of customer gateway query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "customerGateways",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:vpn/gatewayRoutes:GatewayRoutes": {
            "description": "Use this data source to query detailed information of vpn gateway routes\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultGatewayRoutes = pulumi.output(volcengine.vpn.GatewayRoutes({\n    ids: [\"vgr-2byssu52dktts2dx0ee90r5hp]\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpn.gateway_routes(ids=[\"vgr-2byssu52dktts2dx0ee90r5hp]\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpn.GatewayRoutes.InvokeAsync(new Volcengine.Vpn.GatewayRoutesArgs\n        {\n            Ids = \n            {\n                \"vgr-2byssu52dktts2dx0ee90r5hp]\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpn.GatewayRoutes(ctx, \u0026vpn.GatewayRoutesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"vgr-2byssu52dktts2dx0ee90r5hp]\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpnFunctions.GatewayRoutes();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpn:GatewayRoutes\n      Arguments:\n        ids:\n          - vgr-2byssu52dktts2dx0ee90r5hp]\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking GatewayRoutes.\n",
                "properties": {
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "A destination cidr block.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPN gateway route ids.\n"
                    },
                    "nextHopId": {
                        "type": "string",
                        "description": "An ID of next hop.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "vpnGatewayId": {
                        "type": "string",
                        "description": "An ID of VPN gateway.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GatewayRoutes.\n",
                "properties": {
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "The destination cidr block of the VPN gateway route.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nextHopId": {
                        "type": "string",
                        "description": "The next hop id of the VPN gateway route.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of VPN gateway route query.\n"
                    },
                    "vpnGatewayId": {
                        "type": "string",
                        "description": "The ID of the VPN gateway of the VPN gateway route.\n"
                    },
                    "vpnGatewayRoutes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpn/GatewayRoutesVpnGatewayRoute:GatewayRoutesVpnGatewayRoute"
                        },
                        "description": "The collection of VPN gateway route query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "vpnGatewayRoutes",
                    "id"
                ]
            }
        },
        "volcengine:vpn/gateways:Gateways": {
            "description": "Use this data source to query detailed information of vpn gateways\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultGateways = pulumi.output(volcengine.vpn.Gateways({\n    ids: [\"vgw-2c012ea9fm5mo2dx0efxg46qi\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.vpn.gateways(ids=[\"vgw-2c012ea9fm5mo2dx0efxg46qi\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpn.Gateways.InvokeAsync(new Volcengine.Vpn.GatewaysArgs\n        {\n            Ids = \n            {\n                \"vgw-2c012ea9fm5mo2dx0efxg46qi\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/vpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpn.Gateways(ctx, \u0026vpn.GatewaysArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"vgw-2c012ea9fm5mo2dx0efxg46qi\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpnFunctions.Gateways();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:vpn:Gateways\n      Arguments:\n        ids:\n          - vgw-2c012ea9fm5mo2dx0efxg46qi\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Gateways.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPN gateway ids.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "A IP address of the VPN gateway.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of VPN gateway.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "A subnet ID of the VPN gateway.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpn/GatewaysTag:GatewaysTag"
                        },
                        "description": "Tags.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "A VPC ID of the VPN gateway.\n"
                    },
                    "vpnGatewayNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPN gateway names.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Gateways.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address of the VPN gateway.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "subnetId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpn/GatewaysTag:GatewaysTag"
                        },
                        "description": "Tags.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of VPN gateway query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC ID of the VPN gateway.\n"
                    },
                    "vpnGatewayNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "vpnGateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:vpn/GatewaysVpnGateway:GatewaysVpnGateway"
                        },
                        "description": "The collection of VPN gateway query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "vpnGateways",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Volcengine.PulumiPackage"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/volcengine/pulumi-volcengine/sdk/go/volcengine"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing volcengine cloud resources.",
            "packageName": "@volcengine/pulumi",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/volcengine/terraform-provider-volcengine)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-volcengine` repo](https://github.com/pulumi/pulumi-volcengine/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`volcengine/terraform-provider-volcengine` repo](https://github.com/volcengine/terraform-provider-volcengine/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "pulumi_volcengine",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/volcengine/terraform-provider-volcengine)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-volcengine` repo](https://github.com/pulumi/pulumi-volcengine/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`volcengine/terraform-provider-volcengine` repo](https://github.com/volcengine/terraform-provider-volcengine/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}