# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlertingRuleArgs', 'AlertingRule']

@pulumi.input_type
class AlertingRuleArgs:
    def __init__(__self__, *,
                 levels: pulumi.Input[Sequence[pulumi.Input['AlertingRuleLevelArgs']]],
                 notify_group_policy_id: pulumi.Input[str],
                 query: pulumi.Input['AlertingRuleQueryArgs'],
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleAnnotationArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleLabelArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_policy_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AlertingRule resource.
        :param pulumi.Input[Sequence[pulumi.Input['AlertingRuleLevelArgs']]] levels: The alerting levels of the vmp alerting rule.
        :param pulumi.Input[str] notify_group_policy_id: The id of the notify group policy.
        :param pulumi.Input['AlertingRuleQueryArgs'] query: The alerting query of the vmp alerting rule.
        :param pulumi.Input[Sequence[pulumi.Input['AlertingRuleAnnotationArgs']]] annotations: The annotations of the vmp alerting rule.
        :param pulumi.Input[str] description: The description of the vmp alerting rule.
        :param pulumi.Input[Sequence[pulumi.Input['AlertingRuleLabelArgs']]] labels: The labels of the vmp alerting rule.
        :param pulumi.Input[str] name: The name of the vmp alerting rule.
        :param pulumi.Input[str] notify_policy_id: The id of the notify policy.
        """
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "notify_group_policy_id", notify_group_policy_id)
        pulumi.set(__self__, "query", query)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_policy_id is not None:
            pulumi.set(__self__, "notify_policy_id", notify_policy_id)

    @property
    @pulumi.getter
    def levels(self) -> pulumi.Input[Sequence[pulumi.Input['AlertingRuleLevelArgs']]]:
        """
        The alerting levels of the vmp alerting rule.
        """
        return pulumi.get(self, "levels")

    @levels.setter
    def levels(self, value: pulumi.Input[Sequence[pulumi.Input['AlertingRuleLevelArgs']]]):
        pulumi.set(self, "levels", value)

    @property
    @pulumi.getter(name="notifyGroupPolicyId")
    def notify_group_policy_id(self) -> pulumi.Input[str]:
        """
        The id of the notify group policy.
        """
        return pulumi.get(self, "notify_group_policy_id")

    @notify_group_policy_id.setter
    def notify_group_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "notify_group_policy_id", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input['AlertingRuleQueryArgs']:
        """
        The alerting query of the vmp alerting rule.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input['AlertingRuleQueryArgs']):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleAnnotationArgs']]]]:
        """
        The annotations of the vmp alerting rule.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleAnnotationArgs']]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the vmp alerting rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleLabelArgs']]]]:
        """
        The labels of the vmp alerting rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the vmp alerting rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyPolicyId")
    def notify_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the notify policy.
        """
        return pulumi.get(self, "notify_policy_id")

    @notify_policy_id.setter
    def notify_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_policy_id", value)


@pulumi.input_type
class _AlertingRuleState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleAnnotationArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleLabelArgs']]]] = None,
                 levels: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleLevelArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_group_policy_id: Optional[pulumi.Input[str]] = None,
                 notify_policy_id: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input['AlertingRuleQueryArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AlertingRule resources.
        :param pulumi.Input[Sequence[pulumi.Input['AlertingRuleAnnotationArgs']]] annotations: The annotations of the vmp alerting rule.
        :param pulumi.Input[str] create_time: The create time of the vmp alerting rule.
        :param pulumi.Input[str] description: The description of the vmp alerting rule.
        :param pulumi.Input[Sequence[pulumi.Input['AlertingRuleLabelArgs']]] labels: The labels of the vmp alerting rule.
        :param pulumi.Input[Sequence[pulumi.Input['AlertingRuleLevelArgs']]] levels: The alerting levels of the vmp alerting rule.
        :param pulumi.Input[str] name: The name of the vmp alerting rule.
        :param pulumi.Input[str] notify_group_policy_id: The id of the notify group policy.
        :param pulumi.Input[str] notify_policy_id: The id of the notify policy.
        :param pulumi.Input['AlertingRuleQueryArgs'] query: The alerting query of the vmp alerting rule.
        :param pulumi.Input[str] status: The status of the vmp alerting rule.
        :param pulumi.Input[str] update_time: The update time of the vmp alerting rule.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if levels is not None:
            pulumi.set(__self__, "levels", levels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_group_policy_id is not None:
            pulumi.set(__self__, "notify_group_policy_id", notify_group_policy_id)
        if notify_policy_id is not None:
            pulumi.set(__self__, "notify_policy_id", notify_policy_id)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleAnnotationArgs']]]]:
        """
        The annotations of the vmp alerting rule.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleAnnotationArgs']]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of the vmp alerting rule.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the vmp alerting rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleLabelArgs']]]]:
        """
        The labels of the vmp alerting rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleLevelArgs']]]]:
        """
        The alerting levels of the vmp alerting rule.
        """
        return pulumi.get(self, "levels")

    @levels.setter
    def levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRuleLevelArgs']]]]):
        pulumi.set(self, "levels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the vmp alerting rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyGroupPolicyId")
    def notify_group_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the notify group policy.
        """
        return pulumi.get(self, "notify_group_policy_id")

    @notify_group_policy_id.setter
    def notify_group_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_group_policy_id", value)

    @property
    @pulumi.getter(name="notifyPolicyId")
    def notify_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the notify policy.
        """
        return pulumi.get(self, "notify_policy_id")

    @notify_policy_id.setter
    def notify_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_policy_id", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input['AlertingRuleQueryArgs']]:
        """
        The alerting query of the vmp alerting rule.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input['AlertingRuleQueryArgs']]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the vmp alerting rule.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of the vmp alerting rule.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class AlertingRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleAnnotationArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleLabelArgs']]]]] = None,
                 levels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleLevelArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_group_policy_id: Optional[pulumi.Input[str]] = None,
                 notify_policy_id: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[pulumi.InputType['AlertingRuleQueryArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage vmp alerting rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_workspace = volcengine.vmp.Workspace("fooWorkspace",
            instance_type_id="vmp.standard.15d",
            delete_protection_enabled=False,
            description="acc-test-1",
            username="admin123",
            password="Pass123456")
        foo_contact = volcengine.vmp.Contact("fooContact",
            email="acctest1@tftest.com",
            webhook=volcengine.vmp.ContactWebhookArgs(
                address="https://www.acctest1.com",
            ),
            lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
                address="https://www.acctest1.com",
            ),
            ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
                address="https://www.dingacctest1.com",
                at_mobiles=["18046891812"],
            ),
            phone_number=volcengine.vmp.ContactPhoneNumberArgs(
                country_code="+86",
                number="18310101010",
            ))
        foo1_contact = volcengine.vmp.Contact("foo1Contact",
            email="acctest2@tftest.com",
            webhook=volcengine.vmp.ContactWebhookArgs(
                address="https://www.acctest2.com",
            ),
            lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
                address="https://www.acctest2.com",
            ),
            ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
                address="https://www.dingacctest2.com",
                at_mobiles=["18046891813"],
            ),
            phone_number=volcengine.vmp.ContactPhoneNumberArgs(
                country_code="+86",
                number="18310101011",
            ))
        foo_contact_group = volcengine.vmp.ContactGroup("fooContactGroup", contact_ids=[foo_contact.id])
        foo1_contact_group = volcengine.vmp.ContactGroup("foo1ContactGroup", contact_ids=[foo1_contact.id])
        foo_notify_policy = volcengine.vmp.NotifyPolicy("fooNotifyPolicy",
            description="acc-test-1",
            levels=[
                volcengine.vmp.NotifyPolicyLevelArgs(
                    level="P1",
                    contact_group_ids=[foo_contact_group.id],
                    channels=[
                        "Email",
                        "Webhook",
                    ],
                ),
                volcengine.vmp.NotifyPolicyLevelArgs(
                    level="P0",
                    contact_group_ids=[foo1_contact_group.id],
                    channels=["LarkBotWebhook"],
                ),
            ])
        foo_notify_group_policy = volcengine.vmp.NotifyGroupPolicy("fooNotifyGroupPolicy",
            description="acc-test-1",
            levels=[
                volcengine.vmp.NotifyGroupPolicyLevelArgs(
                    level="P2",
                    group_bies=["__rule__"],
                    group_wait="35",
                    group_interval="60",
                    repeat_interval="70",
                ),
                volcengine.vmp.NotifyGroupPolicyLevelArgs(
                    level="P0",
                    group_bies=["__rule__"],
                    group_wait="30",
                    group_interval="60",
                    repeat_interval="70",
                ),
                volcengine.vmp.NotifyGroupPolicyLevelArgs(
                    level="P1",
                    group_bies=["__rule__"],
                    group_wait="40",
                    group_interval="75",
                    repeat_interval="75",
                ),
            ])
        foo_alerting_rule = volcengine.vmp.AlertingRule("fooAlertingRule",
            description="acc-test-1",
            notify_policy_id=foo_notify_policy.id,
            notify_group_policy_id=foo_notify_group_policy.id,
            query=volcengine.vmp.AlertingRuleQueryArgs(
                workspace_id=foo_workspace.id,
                prom_ql="sum(up)",
            ),
            levels=[
                volcengine.vmp.AlertingRuleLevelArgs(
                    level="P0",
                    for_="0s",
                    comparator=">=",
                    threshold=2,
                ),
                volcengine.vmp.AlertingRuleLevelArgs(
                    level="P1",
                    for_="0s",
                    comparator=">=",
                    threshold=1,
                ),
                volcengine.vmp.AlertingRuleLevelArgs(
                    level="P2",
                    for_="0s",
                    comparator=">=",
                    threshold=0.5,
                ),
            ],
            annotations=[volcengine.vmp.AlertingRuleAnnotationArgs(
                name="annotation",
                value="acc-test",
            )],
            labels=[volcengine.vmp.AlertingRuleLabelArgs(
                name="label",
                value="acc-test",
            )])
        ```

        ## Import

        VmpAlertingRule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vmp/alertingRule:AlertingRule default 5bd29e81-2717-4ac8-a1a6-d76da2b1****
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleAnnotationArgs']]]] annotations: The annotations of the vmp alerting rule.
        :param pulumi.Input[str] description: The description of the vmp alerting rule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleLabelArgs']]]] labels: The labels of the vmp alerting rule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleLevelArgs']]]] levels: The alerting levels of the vmp alerting rule.
        :param pulumi.Input[str] name: The name of the vmp alerting rule.
        :param pulumi.Input[str] notify_group_policy_id: The id of the notify group policy.
        :param pulumi.Input[str] notify_policy_id: The id of the notify policy.
        :param pulumi.Input[pulumi.InputType['AlertingRuleQueryArgs']] query: The alerting query of the vmp alerting rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlertingRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vmp alerting rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_workspace = volcengine.vmp.Workspace("fooWorkspace",
            instance_type_id="vmp.standard.15d",
            delete_protection_enabled=False,
            description="acc-test-1",
            username="admin123",
            password="Pass123456")
        foo_contact = volcengine.vmp.Contact("fooContact",
            email="acctest1@tftest.com",
            webhook=volcengine.vmp.ContactWebhookArgs(
                address="https://www.acctest1.com",
            ),
            lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
                address="https://www.acctest1.com",
            ),
            ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
                address="https://www.dingacctest1.com",
                at_mobiles=["18046891812"],
            ),
            phone_number=volcengine.vmp.ContactPhoneNumberArgs(
                country_code="+86",
                number="18310101010",
            ))
        foo1_contact = volcengine.vmp.Contact("foo1Contact",
            email="acctest2@tftest.com",
            webhook=volcengine.vmp.ContactWebhookArgs(
                address="https://www.acctest2.com",
            ),
            lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
                address="https://www.acctest2.com",
            ),
            ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
                address="https://www.dingacctest2.com",
                at_mobiles=["18046891813"],
            ),
            phone_number=volcengine.vmp.ContactPhoneNumberArgs(
                country_code="+86",
                number="18310101011",
            ))
        foo_contact_group = volcengine.vmp.ContactGroup("fooContactGroup", contact_ids=[foo_contact.id])
        foo1_contact_group = volcengine.vmp.ContactGroup("foo1ContactGroup", contact_ids=[foo1_contact.id])
        foo_notify_policy = volcengine.vmp.NotifyPolicy("fooNotifyPolicy",
            description="acc-test-1",
            levels=[
                volcengine.vmp.NotifyPolicyLevelArgs(
                    level="P1",
                    contact_group_ids=[foo_contact_group.id],
                    channels=[
                        "Email",
                        "Webhook",
                    ],
                ),
                volcengine.vmp.NotifyPolicyLevelArgs(
                    level="P0",
                    contact_group_ids=[foo1_contact_group.id],
                    channels=["LarkBotWebhook"],
                ),
            ])
        foo_notify_group_policy = volcengine.vmp.NotifyGroupPolicy("fooNotifyGroupPolicy",
            description="acc-test-1",
            levels=[
                volcengine.vmp.NotifyGroupPolicyLevelArgs(
                    level="P2",
                    group_bies=["__rule__"],
                    group_wait="35",
                    group_interval="60",
                    repeat_interval="70",
                ),
                volcengine.vmp.NotifyGroupPolicyLevelArgs(
                    level="P0",
                    group_bies=["__rule__"],
                    group_wait="30",
                    group_interval="60",
                    repeat_interval="70",
                ),
                volcengine.vmp.NotifyGroupPolicyLevelArgs(
                    level="P1",
                    group_bies=["__rule__"],
                    group_wait="40",
                    group_interval="75",
                    repeat_interval="75",
                ),
            ])
        foo_alerting_rule = volcengine.vmp.AlertingRule("fooAlertingRule",
            description="acc-test-1",
            notify_policy_id=foo_notify_policy.id,
            notify_group_policy_id=foo_notify_group_policy.id,
            query=volcengine.vmp.AlertingRuleQueryArgs(
                workspace_id=foo_workspace.id,
                prom_ql="sum(up)",
            ),
            levels=[
                volcengine.vmp.AlertingRuleLevelArgs(
                    level="P0",
                    for_="0s",
                    comparator=">=",
                    threshold=2,
                ),
                volcengine.vmp.AlertingRuleLevelArgs(
                    level="P1",
                    for_="0s",
                    comparator=">=",
                    threshold=1,
                ),
                volcengine.vmp.AlertingRuleLevelArgs(
                    level="P2",
                    for_="0s",
                    comparator=">=",
                    threshold=0.5,
                ),
            ],
            annotations=[volcengine.vmp.AlertingRuleAnnotationArgs(
                name="annotation",
                value="acc-test",
            )],
            labels=[volcengine.vmp.AlertingRuleLabelArgs(
                name="label",
                value="acc-test",
            )])
        ```

        ## Import

        VmpAlertingRule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vmp/alertingRule:AlertingRule default 5bd29e81-2717-4ac8-a1a6-d76da2b1****
        ```

        :param str resource_name: The name of the resource.
        :param AlertingRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlertingRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleAnnotationArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleLabelArgs']]]]] = None,
                 levels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleLevelArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_group_policy_id: Optional[pulumi.Input[str]] = None,
                 notify_policy_id: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[pulumi.InputType['AlertingRuleQueryArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlertingRuleArgs.__new__(AlertingRuleArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            if levels is None and not opts.urn:
                raise TypeError("Missing required property 'levels'")
            __props__.__dict__["levels"] = levels
            __props__.__dict__["name"] = name
            if notify_group_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'notify_group_policy_id'")
            __props__.__dict__["notify_group_policy_id"] = notify_group_policy_id
            __props__.__dict__["notify_policy_id"] = notify_policy_id
            if query is None and not opts.urn:
                raise TypeError("Missing required property 'query'")
            __props__.__dict__["query"] = query
            __props__.__dict__["create_time"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_time"] = None
        super(AlertingRule, __self__).__init__(
            'volcengine:vmp/alertingRule:AlertingRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleAnnotationArgs']]]]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleLabelArgs']]]]] = None,
            levels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleLevelArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notify_group_policy_id: Optional[pulumi.Input[str]] = None,
            notify_policy_id: Optional[pulumi.Input[str]] = None,
            query: Optional[pulumi.Input[pulumi.InputType['AlertingRuleQueryArgs']]] = None,
            status: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'AlertingRule':
        """
        Get an existing AlertingRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleAnnotationArgs']]]] annotations: The annotations of the vmp alerting rule.
        :param pulumi.Input[str] create_time: The create time of the vmp alerting rule.
        :param pulumi.Input[str] description: The description of the vmp alerting rule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleLabelArgs']]]] labels: The labels of the vmp alerting rule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertingRuleLevelArgs']]]] levels: The alerting levels of the vmp alerting rule.
        :param pulumi.Input[str] name: The name of the vmp alerting rule.
        :param pulumi.Input[str] notify_group_policy_id: The id of the notify group policy.
        :param pulumi.Input[str] notify_policy_id: The id of the notify policy.
        :param pulumi.Input[pulumi.InputType['AlertingRuleQueryArgs']] query: The alerting query of the vmp alerting rule.
        :param pulumi.Input[str] status: The status of the vmp alerting rule.
        :param pulumi.Input[str] update_time: The update time of the vmp alerting rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlertingRuleState.__new__(_AlertingRuleState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["labels"] = labels
        __props__.__dict__["levels"] = levels
        __props__.__dict__["name"] = name
        __props__.__dict__["notify_group_policy_id"] = notify_group_policy_id
        __props__.__dict__["notify_policy_id"] = notify_policy_id
        __props__.__dict__["query"] = query
        __props__.__dict__["status"] = status
        __props__.__dict__["update_time"] = update_time
        return AlertingRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Sequence['outputs.AlertingRuleAnnotation']]]:
        """
        The annotations of the vmp alerting rule.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of the vmp alerting rule.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the vmp alerting rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence['outputs.AlertingRuleLabel']]]:
        """
        The labels of the vmp alerting rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def levels(self) -> pulumi.Output[Sequence['outputs.AlertingRuleLevel']]:
        """
        The alerting levels of the vmp alerting rule.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the vmp alerting rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyGroupPolicyId")
    def notify_group_policy_id(self) -> pulumi.Output[str]:
        """
        The id of the notify group policy.
        """
        return pulumi.get(self, "notify_group_policy_id")

    @property
    @pulumi.getter(name="notifyPolicyId")
    def notify_policy_id(self) -> pulumi.Output[Optional[str]]:
        """
        The id of the notify policy.
        """
        return pulumi.get(self, "notify_policy_id")

    @property
    @pulumi.getter
    def query(self) -> pulumi.Output['outputs.AlertingRuleQuery']:
        """
        The alerting query of the vmp alerting rule.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the vmp alerting rule.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The update time of the vmp alerting rule.
        """
        return pulumi.get(self, "update_time")

