# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContactArgs', 'Contact']

@pulumi.input_type
class ContactArgs:
    def __init__(__self__, *,
                 ding_talk_bot_webhook: Optional[pulumi.Input['ContactDingTalkBotWebhookArgs']] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 lark_bot_webhook: Optional[pulumi.Input['ContactLarkBotWebhookArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input['ContactPhoneNumberArgs']] = None,
                 we_com_bot_webhook: Optional[pulumi.Input['ContactWeComBotWebhookArgs']] = None,
                 webhook: Optional[pulumi.Input['ContactWebhookArgs']] = None):
        """
        The set of arguments for constructing a Contact resource.
        :param pulumi.Input['ContactDingTalkBotWebhookArgs'] ding_talk_bot_webhook: The ding talk bot webhook of contact.
        :param pulumi.Input[str] email: The email of the contact.
        :param pulumi.Input['ContactLarkBotWebhookArgs'] lark_bot_webhook: The lark bot webhook of contact.
        :param pulumi.Input[str] name: The name of the contact.
        :param pulumi.Input['ContactPhoneNumberArgs'] phone_number: The phone number of contact.
        :param pulumi.Input['ContactWeComBotWebhookArgs'] we_com_bot_webhook: The we com bot webhook of contact.
        :param pulumi.Input['ContactWebhookArgs'] webhook: The webhook of contact.
        """
        if ding_talk_bot_webhook is not None:
            pulumi.set(__self__, "ding_talk_bot_webhook", ding_talk_bot_webhook)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if lark_bot_webhook is not None:
            pulumi.set(__self__, "lark_bot_webhook", lark_bot_webhook)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if we_com_bot_webhook is not None:
            pulumi.set(__self__, "we_com_bot_webhook", we_com_bot_webhook)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="dingTalkBotWebhook")
    def ding_talk_bot_webhook(self) -> Optional[pulumi.Input['ContactDingTalkBotWebhookArgs']]:
        """
        The ding talk bot webhook of contact.
        """
        return pulumi.get(self, "ding_talk_bot_webhook")

    @ding_talk_bot_webhook.setter
    def ding_talk_bot_webhook(self, value: Optional[pulumi.Input['ContactDingTalkBotWebhookArgs']]):
        pulumi.set(self, "ding_talk_bot_webhook", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The email of the contact.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="larkBotWebhook")
    def lark_bot_webhook(self) -> Optional[pulumi.Input['ContactLarkBotWebhookArgs']]:
        """
        The lark bot webhook of contact.
        """
        return pulumi.get(self, "lark_bot_webhook")

    @lark_bot_webhook.setter
    def lark_bot_webhook(self, value: Optional[pulumi.Input['ContactLarkBotWebhookArgs']]):
        pulumi.set(self, "lark_bot_webhook", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the contact.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input['ContactPhoneNumberArgs']]:
        """
        The phone number of contact.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input['ContactPhoneNumberArgs']]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter(name="weComBotWebhook")
    def we_com_bot_webhook(self) -> Optional[pulumi.Input['ContactWeComBotWebhookArgs']]:
        """
        The we com bot webhook of contact.
        """
        return pulumi.get(self, "we_com_bot_webhook")

    @we_com_bot_webhook.setter
    def we_com_bot_webhook(self, value: Optional[pulumi.Input['ContactWeComBotWebhookArgs']]):
        pulumi.set(self, "we_com_bot_webhook", value)

    @property
    @pulumi.getter
    def webhook(self) -> Optional[pulumi.Input['ContactWebhookArgs']]:
        """
        The webhook of contact.
        """
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(self, value: Optional[pulumi.Input['ContactWebhookArgs']]):
        pulumi.set(self, "webhook", value)


@pulumi.input_type
class _ContactState:
    def __init__(__self__, *,
                 contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 ding_talk_bot_webhook: Optional[pulumi.Input['ContactDingTalkBotWebhookArgs']] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 email_active: Optional[pulumi.Input[bool]] = None,
                 lark_bot_webhook: Optional[pulumi.Input['ContactLarkBotWebhookArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input['ContactPhoneNumberArgs']] = None,
                 we_com_bot_webhook: Optional[pulumi.Input['ContactWeComBotWebhookArgs']] = None,
                 webhook: Optional[pulumi.Input['ContactWebhookArgs']] = None):
        """
        Input properties used for looking up and filtering Contact resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: A list of contact group ids.
        :param pulumi.Input[str] create_time: The create time of contact.
        :param pulumi.Input['ContactDingTalkBotWebhookArgs'] ding_talk_bot_webhook: The ding talk bot webhook of contact.
        :param pulumi.Input[str] email: The email of the contact.
        :param pulumi.Input[bool] email_active: Whether the email of contact active.
        :param pulumi.Input['ContactLarkBotWebhookArgs'] lark_bot_webhook: The lark bot webhook of contact.
        :param pulumi.Input[str] name: The name of the contact.
        :param pulumi.Input['ContactPhoneNumberArgs'] phone_number: The phone number of contact.
        :param pulumi.Input['ContactWeComBotWebhookArgs'] we_com_bot_webhook: The we com bot webhook of contact.
        :param pulumi.Input['ContactWebhookArgs'] webhook: The webhook of contact.
        """
        if contact_group_ids is not None:
            pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if ding_talk_bot_webhook is not None:
            pulumi.set(__self__, "ding_talk_bot_webhook", ding_talk_bot_webhook)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if email_active is not None:
            pulumi.set(__self__, "email_active", email_active)
        if lark_bot_webhook is not None:
            pulumi.set(__self__, "lark_bot_webhook", lark_bot_webhook)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if we_com_bot_webhook is not None:
            pulumi.set(__self__, "we_com_bot_webhook", we_com_bot_webhook)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of contact group ids.
        """
        return pulumi.get(self, "contact_group_ids")

    @contact_group_ids.setter
    def contact_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contact_group_ids", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of contact.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dingTalkBotWebhook")
    def ding_talk_bot_webhook(self) -> Optional[pulumi.Input['ContactDingTalkBotWebhookArgs']]:
        """
        The ding talk bot webhook of contact.
        """
        return pulumi.get(self, "ding_talk_bot_webhook")

    @ding_talk_bot_webhook.setter
    def ding_talk_bot_webhook(self, value: Optional[pulumi.Input['ContactDingTalkBotWebhookArgs']]):
        pulumi.set(self, "ding_talk_bot_webhook", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The email of the contact.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="emailActive")
    def email_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the email of contact active.
        """
        return pulumi.get(self, "email_active")

    @email_active.setter
    def email_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_active", value)

    @property
    @pulumi.getter(name="larkBotWebhook")
    def lark_bot_webhook(self) -> Optional[pulumi.Input['ContactLarkBotWebhookArgs']]:
        """
        The lark bot webhook of contact.
        """
        return pulumi.get(self, "lark_bot_webhook")

    @lark_bot_webhook.setter
    def lark_bot_webhook(self, value: Optional[pulumi.Input['ContactLarkBotWebhookArgs']]):
        pulumi.set(self, "lark_bot_webhook", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the contact.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input['ContactPhoneNumberArgs']]:
        """
        The phone number of contact.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input['ContactPhoneNumberArgs']]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter(name="weComBotWebhook")
    def we_com_bot_webhook(self) -> Optional[pulumi.Input['ContactWeComBotWebhookArgs']]:
        """
        The we com bot webhook of contact.
        """
        return pulumi.get(self, "we_com_bot_webhook")

    @we_com_bot_webhook.setter
    def we_com_bot_webhook(self, value: Optional[pulumi.Input['ContactWeComBotWebhookArgs']]):
        pulumi.set(self, "we_com_bot_webhook", value)

    @property
    @pulumi.getter
    def webhook(self) -> Optional[pulumi.Input['ContactWebhookArgs']]:
        """
        The webhook of contact.
        """
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(self, value: Optional[pulumi.Input['ContactWebhookArgs']]):
        pulumi.set(self, "webhook", value)


class Contact(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ding_talk_bot_webhook: Optional[pulumi.Input[pulumi.InputType['ContactDingTalkBotWebhookArgs']]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 lark_bot_webhook: Optional[pulumi.Input[pulumi.InputType['ContactLarkBotWebhookArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[pulumi.InputType['ContactPhoneNumberArgs']]] = None,
                 we_com_bot_webhook: Optional[pulumi.Input[pulumi.InputType['ContactWeComBotWebhookArgs']]] = None,
                 webhook: Optional[pulumi.Input[pulumi.InputType['ContactWebhookArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage vmp contact
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vmp.Contact("foo",
            ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
                address="https://www.dingacctest1.com",
                at_mobiles=["18046891812"],
            ),
            email="acctest1@tftest.com",
            lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
                address="https://www.acctest1.com",
            ),
            phone_number=volcengine.vmp.ContactPhoneNumberArgs(
                country_code="+86",
                number="18310101010",
            ),
            webhook=volcengine.vmp.ContactWebhookArgs(
                address="https://www.acctest1.com",
            ))
        ```

        ## Import

        VMP Contact can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vmp/contact:Contact default 60dde3ca-951c-4c05-8777-e5a7caa07ad6
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ContactDingTalkBotWebhookArgs']] ding_talk_bot_webhook: The ding talk bot webhook of contact.
        :param pulumi.Input[str] email: The email of the contact.
        :param pulumi.Input[pulumi.InputType['ContactLarkBotWebhookArgs']] lark_bot_webhook: The lark bot webhook of contact.
        :param pulumi.Input[str] name: The name of the contact.
        :param pulumi.Input[pulumi.InputType['ContactPhoneNumberArgs']] phone_number: The phone number of contact.
        :param pulumi.Input[pulumi.InputType['ContactWeComBotWebhookArgs']] we_com_bot_webhook: The we com bot webhook of contact.
        :param pulumi.Input[pulumi.InputType['ContactWebhookArgs']] webhook: The webhook of contact.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ContactArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vmp contact
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vmp.Contact("foo",
            ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
                address="https://www.dingacctest1.com",
                at_mobiles=["18046891812"],
            ),
            email="acctest1@tftest.com",
            lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
                address="https://www.acctest1.com",
            ),
            phone_number=volcengine.vmp.ContactPhoneNumberArgs(
                country_code="+86",
                number="18310101010",
            ),
            webhook=volcengine.vmp.ContactWebhookArgs(
                address="https://www.acctest1.com",
            ))
        ```

        ## Import

        VMP Contact can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vmp/contact:Contact default 60dde3ca-951c-4c05-8777-e5a7caa07ad6
        ```

        :param str resource_name: The name of the resource.
        :param ContactArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContactArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ding_talk_bot_webhook: Optional[pulumi.Input[pulumi.InputType['ContactDingTalkBotWebhookArgs']]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 lark_bot_webhook: Optional[pulumi.Input[pulumi.InputType['ContactLarkBotWebhookArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[pulumi.InputType['ContactPhoneNumberArgs']]] = None,
                 we_com_bot_webhook: Optional[pulumi.Input[pulumi.InputType['ContactWeComBotWebhookArgs']]] = None,
                 webhook: Optional[pulumi.Input[pulumi.InputType['ContactWebhookArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContactArgs.__new__(ContactArgs)

            __props__.__dict__["ding_talk_bot_webhook"] = ding_talk_bot_webhook
            __props__.__dict__["email"] = email
            __props__.__dict__["lark_bot_webhook"] = lark_bot_webhook
            __props__.__dict__["name"] = name
            __props__.__dict__["phone_number"] = phone_number
            __props__.__dict__["we_com_bot_webhook"] = we_com_bot_webhook
            __props__.__dict__["webhook"] = webhook
            __props__.__dict__["contact_group_ids"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["email_active"] = None
        super(Contact, __self__).__init__(
            'volcengine:vmp/contact:Contact',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            ding_talk_bot_webhook: Optional[pulumi.Input[pulumi.InputType['ContactDingTalkBotWebhookArgs']]] = None,
            email: Optional[pulumi.Input[str]] = None,
            email_active: Optional[pulumi.Input[bool]] = None,
            lark_bot_webhook: Optional[pulumi.Input[pulumi.InputType['ContactLarkBotWebhookArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            phone_number: Optional[pulumi.Input[pulumi.InputType['ContactPhoneNumberArgs']]] = None,
            we_com_bot_webhook: Optional[pulumi.Input[pulumi.InputType['ContactWeComBotWebhookArgs']]] = None,
            webhook: Optional[pulumi.Input[pulumi.InputType['ContactWebhookArgs']]] = None) -> 'Contact':
        """
        Get an existing Contact resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: A list of contact group ids.
        :param pulumi.Input[str] create_time: The create time of contact.
        :param pulumi.Input[pulumi.InputType['ContactDingTalkBotWebhookArgs']] ding_talk_bot_webhook: The ding talk bot webhook of contact.
        :param pulumi.Input[str] email: The email of the contact.
        :param pulumi.Input[bool] email_active: Whether the email of contact active.
        :param pulumi.Input[pulumi.InputType['ContactLarkBotWebhookArgs']] lark_bot_webhook: The lark bot webhook of contact.
        :param pulumi.Input[str] name: The name of the contact.
        :param pulumi.Input[pulumi.InputType['ContactPhoneNumberArgs']] phone_number: The phone number of contact.
        :param pulumi.Input[pulumi.InputType['ContactWeComBotWebhookArgs']] we_com_bot_webhook: The we com bot webhook of contact.
        :param pulumi.Input[pulumi.InputType['ContactWebhookArgs']] webhook: The webhook of contact.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContactState.__new__(_ContactState)

        __props__.__dict__["contact_group_ids"] = contact_group_ids
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["ding_talk_bot_webhook"] = ding_talk_bot_webhook
        __props__.__dict__["email"] = email
        __props__.__dict__["email_active"] = email_active
        __props__.__dict__["lark_bot_webhook"] = lark_bot_webhook
        __props__.__dict__["name"] = name
        __props__.__dict__["phone_number"] = phone_number
        __props__.__dict__["we_com_bot_webhook"] = we_com_bot_webhook
        __props__.__dict__["webhook"] = webhook
        return Contact(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of contact group ids.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of contact.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dingTalkBotWebhook")
    def ding_talk_bot_webhook(self) -> pulumi.Output[Optional['outputs.ContactDingTalkBotWebhook']]:
        """
        The ding talk bot webhook of contact.
        """
        return pulumi.get(self, "ding_talk_bot_webhook")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[Optional[str]]:
        """
        The email of the contact.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="emailActive")
    def email_active(self) -> pulumi.Output[bool]:
        """
        Whether the email of contact active.
        """
        return pulumi.get(self, "email_active")

    @property
    @pulumi.getter(name="larkBotWebhook")
    def lark_bot_webhook(self) -> pulumi.Output[Optional['outputs.ContactLarkBotWebhook']]:
        """
        The lark bot webhook of contact.
        """
        return pulumi.get(self, "lark_bot_webhook")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the contact.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> pulumi.Output[Optional['outputs.ContactPhoneNumber']]:
        """
        The phone number of contact.
        """
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="weComBotWebhook")
    def we_com_bot_webhook(self) -> pulumi.Output[Optional['outputs.ContactWeComBotWebhook']]:
        """
        The we com bot webhook of contact.
        """
        return pulumi.get(self, "we_com_bot_webhook")

    @property
    @pulumi.getter
    def webhook(self) -> pulumi.Output[Optional['outputs.ContactWebhook']]:
        """
        The webhook of contact.
        """
        return pulumi.get(self, "webhook")

