# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AlertingRuleAnnotationArgs',
    'AlertingRuleLabelArgs',
    'AlertingRuleLevelArgs',
    'AlertingRuleQueryArgs',
    'ContactDingTalkBotWebhookArgs',
    'ContactLarkBotWebhookArgs',
    'ContactPhoneNumberArgs',
    'ContactWeComBotWebhookArgs',
    'ContactWebhookArgs',
    'NotifyGroupPolicyLevelArgs',
    'NotifyPolicyLevelArgs',
    'NotifyTemplateActiveArgs',
    'NotifyTemplateResolvedArgs',
    'WorkspaceTagArgs',
    'WorkspacesTagArgs',
    'GetWorkspacesTagArgs',
]

@pulumi.input_type
class AlertingRuleAnnotationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the annotation.
        :param pulumi.Input[str] value: The value of the annotation.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the annotation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the annotation.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AlertingRuleLabelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the label.
        :param pulumi.Input[str] value: The value of the label.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the label.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the label.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AlertingRuleLevelArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 for_: pulumi.Input[str],
                 level: pulumi.Input[str],
                 threshold: pulumi.Input[float]):
        """
        :param pulumi.Input[str] comparator: The comparator of the vmp alerting rule. Valid values: `>`, `>=`, `<`, `<=`, `==`, `!=`.
        :param pulumi.Input[str] for_: The duration of the alerting rule. Valid values: `0s`, `1m`, `2m`, `5m`, `10m`.
        :param pulumi.Input[str] level: The level of the vmp alerting rule. Valid values: `P0`, `P1`, `P2`. The value of this field cannot be duplicate.
        :param pulumi.Input[float] threshold: The threshold of the vmp alerting rule.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "for_", for_)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator of the vmp alerting rule. Valid values: `>`, `>=`, `<`, `<=`, `==`, `!=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter(name="for")
    def for_(self) -> pulumi.Input[str]:
        """
        The duration of the alerting rule. Valid values: `0s`, `1m`, `2m`, `5m`, `10m`.
        """
        return pulumi.get(self, "for_")

    @for_.setter
    def for_(self, value: pulumi.Input[str]):
        pulumi.set(self, "for_", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        """
        The level of the vmp alerting rule. Valid values: `P0`, `P1`, `P2`. The value of this field cannot be duplicate.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        """
        The threshold of the vmp alerting rule.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class AlertingRuleQueryArgs:
    def __init__(__self__, *,
                 prom_ql: pulumi.Input[str],
                 workspace_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] prom_ql: The prom ql of query.
        :param pulumi.Input[str] workspace_id: The id of the workspace.
        """
        pulumi.set(__self__, "prom_ql", prom_ql)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="promQl")
    def prom_ql(self) -> pulumi.Input[str]:
        """
        The prom ql of query.
        """
        return pulumi.get(self, "prom_ql")

    @prom_ql.setter
    def prom_ql(self, value: pulumi.Input[str]):
        pulumi.set(self, "prom_ql", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        The id of the workspace.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class ContactDingTalkBotWebhookArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 at_mobiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 at_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: The address of webhook.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] at_mobiles: The mobiles of user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] at_user_ids: The ids of user.
        :param pulumi.Input[str] secret_key: The secret key of webhook.
        """
        pulumi.set(__self__, "address", address)
        if at_mobiles is not None:
            pulumi.set(__self__, "at_mobiles", at_mobiles)
        if at_user_ids is not None:
            pulumi.set(__self__, "at_user_ids", at_user_ids)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="atMobiles")
    def at_mobiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The mobiles of user.
        """
        return pulumi.get(self, "at_mobiles")

    @at_mobiles.setter
    def at_mobiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "at_mobiles", value)

    @property
    @pulumi.getter(name="atUserIds")
    def at_user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ids of user.
        """
        return pulumi.get(self, "at_user_ids")

    @at_user_ids.setter
    def at_user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "at_user_ids", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The secret key of webhook.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ContactLarkBotWebhookArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: The address of webhook.
        :param pulumi.Input[str] secret_key: The secret key of webhook.
        """
        pulumi.set(__self__, "address", address)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The secret key of webhook.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ContactPhoneNumberArgs:
    def __init__(__self__, *,
                 country_code: pulumi.Input[str],
                 number: pulumi.Input[str]):
        """
        :param pulumi.Input[str] country_code: The country code of phone number. The value is `+86`.
        :param pulumi.Input[str] number: The number of phone number.
        """
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "number", number)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[str]:
        """
        The country code of phone number. The value is `+86`.
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[str]:
        """
        The number of phone number.
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[str]):
        pulumi.set(self, "number", value)


@pulumi.input_type
class ContactWeComBotWebhookArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 at_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] address: The address of webhook.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] at_user_ids: The ids of user.
        """
        pulumi.set(__self__, "address", address)
        if at_user_ids is not None:
            pulumi.set(__self__, "at_user_ids", at_user_ids)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="atUserIds")
    def at_user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ids of user.
        """
        return pulumi.get(self, "at_user_ids")

    @at_user_ids.setter
    def at_user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "at_user_ids", value)


@pulumi.input_type
class ContactWebhookArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: The address of webhook.
        :param pulumi.Input[str] token: The token of webhook.
        """
        pulumi.set(__self__, "address", address)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        The token of webhook.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class NotifyGroupPolicyLevelArgs:
    def __init__(__self__, *,
                 group_bies: pulumi.Input[Sequence[pulumi.Input[str]]],
                 group_interval: pulumi.Input[str],
                 group_wait: pulumi.Input[str],
                 level: pulumi.Input[str],
                 repeat_interval: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: The aggregate dimension, the value can be `__rule__`.
        :param pulumi.Input[str] group_interval: The aggregation cycle. Integer form, unit is second.
        :param pulumi.Input[str] group_wait: The wait time. Integer form, unit is second.
        :param pulumi.Input[str] level: The level of the policy, the value can be one of the following: `P0`, `P1`, `P2`.
        :param pulumi.Input[str] repeat_interval: The notification cycle. Integer form, unit is second.
        """
        pulumi.set(__self__, "group_bies", group_bies)
        pulumi.set(__self__, "group_interval", group_interval)
        pulumi.set(__self__, "group_wait", group_wait)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "repeat_interval", repeat_interval)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The aggregate dimension, the value can be `__rule__`.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="groupInterval")
    def group_interval(self) -> pulumi.Input[str]:
        """
        The aggregation cycle. Integer form, unit is second.
        """
        return pulumi.get(self, "group_interval")

    @group_interval.setter
    def group_interval(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_interval", value)

    @property
    @pulumi.getter(name="groupWait")
    def group_wait(self) -> pulumi.Input[str]:
        """
        The wait time. Integer form, unit is second.
        """
        return pulumi.get(self, "group_wait")

    @group_wait.setter
    def group_wait(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_wait", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        """
        The level of the policy, the value can be one of the following: `P0`, `P1`, `P2`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> pulumi.Input[str]:
        """
        The notification cycle. Integer form, unit is second.
        """
        return pulumi.get(self, "repeat_interval")

    @repeat_interval.setter
    def repeat_interval(self, value: pulumi.Input[str]):
        pulumi.set(self, "repeat_interval", value)


@pulumi.input_type
class NotifyPolicyLevelArgs:
    def __init__(__self__, *,
                 channels: pulumi.Input[Sequence[pulumi.Input[str]]],
                 contact_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 level: pulumi.Input[str],
                 resolved_channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The alarm notification method of the alarm notification policy, the optional value can be `Email`, `Webhook`, `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: The contact group for the alarm notification policy.
        :param pulumi.Input[str] level: The level of the policy, the value can be one of the following: `P0`, `P1`, `P2`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resolved_channels: The resolved alarm notification method of the alarm notification policy, the optional value can be `Email`, `Webhook`, `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        pulumi.set(__self__, "channels", channels)
        pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        pulumi.set(__self__, "level", level)
        if resolved_channels is not None:
            pulumi.set(__self__, "resolved_channels", resolved_channels)

    @property
    @pulumi.getter
    def channels(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The alarm notification method of the alarm notification policy, the optional value can be `Email`, `Webhook`, `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The contact group for the alarm notification policy.
        """
        return pulumi.get(self, "contact_group_ids")

    @contact_group_ids.setter
    def contact_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "contact_group_ids", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        """
        The level of the policy, the value can be one of the following: `P0`, `P1`, `P2`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter(name="resolvedChannels")
    def resolved_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The resolved alarm notification method of the alarm notification policy, the optional value can be `Email`, `Webhook`, `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        return pulumi.get(self, "resolved_channels")

    @resolved_channels.setter
    def resolved_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resolved_channels", value)


@pulumi.input_type
class NotifyTemplateActiveArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 title: pulumi.Input[str]):
        """
        :param pulumi.Input[str] content: The content of notify template.
        :param pulumi.Input[str] title: The title of notify template.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The content of notify template.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of notify template.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class NotifyTemplateResolvedArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 title: pulumi.Input[str]):
        """
        :param pulumi.Input[str] content: The content of notify template.
        :param pulumi.Input[str] title: The title of notify template.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The content of notify template.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of notify template.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkspaceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The Key of Tags.
        :param pulumi.Input[str] value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WorkspacesTagArgs:
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The Key of Tags.
        :param Sequence[str] values: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetWorkspacesTagArgs:
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The Key of Tags.
        :param Sequence[str] values: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


