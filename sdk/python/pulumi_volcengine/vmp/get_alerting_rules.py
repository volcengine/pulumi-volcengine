# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlertingRulesResult',
    'AwaitableGetAlertingRulesResult',
    'get_alerting_rules',
    'get_alerting_rules_output',
]

@pulumi.output_type
class GetAlertingRulesResult:
    """
    A collection of values returned by getAlertingRules.
    """
    def __init__(__self__, alerting_rules=None, id=None, ids=None, name=None, name_regex=None, notify_group_policy_ids=None, notify_policy_ids=None, output_file=None, status=None, total_count=None, type=None, workspace_id=None):
        if alerting_rules and not isinstance(alerting_rules, list):
            raise TypeError("Expected argument 'alerting_rules' to be a list")
        pulumi.set(__self__, "alerting_rules", alerting_rules)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if notify_group_policy_ids and not isinstance(notify_group_policy_ids, list):
            raise TypeError("Expected argument 'notify_group_policy_ids' to be a list")
        pulumi.set(__self__, "notify_group_policy_ids", notify_group_policy_ids)
        if notify_policy_ids and not isinstance(notify_policy_ids, list):
            raise TypeError("Expected argument 'notify_policy_ids' to be a list")
        pulumi.set(__self__, "notify_policy_ids", notify_policy_ids)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="alertingRules")
    def alerting_rules(self) -> Sequence['outputs.GetAlertingRulesAlertingRuleResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "alerting_rules")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the vmp alerting rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="notifyGroupPolicyIds")
    def notify_group_policy_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notify_group_policy_ids")

    @property
    @pulumi.getter(name="notifyPolicyIds")
    def notify_policy_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notify_policy_ids")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the vmp alerting rule.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the vmp alerting rule.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[str]:
        """
        The id of the workspace.
        """
        return pulumi.get(self, "workspace_id")


class AwaitableGetAlertingRulesResult(GetAlertingRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlertingRulesResult(
            alerting_rules=self.alerting_rules,
            id=self.id,
            ids=self.ids,
            name=self.name,
            name_regex=self.name_regex,
            notify_group_policy_ids=self.notify_group_policy_ids,
            notify_policy_ids=self.notify_policy_ids,
            output_file=self.output_file,
            status=self.status,
            total_count=self.total_count,
            type=self.type,
            workspace_id=self.workspace_id)


def get_alerting_rules(ids: Optional[Sequence[str]] = None,
                       name: Optional[str] = None,
                       name_regex: Optional[str] = None,
                       notify_group_policy_ids: Optional[Sequence[str]] = None,
                       notify_policy_ids: Optional[Sequence[str]] = None,
                       output_file: Optional[str] = None,
                       status: Optional[str] = None,
                       type: Optional[str] = None,
                       workspace_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlertingRulesResult:
    """
    Use this data source to query detailed information of vmp alerting rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_workspace = volcengine.vmp.Workspace("fooWorkspace",
        instance_type_id="vmp.standard.15d",
        delete_protection_enabled=False,
        description="acc-test-1",
        username="admin123",
        password="***********")
    foo_contact = volcengine.vmp.Contact("fooContact",
        email="acctest1@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest1.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest1.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest1.com",
            at_mobiles=["18046891812"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101010",
        ))
    foo1_contact = volcengine.vmp.Contact("foo1Contact",
        email="acctest2@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest2.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest2.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest2.com",
            at_mobiles=["18046891813"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101011",
        ))
    foo_contact_group = volcengine.vmp.ContactGroup("fooContactGroup", contact_ids=[foo_contact.id])
    foo1_contact_group = volcengine.vmp.ContactGroup("foo1ContactGroup", contact_ids=[foo1_contact.id])
    foo_notify_policy = volcengine.vmp.NotifyPolicy("fooNotifyPolicy",
        description="acc-test-1",
        levels=[
            volcengine.vmp.NotifyPolicyLevelArgs(
                level="P1",
                contact_group_ids=[foo_contact_group.id],
                channels=[
                    "Email",
                    "Webhook",
                ],
            ),
            volcengine.vmp.NotifyPolicyLevelArgs(
                level="P0",
                contact_group_ids=[foo1_contact_group.id],
                channels=["LarkBotWebhook"],
            ),
        ])
    foo_notify_group_policy = volcengine.vmp.NotifyGroupPolicy("fooNotifyGroupPolicy",
        description="acc-test-1",
        levels=[
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P2",
                group_bies=["__rule__"],
                group_wait="35",
                group_interval="30",
                repeat_interval="30",
            ),
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P0",
                group_bies=["__rule__"],
                group_wait="30",
                group_interval="30",
                repeat_interval="30",
            ),
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P1",
                group_bies=["__rule__"],
                group_wait="40",
                group_interval="45",
                repeat_interval="30",
            ),
        ])
    foo_alerting_rule = volcengine.vmp.AlertingRule("fooAlertingRule",
        description="acc-test-1",
        notify_policy_id=foo_notify_policy.id,
        notify_group_policy_id=foo_notify_group_policy.id,
        query=volcengine.vmp.AlertingRuleQueryArgs(
            workspace_id=foo_workspace.id,
            prom_ql="sum(up)",
        ),
        levels=[
            volcengine.vmp.AlertingRuleLevelArgs(
                level="P0",
                for_="0s",
                comparator=">=",
                threshold=2,
            ),
            volcengine.vmp.AlertingRuleLevelArgs(
                level="P1",
                for_="0s",
                comparator=">=",
                threshold=1,
            ),
            volcengine.vmp.AlertingRuleLevelArgs(
                level="P2",
                for_="0s",
                comparator=">=",
                threshold=0.5,
            ),
        ])
    foo_alerting_rules = volcengine.vmp.get_alerting_rules_output(ids=[foo_alerting_rule.id])
    ```


    :param Sequence[str] ids: A list of vmp alerting rule IDs.
    :param str name: The name of vmp alerting rule. This field support fuzzy query.
    :param str name_regex: A Name Regex of Resource.
    :param Sequence[str] notify_group_policy_ids: A list of notify group policy IDs.
    :param Sequence[str] notify_policy_ids: A list of notify policy IDs.
    :param str output_file: File name where to save data source results.
    :param str status: The status of vmp alerting rule. Valid values: `Running`, `Disabled`.
    :param str type: The type of vmp alerting rule. Valid values: `vmp/PromQL`.
    :param str workspace_id: The workspace id of vmp alerting rule.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['name'] = name
    __args__['nameRegex'] = name_regex
    __args__['notifyGroupPolicyIds'] = notify_group_policy_ids
    __args__['notifyPolicyIds'] = notify_policy_ids
    __args__['outputFile'] = output_file
    __args__['status'] = status
    __args__['type'] = type
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vmp/getAlertingRules:getAlertingRules', __args__, opts=opts, typ=GetAlertingRulesResult).value

    return AwaitableGetAlertingRulesResult(
        alerting_rules=pulumi.get(__ret__, 'alerting_rules'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name=pulumi.get(__ret__, 'name'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        notify_group_policy_ids=pulumi.get(__ret__, 'notify_group_policy_ids'),
        notify_policy_ids=pulumi.get(__ret__, 'notify_policy_ids'),
        output_file=pulumi.get(__ret__, 'output_file'),
        status=pulumi.get(__ret__, 'status'),
        total_count=pulumi.get(__ret__, 'total_count'),
        type=pulumi.get(__ret__, 'type'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))


@_utilities.lift_output_func(get_alerting_rules)
def get_alerting_rules_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                              name: Optional[pulumi.Input[Optional[str]]] = None,
                              name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                              notify_group_policy_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                              notify_policy_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                              output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              status: Optional[pulumi.Input[Optional[str]]] = None,
                              type: Optional[pulumi.Input[Optional[str]]] = None,
                              workspace_id: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlertingRulesResult]:
    """
    Use this data source to query detailed information of vmp alerting rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_workspace = volcengine.vmp.Workspace("fooWorkspace",
        instance_type_id="vmp.standard.15d",
        delete_protection_enabled=False,
        description="acc-test-1",
        username="admin123",
        password="***********")
    foo_contact = volcengine.vmp.Contact("fooContact",
        email="acctest1@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest1.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest1.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest1.com",
            at_mobiles=["18046891812"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101010",
        ))
    foo1_contact = volcengine.vmp.Contact("foo1Contact",
        email="acctest2@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest2.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest2.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest2.com",
            at_mobiles=["18046891813"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101011",
        ))
    foo_contact_group = volcengine.vmp.ContactGroup("fooContactGroup", contact_ids=[foo_contact.id])
    foo1_contact_group = volcengine.vmp.ContactGroup("foo1ContactGroup", contact_ids=[foo1_contact.id])
    foo_notify_policy = volcengine.vmp.NotifyPolicy("fooNotifyPolicy",
        description="acc-test-1",
        levels=[
            volcengine.vmp.NotifyPolicyLevelArgs(
                level="P1",
                contact_group_ids=[foo_contact_group.id],
                channels=[
                    "Email",
                    "Webhook",
                ],
            ),
            volcengine.vmp.NotifyPolicyLevelArgs(
                level="P0",
                contact_group_ids=[foo1_contact_group.id],
                channels=["LarkBotWebhook"],
            ),
        ])
    foo_notify_group_policy = volcengine.vmp.NotifyGroupPolicy("fooNotifyGroupPolicy",
        description="acc-test-1",
        levels=[
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P2",
                group_bies=["__rule__"],
                group_wait="35",
                group_interval="30",
                repeat_interval="30",
            ),
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P0",
                group_bies=["__rule__"],
                group_wait="30",
                group_interval="30",
                repeat_interval="30",
            ),
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P1",
                group_bies=["__rule__"],
                group_wait="40",
                group_interval="45",
                repeat_interval="30",
            ),
        ])
    foo_alerting_rule = volcengine.vmp.AlertingRule("fooAlertingRule",
        description="acc-test-1",
        notify_policy_id=foo_notify_policy.id,
        notify_group_policy_id=foo_notify_group_policy.id,
        query=volcengine.vmp.AlertingRuleQueryArgs(
            workspace_id=foo_workspace.id,
            prom_ql="sum(up)",
        ),
        levels=[
            volcengine.vmp.AlertingRuleLevelArgs(
                level="P0",
                for_="0s",
                comparator=">=",
                threshold=2,
            ),
            volcengine.vmp.AlertingRuleLevelArgs(
                level="P1",
                for_="0s",
                comparator=">=",
                threshold=1,
            ),
            volcengine.vmp.AlertingRuleLevelArgs(
                level="P2",
                for_="0s",
                comparator=">=",
                threshold=0.5,
            ),
        ])
    foo_alerting_rules = volcengine.vmp.get_alerting_rules_output(ids=[foo_alerting_rule.id])
    ```


    :param Sequence[str] ids: A list of vmp alerting rule IDs.
    :param str name: The name of vmp alerting rule. This field support fuzzy query.
    :param str name_regex: A Name Regex of Resource.
    :param Sequence[str] notify_group_policy_ids: A list of notify group policy IDs.
    :param Sequence[str] notify_policy_ids: A list of notify policy IDs.
    :param str output_file: File name where to save data source results.
    :param str status: The status of vmp alerting rule. Valid values: `Running`, `Disabled`.
    :param str type: The type of vmp alerting rule. Valid values: `vmp/PromQL`.
    :param str workspace_id: The workspace id of vmp alerting rule.
    """
    ...
