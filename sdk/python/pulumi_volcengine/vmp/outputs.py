# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AlertingRuleAnnotation',
    'AlertingRuleLabel',
    'AlertingRuleLevel',
    'AlertingRuleQuery',
    'AlertingRulesAlertingRuleResult',
    'AlertingRulesAlertingRuleAnnotationResult',
    'AlertingRulesAlertingRuleLabelResult',
    'AlertingRulesAlertingRuleLevelResult',
    'AlertingRulesAlertingRuleQueryResult',
    'AlertsAlertResult',
    'AlertsAlertAlertingRuleQueryResult',
    'AlertsAlertLevelResult',
    'AlertsAlertResourceResult',
    'AlertsAlertResourceLabelResult',
    'ContactDingTalkBotWebhook',
    'ContactGroupsContactGroupResult',
    'ContactLarkBotWebhook',
    'ContactPhoneNumber',
    'ContactWeComBotWebhook',
    'ContactWebhook',
    'ContactsContactResult',
    'ContactsContactDingTalkBotWebhookResult',
    'ContactsContactLarkBotWebhookResult',
    'ContactsContactPhoneNumberResult',
    'ContactsContactWeComBotWebhookResult',
    'ContactsContactWebhookResult',
    'InstanceTypesInstanceTypeResult',
    'NotifyGroupPoliciesNotifyPolicyResult',
    'NotifyGroupPoliciesNotifyPolicyLevelResult',
    'NotifyGroupPolicyLevel',
    'NotifyPoliciesNotifyPolicyResult',
    'NotifyPoliciesNotifyPolicyLevelResult',
    'NotifyPolicyLevel',
    'NotifyTemplateActive',
    'NotifyTemplateResolved',
    'NotifyTemplatesNotifyTemplateResult',
    'NotifyTemplatesNotifyTemplateActiveResult',
    'NotifyTemplatesNotifyTemplateResolvedResult',
    'RuleFilesFileResult',
    'RulesRuleResult',
    'RulesRuleLabelResult',
    'WorkspaceTag',
    'WorkspacesTagResult',
    'WorkspacesWorkspaceResult',
    'WorkspacesWorkspaceTagResult',
    'GetAlertingRulesAlertingRuleResult',
    'GetAlertingRulesAlertingRuleAnnotationResult',
    'GetAlertingRulesAlertingRuleLabelResult',
    'GetAlertingRulesAlertingRuleLevelResult',
    'GetAlertingRulesAlertingRuleQueryResult',
    'GetAlertsAlertResult',
    'GetAlertsAlertAlertingRuleQueryResult',
    'GetAlertsAlertLevelResult',
    'GetAlertsAlertResourceResult',
    'GetAlertsAlertResourceLabelResult',
    'GetContactGroupsContactGroupResult',
    'GetContactsContactResult',
    'GetContactsContactDingTalkBotWebhookResult',
    'GetContactsContactLarkBotWebhookResult',
    'GetContactsContactPhoneNumberResult',
    'GetContactsContactWeComBotWebhookResult',
    'GetContactsContactWebhookResult',
    'GetInstanceTypesInstanceTypeResult',
    'GetNotifyGroupPoliciesNotifyPolicyResult',
    'GetNotifyGroupPoliciesNotifyPolicyLevelResult',
    'GetNotifyPoliciesNotifyPolicyResult',
    'GetNotifyPoliciesNotifyPolicyLevelResult',
    'GetNotifyTemplatesNotifyTemplateResult',
    'GetNotifyTemplatesNotifyTemplateActiveResult',
    'GetNotifyTemplatesNotifyTemplateResolvedResult',
    'GetRuleFilesFileResult',
    'GetRulesRuleResult',
    'GetRulesRuleLabelResult',
    'GetWorkspacesTagResult',
    'GetWorkspacesWorkspaceResult',
    'GetWorkspacesWorkspaceTagResult',
]

@pulumi.output_type
class AlertingRuleAnnotation(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the annotation.
        :param str value: The value of the annotation.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the annotation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the annotation.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AlertingRuleLabel(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the label.
        :param str value: The value of the label.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the label.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AlertingRuleLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "for":
            suggest = "for_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertingRuleLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertingRuleLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertingRuleLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparator: str,
                 for_: str,
                 level: str,
                 threshold: float):
        """
        :param str comparator: The comparator of the vmp alerting rule. Valid values: `>`, `>=`, `<`, `<=`, `==`, `!=`.
        :param str for_: The duration of the alerting rule. Valid values: `0s`, `1m`, `2m`, `5m`, `10m`.
        :param str level: The level of the vmp alerting rule. Valid values: `P0`, `P1`, `P2`. The value of this field cannot be duplicate.
        :param float threshold: The threshold of the vmp alerting rule.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "for_", for_)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        """
        The comparator of the vmp alerting rule. Valid values: `>`, `>=`, `<`, `<=`, `==`, `!=`.
        """
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter(name="for")
    def for_(self) -> str:
        """
        The duration of the alerting rule. Valid values: `0s`, `1m`, `2m`, `5m`, `10m`.
        """
        return pulumi.get(self, "for_")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the vmp alerting rule. Valid values: `P0`, `P1`, `P2`. The value of this field cannot be duplicate.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        The threshold of the vmp alerting rule.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class AlertingRuleQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "promQl":
            suggest = "prom_ql"
        elif key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertingRuleQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertingRuleQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertingRuleQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prom_ql: str,
                 workspace_id: str):
        """
        :param str prom_ql: The prom ql of query.
        :param str workspace_id: The id of the workspace.
        """
        pulumi.set(__self__, "prom_ql", prom_ql)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="promQl")
    def prom_ql(self) -> str:
        """
        The prom ql of query.
        """
        return pulumi.get(self, "prom_ql")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The id of the workspace.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class AlertingRulesAlertingRuleResult(dict):
    def __init__(__self__, *,
                 annotations: Sequence['outputs.AlertingRulesAlertingRuleAnnotationResult'],
                 create_time: str,
                 description: str,
                 id: str,
                 labels: Sequence['outputs.AlertingRulesAlertingRuleLabelResult'],
                 levels: Sequence['outputs.AlertingRulesAlertingRuleLevelResult'],
                 name: str,
                 notify_group_policy_id: str,
                 notify_policy_id: str,
                 queries: Sequence['outputs.AlertingRulesAlertingRuleQueryResult'],
                 status: str,
                 type: str,
                 update_time: str):
        """
        :param Sequence['AlertingRulesAlertingRuleAnnotationArgs'] annotations: The annotations of the vmp alerting rule.
        :param str create_time: The create time of the vmp alerting rule.
        :param str description: The description of the vmp alerting rule.
        :param str id: The id of the vmp alerting rule.
        :param Sequence['AlertingRulesAlertingRuleLabelArgs'] labels: The labels of the vmp alerting rule.
        :param Sequence['AlertingRulesAlertingRuleLevelArgs'] levels: The alerting levels of the vmp alerting rule.
        :param str name: The name of vmp alerting rule. This field support fuzzy query.
        :param str notify_group_policy_id: The notify group policy id of the vmp alerting rule.
        :param str notify_policy_id: The notify policy id of the vmp alerting rule.
        :param Sequence['AlertingRulesAlertingRuleQueryArgs'] queries: The alerting query of the vmp alerting rule.
        :param str status: The status of vmp alerting rule. Valid values: `Running`, `Disabled`.
        :param str type: The type of vmp alerting rule. Valid values: `vmp/PromQL`.
        :param str update_time: The update time of the vmp alerting rule.
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notify_group_policy_id", notify_group_policy_id)
        pulumi.set(__self__, "notify_policy_id", notify_policy_id)
        pulumi.set(__self__, "queries", queries)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Sequence['outputs.AlertingRulesAlertingRuleAnnotationResult']:
        """
        The annotations of the vmp alerting rule.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the vmp alerting rule.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the vmp alerting rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the vmp alerting rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.AlertingRulesAlertingRuleLabelResult']:
        """
        The labels of the vmp alerting rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def levels(self) -> Sequence['outputs.AlertingRulesAlertingRuleLevelResult']:
        """
        The alerting levels of the vmp alerting rule.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of vmp alerting rule. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyGroupPolicyId")
    def notify_group_policy_id(self) -> str:
        """
        The notify group policy id of the vmp alerting rule.
        """
        return pulumi.get(self, "notify_group_policy_id")

    @property
    @pulumi.getter(name="notifyPolicyId")
    def notify_policy_id(self) -> str:
        """
        The notify policy id of the vmp alerting rule.
        """
        return pulumi.get(self, "notify_policy_id")

    @property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.AlertingRulesAlertingRuleQueryResult']:
        """
        The alerting query of the vmp alerting rule.
        """
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of vmp alerting rule. Valid values: `Running`, `Disabled`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of vmp alerting rule. Valid values: `vmp/PromQL`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of the vmp alerting rule.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class AlertingRulesAlertingRuleAnnotationResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of vmp alerting rule. This field support fuzzy query.
        :param str value: The value of the label.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of vmp alerting rule. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AlertingRulesAlertingRuleLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The name of the label.
        :param str value: The value of the label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The name of the label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AlertingRulesAlertingRuleLevelResult(dict):
    def __init__(__self__, *,
                 comparator: str,
                 for_: str,
                 level: str,
                 threshold: float):
        """
        :param str comparator: The comparator of the vmp alerting rule.
        :param str for_: The duration of the alerting rule.
        :param str level: The level of the vmp alerting rule.
        :param float threshold: The threshold of the vmp alerting rule.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "for_", for_)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        """
        The comparator of the vmp alerting rule.
        """
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter(name="for")
    def for_(self) -> str:
        """
        The duration of the alerting rule.
        """
        return pulumi.get(self, "for_")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the vmp alerting rule.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        The threshold of the vmp alerting rule.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class AlertingRulesAlertingRuleQueryResult(dict):
    def __init__(__self__, *,
                 prom_ql: str,
                 workspace_id: str):
        """
        :param str prom_ql: The prom ql of query.
        :param str workspace_id: The workspace id of vmp alerting rule.
        """
        pulumi.set(__self__, "prom_ql", prom_ql)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="promQl")
    def prom_ql(self) -> str:
        """
        The prom ql of query.
        """
        return pulumi.get(self, "prom_ql")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace id of vmp alerting rule.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class AlertsAlertResult(dict):
    def __init__(__self__, *,
                 alerting_rule_id: str,
                 alerting_rule_queries: Sequence['outputs.AlertsAlertAlertingRuleQueryResult'],
                 alerting_rule_type: str,
                 current_level: str,
                 current_phase: str,
                 id: str,
                 initial_alert_timestamp: str,
                 last_alert_timestamp: str,
                 levels: Sequence['outputs.AlertsAlertLevelResult'],
                 resolve_alert_timestamp: str,
                 resources: Sequence['outputs.AlertsAlertResourceResult']):
        """
        :param str alerting_rule_id: The id of the vmp alerting rule.
        :param Sequence['AlertsAlertAlertingRuleQueryArgs'] alerting_rule_queries: The alerting query of the vmp alerting rule.
        :param str alerting_rule_type: The type of the vmp alerting rule.
        :param str current_level: The current level of the vmp alert.
        :param str current_phase: The status of vmp alert. Valid values: `Pending`, `Active`, `Resolved`, `Disabled`.
        :param str id: The id of the vmp alert.
        :param str initial_alert_timestamp: The start time of the vmp alert. Format: RFC3339.
        :param str last_alert_timestamp: The last time of the vmp alert. Format: RFC3339.
        :param Sequence['AlertsAlertLevelArgs'] levels: The alerting levels of the vmp alert.
        :param str resolve_alert_timestamp: The end time of the vmp alert. Format: RFC3339.
        :param Sequence['AlertsAlertResourceArgs'] resources: The alerting resource of the vmp alert.
        """
        pulumi.set(__self__, "alerting_rule_id", alerting_rule_id)
        pulumi.set(__self__, "alerting_rule_queries", alerting_rule_queries)
        pulumi.set(__self__, "alerting_rule_type", alerting_rule_type)
        pulumi.set(__self__, "current_level", current_level)
        pulumi.set(__self__, "current_phase", current_phase)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "initial_alert_timestamp", initial_alert_timestamp)
        pulumi.set(__self__, "last_alert_timestamp", last_alert_timestamp)
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "resolve_alert_timestamp", resolve_alert_timestamp)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="alertingRuleId")
    def alerting_rule_id(self) -> str:
        """
        The id of the vmp alerting rule.
        """
        return pulumi.get(self, "alerting_rule_id")

    @property
    @pulumi.getter(name="alertingRuleQueries")
    def alerting_rule_queries(self) -> Sequence['outputs.AlertsAlertAlertingRuleQueryResult']:
        """
        The alerting query of the vmp alerting rule.
        """
        return pulumi.get(self, "alerting_rule_queries")

    @property
    @pulumi.getter(name="alertingRuleType")
    def alerting_rule_type(self) -> str:
        """
        The type of the vmp alerting rule.
        """
        return pulumi.get(self, "alerting_rule_type")

    @property
    @pulumi.getter(name="currentLevel")
    def current_level(self) -> str:
        """
        The current level of the vmp alert.
        """
        return pulumi.get(self, "current_level")

    @property
    @pulumi.getter(name="currentPhase")
    def current_phase(self) -> str:
        """
        The status of vmp alert. Valid values: `Pending`, `Active`, `Resolved`, `Disabled`.
        """
        return pulumi.get(self, "current_phase")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the vmp alert.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initialAlertTimestamp")
    def initial_alert_timestamp(self) -> str:
        """
        The start time of the vmp alert. Format: RFC3339.
        """
        return pulumi.get(self, "initial_alert_timestamp")

    @property
    @pulumi.getter(name="lastAlertTimestamp")
    def last_alert_timestamp(self) -> str:
        """
        The last time of the vmp alert. Format: RFC3339.
        """
        return pulumi.get(self, "last_alert_timestamp")

    @property
    @pulumi.getter
    def levels(self) -> Sequence['outputs.AlertsAlertLevelResult']:
        """
        The alerting levels of the vmp alert.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter(name="resolveAlertTimestamp")
    def resolve_alert_timestamp(self) -> str:
        """
        The end time of the vmp alert. Format: RFC3339.
        """
        return pulumi.get(self, "resolve_alert_timestamp")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.AlertsAlertResourceResult']:
        """
        The alerting resource of the vmp alert.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class AlertsAlertAlertingRuleQueryResult(dict):
    def __init__(__self__, *,
                 prom_ql: str,
                 workspace_id: str):
        """
        :param str prom_ql: The prom ql of query.
        :param str workspace_id: The id of the workspace.
        """
        pulumi.set(__self__, "prom_ql", prom_ql)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="promQl")
    def prom_ql(self) -> str:
        """
        The prom ql of query.
        """
        return pulumi.get(self, "prom_ql")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The id of the workspace.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class AlertsAlertLevelResult(dict):
    def __init__(__self__, *,
                 comparator: str,
                 for_: str,
                 level: str,
                 threshold: float):
        """
        :param str comparator: The comparator of the vmp alerting rule.
        :param str for_: The duration of the alerting rule.
        :param str level: The level of vmp alert. Valid values: `P0`, `P1`, `P2`.
        :param float threshold: The threshold of the vmp alerting rule.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "for_", for_)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        """
        The comparator of the vmp alerting rule.
        """
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter(name="for")
    def for_(self) -> str:
        """
        The duration of the alerting rule.
        """
        return pulumi.get(self, "for_")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of vmp alert. Valid values: `P0`, `P1`, `P2`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        The threshold of the vmp alerting rule.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class AlertsAlertResourceResult(dict):
    def __init__(__self__, *,
                 labels: Sequence['outputs.AlertsAlertResourceLabelResult']):
        """
        :param Sequence['AlertsAlertResourceLabelArgs'] labels: The labels of alerting resource.
        """
        pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.AlertsAlertResourceLabelResult']:
        """
        The labels of alerting resource.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class AlertsAlertResourceLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of the label.
        :param str value: The value of the label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ContactDingTalkBotWebhook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "atMobiles":
            suggest = "at_mobiles"
        elif key == "atUserIds":
            suggest = "at_user_ids"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactDingTalkBotWebhook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactDingTalkBotWebhook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactDingTalkBotWebhook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 at_mobiles: Optional[Sequence[str]] = None,
                 at_user_ids: Optional[Sequence[str]] = None,
                 secret_key: Optional[str] = None):
        """
        :param str address: The address of webhook.
        :param Sequence[str] at_mobiles: The mobiles of user.
        :param Sequence[str] at_user_ids: The ids of user.
        :param str secret_key: The secret key of webhook.
        """
        pulumi.set(__self__, "address", address)
        if at_mobiles is not None:
            pulumi.set(__self__, "at_mobiles", at_mobiles)
        if at_user_ids is not None:
            pulumi.set(__self__, "at_user_ids", at_user_ids)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="atMobiles")
    def at_mobiles(self) -> Optional[Sequence[str]]:
        """
        The mobiles of user.
        """
        return pulumi.get(self, "at_mobiles")

    @property
    @pulumi.getter(name="atUserIds")
    def at_user_ids(self) -> Optional[Sequence[str]]:
        """
        The ids of user.
        """
        return pulumi.get(self, "at_user_ids")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        The secret key of webhook.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class ContactGroupsContactGroupResult(dict):
    def __init__(__self__, *,
                 contact_ids: Sequence[str],
                 create_time: str,
                 id: str,
                 name: str):
        """
        :param Sequence[str] contact_ids: A list of contact IDs.
        :param str create_time: The create time of contact group.
        :param str id: The ID of contact group.
        :param str name: The name of contact group.
        """
        pulumi.set(__self__, "contact_ids", contact_ids)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="contactIds")
    def contact_ids(self) -> Sequence[str]:
        """
        A list of contact IDs.
        """
        return pulumi.get(self, "contact_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of contact group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of contact group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of contact group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ContactLarkBotWebhook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactLarkBotWebhook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactLarkBotWebhook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactLarkBotWebhook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 secret_key: Optional[str] = None):
        """
        :param str address: The address of webhook.
        :param str secret_key: The secret key of webhook.
        """
        pulumi.set(__self__, "address", address)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        The secret key of webhook.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class ContactPhoneNumber(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactPhoneNumber. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactPhoneNumber.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactPhoneNumber.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country_code: str,
                 number: str):
        """
        :param str country_code: The country code of phone number. The value is `+86`.
        :param str number: The number of phone number.
        """
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "number", number)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of phone number. The value is `+86`.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def number(self) -> str:
        """
        The number of phone number.
        """
        return pulumi.get(self, "number")


@pulumi.output_type
class ContactWeComBotWebhook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "atUserIds":
            suggest = "at_user_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactWeComBotWebhook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactWeComBotWebhook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactWeComBotWebhook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 at_user_ids: Optional[Sequence[str]] = None):
        """
        :param str address: The address of webhook.
        :param Sequence[str] at_user_ids: The ids of user.
        """
        pulumi.set(__self__, "address", address)
        if at_user_ids is not None:
            pulumi.set(__self__, "at_user_ids", at_user_ids)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="atUserIds")
    def at_user_ids(self) -> Optional[Sequence[str]]:
        """
        The ids of user.
        """
        return pulumi.get(self, "at_user_ids")


@pulumi.output_type
class ContactWebhook(dict):
    def __init__(__self__, *,
                 address: str,
                 token: Optional[str] = None):
        """
        :param str address: The address of webhook.
        :param str token: The token of webhook.
        """
        pulumi.set(__self__, "address", address)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        The token of webhook.
        """
        return pulumi.get(self, "token")


@pulumi.output_type
class ContactsContactResult(dict):
    def __init__(__self__, *,
                 contact_group_ids: Sequence[str],
                 create_time: str,
                 ding_talk_bot_webhooks: Sequence['outputs.ContactsContactDingTalkBotWebhookResult'],
                 email: str,
                 email_active: bool,
                 id: str,
                 lark_bot_webhooks: Sequence['outputs.ContactsContactLarkBotWebhookResult'],
                 name: str,
                 phone_number_active: bool,
                 phone_numbers: Sequence['outputs.ContactsContactPhoneNumberResult'],
                 we_com_bot_webhooks: Sequence['outputs.ContactsContactWeComBotWebhookResult'],
                 webhooks: Sequence['outputs.ContactsContactWebhookResult']):
        """
        :param Sequence[str] contact_group_ids: A list of contact group ids.
        :param str create_time: The create time of contact.
        :param Sequence['ContactsContactDingTalkBotWebhookArgs'] ding_talk_bot_webhooks: The ding talk bot webhook of contact.
        :param str email: The email of contact.
        :param bool email_active: Whether the email of contact active.
        :param str id: The ID of contact.
        :param Sequence['ContactsContactLarkBotWebhookArgs'] lark_bot_webhooks: The lark bot webhook of contact.
        :param str name: The name of contact.
        :param bool phone_number_active: Whether phone number is active.
        :param Sequence['ContactsContactPhoneNumberArgs'] phone_numbers: The phone number of contact.
        :param Sequence['ContactsContactWeComBotWebhookArgs'] we_com_bot_webhooks: The we com bot webhook of contact.
        :param Sequence['ContactsContactWebhookArgs'] webhooks: The webhook of contact.
        """
        pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "ding_talk_bot_webhooks", ding_talk_bot_webhooks)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "email_active", email_active)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lark_bot_webhooks", lark_bot_webhooks)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone_number_active", phone_number_active)
        pulumi.set(__self__, "phone_numbers", phone_numbers)
        pulumi.set(__self__, "we_com_bot_webhooks", we_com_bot_webhooks)
        pulumi.set(__self__, "webhooks", webhooks)

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Sequence[str]:
        """
        A list of contact group ids.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of contact.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dingTalkBotWebhooks")
    def ding_talk_bot_webhooks(self) -> Sequence['outputs.ContactsContactDingTalkBotWebhookResult']:
        """
        The ding talk bot webhook of contact.
        """
        return pulumi.get(self, "ding_talk_bot_webhooks")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email of contact.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="emailActive")
    def email_active(self) -> bool:
        """
        Whether the email of contact active.
        """
        return pulumi.get(self, "email_active")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of contact.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="larkBotWebhooks")
    def lark_bot_webhooks(self) -> Sequence['outputs.ContactsContactLarkBotWebhookResult']:
        """
        The lark bot webhook of contact.
        """
        return pulumi.get(self, "lark_bot_webhooks")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of contact.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNumberActive")
    def phone_number_active(self) -> bool:
        """
        Whether phone number is active.
        """
        return pulumi.get(self, "phone_number_active")

    @property
    @pulumi.getter(name="phoneNumbers")
    def phone_numbers(self) -> Sequence['outputs.ContactsContactPhoneNumberResult']:
        """
        The phone number of contact.
        """
        return pulumi.get(self, "phone_numbers")

    @property
    @pulumi.getter(name="weComBotWebhooks")
    def we_com_bot_webhooks(self) -> Sequence['outputs.ContactsContactWeComBotWebhookResult']:
        """
        The we com bot webhook of contact.
        """
        return pulumi.get(self, "we_com_bot_webhooks")

    @property
    @pulumi.getter
    def webhooks(self) -> Sequence['outputs.ContactsContactWebhookResult']:
        """
        The webhook of contact.
        """
        return pulumi.get(self, "webhooks")


@pulumi.output_type
class ContactsContactDingTalkBotWebhookResult(dict):
    def __init__(__self__, *,
                 address: str,
                 at_mobiles: Sequence[str],
                 at_user_ids: Sequence[str],
                 secret_key: str):
        """
        :param str address: The address of webhook.
        :param Sequence[str] at_mobiles: The mobiles of user.
        :param Sequence[str] at_user_ids: The ids of user.
        :param str secret_key: The secret key of webhook.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "at_mobiles", at_mobiles)
        pulumi.set(__self__, "at_user_ids", at_user_ids)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="atMobiles")
    def at_mobiles(self) -> Sequence[str]:
        """
        The mobiles of user.
        """
        return pulumi.get(self, "at_mobiles")

    @property
    @pulumi.getter(name="atUserIds")
    def at_user_ids(self) -> Sequence[str]:
        """
        The ids of user.
        """
        return pulumi.get(self, "at_user_ids")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        The secret key of webhook.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class ContactsContactLarkBotWebhookResult(dict):
    def __init__(__self__, *,
                 address: str,
                 secret_key: str):
        """
        :param str address: The address of webhook.
        :param str secret_key: The secret key of webhook.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        The secret key of webhook.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class ContactsContactPhoneNumberResult(dict):
    def __init__(__self__, *,
                 country_code: str,
                 number: str):
        """
        :param str country_code: The country code of phone number.
        :param str number: The number of phone number.
        """
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "number", number)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of phone number.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def number(self) -> str:
        """
        The number of phone number.
        """
        return pulumi.get(self, "number")


@pulumi.output_type
class ContactsContactWeComBotWebhookResult(dict):
    def __init__(__self__, *,
                 address: str,
                 at_user_ids: Sequence[str]):
        """
        :param str address: The address of webhook.
        :param Sequence[str] at_user_ids: The ids of user.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "at_user_ids", at_user_ids)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="atUserIds")
    def at_user_ids(self) -> Sequence[str]:
        """
        The ids of user.
        """
        return pulumi.get(self, "at_user_ids")


@pulumi.output_type
class ContactsContactWebhookResult(dict):
    def __init__(__self__, *,
                 address: str,
                 token: str):
        """
        :param str address: The address of webhook.
        :param str token: The token of webhook.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The token of webhook.
        """
        return pulumi.get(self, "token")


@pulumi.output_type
class InstanceTypesInstanceTypeResult(dict):
    def __init__(__self__, *,
                 active_series: int,
                 availability_zone_replicas: int,
                 dedicated: bool,
                 id: str,
                 ingest_samples_per_second: int,
                 query_concurrency: int,
                 query_per_second: int,
                 replicas_per_zone: int,
                 retention_period: str,
                 scan_samples_per_second: int,
                 scan_series_per_second: int):
        """
        :param int active_series: Maximum number of active sequences.
        :param int availability_zone_replicas: Number of zone.
        :param bool dedicated: Whether the workspace is exclusive.
        :param str id: The ID of instance type.
        :param int ingest_samples_per_second: Maximum write samples per second.
        :param int query_concurrency: Maximum number of concurrent queries.
        :param int query_per_second: Maximum Query QPS.
        :param int replicas_per_zone: Data replicas per az.
        :param str retention_period: Maximum data retention time.
        :param int scan_samples_per_second: Maximum scan samples per second.
        :param int scan_series_per_second: Maximum number of scan sequences per second.
        """
        pulumi.set(__self__, "active_series", active_series)
        pulumi.set(__self__, "availability_zone_replicas", availability_zone_replicas)
        pulumi.set(__self__, "dedicated", dedicated)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingest_samples_per_second", ingest_samples_per_second)
        pulumi.set(__self__, "query_concurrency", query_concurrency)
        pulumi.set(__self__, "query_per_second", query_per_second)
        pulumi.set(__self__, "replicas_per_zone", replicas_per_zone)
        pulumi.set(__self__, "retention_period", retention_period)
        pulumi.set(__self__, "scan_samples_per_second", scan_samples_per_second)
        pulumi.set(__self__, "scan_series_per_second", scan_series_per_second)

    @property
    @pulumi.getter(name="activeSeries")
    def active_series(self) -> int:
        """
        Maximum number of active sequences.
        """
        return pulumi.get(self, "active_series")

    @property
    @pulumi.getter(name="availabilityZoneReplicas")
    def availability_zone_replicas(self) -> int:
        """
        Number of zone.
        """
        return pulumi.get(self, "availability_zone_replicas")

    @property
    @pulumi.getter
    def dedicated(self) -> bool:
        """
        Whether the workspace is exclusive.
        """
        return pulumi.get(self, "dedicated")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of instance type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingestSamplesPerSecond")
    def ingest_samples_per_second(self) -> int:
        """
        Maximum write samples per second.
        """
        return pulumi.get(self, "ingest_samples_per_second")

    @property
    @pulumi.getter(name="queryConcurrency")
    def query_concurrency(self) -> int:
        """
        Maximum number of concurrent queries.
        """
        return pulumi.get(self, "query_concurrency")

    @property
    @pulumi.getter(name="queryPerSecond")
    def query_per_second(self) -> int:
        """
        Maximum Query QPS.
        """
        return pulumi.get(self, "query_per_second")

    @property
    @pulumi.getter(name="replicasPerZone")
    def replicas_per_zone(self) -> int:
        """
        Data replicas per az.
        """
        return pulumi.get(self, "replicas_per_zone")

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> str:
        """
        Maximum data retention time.
        """
        return pulumi.get(self, "retention_period")

    @property
    @pulumi.getter(name="scanSamplesPerSecond")
    def scan_samples_per_second(self) -> int:
        """
        Maximum scan samples per second.
        """
        return pulumi.get(self, "scan_samples_per_second")

    @property
    @pulumi.getter(name="scanSeriesPerSecond")
    def scan_series_per_second(self) -> int:
        """
        Maximum number of scan sequences per second.
        """
        return pulumi.get(self, "scan_series_per_second")


@pulumi.output_type
class NotifyGroupPoliciesNotifyPolicyResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 id: str,
                 levels: Sequence['outputs.NotifyGroupPoliciesNotifyPolicyLevelResult'],
                 name: str):
        """
        :param str create_time: The create time of notify group policy.
        :param str description: The description of notify group policy.
        :param str id: The id of the notify group policy.
        :param Sequence['NotifyGroupPoliciesNotifyPolicyLevelArgs'] levels: The levels of the notify group policy.
        :param str name: The name of notify group policy.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of notify group policy.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of notify group policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the notify group policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def levels(self) -> Sequence['outputs.NotifyGroupPoliciesNotifyPolicyLevelResult']:
        """
        The levels of the notify group policy.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of notify group policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NotifyGroupPoliciesNotifyPolicyLevelResult(dict):
    def __init__(__self__, *,
                 group_bies: Sequence[str],
                 group_interval: str,
                 group_wait: str,
                 level: str,
                 repeat_interval: str):
        """
        :param Sequence[str] group_bies: The aggregate dimension.
        :param str group_interval: The aggregation cycle.
        :param str group_wait: The wait time.
        :param str level: The level of the policy.
        :param str repeat_interval: The notification cycle.
        """
        pulumi.set(__self__, "group_bies", group_bies)
        pulumi.set(__self__, "group_interval", group_interval)
        pulumi.set(__self__, "group_wait", group_wait)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "repeat_interval", repeat_interval)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Sequence[str]:
        """
        The aggregate dimension.
        """
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="groupInterval")
    def group_interval(self) -> str:
        """
        The aggregation cycle.
        """
        return pulumi.get(self, "group_interval")

    @property
    @pulumi.getter(name="groupWait")
    def group_wait(self) -> str:
        """
        The wait time.
        """
        return pulumi.get(self, "group_wait")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the policy.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> str:
        """
        The notification cycle.
        """
        return pulumi.get(self, "repeat_interval")


@pulumi.output_type
class NotifyGroupPolicyLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupBies":
            suggest = "group_bies"
        elif key == "groupInterval":
            suggest = "group_interval"
        elif key == "groupWait":
            suggest = "group_wait"
        elif key == "repeatInterval":
            suggest = "repeat_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotifyGroupPolicyLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotifyGroupPolicyLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotifyGroupPolicyLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_bies: Sequence[str],
                 group_interval: str,
                 group_wait: str,
                 level: str,
                 repeat_interval: str):
        """
        :param Sequence[str] group_bies: The aggregate dimension, the value can be `__rule__`.
        :param str group_interval: The aggregation cycle. Integer form, unit is second.
        :param str group_wait: The wait time. Integer form, unit is second.
        :param str level: The level of the policy, the value can be one of the following: `P0`, `P1`, `P2`.
        :param str repeat_interval: The notification cycle. Integer form, unit is second.
        """
        pulumi.set(__self__, "group_bies", group_bies)
        pulumi.set(__self__, "group_interval", group_interval)
        pulumi.set(__self__, "group_wait", group_wait)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "repeat_interval", repeat_interval)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Sequence[str]:
        """
        The aggregate dimension, the value can be `__rule__`.
        """
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="groupInterval")
    def group_interval(self) -> str:
        """
        The aggregation cycle. Integer form, unit is second.
        """
        return pulumi.get(self, "group_interval")

    @property
    @pulumi.getter(name="groupWait")
    def group_wait(self) -> str:
        """
        The wait time. Integer form, unit is second.
        """
        return pulumi.get(self, "group_wait")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the policy, the value can be one of the following: `P0`, `P1`, `P2`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> str:
        """
        The notification cycle. Integer form, unit is second.
        """
        return pulumi.get(self, "repeat_interval")


@pulumi.output_type
class NotifyPoliciesNotifyPolicyResult(dict):
    def __init__(__self__, *,
                 channel_notify_template_ids: Sequence[str],
                 create_time: str,
                 description: str,
                 id: str,
                 levels: Sequence['outputs.NotifyPoliciesNotifyPolicyLevelResult'],
                 name: str):
        """
        :param Sequence[str] channel_notify_template_ids: The channel notify template for the alarm notification policy.
        :param str create_time: The create time of notify policy.
        :param str description: The description of notify policy.
        :param str id: The id of the notify policy.
        :param Sequence['NotifyPoliciesNotifyPolicyLevelArgs'] levels: The levels of the notify policy.
        :param str name: The name of notify policy.
        """
        pulumi.set(__self__, "channel_notify_template_ids", channel_notify_template_ids)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="channelNotifyTemplateIds")
    def channel_notify_template_ids(self) -> Sequence[str]:
        """
        The channel notify template for the alarm notification policy.
        """
        return pulumi.get(self, "channel_notify_template_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of notify policy.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of notify policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the notify policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def levels(self) -> Sequence['outputs.NotifyPoliciesNotifyPolicyLevelResult']:
        """
        The levels of the notify policy.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of notify policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NotifyPoliciesNotifyPolicyLevelResult(dict):
    def __init__(__self__, *,
                 channels: Sequence[str],
                 contact_group_ids: Sequence[str],
                 level: str,
                 resolved_channels: Sequence[str]):
        """
        :param Sequence[str] channels: The alarm notification method of the alarm notification policy.
        :param Sequence[str] contact_group_ids: The contact group for the alarm notification policy.
        :param str level: The level of the policy.
        :param Sequence[str] resolved_channels: The resolved alarm notification method of the alarm notification policy.
        """
        pulumi.set(__self__, "channels", channels)
        pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "resolved_channels", resolved_channels)

    @property
    @pulumi.getter
    def channels(self) -> Sequence[str]:
        """
        The alarm notification method of the alarm notification policy.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Sequence[str]:
        """
        The contact group for the alarm notification policy.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the policy.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="resolvedChannels")
    def resolved_channels(self) -> Sequence[str]:
        """
        The resolved alarm notification method of the alarm notification policy.
        """
        return pulumi.get(self, "resolved_channels")


@pulumi.output_type
class NotifyPolicyLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactGroupIds":
            suggest = "contact_group_ids"
        elif key == "resolvedChannels":
            suggest = "resolved_channels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotifyPolicyLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotifyPolicyLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotifyPolicyLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channels: Sequence[str],
                 contact_group_ids: Sequence[str],
                 level: str,
                 resolved_channels: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] channels: The alarm notification method of the alarm notification policy, the optional value can be `Email`, `Webhook`, `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        :param Sequence[str] contact_group_ids: The contact group for the alarm notification policy.
        :param str level: The level of the policy, the value can be one of the following: `P0`, `P1`, `P2`.
        :param Sequence[str] resolved_channels: The resolved alarm notification method of the alarm notification policy, the optional value can be `Email`, `Webhook`, `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        pulumi.set(__self__, "channels", channels)
        pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        pulumi.set(__self__, "level", level)
        if resolved_channels is not None:
            pulumi.set(__self__, "resolved_channels", resolved_channels)

    @property
    @pulumi.getter
    def channels(self) -> Sequence[str]:
        """
        The alarm notification method of the alarm notification policy, the optional value can be `Email`, `Webhook`, `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Sequence[str]:
        """
        The contact group for the alarm notification policy.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the policy, the value can be one of the following: `P0`, `P1`, `P2`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="resolvedChannels")
    def resolved_channels(self) -> Optional[Sequence[str]]:
        """
        The resolved alarm notification method of the alarm notification policy, the optional value can be `Email`, `Webhook`, `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        return pulumi.get(self, "resolved_channels")


@pulumi.output_type
class NotifyTemplateActive(dict):
    def __init__(__self__, *,
                 content: str,
                 title: str):
        """
        :param str content: The content of notify template.
        :param str title: The title of notify template.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of notify template.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of notify template.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class NotifyTemplateResolved(dict):
    def __init__(__self__, *,
                 content: str,
                 title: str):
        """
        :param str content: The content of notify template.
        :param str title: The title of notify template.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of notify template.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of notify template.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class NotifyTemplatesNotifyTemplateResult(dict):
    def __init__(__self__, *,
                 actives: Sequence['outputs.NotifyTemplatesNotifyTemplateActiveResult'],
                 channel: str,
                 create_time: str,
                 description: str,
                 id: str,
                 name: str,
                 resolveds: Sequence['outputs.NotifyTemplatesNotifyTemplateResolvedResult'],
                 update_time: str):
        """
        :param Sequence['NotifyTemplatesNotifyTemplateActiveArgs'] actives: The active notify template info.
        :param str channel: The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        :param str create_time: The create time of notify template.
        :param str description: The description of notify template.
        :param str id: The ID of notify template.
        :param str name: The name of notify template. This field support fuzzy query.
        :param Sequence['NotifyTemplatesNotifyTemplateResolvedArgs'] resolveds: The resolved notify template info.
        :param str update_time: The update time of notify template.
        """
        pulumi.set(__self__, "actives", actives)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resolveds", resolveds)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def actives(self) -> Sequence['outputs.NotifyTemplatesNotifyTemplateActiveResult']:
        """
        The active notify template info.
        """
        return pulumi.get(self, "actives")

    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of notify template.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of notify template.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of notify template.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of notify template. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resolveds(self) -> Sequence['outputs.NotifyTemplatesNotifyTemplateResolvedResult']:
        """
        The resolved notify template info.
        """
        return pulumi.get(self, "resolveds")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of notify template.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class NotifyTemplatesNotifyTemplateActiveResult(dict):
    def __init__(__self__, *,
                 content: str,
                 title: str):
        """
        :param str content: The content of notify template.
        :param str title: The title of notify template.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of notify template.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of notify template.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class NotifyTemplatesNotifyTemplateResolvedResult(dict):
    def __init__(__self__, *,
                 content: str,
                 title: str):
        """
        :param str content: The content of notify template.
        :param str title: The title of notify template.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of notify template.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of notify template.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class RuleFilesFileResult(dict):
    def __init__(__self__, *,
                 content: str,
                 create_time: str,
                 description: str,
                 id: str,
                 last_update_time: str,
                 name: str,
                 rule_count: int,
                 status: str):
        """
        :param str content: The content of rule file.
        :param str create_time: The create time of rule file.
        :param str description: The description of rule file.
        :param str id: The ID of rule file.
        :param str last_update_time: The last update time of rule file.
        :param str name: The name of rule file.
        :param int rule_count: The rule count number of rule file.
        :param str status: The status of rule file.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rule_count", rule_count)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of rule file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of rule file.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of rule file.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of rule file.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        The last update time of rule file.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of rule file.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleCount")
    def rule_count(self) -> int:
        """
        The rule count number of rule file.
        """
        return pulumi.get(self, "rule_count")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of rule file.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RulesRuleResult(dict):
    def __init__(__self__, *,
                 expr: str,
                 kind: str,
                 labels: Sequence['outputs.RulesRuleLabelResult'],
                 last_evaluation: str,
                 name: str,
                 reason: str,
                 rule_file_name: str,
                 rule_group_name: str,
                 status: str):
        """
        :param str expr: The expr of rule.
        :param str kind: The kind of rule.
        :param Sequence['RulesRuleLabelArgs'] labels: The labels of rule.
        :param str last_evaluation: The last evaluation of rule.
        :param str name: The name of rule.
        :param str reason: The reason of rule.
        :param str rule_file_name: The name of rule file.
        :param str rule_group_name: The name of rule group.
        :param str status: The status of rule.
        """
        pulumi.set(__self__, "expr", expr)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "last_evaluation", last_evaluation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "rule_file_name", rule_file_name)
        pulumi.set(__self__, "rule_group_name", rule_group_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def expr(self) -> str:
        """
        The expr of rule.
        """
        return pulumi.get(self, "expr")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind of rule.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.RulesRuleLabelResult']:
        """
        The labels of rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastEvaluation")
    def last_evaluation(self) -> str:
        """
        The last evaluation of rule.
        """
        return pulumi.get(self, "last_evaluation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        The reason of rule.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="ruleFileName")
    def rule_file_name(self) -> str:
        """
        The name of rule file.
        """
        return pulumi.get(self, "rule_file_name")

    @property
    @pulumi.getter(name="ruleGroupName")
    def rule_group_name(self) -> str:
        """
        The name of rule group.
        """
        return pulumi.get(self, "rule_group_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of rule.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RulesRuleLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of label.
        :param str value: The value of label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkspaceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkspacesTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The Key of Tags.
        :param Sequence[str] values: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class WorkspacesWorkspaceResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 delete_protection_enabled: bool,
                 description: str,
                 id: str,
                 instance_type_id: str,
                 name: str,
                 overdue_reclaim_time: str,
                 project_name: str,
                 prometheus_push_intranet_endpoint: str,
                 prometheus_query_intranet_endpoint: str,
                 prometheus_write_intranet_endpoint: str,
                 status: str,
                 tags: Sequence['outputs.WorkspacesWorkspaceTagResult'],
                 username: str):
        """
        :param str create_time: The create time of workspace.
        :param bool delete_protection_enabled: Whether enable delete protection.
        :param str description: The description of workspace.
        :param str id: The ID of workspace.
        :param str instance_type_id: The id of instance type.
        :param str name: The name of workspace.
        :param str overdue_reclaim_time: The overdue reclaim time.
        :param str project_name: The project name of vmp workspace.
        :param str prometheus_push_intranet_endpoint: The prometheus push intranet endpoint.
        :param str prometheus_query_intranet_endpoint: The prometheus query intranet endpoint.
        :param str prometheus_write_intranet_endpoint: The prometheus write intranet endpoint.
        :param str status: The status of workspace.
        :param Sequence['WorkspacesWorkspaceTagArgs'] tags: The tags of vmp workspace.
        :param str username: The username of workspace.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "delete_protection_enabled", delete_protection_enabled)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_type_id", instance_type_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "overdue_reclaim_time", overdue_reclaim_time)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "prometheus_push_intranet_endpoint", prometheus_push_intranet_endpoint)
        pulumi.set(__self__, "prometheus_query_intranet_endpoint", prometheus_query_intranet_endpoint)
        pulumi.set(__self__, "prometheus_write_intranet_endpoint", prometheus_write_intranet_endpoint)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of workspace.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteProtectionEnabled")
    def delete_protection_enabled(self) -> bool:
        """
        Whether enable delete protection.
        """
        return pulumi.get(self, "delete_protection_enabled")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of workspace.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of workspace.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceTypeId")
    def instance_type_id(self) -> str:
        """
        The id of instance type.
        """
        return pulumi.get(self, "instance_type_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of workspace.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overdueReclaimTime")
    def overdue_reclaim_time(self) -> str:
        """
        The overdue reclaim time.
        """
        return pulumi.get(self, "overdue_reclaim_time")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The project name of vmp workspace.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="prometheusPushIntranetEndpoint")
    def prometheus_push_intranet_endpoint(self) -> str:
        """
        The prometheus push intranet endpoint.
        """
        return pulumi.get(self, "prometheus_push_intranet_endpoint")

    @property
    @pulumi.getter(name="prometheusQueryIntranetEndpoint")
    def prometheus_query_intranet_endpoint(self) -> str:
        """
        The prometheus query intranet endpoint.
        """
        return pulumi.get(self, "prometheus_query_intranet_endpoint")

    @property
    @pulumi.getter(name="prometheusWriteIntranetEndpoint")
    def prometheus_write_intranet_endpoint(self) -> str:
        """
        The prometheus write intranet endpoint.
        """
        return pulumi.get(self, "prometheus_write_intranet_endpoint")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of workspace.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.WorkspacesWorkspaceTagResult']:
        """
        The tags of vmp workspace.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username of workspace.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class WorkspacesWorkspaceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlertingRulesAlertingRuleResult(dict):
    def __init__(__self__, *,
                 annotations: Sequence['outputs.GetAlertingRulesAlertingRuleAnnotationResult'],
                 create_time: str,
                 description: str,
                 id: str,
                 labels: Sequence['outputs.GetAlertingRulesAlertingRuleLabelResult'],
                 levels: Sequence['outputs.GetAlertingRulesAlertingRuleLevelResult'],
                 name: str,
                 notify_group_policy_id: str,
                 notify_policy_id: str,
                 queries: Sequence['outputs.GetAlertingRulesAlertingRuleQueryResult'],
                 status: str,
                 type: str,
                 update_time: str):
        """
        :param Sequence['GetAlertingRulesAlertingRuleAnnotationArgs'] annotations: The annotations of the vmp alerting rule.
        :param str create_time: The create time of the vmp alerting rule.
        :param str description: The description of the vmp alerting rule.
        :param str id: The id of the vmp alerting rule.
        :param Sequence['GetAlertingRulesAlertingRuleLabelArgs'] labels: The labels of the vmp alerting rule.
        :param Sequence['GetAlertingRulesAlertingRuleLevelArgs'] levels: The alerting levels of the vmp alerting rule.
        :param str name: The name of vmp alerting rule. This field support fuzzy query.
        :param str notify_group_policy_id: The notify group policy id of the vmp alerting rule.
        :param str notify_policy_id: The notify policy id of the vmp alerting rule.
        :param Sequence['GetAlertingRulesAlertingRuleQueryArgs'] queries: The alerting query of the vmp alerting rule.
        :param str status: The status of vmp alerting rule. Valid values: `Running`, `Disabled`.
        :param str type: The type of vmp alerting rule. Valid values: `vmp/PromQL`.
        :param str update_time: The update time of the vmp alerting rule.
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notify_group_policy_id", notify_group_policy_id)
        pulumi.set(__self__, "notify_policy_id", notify_policy_id)
        pulumi.set(__self__, "queries", queries)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Sequence['outputs.GetAlertingRulesAlertingRuleAnnotationResult']:
        """
        The annotations of the vmp alerting rule.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the vmp alerting rule.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the vmp alerting rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the vmp alerting rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetAlertingRulesAlertingRuleLabelResult']:
        """
        The labels of the vmp alerting rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def levels(self) -> Sequence['outputs.GetAlertingRulesAlertingRuleLevelResult']:
        """
        The alerting levels of the vmp alerting rule.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of vmp alerting rule. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyGroupPolicyId")
    def notify_group_policy_id(self) -> str:
        """
        The notify group policy id of the vmp alerting rule.
        """
        return pulumi.get(self, "notify_group_policy_id")

    @property
    @pulumi.getter(name="notifyPolicyId")
    def notify_policy_id(self) -> str:
        """
        The notify policy id of the vmp alerting rule.
        """
        return pulumi.get(self, "notify_policy_id")

    @property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.GetAlertingRulesAlertingRuleQueryResult']:
        """
        The alerting query of the vmp alerting rule.
        """
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of vmp alerting rule. Valid values: `Running`, `Disabled`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of vmp alerting rule. Valid values: `vmp/PromQL`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of the vmp alerting rule.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetAlertingRulesAlertingRuleAnnotationResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of vmp alerting rule. This field support fuzzy query.
        :param str value: The value of the label.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of vmp alerting rule. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlertingRulesAlertingRuleLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The name of the label.
        :param str value: The value of the label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The name of the label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlertingRulesAlertingRuleLevelResult(dict):
    def __init__(__self__, *,
                 comparator: str,
                 for_: str,
                 level: str,
                 threshold: float):
        """
        :param str comparator: The comparator of the vmp alerting rule.
        :param str for_: The duration of the alerting rule.
        :param str level: The level of the vmp alerting rule.
        :param float threshold: The threshold of the vmp alerting rule.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "for_", for_)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        """
        The comparator of the vmp alerting rule.
        """
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter(name="for")
    def for_(self) -> str:
        """
        The duration of the alerting rule.
        """
        return pulumi.get(self, "for_")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the vmp alerting rule.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        The threshold of the vmp alerting rule.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetAlertingRulesAlertingRuleQueryResult(dict):
    def __init__(__self__, *,
                 prom_ql: str,
                 workspace_id: str):
        """
        :param str prom_ql: The prom ql of query.
        :param str workspace_id: The workspace id of vmp alerting rule.
        """
        pulumi.set(__self__, "prom_ql", prom_ql)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="promQl")
    def prom_ql(self) -> str:
        """
        The prom ql of query.
        """
        return pulumi.get(self, "prom_ql")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace id of vmp alerting rule.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetAlertsAlertResult(dict):
    def __init__(__self__, *,
                 alerting_rule_id: str,
                 alerting_rule_queries: Sequence['outputs.GetAlertsAlertAlertingRuleQueryResult'],
                 alerting_rule_type: str,
                 current_level: str,
                 current_phase: str,
                 id: str,
                 initial_alert_timestamp: str,
                 last_alert_timestamp: str,
                 levels: Sequence['outputs.GetAlertsAlertLevelResult'],
                 resolve_alert_timestamp: str,
                 resources: Sequence['outputs.GetAlertsAlertResourceResult']):
        """
        :param str alerting_rule_id: The id of the vmp alerting rule.
        :param Sequence['GetAlertsAlertAlertingRuleQueryArgs'] alerting_rule_queries: The alerting query of the vmp alerting rule.
        :param str alerting_rule_type: The type of the vmp alerting rule.
        :param str current_level: The current level of the vmp alert.
        :param str current_phase: The status of vmp alert. Valid values: `Pending`, `Active`, `Resolved`, `Disabled`.
        :param str id: The id of the vmp alert.
        :param str initial_alert_timestamp: The start time of the vmp alert. Format: RFC3339.
        :param str last_alert_timestamp: The last time of the vmp alert. Format: RFC3339.
        :param Sequence['GetAlertsAlertLevelArgs'] levels: The alerting levels of the vmp alert.
        :param str resolve_alert_timestamp: The end time of the vmp alert. Format: RFC3339.
        :param Sequence['GetAlertsAlertResourceArgs'] resources: The alerting resource of the vmp alert.
        """
        pulumi.set(__self__, "alerting_rule_id", alerting_rule_id)
        pulumi.set(__self__, "alerting_rule_queries", alerting_rule_queries)
        pulumi.set(__self__, "alerting_rule_type", alerting_rule_type)
        pulumi.set(__self__, "current_level", current_level)
        pulumi.set(__self__, "current_phase", current_phase)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "initial_alert_timestamp", initial_alert_timestamp)
        pulumi.set(__self__, "last_alert_timestamp", last_alert_timestamp)
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "resolve_alert_timestamp", resolve_alert_timestamp)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="alertingRuleId")
    def alerting_rule_id(self) -> str:
        """
        The id of the vmp alerting rule.
        """
        return pulumi.get(self, "alerting_rule_id")

    @property
    @pulumi.getter(name="alertingRuleQueries")
    def alerting_rule_queries(self) -> Sequence['outputs.GetAlertsAlertAlertingRuleQueryResult']:
        """
        The alerting query of the vmp alerting rule.
        """
        return pulumi.get(self, "alerting_rule_queries")

    @property
    @pulumi.getter(name="alertingRuleType")
    def alerting_rule_type(self) -> str:
        """
        The type of the vmp alerting rule.
        """
        return pulumi.get(self, "alerting_rule_type")

    @property
    @pulumi.getter(name="currentLevel")
    def current_level(self) -> str:
        """
        The current level of the vmp alert.
        """
        return pulumi.get(self, "current_level")

    @property
    @pulumi.getter(name="currentPhase")
    def current_phase(self) -> str:
        """
        The status of vmp alert. Valid values: `Pending`, `Active`, `Resolved`, `Disabled`.
        """
        return pulumi.get(self, "current_phase")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the vmp alert.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initialAlertTimestamp")
    def initial_alert_timestamp(self) -> str:
        """
        The start time of the vmp alert. Format: RFC3339.
        """
        return pulumi.get(self, "initial_alert_timestamp")

    @property
    @pulumi.getter(name="lastAlertTimestamp")
    def last_alert_timestamp(self) -> str:
        """
        The last time of the vmp alert. Format: RFC3339.
        """
        return pulumi.get(self, "last_alert_timestamp")

    @property
    @pulumi.getter
    def levels(self) -> Sequence['outputs.GetAlertsAlertLevelResult']:
        """
        The alerting levels of the vmp alert.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter(name="resolveAlertTimestamp")
    def resolve_alert_timestamp(self) -> str:
        """
        The end time of the vmp alert. Format: RFC3339.
        """
        return pulumi.get(self, "resolve_alert_timestamp")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetAlertsAlertResourceResult']:
        """
        The alerting resource of the vmp alert.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetAlertsAlertAlertingRuleQueryResult(dict):
    def __init__(__self__, *,
                 prom_ql: str,
                 workspace_id: str):
        """
        :param str prom_ql: The prom ql of query.
        :param str workspace_id: The id of the workspace.
        """
        pulumi.set(__self__, "prom_ql", prom_ql)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="promQl")
    def prom_ql(self) -> str:
        """
        The prom ql of query.
        """
        return pulumi.get(self, "prom_ql")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The id of the workspace.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetAlertsAlertLevelResult(dict):
    def __init__(__self__, *,
                 comparator: str,
                 for_: str,
                 level: str,
                 threshold: float):
        """
        :param str comparator: The comparator of the vmp alerting rule.
        :param str for_: The duration of the alerting rule.
        :param str level: The level of vmp alert. Valid values: `P0`, `P1`, `P2`.
        :param float threshold: The threshold of the vmp alerting rule.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "for_", for_)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def comparator(self) -> str:
        """
        The comparator of the vmp alerting rule.
        """
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter(name="for")
    def for_(self) -> str:
        """
        The duration of the alerting rule.
        """
        return pulumi.get(self, "for_")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of vmp alert. Valid values: `P0`, `P1`, `P2`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        The threshold of the vmp alerting rule.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetAlertsAlertResourceResult(dict):
    def __init__(__self__, *,
                 labels: Sequence['outputs.GetAlertsAlertResourceLabelResult']):
        """
        :param Sequence['GetAlertsAlertResourceLabelArgs'] labels: The labels of alerting resource.
        """
        pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetAlertsAlertResourceLabelResult']:
        """
        The labels of alerting resource.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class GetAlertsAlertResourceLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of the label.
        :param str value: The value of the label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetContactGroupsContactGroupResult(dict):
    def __init__(__self__, *,
                 contact_ids: Sequence[str],
                 create_time: str,
                 id: str,
                 name: str):
        """
        :param Sequence[str] contact_ids: A list of contact IDs.
        :param str create_time: The create time of contact group.
        :param str id: The ID of contact group.
        :param str name: The name of contact group.
        """
        pulumi.set(__self__, "contact_ids", contact_ids)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="contactIds")
    def contact_ids(self) -> Sequence[str]:
        """
        A list of contact IDs.
        """
        return pulumi.get(self, "contact_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of contact group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of contact group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of contact group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetContactsContactResult(dict):
    def __init__(__self__, *,
                 contact_group_ids: Sequence[str],
                 create_time: str,
                 ding_talk_bot_webhooks: Sequence['outputs.GetContactsContactDingTalkBotWebhookResult'],
                 email: str,
                 email_active: bool,
                 id: str,
                 lark_bot_webhooks: Sequence['outputs.GetContactsContactLarkBotWebhookResult'],
                 name: str,
                 phone_number_active: bool,
                 phone_numbers: Sequence['outputs.GetContactsContactPhoneNumberResult'],
                 we_com_bot_webhooks: Sequence['outputs.GetContactsContactWeComBotWebhookResult'],
                 webhooks: Sequence['outputs.GetContactsContactWebhookResult']):
        """
        :param Sequence[str] contact_group_ids: A list of contact group ids.
        :param str create_time: The create time of contact.
        :param Sequence['GetContactsContactDingTalkBotWebhookArgs'] ding_talk_bot_webhooks: The ding talk bot webhook of contact.
        :param str email: The email of contact.
        :param bool email_active: Whether the email of contact active.
        :param str id: The ID of contact.
        :param Sequence['GetContactsContactLarkBotWebhookArgs'] lark_bot_webhooks: The lark bot webhook of contact.
        :param str name: The name of contact.
        :param bool phone_number_active: Whether phone number is active.
        :param Sequence['GetContactsContactPhoneNumberArgs'] phone_numbers: The phone number of contact.
        :param Sequence['GetContactsContactWeComBotWebhookArgs'] we_com_bot_webhooks: The we com bot webhook of contact.
        :param Sequence['GetContactsContactWebhookArgs'] webhooks: The webhook of contact.
        """
        pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "ding_talk_bot_webhooks", ding_talk_bot_webhooks)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "email_active", email_active)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lark_bot_webhooks", lark_bot_webhooks)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone_number_active", phone_number_active)
        pulumi.set(__self__, "phone_numbers", phone_numbers)
        pulumi.set(__self__, "we_com_bot_webhooks", we_com_bot_webhooks)
        pulumi.set(__self__, "webhooks", webhooks)

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Sequence[str]:
        """
        A list of contact group ids.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of contact.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dingTalkBotWebhooks")
    def ding_talk_bot_webhooks(self) -> Sequence['outputs.GetContactsContactDingTalkBotWebhookResult']:
        """
        The ding talk bot webhook of contact.
        """
        return pulumi.get(self, "ding_talk_bot_webhooks")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email of contact.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="emailActive")
    def email_active(self) -> bool:
        """
        Whether the email of contact active.
        """
        return pulumi.get(self, "email_active")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of contact.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="larkBotWebhooks")
    def lark_bot_webhooks(self) -> Sequence['outputs.GetContactsContactLarkBotWebhookResult']:
        """
        The lark bot webhook of contact.
        """
        return pulumi.get(self, "lark_bot_webhooks")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of contact.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNumberActive")
    def phone_number_active(self) -> bool:
        """
        Whether phone number is active.
        """
        return pulumi.get(self, "phone_number_active")

    @property
    @pulumi.getter(name="phoneNumbers")
    def phone_numbers(self) -> Sequence['outputs.GetContactsContactPhoneNumberResult']:
        """
        The phone number of contact.
        """
        return pulumi.get(self, "phone_numbers")

    @property
    @pulumi.getter(name="weComBotWebhooks")
    def we_com_bot_webhooks(self) -> Sequence['outputs.GetContactsContactWeComBotWebhookResult']:
        """
        The we com bot webhook of contact.
        """
        return pulumi.get(self, "we_com_bot_webhooks")

    @property
    @pulumi.getter
    def webhooks(self) -> Sequence['outputs.GetContactsContactWebhookResult']:
        """
        The webhook of contact.
        """
        return pulumi.get(self, "webhooks")


@pulumi.output_type
class GetContactsContactDingTalkBotWebhookResult(dict):
    def __init__(__self__, *,
                 address: str,
                 at_mobiles: Sequence[str],
                 at_user_ids: Sequence[str],
                 secret_key: str):
        """
        :param str address: The address of webhook.
        :param Sequence[str] at_mobiles: The mobiles of user.
        :param Sequence[str] at_user_ids: The ids of user.
        :param str secret_key: The secret key of webhook.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "at_mobiles", at_mobiles)
        pulumi.set(__self__, "at_user_ids", at_user_ids)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="atMobiles")
    def at_mobiles(self) -> Sequence[str]:
        """
        The mobiles of user.
        """
        return pulumi.get(self, "at_mobiles")

    @property
    @pulumi.getter(name="atUserIds")
    def at_user_ids(self) -> Sequence[str]:
        """
        The ids of user.
        """
        return pulumi.get(self, "at_user_ids")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        The secret key of webhook.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class GetContactsContactLarkBotWebhookResult(dict):
    def __init__(__self__, *,
                 address: str,
                 secret_key: str):
        """
        :param str address: The address of webhook.
        :param str secret_key: The secret key of webhook.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        The secret key of webhook.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class GetContactsContactPhoneNumberResult(dict):
    def __init__(__self__, *,
                 country_code: str,
                 number: str):
        """
        :param str country_code: The country code of phone number.
        :param str number: The number of phone number.
        """
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "number", number)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The country code of phone number.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def number(self) -> str:
        """
        The number of phone number.
        """
        return pulumi.get(self, "number")


@pulumi.output_type
class GetContactsContactWeComBotWebhookResult(dict):
    def __init__(__self__, *,
                 address: str,
                 at_user_ids: Sequence[str]):
        """
        :param str address: The address of webhook.
        :param Sequence[str] at_user_ids: The ids of user.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "at_user_ids", at_user_ids)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="atUserIds")
    def at_user_ids(self) -> Sequence[str]:
        """
        The ids of user.
        """
        return pulumi.get(self, "at_user_ids")


@pulumi.output_type
class GetContactsContactWebhookResult(dict):
    def __init__(__self__, *,
                 address: str,
                 token: str):
        """
        :param str address: The address of webhook.
        :param str token: The token of webhook.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of webhook.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The token of webhook.
        """
        return pulumi.get(self, "token")


@pulumi.output_type
class GetInstanceTypesInstanceTypeResult(dict):
    def __init__(__self__, *,
                 active_series: int,
                 availability_zone_replicas: int,
                 dedicated: bool,
                 id: str,
                 ingest_samples_per_second: int,
                 query_concurrency: int,
                 query_per_second: int,
                 replicas_per_zone: int,
                 retention_period: str,
                 scan_samples_per_second: int,
                 scan_series_per_second: int):
        """
        :param int active_series: Maximum number of active sequences.
        :param int availability_zone_replicas: Number of zone.
        :param bool dedicated: Whether the workspace is exclusive.
        :param str id: The ID of instance type.
        :param int ingest_samples_per_second: Maximum write samples per second.
        :param int query_concurrency: Maximum number of concurrent queries.
        :param int query_per_second: Maximum Query QPS.
        :param int replicas_per_zone: Data replicas per az.
        :param str retention_period: Maximum data retention time.
        :param int scan_samples_per_second: Maximum scan samples per second.
        :param int scan_series_per_second: Maximum number of scan sequences per second.
        """
        pulumi.set(__self__, "active_series", active_series)
        pulumi.set(__self__, "availability_zone_replicas", availability_zone_replicas)
        pulumi.set(__self__, "dedicated", dedicated)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingest_samples_per_second", ingest_samples_per_second)
        pulumi.set(__self__, "query_concurrency", query_concurrency)
        pulumi.set(__self__, "query_per_second", query_per_second)
        pulumi.set(__self__, "replicas_per_zone", replicas_per_zone)
        pulumi.set(__self__, "retention_period", retention_period)
        pulumi.set(__self__, "scan_samples_per_second", scan_samples_per_second)
        pulumi.set(__self__, "scan_series_per_second", scan_series_per_second)

    @property
    @pulumi.getter(name="activeSeries")
    def active_series(self) -> int:
        """
        Maximum number of active sequences.
        """
        return pulumi.get(self, "active_series")

    @property
    @pulumi.getter(name="availabilityZoneReplicas")
    def availability_zone_replicas(self) -> int:
        """
        Number of zone.
        """
        return pulumi.get(self, "availability_zone_replicas")

    @property
    @pulumi.getter
    def dedicated(self) -> bool:
        """
        Whether the workspace is exclusive.
        """
        return pulumi.get(self, "dedicated")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of instance type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingestSamplesPerSecond")
    def ingest_samples_per_second(self) -> int:
        """
        Maximum write samples per second.
        """
        return pulumi.get(self, "ingest_samples_per_second")

    @property
    @pulumi.getter(name="queryConcurrency")
    def query_concurrency(self) -> int:
        """
        Maximum number of concurrent queries.
        """
        return pulumi.get(self, "query_concurrency")

    @property
    @pulumi.getter(name="queryPerSecond")
    def query_per_second(self) -> int:
        """
        Maximum Query QPS.
        """
        return pulumi.get(self, "query_per_second")

    @property
    @pulumi.getter(name="replicasPerZone")
    def replicas_per_zone(self) -> int:
        """
        Data replicas per az.
        """
        return pulumi.get(self, "replicas_per_zone")

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> str:
        """
        Maximum data retention time.
        """
        return pulumi.get(self, "retention_period")

    @property
    @pulumi.getter(name="scanSamplesPerSecond")
    def scan_samples_per_second(self) -> int:
        """
        Maximum scan samples per second.
        """
        return pulumi.get(self, "scan_samples_per_second")

    @property
    @pulumi.getter(name="scanSeriesPerSecond")
    def scan_series_per_second(self) -> int:
        """
        Maximum number of scan sequences per second.
        """
        return pulumi.get(self, "scan_series_per_second")


@pulumi.output_type
class GetNotifyGroupPoliciesNotifyPolicyResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 id: str,
                 levels: Sequence['outputs.GetNotifyGroupPoliciesNotifyPolicyLevelResult'],
                 name: str):
        """
        :param str create_time: The create time of notify group policy.
        :param str description: The description of notify group policy.
        :param str id: The id of the notify group policy.
        :param Sequence['GetNotifyGroupPoliciesNotifyPolicyLevelArgs'] levels: The levels of the notify group policy.
        :param str name: The name of notify group policy.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of notify group policy.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of notify group policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the notify group policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def levels(self) -> Sequence['outputs.GetNotifyGroupPoliciesNotifyPolicyLevelResult']:
        """
        The levels of the notify group policy.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of notify group policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNotifyGroupPoliciesNotifyPolicyLevelResult(dict):
    def __init__(__self__, *,
                 group_bies: Sequence[str],
                 group_interval: str,
                 group_wait: str,
                 level: str,
                 repeat_interval: str):
        """
        :param Sequence[str] group_bies: The aggregate dimension.
        :param str group_interval: The aggregation cycle.
        :param str group_wait: The wait time.
        :param str level: The level of the policy.
        :param str repeat_interval: The notification cycle.
        """
        pulumi.set(__self__, "group_bies", group_bies)
        pulumi.set(__self__, "group_interval", group_interval)
        pulumi.set(__self__, "group_wait", group_wait)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "repeat_interval", repeat_interval)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Sequence[str]:
        """
        The aggregate dimension.
        """
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="groupInterval")
    def group_interval(self) -> str:
        """
        The aggregation cycle.
        """
        return pulumi.get(self, "group_interval")

    @property
    @pulumi.getter(name="groupWait")
    def group_wait(self) -> str:
        """
        The wait time.
        """
        return pulumi.get(self, "group_wait")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the policy.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> str:
        """
        The notification cycle.
        """
        return pulumi.get(self, "repeat_interval")


@pulumi.output_type
class GetNotifyPoliciesNotifyPolicyResult(dict):
    def __init__(__self__, *,
                 channel_notify_template_ids: Sequence[str],
                 create_time: str,
                 description: str,
                 id: str,
                 levels: Sequence['outputs.GetNotifyPoliciesNotifyPolicyLevelResult'],
                 name: str):
        """
        :param Sequence[str] channel_notify_template_ids: The channel notify template for the alarm notification policy.
        :param str create_time: The create time of notify policy.
        :param str description: The description of notify policy.
        :param str id: The id of the notify policy.
        :param Sequence['GetNotifyPoliciesNotifyPolicyLevelArgs'] levels: The levels of the notify policy.
        :param str name: The name of notify policy.
        """
        pulumi.set(__self__, "channel_notify_template_ids", channel_notify_template_ids)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="channelNotifyTemplateIds")
    def channel_notify_template_ids(self) -> Sequence[str]:
        """
        The channel notify template for the alarm notification policy.
        """
        return pulumi.get(self, "channel_notify_template_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of notify policy.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of notify policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the notify policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def levels(self) -> Sequence['outputs.GetNotifyPoliciesNotifyPolicyLevelResult']:
        """
        The levels of the notify policy.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of notify policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNotifyPoliciesNotifyPolicyLevelResult(dict):
    def __init__(__self__, *,
                 channels: Sequence[str],
                 contact_group_ids: Sequence[str],
                 level: str,
                 resolved_channels: Sequence[str]):
        """
        :param Sequence[str] channels: The alarm notification method of the alarm notification policy.
        :param Sequence[str] contact_group_ids: The contact group for the alarm notification policy.
        :param str level: The level of the policy.
        :param Sequence[str] resolved_channels: The resolved alarm notification method of the alarm notification policy.
        """
        pulumi.set(__self__, "channels", channels)
        pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "resolved_channels", resolved_channels)

    @property
    @pulumi.getter
    def channels(self) -> Sequence[str]:
        """
        The alarm notification method of the alarm notification policy.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Sequence[str]:
        """
        The contact group for the alarm notification policy.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the policy.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="resolvedChannels")
    def resolved_channels(self) -> Sequence[str]:
        """
        The resolved alarm notification method of the alarm notification policy.
        """
        return pulumi.get(self, "resolved_channels")


@pulumi.output_type
class GetNotifyTemplatesNotifyTemplateResult(dict):
    def __init__(__self__, *,
                 actives: Sequence['outputs.GetNotifyTemplatesNotifyTemplateActiveResult'],
                 channel: str,
                 create_time: str,
                 description: str,
                 id: str,
                 name: str,
                 resolveds: Sequence['outputs.GetNotifyTemplatesNotifyTemplateResolvedResult'],
                 update_time: str):
        """
        :param Sequence['GetNotifyTemplatesNotifyTemplateActiveArgs'] actives: The active notify template info.
        :param str channel: The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        :param str create_time: The create time of notify template.
        :param str description: The description of notify template.
        :param str id: The ID of notify template.
        :param str name: The name of notify template. This field support fuzzy query.
        :param Sequence['GetNotifyTemplatesNotifyTemplateResolvedArgs'] resolveds: The resolved notify template info.
        :param str update_time: The update time of notify template.
        """
        pulumi.set(__self__, "actives", actives)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resolveds", resolveds)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def actives(self) -> Sequence['outputs.GetNotifyTemplatesNotifyTemplateActiveResult']:
        """
        The active notify template info.
        """
        return pulumi.get(self, "actives")

    @property
    @pulumi.getter
    def channel(self) -> str:
        """
        The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of notify template.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of notify template.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of notify template.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of notify template. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resolveds(self) -> Sequence['outputs.GetNotifyTemplatesNotifyTemplateResolvedResult']:
        """
        The resolved notify template info.
        """
        return pulumi.get(self, "resolveds")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of notify template.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetNotifyTemplatesNotifyTemplateActiveResult(dict):
    def __init__(__self__, *,
                 content: str,
                 title: str):
        """
        :param str content: The content of notify template.
        :param str title: The title of notify template.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of notify template.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of notify template.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetNotifyTemplatesNotifyTemplateResolvedResult(dict):
    def __init__(__self__, *,
                 content: str,
                 title: str):
        """
        :param str content: The content of notify template.
        :param str title: The title of notify template.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of notify template.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of notify template.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetRuleFilesFileResult(dict):
    def __init__(__self__, *,
                 content: str,
                 create_time: str,
                 description: str,
                 id: str,
                 last_update_time: str,
                 name: str,
                 rule_count: int,
                 status: str):
        """
        :param str content: The content of rule file.
        :param str create_time: The create time of rule file.
        :param str description: The description of rule file.
        :param str id: The ID of rule file.
        :param str last_update_time: The last update time of rule file.
        :param str name: The name of rule file.
        :param int rule_count: The rule count number of rule file.
        :param str status: The status of rule file.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rule_count", rule_count)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of rule file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of rule file.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of rule file.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of rule file.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        The last update time of rule file.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of rule file.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleCount")
    def rule_count(self) -> int:
        """
        The rule count number of rule file.
        """
        return pulumi.get(self, "rule_count")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of rule file.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRulesRuleResult(dict):
    def __init__(__self__, *,
                 expr: str,
                 kind: str,
                 labels: Sequence['outputs.GetRulesRuleLabelResult'],
                 last_evaluation: str,
                 name: str,
                 reason: str,
                 rule_file_name: str,
                 rule_group_name: str,
                 status: str):
        """
        :param str expr: The expr of rule.
        :param str kind: The kind of rule.
        :param Sequence['GetRulesRuleLabelArgs'] labels: The labels of rule.
        :param str last_evaluation: The last evaluation of rule.
        :param str name: The name of rule.
        :param str reason: The reason of rule.
        :param str rule_file_name: The name of rule file.
        :param str rule_group_name: The name of rule group.
        :param str status: The status of rule.
        """
        pulumi.set(__self__, "expr", expr)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "last_evaluation", last_evaluation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "rule_file_name", rule_file_name)
        pulumi.set(__self__, "rule_group_name", rule_group_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def expr(self) -> str:
        """
        The expr of rule.
        """
        return pulumi.get(self, "expr")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The kind of rule.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetRulesRuleLabelResult']:
        """
        The labels of rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastEvaluation")
    def last_evaluation(self) -> str:
        """
        The last evaluation of rule.
        """
        return pulumi.get(self, "last_evaluation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        The reason of rule.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="ruleFileName")
    def rule_file_name(self) -> str:
        """
        The name of rule file.
        """
        return pulumi.get(self, "rule_file_name")

    @property
    @pulumi.getter(name="ruleGroupName")
    def rule_group_name(self) -> str:
        """
        The name of rule group.
        """
        return pulumi.get(self, "rule_group_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of rule.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRulesRuleLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of label.
        :param str value: The value of label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWorkspacesTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The Key of Tags.
        :param Sequence[str] values: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetWorkspacesWorkspaceResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 delete_protection_enabled: bool,
                 description: str,
                 id: str,
                 instance_type_id: str,
                 name: str,
                 overdue_reclaim_time: str,
                 project_name: str,
                 prometheus_push_intranet_endpoint: str,
                 prometheus_query_intranet_endpoint: str,
                 prometheus_write_intranet_endpoint: str,
                 status: str,
                 tags: Sequence['outputs.GetWorkspacesWorkspaceTagResult'],
                 username: str):
        """
        :param str create_time: The create time of workspace.
        :param bool delete_protection_enabled: Whether enable delete protection.
        :param str description: The description of workspace.
        :param str id: The ID of workspace.
        :param str instance_type_id: The id of instance type.
        :param str name: The name of workspace.
        :param str overdue_reclaim_time: The overdue reclaim time.
        :param str project_name: The project name of vmp workspace.
        :param str prometheus_push_intranet_endpoint: The prometheus push intranet endpoint.
        :param str prometheus_query_intranet_endpoint: The prometheus query intranet endpoint.
        :param str prometheus_write_intranet_endpoint: The prometheus write intranet endpoint.
        :param str status: The status of workspace.
        :param Sequence['GetWorkspacesWorkspaceTagArgs'] tags: The tags of vmp workspace.
        :param str username: The username of workspace.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "delete_protection_enabled", delete_protection_enabled)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_type_id", instance_type_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "overdue_reclaim_time", overdue_reclaim_time)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "prometheus_push_intranet_endpoint", prometheus_push_intranet_endpoint)
        pulumi.set(__self__, "prometheus_query_intranet_endpoint", prometheus_query_intranet_endpoint)
        pulumi.set(__self__, "prometheus_write_intranet_endpoint", prometheus_write_intranet_endpoint)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of workspace.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteProtectionEnabled")
    def delete_protection_enabled(self) -> bool:
        """
        Whether enable delete protection.
        """
        return pulumi.get(self, "delete_protection_enabled")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of workspace.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of workspace.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceTypeId")
    def instance_type_id(self) -> str:
        """
        The id of instance type.
        """
        return pulumi.get(self, "instance_type_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of workspace.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overdueReclaimTime")
    def overdue_reclaim_time(self) -> str:
        """
        The overdue reclaim time.
        """
        return pulumi.get(self, "overdue_reclaim_time")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The project name of vmp workspace.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="prometheusPushIntranetEndpoint")
    def prometheus_push_intranet_endpoint(self) -> str:
        """
        The prometheus push intranet endpoint.
        """
        return pulumi.get(self, "prometheus_push_intranet_endpoint")

    @property
    @pulumi.getter(name="prometheusQueryIntranetEndpoint")
    def prometheus_query_intranet_endpoint(self) -> str:
        """
        The prometheus query intranet endpoint.
        """
        return pulumi.get(self, "prometheus_query_intranet_endpoint")

    @property
    @pulumi.getter(name="prometheusWriteIntranetEndpoint")
    def prometheus_write_intranet_endpoint(self) -> str:
        """
        The prometheus write intranet endpoint.
        """
        return pulumi.get(self, "prometheus_write_intranet_endpoint")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of workspace.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetWorkspacesWorkspaceTagResult']:
        """
        The tags of vmp workspace.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username of workspace.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetWorkspacesWorkspaceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


