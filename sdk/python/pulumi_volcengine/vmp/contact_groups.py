# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ContactGroupsResult',
    'AwaitableContactGroupsResult',
    'contact_groups',
    'contact_groups_output',
]

warnings.warn("""volcengine.vmp.ContactGroups has been deprecated in favor of volcengine.vmp.getContactGroups""", DeprecationWarning)

@pulumi.output_type
class ContactGroupsResult:
    """
    A collection of values returned by ContactGroups.
    """
    def __init__(__self__, contact_groups=None, id=None, ids=None, name=None, output_file=None, total_count=None):
        if contact_groups and not isinstance(contact_groups, list):
            raise TypeError("Expected argument 'contact_groups' to be a list")
        pulumi.set(__self__, "contact_groups", contact_groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="contactGroups")
    def contact_groups(self) -> Sequence['outputs.ContactGroupsContactGroupResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "contact_groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of contact group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableContactGroupsResult(ContactGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ContactGroupsResult(
            contact_groups=self.contact_groups,
            id=self.id,
            ids=self.ids,
            name=self.name,
            output_file=self.output_file,
            total_count=self.total_count)


def contact_groups(ids: Optional[Sequence[str]] = None,
                   name: Optional[str] = None,
                   output_file: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableContactGroupsResult:
    """
    Use this data source to query detailed information of vmp contact groups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_contact = volcengine.vmp.Contact("fooContact",
        email="acctest1@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest1.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest1.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest1.com",
            at_mobiles=["18046891812"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101010",
        ))
    foo1 = volcengine.vmp.Contact("foo1",
        email="acctest2@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest2.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest2.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest2.com",
            at_mobiles=["18046891813"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101011",
        ))
    foo_contact_group = volcengine.vmp.ContactGroup("fooContactGroup", contact_ids=[
        foo_contact.id,
        foo1.id,
    ])
    foo_contact_groups = volcengine.vmp.get_contact_groups_output(ids=[foo_contact_group.id])
    ```


    :param Sequence[str] ids: A list of contact group ids.
    :param str name: The name of contact group.
    :param str output_file: File name where to save data source results.
    """
    pulumi.log.warn("""contact_groups is deprecated: volcengine.vmp.ContactGroups has been deprecated in favor of volcengine.vmp.getContactGroups""")
    __args__ = dict()
    __args__['ids'] = ids
    __args__['name'] = name
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vmp/contactGroups:ContactGroups', __args__, opts=opts, typ=ContactGroupsResult).value

    return AwaitableContactGroupsResult(
        contact_groups=pulumi.get(__ret__, 'contact_groups'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name=pulumi.get(__ret__, 'name'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(contact_groups)
def contact_groups_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          name: Optional[pulumi.Input[Optional[str]]] = None,
                          output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ContactGroupsResult]:
    """
    Use this data source to query detailed information of vmp contact groups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_contact = volcengine.vmp.Contact("fooContact",
        email="acctest1@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest1.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest1.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest1.com",
            at_mobiles=["18046891812"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101010",
        ))
    foo1 = volcengine.vmp.Contact("foo1",
        email="acctest2@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest2.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest2.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest2.com",
            at_mobiles=["18046891813"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101011",
        ))
    foo_contact_group = volcengine.vmp.ContactGroup("fooContactGroup", contact_ids=[
        foo_contact.id,
        foo1.id,
    ])
    foo_contact_groups = volcengine.vmp.get_contact_groups_output(ids=[foo_contact_group.id])
    ```


    :param Sequence[str] ids: A list of contact group ids.
    :param str name: The name of contact group.
    :param str output_file: File name where to save data source results.
    """
    pulumi.log.warn("""contact_groups is deprecated: volcengine.vmp.ContactGroups has been deprecated in favor of volcengine.vmp.getContactGroups""")
    ...
