# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRuleFilesResult',
    'AwaitableGetRuleFilesResult',
    'get_rule_files',
    'get_rule_files_output',
]

@pulumi.output_type
class GetRuleFilesResult:
    """
    A collection of values returned by getRuleFiles.
    """
    def __init__(__self__, files=None, id=None, ids=None, name=None, output_file=None, status=None, total_count=None, workspace_id=None):
        if files and not isinstance(files, list):
            raise TypeError("Expected argument 'files' to be a list")
        pulumi.set(__self__, "files", files)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def files(self) -> Sequence['outputs.GetRuleFilesFileResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of rule file.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of rule file.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetRuleFilesResult(GetRuleFilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRuleFilesResult(
            files=self.files,
            id=self.id,
            ids=self.ids,
            name=self.name,
            output_file=self.output_file,
            status=self.status,
            total_count=self.total_count,
            workspace_id=self.workspace_id)


def get_rule_files(ids: Optional[Sequence[str]] = None,
                   name: Optional[str] = None,
                   output_file: Optional[str] = None,
                   status: Optional[str] = None,
                   workspace_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRuleFilesResult:
    """
    Use this data source to query detailed information of vmp rule files
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_workspace = volcengine.vmp.Workspace("fooWorkspace",
        instance_type_id="vmp.standard.15d",
        delete_protection_enabled=False,
        description="acc-test-1",
        username="admin123",
        password="*********")
    foo_rule_file = volcengine.vmp.RuleFile("fooRuleFile",
        workspace_id=foo_workspace.id,
        description="acc-test-1",
        content=\"\"\"groups:
        - interval: 10s
          name: recording_rules
          rules:
            - expr: sum(irate(container_cpu_usage_seconds_total{image!=""}[5m])) by (pod) *100
              labels:
                team: operations
              record: pod:cpu:useage
    \"\"\")
    foo_rule_files = volcengine.vmp.get_rule_files_output(ids=[foo_rule_file.rule_file_id],
        workspace_id=foo_workspace.id)
    ```


    :param Sequence[str] ids: A list of Rule File IDs.
    :param str name: The name of rule file.
    :param str output_file: File name where to save data source results.
    :param str status: The status of rule file.
    :param str workspace_id: The id of workspace.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['name'] = name
    __args__['outputFile'] = output_file
    __args__['status'] = status
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vmp/getRuleFiles:getRuleFiles', __args__, opts=opts, typ=GetRuleFilesResult).value

    return AwaitableGetRuleFilesResult(
        files=pulumi.get(__ret__, 'files'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name=pulumi.get(__ret__, 'name'),
        output_file=pulumi.get(__ret__, 'output_file'),
        status=pulumi.get(__ret__, 'status'),
        total_count=pulumi.get(__ret__, 'total_count'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))


@_utilities.lift_output_func(get_rule_files)
def get_rule_files_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          name: Optional[pulumi.Input[Optional[str]]] = None,
                          output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          status: Optional[pulumi.Input[Optional[str]]] = None,
                          workspace_id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRuleFilesResult]:
    """
    Use this data source to query detailed information of vmp rule files
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_workspace = volcengine.vmp.Workspace("fooWorkspace",
        instance_type_id="vmp.standard.15d",
        delete_protection_enabled=False,
        description="acc-test-1",
        username="admin123",
        password="*********")
    foo_rule_file = volcengine.vmp.RuleFile("fooRuleFile",
        workspace_id=foo_workspace.id,
        description="acc-test-1",
        content=\"\"\"groups:
        - interval: 10s
          name: recording_rules
          rules:
            - expr: sum(irate(container_cpu_usage_seconds_total{image!=""}[5m])) by (pod) *100
              labels:
                team: operations
              record: pod:cpu:useage
    \"\"\")
    foo_rule_files = volcengine.vmp.get_rule_files_output(ids=[foo_rule_file.rule_file_id],
        workspace_id=foo_workspace.id)
    ```


    :param Sequence[str] ids: A list of Rule File IDs.
    :param str name: The name of rule file.
    :param str output_file: File name where to save data source results.
    :param str status: The status of rule file.
    :param str workspace_id: The id of workspace.
    """
    ...
