# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RuleFileArgs', 'RuleFile']

@pulumi.input_type
class RuleFileArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 workspace_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RuleFile resource.
        :param pulumi.Input[str] content: The content of the rule file.
        :param pulumi.Input[str] workspace_id: The id of the workspace.
        :param pulumi.Input[str] description: The description of the rule file.
        :param pulumi.Input[str] name: The name of the rule file.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The content of the rule file.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        The id of the workspace.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rule file.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rule file.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _RuleFileState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rule_count: Optional[pulumi.Input[int]] = None,
                 rule_file_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RuleFile resources.
        :param pulumi.Input[str] content: The content of the rule file.
        :param pulumi.Input[str] create_time: The create time of workspace.
        :param pulumi.Input[str] description: The description of the rule file.
        :param pulumi.Input[str] last_update_time: The last update time of rule file.
        :param pulumi.Input[str] name: The name of the rule file.
        :param pulumi.Input[int] rule_count: The rule count number of rule file.
        :param pulumi.Input[str] rule_file_id: The id of rule file.
        :param pulumi.Input[str] status: The status of workspace.
        :param pulumi.Input[str] workspace_id: The id of the workspace.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rule_count is not None:
            pulumi.set(__self__, "rule_count", rule_count)
        if rule_file_id is not None:
            pulumi.set(__self__, "rule_file_id", rule_file_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the rule file.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of workspace.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rule file.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last update time of rule file.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rule file.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ruleCount")
    def rule_count(self) -> Optional[pulumi.Input[int]]:
        """
        The rule count number of rule file.
        """
        return pulumi.get(self, "rule_count")

    @rule_count.setter
    def rule_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_count", value)

    @property
    @pulumi.getter(name="ruleFileId")
    def rule_file_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of rule file.
        """
        return pulumi.get(self, "rule_file_id")

    @rule_file_id.setter
    def rule_file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_file_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of workspace.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the workspace.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


class RuleFile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage vmp rule file
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_workspace = volcengine.vmp.Workspace("fooWorkspace",
            instance_type_id="vmp.standard.15d",
            delete_protection_enabled=False,
            description="acc-test-1",
            username="admin123",
            password="**********")
        foo_rule_file = volcengine.vmp.RuleFile("fooRuleFile",
            workspace_id=foo_workspace.id,
            description="acc-test-1",
            content=\"\"\"groups:
            - interval: 10s
              name: recording_rules
              rules:
                - expr: sum(irate(container_cpu_usage_seconds_total{image!=""}[5m])) by (pod) *100
                  labels:
                    team: operations
                  record: pod:cpu:useage
        \"\"\")
        ```

        ## Import

        VMP Rule File can be imported using the workspace_id:rule_file_id, e.g.
        (We can only get rule file by WorkspaceId and RuleFileId)

        ```sh
        $ pulumi import volcengine:vmp/ruleFile:RuleFile default 60dde3ca-951c-4c05-8777-e5a7caa07ad6:d6f72bd9-674e-4651-b98c-3797657d9614
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: The content of the rule file.
        :param pulumi.Input[str] description: The description of the rule file.
        :param pulumi.Input[str] name: The name of the rule file.
        :param pulumi.Input[str] workspace_id: The id of the workspace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuleFileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vmp rule file
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_workspace = volcengine.vmp.Workspace("fooWorkspace",
            instance_type_id="vmp.standard.15d",
            delete_protection_enabled=False,
            description="acc-test-1",
            username="admin123",
            password="**********")
        foo_rule_file = volcengine.vmp.RuleFile("fooRuleFile",
            workspace_id=foo_workspace.id,
            description="acc-test-1",
            content=\"\"\"groups:
            - interval: 10s
              name: recording_rules
              rules:
                - expr: sum(irate(container_cpu_usage_seconds_total{image!=""}[5m])) by (pod) *100
                  labels:
                    team: operations
                  record: pod:cpu:useage
        \"\"\")
        ```

        ## Import

        VMP Rule File can be imported using the workspace_id:rule_file_id, e.g.
        (We can only get rule file by WorkspaceId and RuleFileId)

        ```sh
        $ pulumi import volcengine:vmp/ruleFile:RuleFile default 60dde3ca-951c-4c05-8777-e5a7caa07ad6:d6f72bd9-674e-4651-b98c-3797657d9614
        ```

        :param str resource_name: The name of the resource.
        :param RuleFileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuleFileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuleFileArgs.__new__(RuleFileArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["last_update_time"] = None
            __props__.__dict__["rule_count"] = None
            __props__.__dict__["rule_file_id"] = None
            __props__.__dict__["status"] = None
        super(RuleFile, __self__).__init__(
            'volcengine:vmp/ruleFile:RuleFile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            last_update_time: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rule_count: Optional[pulumi.Input[int]] = None,
            rule_file_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            workspace_id: Optional[pulumi.Input[str]] = None) -> 'RuleFile':
        """
        Get an existing RuleFile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: The content of the rule file.
        :param pulumi.Input[str] create_time: The create time of workspace.
        :param pulumi.Input[str] description: The description of the rule file.
        :param pulumi.Input[str] last_update_time: The last update time of rule file.
        :param pulumi.Input[str] name: The name of the rule file.
        :param pulumi.Input[int] rule_count: The rule count number of rule file.
        :param pulumi.Input[str] rule_file_id: The id of rule file.
        :param pulumi.Input[str] status: The status of workspace.
        :param pulumi.Input[str] workspace_id: The id of the workspace.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RuleFileState.__new__(_RuleFileState)

        __props__.__dict__["content"] = content
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["last_update_time"] = last_update_time
        __props__.__dict__["name"] = name
        __props__.__dict__["rule_count"] = rule_count
        __props__.__dict__["rule_file_id"] = rule_file_id
        __props__.__dict__["status"] = status
        __props__.__dict__["workspace_id"] = workspace_id
        return RuleFile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        The content of the rule file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of workspace.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the rule file.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> pulumi.Output[str]:
        """
        The last update time of rule file.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the rule file.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleCount")
    def rule_count(self) -> pulumi.Output[int]:
        """
        The rule count number of rule file.
        """
        return pulumi.get(self, "rule_count")

    @property
    @pulumi.getter(name="ruleFileId")
    def rule_file_id(self) -> pulumi.Output[str]:
        """
        The id of rule file.
        """
        return pulumi.get(self, "rule_file_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of workspace.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[str]:
        """
        The id of the workspace.
        """
        return pulumi.get(self, "workspace_id")

