# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AlertsResult',
    'AwaitableAlertsResult',
    'alerts',
    'alerts_output',
]

warnings.warn("""volcengine.vmp.Alerts has been deprecated in favor of volcengine.vmp.getAlerts""", DeprecationWarning)

@pulumi.output_type
class AlertsResult:
    """
    A collection of values returned by Alerts.
    """
    def __init__(__self__, alerting_rule_ids=None, alerts=None, current_phase=None, desc=None, id=None, ids=None, level=None, output_file=None, total_count=None):
        if alerting_rule_ids and not isinstance(alerting_rule_ids, list):
            raise TypeError("Expected argument 'alerting_rule_ids' to be a list")
        pulumi.set(__self__, "alerting_rule_ids", alerting_rule_ids)
        if alerts and not isinstance(alerts, list):
            raise TypeError("Expected argument 'alerts' to be a list")
        pulumi.set(__self__, "alerts", alerts)
        if current_phase and not isinstance(current_phase, str):
            raise TypeError("Expected argument 'current_phase' to be a str")
        pulumi.set(__self__, "current_phase", current_phase)
        if desc and not isinstance(desc, bool):
            raise TypeError("Expected argument 'desc' to be a bool")
        pulumi.set(__self__, "desc", desc)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if level and not isinstance(level, str):
            raise TypeError("Expected argument 'level' to be a str")
        pulumi.set(__self__, "level", level)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="alertingRuleIds")
    def alerting_rule_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "alerting_rule_ids")

    @property
    @pulumi.getter
    def alerts(self) -> Sequence['outputs.AlertsAlertResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "alerts")

    @property
    @pulumi.getter(name="currentPhase")
    def current_phase(self) -> Optional[str]:
        """
        The status of the vmp alert.
        """
        return pulumi.get(self, "current_phase")

    @property
    @pulumi.getter
    def desc(self) -> Optional[bool]:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        The level of the vmp alerting rule.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableAlertsResult(AlertsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return AlertsResult(
            alerting_rule_ids=self.alerting_rule_ids,
            alerts=self.alerts,
            current_phase=self.current_phase,
            desc=self.desc,
            id=self.id,
            ids=self.ids,
            level=self.level,
            output_file=self.output_file,
            total_count=self.total_count)


def alerts(alerting_rule_ids: Optional[Sequence[str]] = None,
           current_phase: Optional[str] = None,
           desc: Optional[bool] = None,
           ids: Optional[Sequence[str]] = None,
           level: Optional[str] = None,
           output_file: Optional[str] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableAlertsResult:
    """
    Use this data source to query detailed information of vmp alerts
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.vmp.get_alerts(ids=["9a4f84-0868efcb795c2ac4-73cefd4b3263****"])
    ```


    :param Sequence[str] alerting_rule_ids: A list of alerting rule IDs.
    :param str current_phase: The status of vmp alert. Valid values: `Pending`, `Active`, `Resolved`, `Disabled`.
    :param bool desc: Whether to use descending sorting.
    :param Sequence[str] ids: A list of vmp alert IDs.
    :param str level: The level of vmp alert. Valid values: `P0`, `P1`, `P2`.
    :param str output_file: File name where to save data source results.
    """
    pulumi.log.warn("""alerts is deprecated: volcengine.vmp.Alerts has been deprecated in favor of volcengine.vmp.getAlerts""")
    __args__ = dict()
    __args__['alertingRuleIds'] = alerting_rule_ids
    __args__['currentPhase'] = current_phase
    __args__['desc'] = desc
    __args__['ids'] = ids
    __args__['level'] = level
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vmp/alerts:Alerts', __args__, opts=opts, typ=AlertsResult).value

    return AwaitableAlertsResult(
        alerting_rule_ids=pulumi.get(__ret__, 'alerting_rule_ids'),
        alerts=pulumi.get(__ret__, 'alerts'),
        current_phase=pulumi.get(__ret__, 'current_phase'),
        desc=pulumi.get(__ret__, 'desc'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        level=pulumi.get(__ret__, 'level'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(alerts)
def alerts_output(alerting_rule_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                  current_phase: Optional[pulumi.Input[Optional[str]]] = None,
                  desc: Optional[pulumi.Input[Optional[bool]]] = None,
                  ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                  level: Optional[pulumi.Input[Optional[str]]] = None,
                  output_file: Optional[pulumi.Input[Optional[str]]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[AlertsResult]:
    """
    Use this data source to query detailed information of vmp alerts
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.vmp.get_alerts(ids=["9a4f84-0868efcb795c2ac4-73cefd4b3263****"])
    ```


    :param Sequence[str] alerting_rule_ids: A list of alerting rule IDs.
    :param str current_phase: The status of vmp alert. Valid values: `Pending`, `Active`, `Resolved`, `Disabled`.
    :param bool desc: Whether to use descending sorting.
    :param Sequence[str] ids: A list of vmp alert IDs.
    :param str level: The level of vmp alert. Valid values: `P0`, `P1`, `P2`.
    :param str output_file: File name where to save data source results.
    """
    pulumi.log.warn("""alerts is deprecated: volcengine.vmp.Alerts has been deprecated in favor of volcengine.vmp.getAlerts""")
    ...
