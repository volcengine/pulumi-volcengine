# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NotifyTemplateArgs', 'NotifyTemplate']

@pulumi.input_type
class NotifyTemplateArgs:
    def __init__(__self__, *,
                 active: pulumi.Input['NotifyTemplateActiveArgs'],
                 channel: pulumi.Input[str],
                 resolved: pulumi.Input['NotifyTemplateResolvedArgs'],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NotifyTemplate resource.
        :param pulumi.Input['NotifyTemplateActiveArgs'] active: The active notify template info.
        :param pulumi.Input[str] channel: The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        :param pulumi.Input['NotifyTemplateResolvedArgs'] resolved: The resolved notify template info.
        :param pulumi.Input[str] description: The description of notify template.
        :param pulumi.Input[str] name: The name of notify template.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "resolved", resolved)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input['NotifyTemplateActiveArgs']:
        """
        The active notify template info.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input['NotifyTemplateActiveArgs']):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input[str]:
        """
        The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[str]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def resolved(self) -> pulumi.Input['NotifyTemplateResolvedArgs']:
        """
        The resolved notify template info.
        """
        return pulumi.get(self, "resolved")

    @resolved.setter
    def resolved(self, value: pulumi.Input['NotifyTemplateResolvedArgs']):
        pulumi.set(self, "resolved", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of notify template.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of notify template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _NotifyTemplateState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input['NotifyTemplateActiveArgs']] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolved: Optional[pulumi.Input['NotifyTemplateResolvedArgs']] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NotifyTemplate resources.
        :param pulumi.Input['NotifyTemplateActiveArgs'] active: The active notify template info.
        :param pulumi.Input[str] channel: The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        :param pulumi.Input[str] create_time: The create time of notify template.
        :param pulumi.Input[str] description: The description of notify template.
        :param pulumi.Input[str] name: The name of notify template.
        :param pulumi.Input['NotifyTemplateResolvedArgs'] resolved: The resolved notify template info.
        :param pulumi.Input[str] update_time: The update time of notify template.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resolved is not None:
            pulumi.set(__self__, "resolved", resolved)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input['NotifyTemplateActiveArgs']]:
        """
        The active notify template info.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input['NotifyTemplateActiveArgs']]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[str]]:
        """
        The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of notify template.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of notify template.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of notify template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resolved(self) -> Optional[pulumi.Input['NotifyTemplateResolvedArgs']]:
        """
        The resolved notify template info.
        """
        return pulumi.get(self, "resolved")

    @resolved.setter
    def resolved(self, value: Optional[pulumi.Input['NotifyTemplateResolvedArgs']]):
        pulumi.set(self, "resolved", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of notify template.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class NotifyTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[pulumi.InputType['NotifyTemplateActiveArgs']]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolved: Optional[pulumi.Input[pulumi.InputType['NotifyTemplateResolvedArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage vmp notify template
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vmp.NotifyTemplate("foo",
            active=volcengine.vmp.NotifyTemplateActiveArgs(
                content="acc-test-active-template-content",
                title="acc-test-active-template-title",
            ),
            channel="WeComBotWebhook",
            description="acc-test-vmp",
            resolved=volcengine.vmp.NotifyTemplateResolvedArgs(
                content="acc-test-resolved-template-content",
                title="acc-test-resolved-template-title",
            ))
        ```

        ## Import

        VmpNotifyTemplate can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vmp/notifyTemplate:NotifyTemplate default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['NotifyTemplateActiveArgs']] active: The active notify template info.
        :param pulumi.Input[str] channel: The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        :param pulumi.Input[str] description: The description of notify template.
        :param pulumi.Input[str] name: The name of notify template.
        :param pulumi.Input[pulumi.InputType['NotifyTemplateResolvedArgs']] resolved: The resolved notify template info.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotifyTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vmp notify template
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vmp.NotifyTemplate("foo",
            active=volcengine.vmp.NotifyTemplateActiveArgs(
                content="acc-test-active-template-content",
                title="acc-test-active-template-title",
            ),
            channel="WeComBotWebhook",
            description="acc-test-vmp",
            resolved=volcengine.vmp.NotifyTemplateResolvedArgs(
                content="acc-test-resolved-template-content",
                title="acc-test-resolved-template-title",
            ))
        ```

        ## Import

        VmpNotifyTemplate can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vmp/notifyTemplate:NotifyTemplate default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param NotifyTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotifyTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[pulumi.InputType['NotifyTemplateActiveArgs']]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolved: Optional[pulumi.Input[pulumi.InputType['NotifyTemplateResolvedArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotifyTemplateArgs.__new__(NotifyTemplateArgs)

            if active is None and not opts.urn:
                raise TypeError("Missing required property 'active'")
            __props__.__dict__["active"] = active
            if channel is None and not opts.urn:
                raise TypeError("Missing required property 'channel'")
            __props__.__dict__["channel"] = channel
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if resolved is None and not opts.urn:
                raise TypeError("Missing required property 'resolved'")
            __props__.__dict__["resolved"] = resolved
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(NotifyTemplate, __self__).__init__(
            'volcengine:vmp/notifyTemplate:NotifyTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[pulumi.InputType['NotifyTemplateActiveArgs']]] = None,
            channel: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resolved: Optional[pulumi.Input[pulumi.InputType['NotifyTemplateResolvedArgs']]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'NotifyTemplate':
        """
        Get an existing NotifyTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['NotifyTemplateActiveArgs']] active: The active notify template info.
        :param pulumi.Input[str] channel: The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        :param pulumi.Input[str] create_time: The create time of notify template.
        :param pulumi.Input[str] description: The description of notify template.
        :param pulumi.Input[str] name: The name of notify template.
        :param pulumi.Input[pulumi.InputType['NotifyTemplateResolvedArgs']] resolved: The resolved notify template info.
        :param pulumi.Input[str] update_time: The update time of notify template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotifyTemplateState.__new__(_NotifyTemplateState)

        __props__.__dict__["active"] = active
        __props__.__dict__["channel"] = channel
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["resolved"] = resolved
        __props__.__dict__["update_time"] = update_time
        return NotifyTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output['outputs.NotifyTemplateActive']:
        """
        The active notify template info.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Output[str]:
        """
        The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of notify template.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of notify template.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of notify template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resolved(self) -> pulumi.Output['outputs.NotifyTemplateResolved']:
        """
        The resolved notify template info.
        """
        return pulumi.get(self, "resolved")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The update time of notify template.
        """
        return pulumi.get(self, "update_time")

