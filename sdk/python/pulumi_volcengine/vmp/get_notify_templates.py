# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetNotifyTemplatesResult',
    'AwaitableGetNotifyTemplatesResult',
    'get_notify_templates',
    'get_notify_templates_output',
]

@pulumi.output_type
class GetNotifyTemplatesResult:
    """
    A collection of values returned by getNotifyTemplates.
    """
    def __init__(__self__, channel=None, id=None, ids=None, name=None, name_regex=None, notify_templates=None, output_file=None, total_count=None):
        if channel and not isinstance(channel, str):
            raise TypeError("Expected argument 'channel' to be a str")
        pulumi.set(__self__, "channel", channel)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if notify_templates and not isinstance(notify_templates, list):
            raise TypeError("Expected argument 'notify_templates' to be a list")
        pulumi.set(__self__, "notify_templates", notify_templates)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def channel(self) -> Optional[str]:
        """
        The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of notify template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="notifyTemplates")
    def notify_templates(self) -> Sequence['outputs.GetNotifyTemplatesNotifyTemplateResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "notify_templates")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetNotifyTemplatesResult(GetNotifyTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNotifyTemplatesResult(
            channel=self.channel,
            id=self.id,
            ids=self.ids,
            name=self.name,
            name_regex=self.name_regex,
            notify_templates=self.notify_templates,
            output_file=self.output_file,
            total_count=self.total_count)


def get_notify_templates(channel: Optional[str] = None,
                         ids: Optional[Sequence[str]] = None,
                         name: Optional[str] = None,
                         name_regex: Optional[str] = None,
                         output_file: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNotifyTemplatesResult:
    """
    Use this data source to query detailed information of vmp notify templates
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vmp.NotifyTemplate("foo",
        description="acc-test-vmp",
        channel="WeComBotWebhook",
        active=volcengine.vmp.NotifyTemplateActiveArgs(
            title="acc-test-active-template-title",
            content="acc-test-active-template-content",
        ),
        resolved=volcengine.vmp.NotifyTemplateResolvedArgs(
            title="acc-test-resolved-template-title",
            content="acc-test-resolved-template-content",
        ))
    default = volcengine.vmp.get_notify_templates_output(ids=[foo.id])
    ```


    :param str channel: The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
    :param Sequence[str] ids: A list of IDs.
    :param str name: The name of notify template. This field support fuzzy query.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['channel'] = channel
    __args__['ids'] = ids
    __args__['name'] = name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vmp/getNotifyTemplates:getNotifyTemplates', __args__, opts=opts, typ=GetNotifyTemplatesResult).value

    return AwaitableGetNotifyTemplatesResult(
        channel=pulumi.get(__ret__, 'channel'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name=pulumi.get(__ret__, 'name'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        notify_templates=pulumi.get(__ret__, 'notify_templates'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_notify_templates)
def get_notify_templates_output(channel: Optional[pulumi.Input[Optional[str]]] = None,
                                ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                                output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNotifyTemplatesResult]:
    """
    Use this data source to query detailed information of vmp notify templates
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vmp.NotifyTemplate("foo",
        description="acc-test-vmp",
        channel="WeComBotWebhook",
        active=volcengine.vmp.NotifyTemplateActiveArgs(
            title="acc-test-active-template-title",
            content="acc-test-active-template-content",
        ),
        resolved=volcengine.vmp.NotifyTemplateResolvedArgs(
            title="acc-test-resolved-template-title",
            content="acc-test-resolved-template-content",
        ))
    default = volcengine.vmp.get_notify_templates_output(ids=[foo.id])
    ```


    :param str channel: The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
    :param Sequence[str] ids: A list of IDs.
    :param str name: The name of notify template. This field support fuzzy query.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    ...
