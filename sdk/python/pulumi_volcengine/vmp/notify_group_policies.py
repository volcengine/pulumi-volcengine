# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'NotifyGroupPoliciesResult',
    'AwaitableNotifyGroupPoliciesResult',
    'notify_group_policies',
    'notify_group_policies_output',
]

warnings.warn("""volcengine.vmp.NotifyGroupPolicies has been deprecated in favor of volcengine.vmp.getNotifyGroupPolicies""", DeprecationWarning)

@pulumi.output_type
class NotifyGroupPoliciesResult:
    """
    A collection of values returned by NotifyGroupPolicies.
    """
    def __init__(__self__, id=None, ids=None, name=None, notify_policies=None, output_file=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notify_policies and not isinstance(notify_policies, list):
            raise TypeError("Expected argument 'notify_policies' to be a list")
        pulumi.set(__self__, "notify_policies", notify_policies)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of notify group policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyPolicies")
    def notify_policies(self) -> Sequence['outputs.NotifyGroupPoliciesNotifyPolicyResult']:
        """
        The list of notify group policies.
        """
        return pulumi.get(self, "notify_policies")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableNotifyGroupPoliciesResult(NotifyGroupPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return NotifyGroupPoliciesResult(
            id=self.id,
            ids=self.ids,
            name=self.name,
            notify_policies=self.notify_policies,
            output_file=self.output_file,
            total_count=self.total_count)


def notify_group_policies(ids: Optional[Sequence[str]] = None,
                          name: Optional[str] = None,
                          output_file: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableNotifyGroupPoliciesResult:
    """
    Use this data source to query detailed information of vmp notify group policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_notify_group_policy = volcengine.vmp.NotifyGroupPolicy("fooNotifyGroupPolicy",
        description="acc-test-1",
        levels=[
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P2",
                group_bies=["__rule__"],
                group_wait="35",
                group_interval="30",
                repeat_interval="30",
            ),
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P0",
                group_bies=["__rule__"],
                group_wait="30",
                group_interval="30",
                repeat_interval="30",
            ),
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P1",
                group_bies=["__rule__"],
                group_wait="40",
                group_interval="45",
                repeat_interval="30",
            ),
        ])
    foo_notify_group_policies = volcengine.vmp.get_notify_group_policies_output(ids=[foo_notify_group_policy.id])
    ```


    :param Sequence[str] ids: A list of notify group policy ids.
    :param str name: The name of notify group policy.
    :param str output_file: File name where to save data source results.
    """
    pulumi.log.warn("""notify_group_policies is deprecated: volcengine.vmp.NotifyGroupPolicies has been deprecated in favor of volcengine.vmp.getNotifyGroupPolicies""")
    __args__ = dict()
    __args__['ids'] = ids
    __args__['name'] = name
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vmp/notifyGroupPolicies:NotifyGroupPolicies', __args__, opts=opts, typ=NotifyGroupPoliciesResult).value

    return AwaitableNotifyGroupPoliciesResult(
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name=pulumi.get(__ret__, 'name'),
        notify_policies=pulumi.get(__ret__, 'notify_policies'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(notify_group_policies)
def notify_group_policies_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[NotifyGroupPoliciesResult]:
    """
    Use this data source to query detailed information of vmp notify group policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_notify_group_policy = volcengine.vmp.NotifyGroupPolicy("fooNotifyGroupPolicy",
        description="acc-test-1",
        levels=[
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P2",
                group_bies=["__rule__"],
                group_wait="35",
                group_interval="30",
                repeat_interval="30",
            ),
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P0",
                group_bies=["__rule__"],
                group_wait="30",
                group_interval="30",
                repeat_interval="30",
            ),
            volcengine.vmp.NotifyGroupPolicyLevelArgs(
                level="P1",
                group_bies=["__rule__"],
                group_wait="40",
                group_interval="45",
                repeat_interval="30",
            ),
        ])
    foo_notify_group_policies = volcengine.vmp.get_notify_group_policies_output(ids=[foo_notify_group_policy.id])
    ```


    :param Sequence[str] ids: A list of notify group policy ids.
    :param str name: The name of notify group policy.
    :param str output_file: File name where to save data source results.
    """
    pulumi.log.warn("""notify_group_policies is deprecated: volcengine.vmp.NotifyGroupPolicies has been deprecated in favor of volcengine.vmp.getNotifyGroupPolicies""")
    ...
