# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NotifyPolicyArgs', 'NotifyPolicy']

@pulumi.input_type
class NotifyPolicyArgs:
    def __init__(__self__, *,
                 levels: pulumi.Input[Sequence[pulumi.Input['NotifyPolicyLevelArgs']]],
                 channel_notify_template_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NotifyPolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input['NotifyPolicyLevelArgs']]] levels: The levels of the notify policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_notify_template_ids: The channel notify template for the alarm notification policy.
        :param pulumi.Input[str] description: The description of the notify policy.
        :param pulumi.Input[str] name: The name of the notify policy.
        """
        pulumi.set(__self__, "levels", levels)
        if channel_notify_template_ids is not None:
            pulumi.set(__self__, "channel_notify_template_ids", channel_notify_template_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def levels(self) -> pulumi.Input[Sequence[pulumi.Input['NotifyPolicyLevelArgs']]]:
        """
        The levels of the notify policy.
        """
        return pulumi.get(self, "levels")

    @levels.setter
    def levels(self, value: pulumi.Input[Sequence[pulumi.Input['NotifyPolicyLevelArgs']]]):
        pulumi.set(self, "levels", value)

    @property
    @pulumi.getter(name="channelNotifyTemplateIds")
    def channel_notify_template_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channel notify template for the alarm notification policy.
        """
        return pulumi.get(self, "channel_notify_template_ids")

    @channel_notify_template_ids.setter
    def channel_notify_template_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_notify_template_ids", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the notify policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the notify policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _NotifyPolicyState:
    def __init__(__self__, *,
                 channel_notify_template_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 levels: Optional[pulumi.Input[Sequence[pulumi.Input['NotifyPolicyLevelArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NotifyPolicy resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_notify_template_ids: The channel notify template for the alarm notification policy.
        :param pulumi.Input[str] description: The description of the notify policy.
        :param pulumi.Input[Sequence[pulumi.Input['NotifyPolicyLevelArgs']]] levels: The levels of the notify policy.
        :param pulumi.Input[str] name: The name of the notify policy.
        """
        if channel_notify_template_ids is not None:
            pulumi.set(__self__, "channel_notify_template_ids", channel_notify_template_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if levels is not None:
            pulumi.set(__self__, "levels", levels)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="channelNotifyTemplateIds")
    def channel_notify_template_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channel notify template for the alarm notification policy.
        """
        return pulumi.get(self, "channel_notify_template_ids")

    @channel_notify_template_ids.setter
    def channel_notify_template_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_notify_template_ids", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the notify policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotifyPolicyLevelArgs']]]]:
        """
        The levels of the notify policy.
        """
        return pulumi.get(self, "levels")

    @levels.setter
    def levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotifyPolicyLevelArgs']]]]):
        pulumi.set(self, "levels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the notify policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class NotifyPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_notify_template_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 levels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotifyPolicyLevelArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage vmp notify policy
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_contact = volcengine.vmp.Contact("fooContact",
            email="acctest1@tftest.com",
            webhook=volcengine.vmp.ContactWebhookArgs(
                address="https://www.acctest1.com",
            ),
            lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
                address="https://www.acctest1.com",
            ),
            ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
                address="https://www.dingacctest1.com",
                at_mobiles=["18046891812"],
            ),
            phone_number=volcengine.vmp.ContactPhoneNumberArgs(
                country_code="+86",
                number="18310101010",
            ))
        foo1_contact = volcengine.vmp.Contact("foo1Contact",
            email="acctest2@tftest.com",
            webhook=volcengine.vmp.ContactWebhookArgs(
                address="https://www.acctest2.com",
            ),
            lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
                address="https://www.acctest2.com",
            ),
            ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
                address="https://www.dingacctest2.com",
                at_mobiles=["18046891813"],
            ),
            phone_number=volcengine.vmp.ContactPhoneNumberArgs(
                country_code="+86",
                number="18310101011",
            ))
        foo_contact_group = volcengine.vmp.ContactGroup("fooContactGroup", contact_ids=[foo_contact.id])
        foo1_contact_group = volcengine.vmp.ContactGroup("foo1ContactGroup", contact_ids=[foo1_contact.id])
        foo_notify_policy = volcengine.vmp.NotifyPolicy("fooNotifyPolicy",
            description="acc-test-1",
            levels=[
                volcengine.vmp.NotifyPolicyLevelArgs(
                    level="P1",
                    contact_group_ids=[foo_contact_group.id],
                    channels=[
                        "Email",
                        "Webhook",
                    ],
                ),
                volcengine.vmp.NotifyPolicyLevelArgs(
                    level="P0",
                    contact_group_ids=[foo1_contact_group.id],
                    channels=["LarkBotWebhook"],
                ),
            ])
        ```

        ## Import

        VMP Notify Policy can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vmp/notifyPolicy:NotifyPolicy default 60dde3ca-951c-4c05-8777-e5a7caa07ad6
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_notify_template_ids: The channel notify template for the alarm notification policy.
        :param pulumi.Input[str] description: The description of the notify policy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotifyPolicyLevelArgs']]]] levels: The levels of the notify policy.
        :param pulumi.Input[str] name: The name of the notify policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotifyPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vmp notify policy
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_contact = volcengine.vmp.Contact("fooContact",
            email="acctest1@tftest.com",
            webhook=volcengine.vmp.ContactWebhookArgs(
                address="https://www.acctest1.com",
            ),
            lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
                address="https://www.acctest1.com",
            ),
            ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
                address="https://www.dingacctest1.com",
                at_mobiles=["18046891812"],
            ),
            phone_number=volcengine.vmp.ContactPhoneNumberArgs(
                country_code="+86",
                number="18310101010",
            ))
        foo1_contact = volcengine.vmp.Contact("foo1Contact",
            email="acctest2@tftest.com",
            webhook=volcengine.vmp.ContactWebhookArgs(
                address="https://www.acctest2.com",
            ),
            lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
                address="https://www.acctest2.com",
            ),
            ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
                address="https://www.dingacctest2.com",
                at_mobiles=["18046891813"],
            ),
            phone_number=volcengine.vmp.ContactPhoneNumberArgs(
                country_code="+86",
                number="18310101011",
            ))
        foo_contact_group = volcengine.vmp.ContactGroup("fooContactGroup", contact_ids=[foo_contact.id])
        foo1_contact_group = volcengine.vmp.ContactGroup("foo1ContactGroup", contact_ids=[foo1_contact.id])
        foo_notify_policy = volcengine.vmp.NotifyPolicy("fooNotifyPolicy",
            description="acc-test-1",
            levels=[
                volcengine.vmp.NotifyPolicyLevelArgs(
                    level="P1",
                    contact_group_ids=[foo_contact_group.id],
                    channels=[
                        "Email",
                        "Webhook",
                    ],
                ),
                volcengine.vmp.NotifyPolicyLevelArgs(
                    level="P0",
                    contact_group_ids=[foo1_contact_group.id],
                    channels=["LarkBotWebhook"],
                ),
            ])
        ```

        ## Import

        VMP Notify Policy can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vmp/notifyPolicy:NotifyPolicy default 60dde3ca-951c-4c05-8777-e5a7caa07ad6
        ```

        :param str resource_name: The name of the resource.
        :param NotifyPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotifyPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_notify_template_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 levels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotifyPolicyLevelArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotifyPolicyArgs.__new__(NotifyPolicyArgs)

            __props__.__dict__["channel_notify_template_ids"] = channel_notify_template_ids
            __props__.__dict__["description"] = description
            if levels is None and not opts.urn:
                raise TypeError("Missing required property 'levels'")
            __props__.__dict__["levels"] = levels
            __props__.__dict__["name"] = name
        super(NotifyPolicy, __self__).__init__(
            'volcengine:vmp/notifyPolicy:NotifyPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            channel_notify_template_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            levels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotifyPolicyLevelArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'NotifyPolicy':
        """
        Get an existing NotifyPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_notify_template_ids: The channel notify template for the alarm notification policy.
        :param pulumi.Input[str] description: The description of the notify policy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotifyPolicyLevelArgs']]]] levels: The levels of the notify policy.
        :param pulumi.Input[str] name: The name of the notify policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotifyPolicyState.__new__(_NotifyPolicyState)

        __props__.__dict__["channel_notify_template_ids"] = channel_notify_template_ids
        __props__.__dict__["description"] = description
        __props__.__dict__["levels"] = levels
        __props__.__dict__["name"] = name
        return NotifyPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="channelNotifyTemplateIds")
    def channel_notify_template_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The channel notify template for the alarm notification policy.
        """
        return pulumi.get(self, "channel_notify_template_ids")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the notify policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def levels(self) -> pulumi.Output[Sequence['outputs.NotifyPolicyLevel']]:
        """
        The levels of the notify policy.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the notify policy.
        """
        return pulumi.get(self, "name")

