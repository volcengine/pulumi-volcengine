# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetNotifyPoliciesResult',
    'AwaitableGetNotifyPoliciesResult',
    'get_notify_policies',
    'get_notify_policies_output',
]

@pulumi.output_type
class GetNotifyPoliciesResult:
    """
    A collection of values returned by getNotifyPolicies.
    """
    def __init__(__self__, channel_notify_template_ids=None, contact_group_ids=None, id=None, ids=None, name=None, notify_policies=None, output_file=None, total_count=None):
        if channel_notify_template_ids and not isinstance(channel_notify_template_ids, list):
            raise TypeError("Expected argument 'channel_notify_template_ids' to be a list")
        pulumi.set(__self__, "channel_notify_template_ids", channel_notify_template_ids)
        if contact_group_ids and not isinstance(contact_group_ids, list):
            raise TypeError("Expected argument 'contact_group_ids' to be a list")
        pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notify_policies and not isinstance(notify_policies, list):
            raise TypeError("Expected argument 'notify_policies' to be a list")
        pulumi.set(__self__, "notify_policies", notify_policies)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="channelNotifyTemplateIds")
    def channel_notify_template_ids(self) -> Optional[Sequence[str]]:
        """
        The channel notify template for the alarm notification policy.
        """
        return pulumi.get(self, "channel_notify_template_ids")

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Optional[Sequence[str]]:
        """
        The contact group for the alarm notification policy.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of notify policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyPolicies")
    def notify_policies(self) -> Sequence['outputs.GetNotifyPoliciesNotifyPolicyResult']:
        """
        The list of notify policies.
        """
        return pulumi.get(self, "notify_policies")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetNotifyPoliciesResult(GetNotifyPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNotifyPoliciesResult(
            channel_notify_template_ids=self.channel_notify_template_ids,
            contact_group_ids=self.contact_group_ids,
            id=self.id,
            ids=self.ids,
            name=self.name,
            notify_policies=self.notify_policies,
            output_file=self.output_file,
            total_count=self.total_count)


def get_notify_policies(channel_notify_template_ids: Optional[Sequence[str]] = None,
                        contact_group_ids: Optional[Sequence[str]] = None,
                        ids: Optional[Sequence[str]] = None,
                        name: Optional[str] = None,
                        output_file: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNotifyPoliciesResult:
    """
    Use this data source to query detailed information of vmp notify policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_contact = volcengine.vmp.Contact("fooContact",
        email="acctest1@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest1.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest1.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest1.com",
            at_mobiles=["18046891812"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101010",
        ))
    foo1_contact = volcengine.vmp.Contact("foo1Contact",
        email="acctest2@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest2.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest2.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest2.com",
            at_mobiles=["18046891813"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101011",
        ))
    foo_contact_group = volcengine.vmp.ContactGroup("fooContactGroup", contact_ids=[foo_contact.id])
    foo1_contact_group = volcengine.vmp.ContactGroup("foo1ContactGroup", contact_ids=[foo1_contact.id])
    foo_notify_policy = volcengine.vmp.NotifyPolicy("fooNotifyPolicy",
        description="acc-test-1",
        levels=[
            volcengine.vmp.NotifyPolicyLevelArgs(
                level="P1",
                contact_group_ids=[foo_contact_group.id],
                channels=[
                    "Email",
                    "Webhook",
                ],
            ),
            volcengine.vmp.NotifyPolicyLevelArgs(
                level="P0",
                contact_group_ids=[foo1_contact_group.id],
                channels=["LarkBotWebhook"],
            ),
        ])
    foo_notify_policies = volcengine.vmp.get_notify_policies_output(ids=[foo_notify_policy.id])
    ```


    :param Sequence[str] channel_notify_template_ids: The channel notify template for the alarm notification policy.
    :param Sequence[str] contact_group_ids: The contact group for the alarm notification policy.
    :param Sequence[str] ids: A list of notify policy ids.
    :param str name: The name of notify policy.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['channelNotifyTemplateIds'] = channel_notify_template_ids
    __args__['contactGroupIds'] = contact_group_ids
    __args__['ids'] = ids
    __args__['name'] = name
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vmp/getNotifyPolicies:getNotifyPolicies', __args__, opts=opts, typ=GetNotifyPoliciesResult).value

    return AwaitableGetNotifyPoliciesResult(
        channel_notify_template_ids=pulumi.get(__ret__, 'channel_notify_template_ids'),
        contact_group_ids=pulumi.get(__ret__, 'contact_group_ids'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name=pulumi.get(__ret__, 'name'),
        notify_policies=pulumi.get(__ret__, 'notify_policies'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_notify_policies)
def get_notify_policies_output(channel_notify_template_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               contact_group_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNotifyPoliciesResult]:
    """
    Use this data source to query detailed information of vmp notify policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_contact = volcengine.vmp.Contact("fooContact",
        email="acctest1@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest1.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest1.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest1.com",
            at_mobiles=["18046891812"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101010",
        ))
    foo1_contact = volcengine.vmp.Contact("foo1Contact",
        email="acctest2@tftest.com",
        webhook=volcengine.vmp.ContactWebhookArgs(
            address="https://www.acctest2.com",
        ),
        lark_bot_webhook=volcengine.vmp.ContactLarkBotWebhookArgs(
            address="https://www.acctest2.com",
        ),
        ding_talk_bot_webhook=volcengine.vmp.ContactDingTalkBotWebhookArgs(
            address="https://www.dingacctest2.com",
            at_mobiles=["18046891813"],
        ),
        phone_number=volcengine.vmp.ContactPhoneNumberArgs(
            country_code="+86",
            number="18310101011",
        ))
    foo_contact_group = volcengine.vmp.ContactGroup("fooContactGroup", contact_ids=[foo_contact.id])
    foo1_contact_group = volcengine.vmp.ContactGroup("foo1ContactGroup", contact_ids=[foo1_contact.id])
    foo_notify_policy = volcengine.vmp.NotifyPolicy("fooNotifyPolicy",
        description="acc-test-1",
        levels=[
            volcengine.vmp.NotifyPolicyLevelArgs(
                level="P1",
                contact_group_ids=[foo_contact_group.id],
                channels=[
                    "Email",
                    "Webhook",
                ],
            ),
            volcengine.vmp.NotifyPolicyLevelArgs(
                level="P0",
                contact_group_ids=[foo1_contact_group.id],
                channels=["LarkBotWebhook"],
            ),
        ])
    foo_notify_policies = volcengine.vmp.get_notify_policies_output(ids=[foo_notify_policy.id])
    ```


    :param Sequence[str] channel_notify_template_ids: The channel notify template for the alarm notification policy.
    :param Sequence[str] contact_group_ids: The contact group for the alarm notification policy.
    :param Sequence[str] ids: A list of notify policy ids.
    :param str name: The name of notify policy.
    :param str output_file: File name where to save data source results.
    """
    ...
