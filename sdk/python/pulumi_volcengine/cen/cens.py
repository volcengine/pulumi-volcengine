# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'CensResult',
    'AwaitableCensResult',
    'cens',
    'cens_output',
]

@pulumi.output_type
class CensResult:
    """
    A collection of values returned by Cens.
    """
    def __init__(__self__, cen_names=None, cens=None, id=None, ids=None, name_regex=None, output_file=None, tags=None, total_count=None):
        if cen_names and not isinstance(cen_names, list):
            raise TypeError("Expected argument 'cen_names' to be a list")
        pulumi.set(__self__, "cen_names", cen_names)
        if cens and not isinstance(cens, list):
            raise TypeError("Expected argument 'cens' to be a list")
        pulumi.set(__self__, "cens", cens)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="cenNames")
    def cen_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cen_names")

    @property
    @pulumi.getter
    def cens(self) -> Sequence['outputs.CensCenResult']:
        """
        The collection of cen query.
        """
        return pulumi.get(self, "cens")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.CensTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of cen query.
        """
        return pulumi.get(self, "total_count")


class AwaitableCensResult(CensResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return CensResult(
            cen_names=self.cen_names,
            cens=self.cens,
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            output_file=self.output_file,
            tags=self.tags,
            total_count=self.total_count)


def cens(cen_names: Optional[Sequence[str]] = None,
         ids: Optional[Sequence[str]] = None,
         name_regex: Optional[str] = None,
         output_file: Optional[str] = None,
         tags: Optional[Sequence[pulumi.InputType['CensTagArgs']]] = None,
         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableCensResult:
    """
    Use this data source to query detailed information of cens
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cen.cens(ids=["cen-2bzrl3srxsv0g2dx0efyoojn3"])
    ```


    :param Sequence[str] cen_names: A list of cen names.
    :param Sequence[str] ids: A list of cen IDs.
    :param str name_regex: A Name Regex of cen.
    :param str output_file: File name where to save data source results.
    :param Sequence[pulumi.InputType['CensTagArgs']] tags: Tags.
    """
    __args__ = dict()
    __args__['cenNames'] = cen_names
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cen/cens:Cens', __args__, opts=opts, typ=CensResult).value

    return AwaitableCensResult(
        cen_names=pulumi.get(__ret__, 'cen_names'),
        cens=pulumi.get(__ret__, 'cens'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(cens)
def cens_output(cen_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                output_file: Optional[pulumi.Input[Optional[str]]] = None,
                tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['CensTagArgs']]]]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[CensResult]:
    """
    Use this data source to query detailed information of cens
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cen.cens(ids=["cen-2bzrl3srxsv0g2dx0efyoojn3"])
    ```


    :param Sequence[str] cen_names: A list of cen names.
    :param Sequence[str] ids: A list of cen IDs.
    :param str name_regex: A Name Regex of cen.
    :param str output_file: File name where to save data source results.
    :param Sequence[pulumi.InputType['CensTagArgs']] tags: Tags.
    """
    ...
