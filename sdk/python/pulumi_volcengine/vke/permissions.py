# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'PermissionsResult',
    'AwaitablePermissionsResult',
    'permissions',
    'permissions_output',
]

warnings.warn("""volcengine.vke.Permissions has been deprecated in favor of volcengine.vke.getPermissions""", DeprecationWarning)

@pulumi.output_type
class PermissionsResult:
    """
    A collection of values returned by Permissions.
    """
    def __init__(__self__, access_policies=None, cluster_ids=None, grantee_ids=None, grantee_type=None, id=None, ids=None, namespaces=None, output_file=None, role_names=None, status=None, total_count=None):
        if access_policies and not isinstance(access_policies, list):
            raise TypeError("Expected argument 'access_policies' to be a list")
        pulumi.set(__self__, "access_policies", access_policies)
        if cluster_ids and not isinstance(cluster_ids, list):
            raise TypeError("Expected argument 'cluster_ids' to be a list")
        pulumi.set(__self__, "cluster_ids", cluster_ids)
        if grantee_ids and not isinstance(grantee_ids, list):
            raise TypeError("Expected argument 'grantee_ids' to be a list")
        pulumi.set(__self__, "grantee_ids", grantee_ids)
        if grantee_type and not isinstance(grantee_type, str):
            raise TypeError("Expected argument 'grantee_type' to be a str")
        pulumi.set(__self__, "grantee_type", grantee_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if namespaces and not isinstance(namespaces, list):
            raise TypeError("Expected argument 'namespaces' to be a list")
        pulumi.set(__self__, "namespaces", namespaces)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if role_names and not isinstance(role_names, list):
            raise TypeError("Expected argument 'role_names' to be a list")
        pulumi.set(__self__, "role_names", role_names)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> Sequence['outputs.PermissionsAccessPolicyResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "access_policies")

    @property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cluster_ids")

    @property
    @pulumi.getter(name="granteeIds")
    def grantee_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "grantee_ids")

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> Optional[str]:
        """
        The type of the Grantee.
        """
        return pulumi.get(self, "grantee_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="roleNames")
    def role_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "role_names")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the RBAC Permission.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitablePermissionsResult(PermissionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return PermissionsResult(
            access_policies=self.access_policies,
            cluster_ids=self.cluster_ids,
            grantee_ids=self.grantee_ids,
            grantee_type=self.grantee_type,
            id=self.id,
            ids=self.ids,
            namespaces=self.namespaces,
            output_file=self.output_file,
            role_names=self.role_names,
            status=self.status,
            total_count=self.total_count)


def permissions(cluster_ids: Optional[Sequence[str]] = None,
                grantee_ids: Optional[Sequence[int]] = None,
                grantee_type: Optional[str] = None,
                ids: Optional[Sequence[str]] = None,
                namespaces: Optional[Sequence[str]] = None,
                output_file: Optional[str] = None,
                role_names: Optional[Sequence[str]] = None,
                status: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitablePermissionsResult:
    """
    Use this data source to query detailed information of vke permissions
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vke.get_permissions(grantee_type="User",
        ids=["apd10o9jhqqno0ba25****"])
    ```


    :param Sequence[str] cluster_ids: A list of Cluster IDs.
    :param Sequence[int] grantee_ids: A list of Grantee IDs.
    :param str grantee_type: The type of Grantee. Valid values: `User`, `Role`.
    :param Sequence[str] ids: A list of RBAC Permission IDs.
    :param Sequence[str] namespaces: A list of Namespaces.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] role_names: A list of RBAC Role Names.
    :param str status: The status of RBAC Permission.
    """
    pulumi.log.warn("""permissions is deprecated: volcengine.vke.Permissions has been deprecated in favor of volcengine.vke.getPermissions""")
    __args__ = dict()
    __args__['clusterIds'] = cluster_ids
    __args__['granteeIds'] = grantee_ids
    __args__['granteeType'] = grantee_type
    __args__['ids'] = ids
    __args__['namespaces'] = namespaces
    __args__['outputFile'] = output_file
    __args__['roleNames'] = role_names
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vke/permissions:Permissions', __args__, opts=opts, typ=PermissionsResult).value

    return AwaitablePermissionsResult(
        access_policies=pulumi.get(__ret__, 'access_policies'),
        cluster_ids=pulumi.get(__ret__, 'cluster_ids'),
        grantee_ids=pulumi.get(__ret__, 'grantee_ids'),
        grantee_type=pulumi.get(__ret__, 'grantee_type'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        namespaces=pulumi.get(__ret__, 'namespaces'),
        output_file=pulumi.get(__ret__, 'output_file'),
        role_names=pulumi.get(__ret__, 'role_names'),
        status=pulumi.get(__ret__, 'status'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(permissions)
def permissions_output(cluster_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       grantee_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                       grantee_type: Optional[pulumi.Input[Optional[str]]] = None,
                       ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       namespaces: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       output_file: Optional[pulumi.Input[Optional[str]]] = None,
                       role_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       status: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[PermissionsResult]:
    """
    Use this data source to query detailed information of vke permissions
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vke.get_permissions(grantee_type="User",
        ids=["apd10o9jhqqno0ba25****"])
    ```


    :param Sequence[str] cluster_ids: A list of Cluster IDs.
    :param Sequence[int] grantee_ids: A list of Grantee IDs.
    :param str grantee_type: The type of Grantee. Valid values: `User`, `Role`.
    :param Sequence[str] ids: A list of RBAC Permission IDs.
    :param Sequence[str] namespaces: A list of Namespaces.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] role_names: A list of RBAC Role Names.
    :param str status: The status of RBAC Permission.
    """
    pulumi.log.warn("""permissions is deprecated: volcengine.vke.Permissions has been deprecated in favor of volcengine.vke.getPermissions""")
    ...
