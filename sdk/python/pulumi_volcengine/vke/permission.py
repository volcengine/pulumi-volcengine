# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PermissionArgs', 'Permission']

@pulumi.input_type
class PermissionArgs:
    def __init__(__self__, *,
                 grantee_id: pulumi.Input[int],
                 grantee_type: pulumi.Input[str],
                 role_domain: pulumi.Input[str],
                 role_name: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 is_custom_role: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Permission resource.
        :param pulumi.Input[int] grantee_id: The ID of the grantee.
        :param pulumi.Input[str] grantee_type: The type of the grantee. Valid values: `User`.
        :param pulumi.Input[str] role_domain: The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `all_clusters`. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] role_name: The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
        :param pulumi.Input[str] cluster_id: The cluster ID that needs to be authorized to IAM users or roles.
        :param pulumi.Input[bool] is_custom_role: Whether the RBAC role is a custom role. Default is false.
        :param pulumi.Input[str] namespace: The namespace that needs to be authorized to IAM users or roles.
        """
        pulumi.set(__self__, "grantee_id", grantee_id)
        pulumi.set(__self__, "grantee_type", grantee_type)
        pulumi.set(__self__, "role_domain", role_domain)
        pulumi.set(__self__, "role_name", role_name)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="granteeId")
    def grantee_id(self) -> pulumi.Input[int]:
        """
        The ID of the grantee.
        """
        return pulumi.get(self, "grantee_id")

    @grantee_id.setter
    def grantee_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "grantee_id", value)

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> pulumi.Input[str]:
        """
        The type of the grantee. Valid values: `User`.
        """
        return pulumi.get(self, "grantee_type")

    @grantee_type.setter
    def grantee_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "grantee_type", value)

    @property
    @pulumi.getter(name="roleDomain")
    def role_domain(self) -> pulumi.Input[str]:
        """
        The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `all_clusters`. 
        When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "role_domain")

    @role_domain.setter
    def role_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_domain", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Input[str]:
        """
        The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster ID that needs to be authorized to IAM users or roles.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the RBAC role is a custom role. Default is false.
        """
        return pulumi.get(self, "is_custom_role")

    @is_custom_role.setter
    def is_custom_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_custom_role", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace that needs to be authorized to IAM users or roles.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class _PermissionState:
    def __init__(__self__, *,
                 authorized_at: Optional[pulumi.Input[str]] = None,
                 authorizer_id: Optional[pulumi.Input[int]] = None,
                 authorizer_name: Optional[pulumi.Input[str]] = None,
                 authorizer_type: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 granted_at: Optional[pulumi.Input[str]] = None,
                 grantee_id: Optional[pulumi.Input[int]] = None,
                 grantee_type: Optional[pulumi.Input[str]] = None,
                 is_custom_role: Optional[pulumi.Input[bool]] = None,
                 kube_role_binding_name: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 revoked_at: Optional[pulumi.Input[str]] = None,
                 role_domain: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Permission resources.
        :param pulumi.Input[str] authorized_at: The authorized time of the RBAC Permission.
        :param pulumi.Input[int] authorizer_id: The ID of the Authorizer.
        :param pulumi.Input[str] authorizer_name: The name of the Authorizer.
        :param pulumi.Input[str] authorizer_type: The type of the Authorizer.
        :param pulumi.Input[str] cluster_id: The cluster ID that needs to be authorized to IAM users or roles.
        :param pulumi.Input[str] granted_at: The granted time of the RBAC Permission.
        :param pulumi.Input[int] grantee_id: The ID of the grantee.
        :param pulumi.Input[str] grantee_type: The type of the grantee. Valid values: `User`.
        :param pulumi.Input[bool] is_custom_role: Whether the RBAC role is a custom role. Default is false.
        :param pulumi.Input[str] kube_role_binding_name: The name of the Kube Role Binding.
        :param pulumi.Input[str] message: The message of the RBAC Permission.
        :param pulumi.Input[str] namespace: The namespace that needs to be authorized to IAM users or roles.
        :param pulumi.Input[str] revoked_at: The revoked time of the RBAC Permission.
        :param pulumi.Input[str] role_domain: The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `all_clusters`. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] role_name: The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
        :param pulumi.Input[str] status: The status of the RBAC Permission.
        """
        if authorized_at is not None:
            pulumi.set(__self__, "authorized_at", authorized_at)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if authorizer_name is not None:
            pulumi.set(__self__, "authorizer_name", authorizer_name)
        if authorizer_type is not None:
            pulumi.set(__self__, "authorizer_type", authorizer_type)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if granted_at is not None:
            pulumi.set(__self__, "granted_at", granted_at)
        if grantee_id is not None:
            pulumi.set(__self__, "grantee_id", grantee_id)
        if grantee_type is not None:
            pulumi.set(__self__, "grantee_type", grantee_type)
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if kube_role_binding_name is not None:
            pulumi.set(__self__, "kube_role_binding_name", kube_role_binding_name)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if revoked_at is not None:
            pulumi.set(__self__, "revoked_at", revoked_at)
        if role_domain is not None:
            pulumi.set(__self__, "role_domain", role_domain)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authorizedAt")
    def authorized_at(self) -> Optional[pulumi.Input[str]]:
        """
        The authorized time of the RBAC Permission.
        """
        return pulumi.get(self, "authorized_at")

    @authorized_at.setter
    def authorized_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorized_at", value)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the Authorizer.
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authorizer_id", value)

    @property
    @pulumi.getter(name="authorizerName")
    def authorizer_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Authorizer.
        """
        return pulumi.get(self, "authorizer_name")

    @authorizer_name.setter
    def authorizer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorizer_name", value)

    @property
    @pulumi.getter(name="authorizerType")
    def authorizer_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the Authorizer.
        """
        return pulumi.get(self, "authorizer_type")

    @authorizer_type.setter
    def authorizer_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorizer_type", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster ID that needs to be authorized to IAM users or roles.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="grantedAt")
    def granted_at(self) -> Optional[pulumi.Input[str]]:
        """
        The granted time of the RBAC Permission.
        """
        return pulumi.get(self, "granted_at")

    @granted_at.setter
    def granted_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "granted_at", value)

    @property
    @pulumi.getter(name="granteeId")
    def grantee_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the grantee.
        """
        return pulumi.get(self, "grantee_id")

    @grantee_id.setter
    def grantee_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "grantee_id", value)

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the grantee. Valid values: `User`.
        """
        return pulumi.get(self, "grantee_type")

    @grantee_type.setter
    def grantee_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grantee_type", value)

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the RBAC role is a custom role. Default is false.
        """
        return pulumi.get(self, "is_custom_role")

    @is_custom_role.setter
    def is_custom_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_custom_role", value)

    @property
    @pulumi.getter(name="kubeRoleBindingName")
    def kube_role_binding_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Kube Role Binding.
        """
        return pulumi.get(self, "kube_role_binding_name")

    @kube_role_binding_name.setter
    def kube_role_binding_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_role_binding_name", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        The message of the RBAC Permission.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace that needs to be authorized to IAM users or roles.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="revokedAt")
    def revoked_at(self) -> Optional[pulumi.Input[str]]:
        """
        The revoked time of the RBAC Permission.
        """
        return pulumi.get(self, "revoked_at")

    @revoked_at.setter
    def revoked_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_at", value)

    @property
    @pulumi.getter(name="roleDomain")
    def role_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `all_clusters`. 
        When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "role_domain")

    @role_domain.setter
    def role_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_domain", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the RBAC Permission.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class Permission(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 grantee_id: Optional[pulumi.Input[int]] = None,
                 grantee_type: Optional[pulumi.Input[str]] = None,
                 is_custom_role: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 role_domain: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage vke permission
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        # create vpc
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        # create subnet
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        # create security group
        foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
            security_group_name="acc-test-security-group",
            vpc_id=foo_vpc.id)
        # create vke cluster
        foo_cluster = volcengine.vke.Cluster("fooCluster",
            description="created by terraform",
            project_name="default",
            delete_protection_enabled=False,
            cluster_config=volcengine.vke.ClusterClusterConfigArgs(
                subnet_ids=[foo_subnet.id],
                api_server_public_access_enabled=True,
                api_server_public_access_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigArgs(
                    public_access_network_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs(
                        billing_type="PostPaidByBandwidth",
                        bandwidth=1,
                    ),
                ),
                resource_public_access_default_enabled=True,
            ),
            pods_config=volcengine.vke.ClusterPodsConfigArgs(
                pod_network_mode="VpcCniShared",
                vpc_cni_config=volcengine.vke.ClusterPodsConfigVpcCniConfigArgs(
                    subnet_ids=[foo_subnet.id],
                ),
            ),
            services_config=volcengine.vke.ClusterServicesConfigArgs(
                service_cidrsv4s=["172.30.0.0/18"],
            ),
            tags=[volcengine.vke.ClusterTagArgs(
                key="tf-k1",
                value="tf-v1",
            )])
        foo_permission = volcengine.vke.Permission("fooPermission",
            role_name="vke:visitor",
            grantee_id=385500000,
            grantee_type="User",
            role_domain="cluster",
            cluster_id=foo_cluster.id)
        ```

        ## Import

        VkePermission can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vke/permission:Permission default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The cluster ID that needs to be authorized to IAM users or roles.
        :param pulumi.Input[int] grantee_id: The ID of the grantee.
        :param pulumi.Input[str] grantee_type: The type of the grantee. Valid values: `User`.
        :param pulumi.Input[bool] is_custom_role: Whether the RBAC role is a custom role. Default is false.
        :param pulumi.Input[str] namespace: The namespace that needs to be authorized to IAM users or roles.
        :param pulumi.Input[str] role_domain: The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `all_clusters`. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] role_name: The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PermissionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vke permission
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        # create vpc
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        # create subnet
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        # create security group
        foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
            security_group_name="acc-test-security-group",
            vpc_id=foo_vpc.id)
        # create vke cluster
        foo_cluster = volcengine.vke.Cluster("fooCluster",
            description="created by terraform",
            project_name="default",
            delete_protection_enabled=False,
            cluster_config=volcengine.vke.ClusterClusterConfigArgs(
                subnet_ids=[foo_subnet.id],
                api_server_public_access_enabled=True,
                api_server_public_access_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigArgs(
                    public_access_network_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs(
                        billing_type="PostPaidByBandwidth",
                        bandwidth=1,
                    ),
                ),
                resource_public_access_default_enabled=True,
            ),
            pods_config=volcengine.vke.ClusterPodsConfigArgs(
                pod_network_mode="VpcCniShared",
                vpc_cni_config=volcengine.vke.ClusterPodsConfigVpcCniConfigArgs(
                    subnet_ids=[foo_subnet.id],
                ),
            ),
            services_config=volcengine.vke.ClusterServicesConfigArgs(
                service_cidrsv4s=["172.30.0.0/18"],
            ),
            tags=[volcengine.vke.ClusterTagArgs(
                key="tf-k1",
                value="tf-v1",
            )])
        foo_permission = volcengine.vke.Permission("fooPermission",
            role_name="vke:visitor",
            grantee_id=385500000,
            grantee_type="User",
            role_domain="cluster",
            cluster_id=foo_cluster.id)
        ```

        ## Import

        VkePermission can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vke/permission:Permission default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param PermissionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PermissionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 grantee_id: Optional[pulumi.Input[int]] = None,
                 grantee_type: Optional[pulumi.Input[str]] = None,
                 is_custom_role: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 role_domain: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PermissionArgs.__new__(PermissionArgs)

            __props__.__dict__["cluster_id"] = cluster_id
            if grantee_id is None and not opts.urn:
                raise TypeError("Missing required property 'grantee_id'")
            __props__.__dict__["grantee_id"] = grantee_id
            if grantee_type is None and not opts.urn:
                raise TypeError("Missing required property 'grantee_type'")
            __props__.__dict__["grantee_type"] = grantee_type
            __props__.__dict__["is_custom_role"] = is_custom_role
            __props__.__dict__["namespace"] = namespace
            if role_domain is None and not opts.urn:
                raise TypeError("Missing required property 'role_domain'")
            __props__.__dict__["role_domain"] = role_domain
            if role_name is None and not opts.urn:
                raise TypeError("Missing required property 'role_name'")
            __props__.__dict__["role_name"] = role_name
            __props__.__dict__["authorized_at"] = None
            __props__.__dict__["authorizer_id"] = None
            __props__.__dict__["authorizer_name"] = None
            __props__.__dict__["authorizer_type"] = None
            __props__.__dict__["granted_at"] = None
            __props__.__dict__["kube_role_binding_name"] = None
            __props__.__dict__["message"] = None
            __props__.__dict__["revoked_at"] = None
            __props__.__dict__["status"] = None
        super(Permission, __self__).__init__(
            'volcengine:vke/permission:Permission',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authorized_at: Optional[pulumi.Input[str]] = None,
            authorizer_id: Optional[pulumi.Input[int]] = None,
            authorizer_name: Optional[pulumi.Input[str]] = None,
            authorizer_type: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            granted_at: Optional[pulumi.Input[str]] = None,
            grantee_id: Optional[pulumi.Input[int]] = None,
            grantee_type: Optional[pulumi.Input[str]] = None,
            is_custom_role: Optional[pulumi.Input[bool]] = None,
            kube_role_binding_name: Optional[pulumi.Input[str]] = None,
            message: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            revoked_at: Optional[pulumi.Input[str]] = None,
            role_domain: Optional[pulumi.Input[str]] = None,
            role_name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'Permission':
        """
        Get an existing Permission resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authorized_at: The authorized time of the RBAC Permission.
        :param pulumi.Input[int] authorizer_id: The ID of the Authorizer.
        :param pulumi.Input[str] authorizer_name: The name of the Authorizer.
        :param pulumi.Input[str] authorizer_type: The type of the Authorizer.
        :param pulumi.Input[str] cluster_id: The cluster ID that needs to be authorized to IAM users or roles.
        :param pulumi.Input[str] granted_at: The granted time of the RBAC Permission.
        :param pulumi.Input[int] grantee_id: The ID of the grantee.
        :param pulumi.Input[str] grantee_type: The type of the grantee. Valid values: `User`.
        :param pulumi.Input[bool] is_custom_role: Whether the RBAC role is a custom role. Default is false.
        :param pulumi.Input[str] kube_role_binding_name: The name of the Kube Role Binding.
        :param pulumi.Input[str] message: The message of the RBAC Permission.
        :param pulumi.Input[str] namespace: The namespace that needs to be authorized to IAM users or roles.
        :param pulumi.Input[str] revoked_at: The revoked time of the RBAC Permission.
        :param pulumi.Input[str] role_domain: The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `all_clusters`. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] role_name: The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
        :param pulumi.Input[str] status: The status of the RBAC Permission.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PermissionState.__new__(_PermissionState)

        __props__.__dict__["authorized_at"] = authorized_at
        __props__.__dict__["authorizer_id"] = authorizer_id
        __props__.__dict__["authorizer_name"] = authorizer_name
        __props__.__dict__["authorizer_type"] = authorizer_type
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["granted_at"] = granted_at
        __props__.__dict__["grantee_id"] = grantee_id
        __props__.__dict__["grantee_type"] = grantee_type
        __props__.__dict__["is_custom_role"] = is_custom_role
        __props__.__dict__["kube_role_binding_name"] = kube_role_binding_name
        __props__.__dict__["message"] = message
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["revoked_at"] = revoked_at
        __props__.__dict__["role_domain"] = role_domain
        __props__.__dict__["role_name"] = role_name
        __props__.__dict__["status"] = status
        return Permission(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authorizedAt")
    def authorized_at(self) -> pulumi.Output[str]:
        """
        The authorized time of the RBAC Permission.
        """
        return pulumi.get(self, "authorized_at")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> pulumi.Output[int]:
        """
        The ID of the Authorizer.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="authorizerName")
    def authorizer_name(self) -> pulumi.Output[str]:
        """
        The name of the Authorizer.
        """
        return pulumi.get(self, "authorizer_name")

    @property
    @pulumi.getter(name="authorizerType")
    def authorizer_type(self) -> pulumi.Output[str]:
        """
        The type of the Authorizer.
        """
        return pulumi.get(self, "authorizer_type")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The cluster ID that needs to be authorized to IAM users or roles.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="grantedAt")
    def granted_at(self) -> pulumi.Output[str]:
        """
        The granted time of the RBAC Permission.
        """
        return pulumi.get(self, "granted_at")

    @property
    @pulumi.getter(name="granteeId")
    def grantee_id(self) -> pulumi.Output[int]:
        """
        The ID of the grantee.
        """
        return pulumi.get(self, "grantee_id")

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> pulumi.Output[str]:
        """
        The type of the grantee. Valid values: `User`.
        """
        return pulumi.get(self, "grantee_type")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> pulumi.Output[bool]:
        """
        Whether the RBAC role is a custom role. Default is false.
        """
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter(name="kubeRoleBindingName")
    def kube_role_binding_name(self) -> pulumi.Output[str]:
        """
        The name of the Kube Role Binding.
        """
        return pulumi.get(self, "kube_role_binding_name")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        """
        The message of the RBAC Permission.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        The namespace that needs to be authorized to IAM users or roles.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="revokedAt")
    def revoked_at(self) -> pulumi.Output[str]:
        """
        The revoked time of the RBAC Permission.
        """
        return pulumi.get(self, "revoked_at")

    @property
    @pulumi.getter(name="roleDomain")
    def role_domain(self) -> pulumi.Output[str]:
        """
        The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `all_clusters`. 
        When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "role_domain")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Output[str]:
        """
        The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the RBAC Permission.
        """
        return pulumi.get(self, "status")

