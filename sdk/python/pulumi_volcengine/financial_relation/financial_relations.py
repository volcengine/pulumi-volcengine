# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FinancialRelationsResult',
    'AwaitableFinancialRelationsResult',
    'financial_relations',
    'financial_relations_output',
]

@pulumi.output_type
class FinancialRelationsResult:
    """
    A collection of values returned by FinancialRelations.
    """
    def __init__(__self__, account_ids=None, financial_relations=None, id=None, output_file=None, relations=None, statuses=None, total_count=None):
        if account_ids and not isinstance(account_ids, list):
            raise TypeError("Expected argument 'account_ids' to be a list")
        pulumi.set(__self__, "account_ids", account_ids)
        if financial_relations and not isinstance(financial_relations, list):
            raise TypeError("Expected argument 'financial_relations' to be a list")
        pulumi.set(__self__, "financial_relations", financial_relations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if relations and not isinstance(relations, list):
            raise TypeError("Expected argument 'relations' to be a list")
        pulumi.set(__self__, "relations", relations)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="financialRelations")
    def financial_relations(self) -> Sequence['outputs.FinancialRelationsFinancialRelationResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "financial_relations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def relations(self) -> Optional[Sequence[str]]:
        """
        The relation of the financial.
        """
        return pulumi.get(self, "relations")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        """
        The status of the financial relation.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableFinancialRelationsResult(FinancialRelationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return FinancialRelationsResult(
            account_ids=self.account_ids,
            financial_relations=self.financial_relations,
            id=self.id,
            output_file=self.output_file,
            relations=self.relations,
            statuses=self.statuses,
            total_count=self.total_count)


def financial_relations(account_ids: Optional[Sequence[str]] = None,
                        output_file: Optional[str] = None,
                        relations: Optional[Sequence[str]] = None,
                        statuses: Optional[Sequence[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableFinancialRelationsResult:
    """
    Use this data source to query detailed information of financial relations
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.financial_relation.financial_relations(account_ids=["210026****"],
        relations=["1"],
        statuses=["200"])
    ```


    :param Sequence[str] account_ids: A list of sub account IDs.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] relations: A list of relation. Valid values: `1`, `4`.
    :param Sequence[str] statuses: A list of status. Valid values: `100`, `200`, `250`, `300`, `400`, `500`.
    """
    __args__ = dict()
    __args__['accountIds'] = account_ids
    __args__['outputFile'] = output_file
    __args__['relations'] = relations
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:financial_relation/financialRelations:FinancialRelations', __args__, opts=opts, typ=FinancialRelationsResult).value

    return AwaitableFinancialRelationsResult(
        account_ids=pulumi.get(__ret__, 'account_ids'),
        financial_relations=pulumi.get(__ret__, 'financial_relations'),
        id=pulumi.get(__ret__, 'id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        relations=pulumi.get(__ret__, 'relations'),
        statuses=pulumi.get(__ret__, 'statuses'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(financial_relations)
def financial_relations_output(account_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               relations: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[FinancialRelationsResult]:
    """
    Use this data source to query detailed information of financial relations
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.financial_relation.financial_relations(account_ids=["210026****"],
        relations=["1"],
        statuses=["200"])
    ```


    :param Sequence[str] account_ids: A list of sub account IDs.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] relations: A list of relation. Valid values: `1`, `4`.
    :param Sequence[str] statuses: A list of status. Valid values: `100`, `200`, `250`, `300`, `400`, `500`.
    """
    ...
