# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccountPrivilegeDbPrivilegeArgs',
    'InstanceConnectionInfoArgs',
    'ParameterTemplateTemplateParamArgs',
]

@pulumi.input_type
class AccountPrivilegeDbPrivilegeArgs:
    def __init__(__self__, *,
                 account_privilege: pulumi.Input[str],
                 db_name: pulumi.Input[str],
                 account_privilege_str: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] account_privilege: The privilege type of the account.
        :param pulumi.Input[str] db_name: The name of database.
        :param pulumi.Input[str] account_privilege_str: The privilege string of the account.
        """
        pulumi.set(__self__, "account_privilege", account_privilege)
        pulumi.set(__self__, "db_name", db_name)
        if account_privilege_str is not None:
            pulumi.set(__self__, "account_privilege_str", account_privilege_str)

    @property
    @pulumi.getter(name="accountPrivilege")
    def account_privilege(self) -> pulumi.Input[str]:
        """
        The privilege type of the account.
        """
        return pulumi.get(self, "account_privilege")

    @account_privilege.setter
    def account_privilege(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_privilege", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        """
        The name of database.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="accountPrivilegeStr")
    def account_privilege_str(self) -> Optional[pulumi.Input[str]]:
        """
        The privilege string of the account.
        """
        return pulumi.get(self, "account_privilege_str")

    @account_privilege_str.setter
    def account_privilege_str(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_privilege_str", value)


@pulumi.input_type
class InstanceConnectionInfoArgs:
    def __init__(__self__, *,
                 enable_read_only: Optional[pulumi.Input[str]] = None,
                 enable_read_write_splitting: Optional[pulumi.Input[str]] = None,
                 internal_domain: Optional[pulumi.Input[str]] = None,
                 internal_port: Optional[pulumi.Input[str]] = None,
                 public_domain: Optional[pulumi.Input[str]] = None,
                 public_port: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] enable_read_only: Whether global read-only is enabled.
        :param pulumi.Input[str] enable_read_write_splitting: Whether read-write separation is enabled.
        :param pulumi.Input[str] internal_domain: The internal domain of the RDS instance.
        :param pulumi.Input[str] internal_port: The interval port of the RDS instance.
        :param pulumi.Input[str] public_domain: The public domain of the RDS instance.
        :param pulumi.Input[str] public_port: The public port of the RDS instance.
        """
        if enable_read_only is not None:
            pulumi.set(__self__, "enable_read_only", enable_read_only)
        if enable_read_write_splitting is not None:
            pulumi.set(__self__, "enable_read_write_splitting", enable_read_write_splitting)
        if internal_domain is not None:
            pulumi.set(__self__, "internal_domain", internal_domain)
        if internal_port is not None:
            pulumi.set(__self__, "internal_port", internal_port)
        if public_domain is not None:
            pulumi.set(__self__, "public_domain", public_domain)
        if public_port is not None:
            pulumi.set(__self__, "public_port", public_port)

    @property
    @pulumi.getter(name="enableReadOnly")
    def enable_read_only(self) -> Optional[pulumi.Input[str]]:
        """
        Whether global read-only is enabled.
        """
        return pulumi.get(self, "enable_read_only")

    @enable_read_only.setter
    def enable_read_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_read_only", value)

    @property
    @pulumi.getter(name="enableReadWriteSplitting")
    def enable_read_write_splitting(self) -> Optional[pulumi.Input[str]]:
        """
        Whether read-write separation is enabled.
        """
        return pulumi.get(self, "enable_read_write_splitting")

    @enable_read_write_splitting.setter
    def enable_read_write_splitting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_read_write_splitting", value)

    @property
    @pulumi.getter(name="internalDomain")
    def internal_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The internal domain of the RDS instance.
        """
        return pulumi.get(self, "internal_domain")

    @internal_domain.setter
    def internal_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_domain", value)

    @property
    @pulumi.getter(name="internalPort")
    def internal_port(self) -> Optional[pulumi.Input[str]]:
        """
        The interval port of the RDS instance.
        """
        return pulumi.get(self, "internal_port")

    @internal_port.setter
    def internal_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_port", value)

    @property
    @pulumi.getter(name="publicDomain")
    def public_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The public domain of the RDS instance.
        """
        return pulumi.get(self, "public_domain")

    @public_domain.setter
    def public_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_domain", value)

    @property
    @pulumi.getter(name="publicPort")
    def public_port(self) -> Optional[pulumi.Input[str]]:
        """
        The public port of the RDS instance.
        """
        return pulumi.get(self, "public_port")

    @public_port.setter
    def public_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_port", value)


@pulumi.input_type
class ParameterTemplateTemplateParamArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 running_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[str] running_value: Parameter running value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if running_value is not None:
            pulumi.set(__self__, "running_value", running_value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="runningValue")
    def running_value(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter running value.
        """
        return pulumi.get(self, "running_value")

    @running_value.setter
    def running_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "running_value", value)


