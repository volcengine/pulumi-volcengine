# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EndpointPublicAddressArgs', 'EndpointPublicAddress']

@pulumi.input_type
class EndpointPublicAddressArgs:
    def __init__(__self__, *,
                 eip_id: pulumi.Input[str],
                 endpoint_id: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 domain: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EndpointPublicAddress resource.
        :param pulumi.Input[str] eip_id: The id of the eip.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint.
        :param pulumi.Input[str] instance_id: The id of mysql instance.
        :param pulumi.Input[str] domain: The domain.
        """
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "instance_id", instance_id)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Input[str]:
        """
        The id of the eip.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Input[str]:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of mysql instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class _EndpointPublicAddressState:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EndpointPublicAddress resources.
        :param pulumi.Input[str] domain: The domain.
        :param pulumi.Input[str] eip_id: The id of the eip.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint.
        :param pulumi.Input[str] instance_id: The id of mysql instance.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the eip.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of mysql instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


class EndpointPublicAddress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage rds mysql endpoint public address
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.rds_mysql.EndpointPublicAddress("foo",
            domain="mysql-38c3d4f05f6e-test-01b0-public.rds.volces.com",
            eip_id="eip-rrq618fo9c00v0x58s4r6ky",
            endpoint_id="mysql-38c3d4f05f6e-custom-01b0",
            instance_id="mysql-38c3d4f05f6e")
        ```

        ## Import

        RdsMysqlEndpointPublicAddress can be imported using the instance id, endpoint id and eip id, e.g.

        ```sh
        $ pulumi import volcengine:rds_mysql/endpointPublicAddress:EndpointPublicAddress default instanceId:endpointId:eipId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: The domain.
        :param pulumi.Input[str] eip_id: The id of the eip.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint.
        :param pulumi.Input[str] instance_id: The id of mysql instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EndpointPublicAddressArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rds mysql endpoint public address
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.rds_mysql.EndpointPublicAddress("foo",
            domain="mysql-38c3d4f05f6e-test-01b0-public.rds.volces.com",
            eip_id="eip-rrq618fo9c00v0x58s4r6ky",
            endpoint_id="mysql-38c3d4f05f6e-custom-01b0",
            instance_id="mysql-38c3d4f05f6e")
        ```

        ## Import

        RdsMysqlEndpointPublicAddress can be imported using the instance id, endpoint id and eip id, e.g.

        ```sh
        $ pulumi import volcengine:rds_mysql/endpointPublicAddress:EndpointPublicAddress default instanceId:endpointId:eipId
        ```

        :param str resource_name: The name of the resource.
        :param EndpointPublicAddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndpointPublicAddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndpointPublicAddressArgs.__new__(EndpointPublicAddressArgs)

            __props__.__dict__["domain"] = domain
            if eip_id is None and not opts.urn:
                raise TypeError("Missing required property 'eip_id'")
            __props__.__dict__["eip_id"] = eip_id
            if endpoint_id is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint_id'")
            __props__.__dict__["endpoint_id"] = endpoint_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
        super(EndpointPublicAddress, __self__).__init__(
            'volcengine:rds_mysql/endpointPublicAddress:EndpointPublicAddress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain: Optional[pulumi.Input[str]] = None,
            eip_id: Optional[pulumi.Input[str]] = None,
            endpoint_id: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None) -> 'EndpointPublicAddress':
        """
        Get an existing EndpointPublicAddress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: The domain.
        :param pulumi.Input[str] eip_id: The id of the eip.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint.
        :param pulumi.Input[str] instance_id: The id of mysql instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EndpointPublicAddressState.__new__(_EndpointPublicAddressState)

        __props__.__dict__["domain"] = domain
        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["endpoint_id"] = endpoint_id
        __props__.__dict__["instance_id"] = instance_id
        return EndpointPublicAddress(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        The domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[str]:
        """
        The id of the eip.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Output[str]:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of mysql instance.
        """
        return pulumi.get(self, "instance_id")

