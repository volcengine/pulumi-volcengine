# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BackupPolicyArgs', 'BackupPolicy']

@pulumi.input_type
class BackupPolicyArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 binlog_backup_all_retention: Optional[pulumi.Input[bool]] = None,
                 binlog_backup_enabled: Optional[pulumi.Input[bool]] = None,
                 binlog_backup_encryption_enabled: Optional[pulumi.Input[bool]] = None,
                 binlog_file_counts_enable: Optional[pulumi.Input[bool]] = None,
                 binlog_limit_count: Optional[pulumi.Input[int]] = None,
                 binlog_local_retention_hour: Optional[pulumi.Input[int]] = None,
                 binlog_space_limit_enable: Optional[pulumi.Input[bool]] = None,
                 binlog_storage_percentage: Optional[pulumi.Input[int]] = None,
                 data_backup_all_retention: Optional[pulumi.Input[bool]] = None,
                 data_backup_encryption_enabled: Optional[pulumi.Input[bool]] = None,
                 data_backup_retention_day: Optional[pulumi.Input[int]] = None,
                 data_full_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 data_full_backup_start_utc_hour: Optional[pulumi.Input[int]] = None,
                 data_full_backup_time: Optional[pulumi.Input[str]] = None,
                 data_incr_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 data_keep_days_after_released: Optional[pulumi.Input[int]] = None,
                 data_keep_policy_after_released: Optional[pulumi.Input[str]] = None,
                 hourly_incr_backup_enable: Optional[pulumi.Input[bool]] = None,
                 incr_backup_hour_period: Optional[pulumi.Input[int]] = None,
                 lock_ddl_time: Optional[pulumi.Input[int]] = None,
                 log_backup_retention_day: Optional[pulumi.Input[int]] = None,
                 retention_policy_synced: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a BackupPolicy resource.
        :param pulumi.Input[str] instance_id: The ID of the RDS instance.
        :param pulumi.Input[bool] binlog_backup_all_retention: Whether to retain all log backups before releasing an instance. Values:
               true: Yes.
               false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
        :param pulumi.Input[bool] binlog_backup_enabled: Whether to enable log backup function. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] binlog_backup_encryption_enabled: Is encryption enabled for log backups? Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] binlog_file_counts_enable: Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] binlog_limit_count: Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] binlog_local_retention_hour: Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
        :param pulumi.Input[bool] binlog_space_limit_enable: Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
        :param pulumi.Input[int] binlog_storage_percentage: Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[bool] data_backup_all_retention: Whether to retain all data backups before releasing the instance. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] data_backup_encryption_enabled: Whether to enable encryption for data backup. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[int] data_backup_retention_day: Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_full_backup_periods: Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] data_full_backup_start_utc_hour: The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
        :param pulumi.Input[str] data_full_backup_time: Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_incr_backup_periods: Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] data_keep_days_after_released: Backup retention days when an instance is released. Currently, only a value of 7 is supported.
        :param pulumi.Input[str] data_keep_policy_after_released: Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
        :param pulumi.Input[bool] hourly_incr_backup_enable: Whether to enable high-frequency backup function. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[int] incr_backup_hour_period: Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
        :param pulumi.Input[int] lock_ddl_time: Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
        :param pulumi.Input[int] log_backup_retention_day: Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[bool] retention_policy_synced: Is the retention policy for log backups the same as that for data backups?
               Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if binlog_backup_all_retention is not None:
            pulumi.set(__self__, "binlog_backup_all_retention", binlog_backup_all_retention)
        if binlog_backup_enabled is not None:
            pulumi.set(__self__, "binlog_backup_enabled", binlog_backup_enabled)
        if binlog_backup_encryption_enabled is not None:
            pulumi.set(__self__, "binlog_backup_encryption_enabled", binlog_backup_encryption_enabled)
        if binlog_file_counts_enable is not None:
            pulumi.set(__self__, "binlog_file_counts_enable", binlog_file_counts_enable)
        if binlog_limit_count is not None:
            pulumi.set(__self__, "binlog_limit_count", binlog_limit_count)
        if binlog_local_retention_hour is not None:
            pulumi.set(__self__, "binlog_local_retention_hour", binlog_local_retention_hour)
        if binlog_space_limit_enable is not None:
            pulumi.set(__self__, "binlog_space_limit_enable", binlog_space_limit_enable)
        if binlog_storage_percentage is not None:
            pulumi.set(__self__, "binlog_storage_percentage", binlog_storage_percentage)
        if data_backup_all_retention is not None:
            pulumi.set(__self__, "data_backup_all_retention", data_backup_all_retention)
        if data_backup_encryption_enabled is not None:
            pulumi.set(__self__, "data_backup_encryption_enabled", data_backup_encryption_enabled)
        if data_backup_retention_day is not None:
            pulumi.set(__self__, "data_backup_retention_day", data_backup_retention_day)
        if data_full_backup_periods is not None:
            pulumi.set(__self__, "data_full_backup_periods", data_full_backup_periods)
        if data_full_backup_start_utc_hour is not None:
            pulumi.set(__self__, "data_full_backup_start_utc_hour", data_full_backup_start_utc_hour)
        if data_full_backup_time is not None:
            pulumi.set(__self__, "data_full_backup_time", data_full_backup_time)
        if data_incr_backup_periods is not None:
            pulumi.set(__self__, "data_incr_backup_periods", data_incr_backup_periods)
        if data_keep_days_after_released is not None:
            pulumi.set(__self__, "data_keep_days_after_released", data_keep_days_after_released)
        if data_keep_policy_after_released is not None:
            pulumi.set(__self__, "data_keep_policy_after_released", data_keep_policy_after_released)
        if hourly_incr_backup_enable is not None:
            pulumi.set(__self__, "hourly_incr_backup_enable", hourly_incr_backup_enable)
        if incr_backup_hour_period is not None:
            pulumi.set(__self__, "incr_backup_hour_period", incr_backup_hour_period)
        if lock_ddl_time is not None:
            pulumi.set(__self__, "lock_ddl_time", lock_ddl_time)
        if log_backup_retention_day is not None:
            pulumi.set(__self__, "log_backup_retention_day", log_backup_retention_day)
        if retention_policy_synced is not None:
            pulumi.set(__self__, "retention_policy_synced", retention_policy_synced)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The ID of the RDS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="binlogBackupAllRetention")
    def binlog_backup_all_retention(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to retain all log backups before releasing an instance. Values:
        true: Yes.
        false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
        """
        return pulumi.get(self, "binlog_backup_all_retention")

    @binlog_backup_all_retention.setter
    def binlog_backup_all_retention(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "binlog_backup_all_retention", value)

    @property
    @pulumi.getter(name="binlogBackupEnabled")
    def binlog_backup_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable log backup function. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "binlog_backup_enabled")

    @binlog_backup_enabled.setter
    def binlog_backup_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "binlog_backup_enabled", value)

    @property
    @pulumi.getter(name="binlogBackupEncryptionEnabled")
    def binlog_backup_encryption_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is encryption enabled for log backups? Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "binlog_backup_encryption_enabled")

    @binlog_backup_encryption_enabled.setter
    def binlog_backup_encryption_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "binlog_backup_encryption_enabled", value)

    @property
    @pulumi.getter(name="binlogFileCountsEnable")
    def binlog_file_counts_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "binlog_file_counts_enable")

    @binlog_file_counts_enable.setter
    def binlog_file_counts_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "binlog_file_counts_enable", value)

    @property
    @pulumi.getter(name="binlogLimitCount")
    def binlog_limit_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "binlog_limit_count")

    @binlog_limit_count.setter
    def binlog_limit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "binlog_limit_count", value)

    @property
    @pulumi.getter(name="binlogLocalRetentionHour")
    def binlog_local_retention_hour(self) -> Optional[pulumi.Input[int]]:
        """
        Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
        """
        return pulumi.get(self, "binlog_local_retention_hour")

    @binlog_local_retention_hour.setter
    def binlog_local_retention_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "binlog_local_retention_hour", value)

    @property
    @pulumi.getter(name="binlogSpaceLimitEnable")
    def binlog_space_limit_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
        """
        return pulumi.get(self, "binlog_space_limit_enable")

    @binlog_space_limit_enable.setter
    def binlog_space_limit_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "binlog_space_limit_enable", value)

    @property
    @pulumi.getter(name="binlogStoragePercentage")
    def binlog_storage_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "binlog_storage_percentage")

    @binlog_storage_percentage.setter
    def binlog_storage_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "binlog_storage_percentage", value)

    @property
    @pulumi.getter(name="dataBackupAllRetention")
    def data_backup_all_retention(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to retain all data backups before releasing the instance. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "data_backup_all_retention")

    @data_backup_all_retention.setter
    def data_backup_all_retention(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "data_backup_all_retention", value)

    @property
    @pulumi.getter(name="dataBackupEncryptionEnabled")
    def data_backup_encryption_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable encryption for data backup. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "data_backup_encryption_enabled")

    @data_backup_encryption_enabled.setter
    def data_backup_encryption_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "data_backup_encryption_enabled", value)

    @property
    @pulumi.getter(name="dataBackupRetentionDay")
    def data_backup_retention_day(self) -> Optional[pulumi.Input[int]]:
        """
        Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
        """
        return pulumi.get(self, "data_backup_retention_day")

    @data_backup_retention_day.setter
    def data_backup_retention_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_backup_retention_day", value)

    @property
    @pulumi.getter(name="dataFullBackupPeriods")
    def data_full_backup_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "data_full_backup_periods")

    @data_full_backup_periods.setter
    def data_full_backup_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "data_full_backup_periods", value)

    @property
    @pulumi.getter(name="dataFullBackupStartUtcHour")
    def data_full_backup_start_utc_hour(self) -> Optional[pulumi.Input[int]]:
        """
        The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
        """
        return pulumi.get(self, "data_full_backup_start_utc_hour")

    @data_full_backup_start_utc_hour.setter
    def data_full_backup_start_utc_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_full_backup_start_utc_hour", value)

    @property
    @pulumi.getter(name="dataFullBackupTime")
    def data_full_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
        """
        return pulumi.get(self, "data_full_backup_time")

    @data_full_backup_time.setter
    def data_full_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_full_backup_time", value)

    @property
    @pulumi.getter(name="dataIncrBackupPeriods")
    def data_incr_backup_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "data_incr_backup_periods")

    @data_incr_backup_periods.setter
    def data_incr_backup_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "data_incr_backup_periods", value)

    @property
    @pulumi.getter(name="dataKeepDaysAfterReleased")
    def data_keep_days_after_released(self) -> Optional[pulumi.Input[int]]:
        """
        Backup retention days when an instance is released. Currently, only a value of 7 is supported.
        """
        return pulumi.get(self, "data_keep_days_after_released")

    @data_keep_days_after_released.setter
    def data_keep_days_after_released(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_keep_days_after_released", value)

    @property
    @pulumi.getter(name="dataKeepPolicyAfterReleased")
    def data_keep_policy_after_released(self) -> Optional[pulumi.Input[str]]:
        """
        Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
        """
        return pulumi.get(self, "data_keep_policy_after_released")

    @data_keep_policy_after_released.setter
    def data_keep_policy_after_released(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_keep_policy_after_released", value)

    @property
    @pulumi.getter(name="hourlyIncrBackupEnable")
    def hourly_incr_backup_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable high-frequency backup function. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "hourly_incr_backup_enable")

    @hourly_incr_backup_enable.setter
    def hourly_incr_backup_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hourly_incr_backup_enable", value)

    @property
    @pulumi.getter(name="incrBackupHourPeriod")
    def incr_backup_hour_period(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
        """
        return pulumi.get(self, "incr_backup_hour_period")

    @incr_backup_hour_period.setter
    def incr_backup_hour_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "incr_backup_hour_period", value)

    @property
    @pulumi.getter(name="lockDdlTime")
    def lock_ddl_time(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
        """
        return pulumi.get(self, "lock_ddl_time")

    @lock_ddl_time.setter
    def lock_ddl_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lock_ddl_time", value)

    @property
    @pulumi.getter(name="logBackupRetentionDay")
    def log_backup_retention_day(self) -> Optional[pulumi.Input[int]]:
        """
        Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "log_backup_retention_day")

    @log_backup_retention_day.setter
    def log_backup_retention_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_backup_retention_day", value)

    @property
    @pulumi.getter(name="retentionPolicySynced")
    def retention_policy_synced(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the retention policy for log backups the same as that for data backups?
        Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
        """
        return pulumi.get(self, "retention_policy_synced")

    @retention_policy_synced.setter
    def retention_policy_synced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retention_policy_synced", value)


@pulumi.input_type
class _BackupPolicyState:
    def __init__(__self__, *,
                 binlog_backup_all_retention: Optional[pulumi.Input[bool]] = None,
                 binlog_backup_enabled: Optional[pulumi.Input[bool]] = None,
                 binlog_backup_encryption_enabled: Optional[pulumi.Input[bool]] = None,
                 binlog_file_counts_enable: Optional[pulumi.Input[bool]] = None,
                 binlog_limit_count: Optional[pulumi.Input[int]] = None,
                 binlog_local_retention_hour: Optional[pulumi.Input[int]] = None,
                 binlog_space_limit_enable: Optional[pulumi.Input[bool]] = None,
                 binlog_storage_percentage: Optional[pulumi.Input[int]] = None,
                 data_backup_all_retention: Optional[pulumi.Input[bool]] = None,
                 data_backup_encryption_enabled: Optional[pulumi.Input[bool]] = None,
                 data_backup_retention_day: Optional[pulumi.Input[int]] = None,
                 data_full_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 data_full_backup_start_utc_hour: Optional[pulumi.Input[int]] = None,
                 data_full_backup_time: Optional[pulumi.Input[str]] = None,
                 data_incr_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 data_keep_days_after_released: Optional[pulumi.Input[int]] = None,
                 data_keep_policy_after_released: Optional[pulumi.Input[str]] = None,
                 hourly_incr_backup_enable: Optional[pulumi.Input[bool]] = None,
                 incr_backup_hour_period: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 lock_ddl_time: Optional[pulumi.Input[int]] = None,
                 log_backup_retention_day: Optional[pulumi.Input[int]] = None,
                 retention_policy_synced: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering BackupPolicy resources.
        :param pulumi.Input[bool] binlog_backup_all_retention: Whether to retain all log backups before releasing an instance. Values:
               true: Yes.
               false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
        :param pulumi.Input[bool] binlog_backup_enabled: Whether to enable log backup function. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] binlog_backup_encryption_enabled: Is encryption enabled for log backups? Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] binlog_file_counts_enable: Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] binlog_limit_count: Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] binlog_local_retention_hour: Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
        :param pulumi.Input[bool] binlog_space_limit_enable: Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
        :param pulumi.Input[int] binlog_storage_percentage: Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[bool] data_backup_all_retention: Whether to retain all data backups before releasing the instance. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] data_backup_encryption_enabled: Whether to enable encryption for data backup. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[int] data_backup_retention_day: Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_full_backup_periods: Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] data_full_backup_start_utc_hour: The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
        :param pulumi.Input[str] data_full_backup_time: Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_incr_backup_periods: Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] data_keep_days_after_released: Backup retention days when an instance is released. Currently, only a value of 7 is supported.
        :param pulumi.Input[str] data_keep_policy_after_released: Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
        :param pulumi.Input[bool] hourly_incr_backup_enable: Whether to enable high-frequency backup function. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[int] incr_backup_hour_period: Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
        :param pulumi.Input[str] instance_id: The ID of the RDS instance.
        :param pulumi.Input[int] lock_ddl_time: Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
        :param pulumi.Input[int] log_backup_retention_day: Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[bool] retention_policy_synced: Is the retention policy for log backups the same as that for data backups?
               Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
        """
        if binlog_backup_all_retention is not None:
            pulumi.set(__self__, "binlog_backup_all_retention", binlog_backup_all_retention)
        if binlog_backup_enabled is not None:
            pulumi.set(__self__, "binlog_backup_enabled", binlog_backup_enabled)
        if binlog_backup_encryption_enabled is not None:
            pulumi.set(__self__, "binlog_backup_encryption_enabled", binlog_backup_encryption_enabled)
        if binlog_file_counts_enable is not None:
            pulumi.set(__self__, "binlog_file_counts_enable", binlog_file_counts_enable)
        if binlog_limit_count is not None:
            pulumi.set(__self__, "binlog_limit_count", binlog_limit_count)
        if binlog_local_retention_hour is not None:
            pulumi.set(__self__, "binlog_local_retention_hour", binlog_local_retention_hour)
        if binlog_space_limit_enable is not None:
            pulumi.set(__self__, "binlog_space_limit_enable", binlog_space_limit_enable)
        if binlog_storage_percentage is not None:
            pulumi.set(__self__, "binlog_storage_percentage", binlog_storage_percentage)
        if data_backup_all_retention is not None:
            pulumi.set(__self__, "data_backup_all_retention", data_backup_all_retention)
        if data_backup_encryption_enabled is not None:
            pulumi.set(__self__, "data_backup_encryption_enabled", data_backup_encryption_enabled)
        if data_backup_retention_day is not None:
            pulumi.set(__self__, "data_backup_retention_day", data_backup_retention_day)
        if data_full_backup_periods is not None:
            pulumi.set(__self__, "data_full_backup_periods", data_full_backup_periods)
        if data_full_backup_start_utc_hour is not None:
            pulumi.set(__self__, "data_full_backup_start_utc_hour", data_full_backup_start_utc_hour)
        if data_full_backup_time is not None:
            pulumi.set(__self__, "data_full_backup_time", data_full_backup_time)
        if data_incr_backup_periods is not None:
            pulumi.set(__self__, "data_incr_backup_periods", data_incr_backup_periods)
        if data_keep_days_after_released is not None:
            pulumi.set(__self__, "data_keep_days_after_released", data_keep_days_after_released)
        if data_keep_policy_after_released is not None:
            pulumi.set(__self__, "data_keep_policy_after_released", data_keep_policy_after_released)
        if hourly_incr_backup_enable is not None:
            pulumi.set(__self__, "hourly_incr_backup_enable", hourly_incr_backup_enable)
        if incr_backup_hour_period is not None:
            pulumi.set(__self__, "incr_backup_hour_period", incr_backup_hour_period)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if lock_ddl_time is not None:
            pulumi.set(__self__, "lock_ddl_time", lock_ddl_time)
        if log_backup_retention_day is not None:
            pulumi.set(__self__, "log_backup_retention_day", log_backup_retention_day)
        if retention_policy_synced is not None:
            pulumi.set(__self__, "retention_policy_synced", retention_policy_synced)

    @property
    @pulumi.getter(name="binlogBackupAllRetention")
    def binlog_backup_all_retention(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to retain all log backups before releasing an instance. Values:
        true: Yes.
        false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
        """
        return pulumi.get(self, "binlog_backup_all_retention")

    @binlog_backup_all_retention.setter
    def binlog_backup_all_retention(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "binlog_backup_all_retention", value)

    @property
    @pulumi.getter(name="binlogBackupEnabled")
    def binlog_backup_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable log backup function. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "binlog_backup_enabled")

    @binlog_backup_enabled.setter
    def binlog_backup_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "binlog_backup_enabled", value)

    @property
    @pulumi.getter(name="binlogBackupEncryptionEnabled")
    def binlog_backup_encryption_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is encryption enabled for log backups? Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "binlog_backup_encryption_enabled")

    @binlog_backup_encryption_enabled.setter
    def binlog_backup_encryption_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "binlog_backup_encryption_enabled", value)

    @property
    @pulumi.getter(name="binlogFileCountsEnable")
    def binlog_file_counts_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "binlog_file_counts_enable")

    @binlog_file_counts_enable.setter
    def binlog_file_counts_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "binlog_file_counts_enable", value)

    @property
    @pulumi.getter(name="binlogLimitCount")
    def binlog_limit_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "binlog_limit_count")

    @binlog_limit_count.setter
    def binlog_limit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "binlog_limit_count", value)

    @property
    @pulumi.getter(name="binlogLocalRetentionHour")
    def binlog_local_retention_hour(self) -> Optional[pulumi.Input[int]]:
        """
        Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
        """
        return pulumi.get(self, "binlog_local_retention_hour")

    @binlog_local_retention_hour.setter
    def binlog_local_retention_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "binlog_local_retention_hour", value)

    @property
    @pulumi.getter(name="binlogSpaceLimitEnable")
    def binlog_space_limit_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
        """
        return pulumi.get(self, "binlog_space_limit_enable")

    @binlog_space_limit_enable.setter
    def binlog_space_limit_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "binlog_space_limit_enable", value)

    @property
    @pulumi.getter(name="binlogStoragePercentage")
    def binlog_storage_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "binlog_storage_percentage")

    @binlog_storage_percentage.setter
    def binlog_storage_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "binlog_storage_percentage", value)

    @property
    @pulumi.getter(name="dataBackupAllRetention")
    def data_backup_all_retention(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to retain all data backups before releasing the instance. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "data_backup_all_retention")

    @data_backup_all_retention.setter
    def data_backup_all_retention(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "data_backup_all_retention", value)

    @property
    @pulumi.getter(name="dataBackupEncryptionEnabled")
    def data_backup_encryption_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable encryption for data backup. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "data_backup_encryption_enabled")

    @data_backup_encryption_enabled.setter
    def data_backup_encryption_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "data_backup_encryption_enabled", value)

    @property
    @pulumi.getter(name="dataBackupRetentionDay")
    def data_backup_retention_day(self) -> Optional[pulumi.Input[int]]:
        """
        Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
        """
        return pulumi.get(self, "data_backup_retention_day")

    @data_backup_retention_day.setter
    def data_backup_retention_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_backup_retention_day", value)

    @property
    @pulumi.getter(name="dataFullBackupPeriods")
    def data_full_backup_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "data_full_backup_periods")

    @data_full_backup_periods.setter
    def data_full_backup_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "data_full_backup_periods", value)

    @property
    @pulumi.getter(name="dataFullBackupStartUtcHour")
    def data_full_backup_start_utc_hour(self) -> Optional[pulumi.Input[int]]:
        """
        The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
        """
        return pulumi.get(self, "data_full_backup_start_utc_hour")

    @data_full_backup_start_utc_hour.setter
    def data_full_backup_start_utc_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_full_backup_start_utc_hour", value)

    @property
    @pulumi.getter(name="dataFullBackupTime")
    def data_full_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
        """
        return pulumi.get(self, "data_full_backup_time")

    @data_full_backup_time.setter
    def data_full_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_full_backup_time", value)

    @property
    @pulumi.getter(name="dataIncrBackupPeriods")
    def data_incr_backup_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "data_incr_backup_periods")

    @data_incr_backup_periods.setter
    def data_incr_backup_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "data_incr_backup_periods", value)

    @property
    @pulumi.getter(name="dataKeepDaysAfterReleased")
    def data_keep_days_after_released(self) -> Optional[pulumi.Input[int]]:
        """
        Backup retention days when an instance is released. Currently, only a value of 7 is supported.
        """
        return pulumi.get(self, "data_keep_days_after_released")

    @data_keep_days_after_released.setter
    def data_keep_days_after_released(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_keep_days_after_released", value)

    @property
    @pulumi.getter(name="dataKeepPolicyAfterReleased")
    def data_keep_policy_after_released(self) -> Optional[pulumi.Input[str]]:
        """
        Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
        """
        return pulumi.get(self, "data_keep_policy_after_released")

    @data_keep_policy_after_released.setter
    def data_keep_policy_after_released(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_keep_policy_after_released", value)

    @property
    @pulumi.getter(name="hourlyIncrBackupEnable")
    def hourly_incr_backup_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable high-frequency backup function. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "hourly_incr_backup_enable")

    @hourly_incr_backup_enable.setter
    def hourly_incr_backup_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hourly_incr_backup_enable", value)

    @property
    @pulumi.getter(name="incrBackupHourPeriod")
    def incr_backup_hour_period(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
        """
        return pulumi.get(self, "incr_backup_hour_period")

    @incr_backup_hour_period.setter
    def incr_backup_hour_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "incr_backup_hour_period", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the RDS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="lockDdlTime")
    def lock_ddl_time(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
        """
        return pulumi.get(self, "lock_ddl_time")

    @lock_ddl_time.setter
    def lock_ddl_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lock_ddl_time", value)

    @property
    @pulumi.getter(name="logBackupRetentionDay")
    def log_backup_retention_day(self) -> Optional[pulumi.Input[int]]:
        """
        Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "log_backup_retention_day")

    @log_backup_retention_day.setter
    def log_backup_retention_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_backup_retention_day", value)

    @property
    @pulumi.getter(name="retentionPolicySynced")
    def retention_policy_synced(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the retention policy for log backups the same as that for data backups?
        Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
        """
        return pulumi.get(self, "retention_policy_synced")

    @retention_policy_synced.setter
    def retention_policy_synced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retention_policy_synced", value)


class BackupPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 binlog_backup_all_retention: Optional[pulumi.Input[bool]] = None,
                 binlog_backup_enabled: Optional[pulumi.Input[bool]] = None,
                 binlog_backup_encryption_enabled: Optional[pulumi.Input[bool]] = None,
                 binlog_file_counts_enable: Optional[pulumi.Input[bool]] = None,
                 binlog_limit_count: Optional[pulumi.Input[int]] = None,
                 binlog_local_retention_hour: Optional[pulumi.Input[int]] = None,
                 binlog_space_limit_enable: Optional[pulumi.Input[bool]] = None,
                 binlog_storage_percentage: Optional[pulumi.Input[int]] = None,
                 data_backup_all_retention: Optional[pulumi.Input[bool]] = None,
                 data_backup_encryption_enabled: Optional[pulumi.Input[bool]] = None,
                 data_backup_retention_day: Optional[pulumi.Input[int]] = None,
                 data_full_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 data_full_backup_start_utc_hour: Optional[pulumi.Input[int]] = None,
                 data_full_backup_time: Optional[pulumi.Input[str]] = None,
                 data_incr_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 data_keep_days_after_released: Optional[pulumi.Input[int]] = None,
                 data_keep_policy_after_released: Optional[pulumi.Input[str]] = None,
                 hourly_incr_backup_enable: Optional[pulumi.Input[bool]] = None,
                 incr_backup_hour_period: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 lock_ddl_time: Optional[pulumi.Input[int]] = None,
                 log_backup_retention_day: Optional[pulumi.Input[int]] = None,
                 retention_policy_synced: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to manage rds mysql backup policy
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.rds_mysql.BackupPolicy("foo",
            binlog_file_counts_enable=True,
            binlog_space_limit_enable=True,
            data_full_backup_periods=[
                "Monday",
                "Sunday",
            ],
            instance_id="mysql-c8c3f45c4b07",
            lock_ddl_time=80)
        ```

        ## Import

        RdsMysqlBackupPolicy can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:rds_mysql/backupPolicy:BackupPolicy default instanceId:backupPolicy
        ```
        Warning:The resource cannot be deleted, and the destroy operation will not perform any actions.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] binlog_backup_all_retention: Whether to retain all log backups before releasing an instance. Values:
               true: Yes.
               false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
        :param pulumi.Input[bool] binlog_backup_enabled: Whether to enable log backup function. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] binlog_backup_encryption_enabled: Is encryption enabled for log backups? Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] binlog_file_counts_enable: Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] binlog_limit_count: Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] binlog_local_retention_hour: Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
        :param pulumi.Input[bool] binlog_space_limit_enable: Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
        :param pulumi.Input[int] binlog_storage_percentage: Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[bool] data_backup_all_retention: Whether to retain all data backups before releasing the instance. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] data_backup_encryption_enabled: Whether to enable encryption for data backup. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[int] data_backup_retention_day: Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_full_backup_periods: Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] data_full_backup_start_utc_hour: The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
        :param pulumi.Input[str] data_full_backup_time: Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_incr_backup_periods: Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] data_keep_days_after_released: Backup retention days when an instance is released. Currently, only a value of 7 is supported.
        :param pulumi.Input[str] data_keep_policy_after_released: Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
        :param pulumi.Input[bool] hourly_incr_backup_enable: Whether to enable high-frequency backup function. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[int] incr_backup_hour_period: Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
        :param pulumi.Input[str] instance_id: The ID of the RDS instance.
        :param pulumi.Input[int] lock_ddl_time: Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
        :param pulumi.Input[int] log_backup_retention_day: Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[bool] retention_policy_synced: Is the retention policy for log backups the same as that for data backups?
               Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rds mysql backup policy
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.rds_mysql.BackupPolicy("foo",
            binlog_file_counts_enable=True,
            binlog_space_limit_enable=True,
            data_full_backup_periods=[
                "Monday",
                "Sunday",
            ],
            instance_id="mysql-c8c3f45c4b07",
            lock_ddl_time=80)
        ```

        ## Import

        RdsMysqlBackupPolicy can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:rds_mysql/backupPolicy:BackupPolicy default instanceId:backupPolicy
        ```
        Warning:The resource cannot be deleted, and the destroy operation will not perform any actions.

        :param str resource_name: The name of the resource.
        :param BackupPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 binlog_backup_all_retention: Optional[pulumi.Input[bool]] = None,
                 binlog_backup_enabled: Optional[pulumi.Input[bool]] = None,
                 binlog_backup_encryption_enabled: Optional[pulumi.Input[bool]] = None,
                 binlog_file_counts_enable: Optional[pulumi.Input[bool]] = None,
                 binlog_limit_count: Optional[pulumi.Input[int]] = None,
                 binlog_local_retention_hour: Optional[pulumi.Input[int]] = None,
                 binlog_space_limit_enable: Optional[pulumi.Input[bool]] = None,
                 binlog_storage_percentage: Optional[pulumi.Input[int]] = None,
                 data_backup_all_retention: Optional[pulumi.Input[bool]] = None,
                 data_backup_encryption_enabled: Optional[pulumi.Input[bool]] = None,
                 data_backup_retention_day: Optional[pulumi.Input[int]] = None,
                 data_full_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 data_full_backup_start_utc_hour: Optional[pulumi.Input[int]] = None,
                 data_full_backup_time: Optional[pulumi.Input[str]] = None,
                 data_incr_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 data_keep_days_after_released: Optional[pulumi.Input[int]] = None,
                 data_keep_policy_after_released: Optional[pulumi.Input[str]] = None,
                 hourly_incr_backup_enable: Optional[pulumi.Input[bool]] = None,
                 incr_backup_hour_period: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 lock_ddl_time: Optional[pulumi.Input[int]] = None,
                 log_backup_retention_day: Optional[pulumi.Input[int]] = None,
                 retention_policy_synced: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupPolicyArgs.__new__(BackupPolicyArgs)

            __props__.__dict__["binlog_backup_all_retention"] = binlog_backup_all_retention
            __props__.__dict__["binlog_backup_enabled"] = binlog_backup_enabled
            __props__.__dict__["binlog_backup_encryption_enabled"] = binlog_backup_encryption_enabled
            __props__.__dict__["binlog_file_counts_enable"] = binlog_file_counts_enable
            __props__.__dict__["binlog_limit_count"] = binlog_limit_count
            __props__.__dict__["binlog_local_retention_hour"] = binlog_local_retention_hour
            __props__.__dict__["binlog_space_limit_enable"] = binlog_space_limit_enable
            __props__.__dict__["binlog_storage_percentage"] = binlog_storage_percentage
            __props__.__dict__["data_backup_all_retention"] = data_backup_all_retention
            __props__.__dict__["data_backup_encryption_enabled"] = data_backup_encryption_enabled
            __props__.__dict__["data_backup_retention_day"] = data_backup_retention_day
            __props__.__dict__["data_full_backup_periods"] = data_full_backup_periods
            __props__.__dict__["data_full_backup_start_utc_hour"] = data_full_backup_start_utc_hour
            __props__.__dict__["data_full_backup_time"] = data_full_backup_time
            __props__.__dict__["data_incr_backup_periods"] = data_incr_backup_periods
            __props__.__dict__["data_keep_days_after_released"] = data_keep_days_after_released
            __props__.__dict__["data_keep_policy_after_released"] = data_keep_policy_after_released
            __props__.__dict__["hourly_incr_backup_enable"] = hourly_incr_backup_enable
            __props__.__dict__["incr_backup_hour_period"] = incr_backup_hour_period
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["lock_ddl_time"] = lock_ddl_time
            __props__.__dict__["log_backup_retention_day"] = log_backup_retention_day
            __props__.__dict__["retention_policy_synced"] = retention_policy_synced
        super(BackupPolicy, __self__).__init__(
            'volcengine:rds_mysql/backupPolicy:BackupPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            binlog_backup_all_retention: Optional[pulumi.Input[bool]] = None,
            binlog_backup_enabled: Optional[pulumi.Input[bool]] = None,
            binlog_backup_encryption_enabled: Optional[pulumi.Input[bool]] = None,
            binlog_file_counts_enable: Optional[pulumi.Input[bool]] = None,
            binlog_limit_count: Optional[pulumi.Input[int]] = None,
            binlog_local_retention_hour: Optional[pulumi.Input[int]] = None,
            binlog_space_limit_enable: Optional[pulumi.Input[bool]] = None,
            binlog_storage_percentage: Optional[pulumi.Input[int]] = None,
            data_backup_all_retention: Optional[pulumi.Input[bool]] = None,
            data_backup_encryption_enabled: Optional[pulumi.Input[bool]] = None,
            data_backup_retention_day: Optional[pulumi.Input[int]] = None,
            data_full_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            data_full_backup_start_utc_hour: Optional[pulumi.Input[int]] = None,
            data_full_backup_time: Optional[pulumi.Input[str]] = None,
            data_incr_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            data_keep_days_after_released: Optional[pulumi.Input[int]] = None,
            data_keep_policy_after_released: Optional[pulumi.Input[str]] = None,
            hourly_incr_backup_enable: Optional[pulumi.Input[bool]] = None,
            incr_backup_hour_period: Optional[pulumi.Input[int]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            lock_ddl_time: Optional[pulumi.Input[int]] = None,
            log_backup_retention_day: Optional[pulumi.Input[int]] = None,
            retention_policy_synced: Optional[pulumi.Input[bool]] = None) -> 'BackupPolicy':
        """
        Get an existing BackupPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] binlog_backup_all_retention: Whether to retain all log backups before releasing an instance. Values:
               true: Yes.
               false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
        :param pulumi.Input[bool] binlog_backup_enabled: Whether to enable log backup function. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] binlog_backup_encryption_enabled: Is encryption enabled for log backups? Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] binlog_file_counts_enable: Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] binlog_limit_count: Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] binlog_local_retention_hour: Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
        :param pulumi.Input[bool] binlog_space_limit_enable: Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
        :param pulumi.Input[int] binlog_storage_percentage: Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[bool] data_backup_all_retention: Whether to retain all data backups before releasing the instance. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[bool] data_backup_encryption_enabled: Whether to enable encryption for data backup. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[int] data_backup_retention_day: Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_full_backup_periods: Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] data_full_backup_start_utc_hour: The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
        :param pulumi.Input[str] data_full_backup_time: Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_incr_backup_periods: Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
        :param pulumi.Input[int] data_keep_days_after_released: Backup retention days when an instance is released. Currently, only a value of 7 is supported.
        :param pulumi.Input[str] data_keep_policy_after_released: Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
        :param pulumi.Input[bool] hourly_incr_backup_enable: Whether to enable high-frequency backup function. Values:
               true: Yes.
               false: No.
        :param pulumi.Input[int] incr_backup_hour_period: Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
        :param pulumi.Input[str] instance_id: The ID of the RDS instance.
        :param pulumi.Input[int] lock_ddl_time: Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
        :param pulumi.Input[int] log_backup_retention_day: Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        :param pulumi.Input[bool] retention_policy_synced: Is the retention policy for log backups the same as that for data backups?
               Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupPolicyState.__new__(_BackupPolicyState)

        __props__.__dict__["binlog_backup_all_retention"] = binlog_backup_all_retention
        __props__.__dict__["binlog_backup_enabled"] = binlog_backup_enabled
        __props__.__dict__["binlog_backup_encryption_enabled"] = binlog_backup_encryption_enabled
        __props__.__dict__["binlog_file_counts_enable"] = binlog_file_counts_enable
        __props__.__dict__["binlog_limit_count"] = binlog_limit_count
        __props__.__dict__["binlog_local_retention_hour"] = binlog_local_retention_hour
        __props__.__dict__["binlog_space_limit_enable"] = binlog_space_limit_enable
        __props__.__dict__["binlog_storage_percentage"] = binlog_storage_percentage
        __props__.__dict__["data_backup_all_retention"] = data_backup_all_retention
        __props__.__dict__["data_backup_encryption_enabled"] = data_backup_encryption_enabled
        __props__.__dict__["data_backup_retention_day"] = data_backup_retention_day
        __props__.__dict__["data_full_backup_periods"] = data_full_backup_periods
        __props__.__dict__["data_full_backup_start_utc_hour"] = data_full_backup_start_utc_hour
        __props__.__dict__["data_full_backup_time"] = data_full_backup_time
        __props__.__dict__["data_incr_backup_periods"] = data_incr_backup_periods
        __props__.__dict__["data_keep_days_after_released"] = data_keep_days_after_released
        __props__.__dict__["data_keep_policy_after_released"] = data_keep_policy_after_released
        __props__.__dict__["hourly_incr_backup_enable"] = hourly_incr_backup_enable
        __props__.__dict__["incr_backup_hour_period"] = incr_backup_hour_period
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["lock_ddl_time"] = lock_ddl_time
        __props__.__dict__["log_backup_retention_day"] = log_backup_retention_day
        __props__.__dict__["retention_policy_synced"] = retention_policy_synced
        return BackupPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="binlogBackupAllRetention")
    def binlog_backup_all_retention(self) -> pulumi.Output[bool]:
        """
        Whether to retain all log backups before releasing an instance. Values:
        true: Yes.
        false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
        """
        return pulumi.get(self, "binlog_backup_all_retention")

    @property
    @pulumi.getter(name="binlogBackupEnabled")
    def binlog_backup_enabled(self) -> pulumi.Output[bool]:
        """
        Whether to enable log backup function. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "binlog_backup_enabled")

    @property
    @pulumi.getter(name="binlogBackupEncryptionEnabled")
    def binlog_backup_encryption_enabled(self) -> pulumi.Output[bool]:
        """
        Is encryption enabled for log backups? Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "binlog_backup_encryption_enabled")

    @property
    @pulumi.getter(name="binlogFileCountsEnable")
    def binlog_file_counts_enable(self) -> pulumi.Output[bool]:
        """
        Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "binlog_file_counts_enable")

    @property
    @pulumi.getter(name="binlogLimitCount")
    def binlog_limit_count(self) -> pulumi.Output[int]:
        """
        Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "binlog_limit_count")

    @property
    @pulumi.getter(name="binlogLocalRetentionHour")
    def binlog_local_retention_hour(self) -> pulumi.Output[int]:
        """
        Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
        """
        return pulumi.get(self, "binlog_local_retention_hour")

    @property
    @pulumi.getter(name="binlogSpaceLimitEnable")
    def binlog_space_limit_enable(self) -> pulumi.Output[bool]:
        """
        Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
        """
        return pulumi.get(self, "binlog_space_limit_enable")

    @property
    @pulumi.getter(name="binlogStoragePercentage")
    def binlog_storage_percentage(self) -> pulumi.Output[int]:
        """
        Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "binlog_storage_percentage")

    @property
    @pulumi.getter(name="dataBackupAllRetention")
    def data_backup_all_retention(self) -> pulumi.Output[bool]:
        """
        Whether to retain all data backups before releasing the instance. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "data_backup_all_retention")

    @property
    @pulumi.getter(name="dataBackupEncryptionEnabled")
    def data_backup_encryption_enabled(self) -> pulumi.Output[bool]:
        """
        Whether to enable encryption for data backup. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "data_backup_encryption_enabled")

    @property
    @pulumi.getter(name="dataBackupRetentionDay")
    def data_backup_retention_day(self) -> pulumi.Output[int]:
        """
        Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
        """
        return pulumi.get(self, "data_backup_retention_day")

    @property
    @pulumi.getter(name="dataFullBackupPeriods")
    def data_full_backup_periods(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "data_full_backup_periods")

    @property
    @pulumi.getter(name="dataFullBackupStartUtcHour")
    def data_full_backup_start_utc_hour(self) -> pulumi.Output[int]:
        """
        The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
        """
        return pulumi.get(self, "data_full_backup_start_utc_hour")

    @property
    @pulumi.getter(name="dataFullBackupTime")
    def data_full_backup_time(self) -> pulumi.Output[str]:
        """
        Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
        """
        return pulumi.get(self, "data_full_backup_time")

    @property
    @pulumi.getter(name="dataIncrBackupPeriods")
    def data_incr_backup_periods(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "data_incr_backup_periods")

    @property
    @pulumi.getter(name="dataKeepDaysAfterReleased")
    def data_keep_days_after_released(self) -> pulumi.Output[int]:
        """
        Backup retention days when an instance is released. Currently, only a value of 7 is supported.
        """
        return pulumi.get(self, "data_keep_days_after_released")

    @property
    @pulumi.getter(name="dataKeepPolicyAfterReleased")
    def data_keep_policy_after_released(self) -> pulumi.Output[str]:
        """
        Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
        """
        return pulumi.get(self, "data_keep_policy_after_released")

    @property
    @pulumi.getter(name="hourlyIncrBackupEnable")
    def hourly_incr_backup_enable(self) -> pulumi.Output[bool]:
        """
        Whether to enable high-frequency backup function. Values:
        true: Yes.
        false: No.
        """
        return pulumi.get(self, "hourly_incr_backup_enable")

    @property
    @pulumi.getter(name="incrBackupHourPeriod")
    def incr_backup_hour_period(self) -> pulumi.Output[int]:
        """
        Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
        """
        return pulumi.get(self, "incr_backup_hour_period")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The ID of the RDS instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="lockDdlTime")
    def lock_ddl_time(self) -> pulumi.Output[int]:
        """
        Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
        """
        return pulumi.get(self, "lock_ddl_time")

    @property
    @pulumi.getter(name="logBackupRetentionDay")
    def log_backup_retention_day(self) -> pulumi.Output[int]:
        """
        Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        """
        return pulumi.get(self, "log_backup_retention_day")

    @property
    @pulumi.getter(name="retentionPolicySynced")
    def retention_policy_synced(self) -> pulumi.Output[bool]:
        """
        Is the retention policy for log backups the same as that for data backups?
        Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
        """
        return pulumi.get(self, "retention_policy_synced")

