# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceSpecsResult',
    'AwaitableInstanceSpecsResult',
    'instance_specs',
    'instance_specs_output',
]

@pulumi.output_type
class InstanceSpecsResult:
    """
    A collection of values returned by InstanceSpecs.
    """
    def __init__(__self__, db_engine_version=None, id=None, instance_specs=None, instance_type=None, output_file=None, spec_code=None, total_count=None, zone_id=None):
        if db_engine_version and not isinstance(db_engine_version, str):
            raise TypeError("Expected argument 'db_engine_version' to be a str")
        pulumi.set(__self__, "db_engine_version", db_engine_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_specs and not isinstance(instance_specs, list):
            raise TypeError("Expected argument 'instance_specs' to be a list")
        pulumi.set(__self__, "instance_specs", instance_specs)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if spec_code and not isinstance(spec_code, str):
            raise TypeError("Expected argument 'spec_code' to be a str")
        pulumi.set(__self__, "spec_code", spec_code)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="dbEngineVersion")
    def db_engine_version(self) -> Optional[str]:
        """
        Compatible version. Values:
        MySQL_5_7: MySQL 5.7 version. Default value.
        MySQL_8_0: MySQL 8.0 version.
        """
        return pulumi.get(self, "db_engine_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceSpecs")
    def instance_specs(self) -> Sequence['outputs.InstanceSpecsInstanceSpecResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "instance_specs")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        Instance type. The value is DoubleNode.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> Optional[str]:
        """
        Instance specification code.
        """
        return pulumi.get(self, "spec_code")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        Availability zone ID.
        """
        return pulumi.get(self, "zone_id")


class AwaitableInstanceSpecsResult(InstanceSpecsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return InstanceSpecsResult(
            db_engine_version=self.db_engine_version,
            id=self.id,
            instance_specs=self.instance_specs,
            instance_type=self.instance_type,
            output_file=self.output_file,
            spec_code=self.spec_code,
            total_count=self.total_count,
            zone_id=self.zone_id)


def instance_specs(db_engine_version: Optional[str] = None,
                   instance_type: Optional[str] = None,
                   output_file: Optional[str] = None,
                   spec_code: Optional[str] = None,
                   zone_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableInstanceSpecsResult:
    """
    Use this data source to query detailed information of rds mysql instance specs
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.rds_mysql.instance_specs(db_engine_version="MySQL_8_0",
        instance_type="DoubleNode")
    ```


    :param str db_engine_version: Compatible version. Values:
           MySQL_5_7: MySQL 5.7 version. Default value.
           MySQL_8_0: MySQL 8.0 version.
    :param str instance_type: Instance type. The value is DoubleNode.
    :param str output_file: File name where to save data source results.
    :param str spec_code: Instance specification code.
    :param str zone_id: Availability zone ID.
    """
    __args__ = dict()
    __args__['dbEngineVersion'] = db_engine_version
    __args__['instanceType'] = instance_type
    __args__['outputFile'] = output_file
    __args__['specCode'] = spec_code
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:rds_mysql/instanceSpecs:InstanceSpecs', __args__, opts=opts, typ=InstanceSpecsResult).value

    return AwaitableInstanceSpecsResult(
        db_engine_version=pulumi.get(__ret__, 'db_engine_version'),
        id=pulumi.get(__ret__, 'id'),
        instance_specs=pulumi.get(__ret__, 'instance_specs'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        output_file=pulumi.get(__ret__, 'output_file'),
        spec_code=pulumi.get(__ret__, 'spec_code'),
        total_count=pulumi.get(__ret__, 'total_count'),
        zone_id=pulumi.get(__ret__, 'zone_id'))


@_utilities.lift_output_func(instance_specs)
def instance_specs_output(db_engine_version: Optional[pulumi.Input[Optional[str]]] = None,
                          instance_type: Optional[pulumi.Input[Optional[str]]] = None,
                          output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          spec_code: Optional[pulumi.Input[Optional[str]]] = None,
                          zone_id: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[InstanceSpecsResult]:
    """
    Use this data source to query detailed information of rds mysql instance specs
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.rds_mysql.instance_specs(db_engine_version="MySQL_8_0",
        instance_type="DoubleNode")
    ```


    :param str db_engine_version: Compatible version. Values:
           MySQL_5_7: MySQL 5.7 version. Default value.
           MySQL_8_0: MySQL 8.0 version.
    :param str instance_type: Instance type. The value is DoubleNode.
    :param str output_file: File name where to save data source results.
    :param str spec_code: Instance specification code.
    :param str zone_id: Availability zone ID.
    """
    ...
