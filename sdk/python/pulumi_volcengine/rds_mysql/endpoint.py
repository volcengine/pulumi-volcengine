# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EndpointArgs', 'Endpoint']

@pulumi.input_type
class EndpointArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 nodes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 auto_add_new_nodes: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 endpoint_name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 read_only_node_distribution_type: Optional[pulumi.Input[str]] = None,
                 read_only_node_max_delay_time: Optional[pulumi.Input[int]] = None,
                 read_only_node_weights: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointReadOnlyNodeWeightArgs']]]] = None,
                 read_write_mode: Optional[pulumi.Input[str]] = None,
                 read_write_spliting: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Endpoint resource.
        :param pulumi.Input[str] instance_id: The id of the mysql instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nodes: List of node IDs configured for the endpoint. Required when EndpointType is Custom. To add a master node to the terminal, there is no need to fill in the master node ID, just fill in `Primary`.
        :param pulumi.Input[bool] auto_add_new_nodes: When the terminal type is a read-write terminal or a read-only terminal, support is provided for setting whether new nodes are automatically added. The values are:
               true: Automatically add.
               false: Do not automatically add (default).
        :param pulumi.Input[str] description: The description of the endpoint.
        :param pulumi.Input[str] domain: Connection address, Please note that the connection address can only modify the prefix. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint. Import an exist endpoint, usually for import a default endpoint generated with instance creating.
        :param pulumi.Input[str] endpoint_name: The name of the endpoint.
        :param pulumi.Input[int] port: The port. Cannot modify public network port. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        :param pulumi.Input[str] read_only_node_distribution_type: Read weight allocation mode. This parameter is required when enabling read-write separation setting to TRUE. Possible values:
               Default: Automatically allocate weights based on specifications (default).
               Custom: Custom weight allocation.
        :param pulumi.Input[int] read_only_node_max_delay_time: The maximum delay threshold for read-only nodes, when the delay time of a read-only node exceeds this value, the read traffic will not be sent to that node, unit: seconds. Value range: 0~3600. Default value: 30.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointReadOnlyNodeWeightArgs']]] read_only_node_weights: Customize read weight distribution, that is, pass in the read request weight of the master node and read-only nodes. It increases by 100 and the maximum value is 10000. When the ReadOnlyNodeDistributionType value is Custom, this parameter needs to be passed in.
        :param pulumi.Input[str] read_write_mode: Reading and writing mode: ReadWrite, ReadOnly(Default).
        :param pulumi.Input[bool] read_write_spliting: Enable read-write separation. Possible values: TRUE, FALSE.
               This setting can be configured when ReadWriteMode is set to read-write, but cannot be configured when ReadWriteMode is set to read-only. This parameter only applies to the default terminal.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "nodes", nodes)
        if auto_add_new_nodes is not None:
            pulumi.set(__self__, "auto_add_new_nodes", auto_add_new_nodes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if endpoint_name is not None:
            pulumi.set(__self__, "endpoint_name", endpoint_name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if read_only_node_distribution_type is not None:
            pulumi.set(__self__, "read_only_node_distribution_type", read_only_node_distribution_type)
        if read_only_node_max_delay_time is not None:
            pulumi.set(__self__, "read_only_node_max_delay_time", read_only_node_max_delay_time)
        if read_only_node_weights is not None:
            pulumi.set(__self__, "read_only_node_weights", read_only_node_weights)
        if read_write_mode is not None:
            pulumi.set(__self__, "read_write_mode", read_write_mode)
        if read_write_spliting is not None:
            pulumi.set(__self__, "read_write_spliting", read_write_spliting)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of the mysql instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of node IDs configured for the endpoint. Required when EndpointType is Custom. To add a master node to the terminal, there is no need to fill in the master node ID, just fill in `Primary`.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="autoAddNewNodes")
    def auto_add_new_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        When the terminal type is a read-write terminal or a read-only terminal, support is provided for setting whether new nodes are automatically added. The values are:
        true: Automatically add.
        false: Do not automatically add (default).
        """
        return pulumi.get(self, "auto_add_new_nodes")

    @auto_add_new_nodes.setter
    def auto_add_new_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_add_new_nodes", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the endpoint.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Connection address, Please note that the connection address can only modify the prefix. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the endpoint. Import an exist endpoint, usually for import a default endpoint generated with instance creating.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the endpoint.
        """
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port. Cannot modify public network port. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="readOnlyNodeDistributionType")
    def read_only_node_distribution_type(self) -> Optional[pulumi.Input[str]]:
        """
        Read weight allocation mode. This parameter is required when enabling read-write separation setting to TRUE. Possible values:
        Default: Automatically allocate weights based on specifications (default).
        Custom: Custom weight allocation.
        """
        return pulumi.get(self, "read_only_node_distribution_type")

    @read_only_node_distribution_type.setter
    def read_only_node_distribution_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_node_distribution_type", value)

    @property
    @pulumi.getter(name="readOnlyNodeMaxDelayTime")
    def read_only_node_max_delay_time(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum delay threshold for read-only nodes, when the delay time of a read-only node exceeds this value, the read traffic will not be sent to that node, unit: seconds. Value range: 0~3600. Default value: 30.
        """
        return pulumi.get(self, "read_only_node_max_delay_time")

    @read_only_node_max_delay_time.setter
    def read_only_node_max_delay_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_node_max_delay_time", value)

    @property
    @pulumi.getter(name="readOnlyNodeWeights")
    def read_only_node_weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointReadOnlyNodeWeightArgs']]]]:
        """
        Customize read weight distribution, that is, pass in the read request weight of the master node and read-only nodes. It increases by 100 and the maximum value is 10000. When the ReadOnlyNodeDistributionType value is Custom, this parameter needs to be passed in.
        """
        return pulumi.get(self, "read_only_node_weights")

    @read_only_node_weights.setter
    def read_only_node_weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointReadOnlyNodeWeightArgs']]]]):
        pulumi.set(self, "read_only_node_weights", value)

    @property
    @pulumi.getter(name="readWriteMode")
    def read_write_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Reading and writing mode: ReadWrite, ReadOnly(Default).
        """
        return pulumi.get(self, "read_write_mode")

    @read_write_mode.setter
    def read_write_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_write_mode", value)

    @property
    @pulumi.getter(name="readWriteSpliting")
    def read_write_spliting(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable read-write separation. Possible values: TRUE, FALSE.
        This setting can be configured when ReadWriteMode is set to read-write, but cannot be configured when ReadWriteMode is set to read-only. This parameter only applies to the default terminal.
        """
        return pulumi.get(self, "read_write_spliting")

    @read_write_spliting.setter
    def read_write_spliting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_write_spliting", value)


@pulumi.input_type
class _EndpointState:
    def __init__(__self__, *,
                 auto_add_new_nodes: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 endpoint_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 read_only_node_distribution_type: Optional[pulumi.Input[str]] = None,
                 read_only_node_max_delay_time: Optional[pulumi.Input[int]] = None,
                 read_only_node_weights: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointReadOnlyNodeWeightArgs']]]] = None,
                 read_write_mode: Optional[pulumi.Input[str]] = None,
                 read_write_spliting: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Endpoint resources.
        :param pulumi.Input[bool] auto_add_new_nodes: When the terminal type is a read-write terminal or a read-only terminal, support is provided for setting whether new nodes are automatically added. The values are:
               true: Automatically add.
               false: Do not automatically add (default).
        :param pulumi.Input[str] description: The description of the endpoint.
        :param pulumi.Input[str] domain: Connection address, Please note that the connection address can only modify the prefix. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint. Import an exist endpoint, usually for import a default endpoint generated with instance creating.
        :param pulumi.Input[str] endpoint_name: The name of the endpoint.
        :param pulumi.Input[str] instance_id: The id of the mysql instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nodes: List of node IDs configured for the endpoint. Required when EndpointType is Custom. To add a master node to the terminal, there is no need to fill in the master node ID, just fill in `Primary`.
        :param pulumi.Input[int] port: The port. Cannot modify public network port. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        :param pulumi.Input[str] read_only_node_distribution_type: Read weight allocation mode. This parameter is required when enabling read-write separation setting to TRUE. Possible values:
               Default: Automatically allocate weights based on specifications (default).
               Custom: Custom weight allocation.
        :param pulumi.Input[int] read_only_node_max_delay_time: The maximum delay threshold for read-only nodes, when the delay time of a read-only node exceeds this value, the read traffic will not be sent to that node, unit: seconds. Value range: 0~3600. Default value: 30.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointReadOnlyNodeWeightArgs']]] read_only_node_weights: Customize read weight distribution, that is, pass in the read request weight of the master node and read-only nodes. It increases by 100 and the maximum value is 10000. When the ReadOnlyNodeDistributionType value is Custom, this parameter needs to be passed in.
        :param pulumi.Input[str] read_write_mode: Reading and writing mode: ReadWrite, ReadOnly(Default).
        :param pulumi.Input[bool] read_write_spliting: Enable read-write separation. Possible values: TRUE, FALSE.
               This setting can be configured when ReadWriteMode is set to read-write, but cannot be configured when ReadWriteMode is set to read-only. This parameter only applies to the default terminal.
        """
        if auto_add_new_nodes is not None:
            pulumi.set(__self__, "auto_add_new_nodes", auto_add_new_nodes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if endpoint_name is not None:
            pulumi.set(__self__, "endpoint_name", endpoint_name)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if read_only_node_distribution_type is not None:
            pulumi.set(__self__, "read_only_node_distribution_type", read_only_node_distribution_type)
        if read_only_node_max_delay_time is not None:
            pulumi.set(__self__, "read_only_node_max_delay_time", read_only_node_max_delay_time)
        if read_only_node_weights is not None:
            pulumi.set(__self__, "read_only_node_weights", read_only_node_weights)
        if read_write_mode is not None:
            pulumi.set(__self__, "read_write_mode", read_write_mode)
        if read_write_spliting is not None:
            pulumi.set(__self__, "read_write_spliting", read_write_spliting)

    @property
    @pulumi.getter(name="autoAddNewNodes")
    def auto_add_new_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        When the terminal type is a read-write terminal or a read-only terminal, support is provided for setting whether new nodes are automatically added. The values are:
        true: Automatically add.
        false: Do not automatically add (default).
        """
        return pulumi.get(self, "auto_add_new_nodes")

    @auto_add_new_nodes.setter
    def auto_add_new_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_add_new_nodes", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the endpoint.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Connection address, Please note that the connection address can only modify the prefix. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the endpoint. Import an exist endpoint, usually for import a default endpoint generated with instance creating.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the endpoint.
        """
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the mysql instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of node IDs configured for the endpoint. Required when EndpointType is Custom. To add a master node to the terminal, there is no need to fill in the master node ID, just fill in `Primary`.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port. Cannot modify public network port. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="readOnlyNodeDistributionType")
    def read_only_node_distribution_type(self) -> Optional[pulumi.Input[str]]:
        """
        Read weight allocation mode. This parameter is required when enabling read-write separation setting to TRUE. Possible values:
        Default: Automatically allocate weights based on specifications (default).
        Custom: Custom weight allocation.
        """
        return pulumi.get(self, "read_only_node_distribution_type")

    @read_only_node_distribution_type.setter
    def read_only_node_distribution_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_node_distribution_type", value)

    @property
    @pulumi.getter(name="readOnlyNodeMaxDelayTime")
    def read_only_node_max_delay_time(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum delay threshold for read-only nodes, when the delay time of a read-only node exceeds this value, the read traffic will not be sent to that node, unit: seconds. Value range: 0~3600. Default value: 30.
        """
        return pulumi.get(self, "read_only_node_max_delay_time")

    @read_only_node_max_delay_time.setter
    def read_only_node_max_delay_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_node_max_delay_time", value)

    @property
    @pulumi.getter(name="readOnlyNodeWeights")
    def read_only_node_weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointReadOnlyNodeWeightArgs']]]]:
        """
        Customize read weight distribution, that is, pass in the read request weight of the master node and read-only nodes. It increases by 100 and the maximum value is 10000. When the ReadOnlyNodeDistributionType value is Custom, this parameter needs to be passed in.
        """
        return pulumi.get(self, "read_only_node_weights")

    @read_only_node_weights.setter
    def read_only_node_weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointReadOnlyNodeWeightArgs']]]]):
        pulumi.set(self, "read_only_node_weights", value)

    @property
    @pulumi.getter(name="readWriteMode")
    def read_write_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Reading and writing mode: ReadWrite, ReadOnly(Default).
        """
        return pulumi.get(self, "read_write_mode")

    @read_write_mode.setter
    def read_write_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_write_mode", value)

    @property
    @pulumi.getter(name="readWriteSpliting")
    def read_write_spliting(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable read-write separation. Possible values: TRUE, FALSE.
        This setting can be configured when ReadWriteMode is set to read-write, but cannot be configured when ReadWriteMode is set to read-only. This parameter only applies to the default terminal.
        """
        return pulumi.get(self, "read_write_spliting")

    @read_write_spliting.setter
    def read_write_spliting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_write_spliting", value)


class Endpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_add_new_nodes: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 endpoint_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 read_only_node_distribution_type: Optional[pulumi.Input[str]] = None,
                 read_only_node_max_delay_time: Optional[pulumi.Input[int]] = None,
                 read_only_node_weights: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointReadOnlyNodeWeightArgs']]]]] = None,
                 read_write_mode: Optional[pulumi.Input[str]] = None,
                 read_write_spliting: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to manage rds mysql endpoint
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.rds_mysql.Endpoint("foo",
            auto_add_new_nodes=True,
            description="tf-test-1",
            domain="mysql-38c3d4f05f6e-te-8c00-private.rds.ivolces.com",
            endpoint_name="tf-test-1",
            instance_id="mysql-38c3d4f05f6e",
            nodes=[
                "Primary",
                "mysql-38c3d4f05f6e-r3b0d",
            ],
            port=3306,
            read_only_node_distribution_type="Custom",
            read_only_node_max_delay_time=30,
            read_only_node_weights=[
                volcengine.rds_mysql.EndpointReadOnlyNodeWeightArgs(
                    node_id="mysql-38c3d4f05f6e-r3b0d",
                    node_type="ReadOnly",
                    weight=0,
                ),
                volcengine.rds_mysql.EndpointReadOnlyNodeWeightArgs(
                    node_type="Primary",
                    weight=100,
                ),
            ],
            read_write_mode="ReadWrite",
            read_write_spliting=True)
        ```

        ## Import

        RdsMysqlEndpoint can be imported using the instance id and endpoint id, e.g.

        ```sh
        $ pulumi import volcengine:rds_mysql/endpoint:Endpoint default mysql-3c25f219***:mysql-3c25f219****-custom-eeb5
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_add_new_nodes: When the terminal type is a read-write terminal or a read-only terminal, support is provided for setting whether new nodes are automatically added. The values are:
               true: Automatically add.
               false: Do not automatically add (default).
        :param pulumi.Input[str] description: The description of the endpoint.
        :param pulumi.Input[str] domain: Connection address, Please note that the connection address can only modify the prefix. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint. Import an exist endpoint, usually for import a default endpoint generated with instance creating.
        :param pulumi.Input[str] endpoint_name: The name of the endpoint.
        :param pulumi.Input[str] instance_id: The id of the mysql instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nodes: List of node IDs configured for the endpoint. Required when EndpointType is Custom. To add a master node to the terminal, there is no need to fill in the master node ID, just fill in `Primary`.
        :param pulumi.Input[int] port: The port. Cannot modify public network port. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        :param pulumi.Input[str] read_only_node_distribution_type: Read weight allocation mode. This parameter is required when enabling read-write separation setting to TRUE. Possible values:
               Default: Automatically allocate weights based on specifications (default).
               Custom: Custom weight allocation.
        :param pulumi.Input[int] read_only_node_max_delay_time: The maximum delay threshold for read-only nodes, when the delay time of a read-only node exceeds this value, the read traffic will not be sent to that node, unit: seconds. Value range: 0~3600. Default value: 30.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointReadOnlyNodeWeightArgs']]]] read_only_node_weights: Customize read weight distribution, that is, pass in the read request weight of the master node and read-only nodes. It increases by 100 and the maximum value is 10000. When the ReadOnlyNodeDistributionType value is Custom, this parameter needs to be passed in.
        :param pulumi.Input[str] read_write_mode: Reading and writing mode: ReadWrite, ReadOnly(Default).
        :param pulumi.Input[bool] read_write_spliting: Enable read-write separation. Possible values: TRUE, FALSE.
               This setting can be configured when ReadWriteMode is set to read-write, but cannot be configured when ReadWriteMode is set to read-only. This parameter only applies to the default terminal.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rds mysql endpoint
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.rds_mysql.Endpoint("foo",
            auto_add_new_nodes=True,
            description="tf-test-1",
            domain="mysql-38c3d4f05f6e-te-8c00-private.rds.ivolces.com",
            endpoint_name="tf-test-1",
            instance_id="mysql-38c3d4f05f6e",
            nodes=[
                "Primary",
                "mysql-38c3d4f05f6e-r3b0d",
            ],
            port=3306,
            read_only_node_distribution_type="Custom",
            read_only_node_max_delay_time=30,
            read_only_node_weights=[
                volcengine.rds_mysql.EndpointReadOnlyNodeWeightArgs(
                    node_id="mysql-38c3d4f05f6e-r3b0d",
                    node_type="ReadOnly",
                    weight=0,
                ),
                volcengine.rds_mysql.EndpointReadOnlyNodeWeightArgs(
                    node_type="Primary",
                    weight=100,
                ),
            ],
            read_write_mode="ReadWrite",
            read_write_spliting=True)
        ```

        ## Import

        RdsMysqlEndpoint can be imported using the instance id and endpoint id, e.g.

        ```sh
        $ pulumi import volcengine:rds_mysql/endpoint:Endpoint default mysql-3c25f219***:mysql-3c25f219****-custom-eeb5
        ```

        :param str resource_name: The name of the resource.
        :param EndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_add_new_nodes: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 endpoint_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 read_only_node_distribution_type: Optional[pulumi.Input[str]] = None,
                 read_only_node_max_delay_time: Optional[pulumi.Input[int]] = None,
                 read_only_node_weights: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointReadOnlyNodeWeightArgs']]]]] = None,
                 read_write_mode: Optional[pulumi.Input[str]] = None,
                 read_write_spliting: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndpointArgs.__new__(EndpointArgs)

            __props__.__dict__["auto_add_new_nodes"] = auto_add_new_nodes
            __props__.__dict__["description"] = description
            __props__.__dict__["domain"] = domain
            __props__.__dict__["endpoint_id"] = endpoint_id
            __props__.__dict__["endpoint_name"] = endpoint_name
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if nodes is None and not opts.urn:
                raise TypeError("Missing required property 'nodes'")
            __props__.__dict__["nodes"] = nodes
            __props__.__dict__["port"] = port
            __props__.__dict__["read_only_node_distribution_type"] = read_only_node_distribution_type
            __props__.__dict__["read_only_node_max_delay_time"] = read_only_node_max_delay_time
            __props__.__dict__["read_only_node_weights"] = read_only_node_weights
            __props__.__dict__["read_write_mode"] = read_write_mode
            __props__.__dict__["read_write_spliting"] = read_write_spliting
        super(Endpoint, __self__).__init__(
            'volcengine:rds_mysql/endpoint:Endpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_add_new_nodes: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            endpoint_id: Optional[pulumi.Input[str]] = None,
            endpoint_name: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            port: Optional[pulumi.Input[int]] = None,
            read_only_node_distribution_type: Optional[pulumi.Input[str]] = None,
            read_only_node_max_delay_time: Optional[pulumi.Input[int]] = None,
            read_only_node_weights: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointReadOnlyNodeWeightArgs']]]]] = None,
            read_write_mode: Optional[pulumi.Input[str]] = None,
            read_write_spliting: Optional[pulumi.Input[bool]] = None) -> 'Endpoint':
        """
        Get an existing Endpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_add_new_nodes: When the terminal type is a read-write terminal or a read-only terminal, support is provided for setting whether new nodes are automatically added. The values are:
               true: Automatically add.
               false: Do not automatically add (default).
        :param pulumi.Input[str] description: The description of the endpoint.
        :param pulumi.Input[str] domain: Connection address, Please note that the connection address can only modify the prefix. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint. Import an exist endpoint, usually for import a default endpoint generated with instance creating.
        :param pulumi.Input[str] endpoint_name: The name of the endpoint.
        :param pulumi.Input[str] instance_id: The id of the mysql instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nodes: List of node IDs configured for the endpoint. Required when EndpointType is Custom. To add a master node to the terminal, there is no need to fill in the master node ID, just fill in `Primary`.
        :param pulumi.Input[int] port: The port. Cannot modify public network port. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        :param pulumi.Input[str] read_only_node_distribution_type: Read weight allocation mode. This parameter is required when enabling read-write separation setting to TRUE. Possible values:
               Default: Automatically allocate weights based on specifications (default).
               Custom: Custom weight allocation.
        :param pulumi.Input[int] read_only_node_max_delay_time: The maximum delay threshold for read-only nodes, when the delay time of a read-only node exceeds this value, the read traffic will not be sent to that node, unit: seconds. Value range: 0~3600. Default value: 30.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointReadOnlyNodeWeightArgs']]]] read_only_node_weights: Customize read weight distribution, that is, pass in the read request weight of the master node and read-only nodes. It increases by 100 and the maximum value is 10000. When the ReadOnlyNodeDistributionType value is Custom, this parameter needs to be passed in.
        :param pulumi.Input[str] read_write_mode: Reading and writing mode: ReadWrite, ReadOnly(Default).
        :param pulumi.Input[bool] read_write_spliting: Enable read-write separation. Possible values: TRUE, FALSE.
               This setting can be configured when ReadWriteMode is set to read-write, but cannot be configured when ReadWriteMode is set to read-only. This parameter only applies to the default terminal.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EndpointState.__new__(_EndpointState)

        __props__.__dict__["auto_add_new_nodes"] = auto_add_new_nodes
        __props__.__dict__["description"] = description
        __props__.__dict__["domain"] = domain
        __props__.__dict__["endpoint_id"] = endpoint_id
        __props__.__dict__["endpoint_name"] = endpoint_name
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["port"] = port
        __props__.__dict__["read_only_node_distribution_type"] = read_only_node_distribution_type
        __props__.__dict__["read_only_node_max_delay_time"] = read_only_node_max_delay_time
        __props__.__dict__["read_only_node_weights"] = read_only_node_weights
        __props__.__dict__["read_write_mode"] = read_write_mode
        __props__.__dict__["read_write_spliting"] = read_write_spliting
        return Endpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoAddNewNodes")
    def auto_add_new_nodes(self) -> pulumi.Output[Optional[bool]]:
        """
        When the terminal type is a read-write terminal or a read-only terminal, support is provided for setting whether new nodes are automatically added. The values are:
        true: Automatically add.
        false: Do not automatically add (default).
        """
        return pulumi.get(self, "auto_add_new_nodes")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the endpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Connection address, Please note that the connection address can only modify the prefix. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Output[str]:
        """
        The id of the endpoint. Import an exist endpoint, usually for import a default endpoint generated with instance creating.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Output[str]:
        """
        The name of the endpoint.
        """
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of the mysql instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence[str]]:
        """
        List of node IDs configured for the endpoint. Required when EndpointType is Custom. To add a master node to the terminal, there is no need to fill in the master node ID, just fill in `Primary`.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        The port. Cannot modify public network port. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="readOnlyNodeDistributionType")
    def read_only_node_distribution_type(self) -> pulumi.Output[str]:
        """
        Read weight allocation mode. This parameter is required when enabling read-write separation setting to TRUE. Possible values:
        Default: Automatically allocate weights based on specifications (default).
        Custom: Custom weight allocation.
        """
        return pulumi.get(self, "read_only_node_distribution_type")

    @property
    @pulumi.getter(name="readOnlyNodeMaxDelayTime")
    def read_only_node_max_delay_time(self) -> pulumi.Output[int]:
        """
        The maximum delay threshold for read-only nodes, when the delay time of a read-only node exceeds this value, the read traffic will not be sent to that node, unit: seconds. Value range: 0~3600. Default value: 30.
        """
        return pulumi.get(self, "read_only_node_max_delay_time")

    @property
    @pulumi.getter(name="readOnlyNodeWeights")
    def read_only_node_weights(self) -> pulumi.Output[Sequence['outputs.EndpointReadOnlyNodeWeight']]:
        """
        Customize read weight distribution, that is, pass in the read request weight of the master node and read-only nodes. It increases by 100 and the maximum value is 10000. When the ReadOnlyNodeDistributionType value is Custom, this parameter needs to be passed in.
        """
        return pulumi.get(self, "read_only_node_weights")

    @property
    @pulumi.getter(name="readWriteMode")
    def read_write_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Reading and writing mode: ReadWrite, ReadOnly(Default).
        """
        return pulumi.get(self, "read_write_mode")

    @property
    @pulumi.getter(name="readWriteSpliting")
    def read_write_spliting(self) -> pulumi.Output[bool]:
        """
        Enable read-write separation. Possible values: TRUE, FALSE.
        This setting can be configured when ReadWriteMode is set to read-write, but cannot be configured when ReadWriteMode is set to read-only. This parameter only applies to the default terminal.
        """
        return pulumi.get(self, "read_write_spliting")

