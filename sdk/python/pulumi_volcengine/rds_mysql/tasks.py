# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'TasksResult',
    'AwaitableTasksResult',
    'tasks',
    'tasks_output',
]

warnings.warn("""volcengine.rds_mysql.Tasks has been deprecated in favor of volcengine.rds_mysql.getTasks""", DeprecationWarning)

@pulumi.output_type
class TasksResult:
    """
    A collection of values returned by Tasks.
    """
    def __init__(__self__, creation_end_time=None, creation_start_time=None, datas=None, id=None, instance_id=None, output_file=None, project_name=None, task_action=None, task_categories=None, task_id=None, task_source=None, task_statuses=None, task_type=None, total_count=None):
        if creation_end_time and not isinstance(creation_end_time, str):
            raise TypeError("Expected argument 'creation_end_time' to be a str")
        pulumi.set(__self__, "creation_end_time", creation_end_time)
        if creation_start_time and not isinstance(creation_start_time, str):
            raise TypeError("Expected argument 'creation_start_time' to be a str")
        pulumi.set(__self__, "creation_start_time", creation_start_time)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if task_action and not isinstance(task_action, str):
            raise TypeError("Expected argument 'task_action' to be a str")
        pulumi.set(__self__, "task_action", task_action)
        if task_categories and not isinstance(task_categories, list):
            raise TypeError("Expected argument 'task_categories' to be a list")
        pulumi.set(__self__, "task_categories", task_categories)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)
        if task_source and not isinstance(task_source, str):
            raise TypeError("Expected argument 'task_source' to be a str")
        pulumi.set(__self__, "task_source", task_source)
        if task_statuses and not isinstance(task_statuses, list):
            raise TypeError("Expected argument 'task_statuses' to be a list")
        pulumi.set(__self__, "task_statuses", task_statuses)
        if task_type and not isinstance(task_type, str):
            raise TypeError("Expected argument 'task_type' to be a str")
        pulumi.set(__self__, "task_type", task_type)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="creationEndTime")
    def creation_end_time(self) -> Optional[str]:
        return pulumi.get(self, "creation_end_time")

    @property
    @pulumi.getter(name="creationStartTime")
    def creation_start_time(self) -> Optional[str]:
        return pulumi.get(self, "creation_start_time")

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.TasksDataResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="taskAction")
    def task_action(self) -> Optional[str]:
        """
        Task name.
        """
        return pulumi.get(self, "task_action")

    @property
    @pulumi.getter(name="taskCategories")
    def task_categories(self) -> Optional[Sequence[str]]:
        """
        Task category.
        """
        return pulumi.get(self, "task_categories")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[str]:
        """
        Task ID.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskSource")
    def task_source(self) -> Optional[str]:
        return pulumi.get(self, "task_source")

    @property
    @pulumi.getter(name="taskStatuses")
    def task_statuses(self) -> Optional[Sequence[str]]:
        """
        Task status. The values are as shown in the following list, and multiple values can be selected: WaitSwitch: Waiting for switching. WaitStart: Waiting for execution. Canceled: Canceled. Stopped: Terminated. Running_BeforeSwitch: Running (before switching). Timeout: Execution Timeout. Success: Execution Success. Failed: Execution Failed. Running: In Execution. Stopping: In Termination.
        """
        return pulumi.get(self, "task_statuses")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[str]:
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableTasksResult(TasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return TasksResult(
            creation_end_time=self.creation_end_time,
            creation_start_time=self.creation_start_time,
            datas=self.datas,
            id=self.id,
            instance_id=self.instance_id,
            output_file=self.output_file,
            project_name=self.project_name,
            task_action=self.task_action,
            task_categories=self.task_categories,
            task_id=self.task_id,
            task_source=self.task_source,
            task_statuses=self.task_statuses,
            task_type=self.task_type,
            total_count=self.total_count)


def tasks(creation_end_time: Optional[str] = None,
          creation_start_time: Optional[str] = None,
          instance_id: Optional[str] = None,
          output_file: Optional[str] = None,
          project_name: Optional[str] = None,
          task_action: Optional[str] = None,
          task_categories: Optional[Sequence[str]] = None,
          task_id: Optional[str] = None,
          task_source: Optional[str] = None,
          task_statuses: Optional[Sequence[str]] = None,
          task_type: Optional[str] = None,
          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableTasksResult:
    """
    Use this data source to query detailed information of rds mysql tasks
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.rds_mysql.get_tasks(creation_end_time="2025-06-23T00:00:00Z",
        creation_start_time="2025-06-21T00:00:00Z",
        instance_id="mysql-b51d37110dd1")
    ```


    :param str creation_end_time: The end time of the task. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Instructions: For the two groups of parameters, task time (CreationStartTime and CreationEndTime) and TaskId, one of them must be selected. The maximum time interval between the task start time (CreationStartTime) and the task end time (CreationEndTime) shall not exceed 7 days.
    :param str creation_start_time: The start time of the task. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Instructions: For the two groups of parameters, task time (CreationStartTime and CreationEndTime) and TaskId, one of them must be selected. The maximum time interval between the task start time (CreationStartTime) and the task end time (CreationEndTime) cannot exceed 7 days.
    :param str instance_id: Instance ID.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name.
    :param str task_action: Task name.
    :param Sequence[str] task_categories: Task Category. The values are as shown in the following list, and multiple values can be selected: BackupRecoveryManagement: Backup and Recovery Management. DatabaseAdminManagement: Database Administration Management. DatabaseProxy: Database Proxy. HighAvailability: High Availability. InstanceAttribute: Instance Attribute. InstanceManagement: Instance Management. NetworkManagement: Network Management. SecurityManagement: Security Management. SystemMaintainManagement: System Operation and Maintenance Management. VersionUpgrade: Version Upgrade.
    :param str task_id: Task ID. Description: For the two groups of parameters, TaskId and task time (CreationStartTime and CreationEndTime), one of them must be selected.
    :param str task_source: Task source. Values: User: Tenant. System: System. SystemUser: Internal operation and maintenance. UserMaintain: Maintenance operations initiated by system/operation and maintenance administrators and visible to tenants.
    :param Sequence[str] task_statuses: Task status. The values are as shown in the following list, and multiple values can be selected: WaitSwitch: Waiting for switching. WaitStart: Waiting for execution. Canceled: Canceled. Stopped: Terminated. Running_BeforeSwitch: Running (before switching). Timeout: Execution Timeout. Success: Execution Success. Failed: Execution Failed. Running: In Execution. Stopping: In Termination.
    :param str task_type: Task type. Values: Web: Console request. OpenAPI: OpenAPI request. AssumeRole: Role - playing request. Other: Other requests.
    """
    pulumi.log.warn("""tasks is deprecated: volcengine.rds_mysql.Tasks has been deprecated in favor of volcengine.rds_mysql.getTasks""")
    __args__ = dict()
    __args__['creationEndTime'] = creation_end_time
    __args__['creationStartTime'] = creation_start_time
    __args__['instanceId'] = instance_id
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['taskAction'] = task_action
    __args__['taskCategories'] = task_categories
    __args__['taskId'] = task_id
    __args__['taskSource'] = task_source
    __args__['taskStatuses'] = task_statuses
    __args__['taskType'] = task_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:rds_mysql/tasks:Tasks', __args__, opts=opts, typ=TasksResult).value

    return AwaitableTasksResult(
        creation_end_time=pulumi.get(__ret__, 'creation_end_time'),
        creation_start_time=pulumi.get(__ret__, 'creation_start_time'),
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        task_action=pulumi.get(__ret__, 'task_action'),
        task_categories=pulumi.get(__ret__, 'task_categories'),
        task_id=pulumi.get(__ret__, 'task_id'),
        task_source=pulumi.get(__ret__, 'task_source'),
        task_statuses=pulumi.get(__ret__, 'task_statuses'),
        task_type=pulumi.get(__ret__, 'task_type'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(tasks)
def tasks_output(creation_end_time: Optional[pulumi.Input[Optional[str]]] = None,
                 creation_start_time: Optional[pulumi.Input[Optional[str]]] = None,
                 instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                 output_file: Optional[pulumi.Input[Optional[str]]] = None,
                 project_name: Optional[pulumi.Input[Optional[str]]] = None,
                 task_action: Optional[pulumi.Input[Optional[str]]] = None,
                 task_categories: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                 task_id: Optional[pulumi.Input[Optional[str]]] = None,
                 task_source: Optional[pulumi.Input[Optional[str]]] = None,
                 task_statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                 task_type: Optional[pulumi.Input[Optional[str]]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[TasksResult]:
    """
    Use this data source to query detailed information of rds mysql tasks
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.rds_mysql.get_tasks(creation_end_time="2025-06-23T00:00:00Z",
        creation_start_time="2025-06-21T00:00:00Z",
        instance_id="mysql-b51d37110dd1")
    ```


    :param str creation_end_time: The end time of the task. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Instructions: For the two groups of parameters, task time (CreationStartTime and CreationEndTime) and TaskId, one of them must be selected. The maximum time interval between the task start time (CreationStartTime) and the task end time (CreationEndTime) shall not exceed 7 days.
    :param str creation_start_time: The start time of the task. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Instructions: For the two groups of parameters, task time (CreationStartTime and CreationEndTime) and TaskId, one of them must be selected. The maximum time interval between the task start time (CreationStartTime) and the task end time (CreationEndTime) cannot exceed 7 days.
    :param str instance_id: Instance ID.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name.
    :param str task_action: Task name.
    :param Sequence[str] task_categories: Task Category. The values are as shown in the following list, and multiple values can be selected: BackupRecoveryManagement: Backup and Recovery Management. DatabaseAdminManagement: Database Administration Management. DatabaseProxy: Database Proxy. HighAvailability: High Availability. InstanceAttribute: Instance Attribute. InstanceManagement: Instance Management. NetworkManagement: Network Management. SecurityManagement: Security Management. SystemMaintainManagement: System Operation and Maintenance Management. VersionUpgrade: Version Upgrade.
    :param str task_id: Task ID. Description: For the two groups of parameters, TaskId and task time (CreationStartTime and CreationEndTime), one of them must be selected.
    :param str task_source: Task source. Values: User: Tenant. System: System. SystemUser: Internal operation and maintenance. UserMaintain: Maintenance operations initiated by system/operation and maintenance administrators and visible to tenants.
    :param Sequence[str] task_statuses: Task status. The values are as shown in the following list, and multiple values can be selected: WaitSwitch: Waiting for switching. WaitStart: Waiting for execution. Canceled: Canceled. Stopped: Terminated. Running_BeforeSwitch: Running (before switching). Timeout: Execution Timeout. Success: Execution Success. Failed: Execution Failed. Running: In Execution. Stopping: In Termination.
    :param str task_type: Task type. Values: Web: Console request. OpenAPI: OpenAPI request. AssumeRole: Role - playing request. Other: Other requests.
    """
    pulumi.log.warn("""tasks is deprecated: volcengine.rds_mysql.Tasks has been deprecated in favor of volcengine.rds_mysql.getTasks""")
    ...
