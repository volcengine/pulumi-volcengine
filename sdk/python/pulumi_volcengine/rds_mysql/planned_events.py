# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'PlannedEventsResult',
    'AwaitablePlannedEventsResult',
    'planned_events',
    'planned_events_output',
]

warnings.warn("""volcengine.rds_mysql.PlannedEvents has been deprecated in favor of volcengine.rds_mysql.getPlannedEvents""", DeprecationWarning)

@pulumi.output_type
class PlannedEventsResult:
    """
    A collection of values returned by PlannedEvents.
    """
    def __init__(__self__, begin_time=None, end_time=None, event_id=None, event_types=None, id=None, instance_id=None, output_file=None, planned_events=None, statuses=None, total_count=None):
        if begin_time and not isinstance(begin_time, str):
            raise TypeError("Expected argument 'begin_time' to be a str")
        pulumi.set(__self__, "begin_time", begin_time)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if event_id and not isinstance(event_id, str):
            raise TypeError("Expected argument 'event_id' to be a str")
        pulumi.set(__self__, "event_id", event_id)
        if event_types and not isinstance(event_types, list):
            raise TypeError("Expected argument 'event_types' to be a list")
        pulumi.set(__self__, "event_types", event_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if planned_events and not isinstance(planned_events, list):
            raise TypeError("Expected argument 'planned_events' to be a list")
        pulumi.set(__self__, "planned_events", planned_events)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[str]:
        return pulumi.get(self, "begin_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[str]:
        """
        The id of the planned event.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> Optional[Sequence[str]]:
        """
        The type of the planned event.
        """
        return pulumi.get(self, "event_types")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="plannedEvents")
    def planned_events(self) -> Sequence['outputs.PlannedEventsPlannedEventResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "planned_events")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        """
        Event status.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitablePlannedEventsResult(PlannedEventsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return PlannedEventsResult(
            begin_time=self.begin_time,
            end_time=self.end_time,
            event_id=self.event_id,
            event_types=self.event_types,
            id=self.id,
            instance_id=self.instance_id,
            output_file=self.output_file,
            planned_events=self.planned_events,
            statuses=self.statuses,
            total_count=self.total_count)


def planned_events(begin_time: Optional[str] = None,
                   end_time: Optional[str] = None,
                   event_id: Optional[str] = None,
                   event_types: Optional[Sequence[str]] = None,
                   instance_id: Optional[str] = None,
                   output_file: Optional[str] = None,
                   statuses: Optional[Sequence[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitablePlannedEventsResult:
    """
    Use this data source to query detailed information of rds mysql planned events
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.rds_mysql.get_planned_events(instance_id="mysql-b51d37110dd1")
    ```


    :param str begin_time: The start time of the planned event.
    :param str end_time: The end time of the planned event.
    :param str event_id: The id of the planned event.
    :param Sequence[str] event_types: The type of the planned event.
    :param str instance_id: The id of the instance.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] statuses: The status of the planned event.
    """
    pulumi.log.warn("""planned_events is deprecated: volcengine.rds_mysql.PlannedEvents has been deprecated in favor of volcengine.rds_mysql.getPlannedEvents""")
    __args__ = dict()
    __args__['beginTime'] = begin_time
    __args__['endTime'] = end_time
    __args__['eventId'] = event_id
    __args__['eventTypes'] = event_types
    __args__['instanceId'] = instance_id
    __args__['outputFile'] = output_file
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:rds_mysql/plannedEvents:PlannedEvents', __args__, opts=opts, typ=PlannedEventsResult).value

    return AwaitablePlannedEventsResult(
        begin_time=pulumi.get(__ret__, 'begin_time'),
        end_time=pulumi.get(__ret__, 'end_time'),
        event_id=pulumi.get(__ret__, 'event_id'),
        event_types=pulumi.get(__ret__, 'event_types'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        planned_events=pulumi.get(__ret__, 'planned_events'),
        statuses=pulumi.get(__ret__, 'statuses'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(planned_events)
def planned_events_output(begin_time: Optional[pulumi.Input[Optional[str]]] = None,
                          end_time: Optional[pulumi.Input[Optional[str]]] = None,
                          event_id: Optional[pulumi.Input[Optional[str]]] = None,
                          event_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                          output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[PlannedEventsResult]:
    """
    Use this data source to query detailed information of rds mysql planned events
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.rds_mysql.get_planned_events(instance_id="mysql-b51d37110dd1")
    ```


    :param str begin_time: The start time of the planned event.
    :param str end_time: The end time of the planned event.
    :param str event_id: The id of the planned event.
    :param Sequence[str] event_types: The type of the planned event.
    :param str instance_id: The id of the instance.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] statuses: The status of the planned event.
    """
    pulumi.log.warn("""planned_events is deprecated: volcengine.rds_mysql.PlannedEvents has been deprecated in favor of volcengine.rds_mysql.getPlannedEvents""")
    ...
