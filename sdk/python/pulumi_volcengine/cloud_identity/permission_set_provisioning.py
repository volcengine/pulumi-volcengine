# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PermissionSetProvisioningArgs', 'PermissionSetProvisioning']

@pulumi.input_type
class PermissionSetProvisioningArgs:
    def __init__(__self__, *,
                 permission_set_id: pulumi.Input[str],
                 provisioning_status: pulumi.Input[str],
                 target_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a PermissionSetProvisioning resource.
        :param pulumi.Input[str] permission_set_id: The id of the cloud identity permission set.
        :param pulumi.Input[str] provisioning_status: The target provisioning status of the cloud identity permission set. This field must be specified as `Provisioned` in order to provision the updated permission set. 
               When deleting this resource, resource `cloud_identity.PermissionSetAssignment` must be deleted first.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity permission set provisioning.
        """
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        pulumi.set(__self__, "provisioning_status", provisioning_status)
        pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Input[str]:
        """
        The id of the cloud identity permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_set_id", value)

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> pulumi.Input[str]:
        """
        The target provisioning status of the cloud identity permission set. This field must be specified as `Provisioned` in order to provision the updated permission set. 
        When deleting this resource, resource `cloud_identity.PermissionSetAssignment` must be deleted first.
        """
        return pulumi.get(self, "provisioning_status")

    @provisioning_status.setter
    def provisioning_status(self, value: pulumi.Input[str]):
        pulumi.set(self, "provisioning_status", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Input[str]:
        """
        The target account id of the cloud identity permission set provisioning.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_id", value)


@pulumi.input_type
class _PermissionSetProvisioningState:
    def __init__(__self__, *,
                 permission_set_id: Optional[pulumi.Input[str]] = None,
                 provisioning_status: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PermissionSetProvisioning resources.
        :param pulumi.Input[str] permission_set_id: The id of the cloud identity permission set.
        :param pulumi.Input[str] provisioning_status: The target provisioning status of the cloud identity permission set. This field must be specified as `Provisioned` in order to provision the updated permission set. 
               When deleting this resource, resource `cloud_identity.PermissionSetAssignment` must be deleted first.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity permission set provisioning.
        """
        if permission_set_id is not None:
            pulumi.set(__self__, "permission_set_id", permission_set_id)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the cloud identity permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_set_id", value)

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional[pulumi.Input[str]]:
        """
        The target provisioning status of the cloud identity permission set. This field must be specified as `Provisioned` in order to provision the updated permission set. 
        When deleting this resource, resource `cloud_identity.PermissionSetAssignment` must be deleted first.
        """
        return pulumi.get(self, "provisioning_status")

    @provisioning_status.setter
    def provisioning_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioning_status", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target account id of the cloud identity permission set provisioning.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)


class PermissionSetProvisioning(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 permission_set_id: Optional[pulumi.Input[str]] = None,
                 provisioning_status: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage cloud identity permission set provisioning
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_permission_set = volcengine.cloud_identity.PermissionSet("fooPermissionSet",
            description="tf",
            session_duration=5000,
            permission_policies=[
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="AdministratorAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="ReadOnlyAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="Inline",
                    inline_policy_document="{\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":[\\"auto_scaling:DescribeScalingGroups\\"],\\"Resource\\":[\\"*\\"]}]}",
                ),
            ])
        foo_user = volcengine.cloud_identity.User("fooUser",
            user_name="acc-test-user",
            display_name="tf-test-user",
            description="tf",
            email="88@qq.com",
            phone="181")
        foo_permission_set_assignment = volcengine.cloud_identity.PermissionSetAssignment("fooPermissionSetAssignment",
            permission_set_id=foo_permission_set.id,
            target_id="210026****",
            principal_type="User",
            principal_id=foo_user.id)
        # When the `volcengine_cloud_identity_permission_set` is updated, you can use this resource to provision the permission set.
        # When deleting this resource, resource `volcengine_cloud_identity_permission_set_assignment` must be deleted first.
        foo_permission_set_provisioning = volcengine.cloud_identity.PermissionSetProvisioning("fooPermissionSetProvisioning",
            permission_set_id=foo_permission_set.id,
            target_id="210026****",
            provisioning_status="Provisioned")
        ```

        ## Import

        CloudIdentityPermissionSetProvisioning can be imported using the permission_set_id:target_id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_identity/permissionSetProvisioning:PermissionSetProvisioning default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] permission_set_id: The id of the cloud identity permission set.
        :param pulumi.Input[str] provisioning_status: The target provisioning status of the cloud identity permission set. This field must be specified as `Provisioned` in order to provision the updated permission set. 
               When deleting this resource, resource `cloud_identity.PermissionSetAssignment` must be deleted first.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity permission set provisioning.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PermissionSetProvisioningArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cloud identity permission set provisioning
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_permission_set = volcengine.cloud_identity.PermissionSet("fooPermissionSet",
            description="tf",
            session_duration=5000,
            permission_policies=[
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="AdministratorAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="ReadOnlyAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="Inline",
                    inline_policy_document="{\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":[\\"auto_scaling:DescribeScalingGroups\\"],\\"Resource\\":[\\"*\\"]}]}",
                ),
            ])
        foo_user = volcengine.cloud_identity.User("fooUser",
            user_name="acc-test-user",
            display_name="tf-test-user",
            description="tf",
            email="88@qq.com",
            phone="181")
        foo_permission_set_assignment = volcengine.cloud_identity.PermissionSetAssignment("fooPermissionSetAssignment",
            permission_set_id=foo_permission_set.id,
            target_id="210026****",
            principal_type="User",
            principal_id=foo_user.id)
        # When the `volcengine_cloud_identity_permission_set` is updated, you can use this resource to provision the permission set.
        # When deleting this resource, resource `volcengine_cloud_identity_permission_set_assignment` must be deleted first.
        foo_permission_set_provisioning = volcengine.cloud_identity.PermissionSetProvisioning("fooPermissionSetProvisioning",
            permission_set_id=foo_permission_set.id,
            target_id="210026****",
            provisioning_status="Provisioned")
        ```

        ## Import

        CloudIdentityPermissionSetProvisioning can be imported using the permission_set_id:target_id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_identity/permissionSetProvisioning:PermissionSetProvisioning default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param PermissionSetProvisioningArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PermissionSetProvisioningArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 permission_set_id: Optional[pulumi.Input[str]] = None,
                 provisioning_status: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PermissionSetProvisioningArgs.__new__(PermissionSetProvisioningArgs)

            if permission_set_id is None and not opts.urn:
                raise TypeError("Missing required property 'permission_set_id'")
            __props__.__dict__["permission_set_id"] = permission_set_id
            if provisioning_status is None and not opts.urn:
                raise TypeError("Missing required property 'provisioning_status'")
            __props__.__dict__["provisioning_status"] = provisioning_status
            if target_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_id'")
            __props__.__dict__["target_id"] = target_id
        super(PermissionSetProvisioning, __self__).__init__(
            'volcengine:cloud_identity/permissionSetProvisioning:PermissionSetProvisioning',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            permission_set_id: Optional[pulumi.Input[str]] = None,
            provisioning_status: Optional[pulumi.Input[str]] = None,
            target_id: Optional[pulumi.Input[str]] = None) -> 'PermissionSetProvisioning':
        """
        Get an existing PermissionSetProvisioning resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] permission_set_id: The id of the cloud identity permission set.
        :param pulumi.Input[str] provisioning_status: The target provisioning status of the cloud identity permission set. This field must be specified as `Provisioned` in order to provision the updated permission set. 
               When deleting this resource, resource `cloud_identity.PermissionSetAssignment` must be deleted first.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity permission set provisioning.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PermissionSetProvisioningState.__new__(_PermissionSetProvisioningState)

        __props__.__dict__["permission_set_id"] = permission_set_id
        __props__.__dict__["provisioning_status"] = provisioning_status
        __props__.__dict__["target_id"] = target_id
        return PermissionSetProvisioning(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Output[str]:
        """
        The id of the cloud identity permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> pulumi.Output[str]:
        """
        The target provisioning status of the cloud identity permission set. This field must be specified as `Provisioned` in order to provision the updated permission set. 
        When deleting this resource, resource `cloud_identity.PermissionSetAssignment` must be deleted first.
        """
        return pulumi.get(self, "provisioning_status")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[str]:
        """
        The target account id of the cloud identity permission set provisioning.
        """
        return pulumi.get(self, "target_id")

