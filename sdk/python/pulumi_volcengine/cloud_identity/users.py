# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'UsersResult',
    'AwaitableUsersResult',
    'users',
    'users_output',
]

@pulumi.output_type
class UsersResult:
    """
    A collection of values returned by Users.
    """
    def __init__(__self__, department_id=None, display_name=None, id=None, name_regex=None, output_file=None, source=None, total_count=None, user_name=None, users=None):
        if department_id and not isinstance(department_id, str):
            raise TypeError("Expected argument 'department_id' to be a str")
        pulumi.set(__self__, "department_id", department_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="departmentId")
    def department_id(self) -> Optional[str]:
        return pulumi.get(self, "department_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the cloud identity user.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the cloud identity user.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        The name of the cloud identity user.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.UsersUserResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "users")


class AwaitableUsersResult(UsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return UsersResult(
            department_id=self.department_id,
            display_name=self.display_name,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            source=self.source,
            total_count=self.total_count,
            user_name=self.user_name,
            users=self.users)


def users(department_id: Optional[str] = None,
          display_name: Optional[str] = None,
          name_regex: Optional[str] = None,
          output_file: Optional[str] = None,
          source: Optional[str] = None,
          user_name: Optional[str] = None,
          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableUsersResult:
    """
    Use this data source to query detailed information of cloud identity users
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_user = []
    for range in [{"value": i} for i in range(0, 2)]:
        foo_user.append(volcengine.cloud_identity.User(f"fooUser-{range['value']}",
            description="tf",
            display_name=f"tf-test-user-{range['value']}",
            email="88@qq.com",
            phone="181",
            user_name=f"acc-test-user-{range['value']}"))
    foo_users = volcengine.cloud_identity.users(source="Manual",
        user_name="acc-test-user")
    ```


    :param str department_id: The department id.
    :param str display_name: The display name of cloud identity user.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str source: The source of cloud identity user. Valid values: `Sync`, `Manual`.
    :param str user_name: The name of cloud identity user.
    """
    __args__ = dict()
    __args__['departmentId'] = department_id
    __args__['displayName'] = display_name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['source'] = source
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cloud_identity/users:Users', __args__, opts=opts, typ=UsersResult).value

    return AwaitableUsersResult(
        department_id=pulumi.get(__ret__, 'department_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        source=pulumi.get(__ret__, 'source'),
        total_count=pulumi.get(__ret__, 'total_count'),
        user_name=pulumi.get(__ret__, 'user_name'),
        users=pulumi.get(__ret__, 'users'))


@_utilities.lift_output_func(users)
def users_output(department_id: Optional[pulumi.Input[Optional[str]]] = None,
                 display_name: Optional[pulumi.Input[Optional[str]]] = None,
                 name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                 output_file: Optional[pulumi.Input[Optional[str]]] = None,
                 source: Optional[pulumi.Input[Optional[str]]] = None,
                 user_name: Optional[pulumi.Input[Optional[str]]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[UsersResult]:
    """
    Use this data source to query detailed information of cloud identity users
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_user = []
    for range in [{"value": i} for i in range(0, 2)]:
        foo_user.append(volcengine.cloud_identity.User(f"fooUser-{range['value']}",
            description="tf",
            display_name=f"tf-test-user-{range['value']}",
            email="88@qq.com",
            phone="181",
            user_name=f"acc-test-user-{range['value']}"))
    foo_users = volcengine.cloud_identity.users(source="Manual",
        user_name="acc-test-user")
    ```


    :param str department_id: The department id.
    :param str display_name: The display name of cloud identity user.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str source: The source of cloud identity user. Valid values: `Sync`, `Manual`.
    :param str user_name: The name of cloud identity user.
    """
    ...
