# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GroupMemberArgs',
    'PermissionSetPermissionPolicyArgs',
]

@pulumi.input_type
class GroupMemberArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 identity_type: Optional[pulumi.Input[str]] = None,
                 join_time: Optional[pulumi.Input[str]] = None,
                 phone: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: The description of the cloud identity group.
        :param pulumi.Input[str] display_name: The display name of the cloud identity group.
        :param pulumi.Input[str] email: The email of the cloud identity user.
        :param pulumi.Input[str] identity_type: The identity type of the cloud identity user.
        :param pulumi.Input[str] join_time: The join time of the cloud identity user.
        :param pulumi.Input[str] phone: The phone of the cloud identity user.
        :param pulumi.Input[str] source: The source of the cloud identity group.
        :param pulumi.Input[str] user_id: The id of the cloud identity user.
        :param pulumi.Input[str] user_name: The name of the cloud identity user.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if identity_type is not None:
            pulumi.set(__self__, "identity_type", identity_type)
        if join_time is not None:
            pulumi.set(__self__, "join_time", join_time)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the cloud identity group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the cloud identity group.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The email of the cloud identity user.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> Optional[pulumi.Input[str]]:
        """
        The identity type of the cloud identity user.
        """
        return pulumi.get(self, "identity_type")

    @identity_type.setter
    def identity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_type", value)

    @property
    @pulumi.getter(name="joinTime")
    def join_time(self) -> Optional[pulumi.Input[str]]:
        """
        The join time of the cloud identity user.
        """
        return pulumi.get(self, "join_time")

    @join_time.setter
    def join_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_time", value)

    @property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[str]]:
        """
        The phone of the cloud identity user.
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        The source of the cloud identity group.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the cloud identity user.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cloud identity user.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class PermissionSetPermissionPolicyArgs:
    def __init__(__self__, *,
                 permission_policy_type: pulumi.Input[str],
                 inline_policy_document: Optional[pulumi.Input[str]] = None,
                 permission_policy_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] permission_policy_type: The type of the cloud identity permission set policy. Valid values: `System`, `Inline`.
        :param pulumi.Input[str] inline_policy_document: The document of the cloud identity permission set inline policy. When the `permission_policy_type` is `Inline`, this field must be specified.
        :param pulumi.Input[str] permission_policy_name: The name of the cloud identity permission set system policy. When the `permission_policy_type` is `System`, this field must be specified.
        """
        pulumi.set(__self__, "permission_policy_type", permission_policy_type)
        if inline_policy_document is not None:
            pulumi.set(__self__, "inline_policy_document", inline_policy_document)
        if permission_policy_name is not None:
            pulumi.set(__self__, "permission_policy_name", permission_policy_name)

    @property
    @pulumi.getter(name="permissionPolicyType")
    def permission_policy_type(self) -> pulumi.Input[str]:
        """
        The type of the cloud identity permission set policy. Valid values: `System`, `Inline`.
        """
        return pulumi.get(self, "permission_policy_type")

    @permission_policy_type.setter
    def permission_policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_policy_type", value)

    @property
    @pulumi.getter(name="inlinePolicyDocument")
    def inline_policy_document(self) -> Optional[pulumi.Input[str]]:
        """
        The document of the cloud identity permission set inline policy. When the `permission_policy_type` is `Inline`, this field must be specified.
        """
        return pulumi.get(self, "inline_policy_document")

    @inline_policy_document.setter
    def inline_policy_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inline_policy_document", value)

    @property
    @pulumi.getter(name="permissionPolicyName")
    def permission_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cloud identity permission set system policy. When the `permission_policy_type` is `System`, this field must be specified.
        """
        return pulumi.get(self, "permission_policy_name")

    @permission_policy_name.setter
    def permission_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_policy_name", value)


