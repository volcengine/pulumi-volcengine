# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'PermissionSetProvisioningsResult',
    'AwaitablePermissionSetProvisioningsResult',
    'permission_set_provisionings',
    'permission_set_provisionings_output',
]

@pulumi.output_type
class PermissionSetProvisioningsResult:
    """
    A collection of values returned by PermissionSetProvisionings.
    """
    def __init__(__self__, id=None, name_regex=None, output_file=None, permission_provisionings=None, permission_set_id=None, target_id=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if permission_provisionings and not isinstance(permission_provisionings, list):
            raise TypeError("Expected argument 'permission_provisionings' to be a list")
        pulumi.set(__self__, "permission_provisionings", permission_provisionings)
        if permission_set_id and not isinstance(permission_set_id, str):
            raise TypeError("Expected argument 'permission_set_id' to be a str")
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        if target_id and not isinstance(target_id, str):
            raise TypeError("Expected argument 'target_id' to be a str")
        pulumi.set(__self__, "target_id", target_id)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="permissionProvisionings")
    def permission_provisionings(self) -> Sequence['outputs.PermissionSetProvisioningsPermissionProvisioningResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "permission_provisionings")

    @property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> Optional[str]:
        """
        The id of the cloud identity permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        """
        The target account id of the cloud identity permission set provisioning.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitablePermissionSetProvisioningsResult(PermissionSetProvisioningsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return PermissionSetProvisioningsResult(
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            permission_provisionings=self.permission_provisionings,
            permission_set_id=self.permission_set_id,
            target_id=self.target_id,
            total_count=self.total_count)


def permission_set_provisionings(name_regex: Optional[str] = None,
                                 output_file: Optional[str] = None,
                                 permission_set_id: Optional[str] = None,
                                 target_id: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitablePermissionSetProvisioningsResult:
    """
    Use this data source to query detailed information of cloud identity permission set provisionings
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cloud_identity.permission_set_provisionings(target_id="210026****")
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str permission_set_id: The id of cloud identity permission set.
    :param str target_id: The target account id of cloud identity permission set.
    """
    __args__ = dict()
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['permissionSetId'] = permission_set_id
    __args__['targetId'] = target_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cloud_identity/permissionSetProvisionings:PermissionSetProvisionings', __args__, opts=opts, typ=PermissionSetProvisioningsResult).value

    return AwaitablePermissionSetProvisioningsResult(
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        permission_provisionings=pulumi.get(__ret__, 'permission_provisionings'),
        permission_set_id=pulumi.get(__ret__, 'permission_set_id'),
        target_id=pulumi.get(__ret__, 'target_id'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(permission_set_provisionings)
def permission_set_provisionings_output(name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                                        output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                        permission_set_id: Optional[pulumi.Input[Optional[str]]] = None,
                                        target_id: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[PermissionSetProvisioningsResult]:
    """
    Use this data source to query detailed information of cloud identity permission set provisionings
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cloud_identity.permission_set_provisionings(target_id="210026****")
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str permission_set_id: The id of cloud identity permission set.
    :param str target_id: The target account id of cloud identity permission set.
    """
    ...
