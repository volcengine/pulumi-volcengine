# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PermissionSetAssignmentArgs', 'PermissionSetAssignment']

@pulumi.input_type
class PermissionSetAssignmentArgs:
    def __init__(__self__, *,
                 permission_set_id: pulumi.Input[str],
                 principal_id: pulumi.Input[str],
                 principal_type: pulumi.Input[str],
                 target_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a PermissionSetAssignment resource.
        :param pulumi.Input[str] permission_set_id: The id of the cloud identity permission set.
        :param pulumi.Input[str] principal_id: The principal id of the cloud identity permission set. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        :param pulumi.Input[str] principal_type: The principal type of the cloud identity permission set. Valid values: `User`, `Group`.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity permission set assignment.
        """
        pulumi.set(__self__, "permission_set_id", permission_set_id)
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "principal_type", principal_type)
        pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Input[str]:
        """
        The id of the cloud identity permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_set_id", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Input[str]:
        """
        The principal id of the cloud identity permission set. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> pulumi.Input[str]:
        """
        The principal type of the cloud identity permission set. Valid values: `User`, `Group`.
        """
        return pulumi.get(self, "principal_type")

    @principal_type.setter
    def principal_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal_type", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Input[str]:
        """
        The target account id of the cloud identity permission set assignment.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_id", value)


@pulumi.input_type
class _PermissionSetAssignmentState:
    def __init__(__self__, *,
                 permission_set_id: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 principal_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PermissionSetAssignment resources.
        :param pulumi.Input[str] permission_set_id: The id of the cloud identity permission set.
        :param pulumi.Input[str] principal_id: The principal id of the cloud identity permission set. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        :param pulumi.Input[str] principal_type: The principal type of the cloud identity permission set. Valid values: `User`, `Group`.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity permission set assignment.
        """
        if permission_set_id is not None:
            pulumi.set(__self__, "permission_set_id", permission_set_id)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if principal_type is not None:
            pulumi.set(__self__, "principal_type", principal_type)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the cloud identity permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @permission_set_id.setter
    def permission_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_set_id", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The principal id of the cloud identity permission set. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> Optional[pulumi.Input[str]]:
        """
        The principal type of the cloud identity permission set. Valid values: `User`, `Group`.
        """
        return pulumi.get(self, "principal_type")

    @principal_type.setter
    def principal_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_type", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target account id of the cloud identity permission set assignment.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)


class PermissionSetAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 permission_set_id: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 principal_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage cloud identity permission set assignment
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_permission_set = volcengine.cloud_identity.PermissionSet("fooPermissionSet",
            description="tf",
            session_duration=5000,
            permission_policies=[
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="AdministratorAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="ReadOnlyAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="Inline",
                    inline_policy_document="{\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":[\\"auto_scaling:DescribeScalingGroups\\"],\\"Resource\\":[\\"*\\"]}]}",
                ),
            ])
        foo_user = volcengine.cloud_identity.User("fooUser",
            user_name="acc-test-user",
            display_name="tf-test-user",
            description="tf",
            email="88@qq.com",
            phone="181")
        foo_permission_set_assignment = volcengine.cloud_identity.PermissionSetAssignment("fooPermissionSetAssignment",
            permission_set_id=foo_permission_set.id,
            target_id="210026****",
            principal_type="User",
            principal_id=foo_user.id)
        ```

        ## Import

        CloudIdentityPermissionSetAssignment can be imported using the permission_set_id:target_id:principal_type:principal_id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_identity/permissionSetAssignment:PermissionSetAssignment default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] permission_set_id: The id of the cloud identity permission set.
        :param pulumi.Input[str] principal_id: The principal id of the cloud identity permission set. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        :param pulumi.Input[str] principal_type: The principal type of the cloud identity permission set. Valid values: `User`, `Group`.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity permission set assignment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PermissionSetAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cloud identity permission set assignment
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_permission_set = volcengine.cloud_identity.PermissionSet("fooPermissionSet",
            description="tf",
            session_duration=5000,
            permission_policies=[
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="AdministratorAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="ReadOnlyAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="Inline",
                    inline_policy_document="{\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":[\\"auto_scaling:DescribeScalingGroups\\"],\\"Resource\\":[\\"*\\"]}]}",
                ),
            ])
        foo_user = volcengine.cloud_identity.User("fooUser",
            user_name="acc-test-user",
            display_name="tf-test-user",
            description="tf",
            email="88@qq.com",
            phone="181")
        foo_permission_set_assignment = volcengine.cloud_identity.PermissionSetAssignment("fooPermissionSetAssignment",
            permission_set_id=foo_permission_set.id,
            target_id="210026****",
            principal_type="User",
            principal_id=foo_user.id)
        ```

        ## Import

        CloudIdentityPermissionSetAssignment can be imported using the permission_set_id:target_id:principal_type:principal_id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_identity/permissionSetAssignment:PermissionSetAssignment default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param PermissionSetAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PermissionSetAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 permission_set_id: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 principal_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PermissionSetAssignmentArgs.__new__(PermissionSetAssignmentArgs)

            if permission_set_id is None and not opts.urn:
                raise TypeError("Missing required property 'permission_set_id'")
            __props__.__dict__["permission_set_id"] = permission_set_id
            if principal_id is None and not opts.urn:
                raise TypeError("Missing required property 'principal_id'")
            __props__.__dict__["principal_id"] = principal_id
            if principal_type is None and not opts.urn:
                raise TypeError("Missing required property 'principal_type'")
            __props__.__dict__["principal_type"] = principal_type
            if target_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_id'")
            __props__.__dict__["target_id"] = target_id
        super(PermissionSetAssignment, __self__).__init__(
            'volcengine:cloud_identity/permissionSetAssignment:PermissionSetAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            permission_set_id: Optional[pulumi.Input[str]] = None,
            principal_id: Optional[pulumi.Input[str]] = None,
            principal_type: Optional[pulumi.Input[str]] = None,
            target_id: Optional[pulumi.Input[str]] = None) -> 'PermissionSetAssignment':
        """
        Get an existing PermissionSetAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] permission_set_id: The id of the cloud identity permission set.
        :param pulumi.Input[str] principal_id: The principal id of the cloud identity permission set. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        :param pulumi.Input[str] principal_type: The principal type of the cloud identity permission set. Valid values: `User`, `Group`.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity permission set assignment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PermissionSetAssignmentState.__new__(_PermissionSetAssignmentState)

        __props__.__dict__["permission_set_id"] = permission_set_id
        __props__.__dict__["principal_id"] = principal_id
        __props__.__dict__["principal_type"] = principal_type
        __props__.__dict__["target_id"] = target_id
        return PermissionSetAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="permissionSetId")
    def permission_set_id(self) -> pulumi.Output[str]:
        """
        The id of the cloud identity permission set.
        """
        return pulumi.get(self, "permission_set_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Output[str]:
        """
        The principal id of the cloud identity permission set. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> pulumi.Output[str]:
        """
        The principal type of the cloud identity permission set. Valid values: `User`, `Group`.
        """
        return pulumi.get(self, "principal_type")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[str]:
        """
        The target account id of the cloud identity permission set assignment.
        """
        return pulumi.get(self, "target_id")

