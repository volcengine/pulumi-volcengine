# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GroupArgs', 'Group']

@pulumi.input_type
class GroupArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[str],
                 join_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Group resource.
        :param pulumi.Input[str] group_name: The name of the cloud identity group.
        :param pulumi.Input[str] join_type: The user join type of the cloud identity group.
        :param pulumi.Input[str] description: The description of the cloud identity group.
        :param pulumi.Input[str] display_name: The display name of the cloud identity group.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "join_type", join_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        The name of the cloud identity group.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="joinType")
    def join_type(self) -> pulumi.Input[str]:
        """
        The user join type of the cloud identity group.
        """
        return pulumi.get(self, "join_type")

    @join_type.setter
    def join_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "join_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the cloud identity group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the cloud identity group.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class _GroupState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 join_type: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Group resources.
        :param pulumi.Input[str] description: The description of the cloud identity group.
        :param pulumi.Input[str] display_name: The display name of the cloud identity group.
        :param pulumi.Input[str] group_name: The name of the cloud identity group.
        :param pulumi.Input[str] join_type: The user join type of the cloud identity group.
        :param pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]] members: The member user info of the cloud identity group.
        :param pulumi.Input[str] source: The source of the cloud identity group.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if join_type is not None:
            pulumi.set(__self__, "join_type", join_type)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the cloud identity group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the cloud identity group.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cloud identity group.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="joinType")
    def join_type(self) -> Optional[pulumi.Input[str]]:
        """
        The user join type of the cloud identity group.
        """
        return pulumi.get(self, "join_type")

    @join_type.setter
    def join_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_type", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]]]:
        """
        The member user info of the cloud identity group.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        The source of the cloud identity group.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 join_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage cloud identity group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cloud_identity.Group("foo",
            description="tf",
            display_name="tf-test-group",
            group_name="acc-test-group",
            join_type="Manual")
        ```

        ## Import

        CloudIdentityGroup can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_identity/group:Group default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the cloud identity group.
        :param pulumi.Input[str] display_name: The display name of the cloud identity group.
        :param pulumi.Input[str] group_name: The name of the cloud identity group.
        :param pulumi.Input[str] join_type: The user join type of the cloud identity group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cloud identity group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cloud_identity.Group("foo",
            description="tf",
            display_name="tf-test-group",
            group_name="acc-test-group",
            join_type="Manual")
        ```

        ## Import

        CloudIdentityGroup can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_identity/group:Group default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 join_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupArgs.__new__(GroupArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            if join_type is None and not opts.urn:
                raise TypeError("Missing required property 'join_type'")
            __props__.__dict__["join_type"] = join_type
            __props__.__dict__["members"] = None
            __props__.__dict__["source"] = None
        super(Group, __self__).__init__(
            'volcengine:cloud_identity/group:Group',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            join_type: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMemberArgs']]]]] = None,
            source: Optional[pulumi.Input[str]] = None) -> 'Group':
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the cloud identity group.
        :param pulumi.Input[str] display_name: The display name of the cloud identity group.
        :param pulumi.Input[str] group_name: The name of the cloud identity group.
        :param pulumi.Input[str] join_type: The user join type of the cloud identity group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMemberArgs']]]] members: The member user info of the cloud identity group.
        :param pulumi.Input[str] source: The source of the cloud identity group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupState.__new__(_GroupState)

        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["join_type"] = join_type
        __props__.__dict__["members"] = members
        __props__.__dict__["source"] = source
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the cloud identity group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        The display name of the cloud identity group.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        The name of the cloud identity group.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="joinType")
    def join_type(self) -> pulumi.Output[str]:
        """
        The user join type of the cloud identity group.
        """
        return pulumi.get(self, "join_type")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence['outputs.GroupMember']]:
        """
        The member user info of the cloud identity group.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        The source of the cloud identity group.
        """
        return pulumi.get(self, "source")

