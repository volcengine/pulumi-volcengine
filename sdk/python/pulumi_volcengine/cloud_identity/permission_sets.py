# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'PermissionSetsResult',
    'AwaitablePermissionSetsResult',
    'permission_sets',
    'permission_sets_output',
]

@pulumi.output_type
class PermissionSetsResult:
    """
    A collection of values returned by PermissionSets.
    """
    def __init__(__self__, id=None, ids=None, name_regex=None, output_file=None, permission_sets=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if permission_sets and not isinstance(permission_sets, list):
            raise TypeError("Expected argument 'permission_sets' to be a list")
        pulumi.set(__self__, "permission_sets", permission_sets)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="permissionSets")
    def permission_sets(self) -> Sequence['outputs.PermissionSetsPermissionSetResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "permission_sets")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitablePermissionSetsResult(PermissionSetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return PermissionSetsResult(
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            output_file=self.output_file,
            permission_sets=self.permission_sets,
            total_count=self.total_count)


def permission_sets(ids: Optional[Sequence[str]] = None,
                    name_regex: Optional[str] = None,
                    output_file: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitablePermissionSetsResult:
    """
    Use this data source to query detailed information of cloud identity permission sets
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_permission_set = []
    for range in [{"value": i} for i in range(0, 2)]:
        foo_permission_set.append(volcengine.cloud_identity.PermissionSet(f"fooPermissionSet-{range['value']}",
            description="tf",
            session_duration=5000,
            permission_policies=[
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="AdministratorAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="ReadOnlyAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="Inline",
                    inline_policy_document="{\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":[\\"auto_scaling:DescribeScalingGroups\\"],\\"Resource\\":[\\"*\\"]}]}",
                ),
            ]))
    foo_permission_sets = volcengine.cloud_identity.permission_sets_output(ids=[__item.id for __item in foo_permission_set])
    ```


    :param Sequence[str] ids: A list of cloud identity permission set IDs.
    :param str name_regex: A Name Regex of cloud identity permission set.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cloud_identity/permissionSets:PermissionSets', __args__, opts=opts, typ=PermissionSetsResult).value

    return AwaitablePermissionSetsResult(
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        permission_sets=pulumi.get(__ret__, 'permission_sets'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(permission_sets)
def permission_sets_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                           output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[PermissionSetsResult]:
    """
    Use this data source to query detailed information of cloud identity permission sets
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_permission_set = []
    for range in [{"value": i} for i in range(0, 2)]:
        foo_permission_set.append(volcengine.cloud_identity.PermissionSet(f"fooPermissionSet-{range['value']}",
            description="tf",
            session_duration=5000,
            permission_policies=[
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="AdministratorAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="System",
                    permission_policy_name="ReadOnlyAccess",
                    inline_policy_document="",
                ),
                volcengine.cloud_identity.PermissionSetPermissionPolicyArgs(
                    permission_policy_type="Inline",
                    inline_policy_document="{\\"Statement\\":[{\\"Effect\\":\\"Allow\\",\\"Action\\":[\\"auto_scaling:DescribeScalingGroups\\"],\\"Resource\\":[\\"*\\"]}]}",
                ),
            ]))
    foo_permission_sets = volcengine.cloud_identity.permission_sets_output(ids=[__item.id for __item in foo_permission_set])
    ```


    :param Sequence[str] ids: A list of cloud identity permission set IDs.
    :param str name_regex: A Name Regex of cloud identity permission set.
    :param str output_file: File name where to save data source results.
    """
    ...
