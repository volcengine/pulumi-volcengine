# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UserProvisioningArgs', 'UserProvisioning']

@pulumi.input_type
class UserProvisioningArgs:
    def __init__(__self__, *,
                 deletion_strategy: pulumi.Input[str],
                 duplication_strategy: pulumi.Input[str],
                 identity_source_strategy: pulumi.Input[str],
                 principal_id: pulumi.Input[str],
                 principal_type: pulumi.Input[str],
                 target_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 duplication_suffix: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserProvisioning resource.
        :param pulumi.Input[str] deletion_strategy: The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
        :param pulumi.Input[str] duplication_strategy: The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
        :param pulumi.Input[str] identity_source_strategy: The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
        :param pulumi.Input[str] principal_id: The principal id of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        :param pulumi.Input[str] principal_type: The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity user provisioning.
        :param pulumi.Input[str] description: The description of the cloud identity user provisioning.
        :param pulumi.Input[str] duplication_suffix: The duplication suffix of the cloud identity user provisioning. When the `duplication_strategy` is `KeepBoth`, this field must be specified.
        :param pulumi.Input[str] policy_name: A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principal_type` is `User`.
        """
        pulumi.set(__self__, "deletion_strategy", deletion_strategy)
        pulumi.set(__self__, "duplication_strategy", duplication_strategy)
        pulumi.set(__self__, "identity_source_strategy", identity_source_strategy)
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "principal_type", principal_type)
        pulumi.set(__self__, "target_id", target_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if duplication_suffix is not None:
            pulumi.set(__self__, "duplication_suffix", duplication_suffix)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="deletionStrategy")
    def deletion_strategy(self) -> pulumi.Input[str]:
        """
        The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
        """
        return pulumi.get(self, "deletion_strategy")

    @deletion_strategy.setter
    def deletion_strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "deletion_strategy", value)

    @property
    @pulumi.getter(name="duplicationStrategy")
    def duplication_strategy(self) -> pulumi.Input[str]:
        """
        The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
        """
        return pulumi.get(self, "duplication_strategy")

    @duplication_strategy.setter
    def duplication_strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "duplication_strategy", value)

    @property
    @pulumi.getter(name="identitySourceStrategy")
    def identity_source_strategy(self) -> pulumi.Input[str]:
        """
        The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
        """
        return pulumi.get(self, "identity_source_strategy")

    @identity_source_strategy.setter
    def identity_source_strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_source_strategy", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Input[str]:
        """
        The principal id of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> pulumi.Input[str]:
        """
        The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
        """
        return pulumi.get(self, "principal_type")

    @principal_type.setter
    def principal_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal_type", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Input[str]:
        """
        The target account id of the cloud identity user provisioning.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the cloud identity user provisioning.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="duplicationSuffix")
    def duplication_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The duplication suffix of the cloud identity user provisioning. When the `duplication_strategy` is `KeepBoth`, this field must be specified.
        """
        return pulumi.get(self, "duplication_suffix")

    @duplication_suffix.setter
    def duplication_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplication_suffix", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principal_type` is `User`.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class _UserProvisioningState:
    def __init__(__self__, *,
                 deletion_strategy: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 duplication_strategy: Optional[pulumi.Input[str]] = None,
                 duplication_suffix: Optional[pulumi.Input[str]] = None,
                 identity_source_strategy: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 principal_name: Optional[pulumi.Input[str]] = None,
                 principal_type: Optional[pulumi.Input[str]] = None,
                 provision_status: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserProvisioning resources.
        :param pulumi.Input[str] deletion_strategy: The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
        :param pulumi.Input[str] description: The description of the cloud identity user provisioning.
        :param pulumi.Input[str] duplication_strategy: The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
        :param pulumi.Input[str] duplication_suffix: The duplication suffix of the cloud identity user provisioning. When the `duplication_strategy` is `KeepBoth`, this field must be specified.
        :param pulumi.Input[str] identity_source_strategy: The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
        :param pulumi.Input[str] policy_name: A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principal_type` is `User`.
        :param pulumi.Input[str] principal_id: The principal id of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        :param pulumi.Input[str] principal_name: The principal name of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserName`. When the `principal_type` is `Group`, this field is specified to `GroupName`.
        :param pulumi.Input[str] principal_type: The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
        :param pulumi.Input[str] provision_status: The status of the cloud identity user provisioning.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity user provisioning.
        """
        if deletion_strategy is not None:
            pulumi.set(__self__, "deletion_strategy", deletion_strategy)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if duplication_strategy is not None:
            pulumi.set(__self__, "duplication_strategy", duplication_strategy)
        if duplication_suffix is not None:
            pulumi.set(__self__, "duplication_suffix", duplication_suffix)
        if identity_source_strategy is not None:
            pulumi.set(__self__, "identity_source_strategy", identity_source_strategy)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)
        if principal_type is not None:
            pulumi.set(__self__, "principal_type", principal_type)
        if provision_status is not None:
            pulumi.set(__self__, "provision_status", provision_status)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="deletionStrategy")
    def deletion_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
        """
        return pulumi.get(self, "deletion_strategy")

    @deletion_strategy.setter
    def deletion_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deletion_strategy", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the cloud identity user provisioning.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="duplicationStrategy")
    def duplication_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
        """
        return pulumi.get(self, "duplication_strategy")

    @duplication_strategy.setter
    def duplication_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplication_strategy", value)

    @property
    @pulumi.getter(name="duplicationSuffix")
    def duplication_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The duplication suffix of the cloud identity user provisioning. When the `duplication_strategy` is `KeepBoth`, this field must be specified.
        """
        return pulumi.get(self, "duplication_suffix")

    @duplication_suffix.setter
    def duplication_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplication_suffix", value)

    @property
    @pulumi.getter(name="identitySourceStrategy")
    def identity_source_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
        """
        return pulumi.get(self, "identity_source_strategy")

    @identity_source_strategy.setter
    def identity_source_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_source_strategy", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principal_type` is `User`.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The principal id of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[pulumi.Input[str]]:
        """
        The principal name of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserName`. When the `principal_type` is `Group`, this field is specified to `GroupName`.
        """
        return pulumi.get(self, "principal_name")

    @principal_name.setter
    def principal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_name", value)

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> Optional[pulumi.Input[str]]:
        """
        The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
        """
        return pulumi.get(self, "principal_type")

    @principal_type.setter
    def principal_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_type", value)

    @property
    @pulumi.getter(name="provisionStatus")
    def provision_status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the cloud identity user provisioning.
        """
        return pulumi.get(self, "provision_status")

    @provision_status.setter
    def provision_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provision_status", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target account id of the cloud identity user provisioning.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)


class UserProvisioning(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deletion_strategy: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 duplication_strategy: Optional[pulumi.Input[str]] = None,
                 duplication_suffix: Optional[pulumi.Input[str]] = None,
                 identity_source_strategy: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 principal_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage cloud identity user provisioning

        ## Import

        CloudIdentityUserProvisioning can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_identity/userProvisioning:UserProvisioning default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] deletion_strategy: The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
        :param pulumi.Input[str] description: The description of the cloud identity user provisioning.
        :param pulumi.Input[str] duplication_strategy: The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
        :param pulumi.Input[str] duplication_suffix: The duplication suffix of the cloud identity user provisioning. When the `duplication_strategy` is `KeepBoth`, this field must be specified.
        :param pulumi.Input[str] identity_source_strategy: The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
        :param pulumi.Input[str] policy_name: A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principal_type` is `User`.
        :param pulumi.Input[str] principal_id: The principal id of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        :param pulumi.Input[str] principal_type: The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity user provisioning.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserProvisioningArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cloud identity user provisioning

        ## Import

        CloudIdentityUserProvisioning can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_identity/userProvisioning:UserProvisioning default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param UserProvisioningArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserProvisioningArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deletion_strategy: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 duplication_strategy: Optional[pulumi.Input[str]] = None,
                 duplication_suffix: Optional[pulumi.Input[str]] = None,
                 identity_source_strategy: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 principal_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserProvisioningArgs.__new__(UserProvisioningArgs)

            if deletion_strategy is None and not opts.urn:
                raise TypeError("Missing required property 'deletion_strategy'")
            __props__.__dict__["deletion_strategy"] = deletion_strategy
            __props__.__dict__["description"] = description
            if duplication_strategy is None and not opts.urn:
                raise TypeError("Missing required property 'duplication_strategy'")
            __props__.__dict__["duplication_strategy"] = duplication_strategy
            __props__.__dict__["duplication_suffix"] = duplication_suffix
            if identity_source_strategy is None and not opts.urn:
                raise TypeError("Missing required property 'identity_source_strategy'")
            __props__.__dict__["identity_source_strategy"] = identity_source_strategy
            __props__.__dict__["policy_name"] = policy_name
            if principal_id is None and not opts.urn:
                raise TypeError("Missing required property 'principal_id'")
            __props__.__dict__["principal_id"] = principal_id
            if principal_type is None and not opts.urn:
                raise TypeError("Missing required property 'principal_type'")
            __props__.__dict__["principal_type"] = principal_type
            if target_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_id'")
            __props__.__dict__["target_id"] = target_id
            __props__.__dict__["principal_name"] = None
            __props__.__dict__["provision_status"] = None
        super(UserProvisioning, __self__).__init__(
            'volcengine:cloud_identity/userProvisioning:UserProvisioning',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            deletion_strategy: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            duplication_strategy: Optional[pulumi.Input[str]] = None,
            duplication_suffix: Optional[pulumi.Input[str]] = None,
            identity_source_strategy: Optional[pulumi.Input[str]] = None,
            policy_name: Optional[pulumi.Input[str]] = None,
            principal_id: Optional[pulumi.Input[str]] = None,
            principal_name: Optional[pulumi.Input[str]] = None,
            principal_type: Optional[pulumi.Input[str]] = None,
            provision_status: Optional[pulumi.Input[str]] = None,
            target_id: Optional[pulumi.Input[str]] = None) -> 'UserProvisioning':
        """
        Get an existing UserProvisioning resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] deletion_strategy: The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
        :param pulumi.Input[str] description: The description of the cloud identity user provisioning.
        :param pulumi.Input[str] duplication_strategy: The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
        :param pulumi.Input[str] duplication_suffix: The duplication suffix of the cloud identity user provisioning. When the `duplication_strategy` is `KeepBoth`, this field must be specified.
        :param pulumi.Input[str] identity_source_strategy: The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
        :param pulumi.Input[str] policy_name: A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principal_type` is `User`.
        :param pulumi.Input[str] principal_id: The principal id of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        :param pulumi.Input[str] principal_name: The principal name of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserName`. When the `principal_type` is `Group`, this field is specified to `GroupName`.
        :param pulumi.Input[str] principal_type: The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
        :param pulumi.Input[str] provision_status: The status of the cloud identity user provisioning.
        :param pulumi.Input[str] target_id: The target account id of the cloud identity user provisioning.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserProvisioningState.__new__(_UserProvisioningState)

        __props__.__dict__["deletion_strategy"] = deletion_strategy
        __props__.__dict__["description"] = description
        __props__.__dict__["duplication_strategy"] = duplication_strategy
        __props__.__dict__["duplication_suffix"] = duplication_suffix
        __props__.__dict__["identity_source_strategy"] = identity_source_strategy
        __props__.__dict__["policy_name"] = policy_name
        __props__.__dict__["principal_id"] = principal_id
        __props__.__dict__["principal_name"] = principal_name
        __props__.__dict__["principal_type"] = principal_type
        __props__.__dict__["provision_status"] = provision_status
        __props__.__dict__["target_id"] = target_id
        return UserProvisioning(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deletionStrategy")
    def deletion_strategy(self) -> pulumi.Output[str]:
        """
        The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
        """
        return pulumi.get(self, "deletion_strategy")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the cloud identity user provisioning.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="duplicationStrategy")
    def duplication_strategy(self) -> pulumi.Output[str]:
        """
        The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
        """
        return pulumi.get(self, "duplication_strategy")

    @property
    @pulumi.getter(name="duplicationSuffix")
    def duplication_suffix(self) -> pulumi.Output[Optional[str]]:
        """
        The duplication suffix of the cloud identity user provisioning. When the `duplication_strategy` is `KeepBoth`, this field must be specified.
        """
        return pulumi.get(self, "duplication_suffix")

    @property
    @pulumi.getter(name="identitySourceStrategy")
    def identity_source_strategy(self) -> pulumi.Output[str]:
        """
        The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
        """
        return pulumi.get(self, "identity_source_strategy")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Output[Optional[str]]:
        """
        A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principal_type` is `User`.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Output[str]:
        """
        The principal id of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> pulumi.Output[str]:
        """
        The principal name of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserName`. When the `principal_type` is `Group`, this field is specified to `GroupName`.
        """
        return pulumi.get(self, "principal_name")

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> pulumi.Output[str]:
        """
        The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
        """
        return pulumi.get(self, "principal_type")

    @property
    @pulumi.getter(name="provisionStatus")
    def provision_status(self) -> pulumi.Output[str]:
        """
        The status of the cloud identity user provisioning.
        """
        return pulumi.get(self, "provision_status")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[str]:
        """
        The target account id of the cloud identity user provisioning.
        """
        return pulumi.get(self, "target_id")

