# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AttachmentArgs', 'Attachment']

@pulumi.input_type
class AttachmentArgs:
    def __init__(__self__, *,
                 allocation_id: pulumi.Input[str],
                 bandwidth_package_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a Attachment resource.
        :param pulumi.Input[str] allocation_id: The ID of the public IP or IPv6 public bandwidth to be added to the shared bandwidth package instance.
        :param pulumi.Input[str] bandwidth_package_id: The bandwidth package id.
        """
        pulumi.set(__self__, "allocation_id", allocation_id)
        pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)

    @property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> pulumi.Input[str]:
        """
        The ID of the public IP or IPv6 public bandwidth to be added to the shared bandwidth package instance.
        """
        return pulumi.get(self, "allocation_id")

    @allocation_id.setter
    def allocation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "allocation_id", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> pulumi.Input[str]:
        """
        The bandwidth package id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "bandwidth_package_id", value)


@pulumi.input_type
class _AttachmentState:
    def __init__(__self__, *,
                 allocation_id: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Attachment resources.
        :param pulumi.Input[str] allocation_id: The ID of the public IP or IPv6 public bandwidth to be added to the shared bandwidth package instance.
        :param pulumi.Input[str] bandwidth_package_id: The bandwidth package id.
        """
        if allocation_id is not None:
            pulumi.set(__self__, "allocation_id", allocation_id)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)

    @property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the public IP or IPv6 public bandwidth to be added to the shared bandwidth package instance.
        """
        return pulumi.get(self, "allocation_id")

    @allocation_id.setter
    def allocation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allocation_id", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        The bandwidth package id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)


class Attachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation_id: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage bandwidth package attachment
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_address = volcengine.eip.Address("fooAddress",
            billing_type="PostPaidByBandwidth",
            bandwidth=1,
            isp="BGP",
            description="acc-test",
            project_name="default")
        ipv4_bandwidth_package = volcengine.bandwidth_package.BandwidthPackage("ipv4BandwidthPackage",
            bandwidth_package_name="acc-test-bp",
            billing_type="PostPaidByBandwidth",
            isp="BGP",
            description="acc-test",
            bandwidth=2,
            protocol="IPv4",
            tags=[volcengine.bandwidth_package.BandwidthPackageTagArgs(
                key="k1",
                value="v1",
            )])
        ipv4_attachment = volcengine.bandwidth_package.Attachment("ipv4Attachment",
            allocation_id=foo_address.id,
            bandwidth_package_id=ipv4_bandwidth_package.id)
        foo_zones = volcengine.ecs.zones()
        foo_images = volcengine.ecs.images(os_type="Linux",
            visibility="public",
            instance_type_id="ecs.g1.large")
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16",
            enable_ipv6=True)
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id,
            ipv6_cidr_block=1)
        foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
            vpc_id=foo_vpc.id,
            security_group_name="acc-test-security-group")
        foo_ipv6_gateway = volcengine.vpc.Ipv6Gateway("fooIpv6Gateway",
            vpc_id=foo_vpc.id,
            description="test")
        foo_instance = volcengine.ecs.Instance("fooInstance",
            image_id=foo_images.images[0].image_id,
            instance_type="ecs.g1.large",
            instance_name="acc-test-ecs-name",
            password="93f0cb0614Aab12",
            instance_charge_type="PostPaid",
            system_volume_type="ESSD_PL0",
            system_volume_size=40,
            subnet_id=foo_subnet.id,
            security_group_ids=[foo_security_group.id],
            ipv6_address_count=1)
        foo_ipv6_addresses = volcengine.vpc.ipv6_addresses_output(associated_instance_id=foo_instance.id)
        foo_ipv6_address_bandwidth = volcengine.vpc.Ipv6AddressBandwidth("fooIpv6AddressBandwidth",
            ipv6_address=foo_ipv6_addresses.ipv6_addresses[0].ipv6_address,
            billing_type="PostPaidByBandwidth",
            bandwidth=5)
        ipv6 = volcengine.bandwidth_package.BandwidthPackage("ipv6",
            bandwidth_package_name="acc-test-bp",
            billing_type="PostPaidByBandwidth",
            isp="BGP",
            description="acc-test",
            bandwidth=2,
            protocol="IPv6",
            tags=[volcengine.bandwidth_package.BandwidthPackageTagArgs(
                key="k1",
                value="v1",
            )])
        foo_attachment = volcengine.bandwidth_package.Attachment("fooAttachment",
            allocation_id=foo_ipv6_address_bandwidth.id,
            bandwidth_package_id=ipv6.id)
        ```

        ## Import

        BandwidthPackageAttachment can be imported using the bandwidth package id and eip id, e.g.

        ```sh
         $ pulumi import volcengine:bandwidth_package/attachment:Attachment default BandwidthPackageId:EipId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allocation_id: The ID of the public IP or IPv6 public bandwidth to be added to the shared bandwidth package instance.
        :param pulumi.Input[str] bandwidth_package_id: The bandwidth package id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage bandwidth package attachment
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_address = volcengine.eip.Address("fooAddress",
            billing_type="PostPaidByBandwidth",
            bandwidth=1,
            isp="BGP",
            description="acc-test",
            project_name="default")
        ipv4_bandwidth_package = volcengine.bandwidth_package.BandwidthPackage("ipv4BandwidthPackage",
            bandwidth_package_name="acc-test-bp",
            billing_type="PostPaidByBandwidth",
            isp="BGP",
            description="acc-test",
            bandwidth=2,
            protocol="IPv4",
            tags=[volcengine.bandwidth_package.BandwidthPackageTagArgs(
                key="k1",
                value="v1",
            )])
        ipv4_attachment = volcengine.bandwidth_package.Attachment("ipv4Attachment",
            allocation_id=foo_address.id,
            bandwidth_package_id=ipv4_bandwidth_package.id)
        foo_zones = volcengine.ecs.zones()
        foo_images = volcengine.ecs.images(os_type="Linux",
            visibility="public",
            instance_type_id="ecs.g1.large")
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16",
            enable_ipv6=True)
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id,
            ipv6_cidr_block=1)
        foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
            vpc_id=foo_vpc.id,
            security_group_name="acc-test-security-group")
        foo_ipv6_gateway = volcengine.vpc.Ipv6Gateway("fooIpv6Gateway",
            vpc_id=foo_vpc.id,
            description="test")
        foo_instance = volcengine.ecs.Instance("fooInstance",
            image_id=foo_images.images[0].image_id,
            instance_type="ecs.g1.large",
            instance_name="acc-test-ecs-name",
            password="93f0cb0614Aab12",
            instance_charge_type="PostPaid",
            system_volume_type="ESSD_PL0",
            system_volume_size=40,
            subnet_id=foo_subnet.id,
            security_group_ids=[foo_security_group.id],
            ipv6_address_count=1)
        foo_ipv6_addresses = volcengine.vpc.ipv6_addresses_output(associated_instance_id=foo_instance.id)
        foo_ipv6_address_bandwidth = volcengine.vpc.Ipv6AddressBandwidth("fooIpv6AddressBandwidth",
            ipv6_address=foo_ipv6_addresses.ipv6_addresses[0].ipv6_address,
            billing_type="PostPaidByBandwidth",
            bandwidth=5)
        ipv6 = volcengine.bandwidth_package.BandwidthPackage("ipv6",
            bandwidth_package_name="acc-test-bp",
            billing_type="PostPaidByBandwidth",
            isp="BGP",
            description="acc-test",
            bandwidth=2,
            protocol="IPv6",
            tags=[volcengine.bandwidth_package.BandwidthPackageTagArgs(
                key="k1",
                value="v1",
            )])
        foo_attachment = volcengine.bandwidth_package.Attachment("fooAttachment",
            allocation_id=foo_ipv6_address_bandwidth.id,
            bandwidth_package_id=ipv6.id)
        ```

        ## Import

        BandwidthPackageAttachment can be imported using the bandwidth package id and eip id, e.g.

        ```sh
         $ pulumi import volcengine:bandwidth_package/attachment:Attachment default BandwidthPackageId:EipId
        ```

        :param str resource_name: The name of the resource.
        :param AttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation_id: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AttachmentArgs.__new__(AttachmentArgs)

            if allocation_id is None and not opts.urn:
                raise TypeError("Missing required property 'allocation_id'")
            __props__.__dict__["allocation_id"] = allocation_id
            if bandwidth_package_id is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth_package_id'")
            __props__.__dict__["bandwidth_package_id"] = bandwidth_package_id
        super(Attachment, __self__).__init__(
            'volcengine:bandwidth_package/attachment:Attachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allocation_id: Optional[pulumi.Input[str]] = None,
            bandwidth_package_id: Optional[pulumi.Input[str]] = None) -> 'Attachment':
        """
        Get an existing Attachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allocation_id: The ID of the public IP or IPv6 public bandwidth to be added to the shared bandwidth package instance.
        :param pulumi.Input[str] bandwidth_package_id: The bandwidth package id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AttachmentState.__new__(_AttachmentState)

        __props__.__dict__["allocation_id"] = allocation_id
        __props__.__dict__["bandwidth_package_id"] = bandwidth_package_id
        return Attachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> pulumi.Output[str]:
        """
        The ID of the public IP or IPv6 public bandwidth to be added to the shared bandwidth package instance.
        """
        return pulumi.get(self, "allocation_id")

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> pulumi.Output[str]:
        """
        The bandwidth package id.
        """
        return pulumi.get(self, "bandwidth_package_id")

