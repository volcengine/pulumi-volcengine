# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SharedConfigArgs', 'SharedConfig']

@pulumi.input_type
class SharedConfigArgs:
    def __init__(__self__, *,
                 config_name: pulumi.Input[str],
                 config_type: pulumi.Input[str],
                 allow_ip_access_rule: Optional[pulumi.Input['SharedConfigAllowIpAccessRuleArgs']] = None,
                 allow_referer_access_rule: Optional[pulumi.Input['SharedConfigAllowRefererAccessRuleArgs']] = None,
                 common_match_list: Optional[pulumi.Input['SharedConfigCommonMatchListArgs']] = None,
                 deny_ip_access_rule: Optional[pulumi.Input['SharedConfigDenyIpAccessRuleArgs']] = None,
                 deny_referer_access_rule: Optional[pulumi.Input['SharedConfigDenyRefererAccessRuleArgs']] = None,
                 project_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SharedConfig resource.
        :param pulumi.Input[str] config_name: The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
        :param pulumi.Input[str] config_type: The type of the shared config. The type of global configuration. The parameter can have the following values: `deny_ip_access_rule`: represents IP blacklist. `allow_ip_access_rule`: represents IP whitelist. `deny_referer_access_rule`: represents Referer blacklist. `allow_referer_access_rule`: represents Referer whitelist. `common_match_list`: represents common list.
        :param pulumi.Input['SharedConfigAllowIpAccessRuleArgs'] allow_ip_access_rule: The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
        :param pulumi.Input['SharedConfigAllowRefererAccessRuleArgs'] allow_referer_access_rule: The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
        :param pulumi.Input['SharedConfigCommonMatchListArgs'] common_match_list: The configuration for a common list is represented by ConfigType common_match_list.
        :param pulumi.Input['SharedConfigDenyIpAccessRuleArgs'] deny_ip_access_rule: The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
        :param pulumi.Input['SharedConfigDenyRefererAccessRuleArgs'] deny_referer_access_rule: The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
        :param pulumi.Input[str] project_name: The ProjectName of the cdn shared config.
        """
        pulumi.set(__self__, "config_name", config_name)
        pulumi.set(__self__, "config_type", config_type)
        if allow_ip_access_rule is not None:
            pulumi.set(__self__, "allow_ip_access_rule", allow_ip_access_rule)
        if allow_referer_access_rule is not None:
            pulumi.set(__self__, "allow_referer_access_rule", allow_referer_access_rule)
        if common_match_list is not None:
            pulumi.set(__self__, "common_match_list", common_match_list)
        if deny_ip_access_rule is not None:
            pulumi.set(__self__, "deny_ip_access_rule", deny_ip_access_rule)
        if deny_referer_access_rule is not None:
            pulumi.set(__self__, "deny_referer_access_rule", deny_referer_access_rule)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> pulumi.Input[str]:
        """
        The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
        """
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_name", value)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> pulumi.Input[str]:
        """
        The type of the shared config. The type of global configuration. The parameter can have the following values: `deny_ip_access_rule`: represents IP blacklist. `allow_ip_access_rule`: represents IP whitelist. `deny_referer_access_rule`: represents Referer blacklist. `allow_referer_access_rule`: represents Referer whitelist. `common_match_list`: represents common list.
        """
        return pulumi.get(self, "config_type")

    @config_type.setter
    def config_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_type", value)

    @property
    @pulumi.getter(name="allowIpAccessRule")
    def allow_ip_access_rule(self) -> Optional[pulumi.Input['SharedConfigAllowIpAccessRuleArgs']]:
        """
        The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
        """
        return pulumi.get(self, "allow_ip_access_rule")

    @allow_ip_access_rule.setter
    def allow_ip_access_rule(self, value: Optional[pulumi.Input['SharedConfigAllowIpAccessRuleArgs']]):
        pulumi.set(self, "allow_ip_access_rule", value)

    @property
    @pulumi.getter(name="allowRefererAccessRule")
    def allow_referer_access_rule(self) -> Optional[pulumi.Input['SharedConfigAllowRefererAccessRuleArgs']]:
        """
        The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
        """
        return pulumi.get(self, "allow_referer_access_rule")

    @allow_referer_access_rule.setter
    def allow_referer_access_rule(self, value: Optional[pulumi.Input['SharedConfigAllowRefererAccessRuleArgs']]):
        pulumi.set(self, "allow_referer_access_rule", value)

    @property
    @pulumi.getter(name="commonMatchList")
    def common_match_list(self) -> Optional[pulumi.Input['SharedConfigCommonMatchListArgs']]:
        """
        The configuration for a common list is represented by ConfigType common_match_list.
        """
        return pulumi.get(self, "common_match_list")

    @common_match_list.setter
    def common_match_list(self, value: Optional[pulumi.Input['SharedConfigCommonMatchListArgs']]):
        pulumi.set(self, "common_match_list", value)

    @property
    @pulumi.getter(name="denyIpAccessRule")
    def deny_ip_access_rule(self) -> Optional[pulumi.Input['SharedConfigDenyIpAccessRuleArgs']]:
        """
        The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
        """
        return pulumi.get(self, "deny_ip_access_rule")

    @deny_ip_access_rule.setter
    def deny_ip_access_rule(self, value: Optional[pulumi.Input['SharedConfigDenyIpAccessRuleArgs']]):
        pulumi.set(self, "deny_ip_access_rule", value)

    @property
    @pulumi.getter(name="denyRefererAccessRule")
    def deny_referer_access_rule(self) -> Optional[pulumi.Input['SharedConfigDenyRefererAccessRuleArgs']]:
        """
        The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
        """
        return pulumi.get(self, "deny_referer_access_rule")

    @deny_referer_access_rule.setter
    def deny_referer_access_rule(self, value: Optional[pulumi.Input['SharedConfigDenyRefererAccessRuleArgs']]):
        pulumi.set(self, "deny_referer_access_rule", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ProjectName of the cdn shared config.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)


@pulumi.input_type
class _SharedConfigState:
    def __init__(__self__, *,
                 allow_ip_access_rule: Optional[pulumi.Input['SharedConfigAllowIpAccessRuleArgs']] = None,
                 allow_referer_access_rule: Optional[pulumi.Input['SharedConfigAllowRefererAccessRuleArgs']] = None,
                 common_match_list: Optional[pulumi.Input['SharedConfigCommonMatchListArgs']] = None,
                 config_name: Optional[pulumi.Input[str]] = None,
                 config_type: Optional[pulumi.Input[str]] = None,
                 deny_ip_access_rule: Optional[pulumi.Input['SharedConfigDenyIpAccessRuleArgs']] = None,
                 deny_referer_access_rule: Optional[pulumi.Input['SharedConfigDenyRefererAccessRuleArgs']] = None,
                 project_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SharedConfig resources.
        :param pulumi.Input['SharedConfigAllowIpAccessRuleArgs'] allow_ip_access_rule: The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
        :param pulumi.Input['SharedConfigAllowRefererAccessRuleArgs'] allow_referer_access_rule: The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
        :param pulumi.Input['SharedConfigCommonMatchListArgs'] common_match_list: The configuration for a common list is represented by ConfigType common_match_list.
        :param pulumi.Input[str] config_name: The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
        :param pulumi.Input[str] config_type: The type of the shared config. The type of global configuration. The parameter can have the following values: `deny_ip_access_rule`: represents IP blacklist. `allow_ip_access_rule`: represents IP whitelist. `deny_referer_access_rule`: represents Referer blacklist. `allow_referer_access_rule`: represents Referer whitelist. `common_match_list`: represents common list.
        :param pulumi.Input['SharedConfigDenyIpAccessRuleArgs'] deny_ip_access_rule: The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
        :param pulumi.Input['SharedConfigDenyRefererAccessRuleArgs'] deny_referer_access_rule: The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
        :param pulumi.Input[str] project_name: The ProjectName of the cdn shared config.
        """
        if allow_ip_access_rule is not None:
            pulumi.set(__self__, "allow_ip_access_rule", allow_ip_access_rule)
        if allow_referer_access_rule is not None:
            pulumi.set(__self__, "allow_referer_access_rule", allow_referer_access_rule)
        if common_match_list is not None:
            pulumi.set(__self__, "common_match_list", common_match_list)
        if config_name is not None:
            pulumi.set(__self__, "config_name", config_name)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if deny_ip_access_rule is not None:
            pulumi.set(__self__, "deny_ip_access_rule", deny_ip_access_rule)
        if deny_referer_access_rule is not None:
            pulumi.set(__self__, "deny_referer_access_rule", deny_referer_access_rule)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)

    @property
    @pulumi.getter(name="allowIpAccessRule")
    def allow_ip_access_rule(self) -> Optional[pulumi.Input['SharedConfigAllowIpAccessRuleArgs']]:
        """
        The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
        """
        return pulumi.get(self, "allow_ip_access_rule")

    @allow_ip_access_rule.setter
    def allow_ip_access_rule(self, value: Optional[pulumi.Input['SharedConfigAllowIpAccessRuleArgs']]):
        pulumi.set(self, "allow_ip_access_rule", value)

    @property
    @pulumi.getter(name="allowRefererAccessRule")
    def allow_referer_access_rule(self) -> Optional[pulumi.Input['SharedConfigAllowRefererAccessRuleArgs']]:
        """
        The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
        """
        return pulumi.get(self, "allow_referer_access_rule")

    @allow_referer_access_rule.setter
    def allow_referer_access_rule(self, value: Optional[pulumi.Input['SharedConfigAllowRefererAccessRuleArgs']]):
        pulumi.set(self, "allow_referer_access_rule", value)

    @property
    @pulumi.getter(name="commonMatchList")
    def common_match_list(self) -> Optional[pulumi.Input['SharedConfigCommonMatchListArgs']]:
        """
        The configuration for a common list is represented by ConfigType common_match_list.
        """
        return pulumi.get(self, "common_match_list")

    @common_match_list.setter
    def common_match_list(self, value: Optional[pulumi.Input['SharedConfigCommonMatchListArgs']]):
        pulumi.set(self, "common_match_list", value)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
        """
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_name", value)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the shared config. The type of global configuration. The parameter can have the following values: `deny_ip_access_rule`: represents IP blacklist. `allow_ip_access_rule`: represents IP whitelist. `deny_referer_access_rule`: represents Referer blacklist. `allow_referer_access_rule`: represents Referer whitelist. `common_match_list`: represents common list.
        """
        return pulumi.get(self, "config_type")

    @config_type.setter
    def config_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_type", value)

    @property
    @pulumi.getter(name="denyIpAccessRule")
    def deny_ip_access_rule(self) -> Optional[pulumi.Input['SharedConfigDenyIpAccessRuleArgs']]:
        """
        The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
        """
        return pulumi.get(self, "deny_ip_access_rule")

    @deny_ip_access_rule.setter
    def deny_ip_access_rule(self, value: Optional[pulumi.Input['SharedConfigDenyIpAccessRuleArgs']]):
        pulumi.set(self, "deny_ip_access_rule", value)

    @property
    @pulumi.getter(name="denyRefererAccessRule")
    def deny_referer_access_rule(self) -> Optional[pulumi.Input['SharedConfigDenyRefererAccessRuleArgs']]:
        """
        The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
        """
        return pulumi.get(self, "deny_referer_access_rule")

    @deny_referer_access_rule.setter
    def deny_referer_access_rule(self, value: Optional[pulumi.Input['SharedConfigDenyRefererAccessRuleArgs']]):
        pulumi.set(self, "deny_referer_access_rule", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ProjectName of the cdn shared config.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)


class SharedConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_ip_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigAllowIpAccessRuleArgs']]] = None,
                 allow_referer_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigAllowRefererAccessRuleArgs']]] = None,
                 common_match_list: Optional[pulumi.Input[pulumi.InputType['SharedConfigCommonMatchListArgs']]] = None,
                 config_name: Optional[pulumi.Input[str]] = None,
                 config_type: Optional[pulumi.Input[str]] = None,
                 deny_ip_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigDenyIpAccessRuleArgs']]] = None,
                 deny_referer_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigDenyRefererAccessRuleArgs']]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage cdn shared config
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cdn.SharedConfig("foo",
            allow_ip_access_rule=volcengine.cdn.SharedConfigAllowIpAccessRuleArgs(
                rules=[
                    "1.1.1.1",
                    "2.2.2.0/24",
                    "3.3.3.3",
                ],
            ),
            allow_referer_access_rule=volcengine.cdn.SharedConfigAllowRefererAccessRuleArgs(
                common_type=volcengine.cdn.SharedConfigAllowRefererAccessRuleCommonTypeArgs(
                    rules=[
                        "1.1.1.1",
                        "2.2.2.0/24",
                        "3.3.4.4",
                    ],
                ),
            ),
            common_match_list=volcengine.cdn.SharedConfigCommonMatchListArgs(
                common_type=volcengine.cdn.SharedConfigCommonMatchListCommonTypeArgs(
                    rules=[
                        "1.1.1.1",
                        "2.2.2.0/24",
                    ],
                ),
            ),
            config_name="tftest",
            config_type="allow_referer_access_rule",
            deny_ip_access_rule=volcengine.cdn.SharedConfigDenyIpAccessRuleArgs(
                rules=[
                    "1.1.1.1",
                    "2.2.2.0/24",
                ],
            ),
            deny_referer_access_rule=volcengine.cdn.SharedConfigDenyRefererAccessRuleArgs(
                common_type=volcengine.cdn.SharedConfigDenyRefererAccessRuleCommonTypeArgs(
                    rules=[
                        "1.1.1.1",
                        "2.2.2.0/24",
                    ],
                ),
            ))
        ```

        ## Import

        CdnSharedConfig can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cdn/sharedConfig:SharedConfig default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SharedConfigAllowIpAccessRuleArgs']] allow_ip_access_rule: The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
        :param pulumi.Input[pulumi.InputType['SharedConfigAllowRefererAccessRuleArgs']] allow_referer_access_rule: The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
        :param pulumi.Input[pulumi.InputType['SharedConfigCommonMatchListArgs']] common_match_list: The configuration for a common list is represented by ConfigType common_match_list.
        :param pulumi.Input[str] config_name: The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
        :param pulumi.Input[str] config_type: The type of the shared config. The type of global configuration. The parameter can have the following values: `deny_ip_access_rule`: represents IP blacklist. `allow_ip_access_rule`: represents IP whitelist. `deny_referer_access_rule`: represents Referer blacklist. `allow_referer_access_rule`: represents Referer whitelist. `common_match_list`: represents common list.
        :param pulumi.Input[pulumi.InputType['SharedConfigDenyIpAccessRuleArgs']] deny_ip_access_rule: The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
        :param pulumi.Input[pulumi.InputType['SharedConfigDenyRefererAccessRuleArgs']] deny_referer_access_rule: The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
        :param pulumi.Input[str] project_name: The ProjectName of the cdn shared config.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SharedConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cdn shared config
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cdn.SharedConfig("foo",
            allow_ip_access_rule=volcengine.cdn.SharedConfigAllowIpAccessRuleArgs(
                rules=[
                    "1.1.1.1",
                    "2.2.2.0/24",
                    "3.3.3.3",
                ],
            ),
            allow_referer_access_rule=volcengine.cdn.SharedConfigAllowRefererAccessRuleArgs(
                common_type=volcengine.cdn.SharedConfigAllowRefererAccessRuleCommonTypeArgs(
                    rules=[
                        "1.1.1.1",
                        "2.2.2.0/24",
                        "3.3.4.4",
                    ],
                ),
            ),
            common_match_list=volcengine.cdn.SharedConfigCommonMatchListArgs(
                common_type=volcengine.cdn.SharedConfigCommonMatchListCommonTypeArgs(
                    rules=[
                        "1.1.1.1",
                        "2.2.2.0/24",
                    ],
                ),
            ),
            config_name="tftest",
            config_type="allow_referer_access_rule",
            deny_ip_access_rule=volcengine.cdn.SharedConfigDenyIpAccessRuleArgs(
                rules=[
                    "1.1.1.1",
                    "2.2.2.0/24",
                ],
            ),
            deny_referer_access_rule=volcengine.cdn.SharedConfigDenyRefererAccessRuleArgs(
                common_type=volcengine.cdn.SharedConfigDenyRefererAccessRuleCommonTypeArgs(
                    rules=[
                        "1.1.1.1",
                        "2.2.2.0/24",
                    ],
                ),
            ))
        ```

        ## Import

        CdnSharedConfig can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cdn/sharedConfig:SharedConfig default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param SharedConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SharedConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_ip_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigAllowIpAccessRuleArgs']]] = None,
                 allow_referer_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigAllowRefererAccessRuleArgs']]] = None,
                 common_match_list: Optional[pulumi.Input[pulumi.InputType['SharedConfigCommonMatchListArgs']]] = None,
                 config_name: Optional[pulumi.Input[str]] = None,
                 config_type: Optional[pulumi.Input[str]] = None,
                 deny_ip_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigDenyIpAccessRuleArgs']]] = None,
                 deny_referer_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigDenyRefererAccessRuleArgs']]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SharedConfigArgs.__new__(SharedConfigArgs)

            __props__.__dict__["allow_ip_access_rule"] = allow_ip_access_rule
            __props__.__dict__["allow_referer_access_rule"] = allow_referer_access_rule
            __props__.__dict__["common_match_list"] = common_match_list
            if config_name is None and not opts.urn:
                raise TypeError("Missing required property 'config_name'")
            __props__.__dict__["config_name"] = config_name
            if config_type is None and not opts.urn:
                raise TypeError("Missing required property 'config_type'")
            __props__.__dict__["config_type"] = config_type
            __props__.__dict__["deny_ip_access_rule"] = deny_ip_access_rule
            __props__.__dict__["deny_referer_access_rule"] = deny_referer_access_rule
            __props__.__dict__["project_name"] = project_name
        super(SharedConfig, __self__).__init__(
            'volcengine:cdn/sharedConfig:SharedConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_ip_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigAllowIpAccessRuleArgs']]] = None,
            allow_referer_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigAllowRefererAccessRuleArgs']]] = None,
            common_match_list: Optional[pulumi.Input[pulumi.InputType['SharedConfigCommonMatchListArgs']]] = None,
            config_name: Optional[pulumi.Input[str]] = None,
            config_type: Optional[pulumi.Input[str]] = None,
            deny_ip_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigDenyIpAccessRuleArgs']]] = None,
            deny_referer_access_rule: Optional[pulumi.Input[pulumi.InputType['SharedConfigDenyRefererAccessRuleArgs']]] = None,
            project_name: Optional[pulumi.Input[str]] = None) -> 'SharedConfig':
        """
        Get an existing SharedConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SharedConfigAllowIpAccessRuleArgs']] allow_ip_access_rule: The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
        :param pulumi.Input[pulumi.InputType['SharedConfigAllowRefererAccessRuleArgs']] allow_referer_access_rule: The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
        :param pulumi.Input[pulumi.InputType['SharedConfigCommonMatchListArgs']] common_match_list: The configuration for a common list is represented by ConfigType common_match_list.
        :param pulumi.Input[str] config_name: The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
        :param pulumi.Input[str] config_type: The type of the shared config. The type of global configuration. The parameter can have the following values: `deny_ip_access_rule`: represents IP blacklist. `allow_ip_access_rule`: represents IP whitelist. `deny_referer_access_rule`: represents Referer blacklist. `allow_referer_access_rule`: represents Referer whitelist. `common_match_list`: represents common list.
        :param pulumi.Input[pulumi.InputType['SharedConfigDenyIpAccessRuleArgs']] deny_ip_access_rule: The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
        :param pulumi.Input[pulumi.InputType['SharedConfigDenyRefererAccessRuleArgs']] deny_referer_access_rule: The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
        :param pulumi.Input[str] project_name: The ProjectName of the cdn shared config.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SharedConfigState.__new__(_SharedConfigState)

        __props__.__dict__["allow_ip_access_rule"] = allow_ip_access_rule
        __props__.__dict__["allow_referer_access_rule"] = allow_referer_access_rule
        __props__.__dict__["common_match_list"] = common_match_list
        __props__.__dict__["config_name"] = config_name
        __props__.__dict__["config_type"] = config_type
        __props__.__dict__["deny_ip_access_rule"] = deny_ip_access_rule
        __props__.__dict__["deny_referer_access_rule"] = deny_referer_access_rule
        __props__.__dict__["project_name"] = project_name
        return SharedConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowIpAccessRule")
    def allow_ip_access_rule(self) -> pulumi.Output[Optional['outputs.SharedConfigAllowIpAccessRule']]:
        """
        The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
        """
        return pulumi.get(self, "allow_ip_access_rule")

    @property
    @pulumi.getter(name="allowRefererAccessRule")
    def allow_referer_access_rule(self) -> pulumi.Output[Optional['outputs.SharedConfigAllowRefererAccessRule']]:
        """
        The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
        """
        return pulumi.get(self, "allow_referer_access_rule")

    @property
    @pulumi.getter(name="commonMatchList")
    def common_match_list(self) -> pulumi.Output[Optional['outputs.SharedConfigCommonMatchList']]:
        """
        The configuration for a common list is represented by ConfigType common_match_list.
        """
        return pulumi.get(self, "common_match_list")

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> pulumi.Output[str]:
        """
        The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
        """
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> pulumi.Output[str]:
        """
        The type of the shared config. The type of global configuration. The parameter can have the following values: `deny_ip_access_rule`: represents IP blacklist. `allow_ip_access_rule`: represents IP whitelist. `deny_referer_access_rule`: represents Referer blacklist. `allow_referer_access_rule`: represents Referer whitelist. `common_match_list`: represents common list.
        """
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="denyIpAccessRule")
    def deny_ip_access_rule(self) -> pulumi.Output[Optional['outputs.SharedConfigDenyIpAccessRule']]:
        """
        The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
        """
        return pulumi.get(self, "deny_ip_access_rule")

    @property
    @pulumi.getter(name="denyRefererAccessRule")
    def deny_referer_access_rule(self) -> pulumi.Output[Optional['outputs.SharedConfigDenyRefererAccessRule']]:
        """
        The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
        """
        return pulumi.get(self, "deny_referer_access_rule")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The ProjectName of the cdn shared config.
        """
        return pulumi.get(self, "project_name")

