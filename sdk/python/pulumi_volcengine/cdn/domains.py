# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DomainsResult',
    'AwaitableDomainsResult',
    'domains',
    'domains_output',
]

@pulumi.output_type
class DomainsResult:
    """
    A collection of values returned by Domains.
    """
    def __init__(__self__, domain=None, domains=None, https=None, id=None, ipv6=None, origin_protocol=None, output_file=None, primary_origin=None, project=None, service_type=None, status=None, tags=None, total_count=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if domains and not isinstance(domains, list):
            raise TypeError("Expected argument 'domains' to be a list")
        pulumi.set(__self__, "domains", domains)
        if https and not isinstance(https, bool):
            raise TypeError("Expected argument 'https' to be a bool")
        pulumi.set(__self__, "https", https)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv6 and not isinstance(ipv6, bool):
            raise TypeError("Expected argument 'ipv6' to be a bool")
        pulumi.set(__self__, "ipv6", ipv6)
        if origin_protocol and not isinstance(origin_protocol, str):
            raise TypeError("Expected argument 'origin_protocol' to be a str")
        pulumi.set(__self__, "origin_protocol", origin_protocol)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if primary_origin and not isinstance(primary_origin, str):
            raise TypeError("Expected argument 'primary_origin' to be a str")
        pulumi.set(__self__, "primary_origin", primary_origin)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Search by specifying domain name keywords, with fuzzy matching.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.DomainsDomainResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def https(self) -> Optional[bool]:
        """
        Specify HTTPS configuration to filter accelerated domains. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain has enabled HTTPS function.`false`: Indicates that the accelerated domain has not enabled HTTPS function.
        """
        return pulumi.get(self, "https")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[bool]:
        """
        Specify IPv6 configuration to filter accelerated domain names. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain name supports requests using IPv6 addresses.`false`: Indicates that the accelerated domain name does not support requests using IPv6 addresses.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="originProtocol")
    def origin_protocol(self) -> Optional[str]:
        """
        Configure the origin protocol for the accelerated domain.
        """
        return pulumi.get(self, "origin_protocol")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="primaryOrigin")
    def primary_origin(self) -> Optional[str]:
        """
        List of primary source servers to accelerate the domain name.
        """
        return pulumi.get(self, "primary_origin")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The project name of the domain.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the domain.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        Indicate the tags you have set for this domain name. You can set up to 10 tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableDomainsResult(DomainsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return DomainsResult(
            domain=self.domain,
            domains=self.domains,
            https=self.https,
            id=self.id,
            ipv6=self.ipv6,
            origin_protocol=self.origin_protocol,
            output_file=self.output_file,
            primary_origin=self.primary_origin,
            project=self.project,
            service_type=self.service_type,
            status=self.status,
            tags=self.tags,
            total_count=self.total_count)


def domains(domain: Optional[str] = None,
            https: Optional[bool] = None,
            ipv6: Optional[bool] = None,
            origin_protocol: Optional[str] = None,
            output_file: Optional[str] = None,
            primary_origin: Optional[str] = None,
            project: Optional[str] = None,
            service_type: Optional[str] = None,
            status: Optional[str] = None,
            tags: Optional[Sequence[str]] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableDomainsResult:
    """
    Use this data source to query detailed information of cdn domains
    ## Example Usage

    ```python
    import pulumi
    import json
    import pulumi_volcengine as volcengine

    foo_cdn_certificate = volcengine.cdn.CdnCertificate("fooCdnCertificate",
        certificate="",
        private_key="",
        desc="tftest",
        source="cdn_cert_hosting")
    foo_cdn_domain = volcengine.cdn.CdnDomain("fooCdnDomain",
        domain="tftest.byte-test.com",
        service_type="web",
        tags=[
            volcengine.cdn.CdnDomainTagArgs(
                key="tfkey1",
                value="tfvalue1",
            ),
            volcengine.cdn.CdnDomainTagArgs(
                key="tfkey2",
                value="tfvalue2",
            ),
        ],
        domain_config=foo_cdn_certificate.id.apply(lambda id: json.dumps({
            "OriginProtocol": "https",
            "Origin": [{
                "OriginAction": {
                    "OriginLines": [{
                        "Address": "1.1.1.1",
                        "HttpPort": "80",
                        "HttpsPort": "443",
                        "InstanceType": "ip",
                        "OriginType": "primary",
                        "PrivateBucketAccess": False,
                        "Weight": "2",
                    }],
                },
            }],
            "HTTPS": {
                "CertInfo": {
                    "CertId": id,
                },
                "DisableHttp": False,
                "HTTP2": True,
                "Switch": True,
                "Ocsp": False,
                "TlsVersion": [
                    "tlsv1.1",
                    "tlsv1.2",
                ],
            },
        })))
    foo_domains = volcengine.cdn.domains_output(domain=foo_cdn_domain.id)
    ```


    :param str domain: Search by specifying domain name keywords, with fuzzy matching.
    :param bool https: Specify HTTPS configuration to filter accelerated domains. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain has enabled HTTPS function.`false`: Indicates that the accelerated domain has not enabled HTTPS function.
    :param bool ipv6: Specify IPv6 configuration to filter accelerated domain names. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain name supports requests using IPv6 addresses.`false`: Indicates that the accelerated domain name does not support requests using IPv6 addresses.
    :param str origin_protocol: Configure the origin protocol for the accelerated domain.
    :param str output_file: File name where to save data source results.
    :param str primary_origin: Specify a primary origin server for filtering accelerated domains.
    :param str project: The project name of the domain.
    :param str service_type: The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
    :param str status: The status of the domain.
    :param Sequence[str] tags: Filter by specified domain name tags, up to 10 tags can be specified. Each tag is entered as a string in the format of key:value.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['https'] = https
    __args__['ipv6'] = ipv6
    __args__['originProtocol'] = origin_protocol
    __args__['outputFile'] = output_file
    __args__['primaryOrigin'] = primary_origin
    __args__['project'] = project
    __args__['serviceType'] = service_type
    __args__['status'] = status
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cdn/domains:Domains', __args__, opts=opts, typ=DomainsResult).value

    return AwaitableDomainsResult(
        domain=pulumi.get(__ret__, 'domain'),
        domains=pulumi.get(__ret__, 'domains'),
        https=pulumi.get(__ret__, 'https'),
        id=pulumi.get(__ret__, 'id'),
        ipv6=pulumi.get(__ret__, 'ipv6'),
        origin_protocol=pulumi.get(__ret__, 'origin_protocol'),
        output_file=pulumi.get(__ret__, 'output_file'),
        primary_origin=pulumi.get(__ret__, 'primary_origin'),
        project=pulumi.get(__ret__, 'project'),
        service_type=pulumi.get(__ret__, 'service_type'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(domains)
def domains_output(domain: Optional[pulumi.Input[Optional[str]]] = None,
                   https: Optional[pulumi.Input[Optional[bool]]] = None,
                   ipv6: Optional[pulumi.Input[Optional[bool]]] = None,
                   origin_protocol: Optional[pulumi.Input[Optional[str]]] = None,
                   output_file: Optional[pulumi.Input[Optional[str]]] = None,
                   primary_origin: Optional[pulumi.Input[Optional[str]]] = None,
                   project: Optional[pulumi.Input[Optional[str]]] = None,
                   service_type: Optional[pulumi.Input[Optional[str]]] = None,
                   status: Optional[pulumi.Input[Optional[str]]] = None,
                   tags: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[DomainsResult]:
    """
    Use this data source to query detailed information of cdn domains
    ## Example Usage

    ```python
    import pulumi
    import json
    import pulumi_volcengine as volcengine

    foo_cdn_certificate = volcengine.cdn.CdnCertificate("fooCdnCertificate",
        certificate="",
        private_key="",
        desc="tftest",
        source="cdn_cert_hosting")
    foo_cdn_domain = volcengine.cdn.CdnDomain("fooCdnDomain",
        domain="tftest.byte-test.com",
        service_type="web",
        tags=[
            volcengine.cdn.CdnDomainTagArgs(
                key="tfkey1",
                value="tfvalue1",
            ),
            volcengine.cdn.CdnDomainTagArgs(
                key="tfkey2",
                value="tfvalue2",
            ),
        ],
        domain_config=foo_cdn_certificate.id.apply(lambda id: json.dumps({
            "OriginProtocol": "https",
            "Origin": [{
                "OriginAction": {
                    "OriginLines": [{
                        "Address": "1.1.1.1",
                        "HttpPort": "80",
                        "HttpsPort": "443",
                        "InstanceType": "ip",
                        "OriginType": "primary",
                        "PrivateBucketAccess": False,
                        "Weight": "2",
                    }],
                },
            }],
            "HTTPS": {
                "CertInfo": {
                    "CertId": id,
                },
                "DisableHttp": False,
                "HTTP2": True,
                "Switch": True,
                "Ocsp": False,
                "TlsVersion": [
                    "tlsv1.1",
                    "tlsv1.2",
                ],
            },
        })))
    foo_domains = volcengine.cdn.domains_output(domain=foo_cdn_domain.id)
    ```


    :param str domain: Search by specifying domain name keywords, with fuzzy matching.
    :param bool https: Specify HTTPS configuration to filter accelerated domains. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain has enabled HTTPS function.`false`: Indicates that the accelerated domain has not enabled HTTPS function.
    :param bool ipv6: Specify IPv6 configuration to filter accelerated domain names. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain name supports requests using IPv6 addresses.`false`: Indicates that the accelerated domain name does not support requests using IPv6 addresses.
    :param str origin_protocol: Configure the origin protocol for the accelerated domain.
    :param str output_file: File name where to save data source results.
    :param str primary_origin: Specify a primary origin server for filtering accelerated domains.
    :param str project: The project name of the domain.
    :param str service_type: The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
    :param str status: The status of the domain.
    :param Sequence[str] tags: Filter by specified domain name tags, up to 10 tags can be specified. Each tag is entered as a string in the format of key:value.
    """
    ...
