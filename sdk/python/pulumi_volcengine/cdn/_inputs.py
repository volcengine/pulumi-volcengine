# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CdnDomainSharedCnameArgs',
    'CdnDomainTagArgs',
    'SharedConfigAllowIpAccessRuleArgs',
    'SharedConfigAllowRefererAccessRuleArgs',
    'SharedConfigAllowRefererAccessRuleCommonTypeArgs',
    'SharedConfigCommonMatchListArgs',
    'SharedConfigCommonMatchListCommonTypeArgs',
    'SharedConfigDenyIpAccessRuleArgs',
    'SharedConfigDenyRefererAccessRuleArgs',
    'SharedConfigDenyRefererAccessRuleCommonTypeArgs',
]

@pulumi.input_type
class CdnDomainSharedCnameArgs:
    def __init__(__self__, *,
                 cname: pulumi.Input[str],
                 switch: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] cname: Assign a CNAME to the accelerated domain.
        :param pulumi.Input[bool] switch: Specify whether to enable shared CNAME.
        """
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def cname(self) -> pulumi.Input[str]:
        """
        Assign a CNAME to the accelerated domain.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: pulumi.Input[str]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[bool]:
        """
        Specify whether to enable shared CNAME.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[bool]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class CdnDomainTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The key of the tag.
        :param pulumi.Input[str] value: The value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the tag.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SharedConfigAllowIpAccessRuleArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rules: The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
        """
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class SharedConfigAllowRefererAccessRuleArgs:
    def __init__(__self__, *,
                 common_type: pulumi.Input['SharedConfigAllowRefererAccessRuleCommonTypeArgs'],
                 allow_empty: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['SharedConfigAllowRefererAccessRuleCommonTypeArgs'] common_type: The content indicating the Referer whitelist.
        :param pulumi.Input[bool] allow_empty: Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
        """
        pulumi.set(__self__, "common_type", common_type)
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)

    @property
    @pulumi.getter(name="commonType")
    def common_type(self) -> pulumi.Input['SharedConfigAllowRefererAccessRuleCommonTypeArgs']:
        """
        The content indicating the Referer whitelist.
        """
        return pulumi.get(self, "common_type")

    @common_type.setter
    def common_type(self, value: pulumi.Input['SharedConfigAllowRefererAccessRuleCommonTypeArgs']):
        pulumi.set(self, "common_type", value)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
        """
        return pulumi.get(self, "allow_empty")

    @allow_empty.setter
    def allow_empty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_empty", value)


@pulumi.input_type
class SharedConfigAllowRefererAccessRuleCommonTypeArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ignore_case: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rules: The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
        :param pulumi.Input[bool] ignore_case: This list is case-sensitive when matching requests. Default is true.
        """
        pulumi.set(__self__, "rules", rules)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        This list is case-sensitive when matching requests. Default is true.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)


@pulumi.input_type
class SharedConfigCommonMatchListArgs:
    def __init__(__self__, *,
                 common_type: pulumi.Input['SharedConfigCommonMatchListCommonTypeArgs']):
        """
        :param pulumi.Input['SharedConfigCommonMatchListCommonTypeArgs'] common_type: The content indicating the Referer blacklist.
        """
        pulumi.set(__self__, "common_type", common_type)

    @property
    @pulumi.getter(name="commonType")
    def common_type(self) -> pulumi.Input['SharedConfigCommonMatchListCommonTypeArgs']:
        """
        The content indicating the Referer blacklist.
        """
        return pulumi.get(self, "common_type")

    @common_type.setter
    def common_type(self, value: pulumi.Input['SharedConfigCommonMatchListCommonTypeArgs']):
        pulumi.set(self, "common_type", value)


@pulumi.input_type
class SharedConfigCommonMatchListCommonTypeArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ignore_case: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rules: The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
        :param pulumi.Input[bool] ignore_case: This list is case-sensitive when matching requests. Default is true.
        """
        pulumi.set(__self__, "rules", rules)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        This list is case-sensitive when matching requests. Default is true.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)


@pulumi.input_type
class SharedConfigDenyIpAccessRuleArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rules: The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
        """
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class SharedConfigDenyRefererAccessRuleArgs:
    def __init__(__self__, *,
                 common_type: pulumi.Input['SharedConfigDenyRefererAccessRuleCommonTypeArgs'],
                 allow_empty: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['SharedConfigDenyRefererAccessRuleCommonTypeArgs'] common_type: The content indicating the Referer blacklist.
        :param pulumi.Input[bool] allow_empty: Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
        """
        pulumi.set(__self__, "common_type", common_type)
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)

    @property
    @pulumi.getter(name="commonType")
    def common_type(self) -> pulumi.Input['SharedConfigDenyRefererAccessRuleCommonTypeArgs']:
        """
        The content indicating the Referer blacklist.
        """
        return pulumi.get(self, "common_type")

    @common_type.setter
    def common_type(self, value: pulumi.Input['SharedConfigDenyRefererAccessRuleCommonTypeArgs']):
        pulumi.set(self, "common_type", value)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
        """
        return pulumi.get(self, "allow_empty")

    @allow_empty.setter
    def allow_empty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_empty", value)


@pulumi.input_type
class SharedConfigDenyRefererAccessRuleCommonTypeArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ignore_case: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rules: The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
        :param pulumi.Input[bool] ignore_case: This list is case-sensitive when matching requests. Default is true.
        """
        pulumi.set(__self__, "rules", rules)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        This list is case-sensitive when matching requests. Default is true.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)


