# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CdnCertificateArgs', 'CdnCertificate']

@pulumi.input_type
class CdnCertificateArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[str],
                 desc: pulumi.Input[str],
                 private_key: pulumi.Input[str],
                 source: pulumi.Input[str]):
        """
        The set of arguments for constructing a CdnCertificate resource.
        :param pulumi.Input[str] certificate: Content of the specified certificate public key file. Line breaks in the content should be replaced with `\\r\\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] desc: Note on the certificate.
        :param pulumi.Input[str] private_key: The content of the specified certificate private key file. Replace line breaks in the content with `\\r\\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] source: Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[str]:
        """
        Content of the specified certificate public key file. Line breaks in the content should be replaced with `\\r\\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def desc(self) -> pulumi.Input[str]:
        """
        Note on the certificate.
        """
        return pulumi.get(self, "desc")

    @desc.setter
    def desc(self, value: pulumi.Input[str]):
        pulumi.set(self, "desc", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        """
        The content of the specified certificate private key file. Replace line breaks in the content with `\\r\\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class _CdnCertificateState:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CdnCertificate resources.
        :param pulumi.Input[str] certificate: Content of the specified certificate public key file. Line breaks in the content should be replaced with `\\r\\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] desc: Note on the certificate.
        :param pulumi.Input[str] private_key: The content of the specified certificate private key file. Replace line breaks in the content with `\\r\\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] source: Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Content of the specified certificate public key file. Line breaks in the content should be replaced with `\\r\\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def desc(self) -> Optional[pulumi.Input[str]]:
        """
        Note on the certificate.
        """
        return pulumi.get(self, "desc")

    @desc.setter
    def desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desc", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the specified certificate private key file. Replace line breaks in the content with `\\r\\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


class CdnCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage cdn certificate
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cdn.CdnCertificate("foo",
            certificate="",
            desc="tftest",
            private_key="",
            source="cdn_cert_hosting")
        ```

        ## Import

        CdnCertificate can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cdn/cdnCertificate:CdnCertificate default resource_id
        ```

         You can delete the certificate hosted on the content delivery network. You can configure the HTTPS module to associate the certificate and domain name through the domain_config field of volcengine_cdn_domain. If the certificate to be deleted is already associated with a domain name, the deletion will fail. To remove the association between the domain name and the certificate, you can disable the HTTPS function for the domain name in the Content Delivery Network console.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate: Content of the specified certificate public key file. Line breaks in the content should be replaced with `\\r\\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] desc: Note on the certificate.
        :param pulumi.Input[str] private_key: The content of the specified certificate private key file. Replace line breaks in the content with `\\r\\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] source: Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdnCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cdn certificate
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cdn.CdnCertificate("foo",
            certificate="",
            desc="tftest",
            private_key="",
            source="cdn_cert_hosting")
        ```

        ## Import

        CdnCertificate can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cdn/cdnCertificate:CdnCertificate default resource_id
        ```

         You can delete the certificate hosted on the content delivery network. You can configure the HTTPS module to associate the certificate and domain name through the domain_config field of volcengine_cdn_domain. If the certificate to be deleted is already associated with a domain name, the deletion will fail. To remove the association between the domain name and the certificate, you can disable the HTTPS function for the domain name in the Content Delivery Network console.

        :param str resource_name: The name of the resource.
        :param CdnCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdnCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdnCertificateArgs.__new__(CdnCertificateArgs)

            if certificate is None and not opts.urn:
                raise TypeError("Missing required property 'certificate'")
            __props__.__dict__["certificate"] = certificate
            if desc is None and not opts.urn:
                raise TypeError("Missing required property 'desc'")
            __props__.__dict__["desc"] = desc
            if private_key is None and not opts.urn:
                raise TypeError("Missing required property 'private_key'")
            __props__.__dict__["private_key"] = private_key
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
        super(CdnCertificate, __self__).__init__(
            'volcengine:cdn/cdnCertificate:CdnCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            desc: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[str]] = None) -> 'CdnCertificate':
        """
        Get an existing CdnCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate: Content of the specified certificate public key file. Line breaks in the content should be replaced with `\\r\\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] desc: Note on the certificate.
        :param pulumi.Input[str] private_key: The content of the specified certificate private key file. Replace line breaks in the content with `\\r\\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] source: Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdnCertificateState.__new__(_CdnCertificateState)

        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["desc"] = desc
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["source"] = source
        return CdnCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        """
        Content of the specified certificate public key file. Line breaks in the content should be replaced with `\\r\\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def desc(self) -> pulumi.Output[str]:
        """
        Note on the certificate.
        """
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[str]:
        """
        The content of the specified certificate private key file. Replace line breaks in the content with `\\r\\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        """
        return pulumi.get(self, "source")

