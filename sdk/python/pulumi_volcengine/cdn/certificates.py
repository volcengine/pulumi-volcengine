# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CertificatesResult',
    'AwaitableCertificatesResult',
    'certificates',
    'certificates_output',
]

@pulumi.output_type
class CertificatesResult:
    """
    A collection of values returned by Certificates.
    """
    def __init__(__self__, cert_infos=None, id=None, name=None, output_file=None, source=None, status=None, total_count=None):
        if cert_infos and not isinstance(cert_infos, list):
            raise TypeError("Expected argument 'cert_infos' to be a list")
        pulumi.set(__self__, "cert_infos", cert_infos)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="certInfos")
    def cert_infos(self) -> Sequence['outputs.CertificatesCertInfoResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "cert_infos")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableCertificatesResult(CertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return CertificatesResult(
            cert_infos=self.cert_infos,
            id=self.id,
            name=self.name,
            output_file=self.output_file,
            source=self.source,
            status=self.status,
            total_count=self.total_count)


def certificates(name: Optional[str] = None,
                 output_file: Optional[str] = None,
                 source: Optional[str] = None,
                 status: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableCertificatesResult:
    """
    Use this data source to query detailed information of cdn certificates
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_cdn_certificate = volcengine.cdn.CdnCertificate("fooCdnCertificate",
        certificate="",
        private_key="",
        desc="tftest",
        source="cdn_cert_hosting")
    foo_certificates = volcengine.cdn.certificates_output(source=foo_cdn_certificate.source)
    ```


    :param str name: Specify a domain to obtain certificates that include that domain in the SAN field. The domain can be a wildcard domain. For example, specifying *.example.com will obtain certificates that include img.example.com or www.example.com in the SAN field.
    :param str output_file: File name where to save data source results.
    :param str source: Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
    :param str status: Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['outputFile'] = output_file
    __args__['source'] = source
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cdn/certificates:Certificates', __args__, opts=opts, typ=CertificatesResult).value

    return AwaitableCertificatesResult(
        cert_infos=pulumi.get(__ret__, 'cert_infos'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        output_file=pulumi.get(__ret__, 'output_file'),
        source=pulumi.get(__ret__, 'source'),
        status=pulumi.get(__ret__, 'status'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(certificates)
def certificates_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                        output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        source: Optional[pulumi.Input[str]] = None,
                        status: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[CertificatesResult]:
    """
    Use this data source to query detailed information of cdn certificates
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_cdn_certificate = volcengine.cdn.CdnCertificate("fooCdnCertificate",
        certificate="",
        private_key="",
        desc="tftest",
        source="cdn_cert_hosting")
    foo_certificates = volcengine.cdn.certificates_output(source=foo_cdn_certificate.source)
    ```


    :param str name: Specify a domain to obtain certificates that include that domain in the SAN field. The domain can be a wildcard domain. For example, specifying *.example.com will obtain certificates that include img.example.com or www.example.com in the SAN field.
    :param str output_file: File name where to save data source results.
    :param str source: Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
    :param str status: Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
    """
    ...
