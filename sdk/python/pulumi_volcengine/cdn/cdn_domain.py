# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CdnDomainArgs', 'CdnDomain']

@pulumi.input_type
class CdnDomainArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 domain_config: pulumi.Input[str],
                 service_type: pulumi.Input[str],
                 project: Optional[pulumi.Input[str]] = None,
                 service_region: Optional[pulumi.Input[str]] = None,
                 shared_cname: Optional[pulumi.Input['CdnDomainSharedCnameArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainTagArgs']]]] = None):
        """
        The set of arguments for constructing a CdnDomain resource.
        :param pulumi.Input[str] domain: You need to add a domain. The main account can add up to 200 accelerated domains.
        :param pulumi.Input[str] domain_config: Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
        :param pulumi.Input[str] service_type: The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
        :param pulumi.Input[str] project: The project to which this domain name belongs. Default is `default`.
        :param pulumi.Input[str] service_region: Indicates the acceleration area. The parameter can take the following values: `chinese_mainland`: Indicates mainland China. `global`: Indicates global. `outside_chinese_mainland`: Indicates global (excluding mainland China).
        :param pulumi.Input['CdnDomainSharedCnameArgs'] shared_cname: Configuration for sharing CNAME.
        :param pulumi.Input[Sequence[pulumi.Input['CdnDomainTagArgs']]] tags: Indicate the tags you have set for this domain name. You can set up to 10 tags.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "domain_config", domain_config)
        pulumi.set(__self__, "service_type", service_type)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_region is not None:
            pulumi.set(__self__, "service_region", service_region)
        if shared_cname is not None:
            pulumi.set(__self__, "shared_cname", shared_cname)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        You need to add a domain. The main account can add up to 200 accelerated domains.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> pulumi.Input[str]:
        """
        Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
        """
        return pulumi.get(self, "domain_config")

    @domain_config.setter
    def domain_config(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_config", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Input[str]:
        """
        The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project to which this domain name belongs. Default is `default`.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceRegion")
    def service_region(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the acceleration area. The parameter can take the following values: `chinese_mainland`: Indicates mainland China. `global`: Indicates global. `outside_chinese_mainland`: Indicates global (excluding mainland China).
        """
        return pulumi.get(self, "service_region")

    @service_region.setter
    def service_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_region", value)

    @property
    @pulumi.getter(name="sharedCname")
    def shared_cname(self) -> Optional[pulumi.Input['CdnDomainSharedCnameArgs']]:
        """
        Configuration for sharing CNAME.
        """
        return pulumi.get(self, "shared_cname")

    @shared_cname.setter
    def shared_cname(self, value: Optional[pulumi.Input['CdnDomainSharedCnameArgs']]):
        pulumi.set(self, "shared_cname", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainTagArgs']]]]:
        """
        Indicate the tags you have set for this domain name. You can set up to 10 tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CdnDomainState:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_config: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_region: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 shared_cname: Optional[pulumi.Input['CdnDomainSharedCnameArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainTagArgs']]]] = None):
        """
        Input properties used for looking up and filtering CdnDomain resources.
        :param pulumi.Input[str] domain: You need to add a domain. The main account can add up to 200 accelerated domains.
        :param pulumi.Input[str] domain_config: Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
        :param pulumi.Input[str] project: The project to which this domain name belongs. Default is `default`.
        :param pulumi.Input[str] service_region: Indicates the acceleration area. The parameter can take the following values: `chinese_mainland`: Indicates mainland China. `global`: Indicates global. `outside_chinese_mainland`: Indicates global (excluding mainland China).
        :param pulumi.Input[str] service_type: The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
        :param pulumi.Input['CdnDomainSharedCnameArgs'] shared_cname: Configuration for sharing CNAME.
        :param pulumi.Input[str] status: The status of the domain.
        :param pulumi.Input[Sequence[pulumi.Input['CdnDomainTagArgs']]] tags: Indicate the tags you have set for this domain name. You can set up to 10 tags.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_config is not None:
            pulumi.set(__self__, "domain_config", domain_config)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_region is not None:
            pulumi.set(__self__, "service_region", service_region)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if shared_cname is not None:
            pulumi.set(__self__, "shared_cname", shared_cname)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        You need to add a domain. The main account can add up to 200 accelerated domains.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[pulumi.Input[str]]:
        """
        Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
        """
        return pulumi.get(self, "domain_config")

    @domain_config.setter
    def domain_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project to which this domain name belongs. Default is `default`.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceRegion")
    def service_region(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the acceleration area. The parameter can take the following values: `chinese_mainland`: Indicates mainland China. `global`: Indicates global. `outside_chinese_mainland`: Indicates global (excluding mainland China).
        """
        return pulumi.get(self, "service_region")

    @service_region.setter
    def service_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_region", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter(name="sharedCname")
    def shared_cname(self) -> Optional[pulumi.Input['CdnDomainSharedCnameArgs']]:
        """
        Configuration for sharing CNAME.
        """
        return pulumi.get(self, "shared_cname")

    @shared_cname.setter
    def shared_cname(self, value: Optional[pulumi.Input['CdnDomainSharedCnameArgs']]):
        pulumi.set(self, "shared_cname", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the domain.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainTagArgs']]]]:
        """
        Indicate the tags you have set for this domain name. You can set up to 10 tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainTagArgs']]]]):
        pulumi.set(self, "tags", value)


class CdnDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_config: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_region: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 shared_cname: Optional[pulumi.Input[pulumi.InputType['CdnDomainSharedCnameArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdnDomainTagArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage cdn domain
        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_volcengine as volcengine

        foo_cdn_certificate = volcengine.cdn.CdnCertificate("fooCdnCertificate",
            certificate="",
            private_key="",
            desc="tftest",
            source="cdn_cert_hosting")
        foo_cdn_domain = volcengine.cdn.CdnDomain("fooCdnDomain",
            domain="tftest.byte-test.com",
            service_type="web",
            tags=[
                volcengine.cdn.CdnDomainTagArgs(
                    key="tfkey1",
                    value="tfvalue1",
                ),
                volcengine.cdn.CdnDomainTagArgs(
                    key="tfkey2",
                    value="tfvalue2",
                ),
            ],
            domain_config=foo_cdn_certificate.id.apply(lambda id: json.dumps({
                "OriginProtocol": "https",
                "Origin": [{
                    "OriginAction": {
                        "OriginLines": [{
                            "Address": "1.1.1.1",
                            "HttpPort": "80",
                            "HttpsPort": "443",
                            "InstanceType": "ip",
                            "OriginType": "primary",
                            "PrivateBucketAccess": False,
                            "Weight": "2",
                        }],
                    },
                }],
                "HTTPS": {
                    "CertInfo": {
                        "CertId": id,
                    },
                    "DisableHttp": False,
                    "HTTP2": True,
                    "Switch": True,
                    "Ocsp": False,
                    "TlsVersion": [
                        "tlsv1.1",
                        "tlsv1.2",
                    ],
                },
            })))
        ```

        ## Import

        CdnDomain can be imported using the domain, e.g.

        ```sh
         $ pulumi import volcengine:cdn/cdnDomain:CdnDomain default www.volcengine.com
        ```

         Please note that when you execute destroy, we will first take the domain name offline and then delete it.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: You need to add a domain. The main account can add up to 200 accelerated domains.
        :param pulumi.Input[str] domain_config: Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
        :param pulumi.Input[str] project: The project to which this domain name belongs. Default is `default`.
        :param pulumi.Input[str] service_region: Indicates the acceleration area. The parameter can take the following values: `chinese_mainland`: Indicates mainland China. `global`: Indicates global. `outside_chinese_mainland`: Indicates global (excluding mainland China).
        :param pulumi.Input[str] service_type: The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
        :param pulumi.Input[pulumi.InputType['CdnDomainSharedCnameArgs']] shared_cname: Configuration for sharing CNAME.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdnDomainTagArgs']]]] tags: Indicate the tags you have set for this domain name. You can set up to 10 tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdnDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cdn domain
        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_volcengine as volcengine

        foo_cdn_certificate = volcengine.cdn.CdnCertificate("fooCdnCertificate",
            certificate="",
            private_key="",
            desc="tftest",
            source="cdn_cert_hosting")
        foo_cdn_domain = volcengine.cdn.CdnDomain("fooCdnDomain",
            domain="tftest.byte-test.com",
            service_type="web",
            tags=[
                volcengine.cdn.CdnDomainTagArgs(
                    key="tfkey1",
                    value="tfvalue1",
                ),
                volcengine.cdn.CdnDomainTagArgs(
                    key="tfkey2",
                    value="tfvalue2",
                ),
            ],
            domain_config=foo_cdn_certificate.id.apply(lambda id: json.dumps({
                "OriginProtocol": "https",
                "Origin": [{
                    "OriginAction": {
                        "OriginLines": [{
                            "Address": "1.1.1.1",
                            "HttpPort": "80",
                            "HttpsPort": "443",
                            "InstanceType": "ip",
                            "OriginType": "primary",
                            "PrivateBucketAccess": False,
                            "Weight": "2",
                        }],
                    },
                }],
                "HTTPS": {
                    "CertInfo": {
                        "CertId": id,
                    },
                    "DisableHttp": False,
                    "HTTP2": True,
                    "Switch": True,
                    "Ocsp": False,
                    "TlsVersion": [
                        "tlsv1.1",
                        "tlsv1.2",
                    ],
                },
            })))
        ```

        ## Import

        CdnDomain can be imported using the domain, e.g.

        ```sh
         $ pulumi import volcengine:cdn/cdnDomain:CdnDomain default www.volcengine.com
        ```

         Please note that when you execute destroy, we will first take the domain name offline and then delete it.

        :param str resource_name: The name of the resource.
        :param CdnDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdnDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_config: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_region: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 shared_cname: Optional[pulumi.Input[pulumi.InputType['CdnDomainSharedCnameArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdnDomainTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdnDomainArgs.__new__(CdnDomainArgs)

            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            if domain_config is None and not opts.urn:
                raise TypeError("Missing required property 'domain_config'")
            __props__.__dict__["domain_config"] = domain_config
            __props__.__dict__["project"] = project
            __props__.__dict__["service_region"] = service_region
            if service_type is None and not opts.urn:
                raise TypeError("Missing required property 'service_type'")
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["shared_cname"] = shared_cname
            __props__.__dict__["tags"] = tags
            __props__.__dict__["status"] = None
        super(CdnDomain, __self__).__init__(
            'volcengine:cdn/cdnDomain:CdnDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain: Optional[pulumi.Input[str]] = None,
            domain_config: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            service_region: Optional[pulumi.Input[str]] = None,
            service_type: Optional[pulumi.Input[str]] = None,
            shared_cname: Optional[pulumi.Input[pulumi.InputType['CdnDomainSharedCnameArgs']]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdnDomainTagArgs']]]]] = None) -> 'CdnDomain':
        """
        Get an existing CdnDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: You need to add a domain. The main account can add up to 200 accelerated domains.
        :param pulumi.Input[str] domain_config: Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
        :param pulumi.Input[str] project: The project to which this domain name belongs. Default is `default`.
        :param pulumi.Input[str] service_region: Indicates the acceleration area. The parameter can take the following values: `chinese_mainland`: Indicates mainland China. `global`: Indicates global. `outside_chinese_mainland`: Indicates global (excluding mainland China).
        :param pulumi.Input[str] service_type: The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
        :param pulumi.Input[pulumi.InputType['CdnDomainSharedCnameArgs']] shared_cname: Configuration for sharing CNAME.
        :param pulumi.Input[str] status: The status of the domain.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdnDomainTagArgs']]]] tags: Indicate the tags you have set for this domain name. You can set up to 10 tags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdnDomainState.__new__(_CdnDomainState)

        __props__.__dict__["domain"] = domain
        __props__.__dict__["domain_config"] = domain_config
        __props__.__dict__["project"] = project
        __props__.__dict__["service_region"] = service_region
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["shared_cname"] = shared_cname
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        return CdnDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        You need to add a domain. The main account can add up to 200 accelerated domains.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> pulumi.Output[str]:
        """
        Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
        """
        return pulumi.get(self, "domain_config")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional[str]]:
        """
        The project to which this domain name belongs. Default is `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="serviceRegion")
    def service_region(self) -> pulumi.Output[str]:
        """
        Indicates the acceleration area. The parameter can take the following values: `chinese_mainland`: Indicates mainland China. `global`: Indicates global. `outside_chinese_mainland`: Indicates global (excluding mainland China).
        """
        return pulumi.get(self, "service_region")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[str]:
        """
        The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="sharedCname")
    def shared_cname(self) -> pulumi.Output[Optional['outputs.CdnDomainSharedCname']]:
        """
        Configuration for sharing CNAME.
        """
        return pulumi.get(self, "shared_cname")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the domain.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.CdnDomainTag']]]:
        """
        Indicate the tags you have set for this domain name. You can set up to 10 tags.
        """
        return pulumi.get(self, "tags")

