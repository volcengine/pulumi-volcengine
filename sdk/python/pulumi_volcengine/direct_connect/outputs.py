# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BgpPeersBgpPeerResult',
    'ConnectionTag',
    'ConnectionsDirectConnectConnectionResult',
    'ConnectionsDirectConnectConnectionTagResult',
    'ConnectionsTagFilterResult',
    'GatewayRoutesDirectConnectGatewayRouteResult',
    'GatewayTag',
    'GatewaysDirectConnectGatewayResult',
    'GatewaysDirectConnectGatewayAssociateCenResult',
    'GatewaysDirectConnectGatewayTagResult',
    'GatewaysTagFilterResult',
    'VirtualInterfaceTag',
    'VirtualInterfacesTagFilterResult',
    'VirtualInterfacesVirtualInterfaceResult',
    'VirtualInterfacesVirtualInterfaceTagResult',
]

@pulumi.output_type
class BgpPeersBgpPeerResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 auth_key: str,
                 bgp_peer_id: str,
                 bgp_peer_name: str,
                 creation_time: str,
                 description: str,
                 local_asn: int,
                 remote_asn: int,
                 session_status: str,
                 status: str,
                 update_time: str,
                 virtual_interface_id: str):
        """
        :param str account_id: The id of account.
        :param str auth_key: The key of auth.
        :param str bgp_peer_id: The id of bgp peer.
        :param str bgp_peer_name: The name of bgp peer.
        :param str creation_time: The create time of bgp peer.
        :param str description: The Description of bgp peer.
        :param int local_asn: The local asn of bgp peer.
        :param int remote_asn: The remote asn of bgp peer.
        :param str session_status: The session status of bgp peer.
        :param str status: The status of bgp peer.
        :param str update_time: The update time of bgp peer.
        :param str virtual_interface_id: The id of virtual interface.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "auth_key", auth_key)
        pulumi.set(__self__, "bgp_peer_id", bgp_peer_id)
        pulumi.set(__self__, "bgp_peer_name", bgp_peer_name)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "local_asn", local_asn)
        pulumi.set(__self__, "remote_asn", remote_asn)
        pulumi.set(__self__, "session_status", session_status)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "virtual_interface_id", virtual_interface_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The id of account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> str:
        """
        The key of auth.
        """
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="bgpPeerId")
    def bgp_peer_id(self) -> str:
        """
        The id of bgp peer.
        """
        return pulumi.get(self, "bgp_peer_id")

    @property
    @pulumi.getter(name="bgpPeerName")
    def bgp_peer_name(self) -> str:
        """
        The name of bgp peer.
        """
        return pulumi.get(self, "bgp_peer_name")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The create time of bgp peer.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The Description of bgp peer.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="localAsn")
    def local_asn(self) -> int:
        """
        The local asn of bgp peer.
        """
        return pulumi.get(self, "local_asn")

    @property
    @pulumi.getter(name="remoteAsn")
    def remote_asn(self) -> int:
        """
        The remote asn of bgp peer.
        """
        return pulumi.get(self, "remote_asn")

    @property
    @pulumi.getter(name="sessionStatus")
    def session_status(self) -> str:
        """
        The session status of bgp peer.
        """
        return pulumi.get(self, "session_status")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of bgp peer.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of bgp peer.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="virtualInterfaceId")
    def virtual_interface_id(self) -> str:
        """
        The id of virtual interface.
        """
        return pulumi.get(self, "virtual_interface_id")


@pulumi.output_type
class ConnectionTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The tag key.
        :param str value: The tag value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectionsDirectConnectConnectionResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 bandwidth: int,
                 billing_type: int,
                 business_status: str,
                 connection_type: str,
                 creation_time: str,
                 customer_contact_email: str,
                 customer_contact_phone: str,
                 customer_name: str,
                 deleted_time: str,
                 description: str,
                 direct_connect_access_point_id: str,
                 direct_connect_connection_id: str,
                 direct_connect_connection_name: str,
                 expect_bandwidth: int,
                 expired_time: str,
                 line_operator: str,
                 parent_connection_account_id: str,
                 parent_connection_id: str,
                 peer_location: str,
                 port_spec: str,
                 port_type: str,
                 status: str,
                 tags: Sequence['outputs.ConnectionsDirectConnectConnectionTagResult'],
                 update_time: str,
                 vlan_id: int):
        """
        :param str account_id: The account ID which the physical leased line belongs.
        :param int bandwidth: The bandwidth of direct connect.
        :param int billing_type: The dedicated line billing type,only support `1` for yearly and monthly billing currently.
        :param str business_status: The dedicated line billing status.
        :param str connection_type: The connection type of physical leased line,valid value contains `SharedConnection`,`DedicatedConnection`.
        :param str creation_time: The creation time of direct connect.
        :param str customer_contact_email: The dedicated line contact email.
        :param str customer_contact_phone: The dedicated line contact phone.
        :param str customer_name: The dedicated line contact name.
        :param str deleted_time: The expected resource force collection time.
        :param str description: The description of direct connect connection.
        :param str direct_connect_access_point_id: The ID of the physical leased line access point.
        :param str direct_connect_connection_id: The ID of direct connect connection.
        :param str direct_connect_connection_name: The name of directi connect connection.
        :param int expect_bandwidth: The expect bandwidth of direct connect.
        :param str expired_time: The expired time.
        :param str line_operator: The operator of the physical leased line,valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
        :param str parent_connection_account_id: The account ID of physical leased line to which the shared leased line belongs.If the physical leased line type is an exclusive leased line,this parameter returns empty.
        :param str parent_connection_id: The ID of the physical leased line to which the shared leased line belongs. If the physical leased line type is an exclusive leased line, this parameter returns empty.
        :param str peer_location: The peer access point of the physical leased line.
        :param str port_spec: The dedicated line port spec.
        :param str port_type: The port type of direct connect.
        :param str status: The status of physical leased line.
        :param Sequence['ConnectionsDirectConnectConnectionTagArgs'] tags: All tags that physical leased line added.
        :param str update_time: The update time of direct connect.
        :param int vlan_id: The vlan ID of shared connection,if `connection_type` is `DedicatedConnection`,this parameter returns 0.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "billing_type", billing_type)
        pulumi.set(__self__, "business_status", business_status)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "customer_contact_email", customer_contact_email)
        pulumi.set(__self__, "customer_contact_phone", customer_contact_phone)
        pulumi.set(__self__, "customer_name", customer_name)
        pulumi.set(__self__, "deleted_time", deleted_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "direct_connect_access_point_id", direct_connect_access_point_id)
        pulumi.set(__self__, "direct_connect_connection_id", direct_connect_connection_id)
        pulumi.set(__self__, "direct_connect_connection_name", direct_connect_connection_name)
        pulumi.set(__self__, "expect_bandwidth", expect_bandwidth)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "line_operator", line_operator)
        pulumi.set(__self__, "parent_connection_account_id", parent_connection_account_id)
        pulumi.set(__self__, "parent_connection_id", parent_connection_id)
        pulumi.set(__self__, "peer_location", peer_location)
        pulumi.set(__self__, "port_spec", port_spec)
        pulumi.set(__self__, "port_type", port_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account ID which the physical leased line belongs.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The bandwidth of direct connect.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> int:
        """
        The dedicated line billing type,only support `1` for yearly and monthly billing currently.
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="businessStatus")
    def business_status(self) -> str:
        """
        The dedicated line billing status.
        """
        return pulumi.get(self, "business_status")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        The connection type of physical leased line,valid value contains `SharedConnection`,`DedicatedConnection`.
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The creation time of direct connect.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customerContactEmail")
    def customer_contact_email(self) -> str:
        """
        The dedicated line contact email.
        """
        return pulumi.get(self, "customer_contact_email")

    @property
    @pulumi.getter(name="customerContactPhone")
    def customer_contact_phone(self) -> str:
        """
        The dedicated line contact phone.
        """
        return pulumi.get(self, "customer_contact_phone")

    @property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> str:
        """
        The dedicated line contact name.
        """
        return pulumi.get(self, "customer_name")

    @property
    @pulumi.getter(name="deletedTime")
    def deleted_time(self) -> str:
        """
        The expected resource force collection time.
        """
        return pulumi.get(self, "deleted_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of direct connect connection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="directConnectAccessPointId")
    def direct_connect_access_point_id(self) -> str:
        """
        The ID of the physical leased line access point.
        """
        return pulumi.get(self, "direct_connect_access_point_id")

    @property
    @pulumi.getter(name="directConnectConnectionId")
    def direct_connect_connection_id(self) -> str:
        """
        The ID of direct connect connection.
        """
        return pulumi.get(self, "direct_connect_connection_id")

    @property
    @pulumi.getter(name="directConnectConnectionName")
    def direct_connect_connection_name(self) -> str:
        """
        The name of directi connect connection.
        """
        return pulumi.get(self, "direct_connect_connection_name")

    @property
    @pulumi.getter(name="expectBandwidth")
    def expect_bandwidth(self) -> int:
        """
        The expect bandwidth of direct connect.
        """
        return pulumi.get(self, "expect_bandwidth")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> str:
        """
        The expired time.
        """
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter(name="lineOperator")
    def line_operator(self) -> str:
        """
        The operator of the physical leased line,valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
        """
        return pulumi.get(self, "line_operator")

    @property
    @pulumi.getter(name="parentConnectionAccountId")
    def parent_connection_account_id(self) -> str:
        """
        The account ID of physical leased line to which the shared leased line belongs.If the physical leased line type is an exclusive leased line,this parameter returns empty.
        """
        return pulumi.get(self, "parent_connection_account_id")

    @property
    @pulumi.getter(name="parentConnectionId")
    def parent_connection_id(self) -> str:
        """
        The ID of the physical leased line to which the shared leased line belongs. If the physical leased line type is an exclusive leased line, this parameter returns empty.
        """
        return pulumi.get(self, "parent_connection_id")

    @property
    @pulumi.getter(name="peerLocation")
    def peer_location(self) -> str:
        """
        The peer access point of the physical leased line.
        """
        return pulumi.get(self, "peer_location")

    @property
    @pulumi.getter(name="portSpec")
    def port_spec(self) -> str:
        """
        The dedicated line port spec.
        """
        return pulumi.get(self, "port_spec")

    @property
    @pulumi.getter(name="portType")
    def port_type(self) -> str:
        """
        The port type of direct connect.
        """
        return pulumi.get(self, "port_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of physical leased line.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.ConnectionsDirectConnectConnectionTagResult']:
        """
        All tags that physical leased line added.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of direct connect.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        The vlan ID of shared connection,if `connection_type` is `DedicatedConnection`,this parameter returns 0.
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class ConnectionsDirectConnectConnectionTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The tag key of cloud resource instance.
        :param str value: The tag value of cloud resource instance.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The tag key of cloud resource instance.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The tag value of cloud resource instance.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectionsTagFilterResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The tag key of cloud resource instance.
        :param str value: The tag value of cloud resource instance.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The tag key of cloud resource instance.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The tag value of cloud resource instance.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GatewayRoutesDirectConnectGatewayRouteResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 creation_time: str,
                 destination_cidr_block: str,
                 direct_connect_gateway_id: str,
                 direct_connect_gateway_route_id: str,
                 next_hop_id: str,
                 next_hop_type: str,
                 route_type: str,
                 status: str):
        """
        :param str account_id: The id of account.
        :param str creation_time: The create time.
        :param str destination_cidr_block: The cidr block.
        :param str direct_connect_gateway_id: The id of direct connect gateway.
        :param str direct_connect_gateway_route_id: The id of direct connect gateway route.
        :param str next_hop_id: The id of next hop.
        :param str next_hop_type: The type of next hop.
        :param str route_type: The type of route. The value can be BGP or CEN or Static.
        :param str status: The status info.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        pulumi.set(__self__, "direct_connect_gateway_id", direct_connect_gateway_id)
        pulumi.set(__self__, "direct_connect_gateway_route_id", direct_connect_gateway_route_id)
        pulumi.set(__self__, "next_hop_id", next_hop_id)
        pulumi.set(__self__, "next_hop_type", next_hop_type)
        pulumi.set(__self__, "route_type", route_type)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The id of account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The create time.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> str:
        """
        The cidr block.
        """
        return pulumi.get(self, "destination_cidr_block")

    @property
    @pulumi.getter(name="directConnectGatewayId")
    def direct_connect_gateway_id(self) -> str:
        """
        The id of direct connect gateway.
        """
        return pulumi.get(self, "direct_connect_gateway_id")

    @property
    @pulumi.getter(name="directConnectGatewayRouteId")
    def direct_connect_gateway_route_id(self) -> str:
        """
        The id of direct connect gateway route.
        """
        return pulumi.get(self, "direct_connect_gateway_route_id")

    @property
    @pulumi.getter(name="nextHopId")
    def next_hop_id(self) -> str:
        """
        The id of next hop.
        """
        return pulumi.get(self, "next_hop_id")

    @property
    @pulumi.getter(name="nextHopType")
    def next_hop_type(self) -> str:
        """
        The type of next hop.
        """
        return pulumi.get(self, "next_hop_type")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> str:
        """
        The type of route. The value can be BGP or CEN or Static.
        """
        return pulumi.get(self, "route_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status info.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GatewayTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The tag key.
        :param str value: The tag value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GatewaysDirectConnectGatewayResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 associate_cens: Sequence['outputs.GatewaysDirectConnectGatewayAssociateCenResult'],
                 business_status: str,
                 creation_time: str,
                 deleted_time: str,
                 description: str,
                 direct_connect_gateway_id: str,
                 direct_connect_gateway_name: str,
                 lock_reason: str,
                 overdue_time: str,
                 status: str,
                 tags: Sequence['outputs.GatewaysDirectConnectGatewayTagResult'],
                 update_time: str):
        """
        :param str account_id: The account ID that direct connect gateway belongs.
        :param Sequence['GatewaysDirectConnectGatewayAssociateCenArgs'] associate_cens: The CEN information associated with the direct connect gateway.
        :param str business_status: The business status of direct connect gateway.
        :param str creation_time: The creation time of direct connect gateway.
        :param str deleted_time: The expected resource force collection time. Only when the resource is frozen due to arrears, this parameter will have a return value, otherwise it will return a null value.
        :param str description: The description of direct connect gateway.
        :param str direct_connect_gateway_id: The direct connect gateway ID.
        :param str direct_connect_gateway_name: The direst connect gateway name.
        :param str lock_reason: The reason of the direct connect gateway locked.
        :param str overdue_time: The resource freeze time. Only when the resource is frozen due to arrears, this parameter will have a return value, otherwise it will return a null value.
        :param str status: The status of direct connect gateway.
        :param Sequence['GatewaysDirectConnectGatewayTagArgs'] tags: The tags that direct connect gateway added.
        :param str update_time: The update time of direct connect gateway.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "associate_cens", associate_cens)
        pulumi.set(__self__, "business_status", business_status)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "deleted_time", deleted_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "direct_connect_gateway_id", direct_connect_gateway_id)
        pulumi.set(__self__, "direct_connect_gateway_name", direct_connect_gateway_name)
        pulumi.set(__self__, "lock_reason", lock_reason)
        pulumi.set(__self__, "overdue_time", overdue_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account ID that direct connect gateway belongs.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="associateCens")
    def associate_cens(self) -> Sequence['outputs.GatewaysDirectConnectGatewayAssociateCenResult']:
        """
        The CEN information associated with the direct connect gateway.
        """
        return pulumi.get(self, "associate_cens")

    @property
    @pulumi.getter(name="businessStatus")
    def business_status(self) -> str:
        """
        The business status of direct connect gateway.
        """
        return pulumi.get(self, "business_status")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The creation time of direct connect gateway.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="deletedTime")
    def deleted_time(self) -> str:
        """
        The expected resource force collection time. Only when the resource is frozen due to arrears, this parameter will have a return value, otherwise it will return a null value.
        """
        return pulumi.get(self, "deleted_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of direct connect gateway.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="directConnectGatewayId")
    def direct_connect_gateway_id(self) -> str:
        """
        The direct connect gateway ID.
        """
        return pulumi.get(self, "direct_connect_gateway_id")

    @property
    @pulumi.getter(name="directConnectGatewayName")
    def direct_connect_gateway_name(self) -> str:
        """
        The direst connect gateway name.
        """
        return pulumi.get(self, "direct_connect_gateway_name")

    @property
    @pulumi.getter(name="lockReason")
    def lock_reason(self) -> str:
        """
        The reason of the direct connect gateway locked.
        """
        return pulumi.get(self, "lock_reason")

    @property
    @pulumi.getter(name="overdueTime")
    def overdue_time(self) -> str:
        """
        The resource freeze time. Only when the resource is frozen due to arrears, this parameter will have a return value, otherwise it will return a null value.
        """
        return pulumi.get(self, "overdue_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of direct connect gateway.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GatewaysDirectConnectGatewayTagResult']:
        """
        The tags that direct connect gateway added.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of direct connect gateway.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GatewaysDirectConnectGatewayAssociateCenResult(dict):
    def __init__(__self__, *,
                 cen_id: str,
                 cen_owner_id: str,
                 cen_status: str):
        """
        :param str cen_id: The CEN ID which direct connect gateway belongs.
        :param str cen_owner_id: The CEN owner's ID.
        :param str cen_status: The CEN status.
        """
        pulumi.set(__self__, "cen_id", cen_id)
        pulumi.set(__self__, "cen_owner_id", cen_owner_id)
        pulumi.set(__self__, "cen_status", cen_status)

    @property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> str:
        """
        The CEN ID which direct connect gateway belongs.
        """
        return pulumi.get(self, "cen_id")

    @property
    @pulumi.getter(name="cenOwnerId")
    def cen_owner_id(self) -> str:
        """
        The CEN owner's ID.
        """
        return pulumi.get(self, "cen_owner_id")

    @property
    @pulumi.getter(name="cenStatus")
    def cen_status(self) -> str:
        """
        The CEN status.
        """
        return pulumi.get(self, "cen_status")


@pulumi.output_type
class GatewaysDirectConnectGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The tag key of cloud resource instance.
        :param str value: The tag value of cloud resource instance.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The tag key of cloud resource instance.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The tag value of cloud resource instance.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GatewaysTagFilterResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The tag key of cloud resource instance.
        :param str value: The tag value of cloud resource instance.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The tag key of cloud resource instance.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The tag value of cloud resource instance.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualInterfaceTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The tag key.
        :param str value: The tag value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualInterfacesTagFilterResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The tag key of cloud resource instance.
        :param str value: The tag value of cloud resource instance.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The tag key of cloud resource instance.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The tag value of cloud resource instance.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualInterfacesVirtualInterfaceResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 bandwidth: int,
                 bfd_detect_interval: int,
                 bfd_detect_multiplier: int,
                 creation_time: str,
                 description: str,
                 direct_connect_connection_id: str,
                 direct_connect_gateway_id: str,
                 enable_bfd: bool,
                 enable_nqa: bool,
                 local_ip: str,
                 nqa_detect_interval: int,
                 nqa_detect_multiplier: int,
                 peer_ip: str,
                 route_type: str,
                 status: str,
                 tags: Sequence['outputs.VirtualInterfacesVirtualInterfaceTagResult'],
                 update_time: str,
                 virtual_interface_id: str,
                 virtual_interface_name: str,
                 vlan_id: int):
        """
        :param str account_id: The account ID which this virtual interface belongs.
        :param int bandwidth: The band width limit of virtual interface,in Mbps.
        :param int bfd_detect_interval: The BFD detect interval.
        :param int bfd_detect_multiplier: The BFD detect times.
        :param str creation_time: The creation time of virtual interface.
        :param str description: The description of the virtual interface.
        :param str direct_connect_connection_id: The direct connect connection ID that associated with this virtual interface.
        :param str direct_connect_gateway_id: The direct connect gateway ID that associated with this virtual interface.
        :param bool enable_bfd: Whether enable BFD detect.
        :param bool enable_nqa: Whether enable NQA detect.
        :param str local_ip: The local IP that associated with this virtual interface.
        :param int nqa_detect_interval: The NQA detect interval.
        :param int nqa_detect_multiplier: The NAQ detect times.
        :param str peer_ip: The peer IP that associated with this virtual interface.
        :param str route_type: The route type of virtual interface.
        :param str status: The status of virtaul interface.
        :param Sequence['VirtualInterfacesVirtualInterfaceTagArgs'] tags: The tags that direct connect gateway added.
        :param str update_time: The update time of virtual interface.
        :param str virtual_interface_id: The virtual interface ID.
        :param str virtual_interface_name: The name of virtual interface.
        :param int vlan_id: The VLAN ID of virtual interface.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "bfd_detect_interval", bfd_detect_interval)
        pulumi.set(__self__, "bfd_detect_multiplier", bfd_detect_multiplier)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "direct_connect_connection_id", direct_connect_connection_id)
        pulumi.set(__self__, "direct_connect_gateway_id", direct_connect_gateway_id)
        pulumi.set(__self__, "enable_bfd", enable_bfd)
        pulumi.set(__self__, "enable_nqa", enable_nqa)
        pulumi.set(__self__, "local_ip", local_ip)
        pulumi.set(__self__, "nqa_detect_interval", nqa_detect_interval)
        pulumi.set(__self__, "nqa_detect_multiplier", nqa_detect_multiplier)
        pulumi.set(__self__, "peer_ip", peer_ip)
        pulumi.set(__self__, "route_type", route_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "virtual_interface_id", virtual_interface_id)
        pulumi.set(__self__, "virtual_interface_name", virtual_interface_name)
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account ID which this virtual interface belongs.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The band width limit of virtual interface,in Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="bfdDetectInterval")
    def bfd_detect_interval(self) -> int:
        """
        The BFD detect interval.
        """
        return pulumi.get(self, "bfd_detect_interval")

    @property
    @pulumi.getter(name="bfdDetectMultiplier")
    def bfd_detect_multiplier(self) -> int:
        """
        The BFD detect times.
        """
        return pulumi.get(self, "bfd_detect_multiplier")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The creation time of virtual interface.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the virtual interface.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="directConnectConnectionId")
    def direct_connect_connection_id(self) -> str:
        """
        The direct connect connection ID that associated with this virtual interface.
        """
        return pulumi.get(self, "direct_connect_connection_id")

    @property
    @pulumi.getter(name="directConnectGatewayId")
    def direct_connect_gateway_id(self) -> str:
        """
        The direct connect gateway ID that associated with this virtual interface.
        """
        return pulumi.get(self, "direct_connect_gateway_id")

    @property
    @pulumi.getter(name="enableBfd")
    def enable_bfd(self) -> bool:
        """
        Whether enable BFD detect.
        """
        return pulumi.get(self, "enable_bfd")

    @property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> bool:
        """
        Whether enable NQA detect.
        """
        return pulumi.get(self, "enable_nqa")

    @property
    @pulumi.getter(name="localIp")
    def local_ip(self) -> str:
        """
        The local IP that associated with this virtual interface.
        """
        return pulumi.get(self, "local_ip")

    @property
    @pulumi.getter(name="nqaDetectInterval")
    def nqa_detect_interval(self) -> int:
        """
        The NQA detect interval.
        """
        return pulumi.get(self, "nqa_detect_interval")

    @property
    @pulumi.getter(name="nqaDetectMultiplier")
    def nqa_detect_multiplier(self) -> int:
        """
        The NAQ detect times.
        """
        return pulumi.get(self, "nqa_detect_multiplier")

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> str:
        """
        The peer IP that associated with this virtual interface.
        """
        return pulumi.get(self, "peer_ip")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> str:
        """
        The route type of virtual interface.
        """
        return pulumi.get(self, "route_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of virtaul interface.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.VirtualInterfacesVirtualInterfaceTagResult']:
        """
        The tags that direct connect gateway added.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of virtual interface.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="virtualInterfaceId")
    def virtual_interface_id(self) -> str:
        """
        The virtual interface ID.
        """
        return pulumi.get(self, "virtual_interface_id")

    @property
    @pulumi.getter(name="virtualInterfaceName")
    def virtual_interface_name(self) -> str:
        """
        The name of virtual interface.
        """
        return pulumi.get(self, "virtual_interface_name")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        The VLAN ID of virtual interface.
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class VirtualInterfacesVirtualInterfaceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The tag key of cloud resource instance.
        :param str value: The tag value of cloud resource instance.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The tag key of cloud resource instance.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The tag value of cloud resource instance.
        """
        return pulumi.get(self, "value")


