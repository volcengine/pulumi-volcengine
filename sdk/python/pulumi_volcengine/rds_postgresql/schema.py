# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SchemaArgs', 'Schema']

@pulumi.input_type
class SchemaArgs:
    def __init__(__self__, *,
                 db_name: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 owner: pulumi.Input[str],
                 schema_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a Schema resource.
        :param pulumi.Input[str] db_name: The name of the database.
        :param pulumi.Input[str] instance_id: The id of the postgresql instance.
        :param pulumi.Input[str] owner: The owner of the schema.
        :param pulumi.Input[str] schema_name: The name of the schema.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        """
        The name of the database.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of the postgresql instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        """
        The owner of the schema.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> pulumi.Input[str]:
        """
        The name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class _SchemaState:
    def __init__(__self__, *,
                 db_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Schema resources.
        :param pulumi.Input[str] db_name: The name of the database.
        :param pulumi.Input[str] instance_id: The id of the postgresql instance.
        :param pulumi.Input[str] owner: The owner of the schema.
        :param pulumi.Input[str] schema_name: The name of the schema.
        """
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the database.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the postgresql instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        The owner of the schema.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


class Schema(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage rds postgresql schema
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-project1",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-subnet-test-2",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.rds_postgresql.Instance("fooInstance",
            db_engine_version="PostgreSQL_12",
            node_spec="rds.postgres.1c2g",
            primary_zone_id=foo_zones.zones[0].id,
            secondary_zone_id=foo_zones.zones[0].id,
            storage_space=40,
            subnet_id=foo_subnet.id,
            instance_name="acc-test-1",
            charge_info=volcengine.rds_postgresql.InstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            project_name="default",
            tags=[volcengine.rds_postgresql.InstanceTagArgs(
                key="tfk1",
                value="tfv1",
            )],
            parameters=[
                volcengine.rds_postgresql.InstanceParameterArgs(
                    name="auto_explain.log_analyze",
                    value="off",
                ),
                volcengine.rds_postgresql.InstanceParameterArgs(
                    name="auto_explain.log_format",
                    value="text",
                ),
            ])
        foo_database = volcengine.rds_postgresql.Database("fooDatabase",
            db_name="acc-test",
            instance_id=foo_instance.id,
            c_type="C",
            collate="zh_CN.utf8")
        foo_account = volcengine.rds_postgresql.Account("fooAccount",
            account_name="acc-test-account",
            account_password="9wc@********12",
            account_type="Normal",
            instance_id=foo_instance.id,
            account_privileges="Inherit,Login,CreateRole,CreateDB")
        foo1 = volcengine.rds_postgresql.Account("foo1",
            account_name="acc-test-account1",
            account_password="9wc@*******12",
            account_type="Normal",
            instance_id=foo_instance.id,
            account_privileges="Inherit,Login,CreateRole,CreateDB")
        foo_schema = volcengine.rds_postgresql.Schema("fooSchema",
            db_name=foo_database.db_name,
            instance_id=foo_instance.id,
            owner=foo_account.account_name,
            schema_name="acc-test-schema")
        ```

        ## Import

        RdsPostgresqlSchema can be imported using the instance id, database name and schema name, e.g.

        ```sh
         $ pulumi import volcengine:rds_postgresql/schema:Schema default instance_id:db_name:schema_name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_name: The name of the database.
        :param pulumi.Input[str] instance_id: The id of the postgresql instance.
        :param pulumi.Input[str] owner: The owner of the schema.
        :param pulumi.Input[str] schema_name: The name of the schema.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SchemaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rds postgresql schema
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-project1",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-subnet-test-2",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.rds_postgresql.Instance("fooInstance",
            db_engine_version="PostgreSQL_12",
            node_spec="rds.postgres.1c2g",
            primary_zone_id=foo_zones.zones[0].id,
            secondary_zone_id=foo_zones.zones[0].id,
            storage_space=40,
            subnet_id=foo_subnet.id,
            instance_name="acc-test-1",
            charge_info=volcengine.rds_postgresql.InstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            project_name="default",
            tags=[volcengine.rds_postgresql.InstanceTagArgs(
                key="tfk1",
                value="tfv1",
            )],
            parameters=[
                volcengine.rds_postgresql.InstanceParameterArgs(
                    name="auto_explain.log_analyze",
                    value="off",
                ),
                volcengine.rds_postgresql.InstanceParameterArgs(
                    name="auto_explain.log_format",
                    value="text",
                ),
            ])
        foo_database = volcengine.rds_postgresql.Database("fooDatabase",
            db_name="acc-test",
            instance_id=foo_instance.id,
            c_type="C",
            collate="zh_CN.utf8")
        foo_account = volcengine.rds_postgresql.Account("fooAccount",
            account_name="acc-test-account",
            account_password="9wc@********12",
            account_type="Normal",
            instance_id=foo_instance.id,
            account_privileges="Inherit,Login,CreateRole,CreateDB")
        foo1 = volcengine.rds_postgresql.Account("foo1",
            account_name="acc-test-account1",
            account_password="9wc@*******12",
            account_type="Normal",
            instance_id=foo_instance.id,
            account_privileges="Inherit,Login,CreateRole,CreateDB")
        foo_schema = volcengine.rds_postgresql.Schema("fooSchema",
            db_name=foo_database.db_name,
            instance_id=foo_instance.id,
            owner=foo_account.account_name,
            schema_name="acc-test-schema")
        ```

        ## Import

        RdsPostgresqlSchema can be imported using the instance id, database name and schema name, e.g.

        ```sh
         $ pulumi import volcengine:rds_postgresql/schema:Schema default instance_id:db_name:schema_name
        ```

        :param str resource_name: The name of the resource.
        :param SchemaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SchemaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SchemaArgs.__new__(SchemaArgs)

            if db_name is None and not opts.urn:
                raise TypeError("Missing required property 'db_name'")
            __props__.__dict__["db_name"] = db_name
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if owner is None and not opts.urn:
                raise TypeError("Missing required property 'owner'")
            __props__.__dict__["owner"] = owner
            if schema_name is None and not opts.urn:
                raise TypeError("Missing required property 'schema_name'")
            __props__.__dict__["schema_name"] = schema_name
        super(Schema, __self__).__init__(
            'volcengine:rds_postgresql/schema:Schema',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            db_name: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            schema_name: Optional[pulumi.Input[str]] = None) -> 'Schema':
        """
        Get an existing Schema resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_name: The name of the database.
        :param pulumi.Input[str] instance_id: The id of the postgresql instance.
        :param pulumi.Input[str] owner: The owner of the schema.
        :param pulumi.Input[str] schema_name: The name of the schema.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SchemaState.__new__(_SchemaState)

        __props__.__dict__["db_name"] = db_name
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["owner"] = owner
        __props__.__dict__["schema_name"] = schema_name
        return Schema(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Output[str]:
        """
        The name of the database.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of the postgresql instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        The owner of the schema.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> pulumi.Output[str]:
        """
        The name of the schema.
        """
        return pulumi.get(self, "schema_name")

