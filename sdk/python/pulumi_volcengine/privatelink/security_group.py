# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SecurityGroupArgs', 'SecurityGroup']

@pulumi.input_type
class SecurityGroupArgs:
    def __init__(__self__, *,
                 endpoint_id: pulumi.Input[str],
                 security_group_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a SecurityGroup resource.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint.
        :param pulumi.Input[str] security_group_id: The id of the security group. It is not recommended to use this resource for binding security groups, it is recommended to use the `security_group_id` field of `privatelink.VpcEndpoint` for binding.
               If using this resource and `privatelink.VpcEndpoint` jointly for operations, use lifecycle ignore_changes to suppress changes to the `security_group_id` field in `privatelink.VpcEndpoint`.
        """
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "security_group_id", security_group_id)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Input[str]:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[str]:
        """
        The id of the security group. It is not recommended to use this resource for binding security groups, it is recommended to use the `security_group_id` field of `privatelink.VpcEndpoint` for binding.
        If using this resource and `privatelink.VpcEndpoint` jointly for operations, use lifecycle ignore_changes to suppress changes to the `security_group_id` field in `privatelink.VpcEndpoint`.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_group_id", value)


@pulumi.input_type
class _SecurityGroupState:
    def __init__(__self__, *,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SecurityGroup resources.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint.
        :param pulumi.Input[str] security_group_id: The id of the security group. It is not recommended to use this resource for binding security groups, it is recommended to use the `security_group_id` field of `privatelink.VpcEndpoint` for binding.
               If using this resource and `privatelink.VpcEndpoint` jointly for operations, use lifecycle ignore_changes to suppress changes to the `security_group_id` field in `privatelink.VpcEndpoint`.
        """
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the security group. It is not recommended to use this resource for binding security groups, it is recommended to use the `security_group_id` field of `privatelink.VpcEndpoint` for binding.
        If using this resource and `privatelink.VpcEndpoint` jointly for operations, use lifecycle ignore_changes to suppress changes to the `security_group_id` field in `privatelink.VpcEndpoint`.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)


class SecurityGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage privatelink security group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
            security_group_name="acc-test-security-group",
            vpc_id=foo_vpc.id)
        foo1 = volcengine.vpc.SecurityGroup("foo1",
            security_group_name="acc-test-security-group-new",
            vpc_id=foo_vpc.id)
        foo_clb = volcengine.clb.Clb("fooClb",
            type="public",
            subnet_id=foo_subnet.id,
            load_balancer_spec="small_1",
            description="acc-test-demo",
            load_balancer_name="acc-test-clb",
            load_balancer_billing_type="PostPaid",
            eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(
                isp="BGP",
                eip_billing_type="PostPaidByBandwidth",
                bandwidth=1,
            ),
            tags=[volcengine.clb.ClbTagArgs(
                key="k1",
                value="v1",
            )])
        foo_vpc_endpoint_service = volcengine.privatelink.VpcEndpointService("fooVpcEndpointService",
            resources=[volcengine.privatelink.VpcEndpointServiceResourceArgs(
                resource_id=foo_clb.id,
                resource_type="CLB",
            )],
            description="acc-test",
            auto_accept_enabled=True)
        foo_vpc_endpoint = volcengine.privatelink.VpcEndpoint("fooVpcEndpoint",
            security_group_ids=[foo_security_group.id],
            service_id=foo_vpc_endpoint_service.id,
            endpoint_name="acc-test-ep",
            description="acc-test")
        foo_privatelink_security_group_security_group = volcengine.privatelink.SecurityGroup("fooPrivatelink/securityGroupSecurityGroup",
            endpoint_id=foo_vpc_endpoint.id,
            security_group_id=foo1.id)
        ```

        ## Import

        PrivateLink Security Group Service can be imported using the endpoint id and security group id, e.g.

        ```sh
         $ pulumi import volcengine:privatelink/securityGroup:SecurityGroup default ep-2fe630gurkl37k5gfuy33****:sg-xxxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint.
        :param pulumi.Input[str] security_group_id: The id of the security group. It is not recommended to use this resource for binding security groups, it is recommended to use the `security_group_id` field of `privatelink.VpcEndpoint` for binding.
               If using this resource and `privatelink.VpcEndpoint` jointly for operations, use lifecycle ignore_changes to suppress changes to the `security_group_id` field in `privatelink.VpcEndpoint`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage privatelink security group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
            security_group_name="acc-test-security-group",
            vpc_id=foo_vpc.id)
        foo1 = volcengine.vpc.SecurityGroup("foo1",
            security_group_name="acc-test-security-group-new",
            vpc_id=foo_vpc.id)
        foo_clb = volcengine.clb.Clb("fooClb",
            type="public",
            subnet_id=foo_subnet.id,
            load_balancer_spec="small_1",
            description="acc-test-demo",
            load_balancer_name="acc-test-clb",
            load_balancer_billing_type="PostPaid",
            eip_billing_config=volcengine.clb.ClbEipBillingConfigArgs(
                isp="BGP",
                eip_billing_type="PostPaidByBandwidth",
                bandwidth=1,
            ),
            tags=[volcengine.clb.ClbTagArgs(
                key="k1",
                value="v1",
            )])
        foo_vpc_endpoint_service = volcengine.privatelink.VpcEndpointService("fooVpcEndpointService",
            resources=[volcengine.privatelink.VpcEndpointServiceResourceArgs(
                resource_id=foo_clb.id,
                resource_type="CLB",
            )],
            description="acc-test",
            auto_accept_enabled=True)
        foo_vpc_endpoint = volcengine.privatelink.VpcEndpoint("fooVpcEndpoint",
            security_group_ids=[foo_security_group.id],
            service_id=foo_vpc_endpoint_service.id,
            endpoint_name="acc-test-ep",
            description="acc-test")
        foo_privatelink_security_group_security_group = volcengine.privatelink.SecurityGroup("fooPrivatelink/securityGroupSecurityGroup",
            endpoint_id=foo_vpc_endpoint.id,
            security_group_id=foo1.id)
        ```

        ## Import

        PrivateLink Security Group Service can be imported using the endpoint id and security group id, e.g.

        ```sh
         $ pulumi import volcengine:privatelink/securityGroup:SecurityGroup default ep-2fe630gurkl37k5gfuy33****:sg-xxxxx
        ```

        :param str resource_name: The name of the resource.
        :param SecurityGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityGroupArgs.__new__(SecurityGroupArgs)

            if endpoint_id is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint_id'")
            __props__.__dict__["endpoint_id"] = endpoint_id
            if security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id'")
            __props__.__dict__["security_group_id"] = security_group_id
        super(SecurityGroup, __self__).__init__(
            'volcengine:privatelink/securityGroup:SecurityGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            endpoint_id: Optional[pulumi.Input[str]] = None,
            security_group_id: Optional[pulumi.Input[str]] = None) -> 'SecurityGroup':
        """
        Get an existing SecurityGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint.
        :param pulumi.Input[str] security_group_id: The id of the security group. It is not recommended to use this resource for binding security groups, it is recommended to use the `security_group_id` field of `privatelink.VpcEndpoint` for binding.
               If using this resource and `privatelink.VpcEndpoint` jointly for operations, use lifecycle ignore_changes to suppress changes to the `security_group_id` field in `privatelink.VpcEndpoint`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityGroupState.__new__(_SecurityGroupState)

        __props__.__dict__["endpoint_id"] = endpoint_id
        __props__.__dict__["security_group_id"] = security_group_id
        return SecurityGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Output[str]:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[str]:
        """
        The id of the security group. It is not recommended to use this resource for binding security groups, it is recommended to use the `security_group_id` field of `privatelink.VpcEndpoint` for binding.
        If using this resource and `privatelink.VpcEndpoint` jointly for operations, use lifecycle ignore_changes to suppress changes to the `security_group_id` field in `privatelink.VpcEndpoint`.
        """
        return pulumi.get(self, "security_group_id")

