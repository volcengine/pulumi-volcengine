# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BackupBackupMeta',
    'BackupsBackupResult',
    'BackupsBackupBackupDatabaseDetailResult',
    'InstanceChargeInfo',
    'InstanceTag',
    'InstancesInstanceResult',
    'InstancesInstanceChargeDetailResult',
    'InstancesInstanceConnectionInfoResult',
    'InstancesInstanceConnectionInfoAddressResult',
    'InstancesInstanceNodeDetailInfoResult',
    'InstancesInstanceParameterResult',
    'InstancesInstanceTagResult',
    'InstancesTagResult',
    'RegionsRegionResult',
    'ZonesZoneResult',
]

@pulumi.output_type
class BackupBackupMeta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupBackupMeta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupBackupMeta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupBackupMeta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_name: str):
        """
        :param str db_name: The name of the database.
        """
        pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        The name of the database.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class BackupsBackupResult(dict):
    def __init__(__self__, *,
                 backup_database_details: Sequence['outputs.BackupsBackupBackupDatabaseDetailResult'],
                 backup_end_time: str,
                 backup_file_size: int,
                 backup_id: str,
                 backup_method: str,
                 backup_start_time: str,
                 backup_status: str,
                 backup_type: str,
                 create_type: str,
                 id: str):
        """
        :param Sequence['BackupsBackupBackupDatabaseDetailArgs'] backup_database_details: The detail of the database.
        :param str backup_end_time: The end time of the backup.
        :param int backup_file_size: The size of the backup file.
        :param str backup_id: The id of the backup.
        :param str backup_method: The name of the backup method.
        :param str backup_start_time: The start time of the backup.
        :param str backup_status: The status of the backup.
        :param str backup_type: The type of the backup.
        :param str create_type: The type of the backup create.
        :param str id: The id of the backup.
        """
        pulumi.set(__self__, "backup_database_details", backup_database_details)
        pulumi.set(__self__, "backup_end_time", backup_end_time)
        pulumi.set(__self__, "backup_file_size", backup_file_size)
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_method", backup_method)
        pulumi.set(__self__, "backup_start_time", backup_start_time)
        pulumi.set(__self__, "backup_status", backup_status)
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "create_type", create_type)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="backupDatabaseDetails")
    def backup_database_details(self) -> Sequence['outputs.BackupsBackupBackupDatabaseDetailResult']:
        """
        The detail of the database.
        """
        return pulumi.get(self, "backup_database_details")

    @property
    @pulumi.getter(name="backupEndTime")
    def backup_end_time(self) -> str:
        """
        The end time of the backup.
        """
        return pulumi.get(self, "backup_end_time")

    @property
    @pulumi.getter(name="backupFileSize")
    def backup_file_size(self) -> int:
        """
        The size of the backup file.
        """
        return pulumi.get(self, "backup_file_size")

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        """
        The id of the backup.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> str:
        """
        The name of the backup method.
        """
        return pulumi.get(self, "backup_method")

    @property
    @pulumi.getter(name="backupStartTime")
    def backup_start_time(self) -> str:
        """
        The start time of the backup.
        """
        return pulumi.get(self, "backup_start_time")

    @property
    @pulumi.getter(name="backupStatus")
    def backup_status(self) -> str:
        """
        The status of the backup.
        """
        return pulumi.get(self, "backup_status")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        """
        The type of the backup.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="createType")
    def create_type(self) -> str:
        """
        The type of the backup create.
        """
        return pulumi.get(self, "create_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the backup.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class BackupsBackupBackupDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 backup_download_link_eip: str,
                 backup_download_link_inner: str,
                 backup_end_time: str,
                 backup_file_name: str,
                 backup_file_size: int,
                 backup_start_time: str,
                 backup_type: str,
                 database_name: str,
                 download_progress: int,
                 download_status: str,
                 link_expired_time: str):
        """
        :param str backup_download_link_eip: External backup download link.
        :param str backup_download_link_inner: Intranet backup download link.
        :param str backup_end_time: The end time of the backup.
        :param str backup_file_name: The name of the backup file.
        :param int backup_file_size: The size of the backup file.
        :param str backup_start_time: The start time of the backup.
        :param str backup_type: The type of the backup.
        :param str database_name: The name of the database.
        :param int download_progress: Backup file preparation progress, unit: %.
        :param str download_status: Download status.
        :param str link_expired_time: Download link expiration time.
        """
        pulumi.set(__self__, "backup_download_link_eip", backup_download_link_eip)
        pulumi.set(__self__, "backup_download_link_inner", backup_download_link_inner)
        pulumi.set(__self__, "backup_end_time", backup_end_time)
        pulumi.set(__self__, "backup_file_name", backup_file_name)
        pulumi.set(__self__, "backup_file_size", backup_file_size)
        pulumi.set(__self__, "backup_start_time", backup_start_time)
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "download_progress", download_progress)
        pulumi.set(__self__, "download_status", download_status)
        pulumi.set(__self__, "link_expired_time", link_expired_time)

    @property
    @pulumi.getter(name="backupDownloadLinkEip")
    def backup_download_link_eip(self) -> str:
        """
        External backup download link.
        """
        return pulumi.get(self, "backup_download_link_eip")

    @property
    @pulumi.getter(name="backupDownloadLinkInner")
    def backup_download_link_inner(self) -> str:
        """
        Intranet backup download link.
        """
        return pulumi.get(self, "backup_download_link_inner")

    @property
    @pulumi.getter(name="backupEndTime")
    def backup_end_time(self) -> str:
        """
        The end time of the backup.
        """
        return pulumi.get(self, "backup_end_time")

    @property
    @pulumi.getter(name="backupFileName")
    def backup_file_name(self) -> str:
        """
        The name of the backup file.
        """
        return pulumi.get(self, "backup_file_name")

    @property
    @pulumi.getter(name="backupFileSize")
    def backup_file_size(self) -> int:
        """
        The size of the backup file.
        """
        return pulumi.get(self, "backup_file_size")

    @property
    @pulumi.getter(name="backupStartTime")
    def backup_start_time(self) -> str:
        """
        The start time of the backup.
        """
        return pulumi.get(self, "backup_start_time")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        """
        The type of the backup.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the database.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="downloadProgress")
    def download_progress(self) -> int:
        """
        Backup file preparation progress, unit: %.
        """
        return pulumi.get(self, "download_progress")

    @property
    @pulumi.getter(name="downloadStatus")
    def download_status(self) -> str:
        """
        Download status.
        """
        return pulumi.get(self, "download_status")

    @property
    @pulumi.getter(name="linkExpiredTime")
    def link_expired_time(self) -> str:
        """
        Download link expiration time.
        """
        return pulumi.get(self, "link_expired_time")


@pulumi.output_type
class InstanceChargeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chargeType":
            suggest = "charge_type"
        elif key == "autoRenew":
            suggest = "auto_renew"
        elif key == "chargeEndTime":
            suggest = "charge_end_time"
        elif key == "chargeStartTime":
            suggest = "charge_start_time"
        elif key == "chargeStatus":
            suggest = "charge_status"
        elif key == "overdueReclaimTime":
            suggest = "overdue_reclaim_time"
        elif key == "overdueTime":
            suggest = "overdue_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceChargeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceChargeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceChargeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 charge_type: str,
                 auto_renew: Optional[bool] = None,
                 charge_end_time: Optional[str] = None,
                 charge_start_time: Optional[str] = None,
                 charge_status: Optional[str] = None,
                 overdue_reclaim_time: Optional[str] = None,
                 overdue_time: Optional[str] = None,
                 period: Optional[int] = None):
        """
        :param str charge_type: The charge type. Valid values: `PostPaid`, `PrePaid`.
        :param bool auto_renew: Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when the ChargeType is `Prepaid`.
        :param int period: Purchase duration in a prepaid scenario. This parameter is required when the ChargeType is `Prepaid`.
        """
        pulumi.set(__self__, "charge_type", charge_type)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charge_end_time is not None:
            pulumi.set(__self__, "charge_end_time", charge_end_time)
        if charge_start_time is not None:
            pulumi.set(__self__, "charge_start_time", charge_start_time)
        if charge_status is not None:
            pulumi.set(__self__, "charge_status", charge_status)
        if overdue_reclaim_time is not None:
            pulumi.set(__self__, "overdue_reclaim_time", overdue_reclaim_time)
        if overdue_time is not None:
            pulumi.set(__self__, "overdue_time", overdue_time)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type. Valid values: `PostPaid`, `PrePaid`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[bool]:
        """
        Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when the ChargeType is `Prepaid`.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="chargeEndTime")
    def charge_end_time(self) -> Optional[str]:
        return pulumi.get(self, "charge_end_time")

    @property
    @pulumi.getter(name="chargeStartTime")
    def charge_start_time(self) -> Optional[str]:
        return pulumi.get(self, "charge_start_time")

    @property
    @pulumi.getter(name="chargeStatus")
    def charge_status(self) -> Optional[str]:
        return pulumi.get(self, "charge_status")

    @property
    @pulumi.getter(name="overdueReclaimTime")
    def overdue_reclaim_time(self) -> Optional[str]:
        return pulumi.get(self, "overdue_reclaim_time")

    @property
    @pulumi.getter(name="overdueTime")
    def overdue_time(self) -> Optional[str]:
        return pulumi.get(self, "overdue_time")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        """
        Purchase duration in a prepaid scenario. This parameter is required when the ChargeType is `Prepaid`.
        """
        return pulumi.get(self, "period")


@pulumi.output_type
class InstanceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstancesInstanceResult(dict):
    def __init__(__self__, *,
                 backup_use: float,
                 charge_details: Sequence['outputs.InstancesInstanceChargeDetailResult'],
                 connection_infos: Sequence['outputs.InstancesInstanceConnectionInfoResult'],
                 create_time: str,
                 db_engine_version: str,
                 id: str,
                 inner_version: str,
                 instance_category: str,
                 instance_id: str,
                 instance_name: str,
                 instance_status: str,
                 instance_type: str,
                 memory: int,
                 node_detail_infos: Sequence['outputs.InstancesInstanceNodeDetailInfoResult'],
                 node_spec: str,
                 parameter_count: int,
                 parameters: Sequence['outputs.InstancesInstanceParameterResult'],
                 port: str,
                 primary_instance_id: str,
                 project_name: str,
                 read_only_number: int,
                 region_id: str,
                 server_collation: str,
                 slow_query_enable: bool,
                 slow_query_time: str,
                 storage_space: int,
                 storage_type: str,
                 storage_use: float,
                 subnet_id: str,
                 tags: Sequence['outputs.InstancesInstanceTagResult'],
                 time_zone: str,
                 update_time: str,
                 v_cpu: int,
                 vpc_id: str,
                 zone_id: str):
        """
        :param float backup_use: The used backup space of the instance. Unit: GiB.
        :param Sequence['InstancesInstanceChargeDetailArgs'] charge_details: The charge detail.
        :param Sequence['InstancesInstanceConnectionInfoArgs'] connection_infos: The connection info of the instance.
        :param str create_time: Node creation time.
        :param str db_engine_version: Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
        :param str id: The id of the instance.
        :param str inner_version: The inner version of the instance.
        :param str instance_category: The instance category.
        :param str instance_id: Id of the instance.
        :param str instance_name: Name of the instance.
        :param str instance_status: Status of the instance.
        :param str instance_type: Instance type. Valid values: `HA`, `Basic`, `Cluster`.
        :param int memory: The Memory.
        :param Sequence['InstancesInstanceNodeDetailInfoArgs'] node_detail_infos: Node detail information.
        :param str node_spec: The node spec.
        :param int parameter_count: The count of instance parameters.
        :param Sequence['InstancesInstanceParameterArgs'] parameters: The list of instance parameters.
        :param str port: The port of the instance.
        :param str primary_instance_id: The id of the primary instance.
        :param str project_name: The project name.
        :param int read_only_number: The number of read only instance.
        :param str region_id: The region id.
        :param str server_collation: Server sorting rules.
        :param bool slow_query_enable: Whether to enable slow query function.
        :param str slow_query_time: The slow query time. Unit: second.
        :param int storage_space: The storage space.
        :param str storage_type: The storage type.
        :param float storage_use: The used storage space.
        :param str subnet_id: The subnet id.
        :param Sequence['InstancesInstanceTagArgs'] tags: Tags.
        :param str time_zone: The time zone.
        :param str update_time: The update time of the instance.
        :param int v_cpu: The CPU size of the instance. For example: 1 represents 1U.
        :param str vpc_id: The vpc id.
        :param str zone_id: The id of the zone.
        """
        pulumi.set(__self__, "backup_use", backup_use)
        pulumi.set(__self__, "charge_details", charge_details)
        pulumi.set(__self__, "connection_infos", connection_infos)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "db_engine_version", db_engine_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inner_version", inner_version)
        pulumi.set(__self__, "instance_category", instance_category)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_detail_infos", node_detail_infos)
        pulumi.set(__self__, "node_spec", node_spec)
        pulumi.set(__self__, "parameter_count", parameter_count)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "primary_instance_id", primary_instance_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "read_only_number", read_only_number)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "server_collation", server_collation)
        pulumi.set(__self__, "slow_query_enable", slow_query_enable)
        pulumi.set(__self__, "slow_query_time", slow_query_time)
        pulumi.set(__self__, "storage_space", storage_space)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "storage_use", storage_use)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "v_cpu", v_cpu)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="backupUse")
    def backup_use(self) -> float:
        """
        The used backup space of the instance. Unit: GiB.
        """
        return pulumi.get(self, "backup_use")

    @property
    @pulumi.getter(name="chargeDetails")
    def charge_details(self) -> Sequence['outputs.InstancesInstanceChargeDetailResult']:
        """
        The charge detail.
        """
        return pulumi.get(self, "charge_details")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Sequence['outputs.InstancesInstanceConnectionInfoResult']:
        """
        The connection info of the instance.
        """
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Node creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbEngineVersion")
    def db_engine_version(self) -> str:
        """
        Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
        """
        return pulumi.get(self, "db_engine_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="innerVersion")
    def inner_version(self) -> str:
        """
        The inner version of the instance.
        """
        return pulumi.get(self, "inner_version")

    @property
    @pulumi.getter(name="instanceCategory")
    def instance_category(self) -> str:
        """
        The instance category.
        """
        return pulumi.get(self, "instance_category")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Id of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Name of the instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> str:
        """
        Status of the instance.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Instance type. Valid values: `HA`, `Basic`, `Cluster`.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The Memory.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeDetailInfos")
    def node_detail_infos(self) -> Sequence['outputs.InstancesInstanceNodeDetailInfoResult']:
        """
        Node detail information.
        """
        return pulumi.get(self, "node_detail_infos")

    @property
    @pulumi.getter(name="nodeSpec")
    def node_spec(self) -> str:
        """
        The node spec.
        """
        return pulumi.get(self, "node_spec")

    @property
    @pulumi.getter(name="parameterCount")
    def parameter_count(self) -> int:
        """
        The count of instance parameters.
        """
        return pulumi.get(self, "parameter_count")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.InstancesInstanceParameterResult']:
        """
        The list of instance parameters.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        The port of the instance.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="primaryInstanceId")
    def primary_instance_id(self) -> str:
        """
        The id of the primary instance.
        """
        return pulumi.get(self, "primary_instance_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="readOnlyNumber")
    def read_only_number(self) -> int:
        """
        The number of read only instance.
        """
        return pulumi.get(self, "read_only_number")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The region id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="serverCollation")
    def server_collation(self) -> str:
        """
        Server sorting rules.
        """
        return pulumi.get(self, "server_collation")

    @property
    @pulumi.getter(name="slowQueryEnable")
    def slow_query_enable(self) -> bool:
        """
        Whether to enable slow query function.
        """
        return pulumi.get(self, "slow_query_enable")

    @property
    @pulumi.getter(name="slowQueryTime")
    def slow_query_time(self) -> str:
        """
        The slow query time. Unit: second.
        """
        return pulumi.get(self, "slow_query_time")

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> int:
        """
        The storage space.
        """
        return pulumi.get(self, "storage_space")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The storage type.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="storageUse")
    def storage_use(self) -> float:
        """
        The used storage space.
        """
        return pulumi.get(self, "storage_use")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.InstancesInstanceTagResult']:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        The time zone.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of the instance.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vCpu")
    def v_cpu(self) -> int:
        """
        The CPU size of the instance. For example: 1 represents 1U.
        """
        return pulumi.get(self, "v_cpu")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class InstancesInstanceChargeDetailResult(dict):
    def __init__(__self__, *,
                 auto_renew: bool,
                 charge_end_time: str,
                 charge_start_time: str,
                 charge_status: str,
                 charge_type: str,
                 overdue_reclaim_time: str,
                 overdue_time: str,
                 period: int,
                 period_unit: str):
        """
        :param bool auto_renew: Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when ChargeType is Prepaid.
        :param str charge_end_time: Charge end time.
        :param str charge_start_time: Charge start time.
        :param str charge_status: The charge status.
        :param str charge_type: The charge type. Valid values: `PostPaid`, `PrePaid`.
        :param str overdue_reclaim_time: Expected release time when overdue fees are shut down.
        :param str overdue_time: Time for Disconnection due to Unpaid Fees.
        :param int period: Purchase duration in a prepaid scenario.
        :param str period_unit: Purchase cycle in prepaid scenarios. This parameter can be set when ChargeType is Prepaid.
        """
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "charge_end_time", charge_end_time)
        pulumi.set(__self__, "charge_start_time", charge_start_time)
        pulumi.set(__self__, "charge_status", charge_status)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "overdue_reclaim_time", overdue_reclaim_time)
        pulumi.set(__self__, "overdue_time", overdue_time)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "period_unit", period_unit)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> bool:
        """
        Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when ChargeType is Prepaid.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="chargeEndTime")
    def charge_end_time(self) -> str:
        """
        Charge end time.
        """
        return pulumi.get(self, "charge_end_time")

    @property
    @pulumi.getter(name="chargeStartTime")
    def charge_start_time(self) -> str:
        """
        Charge start time.
        """
        return pulumi.get(self, "charge_start_time")

    @property
    @pulumi.getter(name="chargeStatus")
    def charge_status(self) -> str:
        """
        The charge status.
        """
        return pulumi.get(self, "charge_status")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type. Valid values: `PostPaid`, `PrePaid`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="overdueReclaimTime")
    def overdue_reclaim_time(self) -> str:
        """
        Expected release time when overdue fees are shut down.
        """
        return pulumi.get(self, "overdue_reclaim_time")

    @property
    @pulumi.getter(name="overdueTime")
    def overdue_time(self) -> str:
        """
        Time for Disconnection due to Unpaid Fees.
        """
        return pulumi.get(self, "overdue_time")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Purchase duration in a prepaid scenario.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> str:
        """
        Purchase cycle in prepaid scenarios. This parameter can be set when ChargeType is Prepaid.
        """
        return pulumi.get(self, "period_unit")


@pulumi.output_type
class InstancesInstanceConnectionInfoResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.InstancesInstanceConnectionInfoAddressResult'],
                 description: str,
                 endpoint_id: str,
                 endpoint_name: str,
                 endpoint_type: str):
        """
        :param Sequence['InstancesInstanceConnectionInfoAddressArgs'] addresses: The address info.
        :param str description: The description.
        :param str endpoint_id: The endpoint id.
        :param str endpoint_name: The endpoint name.
        :param str endpoint_type: The endpoint type.
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "endpoint_type", endpoint_type)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.InstancesInstanceConnectionInfoAddressResult']:
        """
        The address info.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> str:
        """
        The endpoint id.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> str:
        """
        The endpoint name.
        """
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> str:
        """
        The endpoint type.
        """
        return pulumi.get(self, "endpoint_type")


@pulumi.output_type
class InstancesInstanceConnectionInfoAddressResult(dict):
    def __init__(__self__, *,
                 dns_visibility: bool,
                 domain: str,
                 eip_id: str,
                 ip_address: str,
                 network_type: str,
                 port: str,
                 subnet_id: str):
        """
        :param bool dns_visibility: Whether to enable private to public network resolution.
        :param str domain: The domain.
        :param str eip_id: The eip id for public address.
        :param str ip_address: The ip address.
        :param str network_type: The network type.
        :param str port: The port of the instance.
        :param str subnet_id: The subnet id.
        """
        pulumi.set(__self__, "dns_visibility", dns_visibility)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="dnsVisibility")
    def dns_visibility(self) -> bool:
        """
        Whether to enable private to public network resolution.
        """
        return pulumi.get(self, "dns_visibility")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> str:
        """
        The eip id for public address.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        The ip address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        The network type.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        The port of the instance.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet id.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class InstancesInstanceNodeDetailInfoResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 instance_id: str,
                 memory: int,
                 node_id: str,
                 node_ip: str,
                 node_spec: str,
                 node_status: str,
                 node_type: str,
                 region_id: str,
                 update_time: str,
                 v_cpu: int,
                 zone_id: str):
        """
        :param str create_time: Node creation time.
        :param str instance_id: Id of the instance.
        :param int memory: The Memory.
        :param str node_id: The Node ID.
        :param str node_ip: The node ip.
        :param str node_spec: The node spec.
        :param str node_status: The node status.
        :param str node_type: The node type.
        :param str region_id: The region id.
        :param str update_time: The update time of the instance.
        :param int v_cpu: The CPU size of the instance. For example: 1 represents 1U.
        :param str zone_id: The id of the zone.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "node_ip", node_ip)
        pulumi.set(__self__, "node_spec", node_spec)
        pulumi.set(__self__, "node_status", node_status)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "v_cpu", v_cpu)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Node creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Id of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The Memory.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        The Node ID.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="nodeIp")
    def node_ip(self) -> str:
        """
        The node ip.
        """
        return pulumi.get(self, "node_ip")

    @property
    @pulumi.getter(name="nodeSpec")
    def node_spec(self) -> str:
        """
        The node spec.
        """
        return pulumi.get(self, "node_spec")

    @property
    @pulumi.getter(name="nodeStatus")
    def node_status(self) -> str:
        """
        The node status.
        """
        return pulumi.get(self, "node_status")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        The node type.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The region id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of the instance.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vCpu")
    def v_cpu(self) -> int:
        """
        The CPU size of the instance. For example: 1 represents 1U.
        """
        return pulumi.get(self, "v_cpu")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class InstancesInstanceParameterResult(dict):
    def __init__(__self__, *,
                 checking_code: str,
                 force_modify: bool,
                 force_restart: bool,
                 parameter_default_value: str,
                 parameter_description: str,
                 parameter_name: str,
                 parameter_type: str,
                 parameter_value: str):
        """
        :param str checking_code: The valid value range of the parameter.
        :param bool force_modify: Indicates whether the parameter running value can be modified.
        :param bool force_restart: Indicates whether the instance needs to be restarted to take effect after modifying the running value of the parameter.
        :param str parameter_default_value: The default value of the parameter.
        :param str parameter_description: The description of the parameter.
        :param str parameter_name: The name of the parameter.
        :param str parameter_type: The type of the parameter.
        :param str parameter_value: The value of the parameter.
        """
        pulumi.set(__self__, "checking_code", checking_code)
        pulumi.set(__self__, "force_modify", force_modify)
        pulumi.set(__self__, "force_restart", force_restart)
        pulumi.set(__self__, "parameter_default_value", parameter_default_value)
        pulumi.set(__self__, "parameter_description", parameter_description)
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "parameter_type", parameter_type)
        pulumi.set(__self__, "parameter_value", parameter_value)

    @property
    @pulumi.getter(name="checkingCode")
    def checking_code(self) -> str:
        """
        The valid value range of the parameter.
        """
        return pulumi.get(self, "checking_code")

    @property
    @pulumi.getter(name="forceModify")
    def force_modify(self) -> bool:
        """
        Indicates whether the parameter running value can be modified.
        """
        return pulumi.get(self, "force_modify")

    @property
    @pulumi.getter(name="forceRestart")
    def force_restart(self) -> bool:
        """
        Indicates whether the instance needs to be restarted to take effect after modifying the running value of the parameter.
        """
        return pulumi.get(self, "force_restart")

    @property
    @pulumi.getter(name="parameterDefaultValue")
    def parameter_default_value(self) -> str:
        """
        The default value of the parameter.
        """
        return pulumi.get(self, "parameter_default_value")

    @property
    @pulumi.getter(name="parameterDescription")
    def parameter_description(self) -> str:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "parameter_description")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> str:
        """
        The name of the parameter.
        """
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="parameterType")
    def parameter_type(self) -> str:
        """
        The type of the parameter.
        """
        return pulumi.get(self, "parameter_type")

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "parameter_value")


@pulumi.output_type
class InstancesInstanceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstancesTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RegionsRegionResult(dict):
    def __init__(__self__, *,
                 region_id: str,
                 region_name: str):
        """
        :param str region_id: The id of the region.
        :param str region_name: The name of region.
        """
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The id of the region.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        The name of region.
        """
        return pulumi.get(self, "region_name")


@pulumi.output_type
class ZonesZoneResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 zone_id: str,
                 zone_name: str):
        """
        :param str description: The description of the zone.
        :param str id: The id of the zone.
        :param str zone_id: The id of the zone.
        :param str zone_name: The name of the zone.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the zone.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        The name of the zone.
        """
        return pulumi.get(self, "zone_name")


