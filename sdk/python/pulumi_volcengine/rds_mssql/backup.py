# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupArgs', 'Backup']

@pulumi.input_type
class BackupArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 backup_metas: Optional[pulumi.Input[Sequence[pulumi.Input['BackupBackupMetaArgs']]]] = None,
                 backup_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Backup resource.
        :param pulumi.Input[str] instance_id: The id of the instance.
        :param pulumi.Input[Sequence[pulumi.Input['BackupBackupMetaArgs']]] backup_metas: Backup repository information. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] backup_type: Backup type. Currently only supports full backup, with a value of Full (default).
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if backup_metas is not None:
            pulumi.set(__self__, "backup_metas", backup_metas)
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="backupMetas")
    def backup_metas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupBackupMetaArgs']]]]:
        """
        Backup repository information. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "backup_metas")

    @backup_metas.setter
    def backup_metas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupBackupMetaArgs']]]]):
        pulumi.set(self, "backup_metas", value)

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backup type. Currently only supports full backup, with a value of Full (default).
        """
        return pulumi.get(self, "backup_type")

    @backup_type.setter
    def backup_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_type", value)


@pulumi.input_type
class _BackupState:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[str]] = None,
                 backup_metas: Optional[pulumi.Input[Sequence[pulumi.Input['BackupBackupMetaArgs']]]] = None,
                 backup_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Backup resources.
        :param pulumi.Input[str] backup_id: The ID of the backup.
        :param pulumi.Input[Sequence[pulumi.Input['BackupBackupMetaArgs']]] backup_metas: Backup repository information. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] backup_type: Backup type. Currently only supports full backup, with a value of Full (default).
        :param pulumi.Input[str] instance_id: The id of the instance.
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if backup_metas is not None:
            pulumi.set(__self__, "backup_metas", backup_metas)
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the backup.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_id", value)

    @property
    @pulumi.getter(name="backupMetas")
    def backup_metas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupBackupMetaArgs']]]]:
        """
        Backup repository information. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "backup_metas")

    @backup_metas.setter
    def backup_metas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupBackupMetaArgs']]]]):
        pulumi.set(self, "backup_metas", value)

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backup type. Currently only supports full backup, with a value of Full (default).
        """
        return pulumi.get(self, "backup_type")

    @backup_type.setter
    def backup_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


class Backup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_metas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BackupBackupMetaArgs']]]]] = None,
                 backup_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage rds mssql backup
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.rds_mssql.Backup("foo", instance_id="mssql-40914121fd22")
        ```

        ## Import

        Rds Mssql Backup can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:rds_mssql/backup:Backup default instanceId:backupId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BackupBackupMetaArgs']]]] backup_metas: Backup repository information. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] backup_type: Backup type. Currently only supports full backup, with a value of Full (default).
        :param pulumi.Input[str] instance_id: The id of the instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rds mssql backup
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.rds_mssql.Backup("foo", instance_id="mssql-40914121fd22")
        ```

        ## Import

        Rds Mssql Backup can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:rds_mssql/backup:Backup default instanceId:backupId
        ```

        :param str resource_name: The name of the resource.
        :param BackupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_metas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BackupBackupMetaArgs']]]]] = None,
                 backup_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupArgs.__new__(BackupArgs)

            __props__.__dict__["backup_metas"] = backup_metas
            __props__.__dict__["backup_type"] = backup_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["backup_id"] = None
        super(Backup, __self__).__init__(
            'volcengine:rds_mssql/backup:Backup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_id: Optional[pulumi.Input[str]] = None,
            backup_metas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BackupBackupMetaArgs']]]]] = None,
            backup_type: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None) -> 'Backup':
        """
        Get an existing Backup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_id: The ID of the backup.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BackupBackupMetaArgs']]]] backup_metas: Backup repository information. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] backup_type: Backup type. Currently only supports full backup, with a value of Full (default).
        :param pulumi.Input[str] instance_id: The id of the instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupState.__new__(_BackupState)

        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["backup_metas"] = backup_metas
        __props__.__dict__["backup_type"] = backup_type
        __props__.__dict__["instance_id"] = instance_id
        return Backup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[str]:
        """
        The ID of the backup.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupMetas")
    def backup_metas(self) -> pulumi.Output[Optional[Sequence['outputs.BackupBackupMeta']]]:
        """
        Backup repository information. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "backup_metas")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> pulumi.Output[str]:
        """
        Backup type. Currently only supports full backup, with a value of Full (default).
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")

