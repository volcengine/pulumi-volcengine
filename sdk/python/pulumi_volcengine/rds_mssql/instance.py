# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 charge_info: pulumi.Input['InstanceChargeInfoArgs'],
                 db_engine_version: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 node_spec: pulumi.Input[str],
                 storage_space: pulumi.Input[int],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 super_account_password: pulumi.Input[str],
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[str]] = None,
                 full_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input['InstanceChargeInfoArgs'] charge_info: The charge info.
        :param pulumi.Input[str] db_engine_version: The Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
        :param pulumi.Input[str] instance_type: The Instance type. When the value of the `db_engine_version` is `SQLServer_2019_Std`, the value of this field can be `HA` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Ent`, the value of this field can be `Cluster` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Web`, the value of this field can be `Basic`.
        :param pulumi.Input[str] node_spec: The node specification.
        :param pulumi.Input[int] storage_space: Storage space size, measured in GiB. The range of values is 20GiB to 4000GiB, with a step size of 10GiB.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The subnet id of the instance node. When creating an instance that includes primary and backup nodes and needs to deploy primary and backup nodes across availability zones, you can specify two subnet_id. By default, the first is the primary node availability zone, and the second is the backup node availability zone.
        :param pulumi.Input[str] super_account_password: The super account password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[int] backup_retention_period: Data backup retention days, value range: 7~30. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[str] backup_time: The time window for starting the backup task is one hour interval. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] full_backup_periods: Full backup cycle. Multiple values separated by commas. The values are as follows: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[str] instance_name: Name of the instance.
        :param pulumi.Input[str] project_name: The project name.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]] tags: Tags.
        """
        pulumi.set(__self__, "charge_info", charge_info)
        pulumi.set(__self__, "db_engine_version", db_engine_version)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "node_spec", node_spec)
        pulumi.set(__self__, "storage_space", storage_space)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "super_account_password", super_account_password)
        if backup_retention_period is not None:
            pulumi.set(__self__, "backup_retention_period", backup_retention_period)
        if backup_time is not None:
            pulumi.set(__self__, "backup_time", backup_time)
        if full_backup_periods is not None:
            pulumi.set(__self__, "full_backup_periods", full_backup_periods)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="chargeInfo")
    def charge_info(self) -> pulumi.Input['InstanceChargeInfoArgs']:
        """
        The charge info.
        """
        return pulumi.get(self, "charge_info")

    @charge_info.setter
    def charge_info(self, value: pulumi.Input['InstanceChargeInfoArgs']):
        pulumi.set(self, "charge_info", value)

    @property
    @pulumi.getter(name="dbEngineVersion")
    def db_engine_version(self) -> pulumi.Input[str]:
        """
        The Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
        """
        return pulumi.get(self, "db_engine_version")

    @db_engine_version.setter
    def db_engine_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_engine_version", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The Instance type. When the value of the `db_engine_version` is `SQLServer_2019_Std`, the value of this field can be `HA` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Ent`, the value of this field can be `Cluster` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Web`, the value of this field can be `Basic`.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="nodeSpec")
    def node_spec(self) -> pulumi.Input[str]:
        """
        The node specification.
        """
        return pulumi.get(self, "node_spec")

    @node_spec.setter
    def node_spec(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_spec", value)

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> pulumi.Input[int]:
        """
        Storage space size, measured in GiB. The range of values is 20GiB to 4000GiB, with a step size of 10GiB.
        """
        return pulumi.get(self, "storage_space")

    @storage_space.setter
    def storage_space(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_space", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The subnet id of the instance node. When creating an instance that includes primary and backup nodes and needs to deploy primary and backup nodes across availability zones, you can specify two subnet_id. By default, the first is the primary node availability zone, and the second is the backup node availability zone.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="superAccountPassword")
    def super_account_password(self) -> pulumi.Input[str]:
        """
        The super account password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "super_account_password")

    @super_account_password.setter
    def super_account_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "super_account_password", value)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Data backup retention days, value range: 7~30. 
        This field is valid and required when updating the backup plan of instance.
        """
        return pulumi.get(self, "backup_retention_period")

    @backup_retention_period.setter
    def backup_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_retention_period", value)

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time window for starting the backup task is one hour interval. 
        This field is valid and required when updating the backup plan of instance.
        """
        return pulumi.get(self, "backup_time")

    @backup_time.setter
    def backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_time", value)

    @property
    @pulumi.getter(name="fullBackupPeriods")
    def full_backup_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Full backup cycle. Multiple values separated by commas. The values are as follows: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. 
        This field is valid and required when updating the backup plan of instance.
        """
        return pulumi.get(self, "full_backup_periods")

    @full_backup_periods.setter
    def full_backup_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "full_backup_periods", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[str]] = None,
                 charge_info: Optional[pulumi.Input['InstanceChargeInfoArgs']] = None,
                 db_engine_version: Optional[pulumi.Input[str]] = None,
                 full_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 node_spec: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 super_account_password: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[int] backup_retention_period: Data backup retention days, value range: 7~30. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[str] backup_time: The time window for starting the backup task is one hour interval. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input['InstanceChargeInfoArgs'] charge_info: The charge info.
        :param pulumi.Input[str] db_engine_version: The Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] full_backup_periods: Full backup cycle. Multiple values separated by commas. The values are as follows: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[str] instance_name: Name of the instance.
        :param pulumi.Input[str] instance_type: The Instance type. When the value of the `db_engine_version` is `SQLServer_2019_Std`, the value of this field can be `HA` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Ent`, the value of this field can be `Cluster` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Web`, the value of this field can be `Basic`.
        :param pulumi.Input[str] node_spec: The node specification.
        :param pulumi.Input[str] project_name: The project name.
        :param pulumi.Input[int] storage_space: Storage space size, measured in GiB. The range of values is 20GiB to 4000GiB, with a step size of 10GiB.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The subnet id of the instance node. When creating an instance that includes primary and backup nodes and needs to deploy primary and backup nodes across availability zones, you can specify two subnet_id. By default, the first is the primary node availability zone, and the second is the backup node availability zone.
        :param pulumi.Input[str] super_account_password: The super account password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]] tags: Tags.
        """
        if backup_retention_period is not None:
            pulumi.set(__self__, "backup_retention_period", backup_retention_period)
        if backup_time is not None:
            pulumi.set(__self__, "backup_time", backup_time)
        if charge_info is not None:
            pulumi.set(__self__, "charge_info", charge_info)
        if db_engine_version is not None:
            pulumi.set(__self__, "db_engine_version", db_engine_version)
        if full_backup_periods is not None:
            pulumi.set(__self__, "full_backup_periods", full_backup_periods)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if node_spec is not None:
            pulumi.set(__self__, "node_spec", node_spec)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if storage_space is not None:
            pulumi.set(__self__, "storage_space", storage_space)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if super_account_password is not None:
            pulumi.set(__self__, "super_account_password", super_account_password)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Data backup retention days, value range: 7~30. 
        This field is valid and required when updating the backup plan of instance.
        """
        return pulumi.get(self, "backup_retention_period")

    @backup_retention_period.setter
    def backup_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_retention_period", value)

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time window for starting the backup task is one hour interval. 
        This field is valid and required when updating the backup plan of instance.
        """
        return pulumi.get(self, "backup_time")

    @backup_time.setter
    def backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_time", value)

    @property
    @pulumi.getter(name="chargeInfo")
    def charge_info(self) -> Optional[pulumi.Input['InstanceChargeInfoArgs']]:
        """
        The charge info.
        """
        return pulumi.get(self, "charge_info")

    @charge_info.setter
    def charge_info(self, value: Optional[pulumi.Input['InstanceChargeInfoArgs']]):
        pulumi.set(self, "charge_info", value)

    @property
    @pulumi.getter(name="dbEngineVersion")
    def db_engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
        """
        return pulumi.get(self, "db_engine_version")

    @db_engine_version.setter
    def db_engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_engine_version", value)

    @property
    @pulumi.getter(name="fullBackupPeriods")
    def full_backup_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Full backup cycle. Multiple values separated by commas. The values are as follows: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. 
        This field is valid and required when updating the backup plan of instance.
        """
        return pulumi.get(self, "full_backup_periods")

    @full_backup_periods.setter
    def full_backup_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "full_backup_periods", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The Instance type. When the value of the `db_engine_version` is `SQLServer_2019_Std`, the value of this field can be `HA` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Ent`, the value of this field can be `Cluster` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Web`, the value of this field can be `Basic`.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="nodeSpec")
    def node_spec(self) -> Optional[pulumi.Input[str]]:
        """
        The node specification.
        """
        return pulumi.get(self, "node_spec")

    @node_spec.setter
    def node_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_spec", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> Optional[pulumi.Input[int]]:
        """
        Storage space size, measured in GiB. The range of values is 20GiB to 4000GiB, with a step size of 10GiB.
        """
        return pulumi.get(self, "storage_space")

    @storage_space.setter
    def storage_space(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_space", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The subnet id of the instance node. When creating an instance that includes primary and backup nodes and needs to deploy primary and backup nodes across availability zones, you can specify two subnet_id. By default, the first is the primary node availability zone, and the second is the backup node availability zone.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="superAccountPassword")
    def super_account_password(self) -> Optional[pulumi.Input[str]]:
        """
        The super account password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "super_account_password")

    @super_account_password.setter
    def super_account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "super_account_password", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[str]] = None,
                 charge_info: Optional[pulumi.Input[pulumi.InputType['InstanceChargeInfoArgs']]] = None,
                 db_engine_version: Optional[pulumi.Input[str]] = None,
                 full_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 node_spec: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 super_account_password: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage rds mssql instance
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.rds_mssql.Instance("fooInstance",
            db_engine_version="SQLServer_2019_Std",
            instance_type="HA",
            node_spec="rds.mssql.se.ha.d2.2c4g",
            storage_space=20,
            subnet_ids=[foo_subnet.id],
            super_account_password="Tftest110",
            instance_name="acc-test-mssql",
            project_name="default",
            charge_info=volcengine.rds_mssql.InstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            tags=[volcengine.rds_mssql.InstanceTagArgs(
                key="k1",
                value="v1",
            )],
            backup_time="18:00Z-19:00Z",
            full_backup_periods=[
                "Monday",
                "Tuesday",
            ],
            backup_retention_period=14)
        ```

        ## Import

        Rds Mssql Instance can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:rds_mssql/instance:Instance default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] backup_retention_period: Data backup retention days, value range: 7~30. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[str] backup_time: The time window for starting the backup task is one hour interval. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[pulumi.InputType['InstanceChargeInfoArgs']] charge_info: The charge info.
        :param pulumi.Input[str] db_engine_version: The Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] full_backup_periods: Full backup cycle. Multiple values separated by commas. The values are as follows: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[str] instance_name: Name of the instance.
        :param pulumi.Input[str] instance_type: The Instance type. When the value of the `db_engine_version` is `SQLServer_2019_Std`, the value of this field can be `HA` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Ent`, the value of this field can be `Cluster` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Web`, the value of this field can be `Basic`.
        :param pulumi.Input[str] node_spec: The node specification.
        :param pulumi.Input[str] project_name: The project name.
        :param pulumi.Input[int] storage_space: Storage space size, measured in GiB. The range of values is 20GiB to 4000GiB, with a step size of 10GiB.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The subnet id of the instance node. When creating an instance that includes primary and backup nodes and needs to deploy primary and backup nodes across availability zones, you can specify two subnet_id. By default, the first is the primary node availability zone, and the second is the backup node availability zone.
        :param pulumi.Input[str] super_account_password: The super account password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]] tags: Tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rds mssql instance
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.rds_mssql.Instance("fooInstance",
            db_engine_version="SQLServer_2019_Std",
            instance_type="HA",
            node_spec="rds.mssql.se.ha.d2.2c4g",
            storage_space=20,
            subnet_ids=[foo_subnet.id],
            super_account_password="Tftest110",
            instance_name="acc-test-mssql",
            project_name="default",
            charge_info=volcengine.rds_mssql.InstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            tags=[volcengine.rds_mssql.InstanceTagArgs(
                key="k1",
                value="v1",
            )],
            backup_time="18:00Z-19:00Z",
            full_backup_periods=[
                "Monday",
                "Tuesday",
            ],
            backup_retention_period=14)
        ```

        ## Import

        Rds Mssql Instance can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:rds_mssql/instance:Instance default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[str]] = None,
                 charge_info: Optional[pulumi.Input[pulumi.InputType['InstanceChargeInfoArgs']]] = None,
                 db_engine_version: Optional[pulumi.Input[str]] = None,
                 full_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 node_spec: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 super_account_password: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["backup_retention_period"] = backup_retention_period
            __props__.__dict__["backup_time"] = backup_time
            if charge_info is None and not opts.urn:
                raise TypeError("Missing required property 'charge_info'")
            __props__.__dict__["charge_info"] = charge_info
            if db_engine_version is None and not opts.urn:
                raise TypeError("Missing required property 'db_engine_version'")
            __props__.__dict__["db_engine_version"] = db_engine_version
            __props__.__dict__["full_backup_periods"] = full_backup_periods
            __props__.__dict__["instance_name"] = instance_name
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            if node_spec is None and not opts.urn:
                raise TypeError("Missing required property 'node_spec'")
            __props__.__dict__["node_spec"] = node_spec
            __props__.__dict__["project_name"] = project_name
            if storage_space is None and not opts.urn:
                raise TypeError("Missing required property 'storage_space'")
            __props__.__dict__["storage_space"] = storage_space
            if subnet_ids is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_ids'")
            __props__.__dict__["subnet_ids"] = subnet_ids
            if super_account_password is None and not opts.urn:
                raise TypeError("Missing required property 'super_account_password'")
            __props__.__dict__["super_account_password"] = None if super_account_password is None else pulumi.Output.secret(super_account_password)
            __props__.__dict__["tags"] = tags
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["superAccountPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'volcengine:rds_mssql/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_retention_period: Optional[pulumi.Input[int]] = None,
            backup_time: Optional[pulumi.Input[str]] = None,
            charge_info: Optional[pulumi.Input[pulumi.InputType['InstanceChargeInfoArgs']]] = None,
            db_engine_version: Optional[pulumi.Input[str]] = None,
            full_backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_type: Optional[pulumi.Input[str]] = None,
            node_spec: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            storage_space: Optional[pulumi.Input[int]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            super_account_password: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] backup_retention_period: Data backup retention days, value range: 7~30. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[str] backup_time: The time window for starting the backup task is one hour interval. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[pulumi.InputType['InstanceChargeInfoArgs']] charge_info: The charge info.
        :param pulumi.Input[str] db_engine_version: The Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] full_backup_periods: Full backup cycle. Multiple values separated by commas. The values are as follows: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. 
               This field is valid and required when updating the backup plan of instance.
        :param pulumi.Input[str] instance_name: Name of the instance.
        :param pulumi.Input[str] instance_type: The Instance type. When the value of the `db_engine_version` is `SQLServer_2019_Std`, the value of this field can be `HA` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Ent`, the value of this field can be `Cluster` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Web`, the value of this field can be `Basic`.
        :param pulumi.Input[str] node_spec: The node specification.
        :param pulumi.Input[str] project_name: The project name.
        :param pulumi.Input[int] storage_space: Storage space size, measured in GiB. The range of values is 20GiB to 4000GiB, with a step size of 10GiB.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The subnet id of the instance node. When creating an instance that includes primary and backup nodes and needs to deploy primary and backup nodes across availability zones, you can specify two subnet_id. By default, the first is the primary node availability zone, and the second is the backup node availability zone.
        :param pulumi.Input[str] super_account_password: The super account password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]] tags: Tags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["backup_retention_period"] = backup_retention_period
        __props__.__dict__["backup_time"] = backup_time
        __props__.__dict__["charge_info"] = charge_info
        __props__.__dict__["db_engine_version"] = db_engine_version
        __props__.__dict__["full_backup_periods"] = full_backup_periods
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["node_spec"] = node_spec
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["storage_space"] = storage_space
        __props__.__dict__["subnet_ids"] = subnet_ids
        __props__.__dict__["super_account_password"] = super_account_password
        __props__.__dict__["tags"] = tags
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> pulumi.Output[Optional[int]]:
        """
        Data backup retention days, value range: 7~30. 
        This field is valid and required when updating the backup plan of instance.
        """
        return pulumi.get(self, "backup_retention_period")

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> pulumi.Output[Optional[str]]:
        """
        The time window for starting the backup task is one hour interval. 
        This field is valid and required when updating the backup plan of instance.
        """
        return pulumi.get(self, "backup_time")

    @property
    @pulumi.getter(name="chargeInfo")
    def charge_info(self) -> pulumi.Output['outputs.InstanceChargeInfo']:
        """
        The charge info.
        """
        return pulumi.get(self, "charge_info")

    @property
    @pulumi.getter(name="dbEngineVersion")
    def db_engine_version(self) -> pulumi.Output[str]:
        """
        The Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
        """
        return pulumi.get(self, "db_engine_version")

    @property
    @pulumi.getter(name="fullBackupPeriods")
    def full_backup_periods(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Full backup cycle. Multiple values separated by commas. The values are as follows: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. 
        This field is valid and required when updating the backup plan of instance.
        """
        return pulumi.get(self, "full_backup_periods")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[str]:
        """
        The Instance type. When the value of the `db_engine_version` is `SQLServer_2019_Std`, the value of this field can be `HA` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Ent`, the value of this field can be `Cluster` or `Basic`.When the value of the `db_engine_version` is `SQLServer_2019_Web`, the value of this field can be `Basic`.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="nodeSpec")
    def node_spec(self) -> pulumi.Output[str]:
        """
        The node specification.
        """
        return pulumi.get(self, "node_spec")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> pulumi.Output[int]:
        """
        Storage space size, measured in GiB. The range of values is 20GiB to 4000GiB, with a step size of 10GiB.
        """
        return pulumi.get(self, "storage_space")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The subnet id of the instance node. When creating an instance that includes primary and backup nodes and needs to deploy primary and backup nodes across availability zones, you can specify two subnet_id. By default, the first is the primary node availability zone, and the second is the backup node availability zone.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="superAccountPassword")
    def super_account_password(self) -> pulumi.Output[str]:
        """
        The super account password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "super_account_password")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceTag']]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

