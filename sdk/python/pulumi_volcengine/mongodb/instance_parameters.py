# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceParametersResult',
    'AwaitableInstanceParametersResult',
    'instance_parameters',
    'instance_parameters_output',
]

@pulumi.output_type
class InstanceParametersResult:
    """
    A collection of values returned by InstanceParameters.
    """
    def __init__(__self__, id=None, instance_id=None, output_file=None, parameter_names=None, parameter_role=None, parameters=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if parameter_names and not isinstance(parameter_names, str):
            raise TypeError("Expected argument 'parameter_names' to be a str")
        pulumi.set(__self__, "parameter_names", parameter_names)
        if parameter_role and not isinstance(parameter_role, str):
            raise TypeError("Expected argument 'parameter_role' to be a str")
        pulumi.set(__self__, "parameter_role", parameter_role)
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        pulumi.set(__self__, "parameters", parameters)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="parameterNames")
    def parameter_names(self) -> Optional[str]:
        return pulumi.get(self, "parameter_names")

    @property
    @pulumi.getter(name="parameterRole")
    def parameter_role(self) -> Optional[str]:
        """
        The node type to which the parameter belongs.
        """
        return pulumi.get(self, "parameter_role")

    @property
    @pulumi.getter
    def parameters(self) -> 'outputs.InstanceParametersParametersResult':
        """
        The collection of parameter query.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of mongodb instance parameter query.
        """
        return pulumi.get(self, "total_count")


class AwaitableInstanceParametersResult(InstanceParametersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return InstanceParametersResult(
            id=self.id,
            instance_id=self.instance_id,
            output_file=self.output_file,
            parameter_names=self.parameter_names,
            parameter_role=self.parameter_role,
            parameters=self.parameters,
            total_count=self.total_count)


def instance_parameters(instance_id: Optional[str] = None,
                        output_file: Optional[str] = None,
                        parameter_names: Optional[str] = None,
                        parameter_role: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableInstanceParametersResult:
    """
    Use this data source to query detailed information of mongodb instance parameters
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.mongodb.instance_parameters(instance_id="mongo-replica-f16e9298b121",
        parameter_names="connPoolMaxConnsPerHost",
        parameter_role="Node")
    ```


    :param str instance_id: The instance ID to query.
    :param str output_file: File name where to save data source results.
    :param str parameter_names: The parameter names, support fuzzy query, case insensitive.
    :param str parameter_role: The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['outputFile'] = output_file
    __args__['parameterNames'] = parameter_names
    __args__['parameterRole'] = parameter_role
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:mongodb/instanceParameters:InstanceParameters', __args__, opts=opts, typ=InstanceParametersResult).value

    return AwaitableInstanceParametersResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        parameter_names=pulumi.get(__ret__, 'parameter_names'),
        parameter_role=pulumi.get(__ret__, 'parameter_role'),
        parameters=pulumi.get(__ret__, 'parameters'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(instance_parameters)
def instance_parameters_output(instance_id: Optional[pulumi.Input[str]] = None,
                               output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               parameter_names: Optional[pulumi.Input[Optional[str]]] = None,
                               parameter_role: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[InstanceParametersResult]:
    """
    Use this data source to query detailed information of mongodb instance parameters
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.mongodb.instance_parameters(instance_id="mongo-replica-f16e9298b121",
        parameter_names="connPoolMaxConnsPerHost",
        parameter_role="Node")
    ```


    :param str instance_id: The instance ID to query.
    :param str output_file: File name where to save data source results.
    :param str parameter_names: The parameter names, support fuzzy query, case insensitive.
    :param str parameter_role: The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.
    """
    ...
