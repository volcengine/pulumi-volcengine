# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccountArgs', 'Account']

@pulumi.input_type
class AccountArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 account_password: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 account_desc: Optional[pulumi.Input[str]] = None,
                 account_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]] = None,
                 auth_db: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Account resource.
        :param pulumi.Input[str] account_name: The name of the mongodb account.
        :param pulumi.Input[str] account_password: The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] instance_id: The id of the mongodb instance.
        :param pulumi.Input[str] account_desc: The description of the mongodb account.
        :param pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]] account_privileges: The privilege information of account.
        :param pulumi.Input[str] auth_db: The database of the mongodb account.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_password", account_password)
        pulumi.set(__self__, "instance_id", instance_id)
        if account_desc is not None:
            pulumi.set(__self__, "account_desc", account_desc)
        if account_privileges is not None:
            pulumi.set(__self__, "account_privileges", account_privileges)
        if auth_db is not None:
            pulumi.set(__self__, "auth_db", auth_db)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        The name of the mongodb account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> pulumi.Input[str]:
        """
        The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "account_password")

    @account_password.setter
    def account_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_password", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of the mongodb instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="accountDesc")
    def account_desc(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the mongodb account.
        """
        return pulumi.get(self, "account_desc")

    @account_desc.setter
    def account_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_desc", value)

    @property
    @pulumi.getter(name="accountPrivileges")
    def account_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]]:
        """
        The privilege information of account.
        """
        return pulumi.get(self, "account_privileges")

    @account_privileges.setter
    def account_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]]):
        pulumi.set(self, "account_privileges", value)

    @property
    @pulumi.getter(name="authDb")
    def auth_db(self) -> Optional[pulumi.Input[str]]:
        """
        The database of the mongodb account.
        """
        return pulumi.get(self, "auth_db")

    @auth_db.setter
    def auth_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_db", value)


@pulumi.input_type
class _AccountState:
    def __init__(__self__, *,
                 account_desc: Optional[pulumi.Input[str]] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_password: Optional[pulumi.Input[str]] = None,
                 account_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]] = None,
                 account_type: Optional[pulumi.Input[str]] = None,
                 auth_db: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Account resources.
        :param pulumi.Input[str] account_desc: The description of the mongodb account.
        :param pulumi.Input[str] account_name: The name of the mongodb account.
        :param pulumi.Input[str] account_password: The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]] account_privileges: The privilege information of account.
        :param pulumi.Input[str] account_type: The type of the account.
        :param pulumi.Input[str] auth_db: The database of the mongodb account.
        :param pulumi.Input[str] instance_id: The id of the mongodb instance.
        """
        if account_desc is not None:
            pulumi.set(__self__, "account_desc", account_desc)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_password is not None:
            pulumi.set(__self__, "account_password", account_password)
        if account_privileges is not None:
            pulumi.set(__self__, "account_privileges", account_privileges)
        if account_type is not None:
            pulumi.set(__self__, "account_type", account_type)
        if auth_db is not None:
            pulumi.set(__self__, "auth_db", auth_db)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="accountDesc")
    def account_desc(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the mongodb account.
        """
        return pulumi.get(self, "account_desc")

    @account_desc.setter
    def account_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_desc", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the mongodb account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "account_password")

    @account_password.setter
    def account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_password", value)

    @property
    @pulumi.getter(name="accountPrivileges")
    def account_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]]:
        """
        The privilege information of account.
        """
        return pulumi.get(self, "account_privileges")

    @account_privileges.setter
    def account_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]]):
        pulumi.set(self, "account_privileges", value)

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the account.
        """
        return pulumi.get(self, "account_type")

    @account_type.setter
    def account_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_type", value)

    @property
    @pulumi.getter(name="authDb")
    def auth_db(self) -> Optional[pulumi.Input[str]]:
        """
        The database of the mongodb account.
        """
        return pulumi.get(self, "auth_db")

    @auth_db.setter
    def auth_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_db", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the mongodb instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


class Account(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_desc: Optional[pulumi.Input[str]] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_password: Optional[pulumi.Input[str]] = None,
                 account_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountAccountPrivilegeArgs']]]]] = None,
                 auth_db: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage mongodb account
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.mongodb.Instance("fooInstance",
            zone_ids=[foo_zones.zones[0].id],
            db_engine_version="MongoDB_4_0",
            instance_type="ReplicaSet",
            node_spec="mongo.2c4g",
            storage_space_gb=20,
            subnet_id=foo_subnet.id,
            instance_name="acc-test-mongodb-replica",
            charge_type="PostPaid",
            super_account_password="93f0cb0614Aab12",
            project_name="default",
            tags=[volcengine.mongodb.InstanceTagArgs(
                key="k1",
                value="v1",
            )])
        foo_account = volcengine.mongodb.Account("fooAccount",
            instance_id=foo_instance.id,
            account_name="acc-test-mongodb-account",
            auth_db="admin",
            account_password="93f0cb0614Aab12",
            account_desc="acc-test",
            account_privileges=[
                volcengine.mongodb.AccountAccountPrivilegeArgs(
                    db_name="admin",
                    role_names=[
                        "userAdmin",
                        "clusterMonitor",
                    ],
                ),
                volcengine.mongodb.AccountAccountPrivilegeArgs(
                    db_name="config",
                    role_names=["read"],
                ),
                volcengine.mongodb.AccountAccountPrivilegeArgs(
                    db_name="local",
                    role_names=["read"],
                ),
            ])
        ```

        ## Import

        MongodbAccount can be imported using the instance_id:account_name, e.g.

        ```sh
        $ pulumi import volcengine:mongodb/account:Account default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_desc: The description of the mongodb account.
        :param pulumi.Input[str] account_name: The name of the mongodb account.
        :param pulumi.Input[str] account_password: The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountAccountPrivilegeArgs']]]] account_privileges: The privilege information of account.
        :param pulumi.Input[str] auth_db: The database of the mongodb account.
        :param pulumi.Input[str] instance_id: The id of the mongodb instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage mongodb account
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.mongodb.Instance("fooInstance",
            zone_ids=[foo_zones.zones[0].id],
            db_engine_version="MongoDB_4_0",
            instance_type="ReplicaSet",
            node_spec="mongo.2c4g",
            storage_space_gb=20,
            subnet_id=foo_subnet.id,
            instance_name="acc-test-mongodb-replica",
            charge_type="PostPaid",
            super_account_password="93f0cb0614Aab12",
            project_name="default",
            tags=[volcengine.mongodb.InstanceTagArgs(
                key="k1",
                value="v1",
            )])
        foo_account = volcengine.mongodb.Account("fooAccount",
            instance_id=foo_instance.id,
            account_name="acc-test-mongodb-account",
            auth_db="admin",
            account_password="93f0cb0614Aab12",
            account_desc="acc-test",
            account_privileges=[
                volcengine.mongodb.AccountAccountPrivilegeArgs(
                    db_name="admin",
                    role_names=[
                        "userAdmin",
                        "clusterMonitor",
                    ],
                ),
                volcengine.mongodb.AccountAccountPrivilegeArgs(
                    db_name="config",
                    role_names=["read"],
                ),
                volcengine.mongodb.AccountAccountPrivilegeArgs(
                    db_name="local",
                    role_names=["read"],
                ),
            ])
        ```

        ## Import

        MongodbAccount can be imported using the instance_id:account_name, e.g.

        ```sh
        $ pulumi import volcengine:mongodb/account:Account default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param AccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_desc: Optional[pulumi.Input[str]] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_password: Optional[pulumi.Input[str]] = None,
                 account_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountAccountPrivilegeArgs']]]]] = None,
                 auth_db: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountArgs.__new__(AccountArgs)

            __props__.__dict__["account_desc"] = account_desc
            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            if account_password is None and not opts.urn:
                raise TypeError("Missing required property 'account_password'")
            __props__.__dict__["account_password"] = None if account_password is None else pulumi.Output.secret(account_password)
            __props__.__dict__["account_privileges"] = account_privileges
            __props__.__dict__["auth_db"] = auth_db
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["account_type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accountPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Account, __self__).__init__(
            'volcengine:mongodb/account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_desc: Optional[pulumi.Input[str]] = None,
            account_name: Optional[pulumi.Input[str]] = None,
            account_password: Optional[pulumi.Input[str]] = None,
            account_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountAccountPrivilegeArgs']]]]] = None,
            account_type: Optional[pulumi.Input[str]] = None,
            auth_db: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_desc: The description of the mongodb account.
        :param pulumi.Input[str] account_name: The name of the mongodb account.
        :param pulumi.Input[str] account_password: The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountAccountPrivilegeArgs']]]] account_privileges: The privilege information of account.
        :param pulumi.Input[str] account_type: The type of the account.
        :param pulumi.Input[str] auth_db: The database of the mongodb account.
        :param pulumi.Input[str] instance_id: The id of the mongodb instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountState.__new__(_AccountState)

        __props__.__dict__["account_desc"] = account_desc
        __props__.__dict__["account_name"] = account_name
        __props__.__dict__["account_password"] = account_password
        __props__.__dict__["account_privileges"] = account_privileges
        __props__.__dict__["account_type"] = account_type
        __props__.__dict__["auth_db"] = auth_db
        __props__.__dict__["instance_id"] = instance_id
        return Account(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountDesc")
    def account_desc(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the mongodb account.
        """
        return pulumi.get(self, "account_desc")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[str]:
        """
        The name of the mongodb account.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> pulumi.Output[str]:
        """
        The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "account_password")

    @property
    @pulumi.getter(name="accountPrivileges")
    def account_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.AccountAccountPrivilege']]]:
        """
        The privilege information of account.
        """
        return pulumi.get(self, "account_privileges")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> pulumi.Output[str]:
        """
        The type of the account.
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="authDb")
    def auth_db(self) -> pulumi.Output[str]:
        """
        The database of the mongodb account.
        """
        return pulumi.get(self, "auth_db")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of the mongodb instance.
        """
        return pulumi.get(self, "instance_id")

