# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BucketRealtimeLogArgs', 'BucketRealtimeLog']

@pulumi.input_type
class BucketRealtimeLogArgs:
    def __init__(__self__, *,
                 access_log_configuration: pulumi.Input['BucketRealtimeLogAccessLogConfigurationArgs'],
                 bucket_name: pulumi.Input[str],
                 role: pulumi.Input[str]):
        """
        The set of arguments for constructing a BucketRealtimeLog resource.
        :param pulumi.Input['BucketRealtimeLogAccessLogConfigurationArgs'] access_log_configuration: The export schedule of the bucket inventory.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input[str] role: The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
        """
        pulumi.set(__self__, "access_log_configuration", access_log_configuration)
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="accessLogConfiguration")
    def access_log_configuration(self) -> pulumi.Input['BucketRealtimeLogAccessLogConfigurationArgs']:
        """
        The export schedule of the bucket inventory.
        """
        return pulumi.get(self, "access_log_configuration")

    @access_log_configuration.setter
    def access_log_configuration(self, value: pulumi.Input['BucketRealtimeLogAccessLogConfigurationArgs']):
        pulumi.set(self, "access_log_configuration", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class _BucketRealtimeLogState:
    def __init__(__self__, *,
                 access_log_configuration: Optional[pulumi.Input['BucketRealtimeLogAccessLogConfigurationArgs']] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BucketRealtimeLog resources.
        :param pulumi.Input['BucketRealtimeLogAccessLogConfigurationArgs'] access_log_configuration: The export schedule of the bucket inventory.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input[str] role: The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
        """
        if access_log_configuration is not None:
            pulumi.set(__self__, "access_log_configuration", access_log_configuration)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="accessLogConfiguration")
    def access_log_configuration(self) -> Optional[pulumi.Input['BucketRealtimeLogAccessLogConfigurationArgs']]:
        """
        The export schedule of the bucket inventory.
        """
        return pulumi.get(self, "access_log_configuration")

    @access_log_configuration.setter
    def access_log_configuration(self, value: Optional[pulumi.Input['BucketRealtimeLogAccessLogConfigurationArgs']]):
        pulumi.set(self, "access_log_configuration", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


class BucketRealtimeLog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_log_configuration: Optional[pulumi.Input[pulumi.InputType['BucketRealtimeLogAccessLogConfigurationArgs']]] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage tos bucket realtime log
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        # When deleting this resource, the tls related resources such as project and topic will not be automatically deleted
        foo = volcengine.tos.BucketRealtimeLog("foo",
            access_log_configuration=volcengine.tos.BucketRealtimeLogAccessLogConfigurationArgs(
                ttl=6,
            ),
            bucket_name="terraform-demo",
            role="TOSLogArchiveTLSRole")
        ```

        ## Import

        TosBucketRealtimeLog can be imported using the bucket_name, e.g.

        ```sh
        $ pulumi import volcengine:tos/bucketRealtimeLog:BucketRealtimeLog default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['BucketRealtimeLogAccessLogConfigurationArgs']] access_log_configuration: The export schedule of the bucket inventory.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input[str] role: The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketRealtimeLogArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage tos bucket realtime log
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        # When deleting this resource, the tls related resources such as project and topic will not be automatically deleted
        foo = volcengine.tos.BucketRealtimeLog("foo",
            access_log_configuration=volcengine.tos.BucketRealtimeLogAccessLogConfigurationArgs(
                ttl=6,
            ),
            bucket_name="terraform-demo",
            role="TOSLogArchiveTLSRole")
        ```

        ## Import

        TosBucketRealtimeLog can be imported using the bucket_name, e.g.

        ```sh
        $ pulumi import volcengine:tos/bucketRealtimeLog:BucketRealtimeLog default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param BucketRealtimeLogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketRealtimeLogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_log_configuration: Optional[pulumi.Input[pulumi.InputType['BucketRealtimeLogAccessLogConfigurationArgs']]] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketRealtimeLogArgs.__new__(BucketRealtimeLogArgs)

            if access_log_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'access_log_configuration'")
            __props__.__dict__["access_log_configuration"] = access_log_configuration
            if bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_name'")
            __props__.__dict__["bucket_name"] = bucket_name
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
        super(BucketRealtimeLog, __self__).__init__(
            'volcengine:tos/bucketRealtimeLog:BucketRealtimeLog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_log_configuration: Optional[pulumi.Input[pulumi.InputType['BucketRealtimeLogAccessLogConfigurationArgs']]] = None,
            bucket_name: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None) -> 'BucketRealtimeLog':
        """
        Get an existing BucketRealtimeLog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['BucketRealtimeLogAccessLogConfigurationArgs']] access_log_configuration: The export schedule of the bucket inventory.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input[str] role: The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketRealtimeLogState.__new__(_BucketRealtimeLogState)

        __props__.__dict__["access_log_configuration"] = access_log_configuration
        __props__.__dict__["bucket_name"] = bucket_name
        __props__.__dict__["role"] = role
        return BucketRealtimeLog(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessLogConfiguration")
    def access_log_configuration(self) -> pulumi.Output['outputs.BucketRealtimeLogAccessLogConfiguration']:
        """
        The export schedule of the bucket inventory.
        """
        return pulumi.get(self, "access_log_configuration")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Output[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
        """
        return pulumi.get(self, "role")

