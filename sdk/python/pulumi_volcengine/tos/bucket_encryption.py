# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BucketEncryptionArgs', 'BucketEncryption']

@pulumi.input_type
class BucketEncryptionArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 rule: pulumi.Input['BucketEncryptionRuleArgs']):
        """
        The set of arguments for constructing a BucketEncryption resource.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input['BucketEncryptionRuleArgs'] rule: The rule of the bucket encryption.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input['BucketEncryptionRuleArgs']:
        """
        The rule of the bucket encryption.
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input['BucketEncryptionRuleArgs']):
        pulumi.set(self, "rule", value)


@pulumi.input_type
class _BucketEncryptionState:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input['BucketEncryptionRuleArgs']] = None):
        """
        Input properties used for looking up and filtering BucketEncryption resources.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input['BucketEncryptionRuleArgs'] rule: The rule of the bucket encryption.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input['BucketEncryptionRuleArgs']]:
        """
        The rule of the bucket encryption.
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input['BucketEncryptionRuleArgs']]):
        pulumi.set(self, "rule", value)


class BucketEncryption(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[pulumi.InputType['BucketEncryptionRuleArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage tos bucket encryption
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_bucket = volcengine.tos.Bucket("fooBucket",
            bucket_name="tf-acc-test-bucket",
            public_acl="private",
            az_redundancy="multi-az",
            project_name="default",
            tags=[volcengine.tos.BucketTagArgs(
                key="k1",
                value="v1",
            )])
        foo_keyring = volcengine.kms.Keyring("fooKeyring",
            keyring_name="acc-test-keyring",
            description="acc-test",
            project_name="default")
        foo_bucket_encryption = volcengine.tos.BucketEncryption("fooBucketEncryption",
            bucket_name=foo_bucket.id,
            rule=volcengine.tos.BucketEncryptionRuleArgs(
                apply_server_side_encryption_by_default=volcengine.tos.BucketEncryptionRuleApplyServerSideEncryptionByDefaultArgs(
                    sse_algorithm="kms",
                    kms_data_encryption="AES256",
                    kms_master_key_id=foo_keyring.id,
                ),
            ))
        ```

        ## Import

        TosBucketEncryption can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tos/bucketEncryption:BucketEncryption default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input[pulumi.InputType['BucketEncryptionRuleArgs']] rule: The rule of the bucket encryption.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketEncryptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage tos bucket encryption
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_bucket = volcengine.tos.Bucket("fooBucket",
            bucket_name="tf-acc-test-bucket",
            public_acl="private",
            az_redundancy="multi-az",
            project_name="default",
            tags=[volcengine.tos.BucketTagArgs(
                key="k1",
                value="v1",
            )])
        foo_keyring = volcengine.kms.Keyring("fooKeyring",
            keyring_name="acc-test-keyring",
            description="acc-test",
            project_name="default")
        foo_bucket_encryption = volcengine.tos.BucketEncryption("fooBucketEncryption",
            bucket_name=foo_bucket.id,
            rule=volcengine.tos.BucketEncryptionRuleArgs(
                apply_server_side_encryption_by_default=volcengine.tos.BucketEncryptionRuleApplyServerSideEncryptionByDefaultArgs(
                    sse_algorithm="kms",
                    kms_data_encryption="AES256",
                    kms_master_key_id=foo_keyring.id,
                ),
            ))
        ```

        ## Import

        TosBucketEncryption can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tos/bucketEncryption:BucketEncryption default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param BucketEncryptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketEncryptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[pulumi.InputType['BucketEncryptionRuleArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketEncryptionArgs.__new__(BucketEncryptionArgs)

            if bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_name'")
            __props__.__dict__["bucket_name"] = bucket_name
            if rule is None and not opts.urn:
                raise TypeError("Missing required property 'rule'")
            __props__.__dict__["rule"] = rule
        super(BucketEncryption, __self__).__init__(
            'volcengine:tos/bucketEncryption:BucketEncryption',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket_name: Optional[pulumi.Input[str]] = None,
            rule: Optional[pulumi.Input[pulumi.InputType['BucketEncryptionRuleArgs']]] = None) -> 'BucketEncryption':
        """
        Get an existing BucketEncryption resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input[pulumi.InputType['BucketEncryptionRuleArgs']] rule: The rule of the bucket encryption.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketEncryptionState.__new__(_BucketEncryptionState)

        __props__.__dict__["bucket_name"] = bucket_name
        __props__.__dict__["rule"] = rule
        return BucketEncryption(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Output[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Output['outputs.BucketEncryptionRule']:
        """
        The rule of the bucket encryption.
        """
        return pulumi.get(self, "rule")

