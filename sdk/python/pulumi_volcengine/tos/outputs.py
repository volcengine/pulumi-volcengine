# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BucketAccountAcl',
    'BucketInventoriesInventoryConfigurationResult',
    'BucketInventoriesInventoryConfigurationDestinationResult',
    'BucketInventoriesInventoryConfigurationDestinationTosBucketDestinationResult',
    'BucketInventoriesInventoryConfigurationFilterResult',
    'BucketInventoriesInventoryConfigurationOptionalFieldResult',
    'BucketInventoriesInventoryConfigurationScheduleResult',
    'BucketInventoryDestination',
    'BucketInventoryDestinationTosBucketDestination',
    'BucketInventoryFilter',
    'BucketInventoryOptionalFields',
    'BucketInventorySchedule',
    'BucketObjectAccountAcl',
    'BucketObjectTag',
    'BucketObjectsObjectResult',
    'BucketRealtimeLogAccessLogConfiguration',
    'BucketTag',
    'BucketsBucketResult',
    'GetBucketInventoriesInventoryConfigurationResult',
    'GetBucketInventoriesInventoryConfigurationDestinationResult',
    'GetBucketInventoriesInventoryConfigurationDestinationTosBucketDestinationResult',
    'GetBucketInventoriesInventoryConfigurationFilterResult',
    'GetBucketInventoriesInventoryConfigurationOptionalFieldResult',
    'GetBucketInventoriesInventoryConfigurationScheduleResult',
    'GetBucketObjectsObjectResult',
    'GetBucketsBucketResult',
]

@pulumi.output_type
class BucketAccountAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "aclType":
            suggest = "acl_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketAccountAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketAccountAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketAccountAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 permission: str,
                 acl_type: Optional[str] = None):
        """
        :param str account_id: The accountId to control.
        :param str permission: The permission to control.Valid value is FULL_CONTROL|READ|READ_ACP|WRITE|WRITE_ACP.
        :param str acl_type: The acl type to control.Valid value is CanonicalUser.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "permission", permission)
        if acl_type is not None:
            pulumi.set(__self__, "acl_type", acl_type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The accountId to control.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def permission(self) -> str:
        """
        The permission to control.Valid value is FULL_CONTROL|READ|READ_ACP|WRITE|WRITE_ACP.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="aclType")
    def acl_type(self) -> Optional[str]:
        """
        The acl type to control.Valid value is CanonicalUser.
        """
        return pulumi.get(self, "acl_type")


@pulumi.output_type
class BucketInventoriesInventoryConfigurationResult(dict):
    def __init__(__self__, *,
                 bucket_name: str,
                 destinations: Sequence['outputs.BucketInventoriesInventoryConfigurationDestinationResult'],
                 filters: Sequence['outputs.BucketInventoriesInventoryConfigurationFilterResult'],
                 id: str,
                 included_object_versions: str,
                 is_enabled: bool,
                 optional_fields: Sequence['outputs.BucketInventoriesInventoryConfigurationOptionalFieldResult'],
                 schedules: Sequence['outputs.BucketInventoriesInventoryConfigurationScheduleResult']):
        """
        :param str bucket_name: The name the TOS bucket.
        :param Sequence['BucketInventoriesInventoryConfigurationDestinationArgs'] destinations: The destination information of the bucket inventory.
        :param Sequence['BucketInventoriesInventoryConfigurationFilterArgs'] filters: The filter of the bucket inventory.
        :param str id: The name of the bucket inventory.
        :param str included_object_versions: The export version of object. Valid values: `All`, `Current`.
        :param bool is_enabled: Whether to enable the bucket inventory.
        :param Sequence['BucketInventoriesInventoryConfigurationOptionalFieldArgs'] optional_fields: The information exported from the bucket inventory.
        :param Sequence['BucketInventoriesInventoryConfigurationScheduleArgs'] schedules: The export schedule of the bucket inventory.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "included_object_versions", included_object_versions)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "optional_fields", optional_fields)
        pulumi.set(__self__, "schedules", schedules)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        The name the TOS bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.BucketInventoriesInventoryConfigurationDestinationResult']:
        """
        The destination information of the bucket inventory.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.BucketInventoriesInventoryConfigurationFilterResult']:
        """
        The filter of the bucket inventory.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The name of the bucket inventory.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includedObjectVersions")
    def included_object_versions(self) -> str:
        """
        The export version of object. Valid values: `All`, `Current`.
        """
        return pulumi.get(self, "included_object_versions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether to enable the bucket inventory.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> Sequence['outputs.BucketInventoriesInventoryConfigurationOptionalFieldResult']:
        """
        The information exported from the bucket inventory.
        """
        return pulumi.get(self, "optional_fields")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.BucketInventoriesInventoryConfigurationScheduleResult']:
        """
        The export schedule of the bucket inventory.
        """
        return pulumi.get(self, "schedules")


@pulumi.output_type
class BucketInventoriesInventoryConfigurationDestinationResult(dict):
    def __init__(__self__, *,
                 tos_bucket_destinations: Sequence['outputs.BucketInventoriesInventoryConfigurationDestinationTosBucketDestinationResult']):
        """
        :param Sequence['BucketInventoriesInventoryConfigurationDestinationTosBucketDestinationArgs'] tos_bucket_destinations: The destination tos bucket information of the bucket inventory.
        """
        pulumi.set(__self__, "tos_bucket_destinations", tos_bucket_destinations)

    @property
    @pulumi.getter(name="tosBucketDestinations")
    def tos_bucket_destinations(self) -> Sequence['outputs.BucketInventoriesInventoryConfigurationDestinationTosBucketDestinationResult']:
        """
        The destination tos bucket information of the bucket inventory.
        """
        return pulumi.get(self, "tos_bucket_destinations")


@pulumi.output_type
class BucketInventoriesInventoryConfigurationDestinationTosBucketDestinationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 bucket: str,
                 format: str,
                 prefix: str,
                 role: str):
        """
        :param str account_id: The account id of the destination tos bucket.
        :param str bucket: The name of the destination tos bucket.
        :param str format: The format of the bucket inventory. Valid values: `CSV`.
        :param str prefix: The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
        :param str role: The role name used to grant object storage access to read all files from the source bucket and write files to the destination bucket.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account id of the destination tos bucket.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the destination tos bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The format of the bucket inventory. Valid values: `CSV`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role name used to grant object storage access to read all files from the source bucket and write files to the destination bucket.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class BucketInventoriesInventoryConfigurationFilterResult(dict):
    def __init__(__self__, *,
                 prefix: str):
        """
        :param str prefix: The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
        """
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class BucketInventoriesInventoryConfigurationOptionalFieldResult(dict):
    def __init__(__self__, *,
                 fields: Sequence[str]):
        """
        :param Sequence[str] fields: The information exported from the bucket inventory. Valid values: `Size`, `LastModifiedDate`, `ETag`, `StorageClass`, `IsMultipartUploaded`, `EncryptionStatus`, `CRC64`, `ReplicationStatus`.
        """
        pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Sequence[str]:
        """
        The information exported from the bucket inventory. Valid values: `Size`, `LastModifiedDate`, `ETag`, `StorageClass`, `IsMultipartUploaded`, `EncryptionStatus`, `CRC64`, `ReplicationStatus`.
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class BucketInventoriesInventoryConfigurationScheduleResult(dict):
    def __init__(__self__, *,
                 frequency: str):
        """
        :param str frequency: The export schedule of the bucket inventory. Valid values: `Daily`, `Weekly`.
        """
        pulumi.set(__self__, "frequency", frequency)

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        The export schedule of the bucket inventory. Valid values: `Daily`, `Weekly`.
        """
        return pulumi.get(self, "frequency")


@pulumi.output_type
class BucketInventoryDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tosBucketDestination":
            suggest = "tos_bucket_destination"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketInventoryDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketInventoryDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketInventoryDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tos_bucket_destination: 'outputs.BucketInventoryDestinationTosBucketDestination'):
        """
        :param 'BucketInventoryDestinationTosBucketDestinationArgs' tos_bucket_destination: The destination tos bucket information of the bucket inventory.
        """
        pulumi.set(__self__, "tos_bucket_destination", tos_bucket_destination)

    @property
    @pulumi.getter(name="tosBucketDestination")
    def tos_bucket_destination(self) -> 'outputs.BucketInventoryDestinationTosBucketDestination':
        """
        The destination tos bucket information of the bucket inventory.
        """
        return pulumi.get(self, "tos_bucket_destination")


@pulumi.output_type
class BucketInventoryDestinationTosBucketDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketInventoryDestinationTosBucketDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketInventoryDestinationTosBucketDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketInventoryDestinationTosBucketDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 bucket: str,
                 format: str,
                 role: str,
                 prefix: Optional[str] = None):
        """
        :param str account_id: The account id of the destination tos bucket.
        :param str bucket: The name of the destination tos bucket.
        :param str format: The format of the bucket inventory. Valid values: `CSV`.
        :param str role: The role name used to grant TOS access to read all files from the source bucket and write files to the destination bucket. You can use the default TOS role `TosArchiveTOSInventory`.
        :param str prefix: The storage path prefix of the bucket inventory in destination tos bucket.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "role", role)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account id of the destination tos bucket.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the destination tos bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The format of the bucket inventory. Valid values: `CSV`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role name used to grant TOS access to read all files from the source bucket and write files to the destination bucket. You can use the default TOS role `TosArchiveTOSInventory`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The storage path prefix of the bucket inventory in destination tos bucket.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class BucketInventoryFilter(dict):
    def __init__(__self__, *,
                 prefix: Optional[str] = None):
        """
        :param str prefix: The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class BucketInventoryOptionalFields(dict):
    def __init__(__self__, *,
                 fields: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] fields: The information exported from the bucket inventory. Valid values: `Size`, `LastModifiedDate`, `ETag`, `StorageClass`, `IsMultipartUploaded`, `EncryptionStatus`, `CRC64`, `ReplicationStatus`.
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[str]]:
        """
        The information exported from the bucket inventory. Valid values: `Size`, `LastModifiedDate`, `ETag`, `StorageClass`, `IsMultipartUploaded`, `EncryptionStatus`, `CRC64`, `ReplicationStatus`.
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class BucketInventorySchedule(dict):
    def __init__(__self__, *,
                 frequency: str):
        """
        :param str frequency: The export schedule of the bucket inventory. Valid values: `Daily`, `Weekly`.
        """
        pulumi.set(__self__, "frequency", frequency)

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        The export schedule of the bucket inventory. Valid values: `Daily`, `Weekly`.
        """
        return pulumi.get(self, "frequency")


@pulumi.output_type
class BucketObjectAccountAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "aclType":
            suggest = "acl_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketObjectAccountAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketObjectAccountAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketObjectAccountAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 permission: str,
                 acl_type: Optional[str] = None):
        """
        :param str account_id: The accountId to control.
        :param str permission: The permission to control.Valid value is FULL_CONTROL|READ|READ_ACP|WRITE|WRITE_ACP.
        :param str acl_type: The acl type to control.Valid value is CanonicalUser.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "permission", permission)
        if acl_type is not None:
            pulumi.set(__self__, "acl_type", acl_type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The accountId to control.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def permission(self) -> str:
        """
        The permission to control.Valid value is FULL_CONTROL|READ|READ_ACP|WRITE|WRITE_ACP.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="aclType")
    def acl_type(self) -> Optional[str]:
        """
        The acl type to control.Valid value is CanonicalUser.
        """
        return pulumi.get(self, "acl_type")


@pulumi.output_type
class BucketObjectTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BucketObjectsObjectResult(dict):
    def __init__(__self__, *,
                 content: str,
                 name: str,
                 size: int,
                 storage_class: str):
        """
        :param str content: The content the TOS Object when content type is json or text and xml.
        :param str name: The name the TOS Object.
        :param int size: The name the TOS Object size.
        :param str storage_class: The name the TOS Object storage class.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content the TOS Object when content type is json or text and xml.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name the TOS Object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The name the TOS Object size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        The name the TOS Object storage class.
        """
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class BucketRealtimeLogAccessLogConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tlsDashboardId":
            suggest = "tls_dashboard_id"
        elif key == "tlsProjectId":
            suggest = "tls_project_id"
        elif key == "tlsTopicId":
            suggest = "tls_topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketRealtimeLogAccessLogConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketRealtimeLogAccessLogConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketRealtimeLogAccessLogConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tls_dashboard_id: Optional[str] = None,
                 tls_project_id: Optional[str] = None,
                 tls_topic_id: Optional[str] = None,
                 ttl: Optional[int] = None):
        """
        :param str tls_dashboard_id: The ID of the tls dashboard.
        :param str tls_project_id: The ID of the tls project.
        :param str tls_topic_id: The ID of the tls topic.
        :param int ttl: The TLS log retention duration. Unit in days. Valid values range is 1~3650. default is 7.
        """
        if tls_dashboard_id is not None:
            pulumi.set(__self__, "tls_dashboard_id", tls_dashboard_id)
        if tls_project_id is not None:
            pulumi.set(__self__, "tls_project_id", tls_project_id)
        if tls_topic_id is not None:
            pulumi.set(__self__, "tls_topic_id", tls_topic_id)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="tlsDashboardId")
    def tls_dashboard_id(self) -> Optional[str]:
        """
        The ID of the tls dashboard.
        """
        return pulumi.get(self, "tls_dashboard_id")

    @property
    @pulumi.getter(name="tlsProjectId")
    def tls_project_id(self) -> Optional[str]:
        """
        The ID of the tls project.
        """
        return pulumi.get(self, "tls_project_id")

    @property
    @pulumi.getter(name="tlsTopicId")
    def tls_topic_id(self) -> Optional[str]:
        """
        The ID of the tls topic.
        """
        return pulumi.get(self, "tls_topic_id")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        The TLS log retention duration. Unit in days. Valid values range is 1~3650. default is 7.
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class BucketTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BucketsBucketResult(dict):
    def __init__(__self__, *,
                 creation_date: str,
                 extranet_endpoint: str,
                 intranet_endpoint: str,
                 is_truncated: bool,
                 location: str,
                 marker: str,
                 max_keys: int,
                 name: str,
                 prefix: str):
        """
        :param str creation_date: The create date of the TOS bucket.
        :param str extranet_endpoint: The extranet endpoint of the TOS bucket.
        :param str intranet_endpoint: The intranet endpoint the TOS bucket.
        :param bool is_truncated: (**Deprecated**) The Field is Deprecated. The truncated the TOS bucket.
        :param str location: The location of the TOS bucket.
        :param str marker: (**Deprecated**) The Field is Deprecated. The marker the TOS bucket.
        :param int max_keys: (**Deprecated**) The Field is Deprecated. The max keys the TOS bucket.
        :param str name: The name the TOS bucket.
        :param str prefix: (**Deprecated**) The Field is Deprecated. The prefix the TOS bucket.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "extranet_endpoint", extranet_endpoint)
        pulumi.set(__self__, "intranet_endpoint", intranet_endpoint)
        pulumi.set(__self__, "is_truncated", is_truncated)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "marker", marker)
        pulumi.set(__self__, "max_keys", max_keys)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        """
        The create date of the TOS bucket.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="extranetEndpoint")
    def extranet_endpoint(self) -> str:
        """
        The extranet endpoint of the TOS bucket.
        """
        return pulumi.get(self, "extranet_endpoint")

    @property
    @pulumi.getter(name="intranetEndpoint")
    def intranet_endpoint(self) -> str:
        """
        The intranet endpoint the TOS bucket.
        """
        return pulumi.get(self, "intranet_endpoint")

    @property
    @pulumi.getter(name="isTruncated")
    def is_truncated(self) -> bool:
        """
        (**Deprecated**) The Field is Deprecated. The truncated the TOS bucket.
        """
        warnings.warn("""The Field is Deprecated.""", DeprecationWarning)
        pulumi.log.warn("""is_truncated is deprecated: The Field is Deprecated.""")

        return pulumi.get(self, "is_truncated")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the TOS bucket.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def marker(self) -> str:
        """
        (**Deprecated**) The Field is Deprecated. The marker the TOS bucket.
        """
        warnings.warn("""The Field is Deprecated.""", DeprecationWarning)
        pulumi.log.warn("""marker is deprecated: The Field is Deprecated.""")

        return pulumi.get(self, "marker")

    @property
    @pulumi.getter(name="maxKeys")
    def max_keys(self) -> int:
        """
        (**Deprecated**) The Field is Deprecated. The max keys the TOS bucket.
        """
        warnings.warn("""The Field is Deprecated.""", DeprecationWarning)
        pulumi.log.warn("""max_keys is deprecated: The Field is Deprecated.""")

        return pulumi.get(self, "max_keys")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name the TOS bucket.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        (**Deprecated**) The Field is Deprecated. The prefix the TOS bucket.
        """
        warnings.warn("""The Field is Deprecated.""", DeprecationWarning)
        pulumi.log.warn("""prefix is deprecated: The Field is Deprecated.""")

        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetBucketInventoriesInventoryConfigurationResult(dict):
    def __init__(__self__, *,
                 bucket_name: str,
                 destinations: Sequence['outputs.GetBucketInventoriesInventoryConfigurationDestinationResult'],
                 filters: Sequence['outputs.GetBucketInventoriesInventoryConfigurationFilterResult'],
                 id: str,
                 included_object_versions: str,
                 is_enabled: bool,
                 optional_fields: Sequence['outputs.GetBucketInventoriesInventoryConfigurationOptionalFieldResult'],
                 schedules: Sequence['outputs.GetBucketInventoriesInventoryConfigurationScheduleResult']):
        """
        :param str bucket_name: The name the TOS bucket.
        :param Sequence['GetBucketInventoriesInventoryConfigurationDestinationArgs'] destinations: The destination information of the bucket inventory.
        :param Sequence['GetBucketInventoriesInventoryConfigurationFilterArgs'] filters: The filter of the bucket inventory.
        :param str id: The name of the bucket inventory.
        :param str included_object_versions: The export version of object. Valid values: `All`, `Current`.
        :param bool is_enabled: Whether to enable the bucket inventory.
        :param Sequence['GetBucketInventoriesInventoryConfigurationOptionalFieldArgs'] optional_fields: The information exported from the bucket inventory.
        :param Sequence['GetBucketInventoriesInventoryConfigurationScheduleArgs'] schedules: The export schedule of the bucket inventory.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "included_object_versions", included_object_versions)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "optional_fields", optional_fields)
        pulumi.set(__self__, "schedules", schedules)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        The name the TOS bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetBucketInventoriesInventoryConfigurationDestinationResult']:
        """
        The destination information of the bucket inventory.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetBucketInventoriesInventoryConfigurationFilterResult']:
        """
        The filter of the bucket inventory.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The name of the bucket inventory.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includedObjectVersions")
    def included_object_versions(self) -> str:
        """
        The export version of object. Valid values: `All`, `Current`.
        """
        return pulumi.get(self, "included_object_versions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether to enable the bucket inventory.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> Sequence['outputs.GetBucketInventoriesInventoryConfigurationOptionalFieldResult']:
        """
        The information exported from the bucket inventory.
        """
        return pulumi.get(self, "optional_fields")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetBucketInventoriesInventoryConfigurationScheduleResult']:
        """
        The export schedule of the bucket inventory.
        """
        return pulumi.get(self, "schedules")


@pulumi.output_type
class GetBucketInventoriesInventoryConfigurationDestinationResult(dict):
    def __init__(__self__, *,
                 tos_bucket_destinations: Sequence['outputs.GetBucketInventoriesInventoryConfigurationDestinationTosBucketDestinationResult']):
        """
        :param Sequence['GetBucketInventoriesInventoryConfigurationDestinationTosBucketDestinationArgs'] tos_bucket_destinations: The destination tos bucket information of the bucket inventory.
        """
        pulumi.set(__self__, "tos_bucket_destinations", tos_bucket_destinations)

    @property
    @pulumi.getter(name="tosBucketDestinations")
    def tos_bucket_destinations(self) -> Sequence['outputs.GetBucketInventoriesInventoryConfigurationDestinationTosBucketDestinationResult']:
        """
        The destination tos bucket information of the bucket inventory.
        """
        return pulumi.get(self, "tos_bucket_destinations")


@pulumi.output_type
class GetBucketInventoriesInventoryConfigurationDestinationTosBucketDestinationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 bucket: str,
                 format: str,
                 prefix: str,
                 role: str):
        """
        :param str account_id: The account id of the destination tos bucket.
        :param str bucket: The name of the destination tos bucket.
        :param str format: The format of the bucket inventory. Valid values: `CSV`.
        :param str prefix: The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
        :param str role: The role name used to grant object storage access to read all files from the source bucket and write files to the destination bucket.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account id of the destination tos bucket.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the destination tos bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The format of the bucket inventory. Valid values: `CSV`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role name used to grant object storage access to read all files from the source bucket and write files to the destination bucket.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetBucketInventoriesInventoryConfigurationFilterResult(dict):
    def __init__(__self__, *,
                 prefix: str):
        """
        :param str prefix: The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
        """
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetBucketInventoriesInventoryConfigurationOptionalFieldResult(dict):
    def __init__(__self__, *,
                 fields: Sequence[str]):
        """
        :param Sequence[str] fields: The information exported from the bucket inventory. Valid values: `Size`, `LastModifiedDate`, `ETag`, `StorageClass`, `IsMultipartUploaded`, `EncryptionStatus`, `CRC64`, `ReplicationStatus`.
        """
        pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Sequence[str]:
        """
        The information exported from the bucket inventory. Valid values: `Size`, `LastModifiedDate`, `ETag`, `StorageClass`, `IsMultipartUploaded`, `EncryptionStatus`, `CRC64`, `ReplicationStatus`.
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class GetBucketInventoriesInventoryConfigurationScheduleResult(dict):
    def __init__(__self__, *,
                 frequency: str):
        """
        :param str frequency: The export schedule of the bucket inventory. Valid values: `Daily`, `Weekly`.
        """
        pulumi.set(__self__, "frequency", frequency)

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        The export schedule of the bucket inventory. Valid values: `Daily`, `Weekly`.
        """
        return pulumi.get(self, "frequency")


@pulumi.output_type
class GetBucketObjectsObjectResult(dict):
    def __init__(__self__, *,
                 content: str,
                 name: str,
                 size: int,
                 storage_class: str):
        """
        :param str content: The content the TOS Object when content type is json or text and xml.
        :param str name: The name the TOS Object.
        :param int size: The name the TOS Object size.
        :param str storage_class: The name the TOS Object storage class.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content the TOS Object when content type is json or text and xml.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name the TOS Object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The name the TOS Object size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        The name the TOS Object storage class.
        """
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class GetBucketsBucketResult(dict):
    def __init__(__self__, *,
                 creation_date: str,
                 extranet_endpoint: str,
                 intranet_endpoint: str,
                 is_truncated: bool,
                 location: str,
                 marker: str,
                 max_keys: int,
                 name: str,
                 prefix: str):
        """
        :param str creation_date: The create date of the TOS bucket.
        :param str extranet_endpoint: The extranet endpoint of the TOS bucket.
        :param str intranet_endpoint: The intranet endpoint the TOS bucket.
        :param bool is_truncated: (**Deprecated**) The Field is Deprecated. The truncated the TOS bucket.
        :param str location: The location of the TOS bucket.
        :param str marker: (**Deprecated**) The Field is Deprecated. The marker the TOS bucket.
        :param int max_keys: (**Deprecated**) The Field is Deprecated. The max keys the TOS bucket.
        :param str name: The name the TOS bucket.
        :param str prefix: (**Deprecated**) The Field is Deprecated. The prefix the TOS bucket.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "extranet_endpoint", extranet_endpoint)
        pulumi.set(__self__, "intranet_endpoint", intranet_endpoint)
        pulumi.set(__self__, "is_truncated", is_truncated)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "marker", marker)
        pulumi.set(__self__, "max_keys", max_keys)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        """
        The create date of the TOS bucket.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="extranetEndpoint")
    def extranet_endpoint(self) -> str:
        """
        The extranet endpoint of the TOS bucket.
        """
        return pulumi.get(self, "extranet_endpoint")

    @property
    @pulumi.getter(name="intranetEndpoint")
    def intranet_endpoint(self) -> str:
        """
        The intranet endpoint the TOS bucket.
        """
        return pulumi.get(self, "intranet_endpoint")

    @property
    @pulumi.getter(name="isTruncated")
    def is_truncated(self) -> bool:
        """
        (**Deprecated**) The Field is Deprecated. The truncated the TOS bucket.
        """
        warnings.warn("""The Field is Deprecated.""", DeprecationWarning)
        pulumi.log.warn("""is_truncated is deprecated: The Field is Deprecated.""")

        return pulumi.get(self, "is_truncated")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the TOS bucket.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def marker(self) -> str:
        """
        (**Deprecated**) The Field is Deprecated. The marker the TOS bucket.
        """
        warnings.warn("""The Field is Deprecated.""", DeprecationWarning)
        pulumi.log.warn("""marker is deprecated: The Field is Deprecated.""")

        return pulumi.get(self, "marker")

    @property
    @pulumi.getter(name="maxKeys")
    def max_keys(self) -> int:
        """
        (**Deprecated**) The Field is Deprecated. The max keys the TOS bucket.
        """
        warnings.warn("""The Field is Deprecated.""", DeprecationWarning)
        pulumi.log.warn("""max_keys is deprecated: The Field is Deprecated.""")

        return pulumi.get(self, "max_keys")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name the TOS bucket.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        (**Deprecated**) The Field is Deprecated. The prefix the TOS bucket.
        """
        warnings.warn("""The Field is Deprecated.""", DeprecationWarning)
        pulumi.log.warn("""prefix is deprecated: The Field is Deprecated.""")

        return pulumi.get(self, "prefix")


