# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BucketInventoryArgs', 'BucketInventory']

@pulumi.input_type
class BucketInventoryArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 destination: pulumi.Input['BucketInventoryDestinationArgs'],
                 included_object_versions: pulumi.Input[str],
                 inventory_id: pulumi.Input[str],
                 is_enabled: pulumi.Input[bool],
                 schedule: pulumi.Input['BucketInventoryScheduleArgs'],
                 filter: Optional[pulumi.Input['BucketInventoryFilterArgs']] = None,
                 optional_fields: Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']] = None):
        """
        The set of arguments for constructing a BucketInventory resource.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input['BucketInventoryDestinationArgs'] destination: The destination information of the bucket inventory.
        :param pulumi.Input[str] included_object_versions: The export version of object. Valid values: `All`, `Current`.
        :param pulumi.Input[str] inventory_id: The name of the bucket inventory.
        :param pulumi.Input[bool] is_enabled: Whether to enable the bucket inventory.
        :param pulumi.Input['BucketInventoryScheduleArgs'] schedule: The export schedule of the bucket inventory.
        :param pulumi.Input['BucketInventoryFilterArgs'] filter: The filter of the bucket inventory.
        :param pulumi.Input['BucketInventoryOptionalFieldsArgs'] optional_fields: The information exported from the bucket inventory.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "included_object_versions", included_object_versions)
        pulumi.set(__self__, "inventory_id", inventory_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "schedule", schedule)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if optional_fields is not None:
            pulumi.set(__self__, "optional_fields", optional_fields)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['BucketInventoryDestinationArgs']:
        """
        The destination information of the bucket inventory.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['BucketInventoryDestinationArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="includedObjectVersions")
    def included_object_versions(self) -> pulumi.Input[str]:
        """
        The export version of object. Valid values: `All`, `Current`.
        """
        return pulumi.get(self, "included_object_versions")

    @included_object_versions.setter
    def included_object_versions(self, value: pulumi.Input[str]):
        pulumi.set(self, "included_object_versions", value)

    @property
    @pulumi.getter(name="inventoryId")
    def inventory_id(self) -> pulumi.Input[str]:
        """
        The name of the bucket inventory.
        """
        return pulumi.get(self, "inventory_id")

    @inventory_id.setter
    def inventory_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "inventory_id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Whether to enable the bucket inventory.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['BucketInventoryScheduleArgs']:
        """
        The export schedule of the bucket inventory.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input['BucketInventoryScheduleArgs']):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['BucketInventoryFilterArgs']]:
        """
        The filter of the bucket inventory.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['BucketInventoryFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']]:
        """
        The information exported from the bucket inventory.
        """
        return pulumi.get(self, "optional_fields")

    @optional_fields.setter
    def optional_fields(self, value: Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']]):
        pulumi.set(self, "optional_fields", value)


@pulumi.input_type
class _BucketInventoryState:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input['BucketInventoryDestinationArgs']] = None,
                 filter: Optional[pulumi.Input['BucketInventoryFilterArgs']] = None,
                 included_object_versions: Optional[pulumi.Input[str]] = None,
                 inventory_id: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 optional_fields: Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']] = None,
                 schedule: Optional[pulumi.Input['BucketInventoryScheduleArgs']] = None):
        """
        Input properties used for looking up and filtering BucketInventory resources.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input['BucketInventoryDestinationArgs'] destination: The destination information of the bucket inventory.
        :param pulumi.Input['BucketInventoryFilterArgs'] filter: The filter of the bucket inventory.
        :param pulumi.Input[str] included_object_versions: The export version of object. Valid values: `All`, `Current`.
        :param pulumi.Input[str] inventory_id: The name of the bucket inventory.
        :param pulumi.Input[bool] is_enabled: Whether to enable the bucket inventory.
        :param pulumi.Input['BucketInventoryOptionalFieldsArgs'] optional_fields: The information exported from the bucket inventory.
        :param pulumi.Input['BucketInventoryScheduleArgs'] schedule: The export schedule of the bucket inventory.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if included_object_versions is not None:
            pulumi.set(__self__, "included_object_versions", included_object_versions)
        if inventory_id is not None:
            pulumi.set(__self__, "inventory_id", inventory_id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if optional_fields is not None:
            pulumi.set(__self__, "optional_fields", optional_fields)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input['BucketInventoryDestinationArgs']]:
        """
        The destination information of the bucket inventory.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input['BucketInventoryDestinationArgs']]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['BucketInventoryFilterArgs']]:
        """
        The filter of the bucket inventory.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['BucketInventoryFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="includedObjectVersions")
    def included_object_versions(self) -> Optional[pulumi.Input[str]]:
        """
        The export version of object. Valid values: `All`, `Current`.
        """
        return pulumi.get(self, "included_object_versions")

    @included_object_versions.setter
    def included_object_versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "included_object_versions", value)

    @property
    @pulumi.getter(name="inventoryId")
    def inventory_id(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the bucket inventory.
        """
        return pulumi.get(self, "inventory_id")

    @inventory_id.setter
    def inventory_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inventory_id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the bucket inventory.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']]:
        """
        The information exported from the bucket inventory.
        """
        return pulumi.get(self, "optional_fields")

    @optional_fields.setter
    def optional_fields(self, value: Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']]):
        pulumi.set(self, "optional_fields", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['BucketInventoryScheduleArgs']]:
        """
        The export schedule of the bucket inventory.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['BucketInventoryScheduleArgs']]):
        pulumi.set(self, "schedule", value)


class BucketInventory(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[pulumi.InputType['BucketInventoryDestinationArgs']]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['BucketInventoryFilterArgs']]] = None,
                 included_object_versions: Optional[pulumi.Input[str]] = None,
                 inventory_id: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 optional_fields: Optional[pulumi.Input[pulumi.InputType['BucketInventoryOptionalFieldsArgs']]] = None,
                 schedule: Optional[pulumi.Input[pulumi.InputType['BucketInventoryScheduleArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage tos bucket inventory
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tos.BucketInventory("foo",
            bucket_name="terraform-demo",
            destination=volcengine.tos.BucketInventoryDestinationArgs(
                tos_bucket_destination=volcengine.tos.BucketInventoryDestinationTosBucketDestinationArgs(
                    account_id="21000*****",
                    bucket="terraform-demo",
                    format="CSV",
                    prefix="tf-test-prefix",
                    role="TosArchiveTOSInventory",
                ),
            ),
            filter=volcengine.tos.BucketInventoryFilterArgs(
                prefix="test-tf",
            ),
            included_object_versions="All",
            inventory_id="acc-test-inventory",
            is_enabled=True,
            optional_fields=volcengine.tos.BucketInventoryOptionalFieldsArgs(
                fields=[
                    "Size",
                    "StorageClass",
                    "CRC64",
                ],
            ),
            schedule=volcengine.tos.BucketInventoryScheduleArgs(
                frequency="Weekly",
            ))
        ```

        ## Import

        TosBucketInventory can be imported using the bucket_name:inventory_id, e.g.

        ```sh
        $ pulumi import volcengine:tos/bucketInventory:BucketInventory default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input[pulumi.InputType['BucketInventoryDestinationArgs']] destination: The destination information of the bucket inventory.
        :param pulumi.Input[pulumi.InputType['BucketInventoryFilterArgs']] filter: The filter of the bucket inventory.
        :param pulumi.Input[str] included_object_versions: The export version of object. Valid values: `All`, `Current`.
        :param pulumi.Input[str] inventory_id: The name of the bucket inventory.
        :param pulumi.Input[bool] is_enabled: Whether to enable the bucket inventory.
        :param pulumi.Input[pulumi.InputType['BucketInventoryOptionalFieldsArgs']] optional_fields: The information exported from the bucket inventory.
        :param pulumi.Input[pulumi.InputType['BucketInventoryScheduleArgs']] schedule: The export schedule of the bucket inventory.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketInventoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage tos bucket inventory
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tos.BucketInventory("foo",
            bucket_name="terraform-demo",
            destination=volcengine.tos.BucketInventoryDestinationArgs(
                tos_bucket_destination=volcengine.tos.BucketInventoryDestinationTosBucketDestinationArgs(
                    account_id="21000*****",
                    bucket="terraform-demo",
                    format="CSV",
                    prefix="tf-test-prefix",
                    role="TosArchiveTOSInventory",
                ),
            ),
            filter=volcengine.tos.BucketInventoryFilterArgs(
                prefix="test-tf",
            ),
            included_object_versions="All",
            inventory_id="acc-test-inventory",
            is_enabled=True,
            optional_fields=volcengine.tos.BucketInventoryOptionalFieldsArgs(
                fields=[
                    "Size",
                    "StorageClass",
                    "CRC64",
                ],
            ),
            schedule=volcengine.tos.BucketInventoryScheduleArgs(
                frequency="Weekly",
            ))
        ```

        ## Import

        TosBucketInventory can be imported using the bucket_name:inventory_id, e.g.

        ```sh
        $ pulumi import volcengine:tos/bucketInventory:BucketInventory default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param BucketInventoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketInventoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[pulumi.InputType['BucketInventoryDestinationArgs']]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['BucketInventoryFilterArgs']]] = None,
                 included_object_versions: Optional[pulumi.Input[str]] = None,
                 inventory_id: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 optional_fields: Optional[pulumi.Input[pulumi.InputType['BucketInventoryOptionalFieldsArgs']]] = None,
                 schedule: Optional[pulumi.Input[pulumi.InputType['BucketInventoryScheduleArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketInventoryArgs.__new__(BucketInventoryArgs)

            if bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_name'")
            __props__.__dict__["bucket_name"] = bucket_name
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            __props__.__dict__["filter"] = filter
            if included_object_versions is None and not opts.urn:
                raise TypeError("Missing required property 'included_object_versions'")
            __props__.__dict__["included_object_versions"] = included_object_versions
            if inventory_id is None and not opts.urn:
                raise TypeError("Missing required property 'inventory_id'")
            __props__.__dict__["inventory_id"] = inventory_id
            if is_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'is_enabled'")
            __props__.__dict__["is_enabled"] = is_enabled
            __props__.__dict__["optional_fields"] = optional_fields
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
        super(BucketInventory, __self__).__init__(
            'volcengine:tos/bucketInventory:BucketInventory',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket_name: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[pulumi.InputType['BucketInventoryDestinationArgs']]] = None,
            filter: Optional[pulumi.Input[pulumi.InputType['BucketInventoryFilterArgs']]] = None,
            included_object_versions: Optional[pulumi.Input[str]] = None,
            inventory_id: Optional[pulumi.Input[str]] = None,
            is_enabled: Optional[pulumi.Input[bool]] = None,
            optional_fields: Optional[pulumi.Input[pulumi.InputType['BucketInventoryOptionalFieldsArgs']]] = None,
            schedule: Optional[pulumi.Input[pulumi.InputType['BucketInventoryScheduleArgs']]] = None) -> 'BucketInventory':
        """
        Get an existing BucketInventory resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input[pulumi.InputType['BucketInventoryDestinationArgs']] destination: The destination information of the bucket inventory.
        :param pulumi.Input[pulumi.InputType['BucketInventoryFilterArgs']] filter: The filter of the bucket inventory.
        :param pulumi.Input[str] included_object_versions: The export version of object. Valid values: `All`, `Current`.
        :param pulumi.Input[str] inventory_id: The name of the bucket inventory.
        :param pulumi.Input[bool] is_enabled: Whether to enable the bucket inventory.
        :param pulumi.Input[pulumi.InputType['BucketInventoryOptionalFieldsArgs']] optional_fields: The information exported from the bucket inventory.
        :param pulumi.Input[pulumi.InputType['BucketInventoryScheduleArgs']] schedule: The export schedule of the bucket inventory.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketInventoryState.__new__(_BucketInventoryState)

        __props__.__dict__["bucket_name"] = bucket_name
        __props__.__dict__["destination"] = destination
        __props__.__dict__["filter"] = filter
        __props__.__dict__["included_object_versions"] = included_object_versions
        __props__.__dict__["inventory_id"] = inventory_id
        __props__.__dict__["is_enabled"] = is_enabled
        __props__.__dict__["optional_fields"] = optional_fields
        __props__.__dict__["schedule"] = schedule
        return BucketInventory(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Output[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output['outputs.BucketInventoryDestination']:
        """
        The destination information of the bucket inventory.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional['outputs.BucketInventoryFilter']]:
        """
        The filter of the bucket inventory.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="includedObjectVersions")
    def included_object_versions(self) -> pulumi.Output[str]:
        """
        The export version of object. Valid values: `All`, `Current`.
        """
        return pulumi.get(self, "included_object_versions")

    @property
    @pulumi.getter(name="inventoryId")
    def inventory_id(self) -> pulumi.Output[str]:
        """
        The name of the bucket inventory.
        """
        return pulumi.get(self, "inventory_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Output[bool]:
        """
        Whether to enable the bucket inventory.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> pulumi.Output[Optional['outputs.BucketInventoryOptionalFields']]:
        """
        The information exported from the bucket inventory.
        """
        return pulumi.get(self, "optional_fields")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output['outputs.BucketInventorySchedule']:
        """
        The export schedule of the bucket inventory.
        """
        return pulumi.get(self, "schedule")

