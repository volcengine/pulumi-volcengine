# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BucketInventoriesResult',
    'AwaitableBucketInventoriesResult',
    'bucket_inventories',
    'bucket_inventories_output',
]

@pulumi.output_type
class BucketInventoriesResult:
    """
    A collection of values returned by BucketInventories.
    """
    def __init__(__self__, bucket_name=None, id=None, inventory_configurations=None, inventory_id=None, name_regex=None, output_file=None, total_count=None):
        if bucket_name and not isinstance(bucket_name, str):
            raise TypeError("Expected argument 'bucket_name' to be a str")
        pulumi.set(__self__, "bucket_name", bucket_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inventory_configurations and not isinstance(inventory_configurations, list):
            raise TypeError("Expected argument 'inventory_configurations' to be a list")
        pulumi.set(__self__, "inventory_configurations", inventory_configurations)
        if inventory_id and not isinstance(inventory_id, str):
            raise TypeError("Expected argument 'inventory_id' to be a str")
        pulumi.set(__self__, "inventory_id", inventory_id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inventoryConfigurations")
    def inventory_configurations(self) -> Sequence['outputs.BucketInventoriesInventoryConfigurationResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "inventory_configurations")

    @property
    @pulumi.getter(name="inventoryId")
    def inventory_id(self) -> Optional[str]:
        return pulumi.get(self, "inventory_id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableBucketInventoriesResult(BucketInventoriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return BucketInventoriesResult(
            bucket_name=self.bucket_name,
            id=self.id,
            inventory_configurations=self.inventory_configurations,
            inventory_id=self.inventory_id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count)


def bucket_inventories(bucket_name: Optional[str] = None,
                       inventory_id: Optional[str] = None,
                       name_regex: Optional[str] = None,
                       output_file: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableBucketInventoriesResult:
    """
    Use this data source to query detailed information of tos bucket inventories
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_bucket_inventory = volcengine.tos.BucketInventory("fooBucketInventory",
        bucket_name="terraform-demo",
        inventory_id="acc-test-inventory",
        is_enabled=True,
        included_object_versions="All",
        schedule=volcengine.tos.BucketInventoryScheduleArgs(
            frequency="Weekly",
        ),
        filter=volcengine.tos.BucketInventoryFilterArgs(
            prefix="test-tf",
        ),
        optional_fields=volcengine.tos.BucketInventoryOptionalFieldsArgs(
            fields=[
                "Size",
                "StorageClass",
                "CRC64",
            ],
        ),
        destination=volcengine.tos.BucketInventoryDestinationArgs(
            tos_bucket_destination=volcengine.tos.BucketInventoryDestinationTosBucketDestinationArgs(
                format="CSV",
                account_id="21000*****",
                bucket="terraform-demo",
                prefix="tf-test-prefix",
                role="TosArchiveTOSInventory",
            ),
        ))
    foo_bucket_inventories = volcengine.tos.bucket_inventories_output(bucket_name="terraform-demo",
        inventory_id=foo_bucket_inventory.inventory_id)
    ```


    :param str bucket_name: The name the TOS bucket.
    :param str inventory_id: The id the TOS bucket inventory.
    :param str name_regex: A Name Regex of TOS bucket inventory.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['bucketName'] = bucket_name
    __args__['inventoryId'] = inventory_id
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:tos/bucketInventories:BucketInventories', __args__, opts=opts, typ=BucketInventoriesResult).value

    return AwaitableBucketInventoriesResult(
        bucket_name=pulumi.get(__ret__, 'bucket_name'),
        id=pulumi.get(__ret__, 'id'),
        inventory_configurations=pulumi.get(__ret__, 'inventory_configurations'),
        inventory_id=pulumi.get(__ret__, 'inventory_id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(bucket_inventories)
def bucket_inventories_output(bucket_name: Optional[pulumi.Input[str]] = None,
                              inventory_id: Optional[pulumi.Input[Optional[str]]] = None,
                              name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                              output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[BucketInventoriesResult]:
    """
    Use this data source to query detailed information of tos bucket inventories
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_bucket_inventory = volcengine.tos.BucketInventory("fooBucketInventory",
        bucket_name="terraform-demo",
        inventory_id="acc-test-inventory",
        is_enabled=True,
        included_object_versions="All",
        schedule=volcengine.tos.BucketInventoryScheduleArgs(
            frequency="Weekly",
        ),
        filter=volcengine.tos.BucketInventoryFilterArgs(
            prefix="test-tf",
        ),
        optional_fields=volcengine.tos.BucketInventoryOptionalFieldsArgs(
            fields=[
                "Size",
                "StorageClass",
                "CRC64",
            ],
        ),
        destination=volcengine.tos.BucketInventoryDestinationArgs(
            tos_bucket_destination=volcengine.tos.BucketInventoryDestinationTosBucketDestinationArgs(
                format="CSV",
                account_id="21000*****",
                bucket="terraform-demo",
                prefix="tf-test-prefix",
                role="TosArchiveTOSInventory",
            ),
        ))
    foo_bucket_inventories = volcengine.tos.bucket_inventories_output(bucket_name="terraform-demo",
        inventory_id=foo_bucket_inventory.inventory_id)
    ```


    :param str bucket_name: The name the TOS bucket.
    :param str inventory_id: The id the TOS bucket inventory.
    :param str name_regex: A Name Regex of TOS bucket inventory.
    :param str output_file: File name where to save data source results.
    """
    ...
