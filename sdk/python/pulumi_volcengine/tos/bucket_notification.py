# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BucketNotificationArgs', 'BucketNotification']

@pulumi.input_type
class BucketNotificationArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 rules: pulumi.Input['BucketNotificationRulesArgs']):
        """
        The set of arguments for constructing a BucketNotification resource.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input['BucketNotificationRulesArgs'] rules: The notification rule of the bucket.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input['BucketNotificationRulesArgs']:
        """
        The notification rule of the bucket.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input['BucketNotificationRulesArgs']):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class _BucketNotificationState:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input['BucketNotificationRulesArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BucketNotification resources.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input['BucketNotificationRulesArgs'] rules: The notification rule of the bucket.
        :param pulumi.Input[str] version: The version of the notification.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input['BucketNotificationRulesArgs']]:
        """
        The notification rule of the bucket.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input['BucketNotificationRulesArgs']]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the notification.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class BucketNotification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[pulumi.InputType['BucketNotificationRulesArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage tos bucket notification
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_bucket = volcengine.tos.Bucket("fooBucket",
            bucket_name="tf-acc-test-bucket",
            public_acl="private",
            az_redundancy="multi-az",
            project_name="default",
            tags=[volcengine.tos.BucketTagArgs(
                key="k1",
                value="v1",
            )])
        foo_bucket_notification = volcengine.tos.BucketNotification("fooBucketNotification",
            bucket_name=foo_bucket.id,
            rules=volcengine.tos.BucketNotificationRulesArgs(
                rule_id="acc-test-rule",
                events=[
                    "tos:ObjectCreated:Put",
                    "tos:ObjectCreated:Post",
                ],
                destination=volcengine.tos.BucketNotificationRulesDestinationArgs(
                    ve_faas=[
                        volcengine.tos.BucketNotificationRulesDestinationVeFaaArgs(
                            function_id="80w95pns",
                        ),
                        volcengine.tos.BucketNotificationRulesDestinationVeFaaArgs(
                            function_id="crnrfajj",
                        ),
                    ],
                ),
                filter=volcengine.tos.BucketNotificationRulesFilterArgs(
                    tos_key=volcengine.tos.BucketNotificationRulesFilterTosKeyArgs(
                        filter_rules=[
                            volcengine.tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs(
                                name="prefix",
                                value="a",
                            ),
                            volcengine.tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs(
                                name="suffix",
                                value="b",
                            ),
                        ],
                    ),
                ),
            ))
        foo1 = volcengine.tos.BucketNotification("foo1",
            bucket_name=foo_bucket.id,
            rules=volcengine.tos.BucketNotificationRulesArgs(
                rule_id="acc-test-rule-1",
                events=[
                    "tos:ObjectRemoved:Delete",
                    "tos:ObjectRemoved:DeleteMarkerCreated",
                ],
                destination=volcengine.tos.BucketNotificationRulesDestinationArgs(
                    ve_faas=[
                        volcengine.tos.BucketNotificationRulesDestinationVeFaaArgs(
                            function_id="80w95pns",
                        ),
                        volcengine.tos.BucketNotificationRulesDestinationVeFaaArgs(
                            function_id="crnrfajj",
                        ),
                    ],
                ),
                filter=volcengine.tos.BucketNotificationRulesFilterArgs(
                    tos_key=volcengine.tos.BucketNotificationRulesFilterTosKeyArgs(
                        filter_rules=[
                            volcengine.tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs(
                                name="prefix",
                                value="aaa",
                            ),
                            volcengine.tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs(
                                name="suffix",
                                value="bbb",
                            ),
                        ],
                    ),
                ),
            ))
        ```

        ## Import

        TosBucketNotification can be imported using the bucketName, e.g.

        ```sh
        $ pulumi import volcengine:tos/bucketNotification:BucketNotification default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input[pulumi.InputType['BucketNotificationRulesArgs']] rules: The notification rule of the bucket.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketNotificationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage tos bucket notification
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_bucket = volcengine.tos.Bucket("fooBucket",
            bucket_name="tf-acc-test-bucket",
            public_acl="private",
            az_redundancy="multi-az",
            project_name="default",
            tags=[volcengine.tos.BucketTagArgs(
                key="k1",
                value="v1",
            )])
        foo_bucket_notification = volcengine.tos.BucketNotification("fooBucketNotification",
            bucket_name=foo_bucket.id,
            rules=volcengine.tos.BucketNotificationRulesArgs(
                rule_id="acc-test-rule",
                events=[
                    "tos:ObjectCreated:Put",
                    "tos:ObjectCreated:Post",
                ],
                destination=volcengine.tos.BucketNotificationRulesDestinationArgs(
                    ve_faas=[
                        volcengine.tos.BucketNotificationRulesDestinationVeFaaArgs(
                            function_id="80w95pns",
                        ),
                        volcengine.tos.BucketNotificationRulesDestinationVeFaaArgs(
                            function_id="crnrfajj",
                        ),
                    ],
                ),
                filter=volcengine.tos.BucketNotificationRulesFilterArgs(
                    tos_key=volcengine.tos.BucketNotificationRulesFilterTosKeyArgs(
                        filter_rules=[
                            volcengine.tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs(
                                name="prefix",
                                value="a",
                            ),
                            volcengine.tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs(
                                name="suffix",
                                value="b",
                            ),
                        ],
                    ),
                ),
            ))
        foo1 = volcengine.tos.BucketNotification("foo1",
            bucket_name=foo_bucket.id,
            rules=volcengine.tos.BucketNotificationRulesArgs(
                rule_id="acc-test-rule-1",
                events=[
                    "tos:ObjectRemoved:Delete",
                    "tos:ObjectRemoved:DeleteMarkerCreated",
                ],
                destination=volcengine.tos.BucketNotificationRulesDestinationArgs(
                    ve_faas=[
                        volcengine.tos.BucketNotificationRulesDestinationVeFaaArgs(
                            function_id="80w95pns",
                        ),
                        volcengine.tos.BucketNotificationRulesDestinationVeFaaArgs(
                            function_id="crnrfajj",
                        ),
                    ],
                ),
                filter=volcengine.tos.BucketNotificationRulesFilterArgs(
                    tos_key=volcengine.tos.BucketNotificationRulesFilterTosKeyArgs(
                        filter_rules=[
                            volcengine.tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs(
                                name="prefix",
                                value="aaa",
                            ),
                            volcengine.tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs(
                                name="suffix",
                                value="bbb",
                            ),
                        ],
                    ),
                ),
            ))
        ```

        ## Import

        TosBucketNotification can be imported using the bucketName, e.g.

        ```sh
        $ pulumi import volcengine:tos/bucketNotification:BucketNotification default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param BucketNotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketNotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[pulumi.InputType['BucketNotificationRulesArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketNotificationArgs.__new__(BucketNotificationArgs)

            if bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_name'")
            __props__.__dict__["bucket_name"] = bucket_name
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
            __props__.__dict__["version"] = None
        super(BucketNotification, __self__).__init__(
            'volcengine:tos/bucketNotification:BucketNotification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket_name: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[pulumi.InputType['BucketNotificationRulesArgs']]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'BucketNotification':
        """
        Get an existing BucketNotification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_name: The name of the bucket.
        :param pulumi.Input[pulumi.InputType['BucketNotificationRulesArgs']] rules: The notification rule of the bucket.
        :param pulumi.Input[str] version: The version of the notification.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketNotificationState.__new__(_BucketNotificationState)

        __props__.__dict__["bucket_name"] = bucket_name
        __props__.__dict__["rules"] = rules
        __props__.__dict__["version"] = version
        return BucketNotification(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Output[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output['outputs.BucketNotificationRules']:
        """
        The notification rule of the bucket.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version of the notification.
        """
        return pulumi.get(self, "version")

