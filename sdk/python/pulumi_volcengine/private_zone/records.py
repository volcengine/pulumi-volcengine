# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RecordsResult',
    'AwaitableRecordsResult',
    'records',
    'records_output',
]

@pulumi.output_type
class RecordsResult:
    """
    A collection of values returned by Records.
    """
    def __init__(__self__, host=None, id=None, last_operator=None, line=None, name=None, output_file=None, record_id=None, records=None, search_mode=None, total_count=None, type=None, value=None, zid=None):
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_operator and not isinstance(last_operator, str):
            raise TypeError("Expected argument 'last_operator' to be a str")
        pulumi.set(__self__, "last_operator", last_operator)
        if line and not isinstance(line, str):
            raise TypeError("Expected argument 'line' to be a str")
        pulumi.set(__self__, "line", line)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if record_id and not isinstance(record_id, str):
            raise TypeError("Expected argument 'record_id' to be a str")
        pulumi.set(__self__, "record_id", record_id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if search_mode and not isinstance(search_mode, str):
            raise TypeError("Expected argument 'search_mode' to be a str")
        pulumi.set(__self__, "search_mode", search_mode)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)
        if zid and not isinstance(zid, int):
            raise TypeError("Expected argument 'zid' to be a int")
        pulumi.set(__self__, "zid", zid)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The host of the private zone record.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastOperator")
    def last_operator(self) -> Optional[str]:
        """
        The last operator account id of the private zone record.
        """
        return pulumi.get(self, "last_operator")

    @property
    @pulumi.getter
    def line(self) -> Optional[str]:
        """
        The subnet id of the private zone record. This field is only effected when the `intelligent_mode` of the private zone is true.
        """
        return pulumi.get(self, "line")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[str]:
        """
        The id of the private zone record.
        """
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter
    def records(self) -> Sequence['outputs.RecordsRecordResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "records")

    @property
    @pulumi.getter(name="searchMode")
    def search_mode(self) -> Optional[str]:
        return pulumi.get(self, "search_mode")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the private zone record.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the private zone record.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def zid(self) -> Optional[int]:
        """
        The zid of the private zone record.
        """
        return pulumi.get(self, "zid")


class AwaitableRecordsResult(RecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return RecordsResult(
            host=self.host,
            id=self.id,
            last_operator=self.last_operator,
            line=self.line,
            name=self.name,
            output_file=self.output_file,
            record_id=self.record_id,
            records=self.records,
            search_mode=self.search_mode,
            total_count=self.total_count,
            type=self.type,
            value=self.value,
            zid=self.zid)


def records(host: Optional[str] = None,
            last_operator: Optional[str] = None,
            line: Optional[str] = None,
            name: Optional[str] = None,
            output_file: Optional[str] = None,
            record_id: Optional[str] = None,
            search_mode: Optional[str] = None,
            type: Optional[str] = None,
            value: Optional[str] = None,
            zid: Optional[int] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableRecordsResult:
    """
    Use this data source to query detailed information of private zone records


    :param str host: The host of Private Zone Record.
    :param str last_operator: The last operator account id of Private Zone Record.
    :param str line: The subnet id of Private Zone Record. This field is only effected when the `intelligent_mode` of the private zone is true.
    :param str name: The domain name of Private Zone Record.
    :param str output_file: File name where to save data source results.
    :param str record_id: The id of Private Zone Record.
    :param str search_mode: The search mode of query `host`. Valid values: `LIKE`, `EXACT`. Default is `LIKE`.
    :param str type: The type of Private Zone Record.
    :param str value: The value of Private Zone Record.
    :param int zid: The zid of Private Zone.
    """
    __args__ = dict()
    __args__['host'] = host
    __args__['lastOperator'] = last_operator
    __args__['line'] = line
    __args__['name'] = name
    __args__['outputFile'] = output_file
    __args__['recordId'] = record_id
    __args__['searchMode'] = search_mode
    __args__['type'] = type
    __args__['value'] = value
    __args__['zid'] = zid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:private_zone/records:Records', __args__, opts=opts, typ=RecordsResult).value

    return AwaitableRecordsResult(
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        last_operator=pulumi.get(__ret__, 'last_operator'),
        line=pulumi.get(__ret__, 'line'),
        name=pulumi.get(__ret__, 'name'),
        output_file=pulumi.get(__ret__, 'output_file'),
        record_id=pulumi.get(__ret__, 'record_id'),
        records=pulumi.get(__ret__, 'records'),
        search_mode=pulumi.get(__ret__, 'search_mode'),
        total_count=pulumi.get(__ret__, 'total_count'),
        type=pulumi.get(__ret__, 'type'),
        value=pulumi.get(__ret__, 'value'),
        zid=pulumi.get(__ret__, 'zid'))


@_utilities.lift_output_func(records)
def records_output(host: Optional[pulumi.Input[Optional[str]]] = None,
                   last_operator: Optional[pulumi.Input[Optional[str]]] = None,
                   line: Optional[pulumi.Input[Optional[str]]] = None,
                   name: Optional[pulumi.Input[Optional[str]]] = None,
                   output_file: Optional[pulumi.Input[Optional[str]]] = None,
                   record_id: Optional[pulumi.Input[Optional[str]]] = None,
                   search_mode: Optional[pulumi.Input[Optional[str]]] = None,
                   type: Optional[pulumi.Input[Optional[str]]] = None,
                   value: Optional[pulumi.Input[Optional[str]]] = None,
                   zid: Optional[pulumi.Input[Optional[int]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[RecordsResult]:
    """
    Use this data source to query detailed information of private zone records


    :param str host: The host of Private Zone Record.
    :param str last_operator: The last operator account id of Private Zone Record.
    :param str line: The subnet id of Private Zone Record. This field is only effected when the `intelligent_mode` of the private zone is true.
    :param str name: The domain name of Private Zone Record.
    :param str output_file: File name where to save data source results.
    :param str record_id: The id of Private Zone Record.
    :param str search_mode: The search mode of query `host`. Valid values: `LIKE`, `EXACT`. Default is `LIKE`.
    :param str type: The type of Private Zone Record.
    :param str value: The value of Private Zone Record.
    :param int zid: The zid of Private Zone.
    """
    ...
