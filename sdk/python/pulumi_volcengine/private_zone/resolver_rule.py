# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResolverRuleArgs', 'ResolverRule']

@pulumi.input_type
class ResolverRuleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 vpcs: pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]],
                 endpoint_id: Optional[pulumi.Input[int]] = None,
                 forward_ips: Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleForwardIpArgs']]]] = None,
                 line: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 zone_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ResolverRule resource.
        :param pulumi.Input[str] type: Forwarding rule types. OUTBOUND: Forward to external DNS servers. LINE: Set the recursive DNS server used for recursive resolution to the recursive DNS server of the Volcano Engine PublicDNS, and customize the operator's exit IP address for the recursive DNS server.
        :param pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]] vpcs: The parameter name <region> is a variable that represents the region where the VPC is located, such as cn-beijing. The parameter value can include one or more VPC IDs, such as vpc-2750bd1. For example, if you associate a VPC in the cn-beijing region with a domain name and the VPC ID is vpc-2d6si87atfh1c58ozfd0nzq8k, the parameter would be "cn-beijing":["vpc-2d6si87atfh1c58ozfd0nzq8k"]. You can add one or more regions. When the Type parameter is OUTBOUND, the VPC region must be the same as the region where the endpoint is located.
        :param pulumi.Input[int] endpoint_id: Terminal node ID. This parameter is only valid and required when the Type parameter is OUTBOUND.
        :param pulumi.Input[Sequence[pulumi.Input['ResolverRuleForwardIpArgs']]] forward_ips: IP address and port of external DNS server. You can add up to 10 IP addresses. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        :param pulumi.Input[int] line: The operator of the exit IP address of the recursive DNS server. This parameter is only valid when the Type parameter is LINE and is a required parameter. MOBILE, TELECOM, UNICOM.
        :param pulumi.Input[str] name: The name of the rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_names: Domain names associated with forwarding rules. You can enter one or more domain names. Up to 500 domain names are supported. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpcs", vpcs)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if forward_ips is not None:
            pulumi.set(__self__, "forward_ips", forward_ips)
        if line is not None:
            pulumi.set(__self__, "line", line)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if zone_names is not None:
            pulumi.set(__self__, "zone_names", zone_names)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Forwarding rule types. OUTBOUND: Forward to external DNS servers. LINE: Set the recursive DNS server used for recursive resolution to the recursive DNS server of the Volcano Engine PublicDNS, and customize the operator's exit IP address for the recursive DNS server.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vpcs(self) -> pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]]:
        """
        The parameter name <region> is a variable that represents the region where the VPC is located, such as cn-beijing. The parameter value can include one or more VPC IDs, such as vpc-2750bd1. For example, if you associate a VPC in the cn-beijing region with a domain name and the VPC ID is vpc-2d6si87atfh1c58ozfd0nzq8k, the parameter would be "cn-beijing":["vpc-2d6si87atfh1c58ozfd0nzq8k"]. You can add one or more regions. When the Type parameter is OUTBOUND, the VPC region must be the same as the region where the endpoint is located.
        """
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]]):
        pulumi.set(self, "vpcs", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[int]]:
        """
        Terminal node ID. This parameter is only valid and required when the Type parameter is OUTBOUND.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="forwardIps")
    def forward_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleForwardIpArgs']]]]:
        """
        IP address and port of external DNS server. You can add up to 10 IP addresses. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        return pulumi.get(self, "forward_ips")

    @forward_ips.setter
    def forward_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleForwardIpArgs']]]]):
        pulumi.set(self, "forward_ips", value)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[int]]:
        """
        The operator of the exit IP address of the recursive DNS server. This parameter is only valid when the Type parameter is LINE and is a required parameter. MOBILE, TELECOM, UNICOM.
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "line", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="zoneNames")
    def zone_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Domain names associated with forwarding rules. You can enter one or more domain names. Up to 500 domain names are supported. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        return pulumi.get(self, "zone_names")

    @zone_names.setter
    def zone_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zone_names", value)


@pulumi.input_type
class _ResolverRuleState:
    def __init__(__self__, *,
                 endpoint_id: Optional[pulumi.Input[int]] = None,
                 forward_ips: Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleForwardIpArgs']]]] = None,
                 line: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]]] = None,
                 zone_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ResolverRule resources.
        :param pulumi.Input[int] endpoint_id: Terminal node ID. This parameter is only valid and required when the Type parameter is OUTBOUND.
        :param pulumi.Input[Sequence[pulumi.Input['ResolverRuleForwardIpArgs']]] forward_ips: IP address and port of external DNS server. You can add up to 10 IP addresses. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        :param pulumi.Input[int] line: The operator of the exit IP address of the recursive DNS server. This parameter is only valid when the Type parameter is LINE and is a required parameter. MOBILE, TELECOM, UNICOM.
        :param pulumi.Input[str] name: The name of the rule.
        :param pulumi.Input[str] type: Forwarding rule types. OUTBOUND: Forward to external DNS servers. LINE: Set the recursive DNS server used for recursive resolution to the recursive DNS server of the Volcano Engine PublicDNS, and customize the operator's exit IP address for the recursive DNS server.
        :param pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]] vpcs: The parameter name <region> is a variable that represents the region where the VPC is located, such as cn-beijing. The parameter value can include one or more VPC IDs, such as vpc-2750bd1. For example, if you associate a VPC in the cn-beijing region with a domain name and the VPC ID is vpc-2d6si87atfh1c58ozfd0nzq8k, the parameter would be "cn-beijing":["vpc-2d6si87atfh1c58ozfd0nzq8k"]. You can add one or more regions. When the Type parameter is OUTBOUND, the VPC region must be the same as the region where the endpoint is located.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_names: Domain names associated with forwarding rules. You can enter one or more domain names. Up to 500 domain names are supported. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if forward_ips is not None:
            pulumi.set(__self__, "forward_ips", forward_ips)
        if line is not None:
            pulumi.set(__self__, "line", line)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpcs is not None:
            pulumi.set(__self__, "vpcs", vpcs)
        if zone_names is not None:
            pulumi.set(__self__, "zone_names", zone_names)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[int]]:
        """
        Terminal node ID. This parameter is only valid and required when the Type parameter is OUTBOUND.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="forwardIps")
    def forward_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleForwardIpArgs']]]]:
        """
        IP address and port of external DNS server. You can add up to 10 IP addresses. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        return pulumi.get(self, "forward_ips")

    @forward_ips.setter
    def forward_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleForwardIpArgs']]]]):
        pulumi.set(self, "forward_ips", value)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[int]]:
        """
        The operator of the exit IP address of the recursive DNS server. This parameter is only valid when the Type parameter is LINE and is a required parameter. MOBILE, TELECOM, UNICOM.
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "line", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Forwarding rule types. OUTBOUND: Forward to external DNS servers. LINE: Set the recursive DNS server used for recursive resolution to the recursive DNS server of the Volcano Engine PublicDNS, and customize the operator's exit IP address for the recursive DNS server.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]]]:
        """
        The parameter name <region> is a variable that represents the region where the VPC is located, such as cn-beijing. The parameter value can include one or more VPC IDs, such as vpc-2750bd1. For example, if you associate a VPC in the cn-beijing region with a domain name and the VPC ID is vpc-2d6si87atfh1c58ozfd0nzq8k, the parameter would be "cn-beijing":["vpc-2d6si87atfh1c58ozfd0nzq8k"]. You can add one or more regions. When the Type parameter is OUTBOUND, the VPC region must be the same as the region where the endpoint is located.
        """
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResolverRuleVpcArgs']]]]):
        pulumi.set(self, "vpcs", value)

    @property
    @pulumi.getter(name="zoneNames")
    def zone_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Domain names associated with forwarding rules. You can enter one or more domain names. Up to 500 domain names are supported. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        return pulumi.get(self, "zone_names")

    @zone_names.setter
    def zone_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zone_names", value)


class ResolverRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_id: Optional[pulumi.Input[int]] = None,
                 forward_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResolverRuleForwardIpArgs']]]]] = None,
                 line: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResolverRuleVpcArgs']]]]] = None,
                 zone_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage private zone resolver rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.private_zone.ResolverRule("foo",
            endpoint_id=346,
            forward_ips=[volcengine.private_zone.ResolverRuleForwardIpArgs(
                ip="10.199.38.19",
                port=33,
            )],
            type="OUTBOUND",
            vpcs=[volcengine.private_zone.ResolverRuleVpcArgs(
                region="cn-beijing",
                vpc_id="vpc-13f9uuuqfdjb43n6nu5p1****",
            )],
            zone_names=["www.baidu.com"])
        ```

        ## Import

        PrivateZoneResolverRule can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:private_zone/resolverRule:ResolverRule default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] endpoint_id: Terminal node ID. This parameter is only valid and required when the Type parameter is OUTBOUND.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResolverRuleForwardIpArgs']]]] forward_ips: IP address and port of external DNS server. You can add up to 10 IP addresses. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        :param pulumi.Input[int] line: The operator of the exit IP address of the recursive DNS server. This parameter is only valid when the Type parameter is LINE and is a required parameter. MOBILE, TELECOM, UNICOM.
        :param pulumi.Input[str] name: The name of the rule.
        :param pulumi.Input[str] type: Forwarding rule types. OUTBOUND: Forward to external DNS servers. LINE: Set the recursive DNS server used for recursive resolution to the recursive DNS server of the Volcano Engine PublicDNS, and customize the operator's exit IP address for the recursive DNS server.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResolverRuleVpcArgs']]]] vpcs: The parameter name <region> is a variable that represents the region where the VPC is located, such as cn-beijing. The parameter value can include one or more VPC IDs, such as vpc-2750bd1. For example, if you associate a VPC in the cn-beijing region with a domain name and the VPC ID is vpc-2d6si87atfh1c58ozfd0nzq8k, the parameter would be "cn-beijing":["vpc-2d6si87atfh1c58ozfd0nzq8k"]. You can add one or more regions. When the Type parameter is OUTBOUND, the VPC region must be the same as the region where the endpoint is located.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_names: Domain names associated with forwarding rules. You can enter one or more domain names. Up to 500 domain names are supported. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResolverRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage private zone resolver rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.private_zone.ResolverRule("foo",
            endpoint_id=346,
            forward_ips=[volcengine.private_zone.ResolverRuleForwardIpArgs(
                ip="10.199.38.19",
                port=33,
            )],
            type="OUTBOUND",
            vpcs=[volcengine.private_zone.ResolverRuleVpcArgs(
                region="cn-beijing",
                vpc_id="vpc-13f9uuuqfdjb43n6nu5p1****",
            )],
            zone_names=["www.baidu.com"])
        ```

        ## Import

        PrivateZoneResolverRule can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:private_zone/resolverRule:ResolverRule default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ResolverRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResolverRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_id: Optional[pulumi.Input[int]] = None,
                 forward_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResolverRuleForwardIpArgs']]]]] = None,
                 line: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResolverRuleVpcArgs']]]]] = None,
                 zone_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResolverRuleArgs.__new__(ResolverRuleArgs)

            __props__.__dict__["endpoint_id"] = endpoint_id
            __props__.__dict__["forward_ips"] = forward_ips
            __props__.__dict__["line"] = line
            __props__.__dict__["name"] = name
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if vpcs is None and not opts.urn:
                raise TypeError("Missing required property 'vpcs'")
            __props__.__dict__["vpcs"] = vpcs
            __props__.__dict__["zone_names"] = zone_names
        super(ResolverRule, __self__).__init__(
            'volcengine:private_zone/resolverRule:ResolverRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            endpoint_id: Optional[pulumi.Input[int]] = None,
            forward_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResolverRuleForwardIpArgs']]]]] = None,
            line: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResolverRuleVpcArgs']]]]] = None,
            zone_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'ResolverRule':
        """
        Get an existing ResolverRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] endpoint_id: Terminal node ID. This parameter is only valid and required when the Type parameter is OUTBOUND.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResolverRuleForwardIpArgs']]]] forward_ips: IP address and port of external DNS server. You can add up to 10 IP addresses. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        :param pulumi.Input[int] line: The operator of the exit IP address of the recursive DNS server. This parameter is only valid when the Type parameter is LINE and is a required parameter. MOBILE, TELECOM, UNICOM.
        :param pulumi.Input[str] name: The name of the rule.
        :param pulumi.Input[str] type: Forwarding rule types. OUTBOUND: Forward to external DNS servers. LINE: Set the recursive DNS server used for recursive resolution to the recursive DNS server of the Volcano Engine PublicDNS, and customize the operator's exit IP address for the recursive DNS server.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResolverRuleVpcArgs']]]] vpcs: The parameter name <region> is a variable that represents the region where the VPC is located, such as cn-beijing. The parameter value can include one or more VPC IDs, such as vpc-2750bd1. For example, if you associate a VPC in the cn-beijing region with a domain name and the VPC ID is vpc-2d6si87atfh1c58ozfd0nzq8k, the parameter would be "cn-beijing":["vpc-2d6si87atfh1c58ozfd0nzq8k"]. You can add one or more regions. When the Type parameter is OUTBOUND, the VPC region must be the same as the region where the endpoint is located.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_names: Domain names associated with forwarding rules. You can enter one or more domain names. Up to 500 domain names are supported. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResolverRuleState.__new__(_ResolverRuleState)

        __props__.__dict__["endpoint_id"] = endpoint_id
        __props__.__dict__["forward_ips"] = forward_ips
        __props__.__dict__["line"] = line
        __props__.__dict__["name"] = name
        __props__.__dict__["type"] = type
        __props__.__dict__["vpcs"] = vpcs
        __props__.__dict__["zone_names"] = zone_names
        return ResolverRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Output[Optional[int]]:
        """
        Terminal node ID. This parameter is only valid and required when the Type parameter is OUTBOUND.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="forwardIps")
    def forward_ips(self) -> pulumi.Output[Optional[Sequence['outputs.ResolverRuleForwardIp']]]:
        """
        IP address and port of external DNS server. You can add up to 10 IP addresses. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        return pulumi.get(self, "forward_ips")

    @property
    @pulumi.getter
    def line(self) -> pulumi.Output[Optional[int]]:
        """
        The operator of the exit IP address of the recursive DNS server. This parameter is only valid when the Type parameter is LINE and is a required parameter. MOBILE, TELECOM, UNICOM.
        """
        return pulumi.get(self, "line")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Forwarding rule types. OUTBOUND: Forward to external DNS servers. LINE: Set the recursive DNS server used for recursive resolution to the recursive DNS server of the Volcano Engine PublicDNS, and customize the operator's exit IP address for the recursive DNS server.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vpcs(self) -> pulumi.Output[Sequence['outputs.ResolverRuleVpc']]:
        """
        The parameter name <region> is a variable that represents the region where the VPC is located, such as cn-beijing. The parameter value can include one or more VPC IDs, such as vpc-2750bd1. For example, if you associate a VPC in the cn-beijing region with a domain name and the VPC ID is vpc-2d6si87atfh1c58ozfd0nzq8k, the parameter would be "cn-beijing":["vpc-2d6si87atfh1c58ozfd0nzq8k"]. You can add one or more regions. When the Type parameter is OUTBOUND, the VPC region must be the same as the region where the endpoint is located.
        """
        return pulumi.get(self, "vpcs")

    @property
    @pulumi.getter(name="zoneNames")
    def zone_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Domain names associated with forwarding rules. You can enter one or more domain names. Up to 500 domain names are supported. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        return pulumi.get(self, "zone_names")

