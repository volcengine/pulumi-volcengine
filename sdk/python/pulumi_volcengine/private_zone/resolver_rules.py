# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ResolverRulesResult',
    'AwaitableResolverRulesResult',
    'resolver_rules',
    'resolver_rules_output',
]

@pulumi.output_type
class ResolverRulesResult:
    """
    A collection of values returned by ResolverRules.
    """
    def __init__(__self__, endpoint_id=None, id=None, name=None, name_regex=None, output_file=None, rules=None, total_count=None, zone_name=None):
        if endpoint_id and not isinstance(endpoint_id, int):
            raise TypeError("Expected argument 'endpoint_id' to be a int")
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if zone_name and not isinstance(zone_name, str):
            raise TypeError("Expected argument 'zone_name' to be a str")
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[int]:
        """
        The endpoint ID of the rule.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ResolverRulesRuleResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[str]:
        """
        The zone name of the rule.
        """
        return pulumi.get(self, "zone_name")


class AwaitableResolverRulesResult(ResolverRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ResolverRulesResult(
            endpoint_id=self.endpoint_id,
            id=self.id,
            name=self.name,
            name_regex=self.name_regex,
            output_file=self.output_file,
            rules=self.rules,
            total_count=self.total_count,
            zone_name=self.zone_name)


def resolver_rules(endpoint_id: Optional[int] = None,
                   name: Optional[str] = None,
                   name_regex: Optional[str] = None,
                   output_file: Optional[str] = None,
                   zone_name: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableResolverRulesResult:
    """
    Use this data source to query detailed information of private zone resolver rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.private_zone.resolver_rules()
    ```


    :param int endpoint_id: ID of the exit terminal node.
    :param str name: The name of the rule.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str zone_name: The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
    """
    __args__ = dict()
    __args__['endpointId'] = endpoint_id
    __args__['name'] = name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['zoneName'] = zone_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:private_zone/resolverRules:ResolverRules', __args__, opts=opts, typ=ResolverRulesResult).value

    return AwaitableResolverRulesResult(
        endpoint_id=pulumi.get(__ret__, 'endpoint_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        rules=pulumi.get(__ret__, 'rules'),
        total_count=pulumi.get(__ret__, 'total_count'),
        zone_name=pulumi.get(__ret__, 'zone_name'))


@_utilities.lift_output_func(resolver_rules)
def resolver_rules_output(endpoint_id: Optional[pulumi.Input[Optional[int]]] = None,
                          name: Optional[pulumi.Input[Optional[str]]] = None,
                          name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                          output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          zone_name: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ResolverRulesResult]:
    """
    Use this data source to query detailed information of private zone resolver rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.private_zone.resolver_rules()
    ```


    :param int endpoint_id: ID of the exit terminal node.
    :param str name: The name of the rule.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str zone_name: The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
    """
    ...
