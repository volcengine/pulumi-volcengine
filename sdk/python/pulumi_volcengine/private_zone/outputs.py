# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'PrivateZoneVpc',
    'PrivateZonesPrivateZoneResult',
    'PrivateZonesPrivateZoneBindVpcResult',
    'RecordSetsRecordSetResult',
    'RecordsRecordResult',
    'ResolverEndpointIpConfig',
    'ResolverEndpointsEndpointResult',
    'ResolverEndpointsEndpointIpConfigResult',
    'ResolverRuleForwardIp',
    'ResolverRuleVpc',
    'ResolverRulesRuleResult',
    'ResolverRulesRuleBindVpcResult',
    'ResolverRulesRuleForwardIpResult',
]

@pulumi.output_type
class PrivateZoneVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateZoneVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateZoneVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateZoneVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_id: str,
                 region: Optional[str] = None):
        """
        :param str vpc_id: The id of the bind vpc.
        :param str region: The region of the bind vpc. The default value is the region of the default provider config.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The id of the bind vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the bind vpc. The default value is the region of the default provider config.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class PrivateZonesPrivateZoneResult(dict):
    def __init__(__self__, *,
                 bind_vpcs: Sequence['outputs.PrivateZonesPrivateZoneBindVpcResult'],
                 created_at: str,
                 id: str,
                 last_operator: str,
                 line_mode: int,
                 record_count: int,
                 recursion_mode: bool,
                 regions: Sequence[str],
                 remark: str,
                 updated_at: str,
                 zid: int,
                 zone_name: str):
        """
        :param Sequence['PrivateZonesPrivateZoneBindVpcArgs'] bind_vpcs: The Bind vpc info of the private zone.
        :param str created_at: The created time of the private zone.
        :param str id: The id of the private zone.
        :param str last_operator: The account id of the last operator who created the private zone.
        :param int line_mode: The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
        :param int record_count: The record count of the private zone.
        :param bool recursion_mode: Whether the recursion mode of Private Zone is enabled.
        :param Sequence[str] regions: The region of Private Zone.
        :param str remark: The remark of the private zone.
        :param str updated_at: The updated time of the private zone.
        :param int zid: The zid of Private Zone.
        :param str zone_name: The name of Private Zone.
        """
        pulumi.set(__self__, "bind_vpcs", bind_vpcs)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_operator", last_operator)
        pulumi.set(__self__, "line_mode", line_mode)
        pulumi.set(__self__, "record_count", record_count)
        pulumi.set(__self__, "recursion_mode", recursion_mode)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "zid", zid)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="bindVpcs")
    def bind_vpcs(self) -> Sequence['outputs.PrivateZonesPrivateZoneBindVpcResult']:
        """
        The Bind vpc info of the private zone.
        """
        return pulumi.get(self, "bind_vpcs")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The created time of the private zone.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the private zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastOperator")
    def last_operator(self) -> str:
        """
        The account id of the last operator who created the private zone.
        """
        return pulumi.get(self, "last_operator")

    @property
    @pulumi.getter(name="lineMode")
    def line_mode(self) -> int:
        """
        The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
        """
        return pulumi.get(self, "line_mode")

    @property
    @pulumi.getter(name="recordCount")
    def record_count(self) -> int:
        """
        The record count of the private zone.
        """
        return pulumi.get(self, "record_count")

    @property
    @pulumi.getter(name="recursionMode")
    def recursion_mode(self) -> bool:
        """
        Whether the recursion mode of Private Zone is enabled.
        """
        return pulumi.get(self, "recursion_mode")

    @property
    @pulumi.getter
    def regions(self) -> Sequence[str]:
        """
        The region of Private Zone.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        The remark of the private zone.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The updated time of the private zone.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def zid(self) -> int:
        """
        The zid of Private Zone.
        """
        return pulumi.get(self, "zid")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        The name of Private Zone.
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class PrivateZonesPrivateZoneBindVpcResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 id: str,
                 region: str,
                 region_name: str):
        """
        :param str account_id: The account id of the bind vpc.
        :param str id: The id of the private zone.
        :param str region: The region of Private Zone.
        :param str region_name: The region name of the bind vpc.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_name", region_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account id of the bind vpc.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the private zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of Private Zone.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        The region name of the bind vpc.
        """
        return pulumi.get(self, "region_name")


@pulumi.output_type
class RecordSetsRecordSetResult(dict):
    def __init__(__self__, *,
                 fqdn: str,
                 host: str,
                 line: str,
                 record_set_id: str,
                 type: str,
                 weight_enabled: bool):
        """
        :param str fqdn: The Complete domain name of the private zone record.
        :param str host: The host of Private Zone Record Set.
        :param str line: The subnet id of the private zone record. This field is only effected when the `intelligent_mode` of the private zone is true.
        :param str record_set_id: The id of Private Zone Record Set.
        :param str type: The type of the private zone record.
        :param bool weight_enabled: Whether to enable the load balance of the private zone record set.
        """
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "line", line)
        pulumi.set(__self__, "record_set_id", record_set_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "weight_enabled", weight_enabled)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        The Complete domain name of the private zone record.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host of Private Zone Record Set.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def line(self) -> str:
        """
        The subnet id of the private zone record. This field is only effected when the `intelligent_mode` of the private zone is true.
        """
        return pulumi.get(self, "line")

    @property
    @pulumi.getter(name="recordSetId")
    def record_set_id(self) -> str:
        """
        The id of Private Zone Record Set.
        """
        return pulumi.get(self, "record_set_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the private zone record.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="weightEnabled")
    def weight_enabled(self) -> bool:
        """
        Whether to enable the load balance of the private zone record set.
        """
        return pulumi.get(self, "weight_enabled")


@pulumi.output_type
class RecordsRecordResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 enable: bool,
                 host: str,
                 last_operator: str,
                 line: str,
                 record_id: str,
                 remark: str,
                 ttl: int,
                 type: str,
                 updated_at: str,
                 value: str,
                 weight: int,
                 zid: int):
        """
        :param str created_at: The created time of the private zone record.
        :param bool enable: Whether the private zone record is enabling.
        :param str host: The host of Private Zone Record.
        :param str last_operator: The last operator account id of Private Zone Record.
        :param str line: The subnet id of Private Zone Record. This field is only effected when the `intelligent_mode` of the private zone is true.
        :param str record_id: The id of Private Zone Record.
        :param str remark: The remark of the private zone record.
        :param int ttl: The ttl of the private zone record. Unit: second.
        :param str type: The type of Private Zone Record.
        :param str updated_at: The updated time of the private zone record.
        :param str value: The value of Private Zone Record.
        :param int weight: The weight of the private zone record.
        :param int zid: The zid of Private Zone.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "last_operator", last_operator)
        pulumi.set(__self__, "line", line)
        pulumi.set(__self__, "record_id", record_id)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "zid", zid)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The created time of the private zone record.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the private zone record is enabling.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host of Private Zone Record.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="lastOperator")
    def last_operator(self) -> str:
        """
        The last operator account id of Private Zone Record.
        """
        return pulumi.get(self, "last_operator")

    @property
    @pulumi.getter
    def line(self) -> str:
        """
        The subnet id of Private Zone Record. This field is only effected when the `intelligent_mode` of the private zone is true.
        """
        return pulumi.get(self, "line")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> str:
        """
        The id of Private Zone Record.
        """
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        The remark of the private zone record.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        The ttl of the private zone record. Unit: second.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of Private Zone Record.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The updated time of the private zone record.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of Private Zone Record.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        The weight of the private zone record.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter
    def zid(self) -> int:
        """
        The zid of Private Zone.
        """
        return pulumi.get(self, "zid")


@pulumi.output_type
class ResolverEndpointIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azId":
            suggest = "az_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResolverEndpointIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResolverEndpointIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResolverEndpointIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 az_id: str,
                 ip: str,
                 subnet_id: str):
        """
        :param str az_id: Id of the availability zone.
        :param str ip: Source IP address of traffic. You can add up to 6 IP addresses at most. To ensure high availability, you must add at least two IP addresses.
        :param str subnet_id: Id of the subnet.
        """
        pulumi.set(__self__, "az_id", az_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="azId")
    def az_id(self) -> str:
        """
        Id of the availability zone.
        """
        return pulumi.get(self, "az_id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Source IP address of traffic. You can add up to 6 IP addresses at most. To ensure high availability, you must add at least two IP addresses.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Id of the subnet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class ResolverEndpointsEndpointResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 direction: str,
                 endpoint_id: int,
                 id: str,
                 ip_configs: Sequence['outputs.ResolverEndpointsEndpointIpConfigResult'],
                 name: str,
                 security_group_id: str,
                 status: str,
                 updated_at: str,
                 vpc_id: str,
                 vpc_region: str):
        """
        :param str created_at: The created time of the endpoint.
        :param str direction: The direction of the private zone resolver endpoint.
        :param int endpoint_id: The endpoint id.
        :param str id: The id of the endpoint.
        :param Sequence['ResolverEndpointsEndpointIpConfigArgs'] ip_configs: List of IP configurations.
        :param str name: The name of the private zone resolver endpoint.
        :param str security_group_id: The security group id of the endpoint.
        :param str status: The status of the private zone resolver endpoint.
        :param str updated_at: The updated time of the endpoint.
        :param str vpc_id: The vpc ID of the private zone resolver endpoint.
        :param str vpc_region: The vpc region of the endpoint.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_configs", ip_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_region", vpc_region)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The created time of the endpoint.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        The direction of the private zone resolver endpoint.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> int:
        """
        The endpoint id.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> Sequence['outputs.ResolverEndpointsEndpointIpConfigResult']:
        """
        List of IP configurations.
        """
        return pulumi.get(self, "ip_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the private zone resolver endpoint.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        The security group id of the endpoint.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the private zone resolver endpoint.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The updated time of the endpoint.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The vpc ID of the private zone resolver endpoint.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcRegion")
    def vpc_region(self) -> str:
        """
        The vpc region of the endpoint.
        """
        return pulumi.get(self, "vpc_region")


@pulumi.output_type
class ResolverEndpointsEndpointIpConfigResult(dict):
    def __init__(__self__, *,
                 az_id: str,
                 ip: str,
                 subnet_id: str):
        """
        :param str az_id: The availability zone id of the endpoint.
        :param str ip: The IP address of the endpoint.
        :param str subnet_id: The subnet id of the endpoint.
        """
        pulumi.set(__self__, "az_id", az_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="azId")
    def az_id(self) -> str:
        """
        The availability zone id of the endpoint.
        """
        return pulumi.get(self, "az_id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The IP address of the endpoint.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet id of the endpoint.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class ResolverRuleForwardIp(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: Optional[int] = None):
        """
        :param str ip: IP address of the external DNS server. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        :param int port: The port of the external DNS server. Default is 53. This parameter is only valid and optional when the Type parameter is OUTBOUND.
        """
        pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP address of the external DNS server. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port of the external DNS server. Default is 53. This parameter is only valid and optional when the Type parameter is OUTBOUND.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ResolverRuleVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResolverRuleVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResolverRuleVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResolverRuleVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_id: str,
                 region: Optional[str] = None):
        """
        :param str vpc_id: The id of the bind vpc.
        :param str region: The region of the bind vpc. The default value is the region of the default provider config.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The id of the bind vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the bind vpc. The default value is the region of the default provider config.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ResolverRulesRuleResult(dict):
    def __init__(__self__, *,
                 bind_vpcs: Sequence['outputs.ResolverRulesRuleBindVpcResult'],
                 created_at: str,
                 endpoint_id: int,
                 forward_ips: Sequence['outputs.ResolverRulesRuleForwardIpResult'],
                 id: str,
                 line: int,
                 name: str,
                 rule_id: int,
                 type: str,
                 updated_at: str,
                 zone_names: Sequence[str]):
        """
        :param str created_at: The created time of the rule.
        :param int endpoint_id: ID of the exit terminal node.
        :param Sequence['ResolverRulesRuleForwardIpArgs'] forward_ips: The IP address and port of the DNS server outside of the VPC.
        :param str id: The id of the rule.
        :param int line: The ISP of the exit IP address of the recursive DNS server.
        :param str name: The name of the rule.
        :param int rule_id: The id of the rule.
        :param str type: The type of the rule.
        :param str updated_at: The updated time of the rule.
        :param Sequence[str] zone_names: The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
        """
        pulumi.set(__self__, "bind_vpcs", bind_vpcs)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "forward_ips", forward_ips)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "line", line)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "zone_names", zone_names)

    @property
    @pulumi.getter(name="bindVpcs")
    def bind_vpcs(self) -> Sequence['outputs.ResolverRulesRuleBindVpcResult']:
        return pulumi.get(self, "bind_vpcs")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The created time of the rule.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> int:
        """
        ID of the exit terminal node.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="forwardIps")
    def forward_ips(self) -> Sequence['outputs.ResolverRulesRuleForwardIpResult']:
        """
        The IP address and port of the DNS server outside of the VPC.
        """
        return pulumi.get(self, "forward_ips")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def line(self) -> int:
        """
        The ISP of the exit IP address of the recursive DNS server.
        """
        return pulumi.get(self, "line")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        """
        The id of the rule.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the rule.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The updated time of the rule.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="zoneNames")
    def zone_names(self) -> Sequence[str]:
        """
        The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
        """
        return pulumi.get(self, "zone_names")


@pulumi.output_type
class ResolverRulesRuleBindVpcResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 id: str,
                 region: str,
                 region_name: str):
        """
        :param str id: The id of the rule.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_name", region_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")


@pulumi.output_type
class ResolverRulesRuleForwardIpResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: The IP address of the DNS server outside of the VPC.
        :param int port: The port of the DNS server outside of the VPC.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The IP address of the DNS server outside of the VPC.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of the DNS server outside of the VPC.
        """
        return pulumi.get(self, "port")


