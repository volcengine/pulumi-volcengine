# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PrivateZoneArgs', 'PrivateZone']

@pulumi.input_type
class PrivateZoneArgs:
    def __init__(__self__, *,
                 vpcs: pulumi.Input[Sequence[pulumi.Input['PrivateZoneVpcArgs']]],
                 zone_name: pulumi.Input[str],
                 intelligent_mode: Optional[pulumi.Input[bool]] = None,
                 load_balance_mode: Optional[pulumi.Input[bool]] = None,
                 recursion_mode: Optional[pulumi.Input[bool]] = None,
                 remark: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PrivateZone resource.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateZoneVpcArgs']]] vpcs: The bind vpc object of the private zone. If you want to bind another account's VPC, you need to first use resource private_zone.UserVpcAuthorization to complete the authorization.
        :param pulumi.Input[str] zone_name: The name of the private zone.
        :param pulumi.Input[bool] intelligent_mode: Whether to enable the intelligent mode of the private zone.
        :param pulumi.Input[bool] load_balance_mode: Whether to enable the load balance mode of the private zone.
        :param pulumi.Input[bool] recursion_mode: Whether to enable the recursion mode of the private zone.
        :param pulumi.Input[str] remark: The remark of the private zone.
        """
        pulumi.set(__self__, "vpcs", vpcs)
        pulumi.set(__self__, "zone_name", zone_name)
        if intelligent_mode is not None:
            pulumi.set(__self__, "intelligent_mode", intelligent_mode)
        if load_balance_mode is not None:
            pulumi.set(__self__, "load_balance_mode", load_balance_mode)
        if recursion_mode is not None:
            pulumi.set(__self__, "recursion_mode", recursion_mode)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter
    def vpcs(self) -> pulumi.Input[Sequence[pulumi.Input['PrivateZoneVpcArgs']]]:
        """
        The bind vpc object of the private zone. If you want to bind another account's VPC, you need to first use resource private_zone.UserVpcAuthorization to complete the authorization.
        """
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: pulumi.Input[Sequence[pulumi.Input['PrivateZoneVpcArgs']]]):
        pulumi.set(self, "vpcs", value)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> pulumi.Input[str]:
        """
        The name of the private zone.
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_name", value)

    @property
    @pulumi.getter(name="intelligentMode")
    def intelligent_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the intelligent mode of the private zone.
        """
        return pulumi.get(self, "intelligent_mode")

    @intelligent_mode.setter
    def intelligent_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "intelligent_mode", value)

    @property
    @pulumi.getter(name="loadBalanceMode")
    def load_balance_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the load balance mode of the private zone.
        """
        return pulumi.get(self, "load_balance_mode")

    @load_balance_mode.setter
    def load_balance_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "load_balance_mode", value)

    @property
    @pulumi.getter(name="recursionMode")
    def recursion_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the recursion mode of the private zone.
        """
        return pulumi.get(self, "recursion_mode")

    @recursion_mode.setter
    def recursion_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursion_mode", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remark of the private zone.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)


@pulumi.input_type
class _PrivateZoneState:
    def __init__(__self__, *,
                 intelligent_mode: Optional[pulumi.Input[bool]] = None,
                 load_balance_mode: Optional[pulumi.Input[bool]] = None,
                 recursion_mode: Optional[pulumi.Input[bool]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateZoneVpcArgs']]]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PrivateZone resources.
        :param pulumi.Input[bool] intelligent_mode: Whether to enable the intelligent mode of the private zone.
        :param pulumi.Input[bool] load_balance_mode: Whether to enable the load balance mode of the private zone.
        :param pulumi.Input[bool] recursion_mode: Whether to enable the recursion mode of the private zone.
        :param pulumi.Input[str] remark: The remark of the private zone.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateZoneVpcArgs']]] vpcs: The bind vpc object of the private zone. If you want to bind another account's VPC, you need to first use resource private_zone.UserVpcAuthorization to complete the authorization.
        :param pulumi.Input[str] zone_name: The name of the private zone.
        """
        if intelligent_mode is not None:
            pulumi.set(__self__, "intelligent_mode", intelligent_mode)
        if load_balance_mode is not None:
            pulumi.set(__self__, "load_balance_mode", load_balance_mode)
        if recursion_mode is not None:
            pulumi.set(__self__, "recursion_mode", recursion_mode)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if vpcs is not None:
            pulumi.set(__self__, "vpcs", vpcs)
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="intelligentMode")
    def intelligent_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the intelligent mode of the private zone.
        """
        return pulumi.get(self, "intelligent_mode")

    @intelligent_mode.setter
    def intelligent_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "intelligent_mode", value)

    @property
    @pulumi.getter(name="loadBalanceMode")
    def load_balance_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the load balance mode of the private zone.
        """
        return pulumi.get(self, "load_balance_mode")

    @load_balance_mode.setter
    def load_balance_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "load_balance_mode", value)

    @property
    @pulumi.getter(name="recursionMode")
    def recursion_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the recursion mode of the private zone.
        """
        return pulumi.get(self, "recursion_mode")

    @recursion_mode.setter
    def recursion_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursion_mode", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remark of the private zone.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateZoneVpcArgs']]]]:
        """
        The bind vpc object of the private zone. If you want to bind another account's VPC, you need to first use resource private_zone.UserVpcAuthorization to complete the authorization.
        """
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateZoneVpcArgs']]]]):
        pulumi.set(self, "vpcs", value)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the private zone.
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_name", value)


class PrivateZone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 intelligent_mode: Optional[pulumi.Input[bool]] = None,
                 load_balance_mode: Optional[pulumi.Input[bool]] = None,
                 recursion_mode: Optional[pulumi.Input[bool]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivateZoneVpcArgs']]]]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage private zone
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.private_zone.PrivateZone("foo",
            intelligent_mode=True,
            load_balance_mode=True,
            recursion_mode=True,
            remark="acc-test-new",
            vpcs=[
                volcengine.private_zone.PrivateZoneVpcArgs(
                    vpc_id="vpc-rs4mi0jedipsv0x57pf****",
                ),
                volcengine.private_zone.PrivateZoneVpcArgs(
                    region="cn-shanghai",
                    vpc_id="vpc-3qdzk9xju6o747prml0jk****",
                ),
            ],
            zone_name="acc-test-pz.com")
        ```

        ## Import

        PrivateZone can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:private_zone/privateZone:PrivateZone default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] intelligent_mode: Whether to enable the intelligent mode of the private zone.
        :param pulumi.Input[bool] load_balance_mode: Whether to enable the load balance mode of the private zone.
        :param pulumi.Input[bool] recursion_mode: Whether to enable the recursion mode of the private zone.
        :param pulumi.Input[str] remark: The remark of the private zone.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivateZoneVpcArgs']]]] vpcs: The bind vpc object of the private zone. If you want to bind another account's VPC, you need to first use resource private_zone.UserVpcAuthorization to complete the authorization.
        :param pulumi.Input[str] zone_name: The name of the private zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrivateZoneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage private zone
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.private_zone.PrivateZone("foo",
            intelligent_mode=True,
            load_balance_mode=True,
            recursion_mode=True,
            remark="acc-test-new",
            vpcs=[
                volcengine.private_zone.PrivateZoneVpcArgs(
                    vpc_id="vpc-rs4mi0jedipsv0x57pf****",
                ),
                volcengine.private_zone.PrivateZoneVpcArgs(
                    region="cn-shanghai",
                    vpc_id="vpc-3qdzk9xju6o747prml0jk****",
                ),
            ],
            zone_name="acc-test-pz.com")
        ```

        ## Import

        PrivateZone can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:private_zone/privateZone:PrivateZone default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param PrivateZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrivateZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 intelligent_mode: Optional[pulumi.Input[bool]] = None,
                 load_balance_mode: Optional[pulumi.Input[bool]] = None,
                 recursion_mode: Optional[pulumi.Input[bool]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivateZoneVpcArgs']]]]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrivateZoneArgs.__new__(PrivateZoneArgs)

            __props__.__dict__["intelligent_mode"] = intelligent_mode
            __props__.__dict__["load_balance_mode"] = load_balance_mode
            __props__.__dict__["recursion_mode"] = recursion_mode
            __props__.__dict__["remark"] = remark
            if vpcs is None and not opts.urn:
                raise TypeError("Missing required property 'vpcs'")
            __props__.__dict__["vpcs"] = vpcs
            if zone_name is None and not opts.urn:
                raise TypeError("Missing required property 'zone_name'")
            __props__.__dict__["zone_name"] = zone_name
        super(PrivateZone, __self__).__init__(
            'volcengine:private_zone/privateZone:PrivateZone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            intelligent_mode: Optional[pulumi.Input[bool]] = None,
            load_balance_mode: Optional[pulumi.Input[bool]] = None,
            recursion_mode: Optional[pulumi.Input[bool]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivateZoneVpcArgs']]]]] = None,
            zone_name: Optional[pulumi.Input[str]] = None) -> 'PrivateZone':
        """
        Get an existing PrivateZone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] intelligent_mode: Whether to enable the intelligent mode of the private zone.
        :param pulumi.Input[bool] load_balance_mode: Whether to enable the load balance mode of the private zone.
        :param pulumi.Input[bool] recursion_mode: Whether to enable the recursion mode of the private zone.
        :param pulumi.Input[str] remark: The remark of the private zone.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivateZoneVpcArgs']]]] vpcs: The bind vpc object of the private zone. If you want to bind another account's VPC, you need to first use resource private_zone.UserVpcAuthorization to complete the authorization.
        :param pulumi.Input[str] zone_name: The name of the private zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrivateZoneState.__new__(_PrivateZoneState)

        __props__.__dict__["intelligent_mode"] = intelligent_mode
        __props__.__dict__["load_balance_mode"] = load_balance_mode
        __props__.__dict__["recursion_mode"] = recursion_mode
        __props__.__dict__["remark"] = remark
        __props__.__dict__["vpcs"] = vpcs
        __props__.__dict__["zone_name"] = zone_name
        return PrivateZone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="intelligentMode")
    def intelligent_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable the intelligent mode of the private zone.
        """
        return pulumi.get(self, "intelligent_mode")

    @property
    @pulumi.getter(name="loadBalanceMode")
    def load_balance_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable the load balance mode of the private zone.
        """
        return pulumi.get(self, "load_balance_mode")

    @property
    @pulumi.getter(name="recursionMode")
    def recursion_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable the recursion mode of the private zone.
        """
        return pulumi.get(self, "recursion_mode")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        The remark of the private zone.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def vpcs(self) -> pulumi.Output[Sequence['outputs.PrivateZoneVpc']]:
        """
        The bind vpc object of the private zone. If you want to bind another account's VPC, you need to first use resource private_zone.UserVpcAuthorization to complete the authorization.
        """
        return pulumi.get(self, "vpcs")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> pulumi.Output[str]:
        """
        The name of the private zone.
        """
        return pulumi.get(self, "zone_name")

