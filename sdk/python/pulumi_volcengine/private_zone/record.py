# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RecordArgs', 'Record']

@pulumi.input_type
class RecordArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 zid: pulumi.Input[int],
                 enable: Optional[pulumi.Input[bool]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Record resource.
        :param pulumi.Input[str] host: The host of the private zone record.
        :param pulumi.Input[str] type: The type of the private zone record. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `PTR`.
        :param pulumi.Input[str] value: The value of the private zone record. Record values need to be set based on the value of the `type`.
        :param pulumi.Input[int] zid: The zid of the private zone record.
        :param pulumi.Input[bool] enable: Whether to enable the private zone record. This field is only effected when modify this resource.
        :param pulumi.Input[str] remark: The remark of the private zone record.
        :param pulumi.Input[int] ttl: The ttl of the private zone record. Unit: second. Default is 600.
        :param pulumi.Input[int] weight: The weight of the private zone record. This field is only effected when the `load_balance_mode` of the private zone is true and the `weight_enabled` of the record_set is true. Default is 1.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "zid", zid)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host of the private zone record.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the private zone record. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `PTR`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the private zone record. Record values need to be set based on the value of the `type`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def zid(self) -> pulumi.Input[int]:
        """
        The zid of the private zone record.
        """
        return pulumi.get(self, "zid")

    @zid.setter
    def zid(self, value: pulumi.Input[int]):
        pulumi.set(self, "zid", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the private zone record. This field is only effected when modify this resource.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remark of the private zone record.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The ttl of the private zone record. Unit: second. Default is 600.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight of the private zone record. This field is only effected when the `load_balance_mode` of the private zone is true and the `weight_enabled` of the record_set is true. Default is 1.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _RecordState:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zid: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Record resources.
        :param pulumi.Input[bool] enable: Whether to enable the private zone record. This field is only effected when modify this resource.
        :param pulumi.Input[str] host: The host of the private zone record.
        :param pulumi.Input[str] remark: The remark of the private zone record.
        :param pulumi.Input[int] ttl: The ttl of the private zone record. Unit: second. Default is 600.
        :param pulumi.Input[str] type: The type of the private zone record. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `PTR`.
        :param pulumi.Input[str] value: The value of the private zone record. Record values need to be set based on the value of the `type`.
        :param pulumi.Input[int] weight: The weight of the private zone record. This field is only effected when the `load_balance_mode` of the private zone is true and the `weight_enabled` of the record_set is true. Default is 1.
        :param pulumi.Input[int] zid: The zid of the private zone record.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if zid is not None:
            pulumi.set(__self__, "zid", zid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the private zone record. This field is only effected when modify this resource.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The host of the private zone record.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remark of the private zone record.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The ttl of the private zone record. Unit: second. Default is 600.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the private zone record. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `PTR`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the private zone record. Record values need to be set based on the value of the `type`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight of the private zone record. This field is only effected when the `load_balance_mode` of the private zone is true and the `weight_enabled` of the record_set is true. Default is 1.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter
    def zid(self) -> Optional[pulumi.Input[int]]:
        """
        The zid of the private zone record.
        """
        return pulumi.get(self, "zid")

    @zid.setter
    def zid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zid", value)


class Record(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage private zone record

        ## Import

        PrivateZoneRecord can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:private_zone/record:Record default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable: Whether to enable the private zone record. This field is only effected when modify this resource.
        :param pulumi.Input[str] host: The host of the private zone record.
        :param pulumi.Input[str] remark: The remark of the private zone record.
        :param pulumi.Input[int] ttl: The ttl of the private zone record. Unit: second. Default is 600.
        :param pulumi.Input[str] type: The type of the private zone record. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `PTR`.
        :param pulumi.Input[str] value: The value of the private zone record. Record values need to be set based on the value of the `type`.
        :param pulumi.Input[int] weight: The weight of the private zone record. This field is only effected when the `load_balance_mode` of the private zone is true and the `weight_enabled` of the record_set is true. Default is 1.
        :param pulumi.Input[int] zid: The zid of the private zone record.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RecordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage private zone record

        ## Import

        PrivateZoneRecord can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:private_zone/record:Record default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param RecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RecordArgs.__new__(RecordArgs)

            __props__.__dict__["enable"] = enable
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["remark"] = remark
            __props__.__dict__["ttl"] = ttl
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            __props__.__dict__["weight"] = weight
            if zid is None and not opts.urn:
                raise TypeError("Missing required property 'zid'")
            __props__.__dict__["zid"] = zid
        super(Record, __self__).__init__(
            'volcengine:private_zone/record:Record',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            host: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[str]] = None,
            weight: Optional[pulumi.Input[int]] = None,
            zid: Optional[pulumi.Input[int]] = None) -> 'Record':
        """
        Get an existing Record resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable: Whether to enable the private zone record. This field is only effected when modify this resource.
        :param pulumi.Input[str] host: The host of the private zone record.
        :param pulumi.Input[str] remark: The remark of the private zone record.
        :param pulumi.Input[int] ttl: The ttl of the private zone record. Unit: second. Default is 600.
        :param pulumi.Input[str] type: The type of the private zone record. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `PTR`.
        :param pulumi.Input[str] value: The value of the private zone record. Record values need to be set based on the value of the `type`.
        :param pulumi.Input[int] weight: The weight of the private zone record. This field is only effected when the `load_balance_mode` of the private zone is true and the `weight_enabled` of the record_set is true. Default is 1.
        :param pulumi.Input[int] zid: The zid of the private zone record.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RecordState.__new__(_RecordState)

        __props__.__dict__["enable"] = enable
        __props__.__dict__["host"] = host
        __props__.__dict__["remark"] = remark
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["type"] = type
        __props__.__dict__["value"] = value
        __props__.__dict__["weight"] = weight
        __props__.__dict__["zid"] = zid
        return Record(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[bool]:
        """
        Whether to enable the private zone record. This field is only effected when modify this resource.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        The host of the private zone record.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        The remark of the private zone record.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[int]:
        """
        The ttl of the private zone record. Unit: second. Default is 600.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the private zone record. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `PTR`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        """
        The value of the private zone record. Record values need to be set based on the value of the `type`.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[int]:
        """
        The weight of the private zone record. This field is only effected when the `load_balance_mode` of the private zone is true and the `weight_enabled` of the record_set is true. Default is 1.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter
    def zid(self) -> pulumi.Output[int]:
        """
        The zid of the private zone record.
        """
        return pulumi.get(self, "zid")

