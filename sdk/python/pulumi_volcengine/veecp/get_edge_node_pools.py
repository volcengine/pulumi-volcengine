# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEdgeNodePoolsResult',
    'AwaitableGetEdgeNodePoolsResult',
    'get_edge_node_pools',
    'get_edge_node_pools_output',
]

@pulumi.output_type
class GetEdgeNodePoolsResult:
    """
    A collection of values returned by getEdgeNodePools.
    """
    def __init__(__self__, add_by_auto=None, add_by_list=None, add_by_script=None, auto_scaling_enabled=None, cluster_ids=None, create_client_token=None, id=None, ids=None, name_regex=None, node_pool_types=None, node_pools=None, output_file=None, statuses=None, total_count=None, update_client_token=None):
        if add_by_auto and not isinstance(add_by_auto, bool):
            raise TypeError("Expected argument 'add_by_auto' to be a bool")
        pulumi.set(__self__, "add_by_auto", add_by_auto)
        if add_by_list and not isinstance(add_by_list, bool):
            raise TypeError("Expected argument 'add_by_list' to be a bool")
        pulumi.set(__self__, "add_by_list", add_by_list)
        if add_by_script and not isinstance(add_by_script, bool):
            raise TypeError("Expected argument 'add_by_script' to be a bool")
        pulumi.set(__self__, "add_by_script", add_by_script)
        if auto_scaling_enabled and not isinstance(auto_scaling_enabled, bool):
            raise TypeError("Expected argument 'auto_scaling_enabled' to be a bool")
        pulumi.set(__self__, "auto_scaling_enabled", auto_scaling_enabled)
        if cluster_ids and not isinstance(cluster_ids, list):
            raise TypeError("Expected argument 'cluster_ids' to be a list")
        pulumi.set(__self__, "cluster_ids", cluster_ids)
        if create_client_token and not isinstance(create_client_token, str):
            raise TypeError("Expected argument 'create_client_token' to be a str")
        pulumi.set(__self__, "create_client_token", create_client_token)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if node_pool_types and not isinstance(node_pool_types, list):
            raise TypeError("Expected argument 'node_pool_types' to be a list")
        pulumi.set(__self__, "node_pool_types", node_pool_types)
        if node_pools and not isinstance(node_pools, list):
            raise TypeError("Expected argument 'node_pools' to be a list")
        pulumi.set(__self__, "node_pools", node_pools)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if update_client_token and not isinstance(update_client_token, str):
            raise TypeError("Expected argument 'update_client_token' to be a str")
        pulumi.set(__self__, "update_client_token", update_client_token)

    @property
    @pulumi.getter(name="addByAuto")
    def add_by_auto(self) -> Optional[bool]:
        return pulumi.get(self, "add_by_auto")

    @property
    @pulumi.getter(name="addByList")
    def add_by_list(self) -> Optional[bool]:
        return pulumi.get(self, "add_by_list")

    @property
    @pulumi.getter(name="addByScript")
    def add_by_script(self) -> Optional[bool]:
        return pulumi.get(self, "add_by_script")

    @property
    @pulumi.getter(name="autoScalingEnabled")
    def auto_scaling_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "auto_scaling_enabled")

    @property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cluster_ids")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> Optional[str]:
        """
        The ClientToken when successfully created.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="nodePoolTypes")
    def node_pool_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "node_pool_types")

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Sequence['outputs.GetEdgeNodePoolsNodePoolResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "node_pools")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence['outputs.GetEdgeNodePoolsStatusResult']]:
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> Optional[str]:
        """
        The ClientToken when last update was successful.
        """
        return pulumi.get(self, "update_client_token")


class AwaitableGetEdgeNodePoolsResult(GetEdgeNodePoolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEdgeNodePoolsResult(
            add_by_auto=self.add_by_auto,
            add_by_list=self.add_by_list,
            add_by_script=self.add_by_script,
            auto_scaling_enabled=self.auto_scaling_enabled,
            cluster_ids=self.cluster_ids,
            create_client_token=self.create_client_token,
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            node_pool_types=self.node_pool_types,
            node_pools=self.node_pools,
            output_file=self.output_file,
            statuses=self.statuses,
            total_count=self.total_count,
            update_client_token=self.update_client_token)


def get_edge_node_pools(add_by_auto: Optional[bool] = None,
                        add_by_list: Optional[bool] = None,
                        add_by_script: Optional[bool] = None,
                        auto_scaling_enabled: Optional[bool] = None,
                        cluster_ids: Optional[Sequence[str]] = None,
                        create_client_token: Optional[str] = None,
                        ids: Optional[Sequence[str]] = None,
                        name_regex: Optional[str] = None,
                        node_pool_types: Optional[Sequence[str]] = None,
                        output_file: Optional[str] = None,
                        statuses: Optional[Sequence[pulumi.InputType['GetEdgeNodePoolsStatusArgs']]] = None,
                        update_client_token: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEdgeNodePoolsResult:
    """
    Use this data source to query detailed information of veecp edge node pools
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.get_zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-project1",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-subnet-test-2",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
        vpc_id=foo_vpc.id,
        security_group_name="acc-test-security-group2")
    foo_cluster = volcengine.veecp.Cluster("fooCluster",
        description="created by terraform",
        delete_protection_enabled=False,
        profile="Edge",
        cluster_config=volcengine.veecp.ClusterClusterConfigArgs(
            subnet_ids=[foo_subnet.id],
            api_server_public_access_enabled=True,
            api_server_public_access_config=volcengine.veecp.ClusterClusterConfigApiServerPublicAccessConfigArgs(
                public_access_network_config=volcengine.veecp.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs(
                    billing_type="PostPaidByBandwidth",
                    bandwidth=1,
                ),
            ),
            resource_public_access_default_enabled=True,
        ),
        pods_config=volcengine.veecp.ClusterPodsConfigArgs(
            pod_network_mode="Flannel",
            flannel_config=volcengine.veecp.ClusterPodsConfigFlannelConfigArgs(
                pod_cidrs=["172.22.224.0/20"],
                max_pods_per_node=64,
            ),
        ),
        services_config=volcengine.veecp.ClusterServicesConfigArgs(
            service_cidrsv4s=["172.30.0.0/18"],
        ))
    foo_edge_node_pool = volcengine.veecp.EdgeNodePool("fooEdgeNodePool", cluster_id=foo_cluster.id)
    foo_edge_node_pools = volcengine.veecp.get_edge_node_pools_output(cluster_ids=[foo_cluster.id],
        ids=[foo_edge_node_pool.id])
    ```


    :param bool add_by_auto: Managed by auto.
    :param bool add_by_list: Managed by list.
    :param bool add_by_script: Managed by script.
    :param bool auto_scaling_enabled: Is enabled of AutoScaling.
    :param Sequence[str] cluster_ids: The ClusterIds of NodePool IDs.
    :param str create_client_token: The ClientToken when successfully created.
    :param Sequence[str] ids: A list of IDs.
    :param str name_regex: A Name Regex of Resource.
    :param Sequence[str] node_pool_types: The NodePoolTypes of NodePool.
    :param str output_file: File name where to save data source results.
    :param Sequence[pulumi.InputType['GetEdgeNodePoolsStatusArgs']] statuses: The Status of NodePool.
    :param str update_client_token: The ClientToken when last update was successful.
    """
    __args__ = dict()
    __args__['addByAuto'] = add_by_auto
    __args__['addByList'] = add_by_list
    __args__['addByScript'] = add_by_script
    __args__['autoScalingEnabled'] = auto_scaling_enabled
    __args__['clusterIds'] = cluster_ids
    __args__['createClientToken'] = create_client_token
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['nodePoolTypes'] = node_pool_types
    __args__['outputFile'] = output_file
    __args__['statuses'] = statuses
    __args__['updateClientToken'] = update_client_token
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:veecp/getEdgeNodePools:getEdgeNodePools', __args__, opts=opts, typ=GetEdgeNodePoolsResult).value

    return AwaitableGetEdgeNodePoolsResult(
        add_by_auto=pulumi.get(__ret__, 'add_by_auto'),
        add_by_list=pulumi.get(__ret__, 'add_by_list'),
        add_by_script=pulumi.get(__ret__, 'add_by_script'),
        auto_scaling_enabled=pulumi.get(__ret__, 'auto_scaling_enabled'),
        cluster_ids=pulumi.get(__ret__, 'cluster_ids'),
        create_client_token=pulumi.get(__ret__, 'create_client_token'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        node_pool_types=pulumi.get(__ret__, 'node_pool_types'),
        node_pools=pulumi.get(__ret__, 'node_pools'),
        output_file=pulumi.get(__ret__, 'output_file'),
        statuses=pulumi.get(__ret__, 'statuses'),
        total_count=pulumi.get(__ret__, 'total_count'),
        update_client_token=pulumi.get(__ret__, 'update_client_token'))


@_utilities.lift_output_func(get_edge_node_pools)
def get_edge_node_pools_output(add_by_auto: Optional[pulumi.Input[Optional[bool]]] = None,
                               add_by_list: Optional[pulumi.Input[Optional[bool]]] = None,
                               add_by_script: Optional[pulumi.Input[Optional[bool]]] = None,
                               auto_scaling_enabled: Optional[pulumi.Input[Optional[bool]]] = None,
                               cluster_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               create_client_token: Optional[pulumi.Input[Optional[str]]] = None,
                               ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                               node_pool_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               statuses: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetEdgeNodePoolsStatusArgs']]]]] = None,
                               update_client_token: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEdgeNodePoolsResult]:
    """
    Use this data source to query detailed information of veecp edge node pools
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.get_zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-project1",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-subnet-test-2",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
        vpc_id=foo_vpc.id,
        security_group_name="acc-test-security-group2")
    foo_cluster = volcengine.veecp.Cluster("fooCluster",
        description="created by terraform",
        delete_protection_enabled=False,
        profile="Edge",
        cluster_config=volcengine.veecp.ClusterClusterConfigArgs(
            subnet_ids=[foo_subnet.id],
            api_server_public_access_enabled=True,
            api_server_public_access_config=volcengine.veecp.ClusterClusterConfigApiServerPublicAccessConfigArgs(
                public_access_network_config=volcengine.veecp.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs(
                    billing_type="PostPaidByBandwidth",
                    bandwidth=1,
                ),
            ),
            resource_public_access_default_enabled=True,
        ),
        pods_config=volcengine.veecp.ClusterPodsConfigArgs(
            pod_network_mode="Flannel",
            flannel_config=volcengine.veecp.ClusterPodsConfigFlannelConfigArgs(
                pod_cidrs=["172.22.224.0/20"],
                max_pods_per_node=64,
            ),
        ),
        services_config=volcengine.veecp.ClusterServicesConfigArgs(
            service_cidrsv4s=["172.30.0.0/18"],
        ))
    foo_edge_node_pool = volcengine.veecp.EdgeNodePool("fooEdgeNodePool", cluster_id=foo_cluster.id)
    foo_edge_node_pools = volcengine.veecp.get_edge_node_pools_output(cluster_ids=[foo_cluster.id],
        ids=[foo_edge_node_pool.id])
    ```


    :param bool add_by_auto: Managed by auto.
    :param bool add_by_list: Managed by list.
    :param bool add_by_script: Managed by script.
    :param bool auto_scaling_enabled: Is enabled of AutoScaling.
    :param Sequence[str] cluster_ids: The ClusterIds of NodePool IDs.
    :param str create_client_token: The ClientToken when successfully created.
    :param Sequence[str] ids: A list of IDs.
    :param str name_regex: A Name Regex of Resource.
    :param Sequence[str] node_pool_types: The NodePoolTypes of NodePool.
    :param str output_file: File name where to save data source results.
    :param Sequence[pulumi.InputType['GetEdgeNodePoolsStatusArgs']] statuses: The Status of NodePool.
    :param str update_client_token: The ClientToken when last update was successful.
    """
    ...
