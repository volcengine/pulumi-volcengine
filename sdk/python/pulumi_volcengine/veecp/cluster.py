# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cluster_config: pulumi.Input['ClusterClusterConfigArgs'],
                 pods_config: pulumi.Input['ClusterPodsConfigArgs'],
                 profile: pulumi.Input[str],
                 services_config: pulumi.Input['ClusterServicesConfigArgs'],
                 client_token: Optional[pulumi.Input[str]] = None,
                 delete_protection_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_tunnel_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 logging_config: Optional[pulumi.Input['ClusterLoggingConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input['ClusterClusterConfigArgs'] cluster_config: Network configuration of cluster control plane and nodes.
        :param pulumi.Input['ClusterPodsConfigArgs'] pods_config: Container (Pod) network configuration of the cluster.
        :param pulumi.Input[str] profile: Edge cluster: Edge. Non-edge cluster: Cloud. When using edge hosting, set this item to Edge.
        :param pulumi.Input['ClusterServicesConfigArgs'] services_config: Cluster service (Service) network configuration.
        :param pulumi.Input[str] client_token: ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.
        :param pulumi.Input[bool] delete_protection_enabled: Cluster deletion protection. Values: false: (default value) Deletion protection is off. true: Enable deletion protection. The cluster cannot be directly deleted. After creating a cluster, when calling Delete edge cluster, configure the Force parameter and choose to forcibly delete the cluster.
        :param pulumi.Input[str] description: Cluster description. Length is limited to within 300 characters.
        :param pulumi.Input[bool] edge_tunnel_enabled: Whether to enable the edge tunnel. Values: false: (default value) Edge tunnel is off. true: Enable edge tunnel. Note: This parameter is not supported to be modified after the cluster is created.
        :param pulumi.Input[str] kubernetes_version: Specify the Kubernetes version when creating a cluster. The format is x.xx. The default value is the latest version in the supported Kubernetes version list (currently 1.20).
        :param pulumi.Input['ClusterLoggingConfigArgs'] logging_config: Cluster log configuration information.
        :param pulumi.Input[str] name: Cluster name. Under the same region, the name must be unique. Supports upper and lower case English letters, Chinese characters, numbers, and hyphens (-). Numbers cannot be at the first position, and hyphens (-) cannot be at the first or last position. The length is limited to 2 to 64 characters.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)
        pulumi.set(__self__, "pods_config", pods_config)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "services_config", services_config)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if delete_protection_enabled is not None:
            pulumi.set(__self__, "delete_protection_enabled", delete_protection_enabled)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_tunnel_enabled is not None:
            pulumi.set(__self__, "edge_tunnel_enabled", edge_tunnel_enabled)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if logging_config is not None:
            pulumi.set(__self__, "logging_config", logging_config)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Input['ClusterClusterConfigArgs']:
        """
        Network configuration of cluster control plane and nodes.
        """
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: pulumi.Input['ClusterClusterConfigArgs']):
        pulumi.set(self, "cluster_config", value)

    @property
    @pulumi.getter(name="podsConfig")
    def pods_config(self) -> pulumi.Input['ClusterPodsConfigArgs']:
        """
        Container (Pod) network configuration of the cluster.
        """
        return pulumi.get(self, "pods_config")

    @pods_config.setter
    def pods_config(self, value: pulumi.Input['ClusterPodsConfigArgs']):
        pulumi.set(self, "pods_config", value)

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Input[str]:
        """
        Edge cluster: Edge. Non-edge cluster: Cloud. When using edge hosting, set this item to Edge.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="servicesConfig")
    def services_config(self) -> pulumi.Input['ClusterServicesConfigArgs']:
        """
        Cluster service (Service) network configuration.
        """
        return pulumi.get(self, "services_config")

    @services_config.setter
    def services_config(self, value: pulumi.Input['ClusterServicesConfigArgs']):
        pulumi.set(self, "services_config", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="deleteProtectionEnabled")
    def delete_protection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Cluster deletion protection. Values: false: (default value) Deletion protection is off. true: Enable deletion protection. The cluster cannot be directly deleted. After creating a cluster, when calling Delete edge cluster, configure the Force parameter and choose to forcibly delete the cluster.
        """
        return pulumi.get(self, "delete_protection_enabled")

    @delete_protection_enabled.setter
    def delete_protection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_protection_enabled", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster description. Length is limited to within 300 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeTunnelEnabled")
    def edge_tunnel_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the edge tunnel. Values: false: (default value) Edge tunnel is off. true: Enable edge tunnel. Note: This parameter is not supported to be modified after the cluster is created.
        """
        return pulumi.get(self, "edge_tunnel_enabled")

    @edge_tunnel_enabled.setter
    def edge_tunnel_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "edge_tunnel_enabled", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the Kubernetes version when creating a cluster. The format is x.xx. The default value is the latest version in the supported Kubernetes version list (currently 1.20).
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> Optional[pulumi.Input['ClusterLoggingConfigArgs']]:
        """
        Cluster log configuration information.
        """
        return pulumi.get(self, "logging_config")

    @logging_config.setter
    def logging_config(self, value: Optional[pulumi.Input['ClusterLoggingConfigArgs']]):
        pulumi.set(self, "logging_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster name. Under the same region, the name must be unique. Supports upper and lower case English letters, Chinese characters, numbers, and hyphens (-). Numbers cannot be at the first position, and hyphens (-) cannot be at the first or last position. The length is limited to 2 to 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_config: Optional[pulumi.Input['ClusterClusterConfigArgs']] = None,
                 delete_protection_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_tunnel_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 logging_config: Optional[pulumi.Input['ClusterLoggingConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pods_config: Optional[pulumi.Input['ClusterPodsConfigArgs']] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 services_config: Optional[pulumi.Input['ClusterServicesConfigArgs']] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[str] client_token: ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.
        :param pulumi.Input['ClusterClusterConfigArgs'] cluster_config: Network configuration of cluster control plane and nodes.
        :param pulumi.Input[bool] delete_protection_enabled: Cluster deletion protection. Values: false: (default value) Deletion protection is off. true: Enable deletion protection. The cluster cannot be directly deleted. After creating a cluster, when calling Delete edge cluster, configure the Force parameter and choose to forcibly delete the cluster.
        :param pulumi.Input[str] description: Cluster description. Length is limited to within 300 characters.
        :param pulumi.Input[bool] edge_tunnel_enabled: Whether to enable the edge tunnel. Values: false: (default value) Edge tunnel is off. true: Enable edge tunnel. Note: This parameter is not supported to be modified after the cluster is created.
        :param pulumi.Input[str] kubernetes_version: Specify the Kubernetes version when creating a cluster. The format is x.xx. The default value is the latest version in the supported Kubernetes version list (currently 1.20).
        :param pulumi.Input['ClusterLoggingConfigArgs'] logging_config: Cluster log configuration information.
        :param pulumi.Input[str] name: Cluster name. Under the same region, the name must be unique. Supports upper and lower case English letters, Chinese characters, numbers, and hyphens (-). Numbers cannot be at the first position, and hyphens (-) cannot be at the first or last position. The length is limited to 2 to 64 characters.
        :param pulumi.Input['ClusterPodsConfigArgs'] pods_config: Container (Pod) network configuration of the cluster.
        :param pulumi.Input[str] profile: Edge cluster: Edge. Non-edge cluster: Cloud. When using edge hosting, set this item to Edge.
        :param pulumi.Input['ClusterServicesConfigArgs'] services_config: Cluster service (Service) network configuration.
        """
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if cluster_config is not None:
            pulumi.set(__self__, "cluster_config", cluster_config)
        if delete_protection_enabled is not None:
            pulumi.set(__self__, "delete_protection_enabled", delete_protection_enabled)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if edge_tunnel_enabled is not None:
            pulumi.set(__self__, "edge_tunnel_enabled", edge_tunnel_enabled)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if logging_config is not None:
            pulumi.set(__self__, "logging_config", logging_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pods_config is not None:
            pulumi.set(__self__, "pods_config", pods_config)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if services_config is not None:
            pulumi.set(__self__, "services_config", services_config)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> Optional[pulumi.Input['ClusterClusterConfigArgs']]:
        """
        Network configuration of cluster control plane and nodes.
        """
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: Optional[pulumi.Input['ClusterClusterConfigArgs']]):
        pulumi.set(self, "cluster_config", value)

    @property
    @pulumi.getter(name="deleteProtectionEnabled")
    def delete_protection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Cluster deletion protection. Values: false: (default value) Deletion protection is off. true: Enable deletion protection. The cluster cannot be directly deleted. After creating a cluster, when calling Delete edge cluster, configure the Force parameter and choose to forcibly delete the cluster.
        """
        return pulumi.get(self, "delete_protection_enabled")

    @delete_protection_enabled.setter
    def delete_protection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_protection_enabled", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster description. Length is limited to within 300 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="edgeTunnelEnabled")
    def edge_tunnel_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the edge tunnel. Values: false: (default value) Edge tunnel is off. true: Enable edge tunnel. Note: This parameter is not supported to be modified after the cluster is created.
        """
        return pulumi.get(self, "edge_tunnel_enabled")

    @edge_tunnel_enabled.setter
    def edge_tunnel_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "edge_tunnel_enabled", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the Kubernetes version when creating a cluster. The format is x.xx. The default value is the latest version in the supported Kubernetes version list (currently 1.20).
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> Optional[pulumi.Input['ClusterLoggingConfigArgs']]:
        """
        Cluster log configuration information.
        """
        return pulumi.get(self, "logging_config")

    @logging_config.setter
    def logging_config(self, value: Optional[pulumi.Input['ClusterLoggingConfigArgs']]):
        pulumi.set(self, "logging_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster name. Under the same region, the name must be unique. Supports upper and lower case English letters, Chinese characters, numbers, and hyphens (-). Numbers cannot be at the first position, and hyphens (-) cannot be at the first or last position. The length is limited to 2 to 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="podsConfig")
    def pods_config(self) -> Optional[pulumi.Input['ClusterPodsConfigArgs']]:
        """
        Container (Pod) network configuration of the cluster.
        """
        return pulumi.get(self, "pods_config")

    @pods_config.setter
    def pods_config(self, value: Optional[pulumi.Input['ClusterPodsConfigArgs']]):
        pulumi.set(self, "pods_config", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Edge cluster: Edge. Non-edge cluster: Cloud. When using edge hosting, set this item to Edge.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="servicesConfig")
    def services_config(self) -> Optional[pulumi.Input['ClusterServicesConfigArgs']]:
        """
        Cluster service (Service) network configuration.
        """
        return pulumi.get(self, "services_config")

    @services_config.setter
    def services_config(self, value: Optional[pulumi.Input['ClusterServicesConfigArgs']]):
        pulumi.set(self, "services_config", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_config: Optional[pulumi.Input[pulumi.InputType['ClusterClusterConfigArgs']]] = None,
                 delete_protection_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_tunnel_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 logging_config: Optional[pulumi.Input[pulumi.InputType['ClusterLoggingConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pods_config: Optional[pulumi.Input[pulumi.InputType['ClusterPodsConfigArgs']]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 services_config: Optional[pulumi.Input[pulumi.InputType['ClusterServicesConfigArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage veecp cluster
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-project1",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-subnet-test-2",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
            vpc_id=foo_vpc.id,
            security_group_name="acc-test-security-group2")
        foo_cluster = volcengine.veecp.Cluster("fooCluster",
            description="created by terraform",
            delete_protection_enabled=False,
            kubernetes_version="v1.24.15-veecp.1",
            profile="Edge",
            cluster_config=volcengine.veecp.ClusterClusterConfigArgs(
                subnet_ids=[foo_subnet.id],
                api_server_public_access_enabled=True,
                api_server_public_access_config=volcengine.veecp.ClusterClusterConfigApiServerPublicAccessConfigArgs(
                    public_access_network_config=volcengine.veecp.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs(
                        billing_type="PostPaidByBandwidth",
                        bandwidth=1,
                    ),
                ),
                resource_public_access_default_enabled=True,
            ),
            pods_config=volcengine.veecp.ClusterPodsConfigArgs(
                pod_network_mode="Flannel",
                flannel_config=volcengine.veecp.ClusterPodsConfigFlannelConfigArgs(
                    pod_cidrs=["172.22.224.0/20"],
                    max_pods_per_node=64,
                ),
            ),
            services_config=volcengine.veecp.ClusterServicesConfigArgs(
                service_cidrsv4s=["172.30.0.0/18"],
            ))
        ```

        ## Import

        VeecpCluster can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:veecp/cluster:Cluster default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_token: ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.
        :param pulumi.Input[pulumi.InputType['ClusterClusterConfigArgs']] cluster_config: Network configuration of cluster control plane and nodes.
        :param pulumi.Input[bool] delete_protection_enabled: Cluster deletion protection. Values: false: (default value) Deletion protection is off. true: Enable deletion protection. The cluster cannot be directly deleted. After creating a cluster, when calling Delete edge cluster, configure the Force parameter and choose to forcibly delete the cluster.
        :param pulumi.Input[str] description: Cluster description. Length is limited to within 300 characters.
        :param pulumi.Input[bool] edge_tunnel_enabled: Whether to enable the edge tunnel. Values: false: (default value) Edge tunnel is off. true: Enable edge tunnel. Note: This parameter is not supported to be modified after the cluster is created.
        :param pulumi.Input[str] kubernetes_version: Specify the Kubernetes version when creating a cluster. The format is x.xx. The default value is the latest version in the supported Kubernetes version list (currently 1.20).
        :param pulumi.Input[pulumi.InputType['ClusterLoggingConfigArgs']] logging_config: Cluster log configuration information.
        :param pulumi.Input[str] name: Cluster name. Under the same region, the name must be unique. Supports upper and lower case English letters, Chinese characters, numbers, and hyphens (-). Numbers cannot be at the first position, and hyphens (-) cannot be at the first or last position. The length is limited to 2 to 64 characters.
        :param pulumi.Input[pulumi.InputType['ClusterPodsConfigArgs']] pods_config: Container (Pod) network configuration of the cluster.
        :param pulumi.Input[str] profile: Edge cluster: Edge. Non-edge cluster: Cloud. When using edge hosting, set this item to Edge.
        :param pulumi.Input[pulumi.InputType['ClusterServicesConfigArgs']] services_config: Cluster service (Service) network configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage veecp cluster
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-project1",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-subnet-test-2",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
            vpc_id=foo_vpc.id,
            security_group_name="acc-test-security-group2")
        foo_cluster = volcengine.veecp.Cluster("fooCluster",
            description="created by terraform",
            delete_protection_enabled=False,
            kubernetes_version="v1.24.15-veecp.1",
            profile="Edge",
            cluster_config=volcengine.veecp.ClusterClusterConfigArgs(
                subnet_ids=[foo_subnet.id],
                api_server_public_access_enabled=True,
                api_server_public_access_config=volcengine.veecp.ClusterClusterConfigApiServerPublicAccessConfigArgs(
                    public_access_network_config=volcengine.veecp.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs(
                        billing_type="PostPaidByBandwidth",
                        bandwidth=1,
                    ),
                ),
                resource_public_access_default_enabled=True,
            ),
            pods_config=volcengine.veecp.ClusterPodsConfigArgs(
                pod_network_mode="Flannel",
                flannel_config=volcengine.veecp.ClusterPodsConfigFlannelConfigArgs(
                    pod_cidrs=["172.22.224.0/20"],
                    max_pods_per_node=64,
                ),
            ),
            services_config=volcengine.veecp.ClusterServicesConfigArgs(
                service_cidrsv4s=["172.30.0.0/18"],
            ))
        ```

        ## Import

        VeecpCluster can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:veecp/cluster:Cluster default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_config: Optional[pulumi.Input[pulumi.InputType['ClusterClusterConfigArgs']]] = None,
                 delete_protection_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 edge_tunnel_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 logging_config: Optional[pulumi.Input[pulumi.InputType['ClusterLoggingConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pods_config: Optional[pulumi.Input[pulumi.InputType['ClusterPodsConfigArgs']]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 services_config: Optional[pulumi.Input[pulumi.InputType['ClusterServicesConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["client_token"] = client_token
            if cluster_config is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_config'")
            __props__.__dict__["cluster_config"] = cluster_config
            __props__.__dict__["delete_protection_enabled"] = delete_protection_enabled
            __props__.__dict__["description"] = description
            __props__.__dict__["edge_tunnel_enabled"] = edge_tunnel_enabled
            __props__.__dict__["kubernetes_version"] = kubernetes_version
            __props__.__dict__["logging_config"] = logging_config
            __props__.__dict__["name"] = name
            if pods_config is None and not opts.urn:
                raise TypeError("Missing required property 'pods_config'")
            __props__.__dict__["pods_config"] = pods_config
            if profile is None and not opts.urn:
                raise TypeError("Missing required property 'profile'")
            __props__.__dict__["profile"] = profile
            if services_config is None and not opts.urn:
                raise TypeError("Missing required property 'services_config'")
            __props__.__dict__["services_config"] = services_config
        super(Cluster, __self__).__init__(
            'volcengine:veecp/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_token: Optional[pulumi.Input[str]] = None,
            cluster_config: Optional[pulumi.Input[pulumi.InputType['ClusterClusterConfigArgs']]] = None,
            delete_protection_enabled: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            edge_tunnel_enabled: Optional[pulumi.Input[bool]] = None,
            kubernetes_version: Optional[pulumi.Input[str]] = None,
            logging_config: Optional[pulumi.Input[pulumi.InputType['ClusterLoggingConfigArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pods_config: Optional[pulumi.Input[pulumi.InputType['ClusterPodsConfigArgs']]] = None,
            profile: Optional[pulumi.Input[str]] = None,
            services_config: Optional[pulumi.Input[pulumi.InputType['ClusterServicesConfigArgs']]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_token: ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.
        :param pulumi.Input[pulumi.InputType['ClusterClusterConfigArgs']] cluster_config: Network configuration of cluster control plane and nodes.
        :param pulumi.Input[bool] delete_protection_enabled: Cluster deletion protection. Values: false: (default value) Deletion protection is off. true: Enable deletion protection. The cluster cannot be directly deleted. After creating a cluster, when calling Delete edge cluster, configure the Force parameter and choose to forcibly delete the cluster.
        :param pulumi.Input[str] description: Cluster description. Length is limited to within 300 characters.
        :param pulumi.Input[bool] edge_tunnel_enabled: Whether to enable the edge tunnel. Values: false: (default value) Edge tunnel is off. true: Enable edge tunnel. Note: This parameter is not supported to be modified after the cluster is created.
        :param pulumi.Input[str] kubernetes_version: Specify the Kubernetes version when creating a cluster. The format is x.xx. The default value is the latest version in the supported Kubernetes version list (currently 1.20).
        :param pulumi.Input[pulumi.InputType['ClusterLoggingConfigArgs']] logging_config: Cluster log configuration information.
        :param pulumi.Input[str] name: Cluster name. Under the same region, the name must be unique. Supports upper and lower case English letters, Chinese characters, numbers, and hyphens (-). Numbers cannot be at the first position, and hyphens (-) cannot be at the first or last position. The length is limited to 2 to 64 characters.
        :param pulumi.Input[pulumi.InputType['ClusterPodsConfigArgs']] pods_config: Container (Pod) network configuration of the cluster.
        :param pulumi.Input[str] profile: Edge cluster: Edge. Non-edge cluster: Cloud. When using edge hosting, set this item to Edge.
        :param pulumi.Input[pulumi.InputType['ClusterServicesConfigArgs']] services_config: Cluster service (Service) network configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["client_token"] = client_token
        __props__.__dict__["cluster_config"] = cluster_config
        __props__.__dict__["delete_protection_enabled"] = delete_protection_enabled
        __props__.__dict__["description"] = description
        __props__.__dict__["edge_tunnel_enabled"] = edge_tunnel_enabled
        __props__.__dict__["kubernetes_version"] = kubernetes_version
        __props__.__dict__["logging_config"] = logging_config
        __props__.__dict__["name"] = name
        __props__.__dict__["pods_config"] = pods_config
        __props__.__dict__["profile"] = profile
        __props__.__dict__["services_config"] = services_config
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> pulumi.Output[Optional[str]]:
        """
        ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.
        """
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Output['outputs.ClusterClusterConfig']:
        """
        Network configuration of cluster control plane and nodes.
        """
        return pulumi.get(self, "cluster_config")

    @property
    @pulumi.getter(name="deleteProtectionEnabled")
    def delete_protection_enabled(self) -> pulumi.Output[bool]:
        """
        Cluster deletion protection. Values: false: (default value) Deletion protection is off. true: Enable deletion protection. The cluster cannot be directly deleted. After creating a cluster, when calling Delete edge cluster, configure the Force parameter and choose to forcibly delete the cluster.
        """
        return pulumi.get(self, "delete_protection_enabled")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster description. Length is limited to within 300 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="edgeTunnelEnabled")
    def edge_tunnel_enabled(self) -> pulumi.Output[bool]:
        """
        Whether to enable the edge tunnel. Values: false: (default value) Edge tunnel is off. true: Enable edge tunnel. Note: This parameter is not supported to be modified after the cluster is created.
        """
        return pulumi.get(self, "edge_tunnel_enabled")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> pulumi.Output[str]:
        """
        Specify the Kubernetes version when creating a cluster. The format is x.xx. The default value is the latest version in the supported Kubernetes version list (currently 1.20).
        """
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> pulumi.Output[Optional['outputs.ClusterLoggingConfig']]:
        """
        Cluster log configuration information.
        """
        return pulumi.get(self, "logging_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Cluster name. Under the same region, the name must be unique. Supports upper and lower case English letters, Chinese characters, numbers, and hyphens (-). Numbers cannot be at the first position, and hyphens (-) cannot be at the first or last position. The length is limited to 2 to 64 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="podsConfig")
    def pods_config(self) -> pulumi.Output['outputs.ClusterPodsConfig']:
        """
        Container (Pod) network configuration of the cluster.
        """
        return pulumi.get(self, "pods_config")

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Output[str]:
        """
        Edge cluster: Edge. Non-edge cluster: Cloud. When using edge hosting, set this item to Edge.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="servicesConfig")
    def services_config(self) -> pulumi.Output['outputs.ClusterServicesConfig']:
        """
        Cluster service (Service) network configuration.
        """
        return pulumi.get(self, "services_config")

