# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EdgeNodePoolArgs', 'EdgeNodePool']

@pulumi.input_type
class EdgeNodePoolArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 billing_configs: Optional[pulumi.Input['EdgeNodePoolBillingConfigsArgs']] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 elastic_config: Optional[pulumi.Input['EdgeNodePoolElasticConfigArgs']] = None,
                 kubernetes_config: Optional[pulumi.Input['EdgeNodePoolKubernetesConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EdgeNodePool resource.
        :param pulumi.Input[str] cluster_id: The ClusterId of NodePool.
        :param pulumi.Input['EdgeNodePoolBillingConfigsArgs'] billing_configs: The billing configuration of the node pool.
        :param pulumi.Input[str] client_token: The ClientToken of NodePool.
        :param pulumi.Input['EdgeNodePoolElasticConfigArgs'] elastic_config: Elastic scaling configuration.
        :param pulumi.Input['EdgeNodePoolKubernetesConfigArgs'] kubernetes_config: The KubernetesConfig of NodeConfig.
        :param pulumi.Input[str] name: The Name of NodePool.
        :param pulumi.Input[str] node_pool_type: Node pool type, with the default being a static node pool. edge-machine-set: Static node pool. edge-machine-pool: Elastic node poolNode pool type, which is static node pool by default. edge-machine-set: static node pool
               edge-machine-pool: elastic node pool.
        :param pulumi.Input[str] vpc_id: The VpcId of NodePool.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if billing_configs is not None:
            pulumi.set(__self__, "billing_configs", billing_configs)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if elastic_config is not None:
            pulumi.set(__self__, "elastic_config", elastic_config)
        if kubernetes_config is not None:
            pulumi.set(__self__, "kubernetes_config", kubernetes_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_pool_type is not None:
            pulumi.set(__self__, "node_pool_type", node_pool_type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="billingConfigs")
    def billing_configs(self) -> Optional[pulumi.Input['EdgeNodePoolBillingConfigsArgs']]:
        """
        The billing configuration of the node pool.
        """
        return pulumi.get(self, "billing_configs")

    @billing_configs.setter
    def billing_configs(self, value: Optional[pulumi.Input['EdgeNodePoolBillingConfigsArgs']]):
        pulumi.set(self, "billing_configs", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        The ClientToken of NodePool.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="elasticConfig")
    def elastic_config(self) -> Optional[pulumi.Input['EdgeNodePoolElasticConfigArgs']]:
        """
        Elastic scaling configuration.
        """
        return pulumi.get(self, "elastic_config")

    @elastic_config.setter
    def elastic_config(self, value: Optional[pulumi.Input['EdgeNodePoolElasticConfigArgs']]):
        pulumi.set(self, "elastic_config", value)

    @property
    @pulumi.getter(name="kubernetesConfig")
    def kubernetes_config(self) -> Optional[pulumi.Input['EdgeNodePoolKubernetesConfigArgs']]:
        """
        The KubernetesConfig of NodeConfig.
        """
        return pulumi.get(self, "kubernetes_config")

    @kubernetes_config.setter
    def kubernetes_config(self, value: Optional[pulumi.Input['EdgeNodePoolKubernetesConfigArgs']]):
        pulumi.set(self, "kubernetes_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePoolType")
    def node_pool_type(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool type, with the default being a static node pool. edge-machine-set: Static node pool. edge-machine-pool: Elastic node poolNode pool type, which is static node pool by default. edge-machine-set: static node pool
        edge-machine-pool: elastic node pool.
        """
        return pulumi.get(self, "node_pool_type")

    @node_pool_type.setter
    def node_pool_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pool_type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The VpcId of NodePool.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _EdgeNodePoolState:
    def __init__(__self__, *,
                 billing_configs: Optional[pulumi.Input['EdgeNodePoolBillingConfigsArgs']] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 elastic_config: Optional[pulumi.Input['EdgeNodePoolElasticConfigArgs']] = None,
                 kubernetes_config: Optional[pulumi.Input['EdgeNodePoolKubernetesConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EdgeNodePool resources.
        :param pulumi.Input['EdgeNodePoolBillingConfigsArgs'] billing_configs: The billing configuration of the node pool.
        :param pulumi.Input[str] client_token: The ClientToken of NodePool.
        :param pulumi.Input[str] cluster_id: The ClusterId of NodePool.
        :param pulumi.Input['EdgeNodePoolElasticConfigArgs'] elastic_config: Elastic scaling configuration.
        :param pulumi.Input['EdgeNodePoolKubernetesConfigArgs'] kubernetes_config: The KubernetesConfig of NodeConfig.
        :param pulumi.Input[str] name: The Name of NodePool.
        :param pulumi.Input[str] node_pool_type: Node pool type, with the default being a static node pool. edge-machine-set: Static node pool. edge-machine-pool: Elastic node poolNode pool type, which is static node pool by default. edge-machine-set: static node pool
               edge-machine-pool: elastic node pool.
        :param pulumi.Input[str] vpc_id: The VpcId of NodePool.
        """
        if billing_configs is not None:
            pulumi.set(__self__, "billing_configs", billing_configs)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if elastic_config is not None:
            pulumi.set(__self__, "elastic_config", elastic_config)
        if kubernetes_config is not None:
            pulumi.set(__self__, "kubernetes_config", kubernetes_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_pool_type is not None:
            pulumi.set(__self__, "node_pool_type", node_pool_type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="billingConfigs")
    def billing_configs(self) -> Optional[pulumi.Input['EdgeNodePoolBillingConfigsArgs']]:
        """
        The billing configuration of the node pool.
        """
        return pulumi.get(self, "billing_configs")

    @billing_configs.setter
    def billing_configs(self, value: Optional[pulumi.Input['EdgeNodePoolBillingConfigsArgs']]):
        pulumi.set(self, "billing_configs", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        The ClientToken of NodePool.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="elasticConfig")
    def elastic_config(self) -> Optional[pulumi.Input['EdgeNodePoolElasticConfigArgs']]:
        """
        Elastic scaling configuration.
        """
        return pulumi.get(self, "elastic_config")

    @elastic_config.setter
    def elastic_config(self, value: Optional[pulumi.Input['EdgeNodePoolElasticConfigArgs']]):
        pulumi.set(self, "elastic_config", value)

    @property
    @pulumi.getter(name="kubernetesConfig")
    def kubernetes_config(self) -> Optional[pulumi.Input['EdgeNodePoolKubernetesConfigArgs']]:
        """
        The KubernetesConfig of NodeConfig.
        """
        return pulumi.get(self, "kubernetes_config")

    @kubernetes_config.setter
    def kubernetes_config(self, value: Optional[pulumi.Input['EdgeNodePoolKubernetesConfigArgs']]):
        pulumi.set(self, "kubernetes_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePoolType")
    def node_pool_type(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool type, with the default being a static node pool. edge-machine-set: Static node pool. edge-machine-pool: Elastic node poolNode pool type, which is static node pool by default. edge-machine-set: static node pool
        edge-machine-pool: elastic node pool.
        """
        return pulumi.get(self, "node_pool_type")

    @node_pool_type.setter
    def node_pool_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pool_type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The VpcId of NodePool.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class EdgeNodePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 billing_configs: Optional[pulumi.Input[pulumi.InputType['EdgeNodePoolBillingConfigsArgs']]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 elastic_config: Optional[pulumi.Input[pulumi.InputType['EdgeNodePoolElasticConfigArgs']]] = None,
                 kubernetes_config: Optional[pulumi.Input[pulumi.InputType['EdgeNodePoolKubernetesConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage veecp edge node pool
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.veecp.EdgeNodePool("foo",
            cluster_id="ccvmb0c66t101fnob3dhg",
            elastic_config=volcengine.veecp.EdgeNodePoolElasticConfigArgs(
                auto_scale_config=volcengine.veecp.EdgeNodePoolElasticConfigAutoScaleConfigArgs(
                    desired_replicas=0,
                    enabled=True,
                    max_replicas=2,
                    min_replicas=0,
                    priority=10,
                ),
                cloud_server_identity="cloudserver-47vz7k929cp9xqb",
                instance_area=volcengine.veecp.EdgeNodePoolElasticConfigInstanceAreaArgs(
                    cluster_name="bdcdn-zzcu02",
                    vpc_identity="vpc-l9sz9qlf2t",
                ),
            ),
            node_pool_type="edge-machine-pool",
            vpc_id="vpc-l9sz9qlf2t")
        ```

        ## Import

        VeecpNodePool can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:veecp/edgeNodePool:EdgeNodePool default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['EdgeNodePoolBillingConfigsArgs']] billing_configs: The billing configuration of the node pool.
        :param pulumi.Input[str] client_token: The ClientToken of NodePool.
        :param pulumi.Input[str] cluster_id: The ClusterId of NodePool.
        :param pulumi.Input[pulumi.InputType['EdgeNodePoolElasticConfigArgs']] elastic_config: Elastic scaling configuration.
        :param pulumi.Input[pulumi.InputType['EdgeNodePoolKubernetesConfigArgs']] kubernetes_config: The KubernetesConfig of NodeConfig.
        :param pulumi.Input[str] name: The Name of NodePool.
        :param pulumi.Input[str] node_pool_type: Node pool type, with the default being a static node pool. edge-machine-set: Static node pool. edge-machine-pool: Elastic node poolNode pool type, which is static node pool by default. edge-machine-set: static node pool
               edge-machine-pool: elastic node pool.
        :param pulumi.Input[str] vpc_id: The VpcId of NodePool.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EdgeNodePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage veecp edge node pool
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.veecp.EdgeNodePool("foo",
            cluster_id="ccvmb0c66t101fnob3dhg",
            elastic_config=volcengine.veecp.EdgeNodePoolElasticConfigArgs(
                auto_scale_config=volcengine.veecp.EdgeNodePoolElasticConfigAutoScaleConfigArgs(
                    desired_replicas=0,
                    enabled=True,
                    max_replicas=2,
                    min_replicas=0,
                    priority=10,
                ),
                cloud_server_identity="cloudserver-47vz7k929cp9xqb",
                instance_area=volcengine.veecp.EdgeNodePoolElasticConfigInstanceAreaArgs(
                    cluster_name="bdcdn-zzcu02",
                    vpc_identity="vpc-l9sz9qlf2t",
                ),
            ),
            node_pool_type="edge-machine-pool",
            vpc_id="vpc-l9sz9qlf2t")
        ```

        ## Import

        VeecpNodePool can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:veecp/edgeNodePool:EdgeNodePool default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param EdgeNodePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EdgeNodePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 billing_configs: Optional[pulumi.Input[pulumi.InputType['EdgeNodePoolBillingConfigsArgs']]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 elastic_config: Optional[pulumi.Input[pulumi.InputType['EdgeNodePoolElasticConfigArgs']]] = None,
                 kubernetes_config: Optional[pulumi.Input[pulumi.InputType['EdgeNodePoolKubernetesConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EdgeNodePoolArgs.__new__(EdgeNodePoolArgs)

            __props__.__dict__["billing_configs"] = billing_configs
            __props__.__dict__["client_token"] = client_token
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["elastic_config"] = elastic_config
            __props__.__dict__["kubernetes_config"] = kubernetes_config
            __props__.__dict__["name"] = name
            __props__.__dict__["node_pool_type"] = node_pool_type
            __props__.__dict__["vpc_id"] = vpc_id
        super(EdgeNodePool, __self__).__init__(
            'volcengine:veecp/edgeNodePool:EdgeNodePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            billing_configs: Optional[pulumi.Input[pulumi.InputType['EdgeNodePoolBillingConfigsArgs']]] = None,
            client_token: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            elastic_config: Optional[pulumi.Input[pulumi.InputType['EdgeNodePoolElasticConfigArgs']]] = None,
            kubernetes_config: Optional[pulumi.Input[pulumi.InputType['EdgeNodePoolKubernetesConfigArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_pool_type: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'EdgeNodePool':
        """
        Get an existing EdgeNodePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['EdgeNodePoolBillingConfigsArgs']] billing_configs: The billing configuration of the node pool.
        :param pulumi.Input[str] client_token: The ClientToken of NodePool.
        :param pulumi.Input[str] cluster_id: The ClusterId of NodePool.
        :param pulumi.Input[pulumi.InputType['EdgeNodePoolElasticConfigArgs']] elastic_config: Elastic scaling configuration.
        :param pulumi.Input[pulumi.InputType['EdgeNodePoolKubernetesConfigArgs']] kubernetes_config: The KubernetesConfig of NodeConfig.
        :param pulumi.Input[str] name: The Name of NodePool.
        :param pulumi.Input[str] node_pool_type: Node pool type, with the default being a static node pool. edge-machine-set: Static node pool. edge-machine-pool: Elastic node poolNode pool type, which is static node pool by default. edge-machine-set: static node pool
               edge-machine-pool: elastic node pool.
        :param pulumi.Input[str] vpc_id: The VpcId of NodePool.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EdgeNodePoolState.__new__(_EdgeNodePoolState)

        __props__.__dict__["billing_configs"] = billing_configs
        __props__.__dict__["client_token"] = client_token
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["elastic_config"] = elastic_config
        __props__.__dict__["kubernetes_config"] = kubernetes_config
        __props__.__dict__["name"] = name
        __props__.__dict__["node_pool_type"] = node_pool_type
        __props__.__dict__["vpc_id"] = vpc_id
        return EdgeNodePool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="billingConfigs")
    def billing_configs(self) -> pulumi.Output[Optional['outputs.EdgeNodePoolBillingConfigs']]:
        """
        The billing configuration of the node pool.
        """
        return pulumi.get(self, "billing_configs")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> pulumi.Output[Optional[str]]:
        """
        The ClientToken of NodePool.
        """
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="elasticConfig")
    def elastic_config(self) -> pulumi.Output['outputs.EdgeNodePoolElasticConfig']:
        """
        Elastic scaling configuration.
        """
        return pulumi.get(self, "elastic_config")

    @property
    @pulumi.getter(name="kubernetesConfig")
    def kubernetes_config(self) -> pulumi.Output['outputs.EdgeNodePoolKubernetesConfig']:
        """
        The KubernetesConfig of NodeConfig.
        """
        return pulumi.get(self, "kubernetes_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePoolType")
    def node_pool_type(self) -> pulumi.Output[Optional[str]]:
        """
        Node pool type, with the default being a static node pool. edge-machine-set: Static node pool. edge-machine-pool: Elastic node poolNode pool type, which is static node pool by default. edge-machine-set: static node pool
        edge-machine-pool: elastic node pool.
        """
        return pulumi.get(self, "node_pool_type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        The VpcId of NodePool.
        """
        return pulumi.get(self, "vpc_id")

