# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EdgeNodeArgs', 'EdgeNode']

@pulumi.input_type
class EdgeNodeArgs:
    def __init__(__self__, *,
                 auto_complete_config: pulumi.Input['EdgeNodeAutoCompleteConfigArgs'],
                 cluster_id: pulumi.Input[str],
                 node_pool_id: pulumi.Input[str],
                 client_token: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EdgeNode resource.
        :param pulumi.Input['EdgeNodeAutoCompleteConfigArgs'] auto_complete_config: Machine information to be managed.
        :param pulumi.Input[str] cluster_id: The cluster id.
        :param pulumi.Input[str] node_pool_id: The node pool id.
        :param pulumi.Input[str] client_token: The client token.
        :param pulumi.Input[str] name: The name of node.
        """
        pulumi.set(__self__, "auto_complete_config", auto_complete_config)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "node_pool_id", node_pool_id)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="autoCompleteConfig")
    def auto_complete_config(self) -> pulumi.Input['EdgeNodeAutoCompleteConfigArgs']:
        """
        Machine information to be managed.
        """
        return pulumi.get(self, "auto_complete_config")

    @auto_complete_config.setter
    def auto_complete_config(self, value: pulumi.Input['EdgeNodeAutoCompleteConfigArgs']):
        pulumi.set(self, "auto_complete_config", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> pulumi.Input[str]:
        """
        The node pool id.
        """
        return pulumi.get(self, "node_pool_id")

    @node_pool_id.setter
    def node_pool_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_pool_id", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        The client token.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of node.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _EdgeNodeState:
    def __init__(__self__, *,
                 auto_complete_config: Optional[pulumi.Input['EdgeNodeAutoCompleteConfigArgs']] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EdgeNode resources.
        :param pulumi.Input['EdgeNodeAutoCompleteConfigArgs'] auto_complete_config: Machine information to be managed.
        :param pulumi.Input[str] client_token: The client token.
        :param pulumi.Input[str] cluster_id: The cluster id.
        :param pulumi.Input[str] name: The name of node.
        :param pulumi.Input[str] node_pool_id: The node pool id.
        """
        if auto_complete_config is not None:
            pulumi.set(__self__, "auto_complete_config", auto_complete_config)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_pool_id is not None:
            pulumi.set(__self__, "node_pool_id", node_pool_id)

    @property
    @pulumi.getter(name="autoCompleteConfig")
    def auto_complete_config(self) -> Optional[pulumi.Input['EdgeNodeAutoCompleteConfigArgs']]:
        """
        Machine information to be managed.
        """
        return pulumi.get(self, "auto_complete_config")

    @auto_complete_config.setter
    def auto_complete_config(self, value: Optional[pulumi.Input['EdgeNodeAutoCompleteConfigArgs']]):
        pulumi.set(self, "auto_complete_config", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        The client token.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of node.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The node pool id.
        """
        return pulumi.get(self, "node_pool_id")

    @node_pool_id.setter
    def node_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pool_id", value)


class EdgeNode(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_complete_config: Optional[pulumi.Input[pulumi.InputType['EdgeNodeAutoCompleteConfigArgs']]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage veecp edge node
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.veecp.EdgeNode("foo",
            auto_complete_config=volcengine.veecp.EdgeNodeAutoCompleteConfigArgs(
                direct_add=True,
                direct_add_instances=[volcengine.veecp.EdgeNodeAutoCompleteConfigDirectAddInstanceArgs(
                    cloud_server_identity="cloudserver-wvvflw9qdns2qrk",
                    instance_identity="veen91912104432151420041",
                )],
                enable=True,
            ),
            cluster_id="ccvmf49t1ndqeechmj8p0",
            node_pool_id="pcvpkdn7ic26jjcjsa20g")
        ```

        ## Import

        VeecpNode can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:veecp/edgeNode:EdgeNode default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['EdgeNodeAutoCompleteConfigArgs']] auto_complete_config: Machine information to be managed.
        :param pulumi.Input[str] client_token: The client token.
        :param pulumi.Input[str] cluster_id: The cluster id.
        :param pulumi.Input[str] name: The name of node.
        :param pulumi.Input[str] node_pool_id: The node pool id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EdgeNodeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage veecp edge node
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.veecp.EdgeNode("foo",
            auto_complete_config=volcengine.veecp.EdgeNodeAutoCompleteConfigArgs(
                direct_add=True,
                direct_add_instances=[volcengine.veecp.EdgeNodeAutoCompleteConfigDirectAddInstanceArgs(
                    cloud_server_identity="cloudserver-wvvflw9qdns2qrk",
                    instance_identity="veen91912104432151420041",
                )],
                enable=True,
            ),
            cluster_id="ccvmf49t1ndqeechmj8p0",
            node_pool_id="pcvpkdn7ic26jjcjsa20g")
        ```

        ## Import

        VeecpNode can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:veecp/edgeNode:EdgeNode default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param EdgeNodeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EdgeNodeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_complete_config: Optional[pulumi.Input[pulumi.InputType['EdgeNodeAutoCompleteConfigArgs']]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EdgeNodeArgs.__new__(EdgeNodeArgs)

            if auto_complete_config is None and not opts.urn:
                raise TypeError("Missing required property 'auto_complete_config'")
            __props__.__dict__["auto_complete_config"] = auto_complete_config
            __props__.__dict__["client_token"] = client_token
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["name"] = name
            if node_pool_id is None and not opts.urn:
                raise TypeError("Missing required property 'node_pool_id'")
            __props__.__dict__["node_pool_id"] = node_pool_id
        super(EdgeNode, __self__).__init__(
            'volcengine:veecp/edgeNode:EdgeNode',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_complete_config: Optional[pulumi.Input[pulumi.InputType['EdgeNodeAutoCompleteConfigArgs']]] = None,
            client_token: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_pool_id: Optional[pulumi.Input[str]] = None) -> 'EdgeNode':
        """
        Get an existing EdgeNode resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['EdgeNodeAutoCompleteConfigArgs']] auto_complete_config: Machine information to be managed.
        :param pulumi.Input[str] client_token: The client token.
        :param pulumi.Input[str] cluster_id: The cluster id.
        :param pulumi.Input[str] name: The name of node.
        :param pulumi.Input[str] node_pool_id: The node pool id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EdgeNodeState.__new__(_EdgeNodeState)

        __props__.__dict__["auto_complete_config"] = auto_complete_config
        __props__.__dict__["client_token"] = client_token
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["name"] = name
        __props__.__dict__["node_pool_id"] = node_pool_id
        return EdgeNode(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoCompleteConfig")
    def auto_complete_config(self) -> pulumi.Output['outputs.EdgeNodeAutoCompleteConfig']:
        """
        Machine information to be managed.
        """
        return pulumi.get(self, "auto_complete_config")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> pulumi.Output[str]:
        """
        The client token.
        """
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> pulumi.Output[str]:
        """
        The node pool id.
        """
        return pulumi.get(self, "node_pool_id")

