# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BatchEdgeMachinesStatusArgs',
    'ClusterClusterConfigArgs',
    'ClusterClusterConfigApiServerPublicAccessConfigArgs',
    'ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs',
    'ClusterLoggingConfigArgs',
    'ClusterLoggingConfigLogSetupArgs',
    'ClusterPodsConfigArgs',
    'ClusterPodsConfigFlannelConfigArgs',
    'ClusterPodsConfigVpcCniConfigArgs',
    'ClusterServicesConfigArgs',
    'ClustersStatusArgs',
    'EdgeNodeAutoCompleteConfigArgs',
    'EdgeNodeAutoCompleteConfigDirectAddInstanceArgs',
    'EdgeNodeAutoCompleteConfigMachineAuthArgs',
    'EdgeNodePoolBillingConfigsArgs',
    'EdgeNodePoolElasticConfigArgs',
    'EdgeNodePoolElasticConfigAutoScaleConfigArgs',
    'EdgeNodePoolElasticConfigInstanceAreaArgs',
    'EdgeNodePoolKubernetesConfigArgs',
    'EdgeNodePoolKubernetesConfigLabelArgs',
    'EdgeNodePoolKubernetesConfigTaintArgs',
    'EdgeNodePoolsStatusArgs',
    'EdgeNodesStatusArgs',
    'NodePoolAutoScalingArgs',
    'NodePoolKubernetesConfigArgs',
    'NodePoolKubernetesConfigLabelArgs',
    'NodePoolKubernetesConfigTaintArgs',
    'NodePoolNodeConfigArgs',
    'NodePoolNodeConfigDataVolumeArgs',
    'NodePoolNodeConfigEcsTagArgs',
    'NodePoolNodeConfigSecurityArgs',
    'NodePoolNodeConfigSecurityLoginArgs',
    'NodePoolNodeConfigSystemVolumeArgs',
    'NodePoolNodeStatisticArgs',
    'NodePoolsStatusArgs',
    'GetBatchEdgeMachinesStatusArgs',
    'GetClustersStatusArgs',
    'GetEdgeNodePoolsStatusArgs',
    'GetEdgeNodesStatusArgs',
    'GetNodePoolsStatusArgs',
]

@pulumi.input_type
class BatchEdgeMachinesStatusArgs:
    def __init__(__self__, *,
                 edge_node_status_condition_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str edge_node_status_condition_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if edge_node_status_condition_type is not None:
            pulumi.set(__self__, "edge_node_status_condition_type", edge_node_status_condition_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="edgeNodeStatusConditionType")
    def edge_node_status_condition_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "edge_node_status_condition_type")

    @edge_node_status_condition_type.setter
    def edge_node_status_condition_type(self, value: Optional[str]):
        pulumi.set(self, "edge_node_status_condition_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class ClusterClusterConfigArgs:
    def __init__(__self__, *,
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 api_server_public_access_config: Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigArgs']] = None,
                 api_server_public_access_enabled: Optional[pulumi.Input[bool]] = None,
                 resource_public_access_default_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The subnet ID for communication within the private network (VPC) of the cluster control plane. You can call the private network API to obtain the subnet ID. Note: When creating a cluster, please ensure that all specified SubnetIds (including but not limited to this parameter) belong to the same private network. It is recommended that you choose subnets in different availability zones as much as possible to improve the high availability of the cluster control plane. Please note that this parameter is not supported to be modified after the cluster is created. Please configure it reasonably.
        :param pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigArgs'] api_server_public_access_config: Cluster API Server public network access configuration information. It takes effect only when ApiServerPublicAccessEnabled=true.
        :param pulumi.Input[bool] api_server_public_access_enabled: Cluster API Server public network access configuration, values:
               false: (default value). closed
               true: opened.
        :param pulumi.Input[bool] resource_public_access_default_enabled: Node public network access configuration, values:
               false: (default value). Do not enable public network access. Existing NAT gateways and rules are not affected. true: Enable public network access. After enabling, a NAT gateway is automatically created for the cluster's private network and corresponding rules are configured. Note: This parameter cannot be modified after the cluster is created. Please configure it reasonably.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if api_server_public_access_config is not None:
            pulumi.set(__self__, "api_server_public_access_config", api_server_public_access_config)
        if api_server_public_access_enabled is not None:
            pulumi.set(__self__, "api_server_public_access_enabled", api_server_public_access_enabled)
        if resource_public_access_default_enabled is not None:
            pulumi.set(__self__, "resource_public_access_default_enabled", resource_public_access_default_enabled)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The subnet ID for communication within the private network (VPC) of the cluster control plane. You can call the private network API to obtain the subnet ID. Note: When creating a cluster, please ensure that all specified SubnetIds (including but not limited to this parameter) belong to the same private network. It is recommended that you choose subnets in different availability zones as much as possible to improve the high availability of the cluster control plane. Please note that this parameter is not supported to be modified after the cluster is created. Please configure it reasonably.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="apiServerPublicAccessConfig")
    def api_server_public_access_config(self) -> Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigArgs']]:
        """
        Cluster API Server public network access configuration information. It takes effect only when ApiServerPublicAccessEnabled=true.
        """
        return pulumi.get(self, "api_server_public_access_config")

    @api_server_public_access_config.setter
    def api_server_public_access_config(self, value: Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigArgs']]):
        pulumi.set(self, "api_server_public_access_config", value)

    @property
    @pulumi.getter(name="apiServerPublicAccessEnabled")
    def api_server_public_access_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Cluster API Server public network access configuration, values:
        false: (default value). closed
        true: opened.
        """
        return pulumi.get(self, "api_server_public_access_enabled")

    @api_server_public_access_enabled.setter
    def api_server_public_access_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "api_server_public_access_enabled", value)

    @property
    @pulumi.getter(name="resourcePublicAccessDefaultEnabled")
    def resource_public_access_default_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Node public network access configuration, values:
        false: (default value). Do not enable public network access. Existing NAT gateways and rules are not affected. true: Enable public network access. After enabling, a NAT gateway is automatically created for the cluster's private network and corresponding rules are configured. Note: This parameter cannot be modified after the cluster is created. Please configure it reasonably.
        """
        return pulumi.get(self, "resource_public_access_default_enabled")

    @resource_public_access_default_enabled.setter
    def resource_public_access_default_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resource_public_access_default_enabled", value)


@pulumi.input_type
class ClusterClusterConfigApiServerPublicAccessConfigArgs:
    def __init__(__self__, *,
                 public_access_network_config: Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs']] = None):
        """
        :param pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs'] public_access_network_config: Public network access network configuration.
        """
        if public_access_network_config is not None:
            pulumi.set(__self__, "public_access_network_config", public_access_network_config)

    @property
    @pulumi.getter(name="publicAccessNetworkConfig")
    def public_access_network_config(self) -> Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs']]:
        """
        Public network access network configuration.
        """
        return pulumi.get(self, "public_access_network_config")

    @public_access_network_config.setter
    def public_access_network_config(self, value: Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs']]):
        pulumi.set(self, "public_access_network_config", value)


@pulumi.input_type
class ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 billing_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] bandwidth: The peak bandwidth of the public IP, unit: Mbps.
        :param pulumi.Input[str] billing_type: Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if billing_type is not None:
            pulumi.set(__self__, "billing_type", billing_type)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The peak bandwidth of the public IP, unit: Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> Optional[pulumi.Input[str]]:
        """
        Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        return pulumi.get(self, "billing_type")

    @billing_type.setter
    def billing_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "billing_type", value)


@pulumi.input_type
class ClusterLoggingConfigArgs:
    def __init__(__self__, *,
                 log_project_id: Optional[pulumi.Input[str]] = None,
                 log_setups: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLoggingConfigLogSetupArgs']]]] = None):
        """
        :param pulumi.Input[str] log_project_id: The TLS log item ID of the collection target.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterLoggingConfigLogSetupArgs']]] log_setups: Cluster logging options. This structure can only be modified and added, and cannot be deleted. When encountering a `cannot be deleted` error, please query the log setups of the current cluster and fill in the current `tf` file.
        """
        if log_project_id is not None:
            pulumi.set(__self__, "log_project_id", log_project_id)
        if log_setups is not None:
            pulumi.set(__self__, "log_setups", log_setups)

    @property
    @pulumi.getter(name="logProjectId")
    def log_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The TLS log item ID of the collection target.
        """
        return pulumi.get(self, "log_project_id")

    @log_project_id.setter
    def log_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_project_id", value)

    @property
    @pulumi.getter(name="logSetups")
    def log_setups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLoggingConfigLogSetupArgs']]]]:
        """
        Cluster logging options. This structure can only be modified and added, and cannot be deleted. When encountering a `cannot be deleted` error, please query the log setups of the current cluster and fill in the current `tf` file.
        """
        return pulumi.get(self, "log_setups")

    @log_setups.setter
    def log_setups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLoggingConfigLogSetupArgs']]]]):
        pulumi.set(self, "log_setups", value)


@pulumi.input_type
class ClusterLoggingConfigLogSetupArgs:
    def __init__(__self__, *,
                 log_type: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_ttl: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] log_type: The current types of logs that can be enabled are:
               Audit: Cluster audit logs.
               KubeApiServer: kube-apiserver component logs.
               KubeScheduler: kube-scheduler component logs.
               KubeControllerManager: kube-controller-manager component logs.
        :param pulumi.Input[bool] enabled: Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.
        :param pulumi.Input[int] log_ttl: The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.
        """
        pulumi.set(__self__, "log_type", log_type)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_ttl is not None:
            pulumi.set(__self__, "log_ttl", log_ttl)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        """
        The current types of logs that can be enabled are:
        Audit: Cluster audit logs.
        KubeApiServer: kube-apiserver component logs.
        KubeScheduler: kube-scheduler component logs.
        KubeControllerManager: kube-controller-manager component logs.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logTtl")
    def log_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.
        """
        return pulumi.get(self, "log_ttl")

    @log_ttl.setter
    def log_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_ttl", value)


@pulumi.input_type
class ClusterPodsConfigArgs:
    def __init__(__self__, *,
                 pod_network_mode: pulumi.Input[str],
                 flannel_config: Optional[pulumi.Input['ClusterPodsConfigFlannelConfigArgs']] = None,
                 vpc_cni_config: Optional[pulumi.Input['ClusterPodsConfigVpcCniConfigArgs']] = None):
        """
        :param pulumi.Input[str] pod_network_mode: Container network model, values: Flannel: Flannel network model, an independent Underlay container network solution. Combined with the global routing capability of a private network (VPC), it realizes a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution implemented based on the elastic network interface (ENI) of a private network, with high network communication performance. Description: After the cluster is created, this parameter is not supported to be modified temporarily. Please configure it reasonably.
        :param pulumi.Input['ClusterPodsConfigFlannelConfigArgs'] flannel_config: Flannel network configuration. It can be configured only when PodNetworkMode=Flannel, but it is not mandatory.
        :param pulumi.Input['ClusterPodsConfigVpcCniConfigArgs'] vpc_cni_config: VPC-CNI network configuration. PodNetworkMode=VpcCniShared, but it is not mandatory.
        """
        pulumi.set(__self__, "pod_network_mode", pod_network_mode)
        if flannel_config is not None:
            pulumi.set(__self__, "flannel_config", flannel_config)
        if vpc_cni_config is not None:
            pulumi.set(__self__, "vpc_cni_config", vpc_cni_config)

    @property
    @pulumi.getter(name="podNetworkMode")
    def pod_network_mode(self) -> pulumi.Input[str]:
        """
        Container network model, values: Flannel: Flannel network model, an independent Underlay container network solution. Combined with the global routing capability of a private network (VPC), it realizes a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution implemented based on the elastic network interface (ENI) of a private network, with high network communication performance. Description: After the cluster is created, this parameter is not supported to be modified temporarily. Please configure it reasonably.
        """
        return pulumi.get(self, "pod_network_mode")

    @pod_network_mode.setter
    def pod_network_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "pod_network_mode", value)

    @property
    @pulumi.getter(name="flannelConfig")
    def flannel_config(self) -> Optional[pulumi.Input['ClusterPodsConfigFlannelConfigArgs']]:
        """
        Flannel network configuration. It can be configured only when PodNetworkMode=Flannel, but it is not mandatory.
        """
        return pulumi.get(self, "flannel_config")

    @flannel_config.setter
    def flannel_config(self, value: Optional[pulumi.Input['ClusterPodsConfigFlannelConfigArgs']]):
        pulumi.set(self, "flannel_config", value)

    @property
    @pulumi.getter(name="vpcCniConfig")
    def vpc_cni_config(self) -> Optional[pulumi.Input['ClusterPodsConfigVpcCniConfigArgs']]:
        """
        VPC-CNI network configuration. PodNetworkMode=VpcCniShared, but it is not mandatory.
        """
        return pulumi.get(self, "vpc_cni_config")

    @vpc_cni_config.setter
    def vpc_cni_config(self, value: Optional[pulumi.Input['ClusterPodsConfigVpcCniConfigArgs']]):
        pulumi.set(self, "vpc_cni_config", value)


@pulumi.input_type
class ClusterPodsConfigFlannelConfigArgs:
    def __init__(__self__, *,
                 pod_cidrs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 max_pods_per_node: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pod_cidrs: Pod CIDR of Flannel model container network. Only configurable when PodNetworkMode=Flannel, but not mandatory. Note: The number of Pods in the cluster is limited by the number of IPs in this CIDR. This parameter cannot be modified after cluster creation. Please plan the Pod CIDR reasonably. Cannot conflict with the following network segments: private network network segments corresponding to ClusterConfig.SubnetIds. All clusters within the same private network's FlannelConfig.PodCidrs. All clusters within the same private network's ServiceConfig.ServiceCidrsv4. Different clusters within the same private network's FlannelConfig.PodCidrs cannot conflict.
        :param pulumi.Input[int] max_pods_per_node: Upper limit of the number of single-node Pod instances in the Flannel model container network. Values: 64(default value), 16, 32, 128, 256.
        """
        pulumi.set(__self__, "pod_cidrs", pod_cidrs)
        if max_pods_per_node is not None:
            pulumi.set(__self__, "max_pods_per_node", max_pods_per_node)

    @property
    @pulumi.getter(name="podCidrs")
    def pod_cidrs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Pod CIDR of Flannel model container network. Only configurable when PodNetworkMode=Flannel, but not mandatory. Note: The number of Pods in the cluster is limited by the number of IPs in this CIDR. This parameter cannot be modified after cluster creation. Please plan the Pod CIDR reasonably. Cannot conflict with the following network segments: private network network segments corresponding to ClusterConfig.SubnetIds. All clusters within the same private network's FlannelConfig.PodCidrs. All clusters within the same private network's ServiceConfig.ServiceCidrsv4. Different clusters within the same private network's FlannelConfig.PodCidrs cannot conflict.
        """
        return pulumi.get(self, "pod_cidrs")

    @pod_cidrs.setter
    def pod_cidrs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "pod_cidrs", value)

    @property
    @pulumi.getter(name="maxPodsPerNode")
    def max_pods_per_node(self) -> Optional[pulumi.Input[int]]:
        """
        Upper limit of the number of single-node Pod instances in the Flannel model container network. Values: 64(default value), 16, 32, 128, 256.
        """
        return pulumi.get(self, "max_pods_per_node")

    @max_pods_per_node.setter
    def max_pods_per_node(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pods_per_node", value)


@pulumi.input_type
class ClusterPodsConfigVpcCniConfigArgs:
    def __init__(__self__, *,
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: A list of Pod subnet IDs for the VPC-CNI container network.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of Pod subnet IDs for the VPC-CNI container network.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)


@pulumi.input_type
class ClusterServicesConfigArgs:
    def __init__(__self__, *,
                 service_cidrsv4s: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_cidrsv4s: CIDR used by services within the cluster. It cannot conflict with the following network segments: FlannelConfig.PodCidrs. SubnetIds of all clusters within the same private network or FlannelConfig.VpcConfig.SubnetIds. ServiceConfig.ServiceCidrsv4 of all clusters within the same private network (this parameter).It is stated that currently only one array element is supported. When multiple values are specified, only the first value takes effect.
        """
        pulumi.set(__self__, "service_cidrsv4s", service_cidrsv4s)

    @property
    @pulumi.getter(name="serviceCidrsv4s")
    def service_cidrsv4s(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        CIDR used by services within the cluster. It cannot conflict with the following network segments: FlannelConfig.PodCidrs. SubnetIds of all clusters within the same private network or FlannelConfig.VpcConfig.SubnetIds. ServiceConfig.ServiceCidrsv4 of all clusters within the same private network (this parameter).It is stated that currently only one array element is supported. When multiple values are specified, only the first value takes effect.
        """
        return pulumi.get(self, "service_cidrsv4s")

    @service_cidrsv4s.setter
    def service_cidrsv4s(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "service_cidrsv4s", value)


@pulumi.input_type
class ClustersStatusArgs:
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
        :param str phase: The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
        """
        return pulumi.get(self, "conditions_type")

    @conditions_type.setter
    def conditions_type(self, value: Optional[str]):
        pulumi.set(self, "conditions_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class EdgeNodeAutoCompleteConfigArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[bool],
                 address: Optional[pulumi.Input[str]] = None,
                 direct_add: Optional[pulumi.Input[bool]] = None,
                 direct_add_instances: Optional[pulumi.Input[Sequence[pulumi.Input['EdgeNodeAutoCompleteConfigDirectAddInstanceArgs']]]] = None,
                 machine_auth: Optional[pulumi.Input['EdgeNodeAutoCompleteConfigMachineAuthArgs']] = None):
        """
        :param pulumi.Input[bool] enable: Enable/Disable automatic management.
        :param pulumi.Input[str] address: The address of the machine to be managed.
        :param pulumi.Input[bool] direct_add: Directly managed through the edge computing instance ID. When it is true, there is no need to provide Address. Only DirectAddInstances needs to be provided.
        :param pulumi.Input[Sequence[pulumi.Input['EdgeNodeAutoCompleteConfigDirectAddInstanceArgs']]] direct_add_instances: Edge computing instance ID on Volcano Engine.
        :param pulumi.Input['EdgeNodeAutoCompleteConfigMachineAuthArgs'] machine_auth: Login credentials.
        """
        pulumi.set(__self__, "enable", enable)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if direct_add is not None:
            pulumi.set(__self__, "direct_add", direct_add)
        if direct_add_instances is not None:
            pulumi.set(__self__, "direct_add_instances", direct_add_instances)
        if machine_auth is not None:
            pulumi.set(__self__, "machine_auth", machine_auth)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[bool]:
        """
        Enable/Disable automatic management.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        The address of the machine to be managed.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="directAdd")
    def direct_add(self) -> Optional[pulumi.Input[bool]]:
        """
        Directly managed through the edge computing instance ID. When it is true, there is no need to provide Address. Only DirectAddInstances needs to be provided.
        """
        return pulumi.get(self, "direct_add")

    @direct_add.setter
    def direct_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "direct_add", value)

    @property
    @pulumi.getter(name="directAddInstances")
    def direct_add_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EdgeNodeAutoCompleteConfigDirectAddInstanceArgs']]]]:
        """
        Edge computing instance ID on Volcano Engine.
        """
        return pulumi.get(self, "direct_add_instances")

    @direct_add_instances.setter
    def direct_add_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EdgeNodeAutoCompleteConfigDirectAddInstanceArgs']]]]):
        pulumi.set(self, "direct_add_instances", value)

    @property
    @pulumi.getter(name="machineAuth")
    def machine_auth(self) -> Optional[pulumi.Input['EdgeNodeAutoCompleteConfigMachineAuthArgs']]:
        """
        Login credentials.
        """
        return pulumi.get(self, "machine_auth")

    @machine_auth.setter
    def machine_auth(self, value: Optional[pulumi.Input['EdgeNodeAutoCompleteConfigMachineAuthArgs']]):
        pulumi.set(self, "machine_auth", value)


@pulumi.input_type
class EdgeNodeAutoCompleteConfigDirectAddInstanceArgs:
    def __init__(__self__, *,
                 cloud_server_identity: pulumi.Input[str],
                 instance_identity: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cloud_server_identity: Edge service ID.
        :param pulumi.Input[str] instance_identity: Edge computing instance ID.
        """
        pulumi.set(__self__, "cloud_server_identity", cloud_server_identity)
        pulumi.set(__self__, "instance_identity", instance_identity)

    @property
    @pulumi.getter(name="cloudServerIdentity")
    def cloud_server_identity(self) -> pulumi.Input[str]:
        """
        Edge service ID.
        """
        return pulumi.get(self, "cloud_server_identity")

    @cloud_server_identity.setter
    def cloud_server_identity(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_server_identity", value)

    @property
    @pulumi.getter(name="instanceIdentity")
    def instance_identity(self) -> pulumi.Input[str]:
        """
        Edge computing instance ID.
        """
        return pulumi.get(self, "instance_identity")

    @instance_identity.setter
    def instance_identity(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_identity", value)


@pulumi.input_type
class EdgeNodeAutoCompleteConfigMachineAuthArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 ssh_port: pulumi.Input[int],
                 user: pulumi.Input[str]):
        """
        :param pulumi.Input[str] auth_type: Authentication method. Currently only Password is open.
        :param pulumi.Input[int] ssh_port: SSH port, default 22.
        :param pulumi.Input[str] user: Login username.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "ssh_port", ssh_port)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        """
        Authentication method. Currently only Password is open.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> pulumi.Input[int]:
        """
        SSH port, default 22.
        """
        return pulumi.get(self, "ssh_port")

    @ssh_port.setter
    def ssh_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "ssh_port", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        Login username.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class EdgeNodePoolBillingConfigsArgs:
    def __init__(__self__, *,
                 pre_paid_period: pulumi.Input[int],
                 pre_paid_period_number: pulumi.Input[int],
                 auto_renew: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] pre_paid_period: The pre-paid period of the node pool, in months. The value range is 1-9. This parameter takes effect only when the billing_type is PrePaid.
        :param pulumi.Input[int] pre_paid_period_number: Prepaid period number.
        :param pulumi.Input[bool] auto_renew: Whether to automatically renew the node pool.
        """
        pulumi.set(__self__, "pre_paid_period", pre_paid_period)
        pulumi.set(__self__, "pre_paid_period_number", pre_paid_period_number)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)

    @property
    @pulumi.getter(name="prePaidPeriod")
    def pre_paid_period(self) -> pulumi.Input[int]:
        """
        The pre-paid period of the node pool, in months. The value range is 1-9. This parameter takes effect only when the billing_type is PrePaid.
        """
        return pulumi.get(self, "pre_paid_period")

    @pre_paid_period.setter
    def pre_paid_period(self, value: pulumi.Input[int]):
        pulumi.set(self, "pre_paid_period", value)

    @property
    @pulumi.getter(name="prePaidPeriodNumber")
    def pre_paid_period_number(self) -> pulumi.Input[int]:
        """
        Prepaid period number.
        """
        return pulumi.get(self, "pre_paid_period_number")

    @pre_paid_period_number.setter
    def pre_paid_period_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "pre_paid_period_number", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically renew the node pool.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)


@pulumi.input_type
class EdgeNodePoolElasticConfigArgs:
    def __init__(__self__, *,
                 cloud_server_identity: pulumi.Input[str],
                 auto_scale_config: Optional[pulumi.Input['EdgeNodePoolElasticConfigAutoScaleConfigArgs']] = None,
                 instance_area: Optional[pulumi.Input['EdgeNodePoolElasticConfigInstanceAreaArgs']] = None):
        """
        :param pulumi.Input[str] cloud_server_identity: The ID of the edge service corresponding to the elastic node. On the edge computing node's edge service page, obtain the edge service ID.
        :param pulumi.Input['EdgeNodePoolElasticConfigAutoScaleConfigArgs'] auto_scale_config: The node pool elastic scaling configuration information.
        """
        pulumi.set(__self__, "cloud_server_identity", cloud_server_identity)
        if auto_scale_config is not None:
            pulumi.set(__self__, "auto_scale_config", auto_scale_config)
        if instance_area is not None:
            pulumi.set(__self__, "instance_area", instance_area)

    @property
    @pulumi.getter(name="cloudServerIdentity")
    def cloud_server_identity(self) -> pulumi.Input[str]:
        """
        The ID of the edge service corresponding to the elastic node. On the edge computing node's edge service page, obtain the edge service ID.
        """
        return pulumi.get(self, "cloud_server_identity")

    @cloud_server_identity.setter
    def cloud_server_identity(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_server_identity", value)

    @property
    @pulumi.getter(name="autoScaleConfig")
    def auto_scale_config(self) -> Optional[pulumi.Input['EdgeNodePoolElasticConfigAutoScaleConfigArgs']]:
        """
        The node pool elastic scaling configuration information.
        """
        return pulumi.get(self, "auto_scale_config")

    @auto_scale_config.setter
    def auto_scale_config(self, value: Optional[pulumi.Input['EdgeNodePoolElasticConfigAutoScaleConfigArgs']]):
        pulumi.set(self, "auto_scale_config", value)

    @property
    @pulumi.getter(name="instanceArea")
    def instance_area(self) -> Optional[pulumi.Input['EdgeNodePoolElasticConfigInstanceAreaArgs']]:
        return pulumi.get(self, "instance_area")

    @instance_area.setter
    def instance_area(self, value: Optional[pulumi.Input['EdgeNodePoolElasticConfigInstanceAreaArgs']]):
        pulumi.set(self, "instance_area", value)


@pulumi.input_type
class EdgeNodePoolElasticConfigAutoScaleConfigArgs:
    def __init__(__self__, *,
                 desired_replicas: pulumi.Input[int],
                 enabled: pulumi.Input[bool],
                 max_replicas: pulumi.Input[int],
                 min_replicas: pulumi.Input[int],
                 priority: pulumi.Input[int]):
        """
        :param pulumi.Input[int] desired_replicas: The DesiredReplicas of AutoScaling, default 0, range in min_replicas to max_replicas.
        :param pulumi.Input[bool] enabled: Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
        :param pulumi.Input[int] max_replicas: The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
        :param pulumi.Input[int] min_replicas: The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
        :param pulumi.Input[int] priority: The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnet_policy` is `Priority`.
        """
        pulumi.set(__self__, "desired_replicas", desired_replicas)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> pulumi.Input[int]:
        """
        The DesiredReplicas of AutoScaling, default 0, range in min_replicas to max_replicas.
        """
        return pulumi.get(self, "desired_replicas")

    @desired_replicas.setter
    def desired_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "desired_replicas", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[int]:
        """
        The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Input[int]:
        """
        The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnet_policy` is `Priority`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class EdgeNodePoolElasticConfigInstanceAreaArgs:
    def __init__(__self__, *,
                 area_name: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 default_isp: Optional[pulumi.Input[str]] = None,
                 external_network_mode: Optional[pulumi.Input[str]] = None,
                 isp: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_identity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] area_name: Region name. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        :param pulumi.Input[str] cluster_name: The cluster name.
        :param pulumi.Input[str] default_isp: Default operator. When using three-line nodes, this parameter can be configured. After configuration, this operator will be used as the default export.
        :param pulumi.Input[str] external_network_mode: Public network configuration of three-line nodes. If it is a single-line node, this parameter will be ignored. Value range: single_interface_multi_ip: Single network card with multiple IPs. single_interface_cmcc_ip: Single network card with China Mobile IP. Relevant permissions need to be opened by submitting a work order. single_interface_cucc_ip: Single network card with China Unicom IP. Relevant permissions need to be opened by submitting a work order. single_interface_ctcc_ip: Single network card with China Telecom IP. Relevant permissions need to be opened by submitting a work order. multi_interface_multi_ip: Multiple network cards with multiple IPs. Relevant permissions need to be opened by submitting a work order. no_interface: No public network network card. Relevant permissions need to be opened by submitting a work order. If this parameter is not configured: When there is a public network network card, single_interface_multi_ip is used by default. When there is no public network network card, no_interface is used by default.
        :param pulumi.Input[str] isp: Operator. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        :param pulumi.Input[str] subnet_id: The subnet id.
        :param pulumi.Input[str] vpc_identity: The vpc id.
        """
        if area_name is not None:
            pulumi.set(__self__, "area_name", area_name)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if default_isp is not None:
            pulumi.set(__self__, "default_isp", default_isp)
        if external_network_mode is not None:
            pulumi.set(__self__, "external_network_mode", external_network_mode)
        if isp is not None:
            pulumi.set(__self__, "isp", isp)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_identity is not None:
            pulumi.set(__self__, "vpc_identity", vpc_identity)

    @property
    @pulumi.getter(name="areaName")
    def area_name(self) -> Optional[pulumi.Input[str]]:
        """
        Region name. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        """
        return pulumi.get(self, "area_name")

    @area_name.setter
    def area_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area_name", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="defaultIsp")
    def default_isp(self) -> Optional[pulumi.Input[str]]:
        """
        Default operator. When using three-line nodes, this parameter can be configured. After configuration, this operator will be used as the default export.
        """
        return pulumi.get(self, "default_isp")

    @default_isp.setter
    def default_isp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_isp", value)

    @property
    @pulumi.getter(name="externalNetworkMode")
    def external_network_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Public network configuration of three-line nodes. If it is a single-line node, this parameter will be ignored. Value range: single_interface_multi_ip: Single network card with multiple IPs. single_interface_cmcc_ip: Single network card with China Mobile IP. Relevant permissions need to be opened by submitting a work order. single_interface_cucc_ip: Single network card with China Unicom IP. Relevant permissions need to be opened by submitting a work order. single_interface_ctcc_ip: Single network card with China Telecom IP. Relevant permissions need to be opened by submitting a work order. multi_interface_multi_ip: Multiple network cards with multiple IPs. Relevant permissions need to be opened by submitting a work order. no_interface: No public network network card. Relevant permissions need to be opened by submitting a work order. If this parameter is not configured: When there is a public network network card, single_interface_multi_ip is used by default. When there is no public network network card, no_interface is used by default.
        """
        return pulumi.get(self, "external_network_mode")

    @external_network_mode.setter
    def external_network_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network_mode", value)

    @property
    @pulumi.getter
    def isp(self) -> Optional[pulumi.Input[str]]:
        """
        Operator. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        """
        return pulumi.get(self, "isp")

    @isp.setter
    def isp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isp", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcIdentity")
    def vpc_identity(self) -> Optional[pulumi.Input[str]]:
        """
        The vpc id.
        """
        return pulumi.get(self, "vpc_identity")

    @vpc_identity.setter
    def vpc_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_identity", value)


@pulumi.input_type
class EdgeNodePoolKubernetesConfigArgs:
    def __init__(__self__, *,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['EdgeNodePoolKubernetesConfigLabelArgs']]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['EdgeNodePoolKubernetesConfigTaintArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EdgeNodePoolKubernetesConfigLabelArgs']]] labels: The Labels of KubernetesConfig.
        :param pulumi.Input[Sequence[pulumi.Input['EdgeNodePoolKubernetesConfigTaintArgs']]] taints: The Taints of KubernetesConfig.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EdgeNodePoolKubernetesConfigLabelArgs']]]]:
        """
        The Labels of KubernetesConfig.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EdgeNodePoolKubernetesConfigLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EdgeNodePoolKubernetesConfigTaintArgs']]]]:
        """
        The Taints of KubernetesConfig.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EdgeNodePoolKubernetesConfigTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class EdgeNodePoolKubernetesConfigLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The Key of Labels.
        :param pulumi.Input[str] value: The Value of Labels.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The Key of Labels.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The Value of Labels.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EdgeNodePoolKubernetesConfigTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
        :param pulumi.Input[str] key: The Key of Taints.
        :param pulumi.Input[str] value: The Value of Taints.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The Key of Taints.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The Value of Taints.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EdgeNodePoolsStatusArgs:
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "conditions_type")

    @conditions_type.setter
    def conditions_type(self, value: Optional[str]):
        pulumi.set(self, "conditions_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class EdgeNodesStatusArgs:
    def __init__(__self__, *,
                 edge_node_status_condition_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str edge_node_status_condition_type: The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        :param str phase: The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
        """
        if edge_node_status_condition_type is not None:
            pulumi.set(__self__, "edge_node_status_condition_type", edge_node_status_condition_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="edgeNodeStatusConditionType")
    def edge_node_status_condition_type(self) -> Optional[str]:
        """
        The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        """
        return pulumi.get(self, "edge_node_status_condition_type")

    @edge_node_status_condition_type.setter
    def edge_node_status_condition_type(self, value: Optional[str]):
        pulumi.set(self, "edge_node_status_condition_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class NodePoolAutoScalingArgs:
    def __init__(__self__, *,
                 desired_replicas: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 subnet_policy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] desired_replicas: The DesiredReplicas of AutoScaling, default 0, range in min_replicas to max_replicas.
        :param pulumi.Input[bool] enabled: Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
        :param pulumi.Input[int] max_replicas: The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
        :param pulumi.Input[int] min_replicas: The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
        :param pulumi.Input[int] priority: The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnet_policy` is `Priority`.
        :param pulumi.Input[str] subnet_policy: Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
        """
        if desired_replicas is not None:
            pulumi.set(__self__, "desired_replicas", desired_replicas)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if subnet_policy is not None:
            pulumi.set(__self__, "subnet_policy", subnet_policy)

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        The DesiredReplicas of AutoScaling, default 0, range in min_replicas to max_replicas.
        """
        return pulumi.get(self, "desired_replicas")

    @desired_replicas.setter
    def desired_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_replicas", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnet_policy` is `Priority`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="subnetPolicy")
    def subnet_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
        """
        return pulumi.get(self, "subnet_policy")

    @subnet_policy.setter
    def subnet_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_policy", value)


@pulumi.input_type
class NodePoolKubernetesConfigArgs:
    def __init__(__self__, *,
                 cordon: pulumi.Input[bool],
                 auto_sync_disabled: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigLabelArgs']]]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigTaintArgs']]]] = None):
        """
        :param pulumi.Input[bool] cordon: The Cordon of KubernetesConfig.
        :param pulumi.Input[bool] auto_sync_disabled: Whether to disable the function of automatically synchronizing labels and taints to existing nodes. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigLabelArgs']]] labels: The Labels of KubernetesConfig.
        :param pulumi.Input[str] name_prefix: The NamePrefix of node metadata.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigTaintArgs']]] taints: The Taints of KubernetesConfig.
        """
        pulumi.set(__self__, "cordon", cordon)
        if auto_sync_disabled is not None:
            pulumi.set(__self__, "auto_sync_disabled", auto_sync_disabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def cordon(self) -> pulumi.Input[bool]:
        """
        The Cordon of KubernetesConfig.
        """
        return pulumi.get(self, "cordon")

    @cordon.setter
    def cordon(self, value: pulumi.Input[bool]):
        pulumi.set(self, "cordon", value)

    @property
    @pulumi.getter(name="autoSyncDisabled")
    def auto_sync_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to disable the function of automatically synchronizing labels and taints to existing nodes. Default is false.
        """
        return pulumi.get(self, "auto_sync_disabled")

    @auto_sync_disabled.setter
    def auto_sync_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_sync_disabled", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigLabelArgs']]]]:
        """
        The Labels of KubernetesConfig.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The NamePrefix of node metadata.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigTaintArgs']]]]:
        """
        The Taints of KubernetesConfig.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class NodePoolKubernetesConfigLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The Key of Labels.
        :param pulumi.Input[str] value: The Value of Labels.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The Key of Labels.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The Value of Labels.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NodePoolKubernetesConfigTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
        :param pulumi.Input[str] key: The Key of Taints.
        :param pulumi.Input[str] value: The Value of Taints.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The Key of Taints.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The Value of Taints.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NodePoolNodeConfigArgs:
    def __init__(__self__, *,
                 instance_type_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 security: pulumi.Input['NodePoolNodeConfigSecurityArgs'],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 additional_container_storage_enabled: Optional[pulumi.Input[bool]] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 auto_renew_period: Optional[pulumi.Input[int]] = None,
                 data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataVolumeArgs']]]] = None,
                 ecs_tags: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigEcsTagArgs']]]] = None,
                 hpc_cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 initialize_script: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 system_volume: Optional[pulumi.Input['NodePoolNodeConfigSystemVolumeArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_type_ids: The InstanceTypeIds of NodeConfig. The value can get from veecp_get_support_resource_types datasource.
        :param pulumi.Input['NodePoolNodeConfigSecurityArgs'] security: The Security of NodeConfig.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The SubnetIds of NodeConfig.
        :param pulumi.Input[bool] additional_container_storage_enabled: The AdditionalContainerStorageEnabled of NodeConfig.
        :param pulumi.Input[bool] auto_renew: Is AutoRenew of PrePaid instance of NodeConfig. Valid values: true, false. when InstanceChargeType is PrePaid, default value is true.
        :param pulumi.Input[int] auto_renew_period: The AutoRenewPeriod of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 6, 12. Unit: month. when InstanceChargeType is PrePaid and AutoRenew enable, default value is 1.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataVolumeArgs']]] data_volumes: The DataVolumes of NodeConfig.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigEcsTagArgs']]] ecs_tags: Tags for Ecs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hpc_cluster_ids: The IDs of HpcCluster, only one ID is supported currently.
        :param pulumi.Input[str] image_id: The ImageId of NodeConfig.
        :param pulumi.Input[str] initialize_script: The initializeScript of NodeConfig.
        :param pulumi.Input[str] instance_charge_type: The InstanceChargeType of PrePaid instance of NodeConfig. Valid values: PostPaid, PrePaid. Default value: PostPaid.
        :param pulumi.Input[str] name_prefix: The NamePrefix of NodeConfig.
        :param pulumi.Input[int] period: The Period of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36. Unit: month. when InstanceChargeType is PrePaid, default value is 12.
        :param pulumi.Input['NodePoolNodeConfigSystemVolumeArgs'] system_volume: The SystemVolume of NodeConfig.
        """
        pulumi.set(__self__, "instance_type_ids", instance_type_ids)
        pulumi.set(__self__, "security", security)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if additional_container_storage_enabled is not None:
            pulumi.set(__self__, "additional_container_storage_enabled", additional_container_storage_enabled)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if auto_renew_period is not None:
            pulumi.set(__self__, "auto_renew_period", auto_renew_period)
        if data_volumes is not None:
            pulumi.set(__self__, "data_volumes", data_volumes)
        if ecs_tags is not None:
            pulumi.set(__self__, "ecs_tags", ecs_tags)
        if hpc_cluster_ids is not None:
            pulumi.set(__self__, "hpc_cluster_ids", hpc_cluster_ids)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if initialize_script is not None:
            pulumi.set(__self__, "initialize_script", initialize_script)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if system_volume is not None:
            pulumi.set(__self__, "system_volume", system_volume)

    @property
    @pulumi.getter(name="instanceTypeIds")
    def instance_type_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The InstanceTypeIds of NodeConfig. The value can get from veecp_get_support_resource_types datasource.
        """
        return pulumi.get(self, "instance_type_ids")

    @instance_type_ids.setter
    def instance_type_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "instance_type_ids", value)

    @property
    @pulumi.getter
    def security(self) -> pulumi.Input['NodePoolNodeConfigSecurityArgs']:
        """
        The Security of NodeConfig.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: pulumi.Input['NodePoolNodeConfigSecurityArgs']):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The SubnetIds of NodeConfig.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="additionalContainerStorageEnabled")
    def additional_container_storage_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The AdditionalContainerStorageEnabled of NodeConfig.
        """
        return pulumi.get(self, "additional_container_storage_enabled")

    @additional_container_storage_enabled.setter
    def additional_container_storage_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "additional_container_storage_enabled", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        Is AutoRenew of PrePaid instance of NodeConfig. Valid values: true, false. when InstanceChargeType is PrePaid, default value is true.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="autoRenewPeriod")
    def auto_renew_period(self) -> Optional[pulumi.Input[int]]:
        """
        The AutoRenewPeriod of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 6, 12. Unit: month. when InstanceChargeType is PrePaid and AutoRenew enable, default value is 1.
        """
        return pulumi.get(self, "auto_renew_period")

    @auto_renew_period.setter
    def auto_renew_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_period", value)

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataVolumeArgs']]]]:
        """
        The DataVolumes of NodeConfig.
        """
        return pulumi.get(self, "data_volumes")

    @data_volumes.setter
    def data_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataVolumeArgs']]]]):
        pulumi.set(self, "data_volumes", value)

    @property
    @pulumi.getter(name="ecsTags")
    def ecs_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigEcsTagArgs']]]]:
        """
        Tags for Ecs.
        """
        return pulumi.get(self, "ecs_tags")

    @ecs_tags.setter
    def ecs_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigEcsTagArgs']]]]):
        pulumi.set(self, "ecs_tags", value)

    @property
    @pulumi.getter(name="hpcClusterIds")
    def hpc_cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of HpcCluster, only one ID is supported currently.
        """
        return pulumi.get(self, "hpc_cluster_ids")

    @hpc_cluster_ids.setter
    def hpc_cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hpc_cluster_ids", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ImageId of NodeConfig.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="initializeScript")
    def initialize_script(self) -> Optional[pulumi.Input[str]]:
        """
        The initializeScript of NodeConfig.
        """
        return pulumi.get(self, "initialize_script")

    @initialize_script.setter
    def initialize_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initialize_script", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The InstanceChargeType of PrePaid instance of NodeConfig. Valid values: PostPaid, PrePaid. Default value: PostPaid.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The NamePrefix of NodeConfig.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The Period of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36. Unit: month. when InstanceChargeType is PrePaid, default value is 12.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="systemVolume")
    def system_volume(self) -> Optional[pulumi.Input['NodePoolNodeConfigSystemVolumeArgs']]:
        """
        The SystemVolume of NodeConfig.
        """
        return pulumi.get(self, "system_volume")

    @system_volume.setter
    def system_volume(self, value: Optional[pulumi.Input['NodePoolNodeConfigSystemVolumeArgs']]):
        pulumi.set(self, "system_volume", value)


@pulumi.input_type
class NodePoolNodeConfigDataVolumeArgs:
    def __init__(__self__, *,
                 mount_point: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mount_point: The target mount directory of the disk. Must start with `/`.
        :param pulumi.Input[int] size: The Size of DataVolumes, the value range in 20~32768. Default value is `20`.
        :param pulumi.Input[str] type: The Type of DataVolumes, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`. Default value is `ESSD_PL0`.
        """
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[pulumi.Input[str]]:
        """
        The target mount directory of the disk. Must start with `/`.
        """
        return pulumi.get(self, "mount_point")

    @mount_point.setter
    def mount_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_point", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The Size of DataVolumes, the value range in 20~32768. Default value is `20`.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The Type of DataVolumes, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`. Default value is `ESSD_PL0`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NodePoolNodeConfigEcsTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The Key of Tags.
        :param pulumi.Input[str] value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NodePoolNodeConfigSecurityArgs:
    def __init__(__self__, *,
                 login: Optional[pulumi.Input['NodePoolNodeConfigSecurityLoginArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_strategies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['NodePoolNodeConfigSecurityLoginArgs'] login: The Login of Security.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The SecurityGroupIds of Security.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_strategies: The SecurityStrategies of Security, the value can be empty or `Hids`.
        """
        if login is not None:
            pulumi.set(__self__, "login", login)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_strategies is not None:
            pulumi.set(__self__, "security_strategies", security_strategies)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input['NodePoolNodeConfigSecurityLoginArgs']]:
        """
        The Login of Security.
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input['NodePoolNodeConfigSecurityLoginArgs']]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The SecurityGroupIds of Security.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="securityStrategies")
    def security_strategies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The SecurityStrategies of Security, the value can be empty or `Hids`.
        """
        return pulumi.get(self, "security_strategies")

    @security_strategies.setter
    def security_strategies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_strategies", value)


@pulumi.input_type
class NodePoolNodeConfigSecurityLoginArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_key_pair_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: The Password of Security, this field must be encoded with base64.
        :param pulumi.Input[str] ssh_key_pair_name: The SshKeyPairName of Security.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_key_pair_name is not None:
            pulumi.set(__self__, "ssh_key_pair_name", ssh_key_pair_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The Password of Security, this field must be encoded with base64.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sshKeyPairName")
    def ssh_key_pair_name(self) -> Optional[pulumi.Input[str]]:
        """
        The SshKeyPairName of Security.
        """
        return pulumi.get(self, "ssh_key_pair_name")

    @ssh_key_pair_name.setter
    def ssh_key_pair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_pair_name", value)


@pulumi.input_type
class NodePoolNodeConfigSystemVolumeArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] size: The Size of SystemVolume, the value range in 20~2048.
        :param pulumi.Input[str] type: The Type of SystemVolume, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The Size of SystemVolume, the value range in 20~2048.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The Type of SystemVolume, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NodePoolNodeStatisticArgs:
    def __init__(__self__, *,
                 creating_count: Optional[pulumi.Input[int]] = None,
                 deleting_count: Optional[pulumi.Input[int]] = None,
                 failed_count: Optional[pulumi.Input[int]] = None,
                 running_count: Optional[pulumi.Input[int]] = None,
                 starting_count: Optional[pulumi.Input[int]] = None,
                 stopped_count: Optional[pulumi.Input[int]] = None,
                 stopping_count: Optional[pulumi.Input[int]] = None,
                 total_count: Optional[pulumi.Input[int]] = None,
                 updating_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] creating_count: The CreatingCount of Node.
        :param pulumi.Input[int] deleting_count: The DeletingCount of Node.
        :param pulumi.Input[int] failed_count: The FailedCount of Node.
        :param pulumi.Input[int] running_count: The RunningCount of Node.
        :param pulumi.Input[int] starting_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        :param pulumi.Input[int] stopped_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        :param pulumi.Input[int] stopping_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        :param pulumi.Input[int] total_count: The TotalCount of Node.
        :param pulumi.Input[int] updating_count: The UpdatingCount of Node.
        """
        if creating_count is not None:
            pulumi.set(__self__, "creating_count", creating_count)
        if deleting_count is not None:
            pulumi.set(__self__, "deleting_count", deleting_count)
        if failed_count is not None:
            pulumi.set(__self__, "failed_count", failed_count)
        if running_count is not None:
            pulumi.set(__self__, "running_count", running_count)
        if starting_count is not None:
            warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
            pulumi.log.warn("""starting_count is deprecated: This field has been deprecated and is not recommended for use.""")
        if starting_count is not None:
            pulumi.set(__self__, "starting_count", starting_count)
        if stopped_count is not None:
            warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
            pulumi.log.warn("""stopped_count is deprecated: This field has been deprecated and is not recommended for use.""")
        if stopped_count is not None:
            pulumi.set(__self__, "stopped_count", stopped_count)
        if stopping_count is not None:
            warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
            pulumi.log.warn("""stopping_count is deprecated: This field has been deprecated and is not recommended for use.""")
        if stopping_count is not None:
            pulumi.set(__self__, "stopping_count", stopping_count)
        if total_count is not None:
            pulumi.set(__self__, "total_count", total_count)
        if updating_count is not None:
            pulumi.set(__self__, "updating_count", updating_count)

    @property
    @pulumi.getter(name="creatingCount")
    def creating_count(self) -> Optional[pulumi.Input[int]]:
        """
        The CreatingCount of Node.
        """
        return pulumi.get(self, "creating_count")

    @creating_count.setter
    def creating_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creating_count", value)

    @property
    @pulumi.getter(name="deletingCount")
    def deleting_count(self) -> Optional[pulumi.Input[int]]:
        """
        The DeletingCount of Node.
        """
        return pulumi.get(self, "deleting_count")

    @deleting_count.setter
    def deleting_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deleting_count", value)

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> Optional[pulumi.Input[int]]:
        """
        The FailedCount of Node.
        """
        return pulumi.get(self, "failed_count")

    @failed_count.setter
    def failed_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failed_count", value)

    @property
    @pulumi.getter(name="runningCount")
    def running_count(self) -> Optional[pulumi.Input[int]]:
        """
        The RunningCount of Node.
        """
        return pulumi.get(self, "running_count")

    @running_count.setter
    def running_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "running_count", value)

    @property
    @pulumi.getter(name="startingCount")
    def starting_count(self) -> Optional[pulumi.Input[int]]:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""starting_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "starting_count")

    @starting_count.setter
    def starting_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "starting_count", value)

    @property
    @pulumi.getter(name="stoppedCount")
    def stopped_count(self) -> Optional[pulumi.Input[int]]:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopped_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopped_count")

    @stopped_count.setter
    def stopped_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stopped_count", value)

    @property
    @pulumi.getter(name="stoppingCount")
    def stopping_count(self) -> Optional[pulumi.Input[int]]:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopping_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopping_count")

    @stopping_count.setter
    def stopping_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stopping_count", value)

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> Optional[pulumi.Input[int]]:
        """
        The TotalCount of Node.
        """
        return pulumi.get(self, "total_count")

    @total_count.setter
    def total_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_count", value)

    @property
    @pulumi.getter(name="updatingCount")
    def updating_count(self) -> Optional[pulumi.Input[int]]:
        """
        The UpdatingCount of Node.
        """
        return pulumi.get(self, "updating_count")

    @updating_count.setter
    def updating_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updating_count", value)


@pulumi.input_type
class NodePoolsStatusArgs:
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "conditions_type")

    @conditions_type.setter
    def conditions_type(self, value: Optional[str]):
        pulumi.set(self, "conditions_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class GetBatchEdgeMachinesStatusArgs:
    def __init__(__self__, *,
                 edge_node_status_condition_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str edge_node_status_condition_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if edge_node_status_condition_type is not None:
            pulumi.set(__self__, "edge_node_status_condition_type", edge_node_status_condition_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="edgeNodeStatusConditionType")
    def edge_node_status_condition_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "edge_node_status_condition_type")

    @edge_node_status_condition_type.setter
    def edge_node_status_condition_type(self, value: Optional[str]):
        pulumi.set(self, "edge_node_status_condition_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class GetClustersStatusArgs:
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
        :param str phase: The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
        """
        return pulumi.get(self, "conditions_type")

    @conditions_type.setter
    def conditions_type(self, value: Optional[str]):
        pulumi.set(self, "conditions_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class GetEdgeNodePoolsStatusArgs:
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "conditions_type")

    @conditions_type.setter
    def conditions_type(self, value: Optional[str]):
        pulumi.set(self, "conditions_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class GetEdgeNodesStatusArgs:
    def __init__(__self__, *,
                 edge_node_status_condition_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str edge_node_status_condition_type: The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        :param str phase: The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
        """
        if edge_node_status_condition_type is not None:
            pulumi.set(__self__, "edge_node_status_condition_type", edge_node_status_condition_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="edgeNodeStatusConditionType")
    def edge_node_status_condition_type(self) -> Optional[str]:
        """
        The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        """
        return pulumi.get(self, "edge_node_status_condition_type")

    @edge_node_status_condition_type.setter
    def edge_node_status_condition_type(self, value: Optional[str]):
        pulumi.set(self, "edge_node_status_condition_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class GetNodePoolsStatusArgs:
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "conditions_type")

    @conditions_type.setter
    def conditions_type(self, value: Optional[str]):
        pulumi.set(self, "conditions_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


