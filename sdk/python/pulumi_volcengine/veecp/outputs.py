# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AddonsAddonResult',
    'AddonsAddonVersionResult',
    'AddonsAddonVersionCompatibilityResult',
    'BatchEdgeMachinesMachineResult',
    'BatchEdgeMachinesStatusResult',
    'ClusterClusterConfig',
    'ClusterClusterConfigApiServerPublicAccessConfig',
    'ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig',
    'ClusterLoggingConfig',
    'ClusterLoggingConfigLogSetup',
    'ClusterPodsConfig',
    'ClusterPodsConfigFlannelConfig',
    'ClusterPodsConfigVpcCniConfig',
    'ClusterServicesConfig',
    'ClustersClusterResult',
    'ClustersClusterClusterConfigResult',
    'ClustersClusterClusterConfigApiServerEndpointsResult',
    'ClustersClusterClusterConfigApiServerEndpointsPrivateIpResult',
    'ClustersClusterClusterConfigApiServerEndpointsPublicIpResult',
    'ClustersClusterClusterConfigApiServerPublicAccessConfigResult',
    'ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult',
    'ClustersClusterLoggingConfigResult',
    'ClustersClusterLoggingConfigLogSetupResult',
    'ClustersClusterNodeStatisticsResult',
    'ClustersClusterPodsConfigResult',
    'ClustersClusterPodsConfigFlannelConfigResult',
    'ClustersClusterPodsConfigVpcCniConfigResult',
    'ClustersClusterServicesConfigResult',
    'ClustersClusterStatusResult',
    'ClustersClusterStatusConditionResult',
    'ClustersStatusResult',
    'EdgeNodeAutoCompleteConfig',
    'EdgeNodeAutoCompleteConfigDirectAddInstance',
    'EdgeNodeAutoCompleteConfigMachineAuth',
    'EdgeNodePoolBillingConfigs',
    'EdgeNodePoolElasticConfig',
    'EdgeNodePoolElasticConfigAutoScaleConfig',
    'EdgeNodePoolElasticConfigInstanceArea',
    'EdgeNodePoolKubernetesConfig',
    'EdgeNodePoolKubernetesConfigLabel',
    'EdgeNodePoolKubernetesConfigTaint',
    'EdgeNodePoolsNodePoolResult',
    'EdgeNodePoolsNodePoolBillingConfigResult',
    'EdgeNodePoolsNodePoolElasticConfigResult',
    'EdgeNodePoolsNodePoolElasticConfigAutoScaleConfigResult',
    'EdgeNodePoolsNodePoolElasticConfigInstanceAreaResult',
    'EdgeNodePoolsNodePoolLabelContentResult',
    'EdgeNodePoolsNodePoolNodeStatisticResult',
    'EdgeNodePoolsNodePoolTaintContentResult',
    'EdgeNodePoolsStatusResult',
    'EdgeNodesNodeResult',
    'EdgeNodesStatusResult',
    'NodePoolAutoScaling',
    'NodePoolKubernetesConfig',
    'NodePoolKubernetesConfigLabel',
    'NodePoolKubernetesConfigTaint',
    'NodePoolNodeConfig',
    'NodePoolNodeConfigDataVolume',
    'NodePoolNodeConfigEcsTag',
    'NodePoolNodeConfigSecurity',
    'NodePoolNodeConfigSecurityLogin',
    'NodePoolNodeConfigSystemVolume',
    'NodePoolNodeStatistic',
    'NodePoolsNodePoolResult',
    'NodePoolsNodePoolDataVolumeResult',
    'NodePoolsNodePoolEcsTagResult',
    'NodePoolsNodePoolLabelContentResult',
    'NodePoolsNodePoolNodeStatisticResult',
    'NodePoolsNodePoolSystemVolumeResult',
    'NodePoolsNodePoolTagResult',
    'NodePoolsNodePoolTaintContentResult',
    'NodePoolsStatusResult',
    'SupportAddonsAddonResult',
    'SupportAddonsAddonVersionResult',
    'SupportAddonsAddonVersionCompatibilityResult',
    'SupportResourceTypesResourceResult',
    'GetAddonsAddonResult',
    'GetAddonsAddonVersionResult',
    'GetAddonsAddonVersionCompatibilityResult',
    'GetBatchEdgeMachinesMachineResult',
    'GetBatchEdgeMachinesStatusResult',
    'GetClustersClusterResult',
    'GetClustersClusterClusterConfigResult',
    'GetClustersClusterClusterConfigApiServerEndpointsResult',
    'GetClustersClusterClusterConfigApiServerEndpointsPrivateIpResult',
    'GetClustersClusterClusterConfigApiServerEndpointsPublicIpResult',
    'GetClustersClusterClusterConfigApiServerPublicAccessConfigResult',
    'GetClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult',
    'GetClustersClusterLoggingConfigResult',
    'GetClustersClusterLoggingConfigLogSetupResult',
    'GetClustersClusterNodeStatisticsResult',
    'GetClustersClusterPodsConfigResult',
    'GetClustersClusterPodsConfigFlannelConfigResult',
    'GetClustersClusterPodsConfigVpcCniConfigResult',
    'GetClustersClusterServicesConfigResult',
    'GetClustersClusterStatusResult',
    'GetClustersClusterStatusConditionResult',
    'GetClustersStatusResult',
    'GetEdgeNodePoolsNodePoolResult',
    'GetEdgeNodePoolsNodePoolBillingConfigResult',
    'GetEdgeNodePoolsNodePoolElasticConfigResult',
    'GetEdgeNodePoolsNodePoolElasticConfigAutoScaleConfigResult',
    'GetEdgeNodePoolsNodePoolElasticConfigInstanceAreaResult',
    'GetEdgeNodePoolsNodePoolLabelContentResult',
    'GetEdgeNodePoolsNodePoolNodeStatisticResult',
    'GetEdgeNodePoolsNodePoolTaintContentResult',
    'GetEdgeNodePoolsStatusResult',
    'GetEdgeNodesNodeResult',
    'GetEdgeNodesStatusResult',
    'GetNodePoolsNodePoolResult',
    'GetNodePoolsNodePoolDataVolumeResult',
    'GetNodePoolsNodePoolEcsTagResult',
    'GetNodePoolsNodePoolLabelContentResult',
    'GetNodePoolsNodePoolNodeStatisticResult',
    'GetNodePoolsNodePoolSystemVolumeResult',
    'GetNodePoolsNodePoolTagResult',
    'GetNodePoolsNodePoolTaintContentResult',
    'GetNodePoolsStatusResult',
    'GetSupportAddonsAddonResult',
    'GetSupportAddonsAddonVersionResult',
    'GetSupportAddonsAddonVersionCompatibilityResult',
    'GetSupportResourceTypesResourceResult',
]

@pulumi.output_type
class AddonsAddonResult(dict):
    def __init__(__self__, *,
                 deploy_mode: str,
                 deploy_node_types: Sequence[str],
                 name: str,
                 pod_network_modes: Sequence[str],
                 versions: Sequence['outputs.AddonsAddonVersionResult'],
                 categories: Optional[Sequence[str]] = None,
                 necessary: Optional[str] = None):
        """
        :param str deploy_mode: The deploy model.
        :param Sequence[str] deploy_node_types: The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        :param str name: The name of the addon.
        :param Sequence[str] pod_network_modes: The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        :param Sequence['AddonsAddonVersionArgs'] versions: The version info of addon.
        :param Sequence[str] categories: The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
        :param str necessary: The necessary of addon.
        """
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        pulumi.set(__self__, "deploy_node_types", deploy_node_types)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pod_network_modes", pod_network_modes)
        pulumi.set(__self__, "versions", versions)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if necessary is not None:
            pulumi.set(__self__, "necessary", necessary)

    @property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> str:
        """
        The deploy model.
        """
        return pulumi.get(self, "deploy_mode")

    @property
    @pulumi.getter(name="deployNodeTypes")
    def deploy_node_types(self) -> Sequence[str]:
        """
        The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        """
        return pulumi.get(self, "deploy_node_types")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the addon.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="podNetworkModes")
    def pod_network_modes(self) -> Sequence[str]:
        """
        The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        """
        return pulumi.get(self, "pod_network_modes")

    @property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.AddonsAddonVersionResult']:
        """
        The version info of addon.
        """
        return pulumi.get(self, "versions")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[str]]:
        """
        The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def necessary(self) -> Optional[str]:
        """
        The necessary of addon.
        """
        return pulumi.get(self, "necessary")


@pulumi.output_type
class AddonsAddonVersionResult(dict):
    def __init__(__self__, *,
                 compatibilities: Sequence['outputs.AddonsAddonVersionCompatibilityResult'],
                 compatible_versions: Sequence[str],
                 version: str):
        """
        :param Sequence['AddonsAddonVersionCompatibilityArgs'] compatibilities: The compatible version list.
        :param Sequence[str] compatible_versions: The compatible version list.
        :param str version: The basic version info.
        """
        pulumi.set(__self__, "compatibilities", compatibilities)
        pulumi.set(__self__, "compatible_versions", compatible_versions)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def compatibilities(self) -> Sequence['outputs.AddonsAddonVersionCompatibilityResult']:
        """
        The compatible version list.
        """
        return pulumi.get(self, "compatibilities")

    @property
    @pulumi.getter(name="compatibleVersions")
    def compatible_versions(self) -> Sequence[str]:
        """
        The compatible version list.
        """
        return pulumi.get(self, "compatible_versions")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The basic version info.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class AddonsAddonVersionCompatibilityResult(dict):
    def __init__(__self__, *,
                 kubernetes_version: str):
        """
        :param str kubernetes_version: The Kubernetes Version of addon.
        """
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> str:
        """
        The Kubernetes Version of addon.
        """
        return pulumi.get(self, "kubernetes_version")


@pulumi.output_type
class BatchEdgeMachinesMachineResult(dict):
    def __init__(__self__, *,
                 bootstrap_script: str,
                 cluster_id: str,
                 condition_types: Sequence[str],
                 create_client_token: str,
                 create_time: str,
                 edge_node_type: str,
                 id: str,
                 name: str,
                 phase: str,
                 profile: str,
                 ttl_time: int,
                 update_time: str):
        """
        :param str bootstrap_script: The bootstrap script.
        :param str cluster_id: The ClusterId of NodePool.
        :param Sequence[str] condition_types: The Condition of Status.
        :param str create_client_token: The ClientToken when successfully created.
        :param str create_time: The CreateTime of NodePool.
        :param str edge_node_type: Edge node type.
        :param str id: The Id of NodePool.
        :param str name: The Name of NodePool.
        :param str phase: The Phase of Status.
        :param str profile: Edge: Edge node pool. If the return value is empty, it is the central node pool.
        :param int ttl_time: The TTL time.
        :param str update_time: The UpdateTime time of NodePool.
        """
        pulumi.set(__self__, "bootstrap_script", bootstrap_script)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "condition_types", condition_types)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "edge_node_type", edge_node_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "ttl_time", ttl_time)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="bootstrapScript")
    def bootstrap_script(self) -> str:
        """
        The bootstrap script.
        """
        return pulumi.get(self, "bootstrap_script")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="conditionTypes")
    def condition_types(self) -> Sequence[str]:
        """
        The Condition of Status.
        """
        return pulumi.get(self, "condition_types")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        The ClientToken when successfully created.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The CreateTime of NodePool.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="edgeNodeType")
    def edge_node_type(self) -> str:
        """
        Edge node type.
        """
        return pulumi.get(self, "edge_node_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of NodePool.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        Edge: Edge node pool. If the return value is empty, it is the central node pool.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="ttlTime")
    def ttl_time(self) -> int:
        """
        The TTL time.
        """
        return pulumi.get(self, "ttl_time")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The UpdateTime time of NodePool.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class BatchEdgeMachinesStatusResult(dict):
    def __init__(__self__, *,
                 edge_node_status_condition_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str edge_node_status_condition_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if edge_node_status_condition_type is not None:
            pulumi.set(__self__, "edge_node_status_condition_type", edge_node_status_condition_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="edgeNodeStatusConditionType")
    def edge_node_status_condition_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "edge_node_status_condition_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class ClusterClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "apiServerPublicAccessConfig":
            suggest = "api_server_public_access_config"
        elif key == "apiServerPublicAccessEnabled":
            suggest = "api_server_public_access_enabled"
        elif key == "resourcePublicAccessDefaultEnabled":
            suggest = "resource_public_access_default_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 api_server_public_access_config: Optional['outputs.ClusterClusterConfigApiServerPublicAccessConfig'] = None,
                 api_server_public_access_enabled: Optional[bool] = None,
                 resource_public_access_default_enabled: Optional[bool] = None):
        """
        :param Sequence[str] subnet_ids: The subnet ID for communication within the private network (VPC) of the cluster control plane. You can call the private network API to obtain the subnet ID. Note: When creating a cluster, please ensure that all specified SubnetIds (including but not limited to this parameter) belong to the same private network. It is recommended that you choose subnets in different availability zones as much as possible to improve the high availability of the cluster control plane. Please note that this parameter is not supported to be modified after the cluster is created. Please configure it reasonably.
        :param 'ClusterClusterConfigApiServerPublicAccessConfigArgs' api_server_public_access_config: Cluster API Server public network access configuration information. It takes effect only when ApiServerPublicAccessEnabled=true.
        :param bool api_server_public_access_enabled: Cluster API Server public network access configuration, values:
               false: (default value). closed
               true: opened.
        :param bool resource_public_access_default_enabled: Node public network access configuration, values:
               false: (default value). Do not enable public network access. Existing NAT gateways and rules are not affected. true: Enable public network access. After enabling, a NAT gateway is automatically created for the cluster's private network and corresponding rules are configured. Note: This parameter cannot be modified after the cluster is created. Please configure it reasonably.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if api_server_public_access_config is not None:
            pulumi.set(__self__, "api_server_public_access_config", api_server_public_access_config)
        if api_server_public_access_enabled is not None:
            pulumi.set(__self__, "api_server_public_access_enabled", api_server_public_access_enabled)
        if resource_public_access_default_enabled is not None:
            pulumi.set(__self__, "resource_public_access_default_enabled", resource_public_access_default_enabled)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The subnet ID for communication within the private network (VPC) of the cluster control plane. You can call the private network API to obtain the subnet ID. Note: When creating a cluster, please ensure that all specified SubnetIds (including but not limited to this parameter) belong to the same private network. It is recommended that you choose subnets in different availability zones as much as possible to improve the high availability of the cluster control plane. Please note that this parameter is not supported to be modified after the cluster is created. Please configure it reasonably.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="apiServerPublicAccessConfig")
    def api_server_public_access_config(self) -> Optional['outputs.ClusterClusterConfigApiServerPublicAccessConfig']:
        """
        Cluster API Server public network access configuration information. It takes effect only when ApiServerPublicAccessEnabled=true.
        """
        return pulumi.get(self, "api_server_public_access_config")

    @property
    @pulumi.getter(name="apiServerPublicAccessEnabled")
    def api_server_public_access_enabled(self) -> Optional[bool]:
        """
        Cluster API Server public network access configuration, values:
        false: (default value). closed
        true: opened.
        """
        return pulumi.get(self, "api_server_public_access_enabled")

    @property
    @pulumi.getter(name="resourcePublicAccessDefaultEnabled")
    def resource_public_access_default_enabled(self) -> Optional[bool]:
        """
        Node public network access configuration, values:
        false: (default value). Do not enable public network access. Existing NAT gateways and rules are not affected. true: Enable public network access. After enabling, a NAT gateway is automatically created for the cluster's private network and corresponding rules are configured. Note: This parameter cannot be modified after the cluster is created. Please configure it reasonably.
        """
        return pulumi.get(self, "resource_public_access_default_enabled")


@pulumi.output_type
class ClusterClusterConfigApiServerPublicAccessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicAccessNetworkConfig":
            suggest = "public_access_network_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterConfigApiServerPublicAccessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterConfigApiServerPublicAccessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterConfigApiServerPublicAccessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_access_network_config: Optional['outputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig'] = None):
        """
        :param 'ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs' public_access_network_config: Public network access network configuration.
        """
        if public_access_network_config is not None:
            pulumi.set(__self__, "public_access_network_config", public_access_network_config)

    @property
    @pulumi.getter(name="publicAccessNetworkConfig")
    def public_access_network_config(self) -> Optional['outputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig']:
        """
        Public network access network configuration.
        """
        return pulumi.get(self, "public_access_network_config")


@pulumi.output_type
class ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingType":
            suggest = "billing_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth: Optional[int] = None,
                 billing_type: Optional[str] = None):
        """
        :param int bandwidth: The peak bandwidth of the public IP, unit: Mbps.
        :param str billing_type: Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if billing_type is not None:
            pulumi.set(__self__, "billing_type", billing_type)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        The peak bandwidth of the public IP, unit: Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> Optional[str]:
        """
        Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        return pulumi.get(self, "billing_type")


@pulumi.output_type
class ClusterLoggingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logProjectId":
            suggest = "log_project_id"
        elif key == "logSetups":
            suggest = "log_setups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterLoggingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterLoggingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterLoggingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_project_id: Optional[str] = None,
                 log_setups: Optional[Sequence['outputs.ClusterLoggingConfigLogSetup']] = None):
        """
        :param str log_project_id: The TLS log item ID of the collection target.
        :param Sequence['ClusterLoggingConfigLogSetupArgs'] log_setups: Cluster logging options. This structure can only be modified and added, and cannot be deleted. When encountering a `cannot be deleted` error, please query the log setups of the current cluster and fill in the current `tf` file.
        """
        if log_project_id is not None:
            pulumi.set(__self__, "log_project_id", log_project_id)
        if log_setups is not None:
            pulumi.set(__self__, "log_setups", log_setups)

    @property
    @pulumi.getter(name="logProjectId")
    def log_project_id(self) -> Optional[str]:
        """
        The TLS log item ID of the collection target.
        """
        return pulumi.get(self, "log_project_id")

    @property
    @pulumi.getter(name="logSetups")
    def log_setups(self) -> Optional[Sequence['outputs.ClusterLoggingConfigLogSetup']]:
        """
        Cluster logging options. This structure can only be modified and added, and cannot be deleted. When encountering a `cannot be deleted` error, please query the log setups of the current cluster and fill in the current `tf` file.
        """
        return pulumi.get(self, "log_setups")


@pulumi.output_type
class ClusterLoggingConfigLogSetup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logType":
            suggest = "log_type"
        elif key == "logTtl":
            suggest = "log_ttl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterLoggingConfigLogSetup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterLoggingConfigLogSetup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterLoggingConfigLogSetup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_type: str,
                 enabled: Optional[bool] = None,
                 log_ttl: Optional[int] = None):
        """
        :param str log_type: The current types of logs that can be enabled are:
               Audit: Cluster audit logs.
               KubeApiServer: kube-apiserver component logs.
               KubeScheduler: kube-scheduler component logs.
               KubeControllerManager: kube-controller-manager component logs.
        :param bool enabled: Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.
        :param int log_ttl: The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.
        """
        pulumi.set(__self__, "log_type", log_type)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if log_ttl is not None:
            pulumi.set(__self__, "log_ttl", log_ttl)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        """
        The current types of logs that can be enabled are:
        Audit: Cluster audit logs.
        KubeApiServer: kube-apiserver component logs.
        KubeScheduler: kube-scheduler component logs.
        KubeControllerManager: kube-controller-manager component logs.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logTtl")
    def log_ttl(self) -> Optional[int]:
        """
        The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.
        """
        return pulumi.get(self, "log_ttl")


@pulumi.output_type
class ClusterPodsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podNetworkMode":
            suggest = "pod_network_mode"
        elif key == "flannelConfig":
            suggest = "flannel_config"
        elif key == "vpcCniConfig":
            suggest = "vpc_cni_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPodsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPodsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPodsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pod_network_mode: str,
                 flannel_config: Optional['outputs.ClusterPodsConfigFlannelConfig'] = None,
                 vpc_cni_config: Optional['outputs.ClusterPodsConfigVpcCniConfig'] = None):
        """
        :param str pod_network_mode: Container network model, values: Flannel: Flannel network model, an independent Underlay container network solution. Combined with the global routing capability of a private network (VPC), it realizes a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution implemented based on the elastic network interface (ENI) of a private network, with high network communication performance. Description: After the cluster is created, this parameter is not supported to be modified temporarily. Please configure it reasonably.
        :param 'ClusterPodsConfigFlannelConfigArgs' flannel_config: Flannel network configuration. It can be configured only when PodNetworkMode=Flannel, but it is not mandatory.
        :param 'ClusterPodsConfigVpcCniConfigArgs' vpc_cni_config: VPC-CNI network configuration. PodNetworkMode=VpcCniShared, but it is not mandatory.
        """
        pulumi.set(__self__, "pod_network_mode", pod_network_mode)
        if flannel_config is not None:
            pulumi.set(__self__, "flannel_config", flannel_config)
        if vpc_cni_config is not None:
            pulumi.set(__self__, "vpc_cni_config", vpc_cni_config)

    @property
    @pulumi.getter(name="podNetworkMode")
    def pod_network_mode(self) -> str:
        """
        Container network model, values: Flannel: Flannel network model, an independent Underlay container network solution. Combined with the global routing capability of a private network (VPC), it realizes a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution implemented based on the elastic network interface (ENI) of a private network, with high network communication performance. Description: After the cluster is created, this parameter is not supported to be modified temporarily. Please configure it reasonably.
        """
        return pulumi.get(self, "pod_network_mode")

    @property
    @pulumi.getter(name="flannelConfig")
    def flannel_config(self) -> Optional['outputs.ClusterPodsConfigFlannelConfig']:
        """
        Flannel network configuration. It can be configured only when PodNetworkMode=Flannel, but it is not mandatory.
        """
        return pulumi.get(self, "flannel_config")

    @property
    @pulumi.getter(name="vpcCniConfig")
    def vpc_cni_config(self) -> Optional['outputs.ClusterPodsConfigVpcCniConfig']:
        """
        VPC-CNI network configuration. PodNetworkMode=VpcCniShared, but it is not mandatory.
        """
        return pulumi.get(self, "vpc_cni_config")


@pulumi.output_type
class ClusterPodsConfigFlannelConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podCidrs":
            suggest = "pod_cidrs"
        elif key == "maxPodsPerNode":
            suggest = "max_pods_per_node"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPodsConfigFlannelConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPodsConfigFlannelConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPodsConfigFlannelConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pod_cidrs: Sequence[str],
                 max_pods_per_node: Optional[int] = None):
        """
        :param Sequence[str] pod_cidrs: Pod CIDR of Flannel model container network. Only configurable when PodNetworkMode=Flannel, but not mandatory. Note: The number of Pods in the cluster is limited by the number of IPs in this CIDR. This parameter cannot be modified after cluster creation. Please plan the Pod CIDR reasonably. Cannot conflict with the following network segments: private network network segments corresponding to ClusterConfig.SubnetIds. All clusters within the same private network's FlannelConfig.PodCidrs. All clusters within the same private network's ServiceConfig.ServiceCidrsv4. Different clusters within the same private network's FlannelConfig.PodCidrs cannot conflict.
        :param int max_pods_per_node: Upper limit of the number of single-node Pod instances in the Flannel model container network. Values: 64(default value), 16, 32, 128, 256.
        """
        pulumi.set(__self__, "pod_cidrs", pod_cidrs)
        if max_pods_per_node is not None:
            pulumi.set(__self__, "max_pods_per_node", max_pods_per_node)

    @property
    @pulumi.getter(name="podCidrs")
    def pod_cidrs(self) -> Sequence[str]:
        """
        Pod CIDR of Flannel model container network. Only configurable when PodNetworkMode=Flannel, but not mandatory. Note: The number of Pods in the cluster is limited by the number of IPs in this CIDR. This parameter cannot be modified after cluster creation. Please plan the Pod CIDR reasonably. Cannot conflict with the following network segments: private network network segments corresponding to ClusterConfig.SubnetIds. All clusters within the same private network's FlannelConfig.PodCidrs. All clusters within the same private network's ServiceConfig.ServiceCidrsv4. Different clusters within the same private network's FlannelConfig.PodCidrs cannot conflict.
        """
        return pulumi.get(self, "pod_cidrs")

    @property
    @pulumi.getter(name="maxPodsPerNode")
    def max_pods_per_node(self) -> Optional[int]:
        """
        Upper limit of the number of single-node Pod instances in the Flannel model container network. Values: 64(default value), 16, 32, 128, 256.
        """
        return pulumi.get(self, "max_pods_per_node")


@pulumi.output_type
class ClusterPodsConfigVpcCniConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetIds":
            suggest = "subnet_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPodsConfigVpcCniConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPodsConfigVpcCniConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPodsConfigVpcCniConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_ids: Sequence[str]):
        """
        :param Sequence[str] subnet_ids: A list of Pod subnet IDs for the VPC-CNI container network.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        A list of Pod subnet IDs for the VPC-CNI container network.
        """
        return pulumi.get(self, "subnet_ids")


@pulumi.output_type
class ClusterServicesConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceCidrsv4s":
            suggest = "service_cidrsv4s"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterServicesConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterServicesConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterServicesConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_cidrsv4s: Sequence[str]):
        """
        :param Sequence[str] service_cidrsv4s: CIDR used by services within the cluster. It cannot conflict with the following network segments: FlannelConfig.PodCidrs. SubnetIds of all clusters within the same private network or FlannelConfig.VpcConfig.SubnetIds. ServiceConfig.ServiceCidrsv4 of all clusters within the same private network (this parameter).It is stated that currently only one array element is supported. When multiple values are specified, only the first value takes effect.
        """
        pulumi.set(__self__, "service_cidrsv4s", service_cidrsv4s)

    @property
    @pulumi.getter(name="serviceCidrsv4s")
    def service_cidrsv4s(self) -> Sequence[str]:
        """
        CIDR used by services within the cluster. It cannot conflict with the following network segments: FlannelConfig.PodCidrs. SubnetIds of all clusters within the same private network or FlannelConfig.VpcConfig.SubnetIds. ServiceConfig.ServiceCidrsv4 of all clusters within the same private network (this parameter).It is stated that currently only one array element is supported. When multiple values are specified, only the first value takes effect.
        """
        return pulumi.get(self, "service_cidrsv4s")


@pulumi.output_type
class ClustersClusterResult(dict):
    def __init__(__self__, *,
                 cluster_config: 'outputs.ClustersClusterClusterConfigResult',
                 create_client_token: str,
                 create_time: str,
                 delete_protection_enabled: bool,
                 description: str,
                 id: str,
                 kubernetes_version: str,
                 logging_configs: Sequence['outputs.ClustersClusterLoggingConfigResult'],
                 name: str,
                 node_statistics: 'outputs.ClustersClusterNodeStatisticsResult',
                 pods_config: 'outputs.ClustersClusterPodsConfigResult',
                 services_config: 'outputs.ClustersClusterServicesConfigResult',
                 statuses: Sequence['outputs.ClustersClusterStatusResult'],
                 update_client_token: str,
                 update_time: str):
        """
        :param 'ClustersClusterClusterConfigArgs' cluster_config: The config of the cluster.
        :param str create_client_token: ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        :param str create_time: Cluster creation time. UTC+0 time in standard RFC3339 format.
        :param bool delete_protection_enabled: Cluster deletion protection. Values: true: Enable deletion protection. false: Disable deletion protection.
        :param str description: Cluster description information.
        :param str id: The ID of the cluster.
        :param str kubernetes_version: Kubernetes version information corresponding to the cluster, specific to the patch version.
        :param Sequence['ClustersClusterLoggingConfigArgs'] logging_configs: Cluster log configuration information.
        :param str name: Cluster name.
        :param 'ClustersClusterNodeStatisticsArgs' node_statistics: Statistics on the number of nodes corresponding to each master state in the cluster.
        :param 'ClustersClusterPodsConfigArgs' pods_config: The config of the pods.
        :param 'ClustersClusterServicesConfigArgs' services_config: The config of the services.
        :param Sequence['ClustersClusterStatusArgs'] statuses: Cluster status. For detailed instructions, please refer to ClusterStatusResponse.
        :param str update_client_token: The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        :param str update_time: The time when the cluster last accepted a request and executed or completed execution. UTC+0 time in standard RFC3339 format.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "delete_protection_enabled", delete_protection_enabled)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        pulumi.set(__self__, "logging_configs", logging_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_statistics", node_statistics)
        pulumi.set(__self__, "pods_config", pods_config)
        pulumi.set(__self__, "services_config", services_config)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "update_client_token", update_client_token)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> 'outputs.ClustersClusterClusterConfigResult':
        """
        The config of the cluster.
        """
        return pulumi.get(self, "cluster_config")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Cluster creation time. UTC+0 time in standard RFC3339 format.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteProtectionEnabled")
    def delete_protection_enabled(self) -> bool:
        """
        Cluster deletion protection. Values: true: Enable deletion protection. false: Disable deletion protection.
        """
        return pulumi.get(self, "delete_protection_enabled")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Cluster description information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> str:
        """
        Kubernetes version information corresponding to the cluster, specific to the patch version.
        """
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter(name="loggingConfigs")
    def logging_configs(self) -> Sequence['outputs.ClustersClusterLoggingConfigResult']:
        """
        Cluster log configuration information.
        """
        return pulumi.get(self, "logging_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeStatistics")
    def node_statistics(self) -> 'outputs.ClustersClusterNodeStatisticsResult':
        """
        Statistics on the number of nodes corresponding to each master state in the cluster.
        """
        return pulumi.get(self, "node_statistics")

    @property
    @pulumi.getter(name="podsConfig")
    def pods_config(self) -> 'outputs.ClustersClusterPodsConfigResult':
        """
        The config of the pods.
        """
        return pulumi.get(self, "pods_config")

    @property
    @pulumi.getter(name="servicesConfig")
    def services_config(self) -> 'outputs.ClustersClusterServicesConfigResult':
        """
        The config of the services.
        """
        return pulumi.get(self, "services_config")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.ClustersClusterStatusResult']:
        """
        Cluster status. For detailed instructions, please refer to ClusterStatusResponse.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> str:
        """
        The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        """
        return pulumi.get(self, "update_client_token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time when the cluster last accepted a request and executed or completed execution. UTC+0 time in standard RFC3339 format.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class ClustersClusterClusterConfigResult(dict):
    def __init__(__self__, *,
                 api_server_endpoints: 'outputs.ClustersClusterClusterConfigApiServerEndpointsResult',
                 api_server_public_access_config: 'outputs.ClustersClusterClusterConfigApiServerPublicAccessConfigResult',
                 api_server_public_access_enabled: bool,
                 resource_public_access_default_enabled: bool,
                 security_group_ids: Sequence[str],
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param 'ClustersClusterClusterConfigApiServerEndpointsArgs' api_server_endpoints: Endpoint information accessed by the cluster API Server.
        :param 'ClustersClusterClusterConfigApiServerPublicAccessConfigArgs' api_server_public_access_config: Cluster API Server public network access configuration.
        :param bool api_server_public_access_enabled: Cluster API Server public network access configuration, the value is `true` or `false`.
        :param bool resource_public_access_default_enabled: Node public network access configuration, the value is `true` or `false`.
        :param Sequence[str] security_group_ids: The security group used by the cluster control plane and nodes.
        :param Sequence[str] subnet_ids: A list of Pod subnet IDs for the VPC-CNI container network.
        :param str vpc_id: The private network where the cluster control plane network resides.
        """
        pulumi.set(__self__, "api_server_endpoints", api_server_endpoints)
        pulumi.set(__self__, "api_server_public_access_config", api_server_public_access_config)
        pulumi.set(__self__, "api_server_public_access_enabled", api_server_public_access_enabled)
        pulumi.set(__self__, "resource_public_access_default_enabled", resource_public_access_default_enabled)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="apiServerEndpoints")
    def api_server_endpoints(self) -> 'outputs.ClustersClusterClusterConfigApiServerEndpointsResult':
        """
        Endpoint information accessed by the cluster API Server.
        """
        return pulumi.get(self, "api_server_endpoints")

    @property
    @pulumi.getter(name="apiServerPublicAccessConfig")
    def api_server_public_access_config(self) -> 'outputs.ClustersClusterClusterConfigApiServerPublicAccessConfigResult':
        """
        Cluster API Server public network access configuration.
        """
        return pulumi.get(self, "api_server_public_access_config")

    @property
    @pulumi.getter(name="apiServerPublicAccessEnabled")
    def api_server_public_access_enabled(self) -> bool:
        """
        Cluster API Server public network access configuration, the value is `true` or `false`.
        """
        return pulumi.get(self, "api_server_public_access_enabled")

    @property
    @pulumi.getter(name="resourcePublicAccessDefaultEnabled")
    def resource_public_access_default_enabled(self) -> bool:
        """
        Node public network access configuration, the value is `true` or `false`.
        """
        return pulumi.get(self, "resource_public_access_default_enabled")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The security group used by the cluster control plane and nodes.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        A list of Pod subnet IDs for the VPC-CNI container network.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The private network where the cluster control plane network resides.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ClustersClusterClusterConfigApiServerEndpointsResult(dict):
    def __init__(__self__, *,
                 private_ip: 'outputs.ClustersClusterClusterConfigApiServerEndpointsPrivateIpResult',
                 public_ip: 'outputs.ClustersClusterClusterConfigApiServerEndpointsPublicIpResult'):
        """
        :param 'ClustersClusterClusterConfigApiServerEndpointsPrivateIpArgs' private_ip: Endpoint address of the cluster API Server private network.
        :param 'ClustersClusterClusterConfigApiServerEndpointsPublicIpArgs' public_ip: Endpoint address of the cluster API Server public network.
        """
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> 'outputs.ClustersClusterClusterConfigApiServerEndpointsPrivateIpResult':
        """
        Endpoint address of the cluster API Server private network.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> 'outputs.ClustersClusterClusterConfigApiServerEndpointsPublicIpResult':
        """
        Endpoint address of the cluster API Server public network.
        """
        return pulumi.get(self, "public_ip")


@pulumi.output_type
class ClustersClusterClusterConfigApiServerEndpointsPrivateIpResult(dict):
    def __init__(__self__, *,
                 ipv4: str):
        """
        :param str ipv4: Ipv4 address.
        """
        pulumi.set(__self__, "ipv4", ipv4)

    @property
    @pulumi.getter
    def ipv4(self) -> str:
        """
        Ipv4 address.
        """
        return pulumi.get(self, "ipv4")


@pulumi.output_type
class ClustersClusterClusterConfigApiServerEndpointsPublicIpResult(dict):
    def __init__(__self__, *,
                 ipv4: str):
        """
        :param str ipv4: Ipv4 address.
        """
        pulumi.set(__self__, "ipv4", ipv4)

    @property
    @pulumi.getter
    def ipv4(self) -> str:
        """
        Ipv4 address.
        """
        return pulumi.get(self, "ipv4")


@pulumi.output_type
class ClustersClusterClusterConfigApiServerPublicAccessConfigResult(dict):
    def __init__(__self__, *,
                 access_source_ipsv4s: Sequence[str],
                 ip_family: str,
                 public_access_network_config: 'outputs.ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult'):
        """
        :param Sequence[str] access_source_ipsv4s: IPv4 public network access whitelist. A null value means all network segments (0.0.0.0/0) are allowed to pass.
        :param str ip_family: [SkipDoc]The IpFamily configuration,the value is `Ipv4` or `DualStack`.
        :param 'ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs' public_access_network_config: Public network access network configuration.
        """
        pulumi.set(__self__, "access_source_ipsv4s", access_source_ipsv4s)
        pulumi.set(__self__, "ip_family", ip_family)
        pulumi.set(__self__, "public_access_network_config", public_access_network_config)

    @property
    @pulumi.getter(name="accessSourceIpsv4s")
    def access_source_ipsv4s(self) -> Sequence[str]:
        """
        IPv4 public network access whitelist. A null value means all network segments (0.0.0.0/0) are allowed to pass.
        """
        return pulumi.get(self, "access_source_ipsv4s")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> str:
        """
        [SkipDoc]The IpFamily configuration,the value is `Ipv4` or `DualStack`.
        """
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="publicAccessNetworkConfig")
    def public_access_network_config(self) -> 'outputs.ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult':
        """
        Public network access network configuration.
        """
        return pulumi.get(self, "public_access_network_config")


@pulumi.output_type
class ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 billing_type: str,
                 isp: str):
        """
        :param int bandwidth: The peak bandwidth of the public IP, unit: Mbps.
        :param str billing_type: Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        :param str isp: The ISP of public IP.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "billing_type", billing_type)
        pulumi.set(__self__, "isp", isp)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The peak bandwidth of the public IP, unit: Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> str:
        """
        Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter
    def isp(self) -> str:
        """
        The ISP of public IP.
        """
        return pulumi.get(self, "isp")


@pulumi.output_type
class ClustersClusterLoggingConfigResult(dict):
    def __init__(__self__, *,
                 log_project_id: str,
                 log_setups: Sequence['outputs.ClustersClusterLoggingConfigLogSetupResult']):
        """
        :param str log_project_id: The TLS log item ID of the collection target.
        :param Sequence['ClustersClusterLoggingConfigLogSetupArgs'] log_setups: Cluster logging options.
        """
        pulumi.set(__self__, "log_project_id", log_project_id)
        pulumi.set(__self__, "log_setups", log_setups)

    @property
    @pulumi.getter(name="logProjectId")
    def log_project_id(self) -> str:
        """
        The TLS log item ID of the collection target.
        """
        return pulumi.get(self, "log_project_id")

    @property
    @pulumi.getter(name="logSetups")
    def log_setups(self) -> Sequence['outputs.ClustersClusterLoggingConfigLogSetupResult']:
        """
        Cluster logging options.
        """
        return pulumi.get(self, "log_setups")


@pulumi.output_type
class ClustersClusterLoggingConfigLogSetupResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 log_ttl: int,
                 log_type: str):
        """
        :param bool enabled: Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.
        :param int log_ttl: The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.
        :param str log_type: The currently enabled log type.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "log_ttl", log_ttl)
        pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logTtl")
    def log_ttl(self) -> int:
        """
        The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.
        """
        return pulumi.get(self, "log_ttl")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        """
        The currently enabled log type.
        """
        return pulumi.get(self, "log_type")


@pulumi.output_type
class ClustersClusterNodeStatisticsResult(dict):
    def __init__(__self__, *,
                 creating_count: int,
                 deleting_count: int,
                 failed_count: int,
                 running_count: int,
                 starting_count: int,
                 stopped_count: int,
                 stopping_count: int,
                 total_count: int,
                 updating_count: int):
        """
        :param int creating_count: Phase=Creating total number of nodes.
        :param int deleting_count: Phase=Deleting total number of nodes.
        :param int failed_count: Phase=Failed total number of nodes.
        :param int running_count: Phase=Running total number of nodes.
        :param int starting_count: Phase=Starting total number of nodes.
        :param int stopped_count: (**Deprecated**) This field has been deprecated and is not recommended for use. Phase=Stopped total number of nodes.
        :param int stopping_count: Phase=Stopping total number of nodes.
        :param int total_count: The total count of query.
        :param int updating_count: Phase=Updating total number of nodes.
        """
        pulumi.set(__self__, "creating_count", creating_count)
        pulumi.set(__self__, "deleting_count", deleting_count)
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "running_count", running_count)
        pulumi.set(__self__, "starting_count", starting_count)
        pulumi.set(__self__, "stopped_count", stopped_count)
        pulumi.set(__self__, "stopping_count", stopping_count)
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "updating_count", updating_count)

    @property
    @pulumi.getter(name="creatingCount")
    def creating_count(self) -> int:
        """
        Phase=Creating total number of nodes.
        """
        return pulumi.get(self, "creating_count")

    @property
    @pulumi.getter(name="deletingCount")
    def deleting_count(self) -> int:
        """
        Phase=Deleting total number of nodes.
        """
        return pulumi.get(self, "deleting_count")

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> int:
        """
        Phase=Failed total number of nodes.
        """
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter(name="runningCount")
    def running_count(self) -> int:
        """
        Phase=Running total number of nodes.
        """
        return pulumi.get(self, "running_count")

    @property
    @pulumi.getter(name="startingCount")
    def starting_count(self) -> int:
        """
        Phase=Starting total number of nodes.
        """
        return pulumi.get(self, "starting_count")

    @property
    @pulumi.getter(name="stoppedCount")
    def stopped_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. Phase=Stopped total number of nodes.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopped_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopped_count")

    @property
    @pulumi.getter(name="stoppingCount")
    def stopping_count(self) -> int:
        """
        Phase=Stopping total number of nodes.
        """
        return pulumi.get(self, "stopping_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updatingCount")
    def updating_count(self) -> int:
        """
        Phase=Updating total number of nodes.
        """
        return pulumi.get(self, "updating_count")


@pulumi.output_type
class ClustersClusterPodsConfigResult(dict):
    def __init__(__self__, *,
                 flannel_config: 'outputs.ClustersClusterPodsConfigFlannelConfigResult',
                 pod_network_mode: str,
                 vpc_cni_config: 'outputs.ClustersClusterPodsConfigVpcCniConfigResult'):
        """
        :param 'ClustersClusterPodsConfigFlannelConfigArgs' flannel_config: Flannel network configuration.
        :param str pod_network_mode: Container Pod Network Type (CNI), the value is `Flannel` or `VpcCniShared`.
        :param 'ClustersClusterPodsConfigVpcCniConfigArgs' vpc_cni_config: VPC-CNI network configuration.
        """
        pulumi.set(__self__, "flannel_config", flannel_config)
        pulumi.set(__self__, "pod_network_mode", pod_network_mode)
        pulumi.set(__self__, "vpc_cni_config", vpc_cni_config)

    @property
    @pulumi.getter(name="flannelConfig")
    def flannel_config(self) -> 'outputs.ClustersClusterPodsConfigFlannelConfigResult':
        """
        Flannel network configuration.
        """
        return pulumi.get(self, "flannel_config")

    @property
    @pulumi.getter(name="podNetworkMode")
    def pod_network_mode(self) -> str:
        """
        Container Pod Network Type (CNI), the value is `Flannel` or `VpcCniShared`.
        """
        return pulumi.get(self, "pod_network_mode")

    @property
    @pulumi.getter(name="vpcCniConfig")
    def vpc_cni_config(self) -> 'outputs.ClustersClusterPodsConfigVpcCniConfigResult':
        """
        VPC-CNI network configuration.
        """
        return pulumi.get(self, "vpc_cni_config")


@pulumi.output_type
class ClustersClusterPodsConfigFlannelConfigResult(dict):
    def __init__(__self__, *,
                 max_pods_per_node: int,
                 pod_cidrs: Sequence[str]):
        """
        :param int max_pods_per_node: The maximum number of single-node Pod instances for a Flannel container network.
        :param Sequence[str] pod_cidrs: Pod CIDR for the Flannel container network.
        """
        pulumi.set(__self__, "max_pods_per_node", max_pods_per_node)
        pulumi.set(__self__, "pod_cidrs", pod_cidrs)

    @property
    @pulumi.getter(name="maxPodsPerNode")
    def max_pods_per_node(self) -> int:
        """
        The maximum number of single-node Pod instances for a Flannel container network.
        """
        return pulumi.get(self, "max_pods_per_node")

    @property
    @pulumi.getter(name="podCidrs")
    def pod_cidrs(self) -> Sequence[str]:
        """
        Pod CIDR for the Flannel container network.
        """
        return pulumi.get(self, "pod_cidrs")


@pulumi.output_type
class ClustersClusterPodsConfigVpcCniConfigResult(dict):
    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param Sequence[str] subnet_ids: A list of Pod subnet IDs for the VPC-CNI container network.
        :param str vpc_id: The private network where the cluster control plane network resides.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        A list of Pod subnet IDs for the VPC-CNI container network.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The private network where the cluster control plane network resides.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ClustersClusterServicesConfigResult(dict):
    def __init__(__self__, *,
                 service_cidrsv4s: Sequence[str]):
        """
        :param Sequence[str] service_cidrsv4s: The IPv4 private network address exposed by the service.
        """
        pulumi.set(__self__, "service_cidrsv4s", service_cidrsv4s)

    @property
    @pulumi.getter(name="serviceCidrsv4s")
    def service_cidrsv4s(self) -> Sequence[str]:
        """
        The IPv4 private network address exposed by the service.
        """
        return pulumi.get(self, "service_cidrsv4s")


@pulumi.output_type
class ClustersClusterStatusResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.ClustersClusterStatusConditionResult'],
                 phase: str):
        """
        :param Sequence['ClustersClusterStatusConditionArgs'] conditions: The state condition in the current primary state of the cluster, that is, the reason for entering the primary state.
        :param str phase: Cluster status. The value contains `Creating`, `Running`, `Updating`, `Deleting`, `Failed`.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ClustersClusterStatusConditionResult']:
        """
        The state condition in the current primary state of the cluster, that is, the reason for entering the primary state.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        Cluster status. The value contains `Creating`, `Running`, `Updating`, `Deleting`, `Failed`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class ClustersClusterStatusConditionResult(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ClustersStatusResult(dict):
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
        :param str phase: The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
        """
        return pulumi.get(self, "conditions_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class EdgeNodeAutoCompleteConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directAdd":
            suggest = "direct_add"
        elif key == "directAddInstances":
            suggest = "direct_add_instances"
        elif key == "machineAuth":
            suggest = "machine_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeNodeAutoCompleteConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeNodeAutoCompleteConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeNodeAutoCompleteConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: bool,
                 address: Optional[str] = None,
                 direct_add: Optional[bool] = None,
                 direct_add_instances: Optional[Sequence['outputs.EdgeNodeAutoCompleteConfigDirectAddInstance']] = None,
                 machine_auth: Optional['outputs.EdgeNodeAutoCompleteConfigMachineAuth'] = None):
        """
        :param bool enable: Enable/Disable automatic management.
        :param str address: The address of the machine to be managed.
        :param bool direct_add: Directly managed through the edge computing instance ID. When it is true, there is no need to provide Address. Only DirectAddInstances needs to be provided.
        :param Sequence['EdgeNodeAutoCompleteConfigDirectAddInstanceArgs'] direct_add_instances: Edge computing instance ID on Volcano Engine.
        :param 'EdgeNodeAutoCompleteConfigMachineAuthArgs' machine_auth: Login credentials.
        """
        pulumi.set(__self__, "enable", enable)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if direct_add is not None:
            pulumi.set(__self__, "direct_add", direct_add)
        if direct_add_instances is not None:
            pulumi.set(__self__, "direct_add_instances", direct_add_instances)
        if machine_auth is not None:
            pulumi.set(__self__, "machine_auth", machine_auth)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable/Disable automatic management.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        The address of the machine to be managed.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="directAdd")
    def direct_add(self) -> Optional[bool]:
        """
        Directly managed through the edge computing instance ID. When it is true, there is no need to provide Address. Only DirectAddInstances needs to be provided.
        """
        return pulumi.get(self, "direct_add")

    @property
    @pulumi.getter(name="directAddInstances")
    def direct_add_instances(self) -> Optional[Sequence['outputs.EdgeNodeAutoCompleteConfigDirectAddInstance']]:
        """
        Edge computing instance ID on Volcano Engine.
        """
        return pulumi.get(self, "direct_add_instances")

    @property
    @pulumi.getter(name="machineAuth")
    def machine_auth(self) -> Optional['outputs.EdgeNodeAutoCompleteConfigMachineAuth']:
        """
        Login credentials.
        """
        return pulumi.get(self, "machine_auth")


@pulumi.output_type
class EdgeNodeAutoCompleteConfigDirectAddInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudServerIdentity":
            suggest = "cloud_server_identity"
        elif key == "instanceIdentity":
            suggest = "instance_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeNodeAutoCompleteConfigDirectAddInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeNodeAutoCompleteConfigDirectAddInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeNodeAutoCompleteConfigDirectAddInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_server_identity: str,
                 instance_identity: str):
        """
        :param str cloud_server_identity: Edge service ID.
        :param str instance_identity: Edge computing instance ID.
        """
        pulumi.set(__self__, "cloud_server_identity", cloud_server_identity)
        pulumi.set(__self__, "instance_identity", instance_identity)

    @property
    @pulumi.getter(name="cloudServerIdentity")
    def cloud_server_identity(self) -> str:
        """
        Edge service ID.
        """
        return pulumi.get(self, "cloud_server_identity")

    @property
    @pulumi.getter(name="instanceIdentity")
    def instance_identity(self) -> str:
        """
        Edge computing instance ID.
        """
        return pulumi.get(self, "instance_identity")


@pulumi.output_type
class EdgeNodeAutoCompleteConfigMachineAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "sshPort":
            suggest = "ssh_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeNodeAutoCompleteConfigMachineAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeNodeAutoCompleteConfigMachineAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeNodeAutoCompleteConfigMachineAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: str,
                 ssh_port: int,
                 user: str):
        """
        :param str auth_type: Authentication method. Currently only Password is open.
        :param int ssh_port: SSH port, default 22.
        :param str user: Login username.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "ssh_port", ssh_port)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        Authentication method. Currently only Password is open.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> int:
        """
        SSH port, default 22.
        """
        return pulumi.get(self, "ssh_port")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Login username.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class EdgeNodePoolBillingConfigs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prePaidPeriod":
            suggest = "pre_paid_period"
        elif key == "prePaidPeriodNumber":
            suggest = "pre_paid_period_number"
        elif key == "autoRenew":
            suggest = "auto_renew"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeNodePoolBillingConfigs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeNodePoolBillingConfigs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeNodePoolBillingConfigs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pre_paid_period: int,
                 pre_paid_period_number: int,
                 auto_renew: Optional[bool] = None):
        """
        :param int pre_paid_period: The pre-paid period of the node pool, in months. The value range is 1-9. This parameter takes effect only when the billing_type is PrePaid.
        :param int pre_paid_period_number: Prepaid period number.
        :param bool auto_renew: Whether to automatically renew the node pool.
        """
        pulumi.set(__self__, "pre_paid_period", pre_paid_period)
        pulumi.set(__self__, "pre_paid_period_number", pre_paid_period_number)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)

    @property
    @pulumi.getter(name="prePaidPeriod")
    def pre_paid_period(self) -> int:
        """
        The pre-paid period of the node pool, in months. The value range is 1-9. This parameter takes effect only when the billing_type is PrePaid.
        """
        return pulumi.get(self, "pre_paid_period")

    @property
    @pulumi.getter(name="prePaidPeriodNumber")
    def pre_paid_period_number(self) -> int:
        """
        Prepaid period number.
        """
        return pulumi.get(self, "pre_paid_period_number")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[bool]:
        """
        Whether to automatically renew the node pool.
        """
        return pulumi.get(self, "auto_renew")


@pulumi.output_type
class EdgeNodePoolElasticConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudServerIdentity":
            suggest = "cloud_server_identity"
        elif key == "autoScaleConfig":
            suggest = "auto_scale_config"
        elif key == "instanceArea":
            suggest = "instance_area"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeNodePoolElasticConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeNodePoolElasticConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeNodePoolElasticConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_server_identity: str,
                 auto_scale_config: Optional['outputs.EdgeNodePoolElasticConfigAutoScaleConfig'] = None,
                 instance_area: Optional['outputs.EdgeNodePoolElasticConfigInstanceArea'] = None):
        """
        :param str cloud_server_identity: The ID of the edge service corresponding to the elastic node. On the edge computing node's edge service page, obtain the edge service ID.
        :param 'EdgeNodePoolElasticConfigAutoScaleConfigArgs' auto_scale_config: The node pool elastic scaling configuration information.
        """
        pulumi.set(__self__, "cloud_server_identity", cloud_server_identity)
        if auto_scale_config is not None:
            pulumi.set(__self__, "auto_scale_config", auto_scale_config)
        if instance_area is not None:
            pulumi.set(__self__, "instance_area", instance_area)

    @property
    @pulumi.getter(name="cloudServerIdentity")
    def cloud_server_identity(self) -> str:
        """
        The ID of the edge service corresponding to the elastic node. On the edge computing node's edge service page, obtain the edge service ID.
        """
        return pulumi.get(self, "cloud_server_identity")

    @property
    @pulumi.getter(name="autoScaleConfig")
    def auto_scale_config(self) -> Optional['outputs.EdgeNodePoolElasticConfigAutoScaleConfig']:
        """
        The node pool elastic scaling configuration information.
        """
        return pulumi.get(self, "auto_scale_config")

    @property
    @pulumi.getter(name="instanceArea")
    def instance_area(self) -> Optional['outputs.EdgeNodePoolElasticConfigInstanceArea']:
        return pulumi.get(self, "instance_area")


@pulumi.output_type
class EdgeNodePoolElasticConfigAutoScaleConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredReplicas":
            suggest = "desired_replicas"
        elif key == "maxReplicas":
            suggest = "max_replicas"
        elif key == "minReplicas":
            suggest = "min_replicas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeNodePoolElasticConfigAutoScaleConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeNodePoolElasticConfigAutoScaleConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeNodePoolElasticConfigAutoScaleConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_replicas: int,
                 enabled: bool,
                 max_replicas: int,
                 min_replicas: int,
                 priority: int):
        """
        :param int desired_replicas: The DesiredReplicas of AutoScaling, default 0, range in min_replicas to max_replicas.
        :param bool enabled: Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
        :param int max_replicas: The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
        :param int min_replicas: The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
        :param int priority: The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnet_policy` is `Priority`.
        """
        pulumi.set(__self__, "desired_replicas", desired_replicas)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> int:
        """
        The DesiredReplicas of AutoScaling, default 0, range in min_replicas to max_replicas.
        """
        return pulumi.get(self, "desired_replicas")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        """
        The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnet_policy` is `Priority`.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class EdgeNodePoolElasticConfigInstanceArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaName":
            suggest = "area_name"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "defaultIsp":
            suggest = "default_isp"
        elif key == "externalNetworkMode":
            suggest = "external_network_mode"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcIdentity":
            suggest = "vpc_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EdgeNodePoolElasticConfigInstanceArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EdgeNodePoolElasticConfigInstanceArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EdgeNodePoolElasticConfigInstanceArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_name: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 default_isp: Optional[str] = None,
                 external_network_mode: Optional[str] = None,
                 isp: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 vpc_identity: Optional[str] = None):
        """
        :param str area_name: Region name. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        :param str cluster_name: The cluster name.
        :param str default_isp: Default operator. When using three-line nodes, this parameter can be configured. After configuration, this operator will be used as the default export.
        :param str external_network_mode: Public network configuration of three-line nodes. If it is a single-line node, this parameter will be ignored. Value range: single_interface_multi_ip: Single network card with multiple IPs. single_interface_cmcc_ip: Single network card with China Mobile IP. Relevant permissions need to be opened by submitting a work order. single_interface_cucc_ip: Single network card with China Unicom IP. Relevant permissions need to be opened by submitting a work order. single_interface_ctcc_ip: Single network card with China Telecom IP. Relevant permissions need to be opened by submitting a work order. multi_interface_multi_ip: Multiple network cards with multiple IPs. Relevant permissions need to be opened by submitting a work order. no_interface: No public network network card. Relevant permissions need to be opened by submitting a work order. If this parameter is not configured: When there is a public network network card, single_interface_multi_ip is used by default. When there is no public network network card, no_interface is used by default.
        :param str isp: Operator. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        :param str subnet_id: The subnet id.
        :param str vpc_identity: The vpc id.
        """
        if area_name is not None:
            pulumi.set(__self__, "area_name", area_name)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if default_isp is not None:
            pulumi.set(__self__, "default_isp", default_isp)
        if external_network_mode is not None:
            pulumi.set(__self__, "external_network_mode", external_network_mode)
        if isp is not None:
            pulumi.set(__self__, "isp", isp)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_identity is not None:
            pulumi.set(__self__, "vpc_identity", vpc_identity)

    @property
    @pulumi.getter(name="areaName")
    def area_name(self) -> Optional[str]:
        """
        Region name. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        """
        return pulumi.get(self, "area_name")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        The cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="defaultIsp")
    def default_isp(self) -> Optional[str]:
        """
        Default operator. When using three-line nodes, this parameter can be configured. After configuration, this operator will be used as the default export.
        """
        return pulumi.get(self, "default_isp")

    @property
    @pulumi.getter(name="externalNetworkMode")
    def external_network_mode(self) -> Optional[str]:
        """
        Public network configuration of three-line nodes. If it is a single-line node, this parameter will be ignored. Value range: single_interface_multi_ip: Single network card with multiple IPs. single_interface_cmcc_ip: Single network card with China Mobile IP. Relevant permissions need to be opened by submitting a work order. single_interface_cucc_ip: Single network card with China Unicom IP. Relevant permissions need to be opened by submitting a work order. single_interface_ctcc_ip: Single network card with China Telecom IP. Relevant permissions need to be opened by submitting a work order. multi_interface_multi_ip: Multiple network cards with multiple IPs. Relevant permissions need to be opened by submitting a work order. no_interface: No public network network card. Relevant permissions need to be opened by submitting a work order. If this parameter is not configured: When there is a public network network card, single_interface_multi_ip is used by default. When there is no public network network card, no_interface is used by default.
        """
        return pulumi.get(self, "external_network_mode")

    @property
    @pulumi.getter
    def isp(self) -> Optional[str]:
        """
        Operator. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        """
        return pulumi.get(self, "isp")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcIdentity")
    def vpc_identity(self) -> Optional[str]:
        """
        The vpc id.
        """
        return pulumi.get(self, "vpc_identity")


@pulumi.output_type
class EdgeNodePoolKubernetesConfig(dict):
    def __init__(__self__, *,
                 labels: Optional[Sequence['outputs.EdgeNodePoolKubernetesConfigLabel']] = None,
                 taints: Optional[Sequence['outputs.EdgeNodePoolKubernetesConfigTaint']] = None):
        """
        :param Sequence['EdgeNodePoolKubernetesConfigLabelArgs'] labels: The Labels of KubernetesConfig.
        :param Sequence['EdgeNodePoolKubernetesConfigTaintArgs'] taints: The Taints of KubernetesConfig.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.EdgeNodePoolKubernetesConfigLabel']]:
        """
        The Labels of KubernetesConfig.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.EdgeNodePoolKubernetesConfigTaint']]:
        """
        The Taints of KubernetesConfig.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class EdgeNodePoolKubernetesConfigLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The Key of Labels.
        :param str value: The Value of Labels.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The Key of Labels.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The Value of Labels.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EdgeNodePoolKubernetesConfigTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str effect: The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
        :param str key: The Key of Taints.
        :param str value: The Value of Taints.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The Key of Taints.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The Value of Taints.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EdgeNodePoolsNodePoolResult(dict):
    def __init__(__self__, *,
                 billing_configs: Sequence['outputs.EdgeNodePoolsNodePoolBillingConfigResult'],
                 cluster_id: str,
                 condition_types: Sequence[str],
                 create_client_token: str,
                 create_time: str,
                 elastic_configs: Sequence['outputs.EdgeNodePoolsNodePoolElasticConfigResult'],
                 id: str,
                 label_contents: Sequence['outputs.EdgeNodePoolsNodePoolLabelContentResult'],
                 name: str,
                 node_add_methods: Sequence[str],
                 node_statistics: Sequence['outputs.EdgeNodePoolsNodePoolNodeStatisticResult'],
                 phase: str,
                 profile: str,
                 taint_contents: Sequence['outputs.EdgeNodePoolsNodePoolTaintContentResult'],
                 type: str,
                 update_client_token: str,
                 update_time: str,
                 vpc_id: str):
        """
        :param Sequence['EdgeNodePoolsNodePoolBillingConfigArgs'] billing_configs: The billing configuration.
        :param str cluster_id: The ClusterId of NodePool.
        :param Sequence[str] condition_types: The Condition of Status.
        :param str create_client_token: The ClientToken when successfully created.
        :param str create_time: The CreateTime of NodePool.
        :param Sequence['EdgeNodePoolsNodePoolElasticConfigArgs'] elastic_configs: Elastic scaling configuration of node pool.
        :param str id: The Id of NodePool.
        :param Sequence['EdgeNodePoolsNodePoolLabelContentArgs'] label_contents: The LabelContent of KubernetesConfig.
        :param str name: The Name of NodePool.
        :param Sequence[str] node_add_methods: The method of adding nodes to the node pool.
        :param Sequence['EdgeNodePoolsNodePoolNodeStatisticArgs'] node_statistics: The NodeStatistics of NodeConfig.
        :param str phase: The Phase of Status.
        :param str profile: Edge: Edge node pool. If the return value is empty, it is the central node pool.
        :param Sequence['EdgeNodePoolsNodePoolTaintContentArgs'] taint_contents: The TaintContent of NodeConfig.
        :param str type: Node pool type, machine-set: central node pool. edge-machine-set: edge node pool. edge-machine-pool: edge elastic node pool.
        :param str update_client_token: The ClientToken when last update was successful.
        :param str update_time: The UpdateTime time of NodePool.
        :param str vpc_id: The static node pool specifies the node pool to associate with the VPC.
        """
        pulumi.set(__self__, "billing_configs", billing_configs)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "condition_types", condition_types)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "elastic_configs", elastic_configs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label_contents", label_contents)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_add_methods", node_add_methods)
        pulumi.set(__self__, "node_statistics", node_statistics)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "taint_contents", taint_contents)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_client_token", update_client_token)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="billingConfigs")
    def billing_configs(self) -> Sequence['outputs.EdgeNodePoolsNodePoolBillingConfigResult']:
        """
        The billing configuration.
        """
        return pulumi.get(self, "billing_configs")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="conditionTypes")
    def condition_types(self) -> Sequence[str]:
        """
        The Condition of Status.
        """
        return pulumi.get(self, "condition_types")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        The ClientToken when successfully created.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The CreateTime of NodePool.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="elasticConfigs")
    def elastic_configs(self) -> Sequence['outputs.EdgeNodePoolsNodePoolElasticConfigResult']:
        """
        Elastic scaling configuration of node pool.
        """
        return pulumi.get(self, "elastic_configs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of NodePool.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="labelContents")
    def label_contents(self) -> Sequence['outputs.EdgeNodePoolsNodePoolLabelContentResult']:
        """
        The LabelContent of KubernetesConfig.
        """
        return pulumi.get(self, "label_contents")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeAddMethods")
    def node_add_methods(self) -> Sequence[str]:
        """
        The method of adding nodes to the node pool.
        """
        return pulumi.get(self, "node_add_methods")

    @property
    @pulumi.getter(name="nodeStatistics")
    def node_statistics(self) -> Sequence['outputs.EdgeNodePoolsNodePoolNodeStatisticResult']:
        """
        The NodeStatistics of NodeConfig.
        """
        return pulumi.get(self, "node_statistics")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        Edge: Edge node pool. If the return value is empty, it is the central node pool.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="taintContents")
    def taint_contents(self) -> Sequence['outputs.EdgeNodePoolsNodePoolTaintContentResult']:
        """
        The TaintContent of NodeConfig.
        """
        return pulumi.get(self, "taint_contents")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Node pool type, machine-set: central node pool. edge-machine-set: edge node pool. edge-machine-pool: edge elastic node pool.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> str:
        """
        The ClientToken when last update was successful.
        """
        return pulumi.get(self, "update_client_token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The UpdateTime time of NodePool.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The static node pool specifies the node pool to associate with the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class EdgeNodePoolsNodePoolBillingConfigResult(dict):
    def __init__(__self__, *,
                 auto_renew: bool,
                 pre_paid_period: int,
                 pre_paid_period_number: int):
        """
        :param bool auto_renew: Whether to automatically renew the node pool.
        :param int pre_paid_period: The pre-paid period of the node pool, in months. The value range is 1-9. This parameter takes effect only when the billing_type is PrePaid.
        :param int pre_paid_period_number: Prepaid period number.
        """
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "pre_paid_period", pre_paid_period)
        pulumi.set(__self__, "pre_paid_period_number", pre_paid_period_number)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> bool:
        """
        Whether to automatically renew the node pool.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="prePaidPeriod")
    def pre_paid_period(self) -> int:
        """
        The pre-paid period of the node pool, in months. The value range is 1-9. This parameter takes effect only when the billing_type is PrePaid.
        """
        return pulumi.get(self, "pre_paid_period")

    @property
    @pulumi.getter(name="prePaidPeriodNumber")
    def pre_paid_period_number(self) -> int:
        """
        Prepaid period number.
        """
        return pulumi.get(self, "pre_paid_period_number")


@pulumi.output_type
class EdgeNodePoolsNodePoolElasticConfigResult(dict):
    def __init__(__self__, *,
                 auto_scale_configs: Sequence['outputs.EdgeNodePoolsNodePoolElasticConfigAutoScaleConfigResult'],
                 cloud_server_identity: str,
                 instance_areas: Sequence['outputs.EdgeNodePoolsNodePoolElasticConfigInstanceAreaResult']):
        """
        :param Sequence['EdgeNodePoolsNodePoolElasticConfigAutoScaleConfigArgs'] auto_scale_configs: The auto scaling configuration.
        :param str cloud_server_identity: Cloud server identity.
        :param Sequence['EdgeNodePoolsNodePoolElasticConfigInstanceAreaArgs'] instance_areas: The information of instance area.
        """
        pulumi.set(__self__, "auto_scale_configs", auto_scale_configs)
        pulumi.set(__self__, "cloud_server_identity", cloud_server_identity)
        pulumi.set(__self__, "instance_areas", instance_areas)

    @property
    @pulumi.getter(name="autoScaleConfigs")
    def auto_scale_configs(self) -> Sequence['outputs.EdgeNodePoolsNodePoolElasticConfigAutoScaleConfigResult']:
        """
        The auto scaling configuration.
        """
        return pulumi.get(self, "auto_scale_configs")

    @property
    @pulumi.getter(name="cloudServerIdentity")
    def cloud_server_identity(self) -> str:
        """
        Cloud server identity.
        """
        return pulumi.get(self, "cloud_server_identity")

    @property
    @pulumi.getter(name="instanceAreas")
    def instance_areas(self) -> Sequence['outputs.EdgeNodePoolsNodePoolElasticConfigInstanceAreaResult']:
        """
        The information of instance area.
        """
        return pulumi.get(self, "instance_areas")


@pulumi.output_type
class EdgeNodePoolsNodePoolElasticConfigAutoScaleConfigResult(dict):
    def __init__(__self__, *,
                 desired_replicas: int,
                 enabled: bool,
                 max_replicas: int,
                 min_replicas: int,
                 priority: int):
        """
        :param int desired_replicas: The DesiredReplicas of AutoScaling.
        :param bool enabled: Whether to enable auto scaling.
        :param int max_replicas: The maximum number of nodes.
        :param int min_replicas: The minimum number of nodes.
        :param int priority: The Priority of AutoScaling.
        """
        pulumi.set(__self__, "desired_replicas", desired_replicas)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> int:
        """
        The DesiredReplicas of AutoScaling.
        """
        return pulumi.get(self, "desired_replicas")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether to enable auto scaling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        The maximum number of nodes.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        """
        The minimum number of nodes.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The Priority of AutoScaling.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class EdgeNodePoolsNodePoolElasticConfigInstanceAreaResult(dict):
    def __init__(__self__, *,
                 area_name: str,
                 cluster_name: str,
                 default_isp: str,
                 external_network_mode: str,
                 isp: str,
                 subnet_identity: str,
                 vpc_identity: str):
        """
        :param str area_name: Region name. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        :param str cluster_name: Cluster name.
        :param str default_isp: Default operator. When using three-line nodes, this parameter can be configured. After configuration, this operator will be used as the default export.
        :param str external_network_mode: Public network configuration of three-line nodes. If it is a single-line node, this parameter will be ignored. Value range: single_interface_multi_ip: Single network card with multiple IPs. single_interface_cmcc_ip: Single network card with China Mobile IP. Relevant permissions need to be opened by submitting a work order. single_interface_cucc_ip: Single network card with China Unicom IP. Relevant permissions need to be opened by submitting a work order. single_interface_ctcc_ip: Single network card with China Telecom IP. Relevant permissions need to be opened by submitting a work order. multi_interface_multi_ip: Multiple network cards with multiple IPs. Relevant permissions need to be opened by submitting a work order. no_interface: No public network network card. Relevant permissions need to be opened by submitting a work order. If this parameter is not configured: When there is a public network network card, single_interface_multi_ip is used by default. When there is no public network network card, no_interface is used by default.
        :param str isp: Operator. You can obtain the regions and operators supported by the instance specification through the ListAvailableResourceInfo interface.
        :param str subnet_identity: Subnet ID.
        :param str vpc_identity: VPC ID.
        """
        pulumi.set(__self__, "area_name", area_name)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "default_isp", default_isp)
        pulumi.set(__self__, "external_network_mode", external_network_mode)
        pulumi.set(__self__, "isp", isp)
        pulumi.set(__self__, "subnet_identity", subnet_identity)
        pulumi.set(__self__, "vpc_identity", vpc_identity)

    @property
    @pulumi.getter(name="areaName")
    def area_name(self) -> str:
        """
        Region name. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        """
        return pulumi.get(self, "area_name")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="defaultIsp")
    def default_isp(self) -> str:
        """
        Default operator. When using three-line nodes, this parameter can be configured. After configuration, this operator will be used as the default export.
        """
        return pulumi.get(self, "default_isp")

    @property
    @pulumi.getter(name="externalNetworkMode")
    def external_network_mode(self) -> str:
        """
        Public network configuration of three-line nodes. If it is a single-line node, this parameter will be ignored. Value range: single_interface_multi_ip: Single network card with multiple IPs. single_interface_cmcc_ip: Single network card with China Mobile IP. Relevant permissions need to be opened by submitting a work order. single_interface_cucc_ip: Single network card with China Unicom IP. Relevant permissions need to be opened by submitting a work order. single_interface_ctcc_ip: Single network card with China Telecom IP. Relevant permissions need to be opened by submitting a work order. multi_interface_multi_ip: Multiple network cards with multiple IPs. Relevant permissions need to be opened by submitting a work order. no_interface: No public network network card. Relevant permissions need to be opened by submitting a work order. If this parameter is not configured: When there is a public network network card, single_interface_multi_ip is used by default. When there is no public network network card, no_interface is used by default.
        """
        return pulumi.get(self, "external_network_mode")

    @property
    @pulumi.getter
    def isp(self) -> str:
        """
        Operator. You can obtain the regions and operators supported by the instance specification through the ListAvailableResourceInfo interface.
        """
        return pulumi.get(self, "isp")

    @property
    @pulumi.getter(name="subnetIdentity")
    def subnet_identity(self) -> str:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_identity")

    @property
    @pulumi.getter(name="vpcIdentity")
    def vpc_identity(self) -> str:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_identity")


@pulumi.output_type
class EdgeNodePoolsNodePoolLabelContentResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EdgeNodePoolsNodePoolNodeStatisticResult(dict):
    def __init__(__self__, *,
                 creating_count: int,
                 deleting_count: int,
                 failed_count: int,
                 running_count: int,
                 starting_count: int,
                 stopped_count: int,
                 stopping_count: int,
                 total_count: int,
                 updating_count: int):
        """
        :param int creating_count: The CreatingCount of Node.
        :param int deleting_count: The DeletingCount of Node.
        :param int failed_count: The FailedCount of Node.
        :param int running_count: The RunningCount of Node.
        :param int starting_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        :param int stopped_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        :param int stopping_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        :param int total_count: The total count of query.
        :param int updating_count: The UpdatingCount of Node.
        """
        pulumi.set(__self__, "creating_count", creating_count)
        pulumi.set(__self__, "deleting_count", deleting_count)
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "running_count", running_count)
        pulumi.set(__self__, "starting_count", starting_count)
        pulumi.set(__self__, "stopped_count", stopped_count)
        pulumi.set(__self__, "stopping_count", stopping_count)
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "updating_count", updating_count)

    @property
    @pulumi.getter(name="creatingCount")
    def creating_count(self) -> int:
        """
        The CreatingCount of Node.
        """
        return pulumi.get(self, "creating_count")

    @property
    @pulumi.getter(name="deletingCount")
    def deleting_count(self) -> int:
        """
        The DeletingCount of Node.
        """
        return pulumi.get(self, "deleting_count")

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> int:
        """
        The FailedCount of Node.
        """
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter(name="runningCount")
    def running_count(self) -> int:
        """
        The RunningCount of Node.
        """
        return pulumi.get(self, "running_count")

    @property
    @pulumi.getter(name="startingCount")
    def starting_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""starting_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "starting_count")

    @property
    @pulumi.getter(name="stoppedCount")
    def stopped_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopped_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopped_count")

    @property
    @pulumi.getter(name="stoppingCount")
    def stopping_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopping_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopping_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updatingCount")
    def updating_count(self) -> int:
        """
        The UpdatingCount of Node.
        """
        return pulumi.get(self, "updating_count")


@pulumi.output_type
class EdgeNodePoolsNodePoolTaintContentResult(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: The Effect of Taint.
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        The Effect of Taint.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EdgeNodePoolsStatusResult(dict):
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "conditions_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class EdgeNodesNodeResult(dict):
    def __init__(__self__, *,
                 bootstrap_script: str,
                 cluster_id: str,
                 condition_types: Sequence[str],
                 create_client_token: str,
                 create_time: str,
                 edge_node_type: str,
                 id: str,
                 instance_id: str,
                 name: str,
                 node_pool_id: str,
                 phase: str,
                 profile: str,
                 provider_id: str,
                 update_time: str):
        """
        :param str bootstrap_script: The bootstrap script of node.
        :param str cluster_id: The cluster id of node.
        :param Sequence[str] condition_types: The Condition of Node.
        :param str create_client_token: The Create Client Token.
        :param str create_time: The create time of Node.
        :param str edge_node_type: The edge node type of node.
        :param str id: The ID of Node.
        :param str instance_id: The instance id of node.
        :param str name: The Name of Node.
        :param str node_pool_id: The node pool id.
        :param str phase: The Phase of Node.
        :param str profile: The profile of node. Distinguish between edge and central nodes.
        :param str provider_id: The provider id of node.
        :param str update_time: The update time of Node.
        """
        pulumi.set(__self__, "bootstrap_script", bootstrap_script)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "condition_types", condition_types)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "edge_node_type", edge_node_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_pool_id", node_pool_id)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "provider_id", provider_id)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="bootstrapScript")
    def bootstrap_script(self) -> str:
        """
        The bootstrap script of node.
        """
        return pulumi.get(self, "bootstrap_script")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The cluster id of node.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="conditionTypes")
    def condition_types(self) -> Sequence[str]:
        """
        The Condition of Node.
        """
        return pulumi.get(self, "condition_types")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        The Create Client Token.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of Node.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="edgeNodeType")
    def edge_node_type(self) -> str:
        """
        The edge node type of node.
        """
        return pulumi.get(self, "edge_node_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The instance id of node.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of Node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> str:
        """
        The node pool id.
        """
        return pulumi.get(self, "node_pool_id")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The Phase of Node.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        The profile of node. Distinguish between edge and central nodes.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> str:
        """
        The provider id of node.
        """
        return pulumi.get(self, "provider_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of Node.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class EdgeNodesStatusResult(dict):
    def __init__(__self__, *,
                 edge_node_status_condition_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str edge_node_status_condition_type: The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        :param str phase: The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
        """
        if edge_node_status_condition_type is not None:
            pulumi.set(__self__, "edge_node_status_condition_type", edge_node_status_condition_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="edgeNodeStatusConditionType")
    def edge_node_status_condition_type(self) -> Optional[str]:
        """
        The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        """
        return pulumi.get(self, "edge_node_status_condition_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class NodePoolAutoScaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredReplicas":
            suggest = "desired_replicas"
        elif key == "maxReplicas":
            suggest = "max_replicas"
        elif key == "minReplicas":
            suggest = "min_replicas"
        elif key == "subnetPolicy":
            suggest = "subnet_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolAutoScaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolAutoScaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolAutoScaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_replicas: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 priority: Optional[int] = None,
                 subnet_policy: Optional[str] = None):
        """
        :param int desired_replicas: The DesiredReplicas of AutoScaling, default 0, range in min_replicas to max_replicas.
        :param bool enabled: Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
        :param int max_replicas: The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
        :param int min_replicas: The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
        :param int priority: The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnet_policy` is `Priority`.
        :param str subnet_policy: Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
        """
        if desired_replicas is not None:
            pulumi.set(__self__, "desired_replicas", desired_replicas)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if subnet_policy is not None:
            pulumi.set(__self__, "subnet_policy", subnet_policy)

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> Optional[int]:
        """
        The DesiredReplicas of AutoScaling, default 0, range in min_replicas to max_replicas.
        """
        return pulumi.get(self, "desired_replicas")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        """
        The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        """
        The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnet_policy` is `Priority`.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="subnetPolicy")
    def subnet_policy(self) -> Optional[str]:
        """
        Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
        """
        return pulumi.get(self, "subnet_policy")


@pulumi.output_type
class NodePoolKubernetesConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoSyncDisabled":
            suggest = "auto_sync_disabled"
        elif key == "namePrefix":
            suggest = "name_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolKubernetesConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolKubernetesConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolKubernetesConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cordon: bool,
                 auto_sync_disabled: Optional[bool] = None,
                 labels: Optional[Sequence['outputs.NodePoolKubernetesConfigLabel']] = None,
                 name_prefix: Optional[str] = None,
                 taints: Optional[Sequence['outputs.NodePoolKubernetesConfigTaint']] = None):
        """
        :param bool cordon: The Cordon of KubernetesConfig.
        :param bool auto_sync_disabled: Whether to disable the function of automatically synchronizing labels and taints to existing nodes. Default is false.
        :param Sequence['NodePoolKubernetesConfigLabelArgs'] labels: The Labels of KubernetesConfig.
        :param str name_prefix: The NamePrefix of node metadata.
        :param Sequence['NodePoolKubernetesConfigTaintArgs'] taints: The Taints of KubernetesConfig.
        """
        pulumi.set(__self__, "cordon", cordon)
        if auto_sync_disabled is not None:
            pulumi.set(__self__, "auto_sync_disabled", auto_sync_disabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def cordon(self) -> bool:
        """
        The Cordon of KubernetesConfig.
        """
        return pulumi.get(self, "cordon")

    @property
    @pulumi.getter(name="autoSyncDisabled")
    def auto_sync_disabled(self) -> Optional[bool]:
        """
        Whether to disable the function of automatically synchronizing labels and taints to existing nodes. Default is false.
        """
        return pulumi.get(self, "auto_sync_disabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.NodePoolKubernetesConfigLabel']]:
        """
        The Labels of KubernetesConfig.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        The NamePrefix of node metadata.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.NodePoolKubernetesConfigTaint']]:
        """
        The Taints of KubernetesConfig.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class NodePoolKubernetesConfigLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The Key of Labels.
        :param str value: The Value of Labels.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The Key of Labels.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The Value of Labels.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolKubernetesConfigTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str effect: The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
        :param str key: The Key of Taints.
        :param str value: The Value of Taints.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The Key of Taints.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The Value of Taints.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolNodeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceTypeIds":
            suggest = "instance_type_ids"
        elif key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "additionalContainerStorageEnabled":
            suggest = "additional_container_storage_enabled"
        elif key == "autoRenew":
            suggest = "auto_renew"
        elif key == "autoRenewPeriod":
            suggest = "auto_renew_period"
        elif key == "dataVolumes":
            suggest = "data_volumes"
        elif key == "ecsTags":
            suggest = "ecs_tags"
        elif key == "hpcClusterIds":
            suggest = "hpc_cluster_ids"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "initializeScript":
            suggest = "initialize_script"
        elif key == "instanceChargeType":
            suggest = "instance_charge_type"
        elif key == "namePrefix":
            suggest = "name_prefix"
        elif key == "systemVolume":
            suggest = "system_volume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type_ids: Sequence[str],
                 security: 'outputs.NodePoolNodeConfigSecurity',
                 subnet_ids: Sequence[str],
                 additional_container_storage_enabled: Optional[bool] = None,
                 auto_renew: Optional[bool] = None,
                 auto_renew_period: Optional[int] = None,
                 data_volumes: Optional[Sequence['outputs.NodePoolNodeConfigDataVolume']] = None,
                 ecs_tags: Optional[Sequence['outputs.NodePoolNodeConfigEcsTag']] = None,
                 hpc_cluster_ids: Optional[Sequence[str]] = None,
                 image_id: Optional[str] = None,
                 initialize_script: Optional[str] = None,
                 instance_charge_type: Optional[str] = None,
                 name_prefix: Optional[str] = None,
                 period: Optional[int] = None,
                 system_volume: Optional['outputs.NodePoolNodeConfigSystemVolume'] = None):
        """
        :param Sequence[str] instance_type_ids: The InstanceTypeIds of NodeConfig. The value can get from veecp_get_support_resource_types datasource.
        :param 'NodePoolNodeConfigSecurityArgs' security: The Security of NodeConfig.
        :param Sequence[str] subnet_ids: The SubnetIds of NodeConfig.
        :param bool additional_container_storage_enabled: The AdditionalContainerStorageEnabled of NodeConfig.
        :param bool auto_renew: Is AutoRenew of PrePaid instance of NodeConfig. Valid values: true, false. when InstanceChargeType is PrePaid, default value is true.
        :param int auto_renew_period: The AutoRenewPeriod of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 6, 12. Unit: month. when InstanceChargeType is PrePaid and AutoRenew enable, default value is 1.
        :param Sequence['NodePoolNodeConfigDataVolumeArgs'] data_volumes: The DataVolumes of NodeConfig.
        :param Sequence['NodePoolNodeConfigEcsTagArgs'] ecs_tags: Tags for Ecs.
        :param Sequence[str] hpc_cluster_ids: The IDs of HpcCluster, only one ID is supported currently.
        :param str image_id: The ImageId of NodeConfig.
        :param str initialize_script: The initializeScript of NodeConfig.
        :param str instance_charge_type: The InstanceChargeType of PrePaid instance of NodeConfig. Valid values: PostPaid, PrePaid. Default value: PostPaid.
        :param str name_prefix: The NamePrefix of NodeConfig.
        :param int period: The Period of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36. Unit: month. when InstanceChargeType is PrePaid, default value is 12.
        :param 'NodePoolNodeConfigSystemVolumeArgs' system_volume: The SystemVolume of NodeConfig.
        """
        pulumi.set(__self__, "instance_type_ids", instance_type_ids)
        pulumi.set(__self__, "security", security)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if additional_container_storage_enabled is not None:
            pulumi.set(__self__, "additional_container_storage_enabled", additional_container_storage_enabled)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if auto_renew_period is not None:
            pulumi.set(__self__, "auto_renew_period", auto_renew_period)
        if data_volumes is not None:
            pulumi.set(__self__, "data_volumes", data_volumes)
        if ecs_tags is not None:
            pulumi.set(__self__, "ecs_tags", ecs_tags)
        if hpc_cluster_ids is not None:
            pulumi.set(__self__, "hpc_cluster_ids", hpc_cluster_ids)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if initialize_script is not None:
            pulumi.set(__self__, "initialize_script", initialize_script)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if system_volume is not None:
            pulumi.set(__self__, "system_volume", system_volume)

    @property
    @pulumi.getter(name="instanceTypeIds")
    def instance_type_ids(self) -> Sequence[str]:
        """
        The InstanceTypeIds of NodeConfig. The value can get from veecp_get_support_resource_types datasource.
        """
        return pulumi.get(self, "instance_type_ids")

    @property
    @pulumi.getter
    def security(self) -> 'outputs.NodePoolNodeConfigSecurity':
        """
        The Security of NodeConfig.
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The SubnetIds of NodeConfig.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="additionalContainerStorageEnabled")
    def additional_container_storage_enabled(self) -> Optional[bool]:
        """
        The AdditionalContainerStorageEnabled of NodeConfig.
        """
        return pulumi.get(self, "additional_container_storage_enabled")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[bool]:
        """
        Is AutoRenew of PrePaid instance of NodeConfig. Valid values: true, false. when InstanceChargeType is PrePaid, default value is true.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="autoRenewPeriod")
    def auto_renew_period(self) -> Optional[int]:
        """
        The AutoRenewPeriod of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 6, 12. Unit: month. when InstanceChargeType is PrePaid and AutoRenew enable, default value is 1.
        """
        return pulumi.get(self, "auto_renew_period")

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Optional[Sequence['outputs.NodePoolNodeConfigDataVolume']]:
        """
        The DataVolumes of NodeConfig.
        """
        return pulumi.get(self, "data_volumes")

    @property
    @pulumi.getter(name="ecsTags")
    def ecs_tags(self) -> Optional[Sequence['outputs.NodePoolNodeConfigEcsTag']]:
        """
        Tags for Ecs.
        """
        return pulumi.get(self, "ecs_tags")

    @property
    @pulumi.getter(name="hpcClusterIds")
    def hpc_cluster_ids(self) -> Optional[Sequence[str]]:
        """
        The IDs of HpcCluster, only one ID is supported currently.
        """
        return pulumi.get(self, "hpc_cluster_ids")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        """
        The ImageId of NodeConfig.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="initializeScript")
    def initialize_script(self) -> Optional[str]:
        """
        The initializeScript of NodeConfig.
        """
        return pulumi.get(self, "initialize_script")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[str]:
        """
        The InstanceChargeType of PrePaid instance of NodeConfig. Valid values: PostPaid, PrePaid. Default value: PostPaid.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        The NamePrefix of NodeConfig.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        """
        The Period of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36. Unit: month. when InstanceChargeType is PrePaid, default value is 12.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="systemVolume")
    def system_volume(self) -> Optional['outputs.NodePoolNodeConfigSystemVolume']:
        """
        The SystemVolume of NodeConfig.
        """
        return pulumi.get(self, "system_volume")


@pulumi.output_type
class NodePoolNodeConfigDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPoint":
            suggest = "mount_point"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodeConfigDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodeConfigDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodeConfigDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_point: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str mount_point: The target mount directory of the disk. Must start with `/`.
        :param int size: The Size of DataVolumes, the value range in 20~32768. Default value is `20`.
        :param str type: The Type of DataVolumes, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`. Default value is `ESSD_PL0`.
        """
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        """
        The target mount directory of the disk. Must start with `/`.
        """
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The Size of DataVolumes, the value range in 20~32768. Default value is `20`.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The Type of DataVolumes, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`. Default value is `ESSD_PL0`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolNodeConfigEcsTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolNodeConfigSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "securityStrategies":
            suggest = "security_strategies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodeConfigSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodeConfigSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodeConfigSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 login: Optional['outputs.NodePoolNodeConfigSecurityLogin'] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 security_strategies: Optional[Sequence[str]] = None):
        """
        :param 'NodePoolNodeConfigSecurityLoginArgs' login: The Login of Security.
        :param Sequence[str] security_group_ids: The SecurityGroupIds of Security.
        :param Sequence[str] security_strategies: The SecurityStrategies of Security, the value can be empty or `Hids`.
        """
        if login is not None:
            pulumi.set(__self__, "login", login)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_strategies is not None:
            pulumi.set(__self__, "security_strategies", security_strategies)

    @property
    @pulumi.getter
    def login(self) -> Optional['outputs.NodePoolNodeConfigSecurityLogin']:
        """
        The Login of Security.
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        The SecurityGroupIds of Security.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityStrategies")
    def security_strategies(self) -> Optional[Sequence[str]]:
        """
        The SecurityStrategies of Security, the value can be empty or `Hids`.
        """
        return pulumi.get(self, "security_strategies")


@pulumi.output_type
class NodePoolNodeConfigSecurityLogin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKeyPairName":
            suggest = "ssh_key_pair_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodeConfigSecurityLogin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodeConfigSecurityLogin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodeConfigSecurityLogin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: Optional[str] = None,
                 ssh_key_pair_name: Optional[str] = None):
        """
        :param str password: The Password of Security, this field must be encoded with base64.
        :param str ssh_key_pair_name: The SshKeyPairName of Security.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_key_pair_name is not None:
            pulumi.set(__self__, "ssh_key_pair_name", ssh_key_pair_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The Password of Security, this field must be encoded with base64.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sshKeyPairName")
    def ssh_key_pair_name(self) -> Optional[str]:
        """
        The SshKeyPairName of Security.
        """
        return pulumi.get(self, "ssh_key_pair_name")


@pulumi.output_type
class NodePoolNodeConfigSystemVolume(dict):
    def __init__(__self__, *,
                 size: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int size: The Size of SystemVolume, the value range in 20~2048.
        :param str type: The Type of SystemVolume, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The Size of SystemVolume, the value range in 20~2048.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The Type of SystemVolume, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolNodeStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creatingCount":
            suggest = "creating_count"
        elif key == "deletingCount":
            suggest = "deleting_count"
        elif key == "failedCount":
            suggest = "failed_count"
        elif key == "runningCount":
            suggest = "running_count"
        elif key == "startingCount":
            suggest = "starting_count"
        elif key == "stoppedCount":
            suggest = "stopped_count"
        elif key == "stoppingCount":
            suggest = "stopping_count"
        elif key == "totalCount":
            suggest = "total_count"
        elif key == "updatingCount":
            suggest = "updating_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodeStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodeStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodeStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creating_count: Optional[int] = None,
                 deleting_count: Optional[int] = None,
                 failed_count: Optional[int] = None,
                 running_count: Optional[int] = None,
                 starting_count: Optional[int] = None,
                 stopped_count: Optional[int] = None,
                 stopping_count: Optional[int] = None,
                 total_count: Optional[int] = None,
                 updating_count: Optional[int] = None):
        """
        :param int creating_count: The CreatingCount of Node.
        :param int deleting_count: The DeletingCount of Node.
        :param int failed_count: The FailedCount of Node.
        :param int running_count: The RunningCount of Node.
        :param int starting_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        :param int stopped_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        :param int stopping_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        :param int total_count: The TotalCount of Node.
        :param int updating_count: The UpdatingCount of Node.
        """
        if creating_count is not None:
            pulumi.set(__self__, "creating_count", creating_count)
        if deleting_count is not None:
            pulumi.set(__self__, "deleting_count", deleting_count)
        if failed_count is not None:
            pulumi.set(__self__, "failed_count", failed_count)
        if running_count is not None:
            pulumi.set(__self__, "running_count", running_count)
        if starting_count is not None:
            pulumi.set(__self__, "starting_count", starting_count)
        if stopped_count is not None:
            pulumi.set(__self__, "stopped_count", stopped_count)
        if stopping_count is not None:
            pulumi.set(__self__, "stopping_count", stopping_count)
        if total_count is not None:
            pulumi.set(__self__, "total_count", total_count)
        if updating_count is not None:
            pulumi.set(__self__, "updating_count", updating_count)

    @property
    @pulumi.getter(name="creatingCount")
    def creating_count(self) -> Optional[int]:
        """
        The CreatingCount of Node.
        """
        return pulumi.get(self, "creating_count")

    @property
    @pulumi.getter(name="deletingCount")
    def deleting_count(self) -> Optional[int]:
        """
        The DeletingCount of Node.
        """
        return pulumi.get(self, "deleting_count")

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> Optional[int]:
        """
        The FailedCount of Node.
        """
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter(name="runningCount")
    def running_count(self) -> Optional[int]:
        """
        The RunningCount of Node.
        """
        return pulumi.get(self, "running_count")

    @property
    @pulumi.getter(name="startingCount")
    def starting_count(self) -> Optional[int]:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""starting_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "starting_count")

    @property
    @pulumi.getter(name="stoppedCount")
    def stopped_count(self) -> Optional[int]:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopped_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopped_count")

    @property
    @pulumi.getter(name="stoppingCount")
    def stopping_count(self) -> Optional[int]:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopping_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopping_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> Optional[int]:
        """
        The TotalCount of Node.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updatingCount")
    def updating_count(self) -> Optional[int]:
        """
        The UpdatingCount of Node.
        """
        return pulumi.get(self, "updating_count")


@pulumi.output_type
class NodePoolsNodePoolResult(dict):
    def __init__(__self__, *,
                 additional_container_storage_enabled: bool,
                 auto_renew: bool,
                 auto_renew_period: int,
                 cluster_id: str,
                 condition_types: Sequence[str],
                 cordon: bool,
                 create_client_token: str,
                 create_time: str,
                 data_volumes: Sequence['outputs.NodePoolsNodePoolDataVolumeResult'],
                 desired_replicas: int,
                 ecs_tags: Sequence['outputs.NodePoolsNodePoolEcsTagResult'],
                 enabled: bool,
                 hpc_cluster_ids: Sequence[str],
                 id: str,
                 image_id: str,
                 initialize_script: str,
                 instance_charge_type: str,
                 instance_type_ids: Sequence[str],
                 kube_config_name_prefix: str,
                 label_contents: Sequence['outputs.NodePoolsNodePoolLabelContentResult'],
                 login_key_pair_name: str,
                 login_type: str,
                 max_replicas: int,
                 min_replicas: int,
                 name: str,
                 name_prefix: str,
                 node_statistics: Sequence['outputs.NodePoolsNodePoolNodeStatisticResult'],
                 period: int,
                 phase: str,
                 priority: int,
                 security_group_ids: Sequence[str],
                 security_strategies: Sequence[str],
                 security_strategy_enabled: bool,
                 subnet_ids: Sequence[str],
                 subnet_policy: str,
                 system_volumes: Sequence['outputs.NodePoolsNodePoolSystemVolumeResult'],
                 tags: Sequence['outputs.NodePoolsNodePoolTagResult'],
                 taint_contents: Sequence['outputs.NodePoolsNodePoolTaintContentResult'],
                 update_client_token: str,
                 update_time: str):
        """
        :param bool additional_container_storage_enabled: Is AdditionalContainerStorageEnabled of NodeConfig.
        :param bool auto_renew: Is auto renew of the PrePaid instance of NodeConfig.
        :param int auto_renew_period: The AutoRenewPeriod of the PrePaid instance of NodeConfig.
        :param str cluster_id: The ClusterId of NodePool.
        :param Sequence[str] condition_types: The Condition of Status.
        :param bool cordon: The Cordon of KubernetesConfig.
        :param str create_client_token: The ClientToken when successfully created.
        :param str create_time: The CreateTime of NodePool.
        :param Sequence['NodePoolsNodePoolDataVolumeArgs'] data_volumes: The DataVolume of NodeConfig.
        :param int desired_replicas: The DesiredReplicas of AutoScaling.
        :param Sequence['NodePoolsNodePoolEcsTagArgs'] ecs_tags: Tags for Ecs.
        :param bool enabled: Is Enabled of AutoScaling.
        :param Sequence[str] hpc_cluster_ids: The IDs of HpcCluster.
        :param str id: The Id of NodePool.
        :param str image_id: The ImageId of NodeConfig.
        :param str initialize_script: The InitializeScript of NodeConfig.
        :param str instance_charge_type: The InstanceChargeType of NodeConfig.
        :param Sequence[str] instance_type_ids: The InstanceTypeIds of NodeConfig.
        :param str kube_config_name_prefix: The NamePrefix of node metadata.
        :param Sequence['NodePoolsNodePoolLabelContentArgs'] label_contents: The LabelContent of KubernetesConfig.
        :param str login_key_pair_name: The login SshKeyPairName of NodeConfig.
        :param str login_type: The login type of NodeConfig.
        :param int max_replicas: The MaxReplicas of AutoScaling.
        :param int min_replicas: The MinReplicas of AutoScaling.
        :param str name: The Name of NodePool.
        :param str name_prefix: The NamePrefix of NodeConfig.
        :param Sequence['NodePoolsNodePoolNodeStatisticArgs'] node_statistics: The NodeStatistics of NodeConfig.
        :param int period: The period of the PrePaid instance of NodeConfig.
        :param str phase: The Phase of Status.
        :param int priority: The Priority of AutoScaling.
        :param Sequence[str] security_group_ids: The SecurityGroupIds of NodeConfig.
        :param Sequence[str] security_strategies: The SecurityStrategies of NodeConfig.
        :param bool security_strategy_enabled: The SecurityStrategyEnabled of NodeConfig.
        :param Sequence[str] subnet_ids: The SubnetId of NodeConfig.
        :param str subnet_policy: Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
        :param Sequence['NodePoolsNodePoolSystemVolumeArgs'] system_volumes: The SystemVolume of NodeConfig.
        :param Sequence['NodePoolsNodePoolTagArgs'] tags: Tags of the NodePool.
        :param Sequence['NodePoolsNodePoolTaintContentArgs'] taint_contents: The TaintContent of NodeConfig.
        :param str update_client_token: The ClientToken when last update was successful.
        :param str update_time: The UpdateTime time of NodePool.
        """
        pulumi.set(__self__, "additional_container_storage_enabled", additional_container_storage_enabled)
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "auto_renew_period", auto_renew_period)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "condition_types", condition_types)
        pulumi.set(__self__, "cordon", cordon)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_volumes", data_volumes)
        pulumi.set(__self__, "desired_replicas", desired_replicas)
        pulumi.set(__self__, "ecs_tags", ecs_tags)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "hpc_cluster_ids", hpc_cluster_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "initialize_script", initialize_script)
        pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        pulumi.set(__self__, "instance_type_ids", instance_type_ids)
        pulumi.set(__self__, "kube_config_name_prefix", kube_config_name_prefix)
        pulumi.set(__self__, "label_contents", label_contents)
        pulumi.set(__self__, "login_key_pair_name", login_key_pair_name)
        pulumi.set(__self__, "login_type", login_type)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_prefix", name_prefix)
        pulumi.set(__self__, "node_statistics", node_statistics)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "security_strategies", security_strategies)
        pulumi.set(__self__, "security_strategy_enabled", security_strategy_enabled)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "subnet_policy", subnet_policy)
        pulumi.set(__self__, "system_volumes", system_volumes)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "taint_contents", taint_contents)
        pulumi.set(__self__, "update_client_token", update_client_token)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="additionalContainerStorageEnabled")
    def additional_container_storage_enabled(self) -> bool:
        """
        Is AdditionalContainerStorageEnabled of NodeConfig.
        """
        return pulumi.get(self, "additional_container_storage_enabled")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> bool:
        """
        Is auto renew of the PrePaid instance of NodeConfig.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="autoRenewPeriod")
    def auto_renew_period(self) -> int:
        """
        The AutoRenewPeriod of the PrePaid instance of NodeConfig.
        """
        return pulumi.get(self, "auto_renew_period")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="conditionTypes")
    def condition_types(self) -> Sequence[str]:
        """
        The Condition of Status.
        """
        return pulumi.get(self, "condition_types")

    @property
    @pulumi.getter
    def cordon(self) -> bool:
        """
        The Cordon of KubernetesConfig.
        """
        return pulumi.get(self, "cordon")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        The ClientToken when successfully created.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The CreateTime of NodePool.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Sequence['outputs.NodePoolsNodePoolDataVolumeResult']:
        """
        The DataVolume of NodeConfig.
        """
        return pulumi.get(self, "data_volumes")

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> int:
        """
        The DesiredReplicas of AutoScaling.
        """
        return pulumi.get(self, "desired_replicas")

    @property
    @pulumi.getter(name="ecsTags")
    def ecs_tags(self) -> Sequence['outputs.NodePoolsNodePoolEcsTagResult']:
        """
        Tags for Ecs.
        """
        return pulumi.get(self, "ecs_tags")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Is Enabled of AutoScaling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hpcClusterIds")
    def hpc_cluster_ids(self) -> Sequence[str]:
        """
        The IDs of HpcCluster.
        """
        return pulumi.get(self, "hpc_cluster_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of NodePool.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        """
        The ImageId of NodeConfig.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="initializeScript")
    def initialize_script(self) -> str:
        """
        The InitializeScript of NodeConfig.
        """
        return pulumi.get(self, "initialize_script")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> str:
        """
        The InstanceChargeType of NodeConfig.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceTypeIds")
    def instance_type_ids(self) -> Sequence[str]:
        """
        The InstanceTypeIds of NodeConfig.
        """
        return pulumi.get(self, "instance_type_ids")

    @property
    @pulumi.getter(name="kubeConfigNamePrefix")
    def kube_config_name_prefix(self) -> str:
        """
        The NamePrefix of node metadata.
        """
        return pulumi.get(self, "kube_config_name_prefix")

    @property
    @pulumi.getter(name="labelContents")
    def label_contents(self) -> Sequence['outputs.NodePoolsNodePoolLabelContentResult']:
        """
        The LabelContent of KubernetesConfig.
        """
        return pulumi.get(self, "label_contents")

    @property
    @pulumi.getter(name="loginKeyPairName")
    def login_key_pair_name(self) -> str:
        """
        The login SshKeyPairName of NodeConfig.
        """
        return pulumi.get(self, "login_key_pair_name")

    @property
    @pulumi.getter(name="loginType")
    def login_type(self) -> str:
        """
        The login type of NodeConfig.
        """
        return pulumi.get(self, "login_type")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        The MaxReplicas of AutoScaling.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        """
        The MinReplicas of AutoScaling.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> str:
        """
        The NamePrefix of NodeConfig.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nodeStatistics")
    def node_statistics(self) -> Sequence['outputs.NodePoolsNodePoolNodeStatisticResult']:
        """
        The NodeStatistics of NodeConfig.
        """
        return pulumi.get(self, "node_statistics")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        The period of the PrePaid instance of NodeConfig.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The Priority of AutoScaling.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The SecurityGroupIds of NodeConfig.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityStrategies")
    def security_strategies(self) -> Sequence[str]:
        """
        The SecurityStrategies of NodeConfig.
        """
        return pulumi.get(self, "security_strategies")

    @property
    @pulumi.getter(name="securityStrategyEnabled")
    def security_strategy_enabled(self) -> bool:
        """
        The SecurityStrategyEnabled of NodeConfig.
        """
        return pulumi.get(self, "security_strategy_enabled")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The SubnetId of NodeConfig.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="subnetPolicy")
    def subnet_policy(self) -> str:
        """
        Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
        """
        return pulumi.get(self, "subnet_policy")

    @property
    @pulumi.getter(name="systemVolumes")
    def system_volumes(self) -> Sequence['outputs.NodePoolsNodePoolSystemVolumeResult']:
        """
        The SystemVolume of NodeConfig.
        """
        return pulumi.get(self, "system_volumes")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.NodePoolsNodePoolTagResult']:
        """
        Tags of the NodePool.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taintContents")
    def taint_contents(self) -> Sequence['outputs.NodePoolsNodePoolTaintContentResult']:
        """
        The TaintContent of NodeConfig.
        """
        return pulumi.get(self, "taint_contents")

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> str:
        """
        The ClientToken when last update was successful.
        """
        return pulumi.get(self, "update_client_token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The UpdateTime time of NodePool.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class NodePoolsNodePoolDataVolumeResult(dict):
    def __init__(__self__, *,
                 mount_point: str,
                 size: str,
                 type: str):
        """
        :param str mount_point: The target mount directory of the disk.
        :param str size: The Size of SystemVolume.
        :param str type: The Type of Tags.
        """
        pulumi.set(__self__, "mount_point", mount_point)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> str:
        """
        The target mount directory of the disk.
        """
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The Size of SystemVolume.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Tags.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolsNodePoolEcsTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolsNodePoolLabelContentResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolsNodePoolNodeStatisticResult(dict):
    def __init__(__self__, *,
                 creating_count: int,
                 deleting_count: int,
                 failed_count: int,
                 running_count: int,
                 starting_count: int,
                 stopped_count: int,
                 stopping_count: int,
                 total_count: int,
                 updating_count: int):
        """
        :param int creating_count: The CreatingCount of Node.
        :param int deleting_count: The DeletingCount of Node.
        :param int failed_count: The FailedCount of Node.
        :param int running_count: The RunningCount of Node.
        :param int starting_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        :param int stopped_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        :param int stopping_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        :param int total_count: The total count of query.
        :param int updating_count: The UpdatingCount of Node.
        """
        pulumi.set(__self__, "creating_count", creating_count)
        pulumi.set(__self__, "deleting_count", deleting_count)
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "running_count", running_count)
        pulumi.set(__self__, "starting_count", starting_count)
        pulumi.set(__self__, "stopped_count", stopped_count)
        pulumi.set(__self__, "stopping_count", stopping_count)
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "updating_count", updating_count)

    @property
    @pulumi.getter(name="creatingCount")
    def creating_count(self) -> int:
        """
        The CreatingCount of Node.
        """
        return pulumi.get(self, "creating_count")

    @property
    @pulumi.getter(name="deletingCount")
    def deleting_count(self) -> int:
        """
        The DeletingCount of Node.
        """
        return pulumi.get(self, "deleting_count")

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> int:
        """
        The FailedCount of Node.
        """
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter(name="runningCount")
    def running_count(self) -> int:
        """
        The RunningCount of Node.
        """
        return pulumi.get(self, "running_count")

    @property
    @pulumi.getter(name="startingCount")
    def starting_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""starting_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "starting_count")

    @property
    @pulumi.getter(name="stoppedCount")
    def stopped_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopped_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopped_count")

    @property
    @pulumi.getter(name="stoppingCount")
    def stopping_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopping_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopping_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updatingCount")
    def updating_count(self) -> int:
        """
        The UpdatingCount of Node.
        """
        return pulumi.get(self, "updating_count")


@pulumi.output_type
class NodePoolsNodePoolSystemVolumeResult(dict):
    def __init__(__self__, *,
                 size: str,
                 type: str):
        """
        :param str size: The Size of SystemVolume.
        :param str type: The Type of Tags.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The Size of SystemVolume.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Tags.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolsNodePoolTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 type: str,
                 value: str):
        """
        :param str key: The Key of Taint.
        :param str type: The Type of Tags.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Tags.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolsNodePoolTaintContentResult(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: The Effect of Taint.
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        The Effect of Taint.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolsStatusResult(dict):
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "conditions_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class SupportAddonsAddonResult(dict):
    def __init__(__self__, *,
                 deploy_modes: Sequence[str],
                 deploy_node_types: Sequence[str],
                 name: str,
                 pod_network_modes: Sequence[str],
                 versions: Sequence['outputs.SupportAddonsAddonVersionResult'],
                 categories: Optional[Sequence[str]] = None,
                 necessary: Optional[str] = None):
        """
        :param Sequence[str] deploy_modes: The deploy model, the value is `Managed` or `Unmanaged`.
        :param Sequence[str] deploy_node_types: The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        :param str name: The name of the addon.
        :param Sequence[str] pod_network_modes: The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        :param Sequence['SupportAddonsAddonVersionArgs'] versions: The version info of addon.
        :param Sequence[str] categories: The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
        :param str necessary: The necessary of addon.
        """
        pulumi.set(__self__, "deploy_modes", deploy_modes)
        pulumi.set(__self__, "deploy_node_types", deploy_node_types)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pod_network_modes", pod_network_modes)
        pulumi.set(__self__, "versions", versions)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if necessary is not None:
            pulumi.set(__self__, "necessary", necessary)

    @property
    @pulumi.getter(name="deployModes")
    def deploy_modes(self) -> Sequence[str]:
        """
        The deploy model, the value is `Managed` or `Unmanaged`.
        """
        return pulumi.get(self, "deploy_modes")

    @property
    @pulumi.getter(name="deployNodeTypes")
    def deploy_node_types(self) -> Sequence[str]:
        """
        The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        """
        return pulumi.get(self, "deploy_node_types")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the addon.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="podNetworkModes")
    def pod_network_modes(self) -> Sequence[str]:
        """
        The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        """
        return pulumi.get(self, "pod_network_modes")

    @property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.SupportAddonsAddonVersionResult']:
        """
        The version info of addon.
        """
        return pulumi.get(self, "versions")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[str]]:
        """
        The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def necessary(self) -> Optional[str]:
        """
        The necessary of addon.
        """
        return pulumi.get(self, "necessary")


@pulumi.output_type
class SupportAddonsAddonVersionResult(dict):
    def __init__(__self__, *,
                 compatibilities: Sequence['outputs.SupportAddonsAddonVersionCompatibilityResult'],
                 compatible_versions: Sequence[str],
                 version: str):
        """
        :param Sequence['SupportAddonsAddonVersionCompatibilityArgs'] compatibilities: The compatible version list.
        :param Sequence[str] compatible_versions: The compatible version list.
        :param str version: The basic version info.
        """
        pulumi.set(__self__, "compatibilities", compatibilities)
        pulumi.set(__self__, "compatible_versions", compatible_versions)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def compatibilities(self) -> Sequence['outputs.SupportAddonsAddonVersionCompatibilityResult']:
        """
        The compatible version list.
        """
        return pulumi.get(self, "compatibilities")

    @property
    @pulumi.getter(name="compatibleVersions")
    def compatible_versions(self) -> Sequence[str]:
        """
        The compatible version list.
        """
        return pulumi.get(self, "compatible_versions")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The basic version info.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class SupportAddonsAddonVersionCompatibilityResult(dict):
    def __init__(__self__, *,
                 kubernetes_version: str):
        """
        :param str kubernetes_version: The Kubernetes Version of addon.
        """
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> str:
        """
        The Kubernetes Version of addon.
        """
        return pulumi.get(self, "kubernetes_version")


@pulumi.output_type
class SupportResourceTypesResourceResult(dict):
    def __init__(__self__, *,
                 resource_scope: str,
                 resource_specifications: Sequence[str],
                 resource_type: str,
                 zone_id: str):
        """
        :param str resource_scope: The scope of resource.
        :param Sequence[str] resource_specifications: The resource specifications info.
        :param str resource_type: The type of resource.
        :param str zone_id: The id of zone.
        """
        pulumi.set(__self__, "resource_scope", resource_scope)
        pulumi.set(__self__, "resource_specifications", resource_specifications)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="resourceScope")
    def resource_scope(self) -> str:
        """
        The scope of resource.
        """
        return pulumi.get(self, "resource_scope")

    @property
    @pulumi.getter(name="resourceSpecifications")
    def resource_specifications(self) -> Sequence[str]:
        """
        The resource specifications info.
        """
        return pulumi.get(self, "resource_specifications")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The type of resource.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The id of zone.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetAddonsAddonResult(dict):
    def __init__(__self__, *,
                 deploy_mode: str,
                 deploy_node_types: Sequence[str],
                 name: str,
                 pod_network_modes: Sequence[str],
                 versions: Sequence['outputs.GetAddonsAddonVersionResult'],
                 categories: Optional[Sequence[str]] = None,
                 necessary: Optional[str] = None):
        """
        :param str deploy_mode: The deploy model.
        :param Sequence[str] deploy_node_types: The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        :param str name: The name of the addon.
        :param Sequence[str] pod_network_modes: The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        :param Sequence['GetAddonsAddonVersionArgs'] versions: The version info of addon.
        :param Sequence[str] categories: The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
        :param str necessary: The necessary of addon.
        """
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        pulumi.set(__self__, "deploy_node_types", deploy_node_types)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pod_network_modes", pod_network_modes)
        pulumi.set(__self__, "versions", versions)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if necessary is not None:
            pulumi.set(__self__, "necessary", necessary)

    @property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> str:
        """
        The deploy model.
        """
        return pulumi.get(self, "deploy_mode")

    @property
    @pulumi.getter(name="deployNodeTypes")
    def deploy_node_types(self) -> Sequence[str]:
        """
        The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        """
        return pulumi.get(self, "deploy_node_types")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the addon.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="podNetworkModes")
    def pod_network_modes(self) -> Sequence[str]:
        """
        The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        """
        return pulumi.get(self, "pod_network_modes")

    @property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.GetAddonsAddonVersionResult']:
        """
        The version info of addon.
        """
        return pulumi.get(self, "versions")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[str]]:
        """
        The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def necessary(self) -> Optional[str]:
        """
        The necessary of addon.
        """
        return pulumi.get(self, "necessary")


@pulumi.output_type
class GetAddonsAddonVersionResult(dict):
    def __init__(__self__, *,
                 compatibilities: Sequence['outputs.GetAddonsAddonVersionCompatibilityResult'],
                 compatible_versions: Sequence[str],
                 version: str):
        """
        :param Sequence['GetAddonsAddonVersionCompatibilityArgs'] compatibilities: The compatible version list.
        :param Sequence[str] compatible_versions: The compatible version list.
        :param str version: The basic version info.
        """
        pulumi.set(__self__, "compatibilities", compatibilities)
        pulumi.set(__self__, "compatible_versions", compatible_versions)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def compatibilities(self) -> Sequence['outputs.GetAddonsAddonVersionCompatibilityResult']:
        """
        The compatible version list.
        """
        return pulumi.get(self, "compatibilities")

    @property
    @pulumi.getter(name="compatibleVersions")
    def compatible_versions(self) -> Sequence[str]:
        """
        The compatible version list.
        """
        return pulumi.get(self, "compatible_versions")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The basic version info.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAddonsAddonVersionCompatibilityResult(dict):
    def __init__(__self__, *,
                 kubernetes_version: str):
        """
        :param str kubernetes_version: The Kubernetes Version of addon.
        """
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> str:
        """
        The Kubernetes Version of addon.
        """
        return pulumi.get(self, "kubernetes_version")


@pulumi.output_type
class GetBatchEdgeMachinesMachineResult(dict):
    def __init__(__self__, *,
                 bootstrap_script: str,
                 cluster_id: str,
                 condition_types: Sequence[str],
                 create_client_token: str,
                 create_time: str,
                 edge_node_type: str,
                 id: str,
                 name: str,
                 phase: str,
                 profile: str,
                 ttl_time: int,
                 update_time: str):
        """
        :param str bootstrap_script: The bootstrap script.
        :param str cluster_id: The ClusterId of NodePool.
        :param Sequence[str] condition_types: The Condition of Status.
        :param str create_client_token: The ClientToken when successfully created.
        :param str create_time: The CreateTime of NodePool.
        :param str edge_node_type: Edge node type.
        :param str id: The Id of NodePool.
        :param str name: The Name of NodePool.
        :param str phase: The Phase of Status.
        :param str profile: Edge: Edge node pool. If the return value is empty, it is the central node pool.
        :param int ttl_time: The TTL time.
        :param str update_time: The UpdateTime time of NodePool.
        """
        pulumi.set(__self__, "bootstrap_script", bootstrap_script)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "condition_types", condition_types)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "edge_node_type", edge_node_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "ttl_time", ttl_time)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="bootstrapScript")
    def bootstrap_script(self) -> str:
        """
        The bootstrap script.
        """
        return pulumi.get(self, "bootstrap_script")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="conditionTypes")
    def condition_types(self) -> Sequence[str]:
        """
        The Condition of Status.
        """
        return pulumi.get(self, "condition_types")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        The ClientToken when successfully created.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The CreateTime of NodePool.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="edgeNodeType")
    def edge_node_type(self) -> str:
        """
        Edge node type.
        """
        return pulumi.get(self, "edge_node_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of NodePool.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        Edge: Edge node pool. If the return value is empty, it is the central node pool.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="ttlTime")
    def ttl_time(self) -> int:
        """
        The TTL time.
        """
        return pulumi.get(self, "ttl_time")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The UpdateTime time of NodePool.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetBatchEdgeMachinesStatusResult(dict):
    def __init__(__self__, *,
                 edge_node_status_condition_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str edge_node_status_condition_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if edge_node_status_condition_type is not None:
            pulumi.set(__self__, "edge_node_status_condition_type", edge_node_status_condition_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="edgeNodeStatusConditionType")
    def edge_node_status_condition_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "edge_node_status_condition_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 cluster_config: 'outputs.GetClustersClusterClusterConfigResult',
                 create_client_token: str,
                 create_time: str,
                 delete_protection_enabled: bool,
                 description: str,
                 id: str,
                 kubernetes_version: str,
                 logging_configs: Sequence['outputs.GetClustersClusterLoggingConfigResult'],
                 name: str,
                 node_statistics: 'outputs.GetClustersClusterNodeStatisticsResult',
                 pods_config: 'outputs.GetClustersClusterPodsConfigResult',
                 services_config: 'outputs.GetClustersClusterServicesConfigResult',
                 statuses: Sequence['outputs.GetClustersClusterStatusResult'],
                 update_client_token: str,
                 update_time: str):
        """
        :param 'GetClustersClusterClusterConfigArgs' cluster_config: The config of the cluster.
        :param str create_client_token: ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        :param str create_time: Cluster creation time. UTC+0 time in standard RFC3339 format.
        :param bool delete_protection_enabled: Cluster deletion protection. Values: true: Enable deletion protection. false: Disable deletion protection.
        :param str description: Cluster description information.
        :param str id: The ID of the cluster.
        :param str kubernetes_version: Kubernetes version information corresponding to the cluster, specific to the patch version.
        :param Sequence['GetClustersClusterLoggingConfigArgs'] logging_configs: Cluster log configuration information.
        :param str name: Cluster name.
        :param 'GetClustersClusterNodeStatisticsArgs' node_statistics: Statistics on the number of nodes corresponding to each master state in the cluster.
        :param 'GetClustersClusterPodsConfigArgs' pods_config: The config of the pods.
        :param 'GetClustersClusterServicesConfigArgs' services_config: The config of the services.
        :param Sequence['GetClustersClusterStatusArgs'] statuses: Cluster status. For detailed instructions, please refer to ClusterStatusResponse.
        :param str update_client_token: The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        :param str update_time: The time when the cluster last accepted a request and executed or completed execution. UTC+0 time in standard RFC3339 format.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "delete_protection_enabled", delete_protection_enabled)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        pulumi.set(__self__, "logging_configs", logging_configs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_statistics", node_statistics)
        pulumi.set(__self__, "pods_config", pods_config)
        pulumi.set(__self__, "services_config", services_config)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "update_client_token", update_client_token)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> 'outputs.GetClustersClusterClusterConfigResult':
        """
        The config of the cluster.
        """
        return pulumi.get(self, "cluster_config")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Cluster creation time. UTC+0 time in standard RFC3339 format.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteProtectionEnabled")
    def delete_protection_enabled(self) -> bool:
        """
        Cluster deletion protection. Values: true: Enable deletion protection. false: Disable deletion protection.
        """
        return pulumi.get(self, "delete_protection_enabled")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Cluster description information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> str:
        """
        Kubernetes version information corresponding to the cluster, specific to the patch version.
        """
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter(name="loggingConfigs")
    def logging_configs(self) -> Sequence['outputs.GetClustersClusterLoggingConfigResult']:
        """
        Cluster log configuration information.
        """
        return pulumi.get(self, "logging_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeStatistics")
    def node_statistics(self) -> 'outputs.GetClustersClusterNodeStatisticsResult':
        """
        Statistics on the number of nodes corresponding to each master state in the cluster.
        """
        return pulumi.get(self, "node_statistics")

    @property
    @pulumi.getter(name="podsConfig")
    def pods_config(self) -> 'outputs.GetClustersClusterPodsConfigResult':
        """
        The config of the pods.
        """
        return pulumi.get(self, "pods_config")

    @property
    @pulumi.getter(name="servicesConfig")
    def services_config(self) -> 'outputs.GetClustersClusterServicesConfigResult':
        """
        The config of the services.
        """
        return pulumi.get(self, "services_config")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetClustersClusterStatusResult']:
        """
        Cluster status. For detailed instructions, please refer to ClusterStatusResponse.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> str:
        """
        The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        """
        return pulumi.get(self, "update_client_token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time when the cluster last accepted a request and executed or completed execution. UTC+0 time in standard RFC3339 format.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetClustersClusterClusterConfigResult(dict):
    def __init__(__self__, *,
                 api_server_endpoints: 'outputs.GetClustersClusterClusterConfigApiServerEndpointsResult',
                 api_server_public_access_config: 'outputs.GetClustersClusterClusterConfigApiServerPublicAccessConfigResult',
                 api_server_public_access_enabled: bool,
                 resource_public_access_default_enabled: bool,
                 security_group_ids: Sequence[str],
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param 'GetClustersClusterClusterConfigApiServerEndpointsArgs' api_server_endpoints: Endpoint information accessed by the cluster API Server.
        :param 'GetClustersClusterClusterConfigApiServerPublicAccessConfigArgs' api_server_public_access_config: Cluster API Server public network access configuration.
        :param bool api_server_public_access_enabled: Cluster API Server public network access configuration, the value is `true` or `false`.
        :param bool resource_public_access_default_enabled: Node public network access configuration, the value is `true` or `false`.
        :param Sequence[str] security_group_ids: The security group used by the cluster control plane and nodes.
        :param Sequence[str] subnet_ids: A list of Pod subnet IDs for the VPC-CNI container network.
        :param str vpc_id: The private network where the cluster control plane network resides.
        """
        pulumi.set(__self__, "api_server_endpoints", api_server_endpoints)
        pulumi.set(__self__, "api_server_public_access_config", api_server_public_access_config)
        pulumi.set(__self__, "api_server_public_access_enabled", api_server_public_access_enabled)
        pulumi.set(__self__, "resource_public_access_default_enabled", resource_public_access_default_enabled)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="apiServerEndpoints")
    def api_server_endpoints(self) -> 'outputs.GetClustersClusterClusterConfigApiServerEndpointsResult':
        """
        Endpoint information accessed by the cluster API Server.
        """
        return pulumi.get(self, "api_server_endpoints")

    @property
    @pulumi.getter(name="apiServerPublicAccessConfig")
    def api_server_public_access_config(self) -> 'outputs.GetClustersClusterClusterConfigApiServerPublicAccessConfigResult':
        """
        Cluster API Server public network access configuration.
        """
        return pulumi.get(self, "api_server_public_access_config")

    @property
    @pulumi.getter(name="apiServerPublicAccessEnabled")
    def api_server_public_access_enabled(self) -> bool:
        """
        Cluster API Server public network access configuration, the value is `true` or `false`.
        """
        return pulumi.get(self, "api_server_public_access_enabled")

    @property
    @pulumi.getter(name="resourcePublicAccessDefaultEnabled")
    def resource_public_access_default_enabled(self) -> bool:
        """
        Node public network access configuration, the value is `true` or `false`.
        """
        return pulumi.get(self, "resource_public_access_default_enabled")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The security group used by the cluster control plane and nodes.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        A list of Pod subnet IDs for the VPC-CNI container network.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The private network where the cluster control plane network resides.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetClustersClusterClusterConfigApiServerEndpointsResult(dict):
    def __init__(__self__, *,
                 private_ip: 'outputs.GetClustersClusterClusterConfigApiServerEndpointsPrivateIpResult',
                 public_ip: 'outputs.GetClustersClusterClusterConfigApiServerEndpointsPublicIpResult'):
        """
        :param 'GetClustersClusterClusterConfigApiServerEndpointsPrivateIpArgs' private_ip: Endpoint address of the cluster API Server private network.
        :param 'GetClustersClusterClusterConfigApiServerEndpointsPublicIpArgs' public_ip: Endpoint address of the cluster API Server public network.
        """
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> 'outputs.GetClustersClusterClusterConfigApiServerEndpointsPrivateIpResult':
        """
        Endpoint address of the cluster API Server private network.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> 'outputs.GetClustersClusterClusterConfigApiServerEndpointsPublicIpResult':
        """
        Endpoint address of the cluster API Server public network.
        """
        return pulumi.get(self, "public_ip")


@pulumi.output_type
class GetClustersClusterClusterConfigApiServerEndpointsPrivateIpResult(dict):
    def __init__(__self__, *,
                 ipv4: str):
        """
        :param str ipv4: Ipv4 address.
        """
        pulumi.set(__self__, "ipv4", ipv4)

    @property
    @pulumi.getter
    def ipv4(self) -> str:
        """
        Ipv4 address.
        """
        return pulumi.get(self, "ipv4")


@pulumi.output_type
class GetClustersClusterClusterConfigApiServerEndpointsPublicIpResult(dict):
    def __init__(__self__, *,
                 ipv4: str):
        """
        :param str ipv4: Ipv4 address.
        """
        pulumi.set(__self__, "ipv4", ipv4)

    @property
    @pulumi.getter
    def ipv4(self) -> str:
        """
        Ipv4 address.
        """
        return pulumi.get(self, "ipv4")


@pulumi.output_type
class GetClustersClusterClusterConfigApiServerPublicAccessConfigResult(dict):
    def __init__(__self__, *,
                 access_source_ipsv4s: Sequence[str],
                 ip_family: str,
                 public_access_network_config: 'outputs.GetClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult'):
        """
        :param Sequence[str] access_source_ipsv4s: IPv4 public network access whitelist. A null value means all network segments (0.0.0.0/0) are allowed to pass.
        :param str ip_family: [SkipDoc]The IpFamily configuration,the value is `Ipv4` or `DualStack`.
        :param 'GetClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs' public_access_network_config: Public network access network configuration.
        """
        pulumi.set(__self__, "access_source_ipsv4s", access_source_ipsv4s)
        pulumi.set(__self__, "ip_family", ip_family)
        pulumi.set(__self__, "public_access_network_config", public_access_network_config)

    @property
    @pulumi.getter(name="accessSourceIpsv4s")
    def access_source_ipsv4s(self) -> Sequence[str]:
        """
        IPv4 public network access whitelist. A null value means all network segments (0.0.0.0/0) are allowed to pass.
        """
        return pulumi.get(self, "access_source_ipsv4s")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> str:
        """
        [SkipDoc]The IpFamily configuration,the value is `Ipv4` or `DualStack`.
        """
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="publicAccessNetworkConfig")
    def public_access_network_config(self) -> 'outputs.GetClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult':
        """
        Public network access network configuration.
        """
        return pulumi.get(self, "public_access_network_config")


@pulumi.output_type
class GetClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 billing_type: str,
                 isp: str):
        """
        :param int bandwidth: The peak bandwidth of the public IP, unit: Mbps.
        :param str billing_type: Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        :param str isp: The ISP of public IP.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "billing_type", billing_type)
        pulumi.set(__self__, "isp", isp)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The peak bandwidth of the public IP, unit: Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> str:
        """
        Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter
    def isp(self) -> str:
        """
        The ISP of public IP.
        """
        return pulumi.get(self, "isp")


@pulumi.output_type
class GetClustersClusterLoggingConfigResult(dict):
    def __init__(__self__, *,
                 log_project_id: str,
                 log_setups: Sequence['outputs.GetClustersClusterLoggingConfigLogSetupResult']):
        """
        :param str log_project_id: The TLS log item ID of the collection target.
        :param Sequence['GetClustersClusterLoggingConfigLogSetupArgs'] log_setups: Cluster logging options.
        """
        pulumi.set(__self__, "log_project_id", log_project_id)
        pulumi.set(__self__, "log_setups", log_setups)

    @property
    @pulumi.getter(name="logProjectId")
    def log_project_id(self) -> str:
        """
        The TLS log item ID of the collection target.
        """
        return pulumi.get(self, "log_project_id")

    @property
    @pulumi.getter(name="logSetups")
    def log_setups(self) -> Sequence['outputs.GetClustersClusterLoggingConfigLogSetupResult']:
        """
        Cluster logging options.
        """
        return pulumi.get(self, "log_setups")


@pulumi.output_type
class GetClustersClusterLoggingConfigLogSetupResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 log_ttl: int,
                 log_type: str):
        """
        :param bool enabled: Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.
        :param int log_ttl: The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.
        :param str log_type: The currently enabled log type.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "log_ttl", log_ttl)
        pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logTtl")
    def log_ttl(self) -> int:
        """
        The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.
        """
        return pulumi.get(self, "log_ttl")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        """
        The currently enabled log type.
        """
        return pulumi.get(self, "log_type")


@pulumi.output_type
class GetClustersClusterNodeStatisticsResult(dict):
    def __init__(__self__, *,
                 creating_count: int,
                 deleting_count: int,
                 failed_count: int,
                 running_count: int,
                 starting_count: int,
                 stopped_count: int,
                 stopping_count: int,
                 total_count: int,
                 updating_count: int):
        """
        :param int creating_count: Phase=Creating total number of nodes.
        :param int deleting_count: Phase=Deleting total number of nodes.
        :param int failed_count: Phase=Failed total number of nodes.
        :param int running_count: Phase=Running total number of nodes.
        :param int starting_count: Phase=Starting total number of nodes.
        :param int stopped_count: (**Deprecated**) This field has been deprecated and is not recommended for use. Phase=Stopped total number of nodes.
        :param int stopping_count: Phase=Stopping total number of nodes.
        :param int total_count: The total count of query.
        :param int updating_count: Phase=Updating total number of nodes.
        """
        pulumi.set(__self__, "creating_count", creating_count)
        pulumi.set(__self__, "deleting_count", deleting_count)
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "running_count", running_count)
        pulumi.set(__self__, "starting_count", starting_count)
        pulumi.set(__self__, "stopped_count", stopped_count)
        pulumi.set(__self__, "stopping_count", stopping_count)
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "updating_count", updating_count)

    @property
    @pulumi.getter(name="creatingCount")
    def creating_count(self) -> int:
        """
        Phase=Creating total number of nodes.
        """
        return pulumi.get(self, "creating_count")

    @property
    @pulumi.getter(name="deletingCount")
    def deleting_count(self) -> int:
        """
        Phase=Deleting total number of nodes.
        """
        return pulumi.get(self, "deleting_count")

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> int:
        """
        Phase=Failed total number of nodes.
        """
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter(name="runningCount")
    def running_count(self) -> int:
        """
        Phase=Running total number of nodes.
        """
        return pulumi.get(self, "running_count")

    @property
    @pulumi.getter(name="startingCount")
    def starting_count(self) -> int:
        """
        Phase=Starting total number of nodes.
        """
        return pulumi.get(self, "starting_count")

    @property
    @pulumi.getter(name="stoppedCount")
    def stopped_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. Phase=Stopped total number of nodes.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopped_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopped_count")

    @property
    @pulumi.getter(name="stoppingCount")
    def stopping_count(self) -> int:
        """
        Phase=Stopping total number of nodes.
        """
        return pulumi.get(self, "stopping_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updatingCount")
    def updating_count(self) -> int:
        """
        Phase=Updating total number of nodes.
        """
        return pulumi.get(self, "updating_count")


@pulumi.output_type
class GetClustersClusterPodsConfigResult(dict):
    def __init__(__self__, *,
                 flannel_config: 'outputs.GetClustersClusterPodsConfigFlannelConfigResult',
                 pod_network_mode: str,
                 vpc_cni_config: 'outputs.GetClustersClusterPodsConfigVpcCniConfigResult'):
        """
        :param 'GetClustersClusterPodsConfigFlannelConfigArgs' flannel_config: Flannel network configuration.
        :param str pod_network_mode: Container Pod Network Type (CNI), the value is `Flannel` or `VpcCniShared`.
        :param 'GetClustersClusterPodsConfigVpcCniConfigArgs' vpc_cni_config: VPC-CNI network configuration.
        """
        pulumi.set(__self__, "flannel_config", flannel_config)
        pulumi.set(__self__, "pod_network_mode", pod_network_mode)
        pulumi.set(__self__, "vpc_cni_config", vpc_cni_config)

    @property
    @pulumi.getter(name="flannelConfig")
    def flannel_config(self) -> 'outputs.GetClustersClusterPodsConfigFlannelConfigResult':
        """
        Flannel network configuration.
        """
        return pulumi.get(self, "flannel_config")

    @property
    @pulumi.getter(name="podNetworkMode")
    def pod_network_mode(self) -> str:
        """
        Container Pod Network Type (CNI), the value is `Flannel` or `VpcCniShared`.
        """
        return pulumi.get(self, "pod_network_mode")

    @property
    @pulumi.getter(name="vpcCniConfig")
    def vpc_cni_config(self) -> 'outputs.GetClustersClusterPodsConfigVpcCniConfigResult':
        """
        VPC-CNI network configuration.
        """
        return pulumi.get(self, "vpc_cni_config")


@pulumi.output_type
class GetClustersClusterPodsConfigFlannelConfigResult(dict):
    def __init__(__self__, *,
                 max_pods_per_node: int,
                 pod_cidrs: Sequence[str]):
        """
        :param int max_pods_per_node: The maximum number of single-node Pod instances for a Flannel container network.
        :param Sequence[str] pod_cidrs: Pod CIDR for the Flannel container network.
        """
        pulumi.set(__self__, "max_pods_per_node", max_pods_per_node)
        pulumi.set(__self__, "pod_cidrs", pod_cidrs)

    @property
    @pulumi.getter(name="maxPodsPerNode")
    def max_pods_per_node(self) -> int:
        """
        The maximum number of single-node Pod instances for a Flannel container network.
        """
        return pulumi.get(self, "max_pods_per_node")

    @property
    @pulumi.getter(name="podCidrs")
    def pod_cidrs(self) -> Sequence[str]:
        """
        Pod CIDR for the Flannel container network.
        """
        return pulumi.get(self, "pod_cidrs")


@pulumi.output_type
class GetClustersClusterPodsConfigVpcCniConfigResult(dict):
    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param Sequence[str] subnet_ids: A list of Pod subnet IDs for the VPC-CNI container network.
        :param str vpc_id: The private network where the cluster control plane network resides.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        A list of Pod subnet IDs for the VPC-CNI container network.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The private network where the cluster control plane network resides.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetClustersClusterServicesConfigResult(dict):
    def __init__(__self__, *,
                 service_cidrsv4s: Sequence[str]):
        """
        :param Sequence[str] service_cidrsv4s: The IPv4 private network address exposed by the service.
        """
        pulumi.set(__self__, "service_cidrsv4s", service_cidrsv4s)

    @property
    @pulumi.getter(name="serviceCidrsv4s")
    def service_cidrsv4s(self) -> Sequence[str]:
        """
        The IPv4 private network address exposed by the service.
        """
        return pulumi.get(self, "service_cidrsv4s")


@pulumi.output_type
class GetClustersClusterStatusResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetClustersClusterStatusConditionResult'],
                 phase: str):
        """
        :param Sequence['GetClustersClusterStatusConditionArgs'] conditions: The state condition in the current primary state of the cluster, that is, the reason for entering the primary state.
        :param str phase: Cluster status. The value contains `Creating`, `Running`, `Updating`, `Deleting`, `Failed`.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetClustersClusterStatusConditionResult']:
        """
        The state condition in the current primary state of the cluster, that is, the reason for entering the primary state.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        Cluster status. The value contains `Creating`, `Running`, `Updating`, `Deleting`, `Failed`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class GetClustersClusterStatusConditionResult(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClustersStatusResult(dict):
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
        :param str phase: The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
        """
        return pulumi.get(self, "conditions_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class GetEdgeNodePoolsNodePoolResult(dict):
    def __init__(__self__, *,
                 billing_configs: Sequence['outputs.GetEdgeNodePoolsNodePoolBillingConfigResult'],
                 cluster_id: str,
                 condition_types: Sequence[str],
                 create_client_token: str,
                 create_time: str,
                 elastic_configs: Sequence['outputs.GetEdgeNodePoolsNodePoolElasticConfigResult'],
                 id: str,
                 label_contents: Sequence['outputs.GetEdgeNodePoolsNodePoolLabelContentResult'],
                 name: str,
                 node_add_methods: Sequence[str],
                 node_statistics: Sequence['outputs.GetEdgeNodePoolsNodePoolNodeStatisticResult'],
                 phase: str,
                 profile: str,
                 taint_contents: Sequence['outputs.GetEdgeNodePoolsNodePoolTaintContentResult'],
                 type: str,
                 update_client_token: str,
                 update_time: str,
                 vpc_id: str):
        """
        :param Sequence['GetEdgeNodePoolsNodePoolBillingConfigArgs'] billing_configs: The billing configuration.
        :param str cluster_id: The ClusterId of NodePool.
        :param Sequence[str] condition_types: The Condition of Status.
        :param str create_client_token: The ClientToken when successfully created.
        :param str create_time: The CreateTime of NodePool.
        :param Sequence['GetEdgeNodePoolsNodePoolElasticConfigArgs'] elastic_configs: Elastic scaling configuration of node pool.
        :param str id: The Id of NodePool.
        :param Sequence['GetEdgeNodePoolsNodePoolLabelContentArgs'] label_contents: The LabelContent of KubernetesConfig.
        :param str name: The Name of NodePool.
        :param Sequence[str] node_add_methods: The method of adding nodes to the node pool.
        :param Sequence['GetEdgeNodePoolsNodePoolNodeStatisticArgs'] node_statistics: The NodeStatistics of NodeConfig.
        :param str phase: The Phase of Status.
        :param str profile: Edge: Edge node pool. If the return value is empty, it is the central node pool.
        :param Sequence['GetEdgeNodePoolsNodePoolTaintContentArgs'] taint_contents: The TaintContent of NodeConfig.
        :param str type: Node pool type, machine-set: central node pool. edge-machine-set: edge node pool. edge-machine-pool: edge elastic node pool.
        :param str update_client_token: The ClientToken when last update was successful.
        :param str update_time: The UpdateTime time of NodePool.
        :param str vpc_id: The static node pool specifies the node pool to associate with the VPC.
        """
        pulumi.set(__self__, "billing_configs", billing_configs)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "condition_types", condition_types)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "elastic_configs", elastic_configs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label_contents", label_contents)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_add_methods", node_add_methods)
        pulumi.set(__self__, "node_statistics", node_statistics)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "taint_contents", taint_contents)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_client_token", update_client_token)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="billingConfigs")
    def billing_configs(self) -> Sequence['outputs.GetEdgeNodePoolsNodePoolBillingConfigResult']:
        """
        The billing configuration.
        """
        return pulumi.get(self, "billing_configs")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="conditionTypes")
    def condition_types(self) -> Sequence[str]:
        """
        The Condition of Status.
        """
        return pulumi.get(self, "condition_types")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        The ClientToken when successfully created.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The CreateTime of NodePool.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="elasticConfigs")
    def elastic_configs(self) -> Sequence['outputs.GetEdgeNodePoolsNodePoolElasticConfigResult']:
        """
        Elastic scaling configuration of node pool.
        """
        return pulumi.get(self, "elastic_configs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of NodePool.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="labelContents")
    def label_contents(self) -> Sequence['outputs.GetEdgeNodePoolsNodePoolLabelContentResult']:
        """
        The LabelContent of KubernetesConfig.
        """
        return pulumi.get(self, "label_contents")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeAddMethods")
    def node_add_methods(self) -> Sequence[str]:
        """
        The method of adding nodes to the node pool.
        """
        return pulumi.get(self, "node_add_methods")

    @property
    @pulumi.getter(name="nodeStatistics")
    def node_statistics(self) -> Sequence['outputs.GetEdgeNodePoolsNodePoolNodeStatisticResult']:
        """
        The NodeStatistics of NodeConfig.
        """
        return pulumi.get(self, "node_statistics")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        Edge: Edge node pool. If the return value is empty, it is the central node pool.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="taintContents")
    def taint_contents(self) -> Sequence['outputs.GetEdgeNodePoolsNodePoolTaintContentResult']:
        """
        The TaintContent of NodeConfig.
        """
        return pulumi.get(self, "taint_contents")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Node pool type, machine-set: central node pool. edge-machine-set: edge node pool. edge-machine-pool: edge elastic node pool.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> str:
        """
        The ClientToken when last update was successful.
        """
        return pulumi.get(self, "update_client_token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The UpdateTime time of NodePool.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The static node pool specifies the node pool to associate with the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetEdgeNodePoolsNodePoolBillingConfigResult(dict):
    def __init__(__self__, *,
                 auto_renew: bool,
                 pre_paid_period: int,
                 pre_paid_period_number: int):
        """
        :param bool auto_renew: Whether to automatically renew the node pool.
        :param int pre_paid_period: The pre-paid period of the node pool, in months. The value range is 1-9. This parameter takes effect only when the billing_type is PrePaid.
        :param int pre_paid_period_number: Prepaid period number.
        """
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "pre_paid_period", pre_paid_period)
        pulumi.set(__self__, "pre_paid_period_number", pre_paid_period_number)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> bool:
        """
        Whether to automatically renew the node pool.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="prePaidPeriod")
    def pre_paid_period(self) -> int:
        """
        The pre-paid period of the node pool, in months. The value range is 1-9. This parameter takes effect only when the billing_type is PrePaid.
        """
        return pulumi.get(self, "pre_paid_period")

    @property
    @pulumi.getter(name="prePaidPeriodNumber")
    def pre_paid_period_number(self) -> int:
        """
        Prepaid period number.
        """
        return pulumi.get(self, "pre_paid_period_number")


@pulumi.output_type
class GetEdgeNodePoolsNodePoolElasticConfigResult(dict):
    def __init__(__self__, *,
                 auto_scale_configs: Sequence['outputs.GetEdgeNodePoolsNodePoolElasticConfigAutoScaleConfigResult'],
                 cloud_server_identity: str,
                 instance_areas: Sequence['outputs.GetEdgeNodePoolsNodePoolElasticConfigInstanceAreaResult']):
        """
        :param Sequence['GetEdgeNodePoolsNodePoolElasticConfigAutoScaleConfigArgs'] auto_scale_configs: The auto scaling configuration.
        :param str cloud_server_identity: Cloud server identity.
        :param Sequence['GetEdgeNodePoolsNodePoolElasticConfigInstanceAreaArgs'] instance_areas: The information of instance area.
        """
        pulumi.set(__self__, "auto_scale_configs", auto_scale_configs)
        pulumi.set(__self__, "cloud_server_identity", cloud_server_identity)
        pulumi.set(__self__, "instance_areas", instance_areas)

    @property
    @pulumi.getter(name="autoScaleConfigs")
    def auto_scale_configs(self) -> Sequence['outputs.GetEdgeNodePoolsNodePoolElasticConfigAutoScaleConfigResult']:
        """
        The auto scaling configuration.
        """
        return pulumi.get(self, "auto_scale_configs")

    @property
    @pulumi.getter(name="cloudServerIdentity")
    def cloud_server_identity(self) -> str:
        """
        Cloud server identity.
        """
        return pulumi.get(self, "cloud_server_identity")

    @property
    @pulumi.getter(name="instanceAreas")
    def instance_areas(self) -> Sequence['outputs.GetEdgeNodePoolsNodePoolElasticConfigInstanceAreaResult']:
        """
        The information of instance area.
        """
        return pulumi.get(self, "instance_areas")


@pulumi.output_type
class GetEdgeNodePoolsNodePoolElasticConfigAutoScaleConfigResult(dict):
    def __init__(__self__, *,
                 desired_replicas: int,
                 enabled: bool,
                 max_replicas: int,
                 min_replicas: int,
                 priority: int):
        """
        :param int desired_replicas: The DesiredReplicas of AutoScaling.
        :param bool enabled: Whether to enable auto scaling.
        :param int max_replicas: The maximum number of nodes.
        :param int min_replicas: The minimum number of nodes.
        :param int priority: The Priority of AutoScaling.
        """
        pulumi.set(__self__, "desired_replicas", desired_replicas)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> int:
        """
        The DesiredReplicas of AutoScaling.
        """
        return pulumi.get(self, "desired_replicas")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether to enable auto scaling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        The maximum number of nodes.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        """
        The minimum number of nodes.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The Priority of AutoScaling.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetEdgeNodePoolsNodePoolElasticConfigInstanceAreaResult(dict):
    def __init__(__self__, *,
                 area_name: str,
                 cluster_name: str,
                 default_isp: str,
                 external_network_mode: str,
                 isp: str,
                 subnet_identity: str,
                 vpc_identity: str):
        """
        :param str area_name: Region name. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        :param str cluster_name: Cluster name.
        :param str default_isp: Default operator. When using three-line nodes, this parameter can be configured. After configuration, this operator will be used as the default export.
        :param str external_network_mode: Public network configuration of three-line nodes. If it is a single-line node, this parameter will be ignored. Value range: single_interface_multi_ip: Single network card with multiple IPs. single_interface_cmcc_ip: Single network card with China Mobile IP. Relevant permissions need to be opened by submitting a work order. single_interface_cucc_ip: Single network card with China Unicom IP. Relevant permissions need to be opened by submitting a work order. single_interface_ctcc_ip: Single network card with China Telecom IP. Relevant permissions need to be opened by submitting a work order. multi_interface_multi_ip: Multiple network cards with multiple IPs. Relevant permissions need to be opened by submitting a work order. no_interface: No public network network card. Relevant permissions need to be opened by submitting a work order. If this parameter is not configured: When there is a public network network card, single_interface_multi_ip is used by default. When there is no public network network card, no_interface is used by default.
        :param str isp: Operator. You can obtain the regions and operators supported by the instance specification through the ListAvailableResourceInfo interface.
        :param str subnet_identity: Subnet ID.
        :param str vpc_identity: VPC ID.
        """
        pulumi.set(__self__, "area_name", area_name)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "default_isp", default_isp)
        pulumi.set(__self__, "external_network_mode", external_network_mode)
        pulumi.set(__self__, "isp", isp)
        pulumi.set(__self__, "subnet_identity", subnet_identity)
        pulumi.set(__self__, "vpc_identity", vpc_identity)

    @property
    @pulumi.getter(name="areaName")
    def area_name(self) -> str:
        """
        Region name. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
        """
        return pulumi.get(self, "area_name")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="defaultIsp")
    def default_isp(self) -> str:
        """
        Default operator. When using three-line nodes, this parameter can be configured. After configuration, this operator will be used as the default export.
        """
        return pulumi.get(self, "default_isp")

    @property
    @pulumi.getter(name="externalNetworkMode")
    def external_network_mode(self) -> str:
        """
        Public network configuration of three-line nodes. If it is a single-line node, this parameter will be ignored. Value range: single_interface_multi_ip: Single network card with multiple IPs. single_interface_cmcc_ip: Single network card with China Mobile IP. Relevant permissions need to be opened by submitting a work order. single_interface_cucc_ip: Single network card with China Unicom IP. Relevant permissions need to be opened by submitting a work order. single_interface_ctcc_ip: Single network card with China Telecom IP. Relevant permissions need to be opened by submitting a work order. multi_interface_multi_ip: Multiple network cards with multiple IPs. Relevant permissions need to be opened by submitting a work order. no_interface: No public network network card. Relevant permissions need to be opened by submitting a work order. If this parameter is not configured: When there is a public network network card, single_interface_multi_ip is used by default. When there is no public network network card, no_interface is used by default.
        """
        return pulumi.get(self, "external_network_mode")

    @property
    @pulumi.getter
    def isp(self) -> str:
        """
        Operator. You can obtain the regions and operators supported by the instance specification through the ListAvailableResourceInfo interface.
        """
        return pulumi.get(self, "isp")

    @property
    @pulumi.getter(name="subnetIdentity")
    def subnet_identity(self) -> str:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_identity")

    @property
    @pulumi.getter(name="vpcIdentity")
    def vpc_identity(self) -> str:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_identity")


@pulumi.output_type
class GetEdgeNodePoolsNodePoolLabelContentResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetEdgeNodePoolsNodePoolNodeStatisticResult(dict):
    def __init__(__self__, *,
                 creating_count: int,
                 deleting_count: int,
                 failed_count: int,
                 running_count: int,
                 starting_count: int,
                 stopped_count: int,
                 stopping_count: int,
                 total_count: int,
                 updating_count: int):
        """
        :param int creating_count: The CreatingCount of Node.
        :param int deleting_count: The DeletingCount of Node.
        :param int failed_count: The FailedCount of Node.
        :param int running_count: The RunningCount of Node.
        :param int starting_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        :param int stopped_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        :param int stopping_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        :param int total_count: The total count of query.
        :param int updating_count: The UpdatingCount of Node.
        """
        pulumi.set(__self__, "creating_count", creating_count)
        pulumi.set(__self__, "deleting_count", deleting_count)
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "running_count", running_count)
        pulumi.set(__self__, "starting_count", starting_count)
        pulumi.set(__self__, "stopped_count", stopped_count)
        pulumi.set(__self__, "stopping_count", stopping_count)
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "updating_count", updating_count)

    @property
    @pulumi.getter(name="creatingCount")
    def creating_count(self) -> int:
        """
        The CreatingCount of Node.
        """
        return pulumi.get(self, "creating_count")

    @property
    @pulumi.getter(name="deletingCount")
    def deleting_count(self) -> int:
        """
        The DeletingCount of Node.
        """
        return pulumi.get(self, "deleting_count")

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> int:
        """
        The FailedCount of Node.
        """
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter(name="runningCount")
    def running_count(self) -> int:
        """
        The RunningCount of Node.
        """
        return pulumi.get(self, "running_count")

    @property
    @pulumi.getter(name="startingCount")
    def starting_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""starting_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "starting_count")

    @property
    @pulumi.getter(name="stoppedCount")
    def stopped_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopped_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopped_count")

    @property
    @pulumi.getter(name="stoppingCount")
    def stopping_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopping_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopping_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updatingCount")
    def updating_count(self) -> int:
        """
        The UpdatingCount of Node.
        """
        return pulumi.get(self, "updating_count")


@pulumi.output_type
class GetEdgeNodePoolsNodePoolTaintContentResult(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: The Effect of Taint.
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        The Effect of Taint.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetEdgeNodePoolsStatusResult(dict):
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "conditions_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class GetEdgeNodesNodeResult(dict):
    def __init__(__self__, *,
                 bootstrap_script: str,
                 cluster_id: str,
                 condition_types: Sequence[str],
                 create_client_token: str,
                 create_time: str,
                 edge_node_type: str,
                 id: str,
                 instance_id: str,
                 name: str,
                 node_pool_id: str,
                 phase: str,
                 profile: str,
                 provider_id: str,
                 update_time: str):
        """
        :param str bootstrap_script: The bootstrap script of node.
        :param str cluster_id: The cluster id of node.
        :param Sequence[str] condition_types: The Condition of Node.
        :param str create_client_token: The Create Client Token.
        :param str create_time: The create time of Node.
        :param str edge_node_type: The edge node type of node.
        :param str id: The ID of Node.
        :param str instance_id: The instance id of node.
        :param str name: The Name of Node.
        :param str node_pool_id: The node pool id.
        :param str phase: The Phase of Node.
        :param str profile: The profile of node. Distinguish between edge and central nodes.
        :param str provider_id: The provider id of node.
        :param str update_time: The update time of Node.
        """
        pulumi.set(__self__, "bootstrap_script", bootstrap_script)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "condition_types", condition_types)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "edge_node_type", edge_node_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_pool_id", node_pool_id)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "provider_id", provider_id)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="bootstrapScript")
    def bootstrap_script(self) -> str:
        """
        The bootstrap script of node.
        """
        return pulumi.get(self, "bootstrap_script")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The cluster id of node.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="conditionTypes")
    def condition_types(self) -> Sequence[str]:
        """
        The Condition of Node.
        """
        return pulumi.get(self, "condition_types")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        The Create Client Token.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of Node.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="edgeNodeType")
    def edge_node_type(self) -> str:
        """
        The edge node type of node.
        """
        return pulumi.get(self, "edge_node_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The instance id of node.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of Node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> str:
        """
        The node pool id.
        """
        return pulumi.get(self, "node_pool_id")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The Phase of Node.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        The profile of node. Distinguish between edge and central nodes.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> str:
        """
        The provider id of node.
        """
        return pulumi.get(self, "provider_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of Node.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetEdgeNodesStatusResult(dict):
    def __init__(__self__, *,
                 edge_node_status_condition_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str edge_node_status_condition_type: The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        :param str phase: The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
        """
        if edge_node_status_condition_type is not None:
            pulumi.set(__self__, "edge_node_status_condition_type", edge_node_status_condition_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="edgeNodeStatusConditionType")
    def edge_node_status_condition_type(self) -> Optional[str]:
        """
        The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        """
        return pulumi.get(self, "edge_node_status_condition_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class GetNodePoolsNodePoolResult(dict):
    def __init__(__self__, *,
                 additional_container_storage_enabled: bool,
                 auto_renew: bool,
                 auto_renew_period: int,
                 cluster_id: str,
                 condition_types: Sequence[str],
                 cordon: bool,
                 create_client_token: str,
                 create_time: str,
                 data_volumes: Sequence['outputs.GetNodePoolsNodePoolDataVolumeResult'],
                 desired_replicas: int,
                 ecs_tags: Sequence['outputs.GetNodePoolsNodePoolEcsTagResult'],
                 enabled: bool,
                 hpc_cluster_ids: Sequence[str],
                 id: str,
                 image_id: str,
                 initialize_script: str,
                 instance_charge_type: str,
                 instance_type_ids: Sequence[str],
                 kube_config_name_prefix: str,
                 label_contents: Sequence['outputs.GetNodePoolsNodePoolLabelContentResult'],
                 login_key_pair_name: str,
                 login_type: str,
                 max_replicas: int,
                 min_replicas: int,
                 name: str,
                 name_prefix: str,
                 node_statistics: Sequence['outputs.GetNodePoolsNodePoolNodeStatisticResult'],
                 period: int,
                 phase: str,
                 priority: int,
                 security_group_ids: Sequence[str],
                 security_strategies: Sequence[str],
                 security_strategy_enabled: bool,
                 subnet_ids: Sequence[str],
                 subnet_policy: str,
                 system_volumes: Sequence['outputs.GetNodePoolsNodePoolSystemVolumeResult'],
                 tags: Sequence['outputs.GetNodePoolsNodePoolTagResult'],
                 taint_contents: Sequence['outputs.GetNodePoolsNodePoolTaintContentResult'],
                 update_client_token: str,
                 update_time: str):
        """
        :param bool additional_container_storage_enabled: Is AdditionalContainerStorageEnabled of NodeConfig.
        :param bool auto_renew: Is auto renew of the PrePaid instance of NodeConfig.
        :param int auto_renew_period: The AutoRenewPeriod of the PrePaid instance of NodeConfig.
        :param str cluster_id: The ClusterId of NodePool.
        :param Sequence[str] condition_types: The Condition of Status.
        :param bool cordon: The Cordon of KubernetesConfig.
        :param str create_client_token: The ClientToken when successfully created.
        :param str create_time: The CreateTime of NodePool.
        :param Sequence['GetNodePoolsNodePoolDataVolumeArgs'] data_volumes: The DataVolume of NodeConfig.
        :param int desired_replicas: The DesiredReplicas of AutoScaling.
        :param Sequence['GetNodePoolsNodePoolEcsTagArgs'] ecs_tags: Tags for Ecs.
        :param bool enabled: Is Enabled of AutoScaling.
        :param Sequence[str] hpc_cluster_ids: The IDs of HpcCluster.
        :param str id: The Id of NodePool.
        :param str image_id: The ImageId of NodeConfig.
        :param str initialize_script: The InitializeScript of NodeConfig.
        :param str instance_charge_type: The InstanceChargeType of NodeConfig.
        :param Sequence[str] instance_type_ids: The InstanceTypeIds of NodeConfig.
        :param str kube_config_name_prefix: The NamePrefix of node metadata.
        :param Sequence['GetNodePoolsNodePoolLabelContentArgs'] label_contents: The LabelContent of KubernetesConfig.
        :param str login_key_pair_name: The login SshKeyPairName of NodeConfig.
        :param str login_type: The login type of NodeConfig.
        :param int max_replicas: The MaxReplicas of AutoScaling.
        :param int min_replicas: The MinReplicas of AutoScaling.
        :param str name: The Name of NodePool.
        :param str name_prefix: The NamePrefix of NodeConfig.
        :param Sequence['GetNodePoolsNodePoolNodeStatisticArgs'] node_statistics: The NodeStatistics of NodeConfig.
        :param int period: The period of the PrePaid instance of NodeConfig.
        :param str phase: The Phase of Status.
        :param int priority: The Priority of AutoScaling.
        :param Sequence[str] security_group_ids: The SecurityGroupIds of NodeConfig.
        :param Sequence[str] security_strategies: The SecurityStrategies of NodeConfig.
        :param bool security_strategy_enabled: The SecurityStrategyEnabled of NodeConfig.
        :param Sequence[str] subnet_ids: The SubnetId of NodeConfig.
        :param str subnet_policy: Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
        :param Sequence['GetNodePoolsNodePoolSystemVolumeArgs'] system_volumes: The SystemVolume of NodeConfig.
        :param Sequence['GetNodePoolsNodePoolTagArgs'] tags: Tags of the NodePool.
        :param Sequence['GetNodePoolsNodePoolTaintContentArgs'] taint_contents: The TaintContent of NodeConfig.
        :param str update_client_token: The ClientToken when last update was successful.
        :param str update_time: The UpdateTime time of NodePool.
        """
        pulumi.set(__self__, "additional_container_storage_enabled", additional_container_storage_enabled)
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "auto_renew_period", auto_renew_period)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "condition_types", condition_types)
        pulumi.set(__self__, "cordon", cordon)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_volumes", data_volumes)
        pulumi.set(__self__, "desired_replicas", desired_replicas)
        pulumi.set(__self__, "ecs_tags", ecs_tags)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "hpc_cluster_ids", hpc_cluster_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "initialize_script", initialize_script)
        pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        pulumi.set(__self__, "instance_type_ids", instance_type_ids)
        pulumi.set(__self__, "kube_config_name_prefix", kube_config_name_prefix)
        pulumi.set(__self__, "label_contents", label_contents)
        pulumi.set(__self__, "login_key_pair_name", login_key_pair_name)
        pulumi.set(__self__, "login_type", login_type)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_prefix", name_prefix)
        pulumi.set(__self__, "node_statistics", node_statistics)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "security_strategies", security_strategies)
        pulumi.set(__self__, "security_strategy_enabled", security_strategy_enabled)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "subnet_policy", subnet_policy)
        pulumi.set(__self__, "system_volumes", system_volumes)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "taint_contents", taint_contents)
        pulumi.set(__self__, "update_client_token", update_client_token)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="additionalContainerStorageEnabled")
    def additional_container_storage_enabled(self) -> bool:
        """
        Is AdditionalContainerStorageEnabled of NodeConfig.
        """
        return pulumi.get(self, "additional_container_storage_enabled")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> bool:
        """
        Is auto renew of the PrePaid instance of NodeConfig.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="autoRenewPeriod")
    def auto_renew_period(self) -> int:
        """
        The AutoRenewPeriod of the PrePaid instance of NodeConfig.
        """
        return pulumi.get(self, "auto_renew_period")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="conditionTypes")
    def condition_types(self) -> Sequence[str]:
        """
        The Condition of Status.
        """
        return pulumi.get(self, "condition_types")

    @property
    @pulumi.getter
    def cordon(self) -> bool:
        """
        The Cordon of KubernetesConfig.
        """
        return pulumi.get(self, "cordon")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        The ClientToken when successfully created.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The CreateTime of NodePool.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Sequence['outputs.GetNodePoolsNodePoolDataVolumeResult']:
        """
        The DataVolume of NodeConfig.
        """
        return pulumi.get(self, "data_volumes")

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> int:
        """
        The DesiredReplicas of AutoScaling.
        """
        return pulumi.get(self, "desired_replicas")

    @property
    @pulumi.getter(name="ecsTags")
    def ecs_tags(self) -> Sequence['outputs.GetNodePoolsNodePoolEcsTagResult']:
        """
        Tags for Ecs.
        """
        return pulumi.get(self, "ecs_tags")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Is Enabled of AutoScaling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hpcClusterIds")
    def hpc_cluster_ids(self) -> Sequence[str]:
        """
        The IDs of HpcCluster.
        """
        return pulumi.get(self, "hpc_cluster_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of NodePool.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        """
        The ImageId of NodeConfig.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="initializeScript")
    def initialize_script(self) -> str:
        """
        The InitializeScript of NodeConfig.
        """
        return pulumi.get(self, "initialize_script")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> str:
        """
        The InstanceChargeType of NodeConfig.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceTypeIds")
    def instance_type_ids(self) -> Sequence[str]:
        """
        The InstanceTypeIds of NodeConfig.
        """
        return pulumi.get(self, "instance_type_ids")

    @property
    @pulumi.getter(name="kubeConfigNamePrefix")
    def kube_config_name_prefix(self) -> str:
        """
        The NamePrefix of node metadata.
        """
        return pulumi.get(self, "kube_config_name_prefix")

    @property
    @pulumi.getter(name="labelContents")
    def label_contents(self) -> Sequence['outputs.GetNodePoolsNodePoolLabelContentResult']:
        """
        The LabelContent of KubernetesConfig.
        """
        return pulumi.get(self, "label_contents")

    @property
    @pulumi.getter(name="loginKeyPairName")
    def login_key_pair_name(self) -> str:
        """
        The login SshKeyPairName of NodeConfig.
        """
        return pulumi.get(self, "login_key_pair_name")

    @property
    @pulumi.getter(name="loginType")
    def login_type(self) -> str:
        """
        The login type of NodeConfig.
        """
        return pulumi.get(self, "login_type")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        The MaxReplicas of AutoScaling.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        """
        The MinReplicas of AutoScaling.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> str:
        """
        The NamePrefix of NodeConfig.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nodeStatistics")
    def node_statistics(self) -> Sequence['outputs.GetNodePoolsNodePoolNodeStatisticResult']:
        """
        The NodeStatistics of NodeConfig.
        """
        return pulumi.get(self, "node_statistics")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        The period of the PrePaid instance of NodeConfig.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The Priority of AutoScaling.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The SecurityGroupIds of NodeConfig.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityStrategies")
    def security_strategies(self) -> Sequence[str]:
        """
        The SecurityStrategies of NodeConfig.
        """
        return pulumi.get(self, "security_strategies")

    @property
    @pulumi.getter(name="securityStrategyEnabled")
    def security_strategy_enabled(self) -> bool:
        """
        The SecurityStrategyEnabled of NodeConfig.
        """
        return pulumi.get(self, "security_strategy_enabled")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The SubnetId of NodeConfig.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="subnetPolicy")
    def subnet_policy(self) -> str:
        """
        Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
        """
        return pulumi.get(self, "subnet_policy")

    @property
    @pulumi.getter(name="systemVolumes")
    def system_volumes(self) -> Sequence['outputs.GetNodePoolsNodePoolSystemVolumeResult']:
        """
        The SystemVolume of NodeConfig.
        """
        return pulumi.get(self, "system_volumes")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNodePoolsNodePoolTagResult']:
        """
        Tags of the NodePool.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taintContents")
    def taint_contents(self) -> Sequence['outputs.GetNodePoolsNodePoolTaintContentResult']:
        """
        The TaintContent of NodeConfig.
        """
        return pulumi.get(self, "taint_contents")

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> str:
        """
        The ClientToken when last update was successful.
        """
        return pulumi.get(self, "update_client_token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The UpdateTime time of NodePool.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetNodePoolsNodePoolDataVolumeResult(dict):
    def __init__(__self__, *,
                 mount_point: str,
                 size: str,
                 type: str):
        """
        :param str mount_point: The target mount directory of the disk.
        :param str size: The Size of SystemVolume.
        :param str type: The Type of Tags.
        """
        pulumi.set(__self__, "mount_point", mount_point)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> str:
        """
        The target mount directory of the disk.
        """
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The Size of SystemVolume.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Tags.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNodePoolsNodePoolEcsTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNodePoolsNodePoolLabelContentResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNodePoolsNodePoolNodeStatisticResult(dict):
    def __init__(__self__, *,
                 creating_count: int,
                 deleting_count: int,
                 failed_count: int,
                 running_count: int,
                 starting_count: int,
                 stopped_count: int,
                 stopping_count: int,
                 total_count: int,
                 updating_count: int):
        """
        :param int creating_count: The CreatingCount of Node.
        :param int deleting_count: The DeletingCount of Node.
        :param int failed_count: The FailedCount of Node.
        :param int running_count: The RunningCount of Node.
        :param int starting_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        :param int stopped_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        :param int stopping_count: (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        :param int total_count: The total count of query.
        :param int updating_count: The UpdatingCount of Node.
        """
        pulumi.set(__self__, "creating_count", creating_count)
        pulumi.set(__self__, "deleting_count", deleting_count)
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "running_count", running_count)
        pulumi.set(__self__, "starting_count", starting_count)
        pulumi.set(__self__, "stopped_count", stopped_count)
        pulumi.set(__self__, "stopping_count", stopping_count)
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "updating_count", updating_count)

    @property
    @pulumi.getter(name="creatingCount")
    def creating_count(self) -> int:
        """
        The CreatingCount of Node.
        """
        return pulumi.get(self, "creating_count")

    @property
    @pulumi.getter(name="deletingCount")
    def deleting_count(self) -> int:
        """
        The DeletingCount of Node.
        """
        return pulumi.get(self, "deleting_count")

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> int:
        """
        The FailedCount of Node.
        """
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter(name="runningCount")
    def running_count(self) -> int:
        """
        The RunningCount of Node.
        """
        return pulumi.get(self, "running_count")

    @property
    @pulumi.getter(name="startingCount")
    def starting_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""starting_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "starting_count")

    @property
    @pulumi.getter(name="stoppedCount")
    def stopped_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopped_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopped_count")

    @property
    @pulumi.getter(name="stoppingCount")
    def stopping_count(self) -> int:
        """
        (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
        """
        warnings.warn("""This field has been deprecated and is not recommended for use.""", DeprecationWarning)
        pulumi.log.warn("""stopping_count is deprecated: This field has been deprecated and is not recommended for use.""")

        return pulumi.get(self, "stopping_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updatingCount")
    def updating_count(self) -> int:
        """
        The UpdatingCount of Node.
        """
        return pulumi.get(self, "updating_count")


@pulumi.output_type
class GetNodePoolsNodePoolSystemVolumeResult(dict):
    def __init__(__self__, *,
                 size: str,
                 type: str):
        """
        :param str size: The Size of SystemVolume.
        :param str type: The Type of Tags.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The Size of SystemVolume.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Tags.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNodePoolsNodePoolTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 type: str,
                 value: str):
        """
        :param str key: The Key of Taint.
        :param str type: The Type of Tags.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Tags.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNodePoolsNodePoolTaintContentResult(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: The Effect of Taint.
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        The Effect of Taint.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNodePoolsStatusResult(dict):
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        :param str phase: The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
        """
        return pulumi.get(self, "conditions_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class GetSupportAddonsAddonResult(dict):
    def __init__(__self__, *,
                 deploy_modes: Sequence[str],
                 deploy_node_types: Sequence[str],
                 name: str,
                 pod_network_modes: Sequence[str],
                 versions: Sequence['outputs.GetSupportAddonsAddonVersionResult'],
                 categories: Optional[Sequence[str]] = None,
                 necessary: Optional[str] = None):
        """
        :param Sequence[str] deploy_modes: The deploy model, the value is `Managed` or `Unmanaged`.
        :param Sequence[str] deploy_node_types: The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        :param str name: The name of the addon.
        :param Sequence[str] pod_network_modes: The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        :param Sequence['GetSupportAddonsAddonVersionArgs'] versions: The version info of addon.
        :param Sequence[str] categories: The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
        :param str necessary: The necessary of addon.
        """
        pulumi.set(__self__, "deploy_modes", deploy_modes)
        pulumi.set(__self__, "deploy_node_types", deploy_node_types)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pod_network_modes", pod_network_modes)
        pulumi.set(__self__, "versions", versions)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if necessary is not None:
            pulumi.set(__self__, "necessary", necessary)

    @property
    @pulumi.getter(name="deployModes")
    def deploy_modes(self) -> Sequence[str]:
        """
        The deploy model, the value is `Managed` or `Unmanaged`.
        """
        return pulumi.get(self, "deploy_modes")

    @property
    @pulumi.getter(name="deployNodeTypes")
    def deploy_node_types(self) -> Sequence[str]:
        """
        The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        """
        return pulumi.get(self, "deploy_node_types")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the addon.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="podNetworkModes")
    def pod_network_modes(self) -> Sequence[str]:
        """
        The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        """
        return pulumi.get(self, "pod_network_modes")

    @property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.GetSupportAddonsAddonVersionResult']:
        """
        The version info of addon.
        """
        return pulumi.get(self, "versions")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[str]]:
        """
        The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def necessary(self) -> Optional[str]:
        """
        The necessary of addon.
        """
        return pulumi.get(self, "necessary")


@pulumi.output_type
class GetSupportAddonsAddonVersionResult(dict):
    def __init__(__self__, *,
                 compatibilities: Sequence['outputs.GetSupportAddonsAddonVersionCompatibilityResult'],
                 compatible_versions: Sequence[str],
                 version: str):
        """
        :param Sequence['GetSupportAddonsAddonVersionCompatibilityArgs'] compatibilities: The compatible version list.
        :param Sequence[str] compatible_versions: The compatible version list.
        :param str version: The basic version info.
        """
        pulumi.set(__self__, "compatibilities", compatibilities)
        pulumi.set(__self__, "compatible_versions", compatible_versions)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def compatibilities(self) -> Sequence['outputs.GetSupportAddonsAddonVersionCompatibilityResult']:
        """
        The compatible version list.
        """
        return pulumi.get(self, "compatibilities")

    @property
    @pulumi.getter(name="compatibleVersions")
    def compatible_versions(self) -> Sequence[str]:
        """
        The compatible version list.
        """
        return pulumi.get(self, "compatible_versions")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The basic version info.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSupportAddonsAddonVersionCompatibilityResult(dict):
    def __init__(__self__, *,
                 kubernetes_version: str):
        """
        :param str kubernetes_version: The Kubernetes Version of addon.
        """
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> str:
        """
        The Kubernetes Version of addon.
        """
        return pulumi.get(self, "kubernetes_version")


@pulumi.output_type
class GetSupportResourceTypesResourceResult(dict):
    def __init__(__self__, *,
                 resource_scope: str,
                 resource_specifications: Sequence[str],
                 resource_type: str,
                 zone_id: str):
        """
        :param str resource_scope: The scope of resource.
        :param Sequence[str] resource_specifications: The resource specifications info.
        :param str resource_type: The type of resource.
        :param str zone_id: The id of zone.
        """
        pulumi.set(__self__, "resource_scope", resource_scope)
        pulumi.set(__self__, "resource_specifications", resource_specifications)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="resourceScope")
    def resource_scope(self) -> str:
        """
        The scope of resource.
        """
        return pulumi.get(self, "resource_scope")

    @property
    @pulumi.getter(name="resourceSpecifications")
    def resource_specifications(self) -> Sequence[str]:
        """
        The resource specifications info.
        """
        return pulumi.get(self, "resource_specifications")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The type of resource.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The id of zone.
        """
        return pulumi.get(self, "zone_id")


