# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ServiceControlPoliciesResult',
    'AwaitableServiceControlPoliciesResult',
    'service_control_policies',
    'service_control_policies_output',
]

@pulumi.output_type
class ServiceControlPoliciesResult:
    """
    A collection of values returned by ServiceControlPolicies.
    """
    def __init__(__self__, id=None, output_file=None, policies=None, policy_type=None, query=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_type and not isinstance(policy_type, str):
            raise TypeError("Expected argument 'policy_type' to be a str")
        pulumi.set(__self__, "policy_type", policy_type)
        if query and not isinstance(query, str):
            raise TypeError("Expected argument 'query' to be a str")
        pulumi.set(__self__, "query", query)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.ServiceControlPoliciesPolicyResult']:
        """
        The collection of Policy query.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        """
        The type of the Policy.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of Policy query.
        """
        return pulumi.get(self, "total_count")


class AwaitableServiceControlPoliciesResult(ServiceControlPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ServiceControlPoliciesResult(
            id=self.id,
            output_file=self.output_file,
            policies=self.policies,
            policy_type=self.policy_type,
            query=self.query,
            total_count=self.total_count)


def service_control_policies(output_file: Optional[str] = None,
                             policy_type: Optional[str] = None,
                             query: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableServiceControlPoliciesResult:
    """
    Use this data source to query detailed information of organization service control policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.organization.service_control_policies(policy_type="Custom",
        query="test")
    ```


    :param str output_file: File name where to save data source results.
    :param str policy_type: The type of policy. The value can be System or Custom.
    :param str query: Query policies, support policy name or description.
    """
    __args__ = dict()
    __args__['outputFile'] = output_file
    __args__['policyType'] = policy_type
    __args__['query'] = query
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:organization/serviceControlPolicies:ServiceControlPolicies', __args__, opts=opts, typ=ServiceControlPoliciesResult).value

    return AwaitableServiceControlPoliciesResult(
        id=pulumi.get(__ret__, 'id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_type=pulumi.get(__ret__, 'policy_type'),
        query=pulumi.get(__ret__, 'query'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(service_control_policies)
def service_control_policies_output(output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                    policy_type: Optional[pulumi.Input[Optional[str]]] = None,
                                    query: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ServiceControlPoliciesResult]:
    """
    Use this data source to query detailed information of organization service control policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.organization.service_control_policies(policy_type="Custom",
        query="test")
    ```


    :param str output_file: File name where to save data source results.
    :param str policy_type: The type of policy. The value can be System or Custom.
    :param str query: Query policies, support policy name or description.
    """
    ...
