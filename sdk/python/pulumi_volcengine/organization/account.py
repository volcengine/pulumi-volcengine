# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccountArgs', 'Account']

@pulumi.input_type
class AccountArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 show_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 org_unit_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['AccountTagArgs']]]] = None,
                 verification_relation_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Account resource.
        :param pulumi.Input[str] account_name: The name of the account.
        :param pulumi.Input[str] show_name: The show name of the account.
        :param pulumi.Input[str] description: The description of the account.
        :param pulumi.Input[str] org_unit_id: The id of the organization unit. Default is root organization.
        :param pulumi.Input[Sequence[pulumi.Input['AccountTagArgs']]] tags: Tags.
        :param pulumi.Input[str] verification_relation_id: The verification relation id of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "show_name", show_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if org_unit_id is not None:
            pulumi.set(__self__, "org_unit_id", org_unit_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if verification_relation_id is not None:
            pulumi.set(__self__, "verification_relation_id", verification_relation_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        The name of the account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="showName")
    def show_name(self) -> pulumi.Input[str]:
        """
        The show name of the account.
        """
        return pulumi.get(self, "show_name")

    @show_name.setter
    def show_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "show_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the account.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="orgUnitId")
    def org_unit_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the organization unit. Default is root organization.
        """
        return pulumi.get(self, "org_unit_id")

    @org_unit_id.setter
    def org_unit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_unit_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="verificationRelationId")
    def verification_relation_id(self) -> Optional[pulumi.Input[str]]:
        """
        The verification relation id of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "verification_relation_id")

    @verification_relation_id.setter
    def verification_relation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verification_relation_id", value)


@pulumi.input_type
class _AccountState:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 iam_role: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 org_unit_id: Optional[pulumi.Input[str]] = None,
                 org_unit_name: Optional[pulumi.Input[str]] = None,
                 org_verification_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 show_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['AccountTagArgs']]]] = None,
                 verification_relation_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Account resources.
        :param pulumi.Input[str] account_name: The name of the account.
        :param pulumi.Input[str] description: The description of the account.
        :param pulumi.Input[str] iam_role: The name of the iam role.
        :param pulumi.Input[str] org_id: The id of the organization.
        :param pulumi.Input[str] org_unit_id: The id of the organization unit. Default is root organization.
        :param pulumi.Input[str] org_unit_name: The name of the organization unit.
        :param pulumi.Input[str] org_verification_id: The id of the organization verification.
        :param pulumi.Input[str] owner: The owner id of the account.
        :param pulumi.Input[str] show_name: The show name of the account.
        :param pulumi.Input[Sequence[pulumi.Input['AccountTagArgs']]] tags: Tags.
        :param pulumi.Input[str] verification_relation_id: The verification relation id of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iam_role is not None:
            pulumi.set(__self__, "iam_role", iam_role)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if org_unit_id is not None:
            pulumi.set(__self__, "org_unit_id", org_unit_id)
        if org_unit_name is not None:
            pulumi.set(__self__, "org_unit_name", org_unit_name)
        if org_verification_id is not None:
            pulumi.set(__self__, "org_verification_id", org_verification_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if show_name is not None:
            pulumi.set(__self__, "show_name", show_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if verification_relation_id is not None:
            pulumi.set(__self__, "verification_relation_id", verification_relation_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the account.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="iamRole")
    def iam_role(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the iam role.
        """
        return pulumi.get(self, "iam_role")

    @iam_role.setter
    def iam_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_role", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the organization.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="orgUnitId")
    def org_unit_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the organization unit. Default is root organization.
        """
        return pulumi.get(self, "org_unit_id")

    @org_unit_id.setter
    def org_unit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_unit_id", value)

    @property
    @pulumi.getter(name="orgUnitName")
    def org_unit_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the organization unit.
        """
        return pulumi.get(self, "org_unit_name")

    @org_unit_name.setter
    def org_unit_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_unit_name", value)

    @property
    @pulumi.getter(name="orgVerificationId")
    def org_verification_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the organization verification.
        """
        return pulumi.get(self, "org_verification_id")

    @org_verification_id.setter
    def org_verification_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_verification_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        The owner id of the account.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="showName")
    def show_name(self) -> Optional[pulumi.Input[str]]:
        """
        The show name of the account.
        """
        return pulumi.get(self, "show_name")

    @show_name.setter
    def show_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "show_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="verificationRelationId")
    def verification_relation_id(self) -> Optional[pulumi.Input[str]]:
        """
        The verification relation id of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "verification_relation_id")

    @verification_relation_id.setter
    def verification_relation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verification_relation_id", value)


class Account(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 org_unit_id: Optional[pulumi.Input[str]] = None,
                 show_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountTagArgs']]]]] = None,
                 verification_relation_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage organization account
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_unit = volcengine.organization.Unit("fooUnit",
            parent_id="730671013833632****",
            description="acc-test")
        foo_account = volcengine.organization.Account("fooAccount",
            account_name="acc-test-account",
            show_name="acc-test-account",
            description="acc-test",
            org_unit_id=foo_unit.id,
            verification_relation_id="210026****",
            tags=[volcengine.organization.AccountTagArgs(
                key="k1",
                value="v1",
            )])
        ```

        ## Import

        OrganizationAccount can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:organization/account:Account default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The name of the account.
        :param pulumi.Input[str] description: The description of the account.
        :param pulumi.Input[str] org_unit_id: The id of the organization unit. Default is root organization.
        :param pulumi.Input[str] show_name: The show name of the account.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] verification_relation_id: The verification relation id of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage organization account
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_unit = volcengine.organization.Unit("fooUnit",
            parent_id="730671013833632****",
            description="acc-test")
        foo_account = volcengine.organization.Account("fooAccount",
            account_name="acc-test-account",
            show_name="acc-test-account",
            description="acc-test",
            org_unit_id=foo_unit.id,
            verification_relation_id="210026****",
            tags=[volcengine.organization.AccountTagArgs(
                key="k1",
                value="v1",
            )])
        ```

        ## Import

        OrganizationAccount can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:organization/account:Account default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param AccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 org_unit_id: Optional[pulumi.Input[str]] = None,
                 show_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountTagArgs']]]]] = None,
                 verification_relation_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountArgs.__new__(AccountArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            __props__.__dict__["description"] = description
            __props__.__dict__["org_unit_id"] = org_unit_id
            if show_name is None and not opts.urn:
                raise TypeError("Missing required property 'show_name'")
            __props__.__dict__["show_name"] = show_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["verification_relation_id"] = verification_relation_id
            __props__.__dict__["iam_role"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["org_unit_name"] = None
            __props__.__dict__["org_verification_id"] = None
            __props__.__dict__["owner"] = None
        super(Account, __self__).__init__(
            'volcengine:organization/account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_name: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            iam_role: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            org_unit_id: Optional[pulumi.Input[str]] = None,
            org_unit_name: Optional[pulumi.Input[str]] = None,
            org_verification_id: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            show_name: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountTagArgs']]]]] = None,
            verification_relation_id: Optional[pulumi.Input[str]] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The name of the account.
        :param pulumi.Input[str] description: The description of the account.
        :param pulumi.Input[str] iam_role: The name of the iam role.
        :param pulumi.Input[str] org_id: The id of the organization.
        :param pulumi.Input[str] org_unit_id: The id of the organization unit. Default is root organization.
        :param pulumi.Input[str] org_unit_name: The name of the organization unit.
        :param pulumi.Input[str] org_verification_id: The id of the organization verification.
        :param pulumi.Input[str] owner: The owner id of the account.
        :param pulumi.Input[str] show_name: The show name of the account.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] verification_relation_id: The verification relation id of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountState.__new__(_AccountState)

        __props__.__dict__["account_name"] = account_name
        __props__.__dict__["description"] = description
        __props__.__dict__["iam_role"] = iam_role
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["org_unit_id"] = org_unit_id
        __props__.__dict__["org_unit_name"] = org_unit_name
        __props__.__dict__["org_verification_id"] = org_verification_id
        __props__.__dict__["owner"] = owner
        __props__.__dict__["show_name"] = show_name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["verification_relation_id"] = verification_relation_id
        return Account(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[str]:
        """
        The name of the account.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the account.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="iamRole")
    def iam_role(self) -> pulumi.Output[str]:
        """
        The name of the iam role.
        """
        return pulumi.get(self, "iam_role")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        The id of the organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="orgUnitId")
    def org_unit_id(self) -> pulumi.Output[str]:
        """
        The id of the organization unit. Default is root organization.
        """
        return pulumi.get(self, "org_unit_id")

    @property
    @pulumi.getter(name="orgUnitName")
    def org_unit_name(self) -> pulumi.Output[str]:
        """
        The name of the organization unit.
        """
        return pulumi.get(self, "org_unit_name")

    @property
    @pulumi.getter(name="orgVerificationId")
    def org_verification_id(self) -> pulumi.Output[str]:
        """
        The id of the organization verification.
        """
        return pulumi.get(self, "org_verification_id")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        The owner id of the account.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="showName")
    def show_name(self) -> pulumi.Output[str]:
        """
        The show name of the account.
        """
        return pulumi.get(self, "show_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.AccountTag']]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="verificationRelationId")
    def verification_relation_id(self) -> pulumi.Output[Optional[str]]:
        """
        The verification relation id of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "verification_relation_id")

