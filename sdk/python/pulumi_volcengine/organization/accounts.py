# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccountsResult',
    'AwaitableAccountsResult',
    'accounts',
    'accounts_output',
]

@pulumi.output_type
class AccountsResult:
    """
    A collection of values returned by Accounts.
    """
    def __init__(__self__, accounts=None, id=None, name_regex=None, org_unit_id=None, output_file=None, search=None, total_count=None, verification_id=None):
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if org_unit_id and not isinstance(org_unit_id, str):
            raise TypeError("Expected argument 'org_unit_id' to be a str")
        pulumi.set(__self__, "org_unit_id", org_unit_id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if verification_id and not isinstance(verification_id, str):
            raise TypeError("Expected argument 'verification_id' to be a str")
        pulumi.set(__self__, "verification_id", verification_id)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.AccountsAccountResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="orgUnitId")
    def org_unit_id(self) -> Optional[str]:
        """
        The id of the organization unit.
        """
        return pulumi.get(self, "org_unit_id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def search(self) -> Optional[str]:
        return pulumi.get(self, "search")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="verificationId")
    def verification_id(self) -> Optional[str]:
        return pulumi.get(self, "verification_id")


class AwaitableAccountsResult(AccountsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return AccountsResult(
            accounts=self.accounts,
            id=self.id,
            name_regex=self.name_regex,
            org_unit_id=self.org_unit_id,
            output_file=self.output_file,
            search=self.search,
            total_count=self.total_count,
            verification_id=self.verification_id)


def accounts(name_regex: Optional[str] = None,
             org_unit_id: Optional[str] = None,
             output_file: Optional[str] = None,
             search: Optional[str] = None,
             verification_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableAccountsResult:
    """
    Use this data source to query detailed information of organization accounts
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.organization.accounts(search="210061****")
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str org_unit_id: The id of the organization unit.
    :param str output_file: File name where to save data source results.
    :param str search: The id or the show name of the account. This field supports fuzzy query.
    :param str verification_id: The id of the verification.
    """
    __args__ = dict()
    __args__['nameRegex'] = name_regex
    __args__['orgUnitId'] = org_unit_id
    __args__['outputFile'] = output_file
    __args__['search'] = search
    __args__['verificationId'] = verification_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:organization/accounts:Accounts', __args__, opts=opts, typ=AccountsResult).value

    return AwaitableAccountsResult(
        accounts=pulumi.get(__ret__, 'accounts'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        org_unit_id=pulumi.get(__ret__, 'org_unit_id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        search=pulumi.get(__ret__, 'search'),
        total_count=pulumi.get(__ret__, 'total_count'),
        verification_id=pulumi.get(__ret__, 'verification_id'))


@_utilities.lift_output_func(accounts)
def accounts_output(name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                    org_unit_id: Optional[pulumi.Input[Optional[str]]] = None,
                    output_file: Optional[pulumi.Input[Optional[str]]] = None,
                    search: Optional[pulumi.Input[Optional[str]]] = None,
                    verification_id: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[AccountsResult]:
    """
    Use this data source to query detailed information of organization accounts
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.organization.accounts(search="210061****")
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str org_unit_id: The id of the organization unit.
    :param str output_file: File name where to save data source results.
    :param str search: The id or the show name of the account. This field supports fuzzy query.
    :param str verification_id: The id of the verification.
    """
    ...
