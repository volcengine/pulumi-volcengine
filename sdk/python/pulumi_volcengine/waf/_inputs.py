# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AclRuleAccurateGroupArgs',
    'AclRuleAccurateGroupAccurateRuleArgs',
    'AclRuleHostGroupArgs',
    'AclRuleIpGroupArgs',
    'BotAnalyseProtectRuleAccurateGroupArgs',
    'BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs',
    'BotAnalyseProtectRuleRuleGroupArgs',
    'BotAnalyseProtectRuleRuleGroupGroupArgs',
    'BotAnalyseProtectRuleRuleGroupGroupAccurateRuleArgs',
    'BotAnalyseProtectRuleRuleGroupRuleArgs',
    'BotAnalyseProtectRuleRuleGroupRuleAccurateGroupArgs',
    'BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRuleArgs',
    'CcRuleAccurateGroupArgs',
    'CcRuleAccurateGroupAccurateRuleArgs',
    'CcRuleCronConfArgs',
    'CcRuleRuleGroupArgs',
    'CcRuleRuleGroupGroupArgs',
    'CcRuleRuleGroupGroupAccurateRuleArgs',
    'CcRuleRuleGroupRuleArgs',
    'CcRuleRuleGroupRuleAccurateGroupArgs',
    'CcRuleRuleGroupRuleAccurateGroupAccurateRuleArgs',
    'CcRuleRuleGroupRuleCronConfArgs',
    'CustomBotAccurateArgs',
    'CustomBotAccurateAccurateRuleArgs',
    'CustomPageAccurateArgs',
    'CustomPageAccurateAccurateRuleArgs',
    'HostGroupRelatedRuleArgs',
    'IpGroupRelatedRuleArgs',
    'VulnerabilityAdvanceConfigArgs',
    'VulnerabilityAdvanceConfigAutoTraversalArgs',
    'VulnerabilityAdvanceConfigAutoTraversalRuleArgs',
    'VulnerabilityAdvanceConfigFreqScanArgs',
    'VulnerabilityAdvanceConfigFreqScanRuleArgs',
    'VulnerabilityRuleDetailArgs',
    'VulnerabilitySystemRuleSwitchArgs',
    'WafDomainBackendGroupArgs',
    'WafDomainBackendGroupBackendArgs',
    'WafDomainCloudAccessConfigArgs',
    'WafDomainExtraDefenceModeLbInstanceArgs',
    'WafDomainProtocolPortsArgs',
    'WafDomainTlsFieldsConfigArgs',
    'WafDomainTlsFieldsConfigHeadersConfigArgs',
]

@pulumi.input_type
class AclRuleAccurateGroupArgs:
    def __init__(__self__, *,
                 accurate_rules: pulumi.Input[Sequence[pulumi.Input['AclRuleAccurateGroupAccurateRuleArgs']]],
                 logic: pulumi.Input[int]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AclRuleAccurateGroupAccurateRuleArgs']]] accurate_rules: Details of advanced conditions.
        :param pulumi.Input[int] logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> pulumi.Input[Sequence[pulumi.Input['AclRuleAccurateGroupAccurateRuleArgs']]]:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @accurate_rules.setter
    def accurate_rules(self, value: pulumi.Input[Sequence[pulumi.Input['AclRuleAccurateGroupAccurateRuleArgs']]]):
        pulumi.set(self, "accurate_rules", value)

    @property
    @pulumi.getter
    def logic(self) -> pulumi.Input[int]:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")

    @logic.setter
    def logic(self, value: pulumi.Input[int]):
        pulumi.set(self, "logic", value)


@pulumi.input_type
class AclRuleAccurateGroupAccurateRuleArgs:
    def __init__(__self__, *,
                 http_obj: pulumi.Input[str],
                 obj_type: pulumi.Input[int],
                 opretar: pulumi.Input[int],
                 property: pulumi.Input[int],
                 value_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] http_obj: The HTTP object to be added to the advanced conditions.
        :param pulumi.Input[int] obj_type: The matching field for HTTP objects.
        :param pulumi.Input[int] opretar: The logical operator for the condition.
        :param pulumi.Input[int] property: Operate the properties of the http object.
        :param pulumi.Input[str] value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> pulumi.Input[str]:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @http_obj.setter
    def http_obj(self, value: pulumi.Input[str]):
        pulumi.set(self, "http_obj", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> pulumi.Input[int]:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def opretar(self) -> pulumi.Input[int]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @opretar.setter
    def opretar(self, value: pulumi.Input[int]):
        pulumi.set(self, "opretar", value)

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> pulumi.Input[str]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @value_string.setter
    def value_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_string", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[int]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[int]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class AclRuleHostGroupArgs:
    def __init__(__self__, *,
                 host_group_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] host_group_id: The ID of the domain group.
        :param pulumi.Input[str] name: Rule name.
        """
        if host_group_id is not None:
            pulumi.set(__self__, "host_group_id", host_group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the domain group.
        """
        return pulumi.get(self, "host_group_id")

    @host_group_id.setter
    def host_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_group_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AclRuleIpGroupArgs:
    def __init__(__self__, *,
                 ip_group_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] ip_group_id: Required if IpAddType = 2.
        :param pulumi.Input[str] name: Rule name.
        """
        if ip_group_id is not None:
            pulumi.set(__self__, "ip_group_id", ip_group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        Required if IpAddType = 2.
        """
        return pulumi.get(self, "ip_group_id")

    @ip_group_id.setter
    def ip_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_group_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class BotAnalyseProtectRuleAccurateGroupArgs:
    def __init__(__self__, *,
                 accurate_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs']]]] = None,
                 logic: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs']]] accurate_rules: Request characteristic information of the rule group.
        :param pulumi.Input[int] logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs']]]]:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @accurate_rules.setter
    def accurate_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs']]]]):
        pulumi.set(self, "accurate_rules", value)

    @property
    @pulumi.getter
    def logic(self) -> Optional[pulumi.Input[int]]:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")

    @logic.setter
    def logic(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logic", value)


@pulumi.input_type
class BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs:
    def __init__(__self__, *,
                 http_obj: Optional[pulumi.Input[str]] = None,
                 obj_type: Optional[pulumi.Input[int]] = None,
                 opretar: Optional[pulumi.Input[int]] = None,
                 property: Optional[pulumi.Input[int]] = None,
                 value_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] http_obj: Custom object.
        :param pulumi.Input[int] obj_type: matching field.
        :param pulumi.Input[int] opretar: The logical operator for the condition.
        :param pulumi.Input[int] property: Operate the properties of the http object.
        :param pulumi.Input[str] value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[pulumi.Input[str]]:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @http_obj.setter
    def http_obj(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_obj", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[pulumi.Input[int]]:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def opretar(self) -> Optional[pulumi.Input[int]]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @opretar.setter
    def opretar(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "opretar", value)

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[pulumi.Input[str]]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @value_string.setter
    def value_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_string", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[int]]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class BotAnalyseProtectRuleRuleGroupArgs:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input['BotAnalyseProtectRuleRuleGroupGroupArgs']] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleArgs']]]] = None):
        """
        :param pulumi.Input['BotAnalyseProtectRuleRuleGroupGroupArgs'] group: Rule group information.
        :param pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleArgs']]] rules: Specific rule information within the rule group.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input['BotAnalyseProtectRuleRuleGroupGroupArgs']]:
        """
        Rule group information.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input['BotAnalyseProtectRuleRuleGroupGroupArgs']]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleArgs']]]]:
        """
        Specific rule information within the rule group.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class BotAnalyseProtectRuleRuleGroupGroupArgs:
    def __init__(__self__, *,
                 accurate_group_priority: Optional[pulumi.Input[int]] = None,
                 accurate_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupGroupAccurateRuleArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 logic: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupGroupAccurateRuleArgs']]] accurate_rules: Request characteristic information of the rule group.
        :param pulumi.Input[int] id: Rule unique identifier.
        :param pulumi.Input[int] logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[pulumi.Input[int]]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @accurate_group_priority.setter
    def accurate_group_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accurate_group_priority", value)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupGroupAccurateRuleArgs']]]]:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @accurate_rules.setter
    def accurate_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupGroupAccurateRuleArgs']]]]):
        pulumi.set(self, "accurate_rules", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def logic(self) -> Optional[pulumi.Input[int]]:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")

    @logic.setter
    def logic(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logic", value)


@pulumi.input_type
class BotAnalyseProtectRuleRuleGroupGroupAccurateRuleArgs:
    def __init__(__self__, *,
                 http_obj: Optional[pulumi.Input[str]] = None,
                 obj_type: Optional[pulumi.Input[int]] = None,
                 opretar: Optional[pulumi.Input[int]] = None,
                 property: Optional[pulumi.Input[int]] = None,
                 value_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] http_obj: Custom object.
        :param pulumi.Input[int] obj_type: matching field.
        :param pulumi.Input[int] opretar: The logical operator for the condition.
        :param pulumi.Input[int] property: Operate the properties of the http object.
        :param pulumi.Input[str] value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[pulumi.Input[str]]:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @http_obj.setter
    def http_obj(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_obj", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[pulumi.Input[int]]:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def opretar(self) -> Optional[pulumi.Input[int]]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @opretar.setter
    def opretar(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "opretar", value)

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[pulumi.Input[str]]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @value_string.setter
    def value_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_string", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[int]]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class BotAnalyseProtectRuleRuleGroupRuleArgs:
    def __init__(__self__, *,
                 accurate_group: Optional[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleAccurateGroupArgs']] = None,
                 accurate_group_priority: Optional[pulumi.Input[int]] = None,
                 action_after_verification: Optional[pulumi.Input[int]] = None,
                 action_type: Optional[pulumi.Input[int]] = None,
                 effect_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 exemption_time: Optional[pulumi.Input[int]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pass_ratio: Optional[pulumi.Input[float]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 path_threshold: Optional[pulumi.Input[int]] = None,
                 rule_priority: Optional[pulumi.Input[int]] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None,
                 single_proportion: Optional[pulumi.Input[float]] = None,
                 single_threshold: Optional[pulumi.Input[int]] = None,
                 statistical_duration: Optional[pulumi.Input[int]] = None,
                 statistical_type: Optional[pulumi.Input[int]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleAccurateGroupArgs'] accurate_group: Advanced conditions.
        :param pulumi.Input[int] accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param pulumi.Input[int] action_after_verification: Perform the action after verification/challenge.
        :param pulumi.Input[int] action_type: perform the action.
        :param pulumi.Input[int] effect_time: Limit the duration.
        :param pulumi.Input[int] enable: Whether to enable the rules.
        :param pulumi.Input[int] exemption_time: Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        :param pulumi.Input[str] field: Statistical objects, with multiple objects separated by commas.
        :param pulumi.Input[str] host: Website domain names that require the setting of protection rules.
        :param pulumi.Input[int] id: Rule unique identifier.
        :param pulumi.Input[str] name: The name of rule.
        :param pulumi.Input[float] pass_ratio: JS challenge/human-machine verification pass rate.
        :param pulumi.Input[str] path: The requested path.
        :param pulumi.Input[int] path_threshold: The path access frequency threshold is enabled when StatisticalType=1.
        :param pulumi.Input[int] rule_priority: Priority of rule effectiveness.
        :param pulumi.Input[str] rule_tag: Rule label, that is, the complete rule ID.
        :param pulumi.Input[float] single_proportion: The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        :param pulumi.Input[int] single_threshold: The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        :param pulumi.Input[int] statistical_duration: The duration of statistics.
        :param pulumi.Input[int] statistical_type: Statistical content and methods.
        :param pulumi.Input[str] update_time: Rule update time.
        """
        if accurate_group is not None:
            pulumi.set(__self__, "accurate_group", accurate_group)
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if action_after_verification is not None:
            pulumi.set(__self__, "action_after_verification", action_after_verification)
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if effect_time is not None:
            pulumi.set(__self__, "effect_time", effect_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if exemption_time is not None:
            pulumi.set(__self__, "exemption_time", exemption_time)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pass_ratio is not None:
            pulumi.set(__self__, "pass_ratio", pass_ratio)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_threshold is not None:
            pulumi.set(__self__, "path_threshold", path_threshold)
        if rule_priority is not None:
            pulumi.set(__self__, "rule_priority", rule_priority)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if single_proportion is not None:
            pulumi.set(__self__, "single_proportion", single_proportion)
        if single_threshold is not None:
            pulumi.set(__self__, "single_threshold", single_threshold)
        if statistical_duration is not None:
            pulumi.set(__self__, "statistical_duration", statistical_duration)
        if statistical_type is not None:
            pulumi.set(__self__, "statistical_type", statistical_type)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> Optional[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleAccurateGroupArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @accurate_group.setter
    def accurate_group(self, value: Optional[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleAccurateGroupArgs']]):
        pulumi.set(self, "accurate_group", value)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[pulumi.Input[int]]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @accurate_group_priority.setter
    def accurate_group_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accurate_group_priority", value)

    @property
    @pulumi.getter(name="actionAfterVerification")
    def action_after_verification(self) -> Optional[pulumi.Input[int]]:
        """
        Perform the action after verification/challenge.
        """
        return pulumi.get(self, "action_after_verification")

    @action_after_verification.setter
    def action_after_verification(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "action_after_verification", value)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[int]]:
        """
        perform the action.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> Optional[pulumi.Input[int]]:
        """
        Limit the duration.
        """
        return pulumi.get(self, "effect_time")

    @effect_time.setter
    def effect_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "effect_time", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> Optional[pulumi.Input[int]]:
        """
        Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        """
        return pulumi.get(self, "exemption_time")

    @exemption_time.setter
    def exemption_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exemption_time", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        """
        Statistical objects, with multiple objects separated by commas.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passRatio")
    def pass_ratio(self) -> Optional[pulumi.Input[float]]:
        """
        JS challenge/human-machine verification pass rate.
        """
        return pulumi.get(self, "pass_ratio")

    @pass_ratio.setter
    def pass_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "pass_ratio", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The requested path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The path access frequency threshold is enabled when StatisticalType=1.
        """
        return pulumi.get(self, "path_threshold")

    @path_threshold.setter
    def path_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "path_threshold", value)

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of rule effectiveness.
        """
        return pulumi.get(self, "rule_priority")

    @rule_priority.setter
    def rule_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_priority", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Rule label, that is, the complete rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="singleProportion")
    def single_proportion(self) -> Optional[pulumi.Input[float]]:
        """
        The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        """
        return pulumi.get(self, "single_proportion")

    @single_proportion.setter
    def single_proportion(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "single_proportion", value)

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        """
        return pulumi.get(self, "single_threshold")

    @single_threshold.setter
    def single_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "single_threshold", value)

    @property
    @pulumi.getter(name="statisticalDuration")
    def statistical_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The duration of statistics.
        """
        return pulumi.get(self, "statistical_duration")

    @statistical_duration.setter
    def statistical_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "statistical_duration", value)

    @property
    @pulumi.getter(name="statisticalType")
    def statistical_type(self) -> Optional[pulumi.Input[int]]:
        """
        Statistical content and methods.
        """
        return pulumi.get(self, "statistical_type")

    @statistical_type.setter
    def statistical_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "statistical_type", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class BotAnalyseProtectRuleRuleGroupRuleAccurateGroupArgs:
    def __init__(__self__, *,
                 accurate_group_priority: Optional[pulumi.Input[int]] = None,
                 accurate_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRuleArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 logic: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRuleArgs']]] accurate_rules: Request characteristic information of the rule group.
        :param pulumi.Input[int] id: Rule unique identifier.
        :param pulumi.Input[int] logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[pulumi.Input[int]]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @accurate_group_priority.setter
    def accurate_group_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accurate_group_priority", value)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRuleArgs']]]]:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @accurate_rules.setter
    def accurate_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRuleArgs']]]]):
        pulumi.set(self, "accurate_rules", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def logic(self) -> Optional[pulumi.Input[int]]:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")

    @logic.setter
    def logic(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logic", value)


@pulumi.input_type
class BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRuleArgs:
    def __init__(__self__, *,
                 http_obj: Optional[pulumi.Input[str]] = None,
                 obj_type: Optional[pulumi.Input[int]] = None,
                 opretar: Optional[pulumi.Input[int]] = None,
                 property: Optional[pulumi.Input[int]] = None,
                 value_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] http_obj: Custom object.
        :param pulumi.Input[int] obj_type: matching field.
        :param pulumi.Input[int] opretar: The logical operator for the condition.
        :param pulumi.Input[int] property: Operate the properties of the http object.
        :param pulumi.Input[str] value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[pulumi.Input[str]]:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @http_obj.setter
    def http_obj(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_obj", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[pulumi.Input[int]]:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def opretar(self) -> Optional[pulumi.Input[int]]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @opretar.setter
    def opretar(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "opretar", value)

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[pulumi.Input[str]]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @value_string.setter
    def value_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_string", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[int]]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class CcRuleAccurateGroupArgs:
    def __init__(__self__, *,
                 accurate_rules: pulumi.Input[Sequence[pulumi.Input['CcRuleAccurateGroupAccurateRuleArgs']]],
                 logic: pulumi.Input[int]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CcRuleAccurateGroupAccurateRuleArgs']]] accurate_rules: Details of advanced conditions.
        :param pulumi.Input[int] logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> pulumi.Input[Sequence[pulumi.Input['CcRuleAccurateGroupAccurateRuleArgs']]]:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @accurate_rules.setter
    def accurate_rules(self, value: pulumi.Input[Sequence[pulumi.Input['CcRuleAccurateGroupAccurateRuleArgs']]]):
        pulumi.set(self, "accurate_rules", value)

    @property
    @pulumi.getter
    def logic(self) -> pulumi.Input[int]:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")

    @logic.setter
    def logic(self, value: pulumi.Input[int]):
        pulumi.set(self, "logic", value)


@pulumi.input_type
class CcRuleAccurateGroupAccurateRuleArgs:
    def __init__(__self__, *,
                 http_obj: pulumi.Input[str],
                 obj_type: pulumi.Input[int],
                 opretar: pulumi.Input[int],
                 property: pulumi.Input[int],
                 value_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] http_obj: The HTTP object to be added to the advanced conditions.
        :param pulumi.Input[int] obj_type: The matching field for HTTP objects.
        :param pulumi.Input[int] opretar: The logical operator for the condition.
        :param pulumi.Input[int] property: Operate the properties of the http object.
        :param pulumi.Input[str] value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> pulumi.Input[str]:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @http_obj.setter
    def http_obj(self, value: pulumi.Input[str]):
        pulumi.set(self, "http_obj", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> pulumi.Input[int]:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def opretar(self) -> pulumi.Input[int]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @opretar.setter
    def opretar(self, value: pulumi.Input[int]):
        pulumi.set(self, "opretar", value)

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> pulumi.Input[str]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @value_string.setter
    def value_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_string", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[int]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[int]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class CcRuleCronConfArgs:
    def __init__(__self__, *,
                 crontab: pulumi.Input[str],
                 path_threshold: pulumi.Input[int],
                 single_threshold: pulumi.Input[int]):
        """
        :param pulumi.Input[str] crontab: The weekly cycle days and cycle time periods.
        :param pulumi.Input[int] path_threshold: The threshold of the number of requests for path access.
        :param pulumi.Input[int] single_threshold: The threshold of the number of visits to each statistical object.
        """
        pulumi.set(__self__, "crontab", crontab)
        pulumi.set(__self__, "path_threshold", path_threshold)
        pulumi.set(__self__, "single_threshold", single_threshold)

    @property
    @pulumi.getter
    def crontab(self) -> pulumi.Input[str]:
        """
        The weekly cycle days and cycle time periods.
        """
        return pulumi.get(self, "crontab")

    @crontab.setter
    def crontab(self, value: pulumi.Input[str]):
        pulumi.set(self, "crontab", value)

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> pulumi.Input[int]:
        """
        The threshold of the number of requests for path access.
        """
        return pulumi.get(self, "path_threshold")

    @path_threshold.setter
    def path_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "path_threshold", value)

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> pulumi.Input[int]:
        """
        The threshold of the number of visits to each statistical object.
        """
        return pulumi.get(self, "single_threshold")

    @single_threshold.setter
    def single_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "single_threshold", value)


@pulumi.input_type
class CcRuleRuleGroupArgs:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input['CcRuleRuleGroupGroupArgs']] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleArgs']]]] = None):
        """
        :param pulumi.Input['CcRuleRuleGroupGroupArgs'] group: Rule group information.
        :param pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleArgs']]] rules: Specific rule information within the rule group.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input['CcRuleRuleGroupGroupArgs']]:
        """
        Rule group information.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input['CcRuleRuleGroupGroupArgs']]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleArgs']]]]:
        """
        Specific rule information within the rule group.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class CcRuleRuleGroupGroupArgs:
    def __init__(__self__, *,
                 accurate_group_priority: Optional[pulumi.Input[int]] = None,
                 accurate_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupGroupAccurateRuleArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 logic: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupGroupAccurateRuleArgs']]] accurate_rules: Request characteristic information of the rule group.
        :param pulumi.Input[int] id: The ID of Rule group.
        :param pulumi.Input[int] logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[pulumi.Input[int]]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @accurate_group_priority.setter
    def accurate_group_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accurate_group_priority", value)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupGroupAccurateRuleArgs']]]]:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @accurate_rules.setter
    def accurate_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupGroupAccurateRuleArgs']]]]):
        pulumi.set(self, "accurate_rules", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def logic(self) -> Optional[pulumi.Input[int]]:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")

    @logic.setter
    def logic(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logic", value)


@pulumi.input_type
class CcRuleRuleGroupGroupAccurateRuleArgs:
    def __init__(__self__, *,
                 http_obj: Optional[pulumi.Input[str]] = None,
                 obj_type: Optional[pulumi.Input[int]] = None,
                 opretar: Optional[pulumi.Input[int]] = None,
                 property: Optional[pulumi.Input[int]] = None,
                 value_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] http_obj: The HTTP object to be added to the advanced conditions.
        :param pulumi.Input[int] obj_type: The matching field for HTTP objects.
        :param pulumi.Input[int] opretar: The logical operator for the condition.
        :param pulumi.Input[int] property: Operate the properties of the http object.
        :param pulumi.Input[str] value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @http_obj.setter
    def http_obj(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_obj", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[pulumi.Input[int]]:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def opretar(self) -> Optional[pulumi.Input[int]]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @opretar.setter
    def opretar(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "opretar", value)

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[pulumi.Input[str]]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @value_string.setter
    def value_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_string", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[int]]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class CcRuleRuleGroupRuleArgs:
    def __init__(__self__, *,
                 accurate_group: Optional[pulumi.Input['CcRuleRuleGroupRuleAccurateGroupArgs']] = None,
                 accurate_group_priority: Optional[pulumi.Input[int]] = None,
                 cc_type: Optional[pulumi.Input[int]] = None,
                 count_time: Optional[pulumi.Input[int]] = None,
                 cron_confs: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleCronConfArgs']]]] = None,
                 cron_enable: Optional[pulumi.Input[int]] = None,
                 effect_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 exemption_time: Optional[pulumi.Input[int]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_threshold: Optional[pulumi.Input[int]] = None,
                 rule_priority: Optional[pulumi.Input[int]] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None,
                 single_threshold: Optional[pulumi.Input[int]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['CcRuleRuleGroupRuleAccurateGroupArgs'] accurate_group: Advanced conditions.
        :param pulumi.Input[int] accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param pulumi.Input[int] cc_type: The actions performed on subsequent requests after meeting the statistical conditions.
        :param pulumi.Input[int] count_time: The statistical period of the strategy.
        :param pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleCronConfArgs']]] cron_confs: Details of the periodic loop configuration.
        :param pulumi.Input[int] cron_enable: Whether to set the cycle to take effect.
        :param pulumi.Input[int] effect_time: Limit the duration, that is, the effective duration of the action.
        :param pulumi.Input[int] enable: Whether to enable the rules.
        :param pulumi.Input[int] exemption_time: Strategy exemption time.
        :param pulumi.Input[str] field: statistical object.
        :param pulumi.Input[str] host: Website domain names that require the setting of protection rules.
        :param pulumi.Input[int] id: The ID of Rule group.
        :param pulumi.Input[str] name: The name of cc rule.
        :param pulumi.Input[int] path_threshold: The threshold of the total number of times the request path is accessed.
        :param pulumi.Input[int] rule_priority: Rule execution priority.
        :param pulumi.Input[str] rule_tag: Rule label, that is, the complete rule ID.
        :param pulumi.Input[int] single_threshold: The threshold of the number of times each statistical object accesses the request path.
        :param pulumi.Input[str] update_time: Rule update time.
        :param pulumi.Input[str] url: The website request path that needs protection.
        """
        if accurate_group is not None:
            pulumi.set(__self__, "accurate_group", accurate_group)
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if cc_type is not None:
            pulumi.set(__self__, "cc_type", cc_type)
        if count_time is not None:
            pulumi.set(__self__, "count_time", count_time)
        if cron_confs is not None:
            pulumi.set(__self__, "cron_confs", cron_confs)
        if cron_enable is not None:
            pulumi.set(__self__, "cron_enable", cron_enable)
        if effect_time is not None:
            pulumi.set(__self__, "effect_time", effect_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if exemption_time is not None:
            pulumi.set(__self__, "exemption_time", exemption_time)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_threshold is not None:
            pulumi.set(__self__, "path_threshold", path_threshold)
        if rule_priority is not None:
            pulumi.set(__self__, "rule_priority", rule_priority)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if single_threshold is not None:
            pulumi.set(__self__, "single_threshold", single_threshold)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> Optional[pulumi.Input['CcRuleRuleGroupRuleAccurateGroupArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @accurate_group.setter
    def accurate_group(self, value: Optional[pulumi.Input['CcRuleRuleGroupRuleAccurateGroupArgs']]):
        pulumi.set(self, "accurate_group", value)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[pulumi.Input[int]]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @accurate_group_priority.setter
    def accurate_group_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accurate_group_priority", value)

    @property
    @pulumi.getter(name="ccType")
    def cc_type(self) -> Optional[pulumi.Input[int]]:
        """
        The actions performed on subsequent requests after meeting the statistical conditions.
        """
        return pulumi.get(self, "cc_type")

    @cc_type.setter
    def cc_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cc_type", value)

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> Optional[pulumi.Input[int]]:
        """
        The statistical period of the strategy.
        """
        return pulumi.get(self, "count_time")

    @count_time.setter
    def count_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count_time", value)

    @property
    @pulumi.getter(name="cronConfs")
    def cron_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleCronConfArgs']]]]:
        """
        Details of the periodic loop configuration.
        """
        return pulumi.get(self, "cron_confs")

    @cron_confs.setter
    def cron_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleCronConfArgs']]]]):
        pulumi.set(self, "cron_confs", value)

    @property
    @pulumi.getter(name="cronEnable")
    def cron_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to set the cycle to take effect.
        """
        return pulumi.get(self, "cron_enable")

    @cron_enable.setter
    def cron_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cron_enable", value)

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> Optional[pulumi.Input[int]]:
        """
        Limit the duration, that is, the effective duration of the action.
        """
        return pulumi.get(self, "effect_time")

    @effect_time.setter
    def effect_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "effect_time", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> Optional[pulumi.Input[int]]:
        """
        Strategy exemption time.
        """
        return pulumi.get(self, "exemption_time")

    @exemption_time.setter
    def exemption_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exemption_time", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of cc rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold of the total number of times the request path is accessed.
        """
        return pulumi.get(self, "path_threshold")

    @path_threshold.setter
    def path_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "path_threshold", value)

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Rule execution priority.
        """
        return pulumi.get(self, "rule_priority")

    @rule_priority.setter
    def rule_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_priority", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Rule label, that is, the complete rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold of the number of times each statistical object accesses the request path.
        """
        return pulumi.get(self, "single_threshold")

    @single_threshold.setter
    def single_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "single_threshold", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The website request path that needs protection.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class CcRuleRuleGroupRuleAccurateGroupArgs:
    def __init__(__self__, *,
                 accurate_group_priority: Optional[pulumi.Input[int]] = None,
                 accurate_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleAccurateGroupAccurateRuleArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 logic: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleAccurateGroupAccurateRuleArgs']]] accurate_rules: Details of advanced conditions.
        :param pulumi.Input[int] id: The ID of Rule group.
        :param pulumi.Input[int] logic: The logical relationship of advanced conditions.
        """
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[pulumi.Input[int]]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @accurate_group_priority.setter
    def accurate_group_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accurate_group_priority", value)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleAccurateGroupAccurateRuleArgs']]]]:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @accurate_rules.setter
    def accurate_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupRuleAccurateGroupAccurateRuleArgs']]]]):
        pulumi.set(self, "accurate_rules", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def logic(self) -> Optional[pulumi.Input[int]]:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")

    @logic.setter
    def logic(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logic", value)


@pulumi.input_type
class CcRuleRuleGroupRuleAccurateGroupAccurateRuleArgs:
    def __init__(__self__, *,
                 http_obj: Optional[pulumi.Input[str]] = None,
                 obj_type: Optional[pulumi.Input[int]] = None,
                 opretar: Optional[pulumi.Input[int]] = None,
                 property: Optional[pulumi.Input[int]] = None,
                 value_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] http_obj: The HTTP object to be added to the advanced conditions.
        :param pulumi.Input[int] obj_type: The matching field for HTTP objects.
        :param pulumi.Input[int] opretar: The logical operator for the condition.
        :param pulumi.Input[int] property: Operate the properties of the http object.
        :param pulumi.Input[str] value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @http_obj.setter
    def http_obj(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_obj", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[pulumi.Input[int]]:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def opretar(self) -> Optional[pulumi.Input[int]]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @opretar.setter
    def opretar(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "opretar", value)

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[pulumi.Input[str]]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @value_string.setter
    def value_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_string", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[int]]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class CcRuleRuleGroupRuleCronConfArgs:
    def __init__(__self__, *,
                 crontab: Optional[pulumi.Input[str]] = None,
                 path_threshold: Optional[pulumi.Input[int]] = None,
                 single_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] crontab: The weekly cycle days and cycle time periods.
        :param pulumi.Input[int] path_threshold: The threshold of the number of requests for path access.
        :param pulumi.Input[int] single_threshold: The threshold of the number of visits to each statistical object.
        """
        if crontab is not None:
            pulumi.set(__self__, "crontab", crontab)
        if path_threshold is not None:
            pulumi.set(__self__, "path_threshold", path_threshold)
        if single_threshold is not None:
            pulumi.set(__self__, "single_threshold", single_threshold)

    @property
    @pulumi.getter
    def crontab(self) -> Optional[pulumi.Input[str]]:
        """
        The weekly cycle days and cycle time periods.
        """
        return pulumi.get(self, "crontab")

    @crontab.setter
    def crontab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crontab", value)

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold of the number of requests for path access.
        """
        return pulumi.get(self, "path_threshold")

    @path_threshold.setter
    def path_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "path_threshold", value)

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold of the number of visits to each statistical object.
        """
        return pulumi.get(self, "single_threshold")

    @single_threshold.setter
    def single_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "single_threshold", value)


@pulumi.input_type
class CustomBotAccurateArgs:
    def __init__(__self__, *,
                 accurate_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CustomBotAccurateAccurateRuleArgs']]]] = None,
                 logic: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CustomBotAccurateAccurateRuleArgs']]] accurate_rules: Details of advanced conditions.
        :param pulumi.Input[int] logic: The logical relationship of advanced conditions.
        """
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomBotAccurateAccurateRuleArgs']]]]:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @accurate_rules.setter
    def accurate_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomBotAccurateAccurateRuleArgs']]]]):
        pulumi.set(self, "accurate_rules", value)

    @property
    @pulumi.getter
    def logic(self) -> Optional[pulumi.Input[int]]:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")

    @logic.setter
    def logic(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logic", value)


@pulumi.input_type
class CustomBotAccurateAccurateRuleArgs:
    def __init__(__self__, *,
                 http_obj: Optional[pulumi.Input[str]] = None,
                 obj_type: Optional[pulumi.Input[int]] = None,
                 opretar: Optional[pulumi.Input[int]] = None,
                 property: Optional[pulumi.Input[int]] = None,
                 value_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] http_obj: The HTTP object to be added to the advanced conditions.
        :param pulumi.Input[int] obj_type: The matching field for HTTP objects.
        :param pulumi.Input[int] opretar: The logical operator for the condition.
        :param pulumi.Input[int] property: Operate the properties of the http object.
        :param pulumi.Input[str] value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @http_obj.setter
    def http_obj(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_obj", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[pulumi.Input[int]]:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def opretar(self) -> Optional[pulumi.Input[int]]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @opretar.setter
    def opretar(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "opretar", value)

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[pulumi.Input[str]]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @value_string.setter
    def value_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_string", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[int]]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class CustomPageAccurateArgs:
    def __init__(__self__, *,
                 accurate_rules: pulumi.Input[Sequence[pulumi.Input['CustomPageAccurateAccurateRuleArgs']]],
                 logic: pulumi.Input[int]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CustomPageAccurateAccurateRuleArgs']]] accurate_rules: Details of advanced conditions.
        :param pulumi.Input[int] logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> pulumi.Input[Sequence[pulumi.Input['CustomPageAccurateAccurateRuleArgs']]]:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @accurate_rules.setter
    def accurate_rules(self, value: pulumi.Input[Sequence[pulumi.Input['CustomPageAccurateAccurateRuleArgs']]]):
        pulumi.set(self, "accurate_rules", value)

    @property
    @pulumi.getter
    def logic(self) -> pulumi.Input[int]:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")

    @logic.setter
    def logic(self, value: pulumi.Input[int]):
        pulumi.set(self, "logic", value)


@pulumi.input_type
class CustomPageAccurateAccurateRuleArgs:
    def __init__(__self__, *,
                 http_obj: pulumi.Input[str],
                 obj_type: pulumi.Input[int],
                 opretar: pulumi.Input[int],
                 property: pulumi.Input[int],
                 value_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] http_obj: The HTTP object to be added to the advanced conditions.
        :param pulumi.Input[int] obj_type: The matching field for HTTP objects.
        :param pulumi.Input[int] opretar: The logical operator for the condition.
        :param pulumi.Input[int] property: Operate the properties of the http object.
        :param pulumi.Input[str] value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> pulumi.Input[str]:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @http_obj.setter
    def http_obj(self, value: pulumi.Input[str]):
        pulumi.set(self, "http_obj", value)

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> pulumi.Input[int]:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @obj_type.setter
    def obj_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "obj_type", value)

    @property
    @pulumi.getter
    def opretar(self) -> pulumi.Input[int]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @opretar.setter
    def opretar(self, value: pulumi.Input[int]):
        pulumi.set(self, "opretar", value)

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> pulumi.Input[str]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @value_string.setter
    def value_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_string", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[int]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[int]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class HostGroupRelatedRuleArgs:
    def __init__(__self__, *,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] rule_name: The name of the rule.
        :param pulumi.Input[str] rule_tag: The ID of the rule.
        :param pulumi.Input[str] rule_type: The type of the rule.
        """
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the rule.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class IpGroupRelatedRuleArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: The information of the protected domain names associated with the rules.
        :param pulumi.Input[str] rule_name: The name of the rule.
        :param pulumi.Input[str] rule_tag: The ID of the rule.
        :param pulumi.Input[str] rule_type: The type of the rule.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The information of the protected domain names associated with the rules.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the rule.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class VulnerabilityAdvanceConfigArgs:
    def __init__(__self__, *,
                 auto_traversal: pulumi.Input['VulnerabilityAdvanceConfigAutoTraversalArgs'],
                 freq_scan: pulumi.Input['VulnerabilityAdvanceConfigFreqScanArgs']):
        """
        :param pulumi.Input['VulnerabilityAdvanceConfigAutoTraversalArgs'] auto_traversal: Configuration of the automatic blocking capability for directory traversal.
        :param pulumi.Input['VulnerabilityAdvanceConfigFreqScanArgs'] freq_scan: Configuration of high-frequency scanning automatic blocking capability.
        """
        pulumi.set(__self__, "auto_traversal", auto_traversal)
        pulumi.set(__self__, "freq_scan", freq_scan)

    @property
    @pulumi.getter(name="autoTraversal")
    def auto_traversal(self) -> pulumi.Input['VulnerabilityAdvanceConfigAutoTraversalArgs']:
        """
        Configuration of the automatic blocking capability for directory traversal.
        """
        return pulumi.get(self, "auto_traversal")

    @auto_traversal.setter
    def auto_traversal(self, value: pulumi.Input['VulnerabilityAdvanceConfigAutoTraversalArgs']):
        pulumi.set(self, "auto_traversal", value)

    @property
    @pulumi.getter(name="freqScan")
    def freq_scan(self) -> pulumi.Input['VulnerabilityAdvanceConfigFreqScanArgs']:
        """
        Configuration of high-frequency scanning automatic blocking capability.
        """
        return pulumi.get(self, "freq_scan")

    @freq_scan.setter
    def freq_scan(self, value: pulumi.Input['VulnerabilityAdvanceConfigFreqScanArgs']):
        pulumi.set(self, "freq_scan", value)


@pulumi.input_type
class VulnerabilityAdvanceConfigAutoTraversalArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 rule: Optional[pulumi.Input['VulnerabilityAdvanceConfigAutoTraversalRuleArgs']] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable: Rule switch, controlling whether the current rule takes effect.
        :param pulumi.Input['VulnerabilityAdvanceConfigAutoTraversalRuleArgs'] rule: Rule detail.
        :param pulumi.Input[str] rule_tag: Directory traversal automatically blocks the rule label, that is, the complete rule ID.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Rule switch, controlling whether the current rule takes effect.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input['VulnerabilityAdvanceConfigAutoTraversalRuleArgs']]:
        """
        Rule detail.
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input['VulnerabilityAdvanceConfigAutoTraversalRuleArgs']]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Directory traversal automatically blocks the rule label, that is, the complete rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)


@pulumi.input_type
class VulnerabilityAdvanceConfigAutoTraversalRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[int],
                 count_time: pulumi.Input[int],
                 effect_time: pulumi.Input[int],
                 effect_time_view_unit: pulumi.Input[str],
                 field: pulumi.Input[str],
                 hit_request_count: pulumi.Input[int],
                 response_http_status_hit_percent: pulumi.Input[int],
                 response_http_statuses: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[int] action: Disposal action.
        :param pulumi.Input[int] count_time: Disposal action.
        :param pulumi.Input[int] effect_time: Ban time (seconds).
        :param pulumi.Input[str] effect_time_view_unit: The body records the units displayed at the front end of the length: s, min, hour, and day.
        :param pulumi.Input[str] field: statistical object.
        :param pulumi.Input[int] hit_request_count: The number of request triggers.
        :param pulumi.Input[int] response_http_status_hit_percent: Hit percentage: 0-99.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] response_http_statuses: Response status code.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "count_time", count_time)
        pulumi.set(__self__, "effect_time", effect_time)
        pulumi.set(__self__, "effect_time_view_unit", effect_time_view_unit)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "hit_request_count", hit_request_count)
        pulumi.set(__self__, "response_http_status_hit_percent", response_http_status_hit_percent)
        pulumi.set(__self__, "response_http_statuses", response_http_statuses)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[int]:
        """
        Disposal action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[int]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> pulumi.Input[int]:
        """
        Disposal action.
        """
        return pulumi.get(self, "count_time")

    @count_time.setter
    def count_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "count_time", value)

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> pulumi.Input[int]:
        """
        Ban time (seconds).
        """
        return pulumi.get(self, "effect_time")

    @effect_time.setter
    def effect_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "effect_time", value)

    @property
    @pulumi.getter(name="effectTimeViewUnit")
    def effect_time_view_unit(self) -> pulumi.Input[str]:
        """
        The body records the units displayed at the front end of the length: s, min, hour, and day.
        """
        return pulumi.get(self, "effect_time_view_unit")

    @effect_time_view_unit.setter
    def effect_time_view_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect_time_view_unit", value)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter(name="hitRequestCount")
    def hit_request_count(self) -> pulumi.Input[int]:
        """
        The number of request triggers.
        """
        return pulumi.get(self, "hit_request_count")

    @hit_request_count.setter
    def hit_request_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "hit_request_count", value)

    @property
    @pulumi.getter(name="responseHttpStatusHitPercent")
    def response_http_status_hit_percent(self) -> pulumi.Input[int]:
        """
        Hit percentage: 0-99.
        """
        return pulumi.get(self, "response_http_status_hit_percent")

    @response_http_status_hit_percent.setter
    def response_http_status_hit_percent(self, value: pulumi.Input[int]):
        pulumi.set(self, "response_http_status_hit_percent", value)

    @property
    @pulumi.getter(name="responseHttpStatuses")
    def response_http_statuses(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Response status code.
        """
        return pulumi.get(self, "response_http_statuses")

    @response_http_statuses.setter
    def response_http_statuses(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "response_http_statuses", value)


@pulumi.input_type
class VulnerabilityAdvanceConfigFreqScanArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 rule: Optional[pulumi.Input['VulnerabilityAdvanceConfigFreqScanRuleArgs']] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable: Rule switch, controlling whether the current rule takes effect.
        :param pulumi.Input['VulnerabilityAdvanceConfigFreqScanRuleArgs'] rule: Rule detail.
        :param pulumi.Input[str] rule_tag: Directory traversal automatically blocks the rule label, that is, the complete rule ID.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Rule switch, controlling whether the current rule takes effect.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input['VulnerabilityAdvanceConfigFreqScanRuleArgs']]:
        """
        Rule detail.
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input['VulnerabilityAdvanceConfigFreqScanRuleArgs']]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Directory traversal automatically blocks the rule label, that is, the complete rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)


@pulumi.input_type
class VulnerabilityAdvanceConfigFreqScanRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[int],
                 count_time: pulumi.Input[int],
                 effect_time: pulumi.Input[int],
                 effect_time_view_unit: pulumi.Input[str],
                 field: pulumi.Input[str],
                 hit_request_count: pulumi.Input[int]):
        """
        :param pulumi.Input[int] action: Disposal action.
        :param pulumi.Input[int] count_time: Disposal action.
        :param pulumi.Input[int] effect_time: Ban time (seconds).
        :param pulumi.Input[str] effect_time_view_unit: The body records the units displayed at the front end of the length: s, min, hour, and day.
        :param pulumi.Input[str] field: statistical object.
        :param pulumi.Input[int] hit_request_count: The number of request triggers.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "count_time", count_time)
        pulumi.set(__self__, "effect_time", effect_time)
        pulumi.set(__self__, "effect_time_view_unit", effect_time_view_unit)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "hit_request_count", hit_request_count)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[int]:
        """
        Disposal action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[int]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> pulumi.Input[int]:
        """
        Disposal action.
        """
        return pulumi.get(self, "count_time")

    @count_time.setter
    def count_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "count_time", value)

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> pulumi.Input[int]:
        """
        Ban time (seconds).
        """
        return pulumi.get(self, "effect_time")

    @effect_time.setter
    def effect_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "effect_time", value)

    @property
    @pulumi.getter(name="effectTimeViewUnit")
    def effect_time_view_unit(self) -> pulumi.Input[str]:
        """
        The body records the units displayed at the front end of the length: s, min, hour, and day.
        """
        return pulumi.get(self, "effect_time_view_unit")

    @effect_time_view_unit.setter
    def effect_time_view_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect_time_view_unit", value)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter(name="hitRequestCount")
    def hit_request_count(self) -> pulumi.Input[int]:
        """
        The number of request triggers.
        """
        return pulumi.get(self, "hit_request_count")

    @hit_request_count.setter
    def hit_request_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "hit_request_count", value)


@pulumi.input_type
class VulnerabilityRuleDetailArgs:
    def __init__(__self__, *,
                 accuracy: Optional[pulumi.Input[int]] = None,
                 cve_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 risk_level: Optional[pulumi.Input[int]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_set_name: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None,
                 subcategory: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] accuracy: The accuracy of the rules. Only when updating the custom vulnerability rules.
        :param pulumi.Input[str] cve_id: The ID of CVE. Only when updating the custom vulnerability rules.
        :param pulumi.Input[str] description: The description of the rules. Only when updating the custom vulnerability rules.
        :param pulumi.Input[int] risk_level: Risk grade. Only when updating the custom vulnerability rules.
        :param pulumi.Input[str] rule_name: The name of rule. Only when updating the custom vulnerability rules.
        :param pulumi.Input[str] rule_set_name: First-level rule category. Only when updating the custom vulnerability rules.
        :param pulumi.Input[str] rule_tag: Rule label, that is, the complete rule ID. Only when updating the custom vulnerability rules.
        :param pulumi.Input[str] subcategory: Secondary rule category. Only when updating the custom vulnerability rules.
        :param pulumi.Input[str] update_time: The update time of the rules. Only when updating the custom vulnerability rules.
        """
        if accuracy is not None:
            pulumi.set(__self__, "accuracy", accuracy)
        if cve_id is not None:
            pulumi.set(__self__, "cve_id", cve_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_set_name is not None:
            pulumi.set(__self__, "rule_set_name", rule_set_name)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if subcategory is not None:
            pulumi.set(__self__, "subcategory", subcategory)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def accuracy(self) -> Optional[pulumi.Input[int]]:
        """
        The accuracy of the rules. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "accuracy")

    @accuracy.setter
    def accuracy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accuracy", value)

    @property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of CVE. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "cve_id")

    @cve_id.setter
    def cve_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cve_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rules. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[pulumi.Input[int]]:
        """
        Risk grade. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "risk_level")

    @risk_level.setter
    def risk_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "risk_level", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of rule. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleSetName")
    def rule_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        First-level rule category. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "rule_set_name")

    @rule_set_name.setter
    def rule_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_set_name", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Rule label, that is, the complete rule ID. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter
    def subcategory(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary rule category. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "subcategory")

    @subcategory.setter
    def subcategory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subcategory", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of the rules. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class VulnerabilitySystemRuleSwitchArgs:
    def __init__(__self__, *,
                 custom_system_rule_switch: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] custom_system_rule_switch: Custom rule switch.
        :param pulumi.Input[int] rule_id: The ID of rule.
        """
        if custom_system_rule_switch is not None:
            pulumi.set(__self__, "custom_system_rule_switch", custom_system_rule_switch)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="customSystemRuleSwitch")
    def custom_system_rule_switch(self) -> Optional[pulumi.Input[int]]:
        """
        Custom rule switch.
        """
        return pulumi.get(self, "custom_system_rule_switch")

    @custom_system_rule_switch.setter
    def custom_system_rule_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_system_rule_switch", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of rule.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)


@pulumi.input_type
class WafDomainBackendGroupArgs:
    def __init__(__self__, *,
                 access_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupBackendArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] access_ports: Access port number.
        :param pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupBackendArgs']]] backends: The details of the source station group.
        :param pulumi.Input[str] name: Source station group name.
        """
        if access_ports is not None:
            pulumi.set(__self__, "access_ports", access_ports)
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accessPorts")
    def access_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Access port number.
        """
        return pulumi.get(self, "access_ports")

    @access_ports.setter
    def access_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "access_ports", value)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupBackendArgs']]]]:
        """
        The details of the source station group.
        """
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupBackendArgs']]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Source station group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WafDomainBackendGroupBackendArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] ip: Source station IP address.
        :param pulumi.Input[int] port: Source station port number.
        :param pulumi.Input[str] protocol: The agreement of Source Station.
        :param pulumi.Input[int] weight: The weight of the source station rules.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source station IP address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Source station port number.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The agreement of Source Station.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight of the source station rules.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class WafDomainCloudAccessConfigArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 access_protocol: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 lost_association_from_alb: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[str] access_protocol: The access protocol needs to be consistent with the monitoring protocol.
        :param pulumi.Input[str] instance_name: The name of instance. Works only on modified scenes.
        :param pulumi.Input[str] listener_id: The ID of listener.
        :param pulumi.Input[int] lost_association_from_alb: Whether the instance is unbound from the alb and is unbound on the ALB side. Works only on modified scenes.
        :param pulumi.Input[str] port: The port number corresponding to the listener.
        :param pulumi.Input[str] protocol: The type of Listener protocol.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if access_protocol is not None:
            pulumi.set(__self__, "access_protocol", access_protocol)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if lost_association_from_alb is not None:
            pulumi.set(__self__, "lost_association_from_alb", lost_association_from_alb)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="accessProtocol")
    def access_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The access protocol needs to be consistent with the monitoring protocol.
        """
        return pulumi.get(self, "access_protocol")

    @access_protocol.setter
    def access_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_protocol", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of instance. Works only on modified scenes.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of listener.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="lostAssociationFromAlb")
    def lost_association_from_alb(self) -> Optional[pulumi.Input[int]]:
        """
        Whether the instance is unbound from the alb and is unbound on the ALB side. Works only on modified scenes.
        """
        return pulumi.get(self, "lost_association_from_alb")

    @lost_association_from_alb.setter
    def lost_association_from_alb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lost_association_from_alb", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        The port number corresponding to the listener.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The type of Listener protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WafDomainExtraDefenceModeLbInstanceArgs:
    def __init__(__self__, *,
                 defence_mode: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] defence_mode: Set the protection mode for exceptional ALB instances. Works only on modified scenes.
        :param pulumi.Input[str] instance_id: The Id of ALB instance. Works only on modified scenes.
        """
        if defence_mode is not None:
            pulumi.set(__self__, "defence_mode", defence_mode)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="defenceMode")
    def defence_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Set the protection mode for exceptional ALB instances. Works only on modified scenes.
        """
        return pulumi.get(self, "defence_mode")

    @defence_mode.setter
    def defence_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "defence_mode", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Id of ALB instance. Works only on modified scenes.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


@pulumi.input_type
class WafDomainProtocolPortsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 https: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] http: Ports supported by the HTTP protocol.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] https: Ports supported by the HTTPs protocol.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if https is not None:
            pulumi.set(__self__, "https", https)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Ports supported by the HTTP protocol.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Ports supported by the HTTPs protocol.
        """
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "https", value)


@pulumi.input_type
class WafDomainTlsFieldsConfigArgs:
    def __init__(__self__, *,
                 headers_config: Optional[pulumi.Input['WafDomainTlsFieldsConfigHeadersConfigArgs']] = None):
        """
        :param pulumi.Input['WafDomainTlsFieldsConfigHeadersConfigArgs'] headers_config: The configuration of Headers. Works only on modified scenes.
        """
        if headers_config is not None:
            pulumi.set(__self__, "headers_config", headers_config)

    @property
    @pulumi.getter(name="headersConfig")
    def headers_config(self) -> Optional[pulumi.Input['WafDomainTlsFieldsConfigHeadersConfigArgs']]:
        """
        The configuration of Headers. Works only on modified scenes.
        """
        return pulumi.get(self, "headers_config")

    @headers_config.setter
    def headers_config(self, value: Optional[pulumi.Input['WafDomainTlsFieldsConfigHeadersConfigArgs']]):
        pulumi.set(self, "headers_config", value)


@pulumi.input_type
class WafDomainTlsFieldsConfigHeadersConfigArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[int]] = None,
                 excluded_key_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 statistical_key_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] enable: Whether the log contains this field. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_key_lists: For the use of composite fields, exclude the fields in the keyword list from the JSON of the fields. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] statistical_key_lists: Create statistical indexes for the fields of the list. Works only on modified scenes.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if excluded_key_lists is not None:
            pulumi.set(__self__, "excluded_key_lists", excluded_key_lists)
        if statistical_key_lists is not None:
            pulumi.set(__self__, "statistical_key_lists", statistical_key_lists)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether the log contains this field. Works only on modified scenes.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="excludedKeyLists")
    def excluded_key_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        For the use of composite fields, exclude the fields in the keyword list from the JSON of the fields. Works only on modified scenes.
        """
        return pulumi.get(self, "excluded_key_lists")

    @excluded_key_lists.setter
    def excluded_key_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_key_lists", value)

    @property
    @pulumi.getter(name="statisticalKeyLists")
    def statistical_key_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Create statistical indexes for the fields of the list. Works only on modified scenes.
        """
        return pulumi.get(self, "statistical_key_lists")

    @statistical_key_lists.setter
    def statistical_key_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "statistical_key_lists", value)


