# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IpGroupArgs', 'IpGroup']

@pulumi.input_type
class IpGroupArgs:
    def __init__(__self__, *,
                 add_type: pulumi.Input[str],
                 ip_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IpGroup resource.
        :param pulumi.Input[str] add_type: The way of addition.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: The IP address to be added.
        :param pulumi.Input[str] name: The name of ip group.
        """
        pulumi.set(__self__, "add_type", add_type)
        pulumi.set(__self__, "ip_lists", ip_lists)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="addType")
    def add_type(self) -> pulumi.Input[str]:
        """
        The way of addition.
        """
        return pulumi.get(self, "add_type")

    @add_type.setter
    def add_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "add_type", value)

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The IP address to be added.
        """
        return pulumi.get(self, "ip_lists")

    @ip_lists.setter
    def ip_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ip_lists", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of ip group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IpGroupState:
    def __init__(__self__, *,
                 add_type: Optional[pulumi.Input[str]] = None,
                 ip_count: Optional[pulumi.Input[int]] = None,
                 ip_group_id: Optional[pulumi.Input[int]] = None,
                 ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 related_rules: Optional[pulumi.Input[Sequence[pulumi.Input['IpGroupRelatedRuleArgs']]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IpGroup resources.
        :param pulumi.Input[str] add_type: The way of addition.
        :param pulumi.Input[int] ip_count: The number of IP addresses within the address group.
        :param pulumi.Input[int] ip_group_id: The ID of the ip group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: The IP address to be added.
        :param pulumi.Input[str] name: The name of ip group.
        :param pulumi.Input[Sequence[pulumi.Input['IpGroupRelatedRuleArgs']]] related_rules: The list of associated rules.
        :param pulumi.Input[str] update_time: ip group update time.
        """
        if add_type is not None:
            pulumi.set(__self__, "add_type", add_type)
        if ip_count is not None:
            pulumi.set(__self__, "ip_count", ip_count)
        if ip_group_id is not None:
            pulumi.set(__self__, "ip_group_id", ip_group_id)
        if ip_lists is not None:
            pulumi.set(__self__, "ip_lists", ip_lists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if related_rules is not None:
            pulumi.set(__self__, "related_rules", related_rules)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="addType")
    def add_type(self) -> Optional[pulumi.Input[str]]:
        """
        The way of addition.
        """
        return pulumi.get(self, "add_type")

    @add_type.setter
    def add_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_type", value)

    @property
    @pulumi.getter(name="ipCount")
    def ip_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of IP addresses within the address group.
        """
        return pulumi.get(self, "ip_count")

    @ip_count.setter
    def ip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_count", value)

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the ip group.
        """
        return pulumi.get(self, "ip_group_id")

    @ip_group_id.setter
    def ip_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_group_id", value)

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IP address to be added.
        """
        return pulumi.get(self, "ip_lists")

    @ip_lists.setter
    def ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_lists", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of ip group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="relatedRules")
    def related_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpGroupRelatedRuleArgs']]]]:
        """
        The list of associated rules.
        """
        return pulumi.get(self, "related_rules")

    @related_rules.setter
    def related_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpGroupRelatedRuleArgs']]]]):
        pulumi.set(self, "related_rules", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        ip group update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class IpGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_type: Optional[pulumi.Input[str]] = None,
                 ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage waf ip group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.IpGroup("foo",
            add_type="List",
            ip_lists=[
                "1.1.1.1",
                "1.1.1.2",
                "1.1.1.3",
            ])
        ```

        ## Import

        WafIpGroup can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/ipGroup:IpGroup default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_type: The way of addition.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: The IP address to be added.
        :param pulumi.Input[str] name: The name of ip group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage waf ip group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.IpGroup("foo",
            add_type="List",
            ip_lists=[
                "1.1.1.1",
                "1.1.1.2",
                "1.1.1.3",
            ])
        ```

        ## Import

        WafIpGroup can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/ipGroup:IpGroup default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param IpGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_type: Optional[pulumi.Input[str]] = None,
                 ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpGroupArgs.__new__(IpGroupArgs)

            if add_type is None and not opts.urn:
                raise TypeError("Missing required property 'add_type'")
            __props__.__dict__["add_type"] = add_type
            if ip_lists is None and not opts.urn:
                raise TypeError("Missing required property 'ip_lists'")
            __props__.__dict__["ip_lists"] = ip_lists
            __props__.__dict__["name"] = name
            __props__.__dict__["ip_count"] = None
            __props__.__dict__["ip_group_id"] = None
            __props__.__dict__["related_rules"] = None
            __props__.__dict__["update_time"] = None
        super(IpGroup, __self__).__init__(
            'volcengine:waf/ipGroup:IpGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_type: Optional[pulumi.Input[str]] = None,
            ip_count: Optional[pulumi.Input[int]] = None,
            ip_group_id: Optional[pulumi.Input[int]] = None,
            ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            related_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IpGroupRelatedRuleArgs']]]]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'IpGroup':
        """
        Get an existing IpGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_type: The way of addition.
        :param pulumi.Input[int] ip_count: The number of IP addresses within the address group.
        :param pulumi.Input[int] ip_group_id: The ID of the ip group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: The IP address to be added.
        :param pulumi.Input[str] name: The name of ip group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IpGroupRelatedRuleArgs']]]] related_rules: The list of associated rules.
        :param pulumi.Input[str] update_time: ip group update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpGroupState.__new__(_IpGroupState)

        __props__.__dict__["add_type"] = add_type
        __props__.__dict__["ip_count"] = ip_count
        __props__.__dict__["ip_group_id"] = ip_group_id
        __props__.__dict__["ip_lists"] = ip_lists
        __props__.__dict__["name"] = name
        __props__.__dict__["related_rules"] = related_rules
        __props__.__dict__["update_time"] = update_time
        return IpGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addType")
    def add_type(self) -> pulumi.Output[str]:
        """
        The way of addition.
        """
        return pulumi.get(self, "add_type")

    @property
    @pulumi.getter(name="ipCount")
    def ip_count(self) -> pulumi.Output[int]:
        """
        The number of IP addresses within the address group.
        """
        return pulumi.get(self, "ip_count")

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> pulumi.Output[int]:
        """
        The ID of the ip group.
        """
        return pulumi.get(self, "ip_group_id")

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        The IP address to be added.
        """
        return pulumi.get(self, "ip_lists")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of ip group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="relatedRules")
    def related_rules(self) -> pulumi.Output[Sequence['outputs.IpGroupRelatedRule']]:
        """
        The list of associated rules.
        """
        return pulumi.get(self, "related_rules")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        ip group update time.
        """
        return pulumi.get(self, "update_time")

