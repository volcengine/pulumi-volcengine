# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProhibitionsResult',
    'AwaitableGetProhibitionsResult',
    'get_prohibitions',
    'get_prohibitions_output',
]

@pulumi.output_type
class GetProhibitionsResult:
    """
    A collection of values returned by getProhibitions.
    """
    def __init__(__self__, end_time=None, host=None, id=None, ip_agg_groups=None, letter_order_by=None, name_regex=None, output_file=None, reasons=None, start_time=None, total_count=None):
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_agg_groups and not isinstance(ip_agg_groups, list):
            raise TypeError("Expected argument 'ip_agg_groups' to be a list")
        pulumi.set(__self__, "ip_agg_groups", ip_agg_groups)
        if letter_order_by and not isinstance(letter_order_by, str):
            raise TypeError("Expected argument 'letter_order_by' to be a str")
        pulumi.set(__self__, "letter_order_by", letter_order_by)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if reasons and not isinstance(reasons, list):
            raise TypeError("Expected argument 'reasons' to be a list")
        pulumi.set(__self__, "reasons", reasons)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAggGroups")
    def ip_agg_groups(self) -> Sequence['outputs.GetProhibitionsIpAggGroupResult']:
        """
        Details of the attack IP.
        """
        return pulumi.get(self, "ip_agg_groups")

    @property
    @pulumi.getter(name="letterOrderBy")
    def letter_order_by(self) -> Optional[str]:
        return pulumi.get(self, "letter_order_by")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def reasons(self) -> Optional[Sequence[str]]:
        """
        Reason for the ban.
        """
        return pulumi.get(self, "reasons")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetProhibitionsResult(GetProhibitionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProhibitionsResult(
            end_time=self.end_time,
            host=self.host,
            id=self.id,
            ip_agg_groups=self.ip_agg_groups,
            letter_order_by=self.letter_order_by,
            name_regex=self.name_regex,
            output_file=self.output_file,
            reasons=self.reasons,
            start_time=self.start_time,
            total_count=self.total_count)


def get_prohibitions(end_time: Optional[int] = None,
                     host: Optional[str] = None,
                     letter_order_by: Optional[str] = None,
                     name_regex: Optional[str] = None,
                     output_file: Optional[str] = None,
                     reasons: Optional[Sequence[str]] = None,
                     start_time: Optional[int] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProhibitionsResult:
    """
    Use this data source to query detailed information of waf prohibitions
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_prohibitions(end_time=1749808824,
        host="www.tf-test.com",
        start_time=1749805224)
    ```


    :param int end_time: end time.
    :param str host: The domain name of the website that needs to be queried.
    :param str letter_order_by: The list shows the order.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] reasons: Attack type filtering.
    :param int start_time: starting time.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['host'] = host
    __args__['letterOrderBy'] = letter_order_by
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['reasons'] = reasons
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:waf/getProhibitions:getProhibitions', __args__, opts=opts, typ=GetProhibitionsResult).value

    return AwaitableGetProhibitionsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        ip_agg_groups=pulumi.get(__ret__, 'ip_agg_groups'),
        letter_order_by=pulumi.get(__ret__, 'letter_order_by'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        reasons=pulumi.get(__ret__, 'reasons'),
        start_time=pulumi.get(__ret__, 'start_time'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_prohibitions)
def get_prohibitions_output(end_time: Optional[pulumi.Input[int]] = None,
                            host: Optional[pulumi.Input[str]] = None,
                            letter_order_by: Optional[pulumi.Input[Optional[str]]] = None,
                            name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                            output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            reasons: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            start_time: Optional[pulumi.Input[int]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProhibitionsResult]:
    """
    Use this data source to query detailed information of waf prohibitions
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_prohibitions(end_time=1749808824,
        host="www.tf-test.com",
        start_time=1749805224)
    ```


    :param int end_time: end time.
    :param str host: The domain name of the website that needs to be queried.
    :param str letter_order_by: The list shows the order.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] reasons: Attack type filtering.
    :param int start_time: starting time.
    """
    ...
