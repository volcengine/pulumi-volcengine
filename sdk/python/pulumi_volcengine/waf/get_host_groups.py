# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetHostGroupsResult',
    'AwaitableGetHostGroupsResult',
    'get_host_groups',
    'get_host_groups_output',
]

@pulumi.output_type
class GetHostGroupsResult:
    """
    A collection of values returned by getHostGroups.
    """
    def __init__(__self__, host_fix=None, host_group_id=None, host_group_lists=None, id=None, ids=None, list_all=None, name_fix=None, name_regex=None, output_file=None, rule_tag=None, time_order_by=None, total_count=None):
        if host_fix and not isinstance(host_fix, str):
            raise TypeError("Expected argument 'host_fix' to be a str")
        pulumi.set(__self__, "host_fix", host_fix)
        if host_group_id and not isinstance(host_group_id, int):
            raise TypeError("Expected argument 'host_group_id' to be a int")
        pulumi.set(__self__, "host_group_id", host_group_id)
        if host_group_lists and not isinstance(host_group_lists, list):
            raise TypeError("Expected argument 'host_group_lists' to be a list")
        pulumi.set(__self__, "host_group_lists", host_group_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if list_all and not isinstance(list_all, bool):
            raise TypeError("Expected argument 'list_all' to be a bool")
        pulumi.set(__self__, "list_all", list_all)
        if name_fix and not isinstance(name_fix, str):
            raise TypeError("Expected argument 'name_fix' to be a str")
        pulumi.set(__self__, "name_fix", name_fix)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if rule_tag and not isinstance(rule_tag, str):
            raise TypeError("Expected argument 'rule_tag' to be a str")
        pulumi.set(__self__, "rule_tag", rule_tag)
        if time_order_by and not isinstance(time_order_by, str):
            raise TypeError("Expected argument 'time_order_by' to be a str")
        pulumi.set(__self__, "time_order_by", time_order_by)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="hostFix")
    def host_fix(self) -> Optional[str]:
        return pulumi.get(self, "host_fix")

    @property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> Optional[int]:
        """
        The ID of the domain name group.
        """
        return pulumi.get(self, "host_group_id")

    @property
    @pulumi.getter(name="hostGroupLists")
    def host_group_lists(self) -> Sequence['outputs.GetHostGroupsHostGroupListResult']:
        """
        Details of the domain name group list.
        """
        return pulumi.get(self, "host_group_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="listAll")
    def list_all(self) -> Optional[bool]:
        return pulumi.get(self, "list_all")

    @property
    @pulumi.getter(name="nameFix")
    def name_fix(self) -> Optional[str]:
        return pulumi.get(self, "name_fix")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="timeOrderBy")
    def time_order_by(self) -> str:
        return pulumi.get(self, "time_order_by")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetHostGroupsResult(GetHostGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostGroupsResult(
            host_fix=self.host_fix,
            host_group_id=self.host_group_id,
            host_group_lists=self.host_group_lists,
            id=self.id,
            ids=self.ids,
            list_all=self.list_all,
            name_fix=self.name_fix,
            name_regex=self.name_regex,
            output_file=self.output_file,
            rule_tag=self.rule_tag,
            time_order_by=self.time_order_by,
            total_count=self.total_count)


def get_host_groups(host_fix: Optional[str] = None,
                    host_group_id: Optional[int] = None,
                    ids: Optional[Sequence[str]] = None,
                    list_all: Optional[bool] = None,
                    name_fix: Optional[str] = None,
                    name_regex: Optional[str] = None,
                    output_file: Optional[str] = None,
                    rule_tag: Optional[str] = None,
                    time_order_by: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostGroupsResult:
    """
    Use this data source to query detailed information of waf host groups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_host_groups(host_fix="www.tf-test.com",
        time_order_by="DESC")
    ```


    :param str host_fix: The domain name information queried.
    :param int host_group_id: The ID of the domain name group.
    :param Sequence[str] ids: A list of IDs.
    :param bool list_all: Whether to return all domain name groups and their name information, it returns by default.
    :param str name_fix: The name of the domain name group being queried.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str rule_tag: The rule ID associated with domain name groups.
    :param str time_order_by: The list of rule ids associated with the domain name group shows the timing sequence.
    """
    __args__ = dict()
    __args__['hostFix'] = host_fix
    __args__['hostGroupId'] = host_group_id
    __args__['ids'] = ids
    __args__['listAll'] = list_all
    __args__['nameFix'] = name_fix
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['ruleTag'] = rule_tag
    __args__['timeOrderBy'] = time_order_by
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:waf/getHostGroups:getHostGroups', __args__, opts=opts, typ=GetHostGroupsResult).value

    return AwaitableGetHostGroupsResult(
        host_fix=pulumi.get(__ret__, 'host_fix'),
        host_group_id=pulumi.get(__ret__, 'host_group_id'),
        host_group_lists=pulumi.get(__ret__, 'host_group_lists'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        list_all=pulumi.get(__ret__, 'list_all'),
        name_fix=pulumi.get(__ret__, 'name_fix'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        rule_tag=pulumi.get(__ret__, 'rule_tag'),
        time_order_by=pulumi.get(__ret__, 'time_order_by'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_host_groups)
def get_host_groups_output(host_fix: Optional[pulumi.Input[Optional[str]]] = None,
                           host_group_id: Optional[pulumi.Input[Optional[int]]] = None,
                           ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           list_all: Optional[pulumi.Input[Optional[bool]]] = None,
                           name_fix: Optional[pulumi.Input[Optional[str]]] = None,
                           name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                           output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           rule_tag: Optional[pulumi.Input[Optional[str]]] = None,
                           time_order_by: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHostGroupsResult]:
    """
    Use this data source to query detailed information of waf host groups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_host_groups(host_fix="www.tf-test.com",
        time_order_by="DESC")
    ```


    :param str host_fix: The domain name information queried.
    :param int host_group_id: The ID of the domain name group.
    :param Sequence[str] ids: A list of IDs.
    :param bool list_all: Whether to return all domain name groups and their name information, it returns by default.
    :param str name_fix: The name of the domain name group being queried.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str rule_tag: The rule ID associated with domain name groups.
    :param str time_order_by: The list of rule ids associated with the domain name group shows the timing sequence.
    """
    ...
