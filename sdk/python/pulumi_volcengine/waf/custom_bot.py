# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomBotArgs', 'CustomBot']

@pulumi.input_type
class CustomBotArgs:
    def __init__(__self__, *,
                 accurate: pulumi.Input['CustomBotAccurateArgs'],
                 action: pulumi.Input[str],
                 bot_type: pulumi.Input[str],
                 enable: pulumi.Input[int],
                 host: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CustomBot resource.
        :param pulumi.Input['CustomBotAccurateArgs'] accurate: Advanced conditions.
        :param pulumi.Input[str] action: The execution action of the Bot.
        :param pulumi.Input[str] bot_type: bot name.
        :param pulumi.Input[int] enable: Whether to enable bot.
        :param pulumi.Input[str] host: Domain name information.
        :param pulumi.Input[str] description: The description of bot.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        """
        pulumi.set(__self__, "accurate", accurate)
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bot_type", bot_type)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "host", host)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)

    @property
    @pulumi.getter
    def accurate(self) -> pulumi.Input['CustomBotAccurateArgs']:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate")

    @accurate.setter
    def accurate(self, value: pulumi.Input['CustomBotAccurateArgs']):
        pulumi.set(self, "accurate", value)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        The execution action of the Bot.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="botType")
    def bot_type(self) -> pulumi.Input[str]:
        """
        bot name.
        """
        return pulumi.get(self, "bot_type")

    @bot_type.setter
    def bot_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "bot_type", value)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[int]:
        """
        Whether to enable bot.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Domain name information.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of bot.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the affiliated project resource.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)


@pulumi.input_type
class _CustomBotState:
    def __init__(__self__, *,
                 accurate: Optional[pulumi.Input['CustomBotAccurateArgs']] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 advanced: Optional[pulumi.Input[int]] = None,
                 bot_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CustomBot resources.
        :param pulumi.Input['CustomBotAccurateArgs'] accurate: Advanced conditions.
        :param pulumi.Input[str] action: The execution action of the Bot.
        :param pulumi.Input[int] advanced: Whether to set advanced conditions.
        :param pulumi.Input[str] bot_type: bot name.
        :param pulumi.Input[str] description: The description of bot.
        :param pulumi.Input[int] enable: Whether to enable bot.
        :param pulumi.Input[str] host: Domain name information.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        :param pulumi.Input[str] rule_tag: Rule unique identifier.
        :param pulumi.Input[str] update_time: The update time.
        """
        if accurate is not None:
            pulumi.set(__self__, "accurate", accurate)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if bot_type is not None:
            pulumi.set(__self__, "bot_type", bot_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def accurate(self) -> Optional[pulumi.Input['CustomBotAccurateArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate")

    @accurate.setter
    def accurate(self, value: Optional[pulumi.Input['CustomBotAccurateArgs']]):
        pulumi.set(self, "accurate", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The execution action of the Bot.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to set advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="botType")
    def bot_type(self) -> Optional[pulumi.Input[str]]:
        """
        bot name.
        """
        return pulumi.get(self, "bot_type")

    @bot_type.setter
    def bot_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bot_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of bot.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable bot.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name information.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the affiliated project resource.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class CustomBot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accurate: Optional[pulumi.Input[pulumi.InputType['CustomBotAccurateArgs']]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 bot_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage waf custom bot
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.CustomBot("foo",
            accurate=volcengine.waf.CustomBotAccurateArgs(
                accurate_rules=[
                    volcengine.waf.CustomBotAccurateAccurateRuleArgs(
                        http_obj="request.uri",
                        obj_type=1,
                        opretar=2,
                        property=0,
                        value_string="tf",
                    ),
                    volcengine.waf.CustomBotAccurateAccurateRuleArgs(
                        http_obj="request.schema",
                        obj_type=0,
                        opretar=2,
                        property=0,
                        value_string="tf-2",
                    ),
                ],
                logic=2,
            ),
            action="observe",
            bot_type="tf-test",
            description="tf-test",
            enable=1,
            host="www.tf-test.com",
            project_name="default")
        ```

        ## Import

        WafCustomBot can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/customBot:CustomBot default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CustomBotAccurateArgs']] accurate: Advanced conditions.
        :param pulumi.Input[str] action: The execution action of the Bot.
        :param pulumi.Input[str] bot_type: bot name.
        :param pulumi.Input[str] description: The description of bot.
        :param pulumi.Input[int] enable: Whether to enable bot.
        :param pulumi.Input[str] host: Domain name information.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomBotArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage waf custom bot
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.CustomBot("foo",
            accurate=volcengine.waf.CustomBotAccurateArgs(
                accurate_rules=[
                    volcengine.waf.CustomBotAccurateAccurateRuleArgs(
                        http_obj="request.uri",
                        obj_type=1,
                        opretar=2,
                        property=0,
                        value_string="tf",
                    ),
                    volcengine.waf.CustomBotAccurateAccurateRuleArgs(
                        http_obj="request.schema",
                        obj_type=0,
                        opretar=2,
                        property=0,
                        value_string="tf-2",
                    ),
                ],
                logic=2,
            ),
            action="observe",
            bot_type="tf-test",
            description="tf-test",
            enable=1,
            host="www.tf-test.com",
            project_name="default")
        ```

        ## Import

        WafCustomBot can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/customBot:CustomBot default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param CustomBotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomBotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accurate: Optional[pulumi.Input[pulumi.InputType['CustomBotAccurateArgs']]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 bot_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomBotArgs.__new__(CustomBotArgs)

            if accurate is None and not opts.urn:
                raise TypeError("Missing required property 'accurate'")
            __props__.__dict__["accurate"] = accurate
            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            if bot_type is None and not opts.urn:
                raise TypeError("Missing required property 'bot_type'")
            __props__.__dict__["bot_type"] = bot_type
            __props__.__dict__["description"] = description
            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["advanced"] = None
            __props__.__dict__["rule_tag"] = None
            __props__.__dict__["update_time"] = None
        super(CustomBot, __self__).__init__(
            'volcengine:waf/customBot:CustomBot',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accurate: Optional[pulumi.Input[pulumi.InputType['CustomBotAccurateArgs']]] = None,
            action: Optional[pulumi.Input[str]] = None,
            advanced: Optional[pulumi.Input[int]] = None,
            bot_type: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enable: Optional[pulumi.Input[int]] = None,
            host: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            rule_tag: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'CustomBot':
        """
        Get an existing CustomBot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CustomBotAccurateArgs']] accurate: Advanced conditions.
        :param pulumi.Input[str] action: The execution action of the Bot.
        :param pulumi.Input[int] advanced: Whether to set advanced conditions.
        :param pulumi.Input[str] bot_type: bot name.
        :param pulumi.Input[str] description: The description of bot.
        :param pulumi.Input[int] enable: Whether to enable bot.
        :param pulumi.Input[str] host: Domain name information.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        :param pulumi.Input[str] rule_tag: Rule unique identifier.
        :param pulumi.Input[str] update_time: The update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomBotState.__new__(_CustomBotState)

        __props__.__dict__["accurate"] = accurate
        __props__.__dict__["action"] = action
        __props__.__dict__["advanced"] = advanced
        __props__.__dict__["bot_type"] = bot_type
        __props__.__dict__["description"] = description
        __props__.__dict__["enable"] = enable
        __props__.__dict__["host"] = host
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["rule_tag"] = rule_tag
        __props__.__dict__["update_time"] = update_time
        return CustomBot(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def accurate(self) -> pulumi.Output['outputs.CustomBotAccurate']:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        The execution action of the Bot.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def advanced(self) -> pulumi.Output[int]:
        """
        Whether to set advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="botType")
    def bot_type(self) -> pulumi.Output[str]:
        """
        bot name.
        """
        return pulumi.get(self, "bot_type")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of bot.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[int]:
        """
        Whether to enable bot.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Domain name information.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[Optional[str]]:
        """
        The Name of the affiliated project resource.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> pulumi.Output[str]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

