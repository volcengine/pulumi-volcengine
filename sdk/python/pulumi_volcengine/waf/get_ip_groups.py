# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetIpGroupsResult',
    'AwaitableGetIpGroupsResult',
    'get_ip_groups',
    'get_ip_groups_output',
]

@pulumi.output_type
class GetIpGroupsResult:
    """
    A collection of values returned by getIpGroups.
    """
    def __init__(__self__, id=None, ip=None, ip_group_lists=None, name_regex=None, output_file=None, rule_tag=None, time_order_by=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if ip_group_lists and not isinstance(ip_group_lists, list):
            raise TypeError("Expected argument 'ip_group_lists' to be a list")
        pulumi.set(__self__, "ip_group_lists", ip_group_lists)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if rule_tag and not isinstance(rule_tag, str):
            raise TypeError("Expected argument 'rule_tag' to be a str")
        pulumi.set(__self__, "rule_tag", rule_tag)
        if time_order_by and not isinstance(time_order_by, str):
            raise TypeError("Expected argument 'time_order_by' to be a str")
        pulumi.set(__self__, "time_order_by", time_order_by)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipGroupLists")
    def ip_group_lists(self) -> Sequence['outputs.GetIpGroupsIpGroupListResult']:
        """
        Address group list information.
        """
        return pulumi.get(self, "ip_group_lists")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="timeOrderBy")
    def time_order_by(self) -> str:
        return pulumi.get(self, "time_order_by")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetIpGroupsResult(GetIpGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpGroupsResult(
            id=self.id,
            ip=self.ip,
            ip_group_lists=self.ip_group_lists,
            name_regex=self.name_regex,
            output_file=self.output_file,
            rule_tag=self.rule_tag,
            time_order_by=self.time_order_by,
            total_count=self.total_count)


def get_ip_groups(ip: Optional[str] = None,
                  name_regex: Optional[str] = None,
                  output_file: Optional[str] = None,
                  rule_tag: Optional[str] = None,
                  time_order_by: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpGroupsResult:
    """
    Use this data source to query detailed information of waf ip groups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_ip_groups(time_order_by="DESC")
    ```


    :param str ip: The address or address segment of the query.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str rule_tag: Query the association rule ID.
    :param str time_order_by: The arrangement order of the address group.
    """
    __args__ = dict()
    __args__['ip'] = ip
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['ruleTag'] = rule_tag
    __args__['timeOrderBy'] = time_order_by
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:waf/getIpGroups:getIpGroups', __args__, opts=opts, typ=GetIpGroupsResult).value

    return AwaitableGetIpGroupsResult(
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        ip_group_lists=pulumi.get(__ret__, 'ip_group_lists'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        rule_tag=pulumi.get(__ret__, 'rule_tag'),
        time_order_by=pulumi.get(__ret__, 'time_order_by'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_ip_groups)
def get_ip_groups_output(ip: Optional[pulumi.Input[Optional[str]]] = None,
                         name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                         output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         rule_tag: Optional[pulumi.Input[Optional[str]]] = None,
                         time_order_by: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIpGroupsResult]:
    """
    Use this data source to query detailed information of waf ip groups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_ip_groups(time_order_by="DESC")
    ```


    :param str ip: The address or address segment of the query.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str rule_tag: Query the association rule ID.
    :param str time_order_by: The arrangement order of the address group.
    """
    ...
