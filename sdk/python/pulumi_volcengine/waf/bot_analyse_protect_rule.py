# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BotAnalyseProtectRuleArgs', 'BotAnalyseProtectRule']

@pulumi.input_type
class BotAnalyseProtectRuleArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[int],
                 effect_time: pulumi.Input[int],
                 enable: pulumi.Input[int],
                 field: pulumi.Input[str],
                 host: pulumi.Input[str],
                 path: pulumi.Input[str],
                 rule_priority: pulumi.Input[int],
                 single_threshold: pulumi.Input[int],
                 statistical_duration: pulumi.Input[int],
                 statistical_type: pulumi.Input[int],
                 accurate_group: Optional[pulumi.Input['BotAnalyseProtectRuleAccurateGroupArgs']] = None,
                 action_after_verification: Optional[pulumi.Input[int]] = None,
                 exemption_time: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_threshold: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 single_proportion: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a BotAnalyseProtectRule resource.
        :param pulumi.Input[int] action_type: perform the action.
        :param pulumi.Input[int] effect_time: Limit the duration.
        :param pulumi.Input[int] enable: Whether to enable the rules.
        :param pulumi.Input[str] field: Statistical objects, with multiple objects separated by commas.
        :param pulumi.Input[str] host: Website domain names that require the setting of protection rules.
        :param pulumi.Input[str] path: The requested path.
        :param pulumi.Input[int] rule_priority: Priority of rule effectiveness.
        :param pulumi.Input[int] single_threshold: The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        :param pulumi.Input[int] statistical_duration: The duration of statistics.
        :param pulumi.Input[int] statistical_type: Statistical content and methods.
        :param pulumi.Input['BotAnalyseProtectRuleAccurateGroupArgs'] accurate_group: Advanced conditions.
        :param pulumi.Input[int] action_after_verification: Perform the action after verification/challenge.
        :param pulumi.Input[int] exemption_time: Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        :param pulumi.Input[str] name: The name of rule.
        :param pulumi.Input[int] path_threshold: The path access frequency threshold is enabled when StatisticalType=1.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        :param pulumi.Input[float] single_proportion: The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "effect_time", effect_time)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "rule_priority", rule_priority)
        pulumi.set(__self__, "single_threshold", single_threshold)
        pulumi.set(__self__, "statistical_duration", statistical_duration)
        pulumi.set(__self__, "statistical_type", statistical_type)
        if accurate_group is not None:
            pulumi.set(__self__, "accurate_group", accurate_group)
        if action_after_verification is not None:
            pulumi.set(__self__, "action_after_verification", action_after_verification)
        if exemption_time is not None:
            pulumi.set(__self__, "exemption_time", exemption_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_threshold is not None:
            pulumi.set(__self__, "path_threshold", path_threshold)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if single_proportion is not None:
            pulumi.set(__self__, "single_proportion", single_proportion)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[int]:
        """
        perform the action.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> pulumi.Input[int]:
        """
        Limit the duration.
        """
        return pulumi.get(self, "effect_time")

    @effect_time.setter
    def effect_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "effect_time", value)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[int]:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        """
        Statistical objects, with multiple objects separated by commas.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The requested path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> pulumi.Input[int]:
        """
        Priority of rule effectiveness.
        """
        return pulumi.get(self, "rule_priority")

    @rule_priority.setter
    def rule_priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "rule_priority", value)

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> pulumi.Input[int]:
        """
        The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        """
        return pulumi.get(self, "single_threshold")

    @single_threshold.setter
    def single_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "single_threshold", value)

    @property
    @pulumi.getter(name="statisticalDuration")
    def statistical_duration(self) -> pulumi.Input[int]:
        """
        The duration of statistics.
        """
        return pulumi.get(self, "statistical_duration")

    @statistical_duration.setter
    def statistical_duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "statistical_duration", value)

    @property
    @pulumi.getter(name="statisticalType")
    def statistical_type(self) -> pulumi.Input[int]:
        """
        Statistical content and methods.
        """
        return pulumi.get(self, "statistical_type")

    @statistical_type.setter
    def statistical_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "statistical_type", value)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> Optional[pulumi.Input['BotAnalyseProtectRuleAccurateGroupArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @accurate_group.setter
    def accurate_group(self, value: Optional[pulumi.Input['BotAnalyseProtectRuleAccurateGroupArgs']]):
        pulumi.set(self, "accurate_group", value)

    @property
    @pulumi.getter(name="actionAfterVerification")
    def action_after_verification(self) -> Optional[pulumi.Input[int]]:
        """
        Perform the action after verification/challenge.
        """
        return pulumi.get(self, "action_after_verification")

    @action_after_verification.setter
    def action_after_verification(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "action_after_verification", value)

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> Optional[pulumi.Input[int]]:
        """
        Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        """
        return pulumi.get(self, "exemption_time")

    @exemption_time.setter
    def exemption_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exemption_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The path access frequency threshold is enabled when StatisticalType=1.
        """
        return pulumi.get(self, "path_threshold")

    @path_threshold.setter
    def path_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "path_threshold", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the affiliated project resource.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="singleProportion")
    def single_proportion(self) -> Optional[pulumi.Input[float]]:
        """
        The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        """
        return pulumi.get(self, "single_proportion")

    @single_proportion.setter
    def single_proportion(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "single_proportion", value)


@pulumi.input_type
class _BotAnalyseProtectRuleState:
    def __init__(__self__, *,
                 accurate_group: Optional[pulumi.Input['BotAnalyseProtectRuleAccurateGroupArgs']] = None,
                 action_after_verification: Optional[pulumi.Input[int]] = None,
                 action_type: Optional[pulumi.Input[int]] = None,
                 effect_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 enable_count: Optional[pulumi.Input[int]] = None,
                 exemption_time: Optional[pulumi.Input[int]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 path_threshold: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupArgs']]]] = None,
                 rule_priority: Optional[pulumi.Input[int]] = None,
                 single_proportion: Optional[pulumi.Input[float]] = None,
                 single_threshold: Optional[pulumi.Input[int]] = None,
                 statistical_duration: Optional[pulumi.Input[int]] = None,
                 statistical_type: Optional[pulumi.Input[int]] = None,
                 total_count: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering BotAnalyseProtectRule resources.
        :param pulumi.Input['BotAnalyseProtectRuleAccurateGroupArgs'] accurate_group: Advanced conditions.
        :param pulumi.Input[int] action_after_verification: Perform the action after verification/challenge.
        :param pulumi.Input[int] action_type: perform the action.
        :param pulumi.Input[int] effect_time: Limit the duration.
        :param pulumi.Input[int] enable: Whether to enable the rules.
        :param pulumi.Input[int] enable_count: The number of statistical protection rules enabled under the current domain name.
        :param pulumi.Input[int] exemption_time: Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        :param pulumi.Input[str] field: Statistical objects, with multiple objects separated by commas.
        :param pulumi.Input[str] host: Website domain names that require the setting of protection rules.
        :param pulumi.Input[str] name: The name of rule.
        :param pulumi.Input[str] path: The requested path.
        :param pulumi.Input[int] path_threshold: The path access frequency threshold is enabled when StatisticalType=1.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        :param pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupArgs']]] rule_groups: Details of the rule group.
        :param pulumi.Input[int] rule_priority: Priority of rule effectiveness.
        :param pulumi.Input[float] single_proportion: The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        :param pulumi.Input[int] single_threshold: The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        :param pulumi.Input[int] statistical_duration: The duration of statistics.
        :param pulumi.Input[int] statistical_type: Statistical content and methods.
        :param pulumi.Input[int] total_count: The total number of statistical protection rules under the current domain name.
        """
        if accurate_group is not None:
            pulumi.set(__self__, "accurate_group", accurate_group)
        if action_after_verification is not None:
            pulumi.set(__self__, "action_after_verification", action_after_verification)
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if effect_time is not None:
            pulumi.set(__self__, "effect_time", effect_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if enable_count is not None:
            pulumi.set(__self__, "enable_count", enable_count)
        if exemption_time is not None:
            pulumi.set(__self__, "exemption_time", exemption_time)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_threshold is not None:
            pulumi.set(__self__, "path_threshold", path_threshold)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if rule_groups is not None:
            pulumi.set(__self__, "rule_groups", rule_groups)
        if rule_priority is not None:
            pulumi.set(__self__, "rule_priority", rule_priority)
        if single_proportion is not None:
            pulumi.set(__self__, "single_proportion", single_proportion)
        if single_threshold is not None:
            pulumi.set(__self__, "single_threshold", single_threshold)
        if statistical_duration is not None:
            pulumi.set(__self__, "statistical_duration", statistical_duration)
        if statistical_type is not None:
            pulumi.set(__self__, "statistical_type", statistical_type)
        if total_count is not None:
            pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> Optional[pulumi.Input['BotAnalyseProtectRuleAccurateGroupArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @accurate_group.setter
    def accurate_group(self, value: Optional[pulumi.Input['BotAnalyseProtectRuleAccurateGroupArgs']]):
        pulumi.set(self, "accurate_group", value)

    @property
    @pulumi.getter(name="actionAfterVerification")
    def action_after_verification(self) -> Optional[pulumi.Input[int]]:
        """
        Perform the action after verification/challenge.
        """
        return pulumi.get(self, "action_after_verification")

    @action_after_verification.setter
    def action_after_verification(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "action_after_verification", value)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[int]]:
        """
        perform the action.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> Optional[pulumi.Input[int]]:
        """
        Limit the duration.
        """
        return pulumi.get(self, "effect_time")

    @effect_time.setter
    def effect_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "effect_time", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="enableCount")
    def enable_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of statistical protection rules enabled under the current domain name.
        """
        return pulumi.get(self, "enable_count")

    @enable_count.setter
    def enable_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_count", value)

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> Optional[pulumi.Input[int]]:
        """
        Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        """
        return pulumi.get(self, "exemption_time")

    @exemption_time.setter
    def exemption_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exemption_time", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        """
        Statistical objects, with multiple objects separated by commas.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The requested path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The path access frequency threshold is enabled when StatisticalType=1.
        """
        return pulumi.get(self, "path_threshold")

    @path_threshold.setter
    def path_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "path_threshold", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the affiliated project resource.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="ruleGroups")
    def rule_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupArgs']]]]:
        """
        Details of the rule group.
        """
        return pulumi.get(self, "rule_groups")

    @rule_groups.setter
    def rule_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BotAnalyseProtectRuleRuleGroupArgs']]]]):
        pulumi.set(self, "rule_groups", value)

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of rule effectiveness.
        """
        return pulumi.get(self, "rule_priority")

    @rule_priority.setter
    def rule_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_priority", value)

    @property
    @pulumi.getter(name="singleProportion")
    def single_proportion(self) -> Optional[pulumi.Input[float]]:
        """
        The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        """
        return pulumi.get(self, "single_proportion")

    @single_proportion.setter
    def single_proportion(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "single_proportion", value)

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        """
        return pulumi.get(self, "single_threshold")

    @single_threshold.setter
    def single_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "single_threshold", value)

    @property
    @pulumi.getter(name="statisticalDuration")
    def statistical_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The duration of statistics.
        """
        return pulumi.get(self, "statistical_duration")

    @statistical_duration.setter
    def statistical_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "statistical_duration", value)

    @property
    @pulumi.getter(name="statisticalType")
    def statistical_type(self) -> Optional[pulumi.Input[int]]:
        """
        Statistical content and methods.
        """
        return pulumi.get(self, "statistical_type")

    @statistical_type.setter
    def statistical_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "statistical_type", value)

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of statistical protection rules under the current domain name.
        """
        return pulumi.get(self, "total_count")

    @total_count.setter
    def total_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_count", value)


class BotAnalyseProtectRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accurate_group: Optional[pulumi.Input[pulumi.InputType['BotAnalyseProtectRuleAccurateGroupArgs']]] = None,
                 action_after_verification: Optional[pulumi.Input[int]] = None,
                 action_type: Optional[pulumi.Input[int]] = None,
                 effect_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 exemption_time: Optional[pulumi.Input[int]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 path_threshold: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rule_priority: Optional[pulumi.Input[int]] = None,
                 single_proportion: Optional[pulumi.Input[float]] = None,
                 single_threshold: Optional[pulumi.Input[int]] = None,
                 statistical_duration: Optional[pulumi.Input[int]] = None,
                 statistical_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage waf bot analyse protect rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.BotAnalyseProtectRule("foo",
            accurate_group=volcengine.waf.BotAnalyseProtectRuleAccurateGroupArgs(
                accurate_rules=[
                    volcengine.waf.BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs(
                        http_obj="request.uri",
                        obj_type=1,
                        opretar=2,
                        property=0,
                        value_string="tf",
                    ),
                    volcengine.waf.BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs(
                        http_obj="request.schema",
                        obj_type=0,
                        opretar=2,
                        property=0,
                        value_string="tf-2",
                    ),
                ],
                logic=2,
            ),
            action_after_verification=1,
            action_type=1,
            effect_time=1000,
            enable=1,
            exemption_time=60,
            field="HEADER:User-Agent",
            host="www.tf-test.com",
            path="/mod",
            path_threshold=1000,
            project_name="default",
            rule_priority=3,
            single_proportion=0.25,
            single_threshold=100,
            statistical_duration=50,
            statistical_type=2)
        ```

        ## Import

        WafBotAnalyseProtectRule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/botAnalyseProtectRule:BotAnalyseProtectRule default resource_id:bot_space:host
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['BotAnalyseProtectRuleAccurateGroupArgs']] accurate_group: Advanced conditions.
        :param pulumi.Input[int] action_after_verification: Perform the action after verification/challenge.
        :param pulumi.Input[int] action_type: perform the action.
        :param pulumi.Input[int] effect_time: Limit the duration.
        :param pulumi.Input[int] enable: Whether to enable the rules.
        :param pulumi.Input[int] exemption_time: Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        :param pulumi.Input[str] field: Statistical objects, with multiple objects separated by commas.
        :param pulumi.Input[str] host: Website domain names that require the setting of protection rules.
        :param pulumi.Input[str] name: The name of rule.
        :param pulumi.Input[str] path: The requested path.
        :param pulumi.Input[int] path_threshold: The path access frequency threshold is enabled when StatisticalType=1.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        :param pulumi.Input[int] rule_priority: Priority of rule effectiveness.
        :param pulumi.Input[float] single_proportion: The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        :param pulumi.Input[int] single_threshold: The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        :param pulumi.Input[int] statistical_duration: The duration of statistics.
        :param pulumi.Input[int] statistical_type: Statistical content and methods.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BotAnalyseProtectRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage waf bot analyse protect rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.BotAnalyseProtectRule("foo",
            accurate_group=volcengine.waf.BotAnalyseProtectRuleAccurateGroupArgs(
                accurate_rules=[
                    volcengine.waf.BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs(
                        http_obj="request.uri",
                        obj_type=1,
                        opretar=2,
                        property=0,
                        value_string="tf",
                    ),
                    volcengine.waf.BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs(
                        http_obj="request.schema",
                        obj_type=0,
                        opretar=2,
                        property=0,
                        value_string="tf-2",
                    ),
                ],
                logic=2,
            ),
            action_after_verification=1,
            action_type=1,
            effect_time=1000,
            enable=1,
            exemption_time=60,
            field="HEADER:User-Agent",
            host="www.tf-test.com",
            path="/mod",
            path_threshold=1000,
            project_name="default",
            rule_priority=3,
            single_proportion=0.25,
            single_threshold=100,
            statistical_duration=50,
            statistical_type=2)
        ```

        ## Import

        WafBotAnalyseProtectRule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/botAnalyseProtectRule:BotAnalyseProtectRule default resource_id:bot_space:host
        ```

        :param str resource_name: The name of the resource.
        :param BotAnalyseProtectRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BotAnalyseProtectRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accurate_group: Optional[pulumi.Input[pulumi.InputType['BotAnalyseProtectRuleAccurateGroupArgs']]] = None,
                 action_after_verification: Optional[pulumi.Input[int]] = None,
                 action_type: Optional[pulumi.Input[int]] = None,
                 effect_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 exemption_time: Optional[pulumi.Input[int]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 path_threshold: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rule_priority: Optional[pulumi.Input[int]] = None,
                 single_proportion: Optional[pulumi.Input[float]] = None,
                 single_threshold: Optional[pulumi.Input[int]] = None,
                 statistical_duration: Optional[pulumi.Input[int]] = None,
                 statistical_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BotAnalyseProtectRuleArgs.__new__(BotAnalyseProtectRuleArgs)

            __props__.__dict__["accurate_group"] = accurate_group
            __props__.__dict__["action_after_verification"] = action_after_verification
            if action_type is None and not opts.urn:
                raise TypeError("Missing required property 'action_type'")
            __props__.__dict__["action_type"] = action_type
            if effect_time is None and not opts.urn:
                raise TypeError("Missing required property 'effect_time'")
            __props__.__dict__["effect_time"] = effect_time
            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
            __props__.__dict__["exemption_time"] = exemption_time
            if field is None and not opts.urn:
                raise TypeError("Missing required property 'field'")
            __props__.__dict__["field"] = field
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["name"] = name
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            __props__.__dict__["path_threshold"] = path_threshold
            __props__.__dict__["project_name"] = project_name
            if rule_priority is None and not opts.urn:
                raise TypeError("Missing required property 'rule_priority'")
            __props__.__dict__["rule_priority"] = rule_priority
            __props__.__dict__["single_proportion"] = single_proportion
            if single_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'single_threshold'")
            __props__.__dict__["single_threshold"] = single_threshold
            if statistical_duration is None and not opts.urn:
                raise TypeError("Missing required property 'statistical_duration'")
            __props__.__dict__["statistical_duration"] = statistical_duration
            if statistical_type is None and not opts.urn:
                raise TypeError("Missing required property 'statistical_type'")
            __props__.__dict__["statistical_type"] = statistical_type
            __props__.__dict__["enable_count"] = None
            __props__.__dict__["rule_groups"] = None
            __props__.__dict__["total_count"] = None
        super(BotAnalyseProtectRule, __self__).__init__(
            'volcengine:waf/botAnalyseProtectRule:BotAnalyseProtectRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accurate_group: Optional[pulumi.Input[pulumi.InputType['BotAnalyseProtectRuleAccurateGroupArgs']]] = None,
            action_after_verification: Optional[pulumi.Input[int]] = None,
            action_type: Optional[pulumi.Input[int]] = None,
            effect_time: Optional[pulumi.Input[int]] = None,
            enable: Optional[pulumi.Input[int]] = None,
            enable_count: Optional[pulumi.Input[int]] = None,
            exemption_time: Optional[pulumi.Input[int]] = None,
            field: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            path_threshold: Optional[pulumi.Input[int]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BotAnalyseProtectRuleRuleGroupArgs']]]]] = None,
            rule_priority: Optional[pulumi.Input[int]] = None,
            single_proportion: Optional[pulumi.Input[float]] = None,
            single_threshold: Optional[pulumi.Input[int]] = None,
            statistical_duration: Optional[pulumi.Input[int]] = None,
            statistical_type: Optional[pulumi.Input[int]] = None,
            total_count: Optional[pulumi.Input[int]] = None) -> 'BotAnalyseProtectRule':
        """
        Get an existing BotAnalyseProtectRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['BotAnalyseProtectRuleAccurateGroupArgs']] accurate_group: Advanced conditions.
        :param pulumi.Input[int] action_after_verification: Perform the action after verification/challenge.
        :param pulumi.Input[int] action_type: perform the action.
        :param pulumi.Input[int] effect_time: Limit the duration.
        :param pulumi.Input[int] enable: Whether to enable the rules.
        :param pulumi.Input[int] enable_count: The number of statistical protection rules enabled under the current domain name.
        :param pulumi.Input[int] exemption_time: Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        :param pulumi.Input[str] field: Statistical objects, with multiple objects separated by commas.
        :param pulumi.Input[str] host: Website domain names that require the setting of protection rules.
        :param pulumi.Input[str] name: The name of rule.
        :param pulumi.Input[str] path: The requested path.
        :param pulumi.Input[int] path_threshold: The path access frequency threshold is enabled when StatisticalType=1.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BotAnalyseProtectRuleRuleGroupArgs']]]] rule_groups: Details of the rule group.
        :param pulumi.Input[int] rule_priority: Priority of rule effectiveness.
        :param pulumi.Input[float] single_proportion: The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        :param pulumi.Input[int] single_threshold: The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        :param pulumi.Input[int] statistical_duration: The duration of statistics.
        :param pulumi.Input[int] statistical_type: Statistical content and methods.
        :param pulumi.Input[int] total_count: The total number of statistical protection rules under the current domain name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BotAnalyseProtectRuleState.__new__(_BotAnalyseProtectRuleState)

        __props__.__dict__["accurate_group"] = accurate_group
        __props__.__dict__["action_after_verification"] = action_after_verification
        __props__.__dict__["action_type"] = action_type
        __props__.__dict__["effect_time"] = effect_time
        __props__.__dict__["enable"] = enable
        __props__.__dict__["enable_count"] = enable_count
        __props__.__dict__["exemption_time"] = exemption_time
        __props__.__dict__["field"] = field
        __props__.__dict__["host"] = host
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["path_threshold"] = path_threshold
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["rule_groups"] = rule_groups
        __props__.__dict__["rule_priority"] = rule_priority
        __props__.__dict__["single_proportion"] = single_proportion
        __props__.__dict__["single_threshold"] = single_threshold
        __props__.__dict__["statistical_duration"] = statistical_duration
        __props__.__dict__["statistical_type"] = statistical_type
        __props__.__dict__["total_count"] = total_count
        return BotAnalyseProtectRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> pulumi.Output[Optional['outputs.BotAnalyseProtectRuleAccurateGroup']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter(name="actionAfterVerification")
    def action_after_verification(self) -> pulumi.Output[Optional[int]]:
        """
        Perform the action after verification/challenge.
        """
        return pulumi.get(self, "action_after_verification")

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Output[int]:
        """
        perform the action.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> pulumi.Output[int]:
        """
        Limit the duration.
        """
        return pulumi.get(self, "effect_time")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="enableCount")
    def enable_count(self) -> pulumi.Output[int]:
        """
        The number of statistical protection rules enabled under the current domain name.
        """
        return pulumi.get(self, "enable_count")

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> pulumi.Output[Optional[int]]:
        """
        Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        """
        return pulumi.get(self, "exemption_time")

    @property
    @pulumi.getter
    def field(self) -> pulumi.Output[str]:
        """
        Statistical objects, with multiple objects separated by commas.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        The requested path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> pulumi.Output[Optional[int]]:
        """
        The path access frequency threshold is enabled when StatisticalType=1.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[Optional[str]]:
        """
        The Name of the affiliated project resource.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="ruleGroups")
    def rule_groups(self) -> pulumi.Output[Sequence['outputs.BotAnalyseProtectRuleRuleGroup']]:
        """
        Details of the rule group.
        """
        return pulumi.get(self, "rule_groups")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> pulumi.Output[int]:
        """
        Priority of rule effectiveness.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter(name="singleProportion")
    def single_proportion(self) -> pulumi.Output[Optional[float]]:
        """
        The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        """
        return pulumi.get(self, "single_proportion")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> pulumi.Output[int]:
        """
        The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        """
        return pulumi.get(self, "single_threshold")

    @property
    @pulumi.getter(name="statisticalDuration")
    def statistical_duration(self) -> pulumi.Output[int]:
        """
        The duration of statistics.
        """
        return pulumi.get(self, "statistical_duration")

    @property
    @pulumi.getter(name="statisticalType")
    def statistical_type(self) -> pulumi.Output[int]:
        """
        Statistical content and methods.
        """
        return pulumi.get(self, "statistical_type")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> pulumi.Output[int]:
        """
        The total number of statistical protection rules under the current domain name.
        """
        return pulumi.get(self, "total_count")

