# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HostGroupArgs', 'HostGroup']

@pulumi.input_type
class HostGroupArgs:
    def __init__(__self__, *,
                 host_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a HostGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_lists: Domain names that need to be added to this domain name group.
        :param pulumi.Input[str] action: Domain name list modification action. Works only on modified scenes.
        :param pulumi.Input[str] description: Domain name group description.
        :param pulumi.Input[str] name: The name of the domain name group.
        :param pulumi.Input[str] project_name: The project of Domain name group.
        """
        pulumi.set(__self__, "host_lists", host_lists)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)

    @property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Domain names that need to be added to this domain name group.
        """
        return pulumi.get(self, "host_lists")

    @host_lists.setter
    def host_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "host_lists", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name list modification action. Works only on modified scenes.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name group description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the domain name group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project of Domain name group.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)


@pulumi.input_type
class _HostGroupState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_count: Optional[pulumi.Input[int]] = None,
                 host_group_id: Optional[pulumi.Input[int]] = None,
                 host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 related_rules: Optional[pulumi.Input[Sequence[pulumi.Input['HostGroupRelatedRuleArgs']]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering HostGroup resources.
        :param pulumi.Input[str] action: Domain name list modification action. Works only on modified scenes.
        :param pulumi.Input[str] description: Domain name group description.
        :param pulumi.Input[int] host_count: The number of domain names contained in the domain name group.
        :param pulumi.Input[int] host_group_id: The ID of the domain name group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_lists: Domain names that need to be added to this domain name group.
        :param pulumi.Input[str] name: The name of the domain name group.
        :param pulumi.Input[str] project_name: The project of Domain name group.
        :param pulumi.Input[Sequence[pulumi.Input['HostGroupRelatedRuleArgs']]] related_rules: The list of associated rules.
        :param pulumi.Input[str] update_time: Domain name group update time.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host_count is not None:
            pulumi.set(__self__, "host_count", host_count)
        if host_group_id is not None:
            pulumi.set(__self__, "host_group_id", host_group_id)
        if host_lists is not None:
            pulumi.set(__self__, "host_lists", host_lists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if related_rules is not None:
            pulumi.set(__self__, "related_rules", related_rules)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name list modification action. Works only on modified scenes.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name group description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="hostCount")
    def host_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of domain names contained in the domain name group.
        """
        return pulumi.get(self, "host_count")

    @host_count.setter
    def host_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_count", value)

    @property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the domain name group.
        """
        return pulumi.get(self, "host_group_id")

    @host_group_id.setter
    def host_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_group_id", value)

    @property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Domain names that need to be added to this domain name group.
        """
        return pulumi.get(self, "host_lists")

    @host_lists.setter
    def host_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_lists", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the domain name group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project of Domain name group.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="relatedRules")
    def related_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostGroupRelatedRuleArgs']]]]:
        """
        The list of associated rules.
        """
        return pulumi.get(self, "related_rules")

    @related_rules.setter
    def related_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostGroupRelatedRuleArgs']]]]):
        pulumi.set(self, "related_rules", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name group update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class HostGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage waf host group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.HostGroup("foo",
            description="tf-test",
            host_lists=["www.tf-test.com"])
        ```

        ## Import

        WafHostGroup can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/hostGroup:HostGroup default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Domain name list modification action. Works only on modified scenes.
        :param pulumi.Input[str] description: Domain name group description.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_lists: Domain names that need to be added to this domain name group.
        :param pulumi.Input[str] name: The name of the domain name group.
        :param pulumi.Input[str] project_name: The project of Domain name group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HostGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage waf host group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.HostGroup("foo",
            description="tf-test",
            host_lists=["www.tf-test.com"])
        ```

        ## Import

        WafHostGroup can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/hostGroup:HostGroup default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param HostGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HostGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HostGroupArgs.__new__(HostGroupArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["description"] = description
            if host_lists is None and not opts.urn:
                raise TypeError("Missing required property 'host_lists'")
            __props__.__dict__["host_lists"] = host_lists
            __props__.__dict__["name"] = name
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["host_count"] = None
            __props__.__dict__["host_group_id"] = None
            __props__.__dict__["related_rules"] = None
            __props__.__dict__["update_time"] = None
        super(HostGroup, __self__).__init__(
            'volcengine:waf/hostGroup:HostGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            host_count: Optional[pulumi.Input[int]] = None,
            host_group_id: Optional[pulumi.Input[int]] = None,
            host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            related_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HostGroupRelatedRuleArgs']]]]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'HostGroup':
        """
        Get an existing HostGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Domain name list modification action. Works only on modified scenes.
        :param pulumi.Input[str] description: Domain name group description.
        :param pulumi.Input[int] host_count: The number of domain names contained in the domain name group.
        :param pulumi.Input[int] host_group_id: The ID of the domain name group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_lists: Domain names that need to be added to this domain name group.
        :param pulumi.Input[str] name: The name of the domain name group.
        :param pulumi.Input[str] project_name: The project of Domain name group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HostGroupRelatedRuleArgs']]]] related_rules: The list of associated rules.
        :param pulumi.Input[str] update_time: Domain name group update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HostGroupState.__new__(_HostGroupState)

        __props__.__dict__["action"] = action
        __props__.__dict__["description"] = description
        __props__.__dict__["host_count"] = host_count
        __props__.__dict__["host_group_id"] = host_group_id
        __props__.__dict__["host_lists"] = host_lists
        __props__.__dict__["name"] = name
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["related_rules"] = related_rules
        __props__.__dict__["update_time"] = update_time
        return HostGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[str]]:
        """
        Domain name list modification action. Works only on modified scenes.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Domain name group description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hostCount")
    def host_count(self) -> pulumi.Output[int]:
        """
        The number of domain names contained in the domain name group.
        """
        return pulumi.get(self, "host_count")

    @property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> pulumi.Output[int]:
        """
        The ID of the domain name group.
        """
        return pulumi.get(self, "host_group_id")

    @property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        Domain names that need to be added to this domain name group.
        """
        return pulumi.get(self, "host_lists")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the domain name group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[Optional[str]]:
        """
        The project of Domain name group.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="relatedRules")
    def related_rules(self) -> pulumi.Output[Sequence['outputs.HostGroupRelatedRule']]:
        """
        The list of associated rules.
        """
        return pulumi.get(self, "related_rules")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Domain name group update time.
        """
        return pulumi.get(self, "update_time")

