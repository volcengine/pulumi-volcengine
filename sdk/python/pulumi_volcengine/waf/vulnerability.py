# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VulnerabilityArgs', 'Vulnerability']

@pulumi.input_type
class VulnerabilityArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 advance_config: Optional[pulumi.Input['VulnerabilityAdvanceConfigArgs']] = None,
                 rule_mode: Optional[pulumi.Input[str]] = None,
                 system_rule_switches: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilitySystemRuleSwitchArgs']]]] = None):
        """
        The set of arguments for constructing a Vulnerability resource.
        :param pulumi.Input[str] host: Protect website domain names.
        :param pulumi.Input[str] action: Protection mode.
        :param pulumi.Input['VulnerabilityAdvanceConfigArgs'] advance_config: The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
        :param pulumi.Input[str] rule_mode: The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilitySystemRuleSwitchArgs']]] system_rule_switches: Custom rule switch.
        """
        pulumi.set(__self__, "host", host)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if advance_config is not None:
            pulumi.set(__self__, "advance_config", advance_config)
        if rule_mode is not None:
            pulumi.set(__self__, "rule_mode", rule_mode)
        if system_rule_switches is not None:
            pulumi.set(__self__, "system_rule_switches", system_rule_switches)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Protect website domain names.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Protection mode.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="advanceConfig")
    def advance_config(self) -> Optional[pulumi.Input['VulnerabilityAdvanceConfigArgs']]:
        """
        The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
        """
        return pulumi.get(self, "advance_config")

    @advance_config.setter
    def advance_config(self, value: Optional[pulumi.Input['VulnerabilityAdvanceConfigArgs']]):
        pulumi.set(self, "advance_config", value)

    @property
    @pulumi.getter(name="ruleMode")
    def rule_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
        """
        return pulumi.get(self, "rule_mode")

    @rule_mode.setter
    def rule_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_mode", value)

    @property
    @pulumi.getter(name="systemRuleSwitches")
    def system_rule_switches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilitySystemRuleSwitchArgs']]]]:
        """
        Custom rule switch.
        """
        return pulumi.get(self, "system_rule_switches")

    @system_rule_switches.setter
    def system_rule_switches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilitySystemRuleSwitchArgs']]]]):
        pulumi.set(self, "system_rule_switches", value)


@pulumi.input_type
class _VulnerabilityState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 advance_config: Optional[pulumi.Input['VulnerabilityAdvanceConfigArgs']] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 rule_details: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityRuleDetailArgs']]]] = None,
                 rule_mode: Optional[pulumi.Input[str]] = None,
                 system_rule_switches: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilitySystemRuleSwitchArgs']]]] = None):
        """
        Input properties used for looking up and filtering Vulnerability resources.
        :param pulumi.Input[str] action: Protection mode.
        :param pulumi.Input['VulnerabilityAdvanceConfigArgs'] advance_config: The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
        :param pulumi.Input[str] host: Protect website domain names.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityRuleDetailArgs']]] rule_details: Detailed information of the vulnerability rules. By default, only the vulnerability protection rules of the custom mode are displayed.
        :param pulumi.Input[str] rule_mode: The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilitySystemRuleSwitchArgs']]] system_rule_switches: Custom rule switch.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if advance_config is not None:
            pulumi.set(__self__, "advance_config", advance_config)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if rule_details is not None:
            pulumi.set(__self__, "rule_details", rule_details)
        if rule_mode is not None:
            pulumi.set(__self__, "rule_mode", rule_mode)
        if system_rule_switches is not None:
            pulumi.set(__self__, "system_rule_switches", system_rule_switches)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Protection mode.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="advanceConfig")
    def advance_config(self) -> Optional[pulumi.Input['VulnerabilityAdvanceConfigArgs']]:
        """
        The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
        """
        return pulumi.get(self, "advance_config")

    @advance_config.setter
    def advance_config(self, value: Optional[pulumi.Input['VulnerabilityAdvanceConfigArgs']]):
        pulumi.set(self, "advance_config", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Protect website domain names.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="ruleDetails")
    def rule_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityRuleDetailArgs']]]]:
        """
        Detailed information of the vulnerability rules. By default, only the vulnerability protection rules of the custom mode are displayed.
        """
        return pulumi.get(self, "rule_details")

    @rule_details.setter
    def rule_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityRuleDetailArgs']]]]):
        pulumi.set(self, "rule_details", value)

    @property
    @pulumi.getter(name="ruleMode")
    def rule_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
        """
        return pulumi.get(self, "rule_mode")

    @rule_mode.setter
    def rule_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_mode", value)

    @property
    @pulumi.getter(name="systemRuleSwitches")
    def system_rule_switches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilitySystemRuleSwitchArgs']]]]:
        """
        Custom rule switch.
        """
        return pulumi.get(self, "system_rule_switches")

    @system_rule_switches.setter
    def system_rule_switches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilitySystemRuleSwitchArgs']]]]):
        pulumi.set(self, "system_rule_switches", value)


class Vulnerability(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 advance_config: Optional[pulumi.Input[pulumi.InputType['VulnerabilityAdvanceConfigArgs']]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 rule_mode: Optional[pulumi.Input[str]] = None,
                 system_rule_switches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilitySystemRuleSwitchArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage waf vulnerability
        ## Import

        WafVulnerability can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/vulnerability:Vulnerability default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Protection mode.
        :param pulumi.Input[pulumi.InputType['VulnerabilityAdvanceConfigArgs']] advance_config: The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
        :param pulumi.Input[str] host: Protect website domain names.
        :param pulumi.Input[str] rule_mode: The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilitySystemRuleSwitchArgs']]]] system_rule_switches: Custom rule switch.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VulnerabilityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage waf vulnerability
        ## Import

        WafVulnerability can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/vulnerability:Vulnerability default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param VulnerabilityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VulnerabilityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 advance_config: Optional[pulumi.Input[pulumi.InputType['VulnerabilityAdvanceConfigArgs']]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 rule_mode: Optional[pulumi.Input[str]] = None,
                 system_rule_switches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilitySystemRuleSwitchArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VulnerabilityArgs.__new__(VulnerabilityArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["advance_config"] = advance_config
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["rule_mode"] = rule_mode
            __props__.__dict__["system_rule_switches"] = system_rule_switches
            __props__.__dict__["rule_details"] = None
        super(Vulnerability, __self__).__init__(
            'volcengine:waf/vulnerability:Vulnerability',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            advance_config: Optional[pulumi.Input[pulumi.InputType['VulnerabilityAdvanceConfigArgs']]] = None,
            host: Optional[pulumi.Input[str]] = None,
            rule_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilityRuleDetailArgs']]]]] = None,
            rule_mode: Optional[pulumi.Input[str]] = None,
            system_rule_switches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilitySystemRuleSwitchArgs']]]]] = None) -> 'Vulnerability':
        """
        Get an existing Vulnerability resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Protection mode.
        :param pulumi.Input[pulumi.InputType['VulnerabilityAdvanceConfigArgs']] advance_config: The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
        :param pulumi.Input[str] host: Protect website domain names.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilityRuleDetailArgs']]]] rule_details: Detailed information of the vulnerability rules. By default, only the vulnerability protection rules of the custom mode are displayed.
        :param pulumi.Input[str] rule_mode: The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilitySystemRuleSwitchArgs']]]] system_rule_switches: Custom rule switch.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VulnerabilityState.__new__(_VulnerabilityState)

        __props__.__dict__["action"] = action
        __props__.__dict__["advance_config"] = advance_config
        __props__.__dict__["host"] = host
        __props__.__dict__["rule_details"] = rule_details
        __props__.__dict__["rule_mode"] = rule_mode
        __props__.__dict__["system_rule_switches"] = system_rule_switches
        return Vulnerability(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Protection mode.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="advanceConfig")
    def advance_config(self) -> pulumi.Output['outputs.VulnerabilityAdvanceConfig']:
        """
        The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
        """
        return pulumi.get(self, "advance_config")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Protect website domain names.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="ruleDetails")
    def rule_details(self) -> pulumi.Output[Sequence['outputs.VulnerabilityRuleDetail']]:
        """
        Detailed information of the vulnerability rules. By default, only the vulnerability protection rules of the custom mode are displayed.
        """
        return pulumi.get(self, "rule_details")

    @property
    @pulumi.getter(name="ruleMode")
    def rule_mode(self) -> pulumi.Output[str]:
        """
        The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
        """
        return pulumi.get(self, "rule_mode")

    @property
    @pulumi.getter(name="systemRuleSwitches")
    def system_rule_switches(self) -> pulumi.Output[Optional[Sequence['outputs.VulnerabilitySystemRuleSwitch']]]:
        """
        Custom rule switch.
        """
        return pulumi.get(self, "system_rule_switches")

