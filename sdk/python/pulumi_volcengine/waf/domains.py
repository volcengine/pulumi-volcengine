# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DomainsResult',
    'AwaitableDomainsResult',
    'domains',
    'domains_output',
]

warnings.warn("""volcengine.waf.Domains has been deprecated in favor of volcengine.waf.getDomains""", DeprecationWarning)

@pulumi.output_type
class DomainsResult:
    """
    A collection of values returned by Domains.
    """
    def __init__(__self__, accurate_query=None, datas=None, domain=None, id=None, name_regex=None, output_file=None, total_count=None):
        if accurate_query and not isinstance(accurate_query, int):
            raise TypeError("Expected argument 'accurate_query' to be a int")
        pulumi.set(__self__, "accurate_query", accurate_query)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="accurateQuery")
    def accurate_query(self) -> Optional[int]:
        return pulumi.get(self, "accurate_query")

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.DomainsDataResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        domain names that need to be protected by WAF.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableDomainsResult(DomainsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return DomainsResult(
            accurate_query=self.accurate_query,
            datas=self.datas,
            domain=self.domain,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count)


def domains(accurate_query: Optional[int] = None,
            domain: Optional[str] = None,
            name_regex: Optional[str] = None,
            output_file: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableDomainsResult:
    """
    Use this data source to query detailed information of waf domains
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_domains()
    ```


    :param int accurate_query: Matching mode.
    :param str domain: The domain name of the protected website that needs to be queried.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    pulumi.log.warn("""domains is deprecated: volcengine.waf.Domains has been deprecated in favor of volcengine.waf.getDomains""")
    __args__ = dict()
    __args__['accurateQuery'] = accurate_query
    __args__['domain'] = domain
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:waf/domains:Domains', __args__, opts=opts, typ=DomainsResult).value

    return AwaitableDomainsResult(
        accurate_query=pulumi.get(__ret__, 'accurate_query'),
        datas=pulumi.get(__ret__, 'datas'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(domains)
def domains_output(accurate_query: Optional[pulumi.Input[Optional[int]]] = None,
                   domain: Optional[pulumi.Input[Optional[str]]] = None,
                   name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                   output_file: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[DomainsResult]:
    """
    Use this data source to query detailed information of waf domains
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_domains()
    ```


    :param int accurate_query: Matching mode.
    :param str domain: The domain name of the protected website that needs to be queried.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    pulumi.log.warn("""domains is deprecated: volcengine.waf.Domains has been deprecated in favor of volcengine.waf.getDomains""")
    ...
