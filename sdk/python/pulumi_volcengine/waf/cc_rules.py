# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CcRulesResult',
    'AwaitableCcRulesResult',
    'cc_rules',
    'cc_rules_output',
]

warnings.warn("""volcengine.waf.CcRules has been deprecated in favor of volcengine.waf.getCcRules""", DeprecationWarning)

@pulumi.output_type
class CcRulesResult:
    """
    A collection of values returned by CcRules.
    """
    def __init__(__self__, cc_types=None, datas=None, host=None, id=None, name_regex=None, output_file=None, path_order_by=None, rule_name=None, rule_tag=None, total_count=None, url=None):
        if cc_types and not isinstance(cc_types, list):
            raise TypeError("Expected argument 'cc_types' to be a list")
        pulumi.set(__self__, "cc_types", cc_types)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if path_order_by and not isinstance(path_order_by, str):
            raise TypeError("Expected argument 'path_order_by' to be a str")
        pulumi.set(__self__, "path_order_by", path_order_by)
        if rule_name and not isinstance(rule_name, str):
            raise TypeError("Expected argument 'rule_name' to be a str")
        pulumi.set(__self__, "rule_name", rule_name)
        if rule_tag and not isinstance(rule_tag, str):
            raise TypeError("Expected argument 'rule_tag' to be a str")
        pulumi.set(__self__, "rule_tag", rule_tag)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="ccTypes")
    def cc_types(self) -> Optional[Sequence[int]]:
        """
        The actions performed on subsequent requests after meeting the statistical conditions.
        """
        return pulumi.get(self, "cc_types")

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.CcRulesDataResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Protected website domain names.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="pathOrderBy")
    def path_order_by(self) -> str:
        return pulumi.get(self, "path_order_by")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        Rule label, that is, the complete rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The requested path.
        """
        return pulumi.get(self, "url")


class AwaitableCcRulesResult(CcRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return CcRulesResult(
            cc_types=self.cc_types,
            datas=self.datas,
            host=self.host,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            path_order_by=self.path_order_by,
            rule_name=self.rule_name,
            rule_tag=self.rule_tag,
            total_count=self.total_count,
            url=self.url)


def cc_rules(cc_types: Optional[Sequence[int]] = None,
             host: Optional[str] = None,
             name_regex: Optional[str] = None,
             output_file: Optional[str] = None,
             path_order_by: Optional[str] = None,
             rule_name: Optional[str] = None,
             rule_tag: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableCcRulesResult:
    """
    Use this data source to query detailed information of waf cc rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_cc_rules(cc_types=[1],
        host="www.tf-test.com",
        path_order_by="ASC",
        rule_name="tf")
    ```


    :param Sequence[int] cc_types: The actions performed on subsequent requests after meeting the statistical conditions.
    :param str host: Website domain names that require the setting of protection rules.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str path_order_by: The list shows the order.
    :param str rule_name: Search by rule name in a fuzzy manner.
    :param str rule_tag: Search precisely according to the rule ID.
    :param str url: Fuzzy search by the requested path.
    """
    pulumi.log.warn("""cc_rules is deprecated: volcengine.waf.CcRules has been deprecated in favor of volcengine.waf.getCcRules""")
    __args__ = dict()
    __args__['ccTypes'] = cc_types
    __args__['host'] = host
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['pathOrderBy'] = path_order_by
    __args__['ruleName'] = rule_name
    __args__['ruleTag'] = rule_tag
    __args__['url'] = url
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:waf/ccRules:CcRules', __args__, opts=opts, typ=CcRulesResult).value

    return AwaitableCcRulesResult(
        cc_types=pulumi.get(__ret__, 'cc_types'),
        datas=pulumi.get(__ret__, 'datas'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        path_order_by=pulumi.get(__ret__, 'path_order_by'),
        rule_name=pulumi.get(__ret__, 'rule_name'),
        rule_tag=pulumi.get(__ret__, 'rule_tag'),
        total_count=pulumi.get(__ret__, 'total_count'),
        url=pulumi.get(__ret__, 'url'))


@_utilities.lift_output_func(cc_rules)
def cc_rules_output(cc_types: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                    host: Optional[pulumi.Input[str]] = None,
                    name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                    output_file: Optional[pulumi.Input[Optional[str]]] = None,
                    path_order_by: Optional[pulumi.Input[str]] = None,
                    rule_name: Optional[pulumi.Input[Optional[str]]] = None,
                    rule_tag: Optional[pulumi.Input[Optional[str]]] = None,
                    url: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[CcRulesResult]:
    """
    Use this data source to query detailed information of waf cc rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_cc_rules(cc_types=[1],
        host="www.tf-test.com",
        path_order_by="ASC",
        rule_name="tf")
    ```


    :param Sequence[int] cc_types: The actions performed on subsequent requests after meeting the statistical conditions.
    :param str host: Website domain names that require the setting of protection rules.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str path_order_by: The list shows the order.
    :param str rule_name: Search by rule name in a fuzzy manner.
    :param str rule_tag: Search precisely according to the rule ID.
    :param str url: Fuzzy search by the requested path.
    """
    pulumi.log.warn("""cc_rules is deprecated: volcengine.waf.CcRules has been deprecated in favor of volcengine.waf.getCcRules""")
    ...
