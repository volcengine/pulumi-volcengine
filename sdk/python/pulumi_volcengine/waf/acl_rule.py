# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AclRuleArgs', 'AclRule']

@pulumi.input_type
class AclRuleArgs:
    def __init__(__self__, *,
                 acl_type: pulumi.Input[str],
                 enable: pulumi.Input[int],
                 host_add_type: pulumi.Input[int],
                 ip_add_type: pulumi.Input[int],
                 url: pulumi.Input[str],
                 accurate_group: Optional[pulumi.Input['AclRuleAccurateGroupArgs']] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 advanced: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_location_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_location_subregions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AclRule resource.
        :param pulumi.Input[str] acl_type: The type of access control rules.
        :param pulumi.Input[int] enable: Whether to enable the rule.
        :param pulumi.Input[int] host_add_type: Type of domain name addition.
        :param pulumi.Input[int] ip_add_type: Type of IP address addition.
        :param pulumi.Input[str] url: The path of Matching.
        :param pulumi.Input['AclRuleAccurateGroupArgs'] accurate_group: Advanced conditions.
        :param pulumi.Input[str] action: Action to be taken on requests that match the rule.
        :param pulumi.Input[int] advanced: Whether to set advanced conditions.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] host_group_ids: The ID of the domain group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_lists: Required if HostAddType = 3. Single or multiple domain names are supported.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ip_group_ids: Required if IpAddType = 2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: Required if IpAddType = 3. Single or multiple IP addresses are supported.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_location_countries: Country or region code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_location_subregions: Domestic region code.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[str] project_name: The name of the project to which your domain names belong.
        """
        pulumi.set(__self__, "acl_type", acl_type)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "host_add_type", host_add_type)
        pulumi.set(__self__, "ip_add_type", ip_add_type)
        pulumi.set(__self__, "url", url)
        if accurate_group is not None:
            pulumi.set(__self__, "accurate_group", accurate_group)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host_group_ids is not None:
            pulumi.set(__self__, "host_group_ids", host_group_ids)
        if host_lists is not None:
            pulumi.set(__self__, "host_lists", host_lists)
        if ip_group_ids is not None:
            pulumi.set(__self__, "ip_group_ids", ip_group_ids)
        if ip_lists is not None:
            pulumi.set(__self__, "ip_lists", ip_lists)
        if ip_location_countries is not None:
            pulumi.set(__self__, "ip_location_countries", ip_location_countries)
        if ip_location_subregions is not None:
            pulumi.set(__self__, "ip_location_subregions", ip_location_subregions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)

    @property
    @pulumi.getter(name="aclType")
    def acl_type(self) -> pulumi.Input[str]:
        """
        The type of access control rules.
        """
        return pulumi.get(self, "acl_type")

    @acl_type.setter
    def acl_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "acl_type", value)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[int]:
        """
        Whether to enable the rule.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="hostAddType")
    def host_add_type(self) -> pulumi.Input[int]:
        """
        Type of domain name addition.
        """
        return pulumi.get(self, "host_add_type")

    @host_add_type.setter
    def host_add_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "host_add_type", value)

    @property
    @pulumi.getter(name="ipAddType")
    def ip_add_type(self) -> pulumi.Input[int]:
        """
        Type of IP address addition.
        """
        return pulumi.get(self, "ip_add_type")

    @ip_add_type.setter
    def ip_add_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "ip_add_type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The path of Matching.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> Optional[pulumi.Input['AclRuleAccurateGroupArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @accurate_group.setter
    def accurate_group(self, value: Optional[pulumi.Input['AclRuleAccurateGroupArgs']]):
        pulumi.set(self, "accurate_group", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to set advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="hostGroupIds")
    def host_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The ID of the domain group.
        """
        return pulumi.get(self, "host_group_ids")

    @host_group_ids.setter
    def host_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "host_group_ids", value)

    @property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Required if HostAddType = 3. Single or multiple domain names are supported.
        """
        return pulumi.get(self, "host_lists")

    @host_lists.setter
    def host_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_lists", value)

    @property
    @pulumi.getter(name="ipGroupIds")
    def ip_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Required if IpAddType = 2.
        """
        return pulumi.get(self, "ip_group_ids")

    @ip_group_ids.setter
    def ip_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ip_group_ids", value)

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Required if IpAddType = 3. Single or multiple IP addresses are supported.
        """
        return pulumi.get(self, "ip_lists")

    @ip_lists.setter
    def ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_lists", value)

    @property
    @pulumi.getter(name="ipLocationCountries")
    def ip_location_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Country or region code.
        """
        return pulumi.get(self, "ip_location_countries")

    @ip_location_countries.setter
    def ip_location_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_location_countries", value)

    @property
    @pulumi.getter(name="ipLocationSubregions")
    def ip_location_subregions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Domestic region code.
        """
        return pulumi.get(self, "ip_location_subregions")

    @ip_location_subregions.setter
    def ip_location_subregions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_location_subregions", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project to which your domain names belong.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)


@pulumi.input_type
class _AclRuleState:
    def __init__(__self__, *,
                 accurate_group: Optional[pulumi.Input['AclRuleAccurateGroupArgs']] = None,
                 acl_type: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 advanced: Optional[pulumi.Input[int]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 host_add_type: Optional[pulumi.Input[int]] = None,
                 host_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AclRuleHostGroupArgs']]]] = None,
                 host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_add_type: Optional[pulumi.Input[int]] = None,
                 ip_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ip_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AclRuleIpGroupArgs']]]] = None,
                 ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_location_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_location_subregions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AclRule resources.
        :param pulumi.Input['AclRuleAccurateGroupArgs'] accurate_group: Advanced conditions.
        :param pulumi.Input[str] acl_type: The type of access control rules.
        :param pulumi.Input[str] action: Action to be taken on requests that match the rule.
        :param pulumi.Input[int] advanced: Whether to set advanced conditions.
        :param pulumi.Input[str] client_ip: IP address.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input[int] enable: Whether to enable the rule.
        :param pulumi.Input[int] host_add_type: Type of domain name addition.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] host_group_ids: The ID of the domain group.
        :param pulumi.Input[Sequence[pulumi.Input['AclRuleHostGroupArgs']]] host_groups: The list of domain name groups.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_lists: Required if HostAddType = 3. Single or multiple domain names are supported.
        :param pulumi.Input[int] ip_add_type: Type of IP address addition.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ip_group_ids: Required if IpAddType = 2.
        :param pulumi.Input[Sequence[pulumi.Input['AclRuleIpGroupArgs']]] ip_groups: The list of domain name groups.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: Required if IpAddType = 3. Single or multiple IP addresses are supported.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_location_countries: Country or region code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_location_subregions: Domestic region code.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[str] project_name: The name of the project to which your domain names belong.
        :param pulumi.Input[str] rule_tag: Rule unique identifier.
        :param pulumi.Input[str] update_time: Update time of the rule.
        :param pulumi.Input[str] url: The path of Matching.
        """
        if accurate_group is not None:
            pulumi.set(__self__, "accurate_group", accurate_group)
        if acl_type is not None:
            pulumi.set(__self__, "acl_type", acl_type)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if host_add_type is not None:
            pulumi.set(__self__, "host_add_type", host_add_type)
        if host_group_ids is not None:
            pulumi.set(__self__, "host_group_ids", host_group_ids)
        if host_groups is not None:
            pulumi.set(__self__, "host_groups", host_groups)
        if host_lists is not None:
            pulumi.set(__self__, "host_lists", host_lists)
        if ip_add_type is not None:
            pulumi.set(__self__, "ip_add_type", ip_add_type)
        if ip_group_ids is not None:
            pulumi.set(__self__, "ip_group_ids", ip_group_ids)
        if ip_groups is not None:
            pulumi.set(__self__, "ip_groups", ip_groups)
        if ip_lists is not None:
            pulumi.set(__self__, "ip_lists", ip_lists)
        if ip_location_countries is not None:
            pulumi.set(__self__, "ip_location_countries", ip_location_countries)
        if ip_location_subregions is not None:
            pulumi.set(__self__, "ip_location_subregions", ip_location_subregions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> Optional[pulumi.Input['AclRuleAccurateGroupArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @accurate_group.setter
    def accurate_group(self, value: Optional[pulumi.Input['AclRuleAccurateGroupArgs']]):
        pulumi.set(self, "accurate_group", value)

    @property
    @pulumi.getter(name="aclType")
    def acl_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of access control rules.
        """
        return pulumi.get(self, "acl_type")

    @acl_type.setter
    def acl_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl_type", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to set advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the rule.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="hostAddType")
    def host_add_type(self) -> Optional[pulumi.Input[int]]:
        """
        Type of domain name addition.
        """
        return pulumi.get(self, "host_add_type")

    @host_add_type.setter
    def host_add_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_add_type", value)

    @property
    @pulumi.getter(name="hostGroupIds")
    def host_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The ID of the domain group.
        """
        return pulumi.get(self, "host_group_ids")

    @host_group_ids.setter
    def host_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "host_group_ids", value)

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AclRuleHostGroupArgs']]]]:
        """
        The list of domain name groups.
        """
        return pulumi.get(self, "host_groups")

    @host_groups.setter
    def host_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AclRuleHostGroupArgs']]]]):
        pulumi.set(self, "host_groups", value)

    @property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Required if HostAddType = 3. Single or multiple domain names are supported.
        """
        return pulumi.get(self, "host_lists")

    @host_lists.setter
    def host_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_lists", value)

    @property
    @pulumi.getter(name="ipAddType")
    def ip_add_type(self) -> Optional[pulumi.Input[int]]:
        """
        Type of IP address addition.
        """
        return pulumi.get(self, "ip_add_type")

    @ip_add_type.setter
    def ip_add_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_add_type", value)

    @property
    @pulumi.getter(name="ipGroupIds")
    def ip_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Required if IpAddType = 2.
        """
        return pulumi.get(self, "ip_group_ids")

    @ip_group_ids.setter
    def ip_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ip_group_ids", value)

    @property
    @pulumi.getter(name="ipGroups")
    def ip_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AclRuleIpGroupArgs']]]]:
        """
        The list of domain name groups.
        """
        return pulumi.get(self, "ip_groups")

    @ip_groups.setter
    def ip_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AclRuleIpGroupArgs']]]]):
        pulumi.set(self, "ip_groups", value)

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Required if IpAddType = 3. Single or multiple IP addresses are supported.
        """
        return pulumi.get(self, "ip_lists")

    @ip_lists.setter
    def ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_lists", value)

    @property
    @pulumi.getter(name="ipLocationCountries")
    def ip_location_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Country or region code.
        """
        return pulumi.get(self, "ip_location_countries")

    @ip_location_countries.setter
    def ip_location_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_location_countries", value)

    @property
    @pulumi.getter(name="ipLocationSubregions")
    def ip_location_subregions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Domestic region code.
        """
        return pulumi.get(self, "ip_location_subregions")

    @ip_location_subregions.setter
    def ip_location_subregions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_location_subregions", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project to which your domain names belong.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update time of the rule.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The path of Matching.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class AclRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accurate_group: Optional[pulumi.Input[pulumi.InputType['AclRuleAccurateGroupArgs']]] = None,
                 acl_type: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 advanced: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 host_add_type: Optional[pulumi.Input[int]] = None,
                 host_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_add_type: Optional[pulumi.Input[int]] = None,
                 ip_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_location_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_location_subregions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage waf acl rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.AclRule("foo",
            accurate_group=volcengine.waf.AclRuleAccurateGroupArgs(
                accurate_rules=[volcengine.waf.AclRuleAccurateGroupAccurateRuleArgs(
                    http_obj="request.uri",
                    obj_type=1,
                    opretar=2,
                    property=0,
                    value_string="GET",
                )],
                logic=1,
            ),
            acl_type="Allow",
            action="block",
            advanced=1,
            description="tf-test",
            enable=1,
            host_add_type=3,
            host_lists=["www.tf-test.com"],
            ip_add_type=3,
            ip_lists=[
                "1.2.2.2",
                "1.2.3.30",
            ],
            project_name="default",
            url="/")
        ```

        ## Import

        WafAclRule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/aclRule:AclRule default resource_id:AclType
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AclRuleAccurateGroupArgs']] accurate_group: Advanced conditions.
        :param pulumi.Input[str] acl_type: The type of access control rules.
        :param pulumi.Input[str] action: Action to be taken on requests that match the rule.
        :param pulumi.Input[int] advanced: Whether to set advanced conditions.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input[int] enable: Whether to enable the rule.
        :param pulumi.Input[int] host_add_type: Type of domain name addition.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] host_group_ids: The ID of the domain group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_lists: Required if HostAddType = 3. Single or multiple domain names are supported.
        :param pulumi.Input[int] ip_add_type: Type of IP address addition.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ip_group_ids: Required if IpAddType = 2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: Required if IpAddType = 3. Single or multiple IP addresses are supported.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_location_countries: Country or region code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_location_subregions: Domestic region code.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[str] project_name: The name of the project to which your domain names belong.
        :param pulumi.Input[str] url: The path of Matching.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AclRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage waf acl rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.AclRule("foo",
            accurate_group=volcengine.waf.AclRuleAccurateGroupArgs(
                accurate_rules=[volcengine.waf.AclRuleAccurateGroupAccurateRuleArgs(
                    http_obj="request.uri",
                    obj_type=1,
                    opretar=2,
                    property=0,
                    value_string="GET",
                )],
                logic=1,
            ),
            acl_type="Allow",
            action="block",
            advanced=1,
            description="tf-test",
            enable=1,
            host_add_type=3,
            host_lists=["www.tf-test.com"],
            ip_add_type=3,
            ip_lists=[
                "1.2.2.2",
                "1.2.3.30",
            ],
            project_name="default",
            url="/")
        ```

        ## Import

        WafAclRule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/aclRule:AclRule default resource_id:AclType
        ```

        :param str resource_name: The name of the resource.
        :param AclRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AclRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accurate_group: Optional[pulumi.Input[pulumi.InputType['AclRuleAccurateGroupArgs']]] = None,
                 acl_type: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 advanced: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 host_add_type: Optional[pulumi.Input[int]] = None,
                 host_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_add_type: Optional[pulumi.Input[int]] = None,
                 ip_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_location_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_location_subregions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AclRuleArgs.__new__(AclRuleArgs)

            __props__.__dict__["accurate_group"] = accurate_group
            if acl_type is None and not opts.urn:
                raise TypeError("Missing required property 'acl_type'")
            __props__.__dict__["acl_type"] = acl_type
            __props__.__dict__["action"] = action
            __props__.__dict__["advanced"] = advanced
            __props__.__dict__["description"] = description
            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
            if host_add_type is None and not opts.urn:
                raise TypeError("Missing required property 'host_add_type'")
            __props__.__dict__["host_add_type"] = host_add_type
            __props__.__dict__["host_group_ids"] = host_group_ids
            __props__.__dict__["host_lists"] = host_lists
            if ip_add_type is None and not opts.urn:
                raise TypeError("Missing required property 'ip_add_type'")
            __props__.__dict__["ip_add_type"] = ip_add_type
            __props__.__dict__["ip_group_ids"] = ip_group_ids
            __props__.__dict__["ip_lists"] = ip_lists
            __props__.__dict__["ip_location_countries"] = ip_location_countries
            __props__.__dict__["ip_location_subregions"] = ip_location_subregions
            __props__.__dict__["name"] = name
            __props__.__dict__["project_name"] = project_name
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["client_ip"] = None
            __props__.__dict__["host_groups"] = None
            __props__.__dict__["ip_groups"] = None
            __props__.__dict__["rule_tag"] = None
            __props__.__dict__["update_time"] = None
        super(AclRule, __self__).__init__(
            'volcengine:waf/aclRule:AclRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accurate_group: Optional[pulumi.Input[pulumi.InputType['AclRuleAccurateGroupArgs']]] = None,
            acl_type: Optional[pulumi.Input[str]] = None,
            action: Optional[pulumi.Input[str]] = None,
            advanced: Optional[pulumi.Input[int]] = None,
            client_ip: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enable: Optional[pulumi.Input[int]] = None,
            host_add_type: Optional[pulumi.Input[int]] = None,
            host_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclRuleHostGroupArgs']]]]] = None,
            host_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ip_add_type: Optional[pulumi.Input[int]] = None,
            ip_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            ip_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclRuleIpGroupArgs']]]]] = None,
            ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ip_location_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ip_location_subregions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            rule_tag: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'AclRule':
        """
        Get an existing AclRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AclRuleAccurateGroupArgs']] accurate_group: Advanced conditions.
        :param pulumi.Input[str] acl_type: The type of access control rules.
        :param pulumi.Input[str] action: Action to be taken on requests that match the rule.
        :param pulumi.Input[int] advanced: Whether to set advanced conditions.
        :param pulumi.Input[str] client_ip: IP address.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input[int] enable: Whether to enable the rule.
        :param pulumi.Input[int] host_add_type: Type of domain name addition.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] host_group_ids: The ID of the domain group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclRuleHostGroupArgs']]]] host_groups: The list of domain name groups.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_lists: Required if HostAddType = 3. Single or multiple domain names are supported.
        :param pulumi.Input[int] ip_add_type: Type of IP address addition.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ip_group_ids: Required if IpAddType = 2.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclRuleIpGroupArgs']]]] ip_groups: The list of domain name groups.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: Required if IpAddType = 3. Single or multiple IP addresses are supported.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_location_countries: Country or region code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_location_subregions: Domestic region code.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[str] project_name: The name of the project to which your domain names belong.
        :param pulumi.Input[str] rule_tag: Rule unique identifier.
        :param pulumi.Input[str] update_time: Update time of the rule.
        :param pulumi.Input[str] url: The path of Matching.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AclRuleState.__new__(_AclRuleState)

        __props__.__dict__["accurate_group"] = accurate_group
        __props__.__dict__["acl_type"] = acl_type
        __props__.__dict__["action"] = action
        __props__.__dict__["advanced"] = advanced
        __props__.__dict__["client_ip"] = client_ip
        __props__.__dict__["description"] = description
        __props__.__dict__["enable"] = enable
        __props__.__dict__["host_add_type"] = host_add_type
        __props__.__dict__["host_group_ids"] = host_group_ids
        __props__.__dict__["host_groups"] = host_groups
        __props__.__dict__["host_lists"] = host_lists
        __props__.__dict__["ip_add_type"] = ip_add_type
        __props__.__dict__["ip_group_ids"] = ip_group_ids
        __props__.__dict__["ip_groups"] = ip_groups
        __props__.__dict__["ip_lists"] = ip_lists
        __props__.__dict__["ip_location_countries"] = ip_location_countries
        __props__.__dict__["ip_location_subregions"] = ip_location_subregions
        __props__.__dict__["name"] = name
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["rule_tag"] = rule_tag
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["url"] = url
        return AclRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> pulumi.Output['outputs.AclRuleAccurateGroup']:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter(name="aclType")
    def acl_type(self) -> pulumi.Output[str]:
        """
        The type of access control rules.
        """
        return pulumi.get(self, "acl_type")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def advanced(self) -> pulumi.Output[int]:
        """
        Whether to set advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> pulumi.Output[str]:
        """
        IP address.
        """
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the rule.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="hostAddType")
    def host_add_type(self) -> pulumi.Output[int]:
        """
        Type of domain name addition.
        """
        return pulumi.get(self, "host_add_type")

    @property
    @pulumi.getter(name="hostGroupIds")
    def host_group_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        The ID of the domain group.
        """
        return pulumi.get(self, "host_group_ids")

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> pulumi.Output[Sequence['outputs.AclRuleHostGroup']]:
        """
        The list of domain name groups.
        """
        return pulumi.get(self, "host_groups")

    @property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        Required if HostAddType = 3. Single or multiple domain names are supported.
        """
        return pulumi.get(self, "host_lists")

    @property
    @pulumi.getter(name="ipAddType")
    def ip_add_type(self) -> pulumi.Output[int]:
        """
        Type of IP address addition.
        """
        return pulumi.get(self, "ip_add_type")

    @property
    @pulumi.getter(name="ipGroupIds")
    def ip_group_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        Required if IpAddType = 2.
        """
        return pulumi.get(self, "ip_group_ids")

    @property
    @pulumi.getter(name="ipGroups")
    def ip_groups(self) -> pulumi.Output[Sequence['outputs.AclRuleIpGroup']]:
        """
        The list of domain name groups.
        """
        return pulumi.get(self, "ip_groups")

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        Required if IpAddType = 3. Single or multiple IP addresses are supported.
        """
        return pulumi.get(self, "ip_lists")

    @property
    @pulumi.getter(name="ipLocationCountries")
    def ip_location_countries(self) -> pulumi.Output[Sequence[str]]:
        """
        Country or region code.
        """
        return pulumi.get(self, "ip_location_countries")

    @property
    @pulumi.getter(name="ipLocationSubregions")
    def ip_location_subregions(self) -> pulumi.Output[Sequence[str]]:
        """
        Domestic region code.
        """
        return pulumi.get(self, "ip_location_subregions")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the project to which your domain names belong.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> pulumi.Output[str]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Update time of the rule.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The path of Matching.
        """
        return pulumi.get(self, "url")

