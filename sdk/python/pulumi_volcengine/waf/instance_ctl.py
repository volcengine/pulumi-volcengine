# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceCtlArgs', 'InstanceCtl']

@pulumi.input_type
class InstanceCtlArgs:
    def __init__(__self__, *,
                 allow_enable: Optional[pulumi.Input[int]] = None,
                 block_enable: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a InstanceCtl resource.
        :param pulumi.Input[int] allow_enable: Whether to enable the allowed access list policy for the instance corresponding to the current region.
        :param pulumi.Input[int] block_enable: Whether to enable the prohibited access list policy for the instance corresponding to the current region.
        :param pulumi.Input[str] project_name: The name of the project associated with the current resource.
        """
        if allow_enable is not None:
            pulumi.set(__self__, "allow_enable", allow_enable)
        if block_enable is not None:
            pulumi.set(__self__, "block_enable", block_enable)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)

    @property
    @pulumi.getter(name="allowEnable")
    def allow_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the allowed access list policy for the instance corresponding to the current region.
        """
        return pulumi.get(self, "allow_enable")

    @allow_enable.setter
    def allow_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allow_enable", value)

    @property
    @pulumi.getter(name="blockEnable")
    def block_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the prohibited access list policy for the instance corresponding to the current region.
        """
        return pulumi.get(self, "block_enable")

    @block_enable.setter
    def block_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_enable", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project associated with the current resource.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)


@pulumi.input_type
class _InstanceCtlState:
    def __init__(__self__, *,
                 allow_enable: Optional[pulumi.Input[int]] = None,
                 block_enable: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InstanceCtl resources.
        :param pulumi.Input[int] allow_enable: Whether to enable the allowed access list policy for the instance corresponding to the current region.
        :param pulumi.Input[int] block_enable: Whether to enable the prohibited access list policy for the instance corresponding to the current region.
        :param pulumi.Input[str] project_name: The name of the project associated with the current resource.
        """
        if allow_enable is not None:
            pulumi.set(__self__, "allow_enable", allow_enable)
        if block_enable is not None:
            pulumi.set(__self__, "block_enable", block_enable)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)

    @property
    @pulumi.getter(name="allowEnable")
    def allow_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the allowed access list policy for the instance corresponding to the current region.
        """
        return pulumi.get(self, "allow_enable")

    @allow_enable.setter
    def allow_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allow_enable", value)

    @property
    @pulumi.getter(name="blockEnable")
    def block_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the prohibited access list policy for the instance corresponding to the current region.
        """
        return pulumi.get(self, "block_enable")

    @block_enable.setter
    def block_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_enable", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project associated with the current resource.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)


class InstanceCtl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_enable: Optional[pulumi.Input[int]] = None,
                 block_enable: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage waf instance ctl
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.InstanceCtl("foo",
            allow_enable=0,
            block_enable=1,
            project_name="default")
        ```

        ## Import

        WafInstanceCtl can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/instanceCtl:InstanceCtl default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] allow_enable: Whether to enable the allowed access list policy for the instance corresponding to the current region.
        :param pulumi.Input[int] block_enable: Whether to enable the prohibited access list policy for the instance corresponding to the current region.
        :param pulumi.Input[str] project_name: The name of the project associated with the current resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InstanceCtlArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage waf instance ctl
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.InstanceCtl("foo",
            allow_enable=0,
            block_enable=1,
            project_name="default")
        ```

        ## Import

        WafInstanceCtl can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/instanceCtl:InstanceCtl default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param InstanceCtlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceCtlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_enable: Optional[pulumi.Input[int]] = None,
                 block_enable: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceCtlArgs.__new__(InstanceCtlArgs)

            __props__.__dict__["allow_enable"] = allow_enable
            __props__.__dict__["block_enable"] = block_enable
            __props__.__dict__["project_name"] = project_name
        super(InstanceCtl, __self__).__init__(
            'volcengine:waf/instanceCtl:InstanceCtl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_enable: Optional[pulumi.Input[int]] = None,
            block_enable: Optional[pulumi.Input[int]] = None,
            project_name: Optional[pulumi.Input[str]] = None) -> 'InstanceCtl':
        """
        Get an existing InstanceCtl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] allow_enable: Whether to enable the allowed access list policy for the instance corresponding to the current region.
        :param pulumi.Input[int] block_enable: Whether to enable the prohibited access list policy for the instance corresponding to the current region.
        :param pulumi.Input[str] project_name: The name of the project associated with the current resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceCtlState.__new__(_InstanceCtlState)

        __props__.__dict__["allow_enable"] = allow_enable
        __props__.__dict__["block_enable"] = block_enable
        __props__.__dict__["project_name"] = project_name
        return InstanceCtl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowEnable")
    def allow_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the allowed access list policy for the instance corresponding to the current region.
        """
        return pulumi.get(self, "allow_enable")

    @property
    @pulumi.getter(name="blockEnable")
    def block_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the prohibited access list policy for the instance corresponding to the current region.
        """
        return pulumi.get(self, "block_enable")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the project associated with the current resource.
        """
        return pulumi.get(self, "project_name")

