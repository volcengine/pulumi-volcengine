# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomPageArgs', 'CustomPage']

@pulumi.input_type
class CustomPageArgs:
    def __init__(__self__, *,
                 client_ip: pulumi.Input[str],
                 code: pulumi.Input[int],
                 enable: pulumi.Input[int],
                 host: pulumi.Input[str],
                 page_mode: pulumi.Input[int],
                 policy: pulumi.Input[int],
                 url: pulumi.Input[str],
                 accurate: Optional[pulumi.Input['CustomPageAccurateArgs']] = None,
                 advanced: Optional[pulumi.Input[int]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CustomPage resource.
        :param pulumi.Input[str] client_ip: Fill in ALL, which means this rule will take effect on all IP addresses.
        :param pulumi.Input[int] code: Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        :param pulumi.Input[int] enable: Whether to enable the rule.
        :param pulumi.Input[str] host: Domain name to be protected.
        :param pulumi.Input[int] page_mode: The layout template of the response page.
        :param pulumi.Input[int] policy: Action to be taken on requests that match the rule.
        :param pulumi.Input[str] url: Match the path.
        :param pulumi.Input['CustomPageAccurateArgs'] accurate: Advanced conditions.
        :param pulumi.Input[int] advanced: Whether to configure advanced conditions.
        :param pulumi.Input[str] body: The layout content of the response page.
        :param pulumi.Input[str] content_type: The layout template of the response page. Required if PageMode=0 or 1.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[str] project_name: The name of the project to which your domain names belong.
        :param pulumi.Input[str] redirect_url: The path where users should be redirected.
        """
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "page_mode", page_mode)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "url", url)
        if accurate is not None:
            pulumi.set(__self__, "accurate", accurate)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> pulumi.Input[str]:
        """
        Fill in ALL, which means this rule will take effect on all IP addresses.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def code(self) -> pulumi.Input[int]:
        """
        Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: pulumi.Input[int]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[int]:
        """
        Whether to enable the rule.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Domain name to be protected.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="pageMode")
    def page_mode(self) -> pulumi.Input[int]:
        """
        The layout template of the response page.
        """
        return pulumi.get(self, "page_mode")

    @page_mode.setter
    def page_mode(self, value: pulumi.Input[int]):
        pulumi.set(self, "page_mode", value)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Input[int]:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input[int]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Match the path.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def accurate(self) -> Optional[pulumi.Input['CustomPageAccurateArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate")

    @accurate.setter
    def accurate(self, value: Optional[pulumi.Input['CustomPageAccurateArgs']]):
        pulumi.set(self, "accurate", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to configure advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The layout content of the response page.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        The layout template of the response page. Required if PageMode=0 or 1.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project to which your domain names belong.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The path where users should be redirected.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)


@pulumi.input_type
class _CustomPageState:
    def __init__(__self__, *,
                 accurate: Optional[pulumi.Input['CustomPageAccurateArgs']] = None,
                 advanced: Optional[pulumi.Input[int]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 isolation_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 page_mode: Optional[pulumi.Input[int]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CustomPage resources.
        :param pulumi.Input['CustomPageAccurateArgs'] accurate: Advanced conditions.
        :param pulumi.Input[int] advanced: Whether to configure advanced conditions.
        :param pulumi.Input[str] body: The layout content of the response page.
        :param pulumi.Input[str] client_ip: Fill in ALL, which means this rule will take effect on all IP addresses.
        :param pulumi.Input[int] code: Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        :param pulumi.Input[str] content_type: The layout template of the response page. Required if PageMode=0 or 1.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input[int] enable: Whether to enable the rule.
        :param pulumi.Input[int] group_id: The ID of the advanced conditional rule group.
        :param pulumi.Input[str] header: Request header information.
        :param pulumi.Input[str] host: Domain name to be protected.
        :param pulumi.Input[str] isolation_id: The ID of Region.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[int] page_mode: The layout template of the response page.
        :param pulumi.Input[int] policy: Action to be taken on requests that match the rule.
        :param pulumi.Input[str] project_name: The name of the project to which your domain names belong.
        :param pulumi.Input[str] redirect_url: The path where users should be redirected.
        :param pulumi.Input[str] rule_tag: Unique identification of the rules.
        :param pulumi.Input[str] update_time: Rule update time.
        :param pulumi.Input[str] url: Match the path.
        """
        if accurate is not None:
            pulumi.set(__self__, "accurate", accurate)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if isolation_id is not None:
            pulumi.set(__self__, "isolation_id", isolation_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if page_mode is not None:
            pulumi.set(__self__, "page_mode", page_mode)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def accurate(self) -> Optional[pulumi.Input['CustomPageAccurateArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate")

    @accurate.setter
    def accurate(self, value: Optional[pulumi.Input['CustomPageAccurateArgs']]):
        pulumi.set(self, "accurate", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to configure advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The layout content of the response page.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Fill in ALL, which means this rule will take effect on all IP addresses.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        """
        Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        The layout template of the response page. Required if PageMode=0 or 1.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the rule.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the advanced conditional rule group.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Request header information.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name to be protected.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="isolationId")
    def isolation_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of Region.
        """
        return pulumi.get(self, "isolation_id")

    @isolation_id.setter
    def isolation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isolation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pageMode")
    def page_mode(self) -> Optional[pulumi.Input[int]]:
        """
        The layout template of the response page.
        """
        return pulumi.get(self, "page_mode")

    @page_mode.setter
    def page_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_mode", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[int]]:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project to which your domain names belong.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The path where users should be redirected.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identification of the rules.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Match the path.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class CustomPage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accurate: Optional[pulumi.Input[pulumi.InputType['CustomPageAccurateArgs']]] = None,
                 advanced: Optional[pulumi.Input[int]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 page_mode: Optional[pulumi.Input[int]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage waf custom page
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.CustomPage("foo",
            accurate=volcengine.waf.CustomPageAccurateArgs(
                accurate_rules=[
                    volcengine.waf.CustomPageAccurateAccurateRuleArgs(
                        http_obj="request.uri",
                        obj_type=1,
                        opretar=2,
                        property=0,
                        value_string="tf",
                    ),
                    volcengine.waf.CustomPageAccurateAccurateRuleArgs(
                        http_obj="request.schema",
                        obj_type=0,
                        opretar=2,
                        property=0,
                        value_string="tf-2",
                    ),
                ],
                logic=2,
            ),
            advanced=1,
            body="tf-test-body",
            client_ip="ALL",
            code=403,
            content_type="text/html",
            description="tf-test",
            enable=1,
            host="www.123.com",
            page_mode=1,
            policy=1,
            project_name="default",
            redirect_url="/test/tf/path",
            url="/tf-test")
        ```

        ## Import

        WafCustomPage can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/customPage:CustomPage default resource_id:Host
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CustomPageAccurateArgs']] accurate: Advanced conditions.
        :param pulumi.Input[int] advanced: Whether to configure advanced conditions.
        :param pulumi.Input[str] body: The layout content of the response page.
        :param pulumi.Input[str] client_ip: Fill in ALL, which means this rule will take effect on all IP addresses.
        :param pulumi.Input[int] code: Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        :param pulumi.Input[str] content_type: The layout template of the response page. Required if PageMode=0 or 1.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input[int] enable: Whether to enable the rule.
        :param pulumi.Input[str] host: Domain name to be protected.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[int] page_mode: The layout template of the response page.
        :param pulumi.Input[int] policy: Action to be taken on requests that match the rule.
        :param pulumi.Input[str] project_name: The name of the project to which your domain names belong.
        :param pulumi.Input[str] redirect_url: The path where users should be redirected.
        :param pulumi.Input[str] url: Match the path.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomPageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage waf custom page
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.CustomPage("foo",
            accurate=volcengine.waf.CustomPageAccurateArgs(
                accurate_rules=[
                    volcengine.waf.CustomPageAccurateAccurateRuleArgs(
                        http_obj="request.uri",
                        obj_type=1,
                        opretar=2,
                        property=0,
                        value_string="tf",
                    ),
                    volcengine.waf.CustomPageAccurateAccurateRuleArgs(
                        http_obj="request.schema",
                        obj_type=0,
                        opretar=2,
                        property=0,
                        value_string="tf-2",
                    ),
                ],
                logic=2,
            ),
            advanced=1,
            body="tf-test-body",
            client_ip="ALL",
            code=403,
            content_type="text/html",
            description="tf-test",
            enable=1,
            host="www.123.com",
            page_mode=1,
            policy=1,
            project_name="default",
            redirect_url="/test/tf/path",
            url="/tf-test")
        ```

        ## Import

        WafCustomPage can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/customPage:CustomPage default resource_id:Host
        ```

        :param str resource_name: The name of the resource.
        :param CustomPageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomPageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accurate: Optional[pulumi.Input[pulumi.InputType['CustomPageAccurateArgs']]] = None,
                 advanced: Optional[pulumi.Input[int]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 page_mode: Optional[pulumi.Input[int]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomPageArgs.__new__(CustomPageArgs)

            __props__.__dict__["accurate"] = accurate
            __props__.__dict__["advanced"] = advanced
            __props__.__dict__["body"] = body
            if client_ip is None and not opts.urn:
                raise TypeError("Missing required property 'client_ip'")
            __props__.__dict__["client_ip"] = client_ip
            if code is None and not opts.urn:
                raise TypeError("Missing required property 'code'")
            __props__.__dict__["code"] = code
            __props__.__dict__["content_type"] = content_type
            __props__.__dict__["description"] = description
            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["name"] = name
            if page_mode is None and not opts.urn:
                raise TypeError("Missing required property 'page_mode'")
            __props__.__dict__["page_mode"] = page_mode
            if policy is None and not opts.urn:
                raise TypeError("Missing required property 'policy'")
            __props__.__dict__["policy"] = policy
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["redirect_url"] = redirect_url
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["group_id"] = None
            __props__.__dict__["header"] = None
            __props__.__dict__["isolation_id"] = None
            __props__.__dict__["rule_tag"] = None
            __props__.__dict__["update_time"] = None
        super(CustomPage, __self__).__init__(
            'volcengine:waf/customPage:CustomPage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accurate: Optional[pulumi.Input[pulumi.InputType['CustomPageAccurateArgs']]] = None,
            advanced: Optional[pulumi.Input[int]] = None,
            body: Optional[pulumi.Input[str]] = None,
            client_ip: Optional[pulumi.Input[str]] = None,
            code: Optional[pulumi.Input[int]] = None,
            content_type: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enable: Optional[pulumi.Input[int]] = None,
            group_id: Optional[pulumi.Input[int]] = None,
            header: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            isolation_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            page_mode: Optional[pulumi.Input[int]] = None,
            policy: Optional[pulumi.Input[int]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            redirect_url: Optional[pulumi.Input[str]] = None,
            rule_tag: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'CustomPage':
        """
        Get an existing CustomPage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CustomPageAccurateArgs']] accurate: Advanced conditions.
        :param pulumi.Input[int] advanced: Whether to configure advanced conditions.
        :param pulumi.Input[str] body: The layout content of the response page.
        :param pulumi.Input[str] client_ip: Fill in ALL, which means this rule will take effect on all IP addresses.
        :param pulumi.Input[int] code: Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        :param pulumi.Input[str] content_type: The layout template of the response page. Required if PageMode=0 or 1.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input[int] enable: Whether to enable the rule.
        :param pulumi.Input[int] group_id: The ID of the advanced conditional rule group.
        :param pulumi.Input[str] header: Request header information.
        :param pulumi.Input[str] host: Domain name to be protected.
        :param pulumi.Input[str] isolation_id: The ID of Region.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[int] page_mode: The layout template of the response page.
        :param pulumi.Input[int] policy: Action to be taken on requests that match the rule.
        :param pulumi.Input[str] project_name: The name of the project to which your domain names belong.
        :param pulumi.Input[str] redirect_url: The path where users should be redirected.
        :param pulumi.Input[str] rule_tag: Unique identification of the rules.
        :param pulumi.Input[str] update_time: Rule update time.
        :param pulumi.Input[str] url: Match the path.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomPageState.__new__(_CustomPageState)

        __props__.__dict__["accurate"] = accurate
        __props__.__dict__["advanced"] = advanced
        __props__.__dict__["body"] = body
        __props__.__dict__["client_ip"] = client_ip
        __props__.__dict__["code"] = code
        __props__.__dict__["content_type"] = content_type
        __props__.__dict__["description"] = description
        __props__.__dict__["enable"] = enable
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["header"] = header
        __props__.__dict__["host"] = host
        __props__.__dict__["isolation_id"] = isolation_id
        __props__.__dict__["name"] = name
        __props__.__dict__["page_mode"] = page_mode
        __props__.__dict__["policy"] = policy
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["redirect_url"] = redirect_url
        __props__.__dict__["rule_tag"] = rule_tag
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["url"] = url
        return CustomPage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def accurate(self) -> pulumi.Output['outputs.CustomPageAccurate']:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate")

    @property
    @pulumi.getter
    def advanced(self) -> pulumi.Output[int]:
        """
        Whether to configure advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter
    def body(self) -> pulumi.Output[str]:
        """
        The layout content of the response page.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> pulumi.Output[str]:
        """
        Fill in ALL, which means this rule will take effect on all IP addresses.
        """
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def code(self) -> pulumi.Output[int]:
        """
        Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Output[str]:
        """
        The layout template of the response page. Required if PageMode=0 or 1.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the rule.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[int]:
        """
        The ID of the advanced conditional rule group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def header(self) -> pulumi.Output[str]:
        """
        Request header information.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Domain name to be protected.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="isolationId")
    def isolation_id(self) -> pulumi.Output[str]:
        """
        The ID of Region.
        """
        return pulumi.get(self, "isolation_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pageMode")
    def page_mode(self) -> pulumi.Output[int]:
        """
        The layout template of the response page.
        """
        return pulumi.get(self, "page_mode")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output[int]:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the project to which your domain names belong.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Output[str]:
        """
        The path where users should be redirected.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> pulumi.Output[str]:
        """
        Unique identification of the rules.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Match the path.
        """
        return pulumi.get(self, "url")

