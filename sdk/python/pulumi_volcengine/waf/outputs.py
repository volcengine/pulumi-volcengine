# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AclRuleAccurateGroup',
    'AclRuleAccurateGroupAccurateRule',
    'AclRuleHostGroup',
    'AclRuleIpGroup',
    'AclRulesRuleResult',
    'AclRulesRuleAccurateGroupResult',
    'AclRulesRuleAccurateGroupAccurateRuleResult',
    'AclRulesRuleHostGroupResult',
    'AclRulesRuleIpGroupResult',
    'BotAnalyseProtectRuleAccurateGroup',
    'BotAnalyseProtectRuleAccurateGroupAccurateRule',
    'BotAnalyseProtectRuleRuleGroup',
    'BotAnalyseProtectRuleRuleGroupGroup',
    'BotAnalyseProtectRuleRuleGroupGroupAccurateRule',
    'BotAnalyseProtectRuleRuleGroupRule',
    'BotAnalyseProtectRuleRuleGroupRuleAccurateGroup',
    'BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRule',
    'BotAnalyseProtectRulesDataResult',
    'BotAnalyseProtectRulesDataRuleGroupResult',
    'BotAnalyseProtectRulesDataRuleGroupGroupResult',
    'BotAnalyseProtectRulesDataRuleGroupGroupAccurateRuleResult',
    'BotAnalyseProtectRulesDataRuleGroupRuleResult',
    'BotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupResult',
    'BotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult',
    'CcRuleAccurateGroup',
    'CcRuleAccurateGroupAccurateRule',
    'CcRuleCronConf',
    'CcRuleRuleGroup',
    'CcRuleRuleGroupGroup',
    'CcRuleRuleGroupGroupAccurateRule',
    'CcRuleRuleGroupRule',
    'CcRuleRuleGroupRuleAccurateGroup',
    'CcRuleRuleGroupRuleAccurateGroupAccurateRule',
    'CcRuleRuleGroupRuleCronConf',
    'CcRulesDataResult',
    'CcRulesDataRuleGroupResult',
    'CcRulesDataRuleGroupGroupResult',
    'CcRulesDataRuleGroupGroupAccurateRuleResult',
    'CcRulesDataRuleGroupRuleResult',
    'CcRulesDataRuleGroupRuleAccurateGroupResult',
    'CcRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult',
    'CcRulesDataRuleGroupRuleCronConfResult',
    'CustomBotAccurate',
    'CustomBotAccurateAccurateRule',
    'CustomBotsDataResult',
    'CustomBotsDataAccurateResult',
    'CustomBotsDataAccurateAccurateRuleResult',
    'CustomPageAccurate',
    'CustomPageAccurateAccurateRule',
    'CustomPagesDataResult',
    'CustomPagesDataAccurateResult',
    'CustomPagesDataAccurateAccurateRuleResult',
    'DomainsDataResult',
    'DomainsDataBackendGroupResult',
    'DomainsDataBackendGroupBackendResult',
    'DomainsDataCloudAccessConfigResult',
    'DomainsDataProtocolPortsResult',
    'HostGroupRelatedRule',
    'HostGroupsHostGroupListResult',
    'HostGroupsHostGroupListRelatedRuleResult',
    'IpGroupRelatedRule',
    'IpGroupsIpGroupListResult',
    'IpGroupsIpGroupListRelatedRuleResult',
    'ProhibitionsIpAggGroupResult',
    'ProhibitionsIpAggGroupReasonResult',
    'ServiceCertificatesDataResult',
    'SystemBotsDataResult',
    'VulnerabilityAdvanceConfig',
    'VulnerabilityAdvanceConfigAutoTraversal',
    'VulnerabilityAdvanceConfigAutoTraversalRule',
    'VulnerabilityAdvanceConfigFreqScan',
    'VulnerabilityAdvanceConfigFreqScanRule',
    'VulnerabilityRuleDetail',
    'VulnerabilitySystemRuleSwitch',
    'WafDomainBackendGroup',
    'WafDomainBackendGroupBackend',
    'WafDomainCloudAccessConfig',
    'WafDomainExtraDefenceModeLbInstance',
    'WafDomainProtocolPorts',
    'WafDomainTlsFieldsConfig',
    'WafDomainTlsFieldsConfigHeadersConfig',
    'GetAclRulesRuleResult',
    'GetAclRulesRuleAccurateGroupResult',
    'GetAclRulesRuleAccurateGroupAccurateRuleResult',
    'GetAclRulesRuleHostGroupResult',
    'GetAclRulesRuleIpGroupResult',
    'GetBotAnalyseProtectRulesDataResult',
    'GetBotAnalyseProtectRulesDataRuleGroupResult',
    'GetBotAnalyseProtectRulesDataRuleGroupGroupResult',
    'GetBotAnalyseProtectRulesDataRuleGroupGroupAccurateRuleResult',
    'GetBotAnalyseProtectRulesDataRuleGroupRuleResult',
    'GetBotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupResult',
    'GetBotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult',
    'GetCcRulesDataResult',
    'GetCcRulesDataRuleGroupResult',
    'GetCcRulesDataRuleGroupGroupResult',
    'GetCcRulesDataRuleGroupGroupAccurateRuleResult',
    'GetCcRulesDataRuleGroupRuleResult',
    'GetCcRulesDataRuleGroupRuleAccurateGroupResult',
    'GetCcRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult',
    'GetCcRulesDataRuleGroupRuleCronConfResult',
    'GetCustomBotsDataResult',
    'GetCustomBotsDataAccurateResult',
    'GetCustomBotsDataAccurateAccurateRuleResult',
    'GetCustomPagesDataResult',
    'GetCustomPagesDataAccurateResult',
    'GetCustomPagesDataAccurateAccurateRuleResult',
    'GetDomainsDataResult',
    'GetDomainsDataBackendGroupResult',
    'GetDomainsDataBackendGroupBackendResult',
    'GetDomainsDataCloudAccessConfigResult',
    'GetDomainsDataProtocolPortsResult',
    'GetHostGroupsHostGroupListResult',
    'GetHostGroupsHostGroupListRelatedRuleResult',
    'GetIpGroupsIpGroupListResult',
    'GetIpGroupsIpGroupListRelatedRuleResult',
    'GetProhibitionsIpAggGroupResult',
    'GetProhibitionsIpAggGroupReasonResult',
    'GetServiceCertificatesDataResult',
    'GetSystemBotsDataResult',
]

@pulumi.output_type
class AclRuleAccurateGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateRules":
            suggest = "accurate_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclRuleAccurateGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclRuleAccurateGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclRuleAccurateGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_rules: Sequence['outputs.AclRuleAccurateGroupAccurateRule'],
                 logic: int):
        """
        :param Sequence['AclRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.AclRuleAccurateGroupAccurateRule']:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class AclRuleAccurateGroupAccurateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpObj":
            suggest = "http_obj"
        elif key == "objType":
            suggest = "obj_type"
        elif key == "valueString":
            suggest = "value_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclRuleAccurateGroupAccurateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclRuleAccurateGroupAccurateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclRuleAccurateGroupAccurateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class AclRuleHostGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostGroupId":
            suggest = "host_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclRuleHostGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclRuleHostGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclRuleHostGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_group_id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int host_group_id: The ID of the domain group.
        :param str name: Rule name.
        """
        if host_group_id is not None:
            pulumi.set(__self__, "host_group_id", host_group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> Optional[int]:
        """
        The ID of the domain group.
        """
        return pulumi.get(self, "host_group_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AclRuleIpGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipGroupId":
            suggest = "ip_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclRuleIpGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclRuleIpGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclRuleIpGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_group_id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int ip_group_id: Required if IpAddType = 2.
        :param str name: Rule name.
        """
        if ip_group_id is not None:
            pulumi.set(__self__, "ip_group_id", ip_group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> Optional[int]:
        """
        Required if IpAddType = 2.
        """
        return pulumi.get(self, "ip_group_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AclRulesRuleResult(dict):
    def __init__(__self__, *,
                 accurate_group: 'outputs.AclRulesRuleAccurateGroupResult',
                 action: str,
                 advanced: int,
                 client_ip: str,
                 description: str,
                 enable: int,
                 host_add_type: int,
                 host_group_ids: Sequence[int],
                 host_groups: Sequence['outputs.AclRulesRuleHostGroupResult'],
                 host_lists: Sequence[str],
                 id: int,
                 ip_add_type: int,
                 ip_group_ids: Sequence[int],
                 ip_groups: Sequence['outputs.AclRulesRuleIpGroupResult'],
                 ip_lists: Sequence[str],
                 ip_location_countries: Sequence[str],
                 ip_location_subregions: Sequence[str],
                 name: str,
                 rule_tag: str,
                 update_time: str,
                 url: str):
        """
        :param 'AclRulesRuleAccurateGroupArgs' accurate_group: Advanced conditions.
        :param str action: Action to be taken on requests that match the rule.
        :param int advanced: Whether to set advanced conditions.
        :param str client_ip: IP address.
        :param str description: Rule description.
        :param int enable: The enabled status of the rule.
        :param int host_add_type: Type of domain name addition.
        :param Sequence[int] host_group_ids: The ID of host group.
        :param Sequence['AclRulesRuleHostGroupArgs'] host_groups: The list of domain name groups.
        :param Sequence[str] host_lists: Single or multiple domain names are supported.
        :param int id: Rule ID.
        :param int ip_add_type: Type of IP address addition.
        :param Sequence[int] ip_group_ids: The ID of the IP address group.
        :param Sequence['AclRulesRuleIpGroupArgs'] ip_groups: The list of domain name groups.
        :param Sequence[str] ip_lists: Single or multiple IP addresses are supported.
        :param Sequence[str] ip_location_countries: Country or region code.
        :param Sequence[str] ip_location_subregions: Domestic region code.
        :param str name: Rule name.
        :param str rule_tag: Rule unique identifier, precise search.
        :param str update_time: Update time of the rule.
        :param str url: The path of Matching.
        """
        pulumi.set(__self__, "accurate_group", accurate_group)
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "advanced", advanced)
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "host_add_type", host_add_type)
        pulumi.set(__self__, "host_group_ids", host_group_ids)
        pulumi.set(__self__, "host_groups", host_groups)
        pulumi.set(__self__, "host_lists", host_lists)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_add_type", ip_add_type)
        pulumi.set(__self__, "ip_group_ids", ip_group_ids)
        pulumi.set(__self__, "ip_groups", ip_groups)
        pulumi.set(__self__, "ip_lists", ip_lists)
        pulumi.set(__self__, "ip_location_countries", ip_location_countries)
        pulumi.set(__self__, "ip_location_subregions", ip_location_subregions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> 'outputs.AclRulesRuleAccurateGroupResult':
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def advanced(self) -> int:
        """
        Whether to set advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> str:
        """
        IP address.
        """
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        The enabled status of the rule.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="hostAddType")
    def host_add_type(self) -> int:
        """
        Type of domain name addition.
        """
        return pulumi.get(self, "host_add_type")

    @property
    @pulumi.getter(name="hostGroupIds")
    def host_group_ids(self) -> Sequence[int]:
        """
        The ID of host group.
        """
        return pulumi.get(self, "host_group_ids")

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> Sequence['outputs.AclRulesRuleHostGroupResult']:
        """
        The list of domain name groups.
        """
        return pulumi.get(self, "host_groups")

    @property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> Sequence[str]:
        """
        Single or multiple domain names are supported.
        """
        return pulumi.get(self, "host_lists")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddType")
    def ip_add_type(self) -> int:
        """
        Type of IP address addition.
        """
        return pulumi.get(self, "ip_add_type")

    @property
    @pulumi.getter(name="ipGroupIds")
    def ip_group_ids(self) -> Sequence[int]:
        """
        The ID of the IP address group.
        """
        return pulumi.get(self, "ip_group_ids")

    @property
    @pulumi.getter(name="ipGroups")
    def ip_groups(self) -> Sequence['outputs.AclRulesRuleIpGroupResult']:
        """
        The list of domain name groups.
        """
        return pulumi.get(self, "ip_groups")

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Sequence[str]:
        """
        Single or multiple IP addresses are supported.
        """
        return pulumi.get(self, "ip_lists")

    @property
    @pulumi.getter(name="ipLocationCountries")
    def ip_location_countries(self) -> Sequence[str]:
        """
        Country or region code.
        """
        return pulumi.get(self, "ip_location_countries")

    @property
    @pulumi.getter(name="ipLocationSubregions")
    def ip_location_subregions(self) -> Sequence[str]:
        """
        Domestic region code.
        """
        return pulumi.get(self, "ip_location_subregions")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Rule unique identifier, precise search.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time of the rule.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The path of Matching.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class AclRulesRuleAccurateGroupResult(dict):
    def __init__(__self__, *,
                 accurate_rules: Sequence['outputs.AclRulesRuleAccurateGroupAccurateRuleResult'],
                 logic: int):
        """
        :param Sequence['AclRulesRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.AclRulesRuleAccurateGroupAccurateRuleResult']:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class AclRulesRuleAccurateGroupAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class AclRulesRuleHostGroupResult(dict):
    def __init__(__self__, *,
                 host_group_id: int,
                 name: str):
        """
        :param int host_group_id: The ID of host group.
        :param str name: Rule name.
        """
        pulumi.set(__self__, "host_group_id", host_group_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> int:
        """
        The ID of host group.
        """
        return pulumi.get(self, "host_group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AclRulesRuleIpGroupResult(dict):
    def __init__(__self__, *,
                 ip_group_id: int,
                 name: str):
        """
        :param int ip_group_id: The ID of the IP address group.
        :param str name: Rule name.
        """
        pulumi.set(__self__, "ip_group_id", ip_group_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> int:
        """
        The ID of the IP address group.
        """
        return pulumi.get(self, "ip_group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BotAnalyseProtectRuleAccurateGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateRules":
            suggest = "accurate_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAnalyseProtectRuleAccurateGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAnalyseProtectRuleAccurateGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAnalyseProtectRuleAccurateGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_rules: Optional[Sequence['outputs.BotAnalyseProtectRuleAccurateGroupAccurateRule']] = None,
                 logic: Optional[int] = None):
        """
        :param Sequence['BotAnalyseProtectRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[Sequence['outputs.BotAnalyseProtectRuleAccurateGroupAccurateRule']]:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> Optional[int]:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class BotAnalyseProtectRuleAccurateGroupAccurateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpObj":
            suggest = "http_obj"
        elif key == "objType":
            suggest = "obj_type"
        elif key == "valueString":
            suggest = "value_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAnalyseProtectRuleAccurateGroupAccurateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAnalyseProtectRuleAccurateGroupAccurateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAnalyseProtectRuleAccurateGroupAccurateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_obj: Optional[str] = None,
                 obj_type: Optional[int] = None,
                 opretar: Optional[int] = None,
                 property: Optional[int] = None,
                 value_string: Optional[str] = None):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[str]:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[int]:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> Optional[int]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[str]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> Optional[int]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class BotAnalyseProtectRuleRuleGroup(dict):
    def __init__(__self__, *,
                 group: Optional['outputs.BotAnalyseProtectRuleRuleGroupGroup'] = None,
                 rules: Optional[Sequence['outputs.BotAnalyseProtectRuleRuleGroupRule']] = None):
        """
        :param 'BotAnalyseProtectRuleRuleGroupGroupArgs' group: Rule group information.
        :param Sequence['BotAnalyseProtectRuleRuleGroupRuleArgs'] rules: Specific rule information within the rule group.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def group(self) -> Optional['outputs.BotAnalyseProtectRuleRuleGroupGroup']:
        """
        Rule group information.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.BotAnalyseProtectRuleRuleGroupRule']]:
        """
        Specific rule information within the rule group.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class BotAnalyseProtectRuleRuleGroupGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateGroupPriority":
            suggest = "accurate_group_priority"
        elif key == "accurateRules":
            suggest = "accurate_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAnalyseProtectRuleRuleGroupGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAnalyseProtectRuleRuleGroupGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAnalyseProtectRuleRuleGroupGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_group_priority: Optional[int] = None,
                 accurate_rules: Optional[Sequence['outputs.BotAnalyseProtectRuleRuleGroupGroupAccurateRule']] = None,
                 id: Optional[int] = None,
                 logic: Optional[int] = None):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['BotAnalyseProtectRuleRuleGroupGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: Rule unique identifier.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[int]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[Sequence['outputs.BotAnalyseProtectRuleRuleGroupGroupAccurateRule']]:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> Optional[int]:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class BotAnalyseProtectRuleRuleGroupGroupAccurateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpObj":
            suggest = "http_obj"
        elif key == "objType":
            suggest = "obj_type"
        elif key == "valueString":
            suggest = "value_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAnalyseProtectRuleRuleGroupGroupAccurateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAnalyseProtectRuleRuleGroupGroupAccurateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAnalyseProtectRuleRuleGroupGroupAccurateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_obj: Optional[str] = None,
                 obj_type: Optional[int] = None,
                 opretar: Optional[int] = None,
                 property: Optional[int] = None,
                 value_string: Optional[str] = None):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[str]:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[int]:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> Optional[int]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[str]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> Optional[int]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class BotAnalyseProtectRuleRuleGroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateGroup":
            suggest = "accurate_group"
        elif key == "accurateGroupPriority":
            suggest = "accurate_group_priority"
        elif key == "actionAfterVerification":
            suggest = "action_after_verification"
        elif key == "actionType":
            suggest = "action_type"
        elif key == "effectTime":
            suggest = "effect_time"
        elif key == "exemptionTime":
            suggest = "exemption_time"
        elif key == "passRatio":
            suggest = "pass_ratio"
        elif key == "pathThreshold":
            suggest = "path_threshold"
        elif key == "rulePriority":
            suggest = "rule_priority"
        elif key == "ruleTag":
            suggest = "rule_tag"
        elif key == "singleProportion":
            suggest = "single_proportion"
        elif key == "singleThreshold":
            suggest = "single_threshold"
        elif key == "statisticalDuration":
            suggest = "statistical_duration"
        elif key == "statisticalType":
            suggest = "statistical_type"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAnalyseProtectRuleRuleGroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAnalyseProtectRuleRuleGroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAnalyseProtectRuleRuleGroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_group: Optional['outputs.BotAnalyseProtectRuleRuleGroupRuleAccurateGroup'] = None,
                 accurate_group_priority: Optional[int] = None,
                 action_after_verification: Optional[int] = None,
                 action_type: Optional[int] = None,
                 effect_time: Optional[int] = None,
                 enable: Optional[int] = None,
                 exemption_time: Optional[int] = None,
                 field: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 pass_ratio: Optional[float] = None,
                 path: Optional[str] = None,
                 path_threshold: Optional[int] = None,
                 rule_priority: Optional[int] = None,
                 rule_tag: Optional[str] = None,
                 single_proportion: Optional[float] = None,
                 single_threshold: Optional[int] = None,
                 statistical_duration: Optional[int] = None,
                 statistical_type: Optional[int] = None,
                 update_time: Optional[str] = None):
        """
        :param 'BotAnalyseProtectRuleRuleGroupRuleAccurateGroupArgs' accurate_group: Advanced conditions.
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param int action_after_verification: Perform the action after verification/challenge.
        :param int action_type: perform the action.
        :param int effect_time: Limit the duration.
        :param int enable: Whether to enable the rules.
        :param int exemption_time: Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        :param str field: Statistical objects, with multiple objects separated by commas.
        :param str host: Website domain names that require the setting of protection rules.
        :param int id: Rule unique identifier.
        :param str name: The name of rule.
        :param float pass_ratio: JS challenge/human-machine verification pass rate.
        :param str path: The requested path.
        :param int path_threshold: The path access frequency threshold is enabled when StatisticalType=1.
        :param int rule_priority: Priority of rule effectiveness.
        :param str rule_tag: Rule label, that is, the complete rule ID.
        :param float single_proportion: The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        :param int single_threshold: The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        :param int statistical_duration: The duration of statistics.
        :param int statistical_type: Statistical content and methods.
        :param str update_time: Rule update time.
        """
        if accurate_group is not None:
            pulumi.set(__self__, "accurate_group", accurate_group)
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if action_after_verification is not None:
            pulumi.set(__self__, "action_after_verification", action_after_verification)
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if effect_time is not None:
            pulumi.set(__self__, "effect_time", effect_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if exemption_time is not None:
            pulumi.set(__self__, "exemption_time", exemption_time)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pass_ratio is not None:
            pulumi.set(__self__, "pass_ratio", pass_ratio)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_threshold is not None:
            pulumi.set(__self__, "path_threshold", path_threshold)
        if rule_priority is not None:
            pulumi.set(__self__, "rule_priority", rule_priority)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if single_proportion is not None:
            pulumi.set(__self__, "single_proportion", single_proportion)
        if single_threshold is not None:
            pulumi.set(__self__, "single_threshold", single_threshold)
        if statistical_duration is not None:
            pulumi.set(__self__, "statistical_duration", statistical_duration)
        if statistical_type is not None:
            pulumi.set(__self__, "statistical_type", statistical_type)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> Optional['outputs.BotAnalyseProtectRuleRuleGroupRuleAccurateGroup']:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[int]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="actionAfterVerification")
    def action_after_verification(self) -> Optional[int]:
        """
        Perform the action after verification/challenge.
        """
        return pulumi.get(self, "action_after_verification")

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[int]:
        """
        perform the action.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> Optional[int]:
        """
        Limit the duration.
        """
        return pulumi.get(self, "effect_time")

    @property
    @pulumi.getter
    def enable(self) -> Optional[int]:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> Optional[int]:
        """
        Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
        """
        return pulumi.get(self, "exemption_time")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        Statistical objects, with multiple objects separated by commas.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passRatio")
    def pass_ratio(self) -> Optional[float]:
        """
        JS challenge/human-machine verification pass rate.
        """
        return pulumi.get(self, "pass_ratio")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The requested path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> Optional[int]:
        """
        The path access frequency threshold is enabled when StatisticalType=1.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> Optional[int]:
        """
        Priority of rule effectiveness.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        Rule label, that is, the complete rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="singleProportion")
    def single_proportion(self) -> Optional[float]:
        """
        The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
        """
        return pulumi.get(self, "single_proportion")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> Optional[int]:
        """
        The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
        """
        return pulumi.get(self, "single_threshold")

    @property
    @pulumi.getter(name="statisticalDuration")
    def statistical_duration(self) -> Optional[int]:
        """
        The duration of statistics.
        """
        return pulumi.get(self, "statistical_duration")

    @property
    @pulumi.getter(name="statisticalType")
    def statistical_type(self) -> Optional[int]:
        """
        Statistical content and methods.
        """
        return pulumi.get(self, "statistical_type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class BotAnalyseProtectRuleRuleGroupRuleAccurateGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateGroupPriority":
            suggest = "accurate_group_priority"
        elif key == "accurateRules":
            suggest = "accurate_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAnalyseProtectRuleRuleGroupRuleAccurateGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAnalyseProtectRuleRuleGroupRuleAccurateGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAnalyseProtectRuleRuleGroupRuleAccurateGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_group_priority: Optional[int] = None,
                 accurate_rules: Optional[Sequence['outputs.BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRule']] = None,
                 id: Optional[int] = None,
                 logic: Optional[int] = None):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: Rule unique identifier.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[int]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[Sequence['outputs.BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRule']]:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> Optional[int]:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpObj":
            suggest = "http_obj"
        elif key == "objType":
            suggest = "obj_type"
        elif key == "valueString":
            suggest = "value_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_obj: Optional[str] = None,
                 obj_type: Optional[int] = None,
                 opretar: Optional[int] = None,
                 property: Optional[int] = None,
                 value_string: Optional[str] = None):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[str]:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[int]:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> Optional[int]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[str]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> Optional[int]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class BotAnalyseProtectRulesDataResult(dict):
    def __init__(__self__, *,
                 enable_count: int,
                 path: str,
                 rule_groups: Sequence['outputs.BotAnalyseProtectRulesDataRuleGroupResult'],
                 total_count: int):
        """
        :param int enable_count: The number of statistical protection rules enabled under the current domain name.
        :param str path: Protective path.
        :param Sequence['BotAnalyseProtectRulesDataRuleGroupArgs'] rule_groups: Details of the rule group.
        :param int total_count: The total count of query.
        """
        pulumi.set(__self__, "enable_count", enable_count)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "rule_groups", rule_groups)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="enableCount")
    def enable_count(self) -> int:
        """
        The number of statistical protection rules enabled under the current domain name.
        """
        return pulumi.get(self, "enable_count")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Protective path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="ruleGroups")
    def rule_groups(self) -> Sequence['outputs.BotAnalyseProtectRulesDataRuleGroupResult']:
        """
        Details of the rule group.
        """
        return pulumi.get(self, "rule_groups")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class BotAnalyseProtectRulesDataRuleGroupResult(dict):
    def __init__(__self__, *,
                 group: 'outputs.BotAnalyseProtectRulesDataRuleGroupGroupResult',
                 rules: Sequence['outputs.BotAnalyseProtectRulesDataRuleGroupRuleResult']):
        """
        :param 'BotAnalyseProtectRulesDataRuleGroupGroupArgs' group: Rule group information.
        :param Sequence['BotAnalyseProtectRulesDataRuleGroupRuleArgs'] rules: Specific rule information within the rule group.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def group(self) -> 'outputs.BotAnalyseProtectRulesDataRuleGroupGroupResult':
        """
        Rule group information.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.BotAnalyseProtectRulesDataRuleGroupRuleResult']:
        """
        Specific rule information within the rule group.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class BotAnalyseProtectRulesDataRuleGroupGroupResult(dict):
    def __init__(__self__, *,
                 accurate_group_priority: int,
                 accurate_rules: Sequence['outputs.BotAnalyseProtectRulesDataRuleGroupGroupAccurateRuleResult'],
                 id: int,
                 logic: int):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['BotAnalyseProtectRulesDataRuleGroupGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: Rule unique identifier.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.BotAnalyseProtectRulesDataRuleGroupGroupAccurateRuleResult']:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class BotAnalyseProtectRulesDataRuleGroupGroupAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class BotAnalyseProtectRulesDataRuleGroupRuleResult(dict):
    def __init__(__self__, *,
                 accurate_group: 'outputs.BotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupResult',
                 accurate_group_priority: int,
                 action_after_verification: int,
                 action_type: int,
                 effect_time: int,
                 enable: int,
                 exemption_time: int,
                 field: str,
                 host: str,
                 id: int,
                 name: str,
                 pass_ratio: float,
                 path: str,
                 path_threshold: int,
                 rule_priority: int,
                 rule_tag: str,
                 single_proportion: float,
                 single_threshold: int,
                 statistical_duration: int,
                 statistical_type: int,
                 update_time: str):
        """
        :param 'BotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupArgs' accurate_group: Advanced conditions.
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param int action_after_verification: Perform actions after human-machine verification /JS challenges.
        :param int action_type: perform the action.
        :param int effect_time: Limit the duration.
        :param int enable: Whether to enable the rules.
        :param int exemption_time: Exemption time.
        :param str field: statistical object.
        :param str host: Website domain names that require the setting of protection rules.
        :param int id: Rule unique identifier.
        :param str name: The name of the rule.
        :param float pass_ratio: JS challenge/human-machine verification pass rate.
        :param str path: Protective path.
        :param int path_threshold: Threshold of path access times.
        :param int rule_priority: Rule execution priority.
        :param str rule_tag: Unique identification of rules.
        :param float single_proportion: The IP proportion of the same statistical object.
        :param int single_threshold: The maximum number of ips for the same statistical object.
        :param int statistical_duration: The duration of the statistics.
        :param int statistical_type: Statistical content method.
        :param str update_time: Rule update time.
        """
        pulumi.set(__self__, "accurate_group", accurate_group)
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "action_after_verification", action_after_verification)
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "effect_time", effect_time)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "exemption_time", exemption_time)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pass_ratio", pass_ratio)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "path_threshold", path_threshold)
        pulumi.set(__self__, "rule_priority", rule_priority)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "single_proportion", single_proportion)
        pulumi.set(__self__, "single_threshold", single_threshold)
        pulumi.set(__self__, "statistical_duration", statistical_duration)
        pulumi.set(__self__, "statistical_type", statistical_type)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> 'outputs.BotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupResult':
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="actionAfterVerification")
    def action_after_verification(self) -> int:
        """
        Perform actions after human-machine verification /JS challenges.
        """
        return pulumi.get(self, "action_after_verification")

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> int:
        """
        perform the action.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> int:
        """
        Limit the duration.
        """
        return pulumi.get(self, "effect_time")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> int:
        """
        Exemption time.
        """
        return pulumi.get(self, "exemption_time")

    @property
    @pulumi.getter
    def field(self) -> str:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passRatio")
    def pass_ratio(self) -> float:
        """
        JS challenge/human-machine verification pass rate.
        """
        return pulumi.get(self, "pass_ratio")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Protective path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> int:
        """
        Threshold of path access times.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> int:
        """
        Rule execution priority.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Unique identification of rules.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="singleProportion")
    def single_proportion(self) -> float:
        """
        The IP proportion of the same statistical object.
        """
        return pulumi.get(self, "single_proportion")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> int:
        """
        The maximum number of ips for the same statistical object.
        """
        return pulumi.get(self, "single_threshold")

    @property
    @pulumi.getter(name="statisticalDuration")
    def statistical_duration(self) -> int:
        """
        The duration of the statistics.
        """
        return pulumi.get(self, "statistical_duration")

    @property
    @pulumi.getter(name="statisticalType")
    def statistical_type(self) -> int:
        """
        Statistical content method.
        """
        return pulumi.get(self, "statistical_type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class BotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupResult(dict):
    def __init__(__self__, *,
                 accurate_group_priority: int,
                 accurate_rules: Sequence['outputs.BotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult'],
                 id: int,
                 logic: int):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['BotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: Rule unique identifier.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.BotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult']:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class BotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class CcRuleAccurateGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateRules":
            suggest = "accurate_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CcRuleAccurateGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CcRuleAccurateGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CcRuleAccurateGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_rules: Sequence['outputs.CcRuleAccurateGroupAccurateRule'],
                 logic: int):
        """
        :param Sequence['CcRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.CcRuleAccurateGroupAccurateRule']:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class CcRuleAccurateGroupAccurateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpObj":
            suggest = "http_obj"
        elif key == "objType":
            suggest = "obj_type"
        elif key == "valueString":
            suggest = "value_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CcRuleAccurateGroupAccurateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CcRuleAccurateGroupAccurateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CcRuleAccurateGroupAccurateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class CcRuleCronConf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pathThreshold":
            suggest = "path_threshold"
        elif key == "singleThreshold":
            suggest = "single_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CcRuleCronConf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CcRuleCronConf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CcRuleCronConf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 crontab: str,
                 path_threshold: int,
                 single_threshold: int):
        """
        :param str crontab: The weekly cycle days and cycle time periods.
        :param int path_threshold: The threshold of the number of requests for path access.
        :param int single_threshold: The threshold of the number of visits to each statistical object.
        """
        pulumi.set(__self__, "crontab", crontab)
        pulumi.set(__self__, "path_threshold", path_threshold)
        pulumi.set(__self__, "single_threshold", single_threshold)

    @property
    @pulumi.getter
    def crontab(self) -> str:
        """
        The weekly cycle days and cycle time periods.
        """
        return pulumi.get(self, "crontab")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> int:
        """
        The threshold of the number of requests for path access.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> int:
        """
        The threshold of the number of visits to each statistical object.
        """
        return pulumi.get(self, "single_threshold")


@pulumi.output_type
class CcRuleRuleGroup(dict):
    def __init__(__self__, *,
                 group: Optional['outputs.CcRuleRuleGroupGroup'] = None,
                 rules: Optional[Sequence['outputs.CcRuleRuleGroupRule']] = None):
        """
        :param 'CcRuleRuleGroupGroupArgs' group: Rule group information.
        :param Sequence['CcRuleRuleGroupRuleArgs'] rules: Specific rule information within the rule group.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def group(self) -> Optional['outputs.CcRuleRuleGroupGroup']:
        """
        Rule group information.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.CcRuleRuleGroupRule']]:
        """
        Specific rule information within the rule group.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class CcRuleRuleGroupGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateGroupPriority":
            suggest = "accurate_group_priority"
        elif key == "accurateRules":
            suggest = "accurate_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CcRuleRuleGroupGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CcRuleRuleGroupGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CcRuleRuleGroupGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_group_priority: Optional[int] = None,
                 accurate_rules: Optional[Sequence['outputs.CcRuleRuleGroupGroupAccurateRule']] = None,
                 id: Optional[int] = None,
                 logic: Optional[int] = None):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['CcRuleRuleGroupGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: The ID of Rule group.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[int]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[Sequence['outputs.CcRuleRuleGroupGroupAccurateRule']]:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> Optional[int]:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class CcRuleRuleGroupGroupAccurateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpObj":
            suggest = "http_obj"
        elif key == "objType":
            suggest = "obj_type"
        elif key == "valueString":
            suggest = "value_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CcRuleRuleGroupGroupAccurateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CcRuleRuleGroupGroupAccurateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CcRuleRuleGroupGroupAccurateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_obj: Optional[str] = None,
                 obj_type: Optional[int] = None,
                 opretar: Optional[int] = None,
                 property: Optional[int] = None,
                 value_string: Optional[str] = None):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[str]:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[int]:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> Optional[int]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[str]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> Optional[int]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class CcRuleRuleGroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateGroup":
            suggest = "accurate_group"
        elif key == "accurateGroupPriority":
            suggest = "accurate_group_priority"
        elif key == "ccType":
            suggest = "cc_type"
        elif key == "countTime":
            suggest = "count_time"
        elif key == "cronConfs":
            suggest = "cron_confs"
        elif key == "cronEnable":
            suggest = "cron_enable"
        elif key == "effectTime":
            suggest = "effect_time"
        elif key == "exemptionTime":
            suggest = "exemption_time"
        elif key == "pathThreshold":
            suggest = "path_threshold"
        elif key == "rulePriority":
            suggest = "rule_priority"
        elif key == "ruleTag":
            suggest = "rule_tag"
        elif key == "singleThreshold":
            suggest = "single_threshold"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CcRuleRuleGroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CcRuleRuleGroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CcRuleRuleGroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_group: Optional['outputs.CcRuleRuleGroupRuleAccurateGroup'] = None,
                 accurate_group_priority: Optional[int] = None,
                 cc_type: Optional[int] = None,
                 count_time: Optional[int] = None,
                 cron_confs: Optional[Sequence['outputs.CcRuleRuleGroupRuleCronConf']] = None,
                 cron_enable: Optional[int] = None,
                 effect_time: Optional[int] = None,
                 enable: Optional[int] = None,
                 exemption_time: Optional[int] = None,
                 field: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 path_threshold: Optional[int] = None,
                 rule_priority: Optional[int] = None,
                 rule_tag: Optional[str] = None,
                 single_threshold: Optional[int] = None,
                 update_time: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'CcRuleRuleGroupRuleAccurateGroupArgs' accurate_group: Advanced conditions.
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param int cc_type: The actions performed on subsequent requests after meeting the statistical conditions.
        :param int count_time: The statistical period of the strategy.
        :param Sequence['CcRuleRuleGroupRuleCronConfArgs'] cron_confs: Details of the periodic loop configuration.
        :param int cron_enable: Whether to set the cycle to take effect.
        :param int effect_time: Limit the duration, that is, the effective duration of the action.
        :param int enable: Whether to enable the rules.
        :param int exemption_time: Strategy exemption time.
        :param str field: statistical object.
        :param str host: Website domain names that require the setting of protection rules.
        :param int id: The ID of Rule group.
        :param str name: The name of cc rule.
        :param int path_threshold: The threshold of the total number of times the request path is accessed.
        :param int rule_priority: Rule execution priority.
        :param str rule_tag: Rule label, that is, the complete rule ID.
        :param int single_threshold: The threshold of the number of times each statistical object accesses the request path.
        :param str update_time: Rule update time.
        :param str url: The website request path that needs protection.
        """
        if accurate_group is not None:
            pulumi.set(__self__, "accurate_group", accurate_group)
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if cc_type is not None:
            pulumi.set(__self__, "cc_type", cc_type)
        if count_time is not None:
            pulumi.set(__self__, "count_time", count_time)
        if cron_confs is not None:
            pulumi.set(__self__, "cron_confs", cron_confs)
        if cron_enable is not None:
            pulumi.set(__self__, "cron_enable", cron_enable)
        if effect_time is not None:
            pulumi.set(__self__, "effect_time", effect_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if exemption_time is not None:
            pulumi.set(__self__, "exemption_time", exemption_time)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_threshold is not None:
            pulumi.set(__self__, "path_threshold", path_threshold)
        if rule_priority is not None:
            pulumi.set(__self__, "rule_priority", rule_priority)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if single_threshold is not None:
            pulumi.set(__self__, "single_threshold", single_threshold)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> Optional['outputs.CcRuleRuleGroupRuleAccurateGroup']:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[int]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="ccType")
    def cc_type(self) -> Optional[int]:
        """
        The actions performed on subsequent requests after meeting the statistical conditions.
        """
        return pulumi.get(self, "cc_type")

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> Optional[int]:
        """
        The statistical period of the strategy.
        """
        return pulumi.get(self, "count_time")

    @property
    @pulumi.getter(name="cronConfs")
    def cron_confs(self) -> Optional[Sequence['outputs.CcRuleRuleGroupRuleCronConf']]:
        """
        Details of the periodic loop configuration.
        """
        return pulumi.get(self, "cron_confs")

    @property
    @pulumi.getter(name="cronEnable")
    def cron_enable(self) -> Optional[int]:
        """
        Whether to set the cycle to take effect.
        """
        return pulumi.get(self, "cron_enable")

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> Optional[int]:
        """
        Limit the duration, that is, the effective duration of the action.
        """
        return pulumi.get(self, "effect_time")

    @property
    @pulumi.getter
    def enable(self) -> Optional[int]:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> Optional[int]:
        """
        Strategy exemption time.
        """
        return pulumi.get(self, "exemption_time")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of cc rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> Optional[int]:
        """
        The threshold of the total number of times the request path is accessed.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> Optional[int]:
        """
        Rule execution priority.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        Rule label, that is, the complete rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> Optional[int]:
        """
        The threshold of the number of times each statistical object accesses the request path.
        """
        return pulumi.get(self, "single_threshold")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The website request path that needs protection.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class CcRuleRuleGroupRuleAccurateGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateGroupPriority":
            suggest = "accurate_group_priority"
        elif key == "accurateRules":
            suggest = "accurate_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CcRuleRuleGroupRuleAccurateGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CcRuleRuleGroupRuleAccurateGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CcRuleRuleGroupRuleAccurateGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_group_priority: Optional[int] = None,
                 accurate_rules: Optional[Sequence['outputs.CcRuleRuleGroupRuleAccurateGroupAccurateRule']] = None,
                 id: Optional[int] = None,
                 logic: Optional[int] = None):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['CcRuleRuleGroupRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int id: The ID of Rule group.
        :param int logic: The logical relationship of advanced conditions.
        """
        if accurate_group_priority is not None:
            pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> Optional[int]:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[Sequence['outputs.CcRuleRuleGroupRuleAccurateGroupAccurateRule']]:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> Optional[int]:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class CcRuleRuleGroupRuleAccurateGroupAccurateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpObj":
            suggest = "http_obj"
        elif key == "objType":
            suggest = "obj_type"
        elif key == "valueString":
            suggest = "value_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CcRuleRuleGroupRuleAccurateGroupAccurateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CcRuleRuleGroupRuleAccurateGroupAccurateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CcRuleRuleGroupRuleAccurateGroupAccurateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_obj: Optional[str] = None,
                 obj_type: Optional[int] = None,
                 opretar: Optional[int] = None,
                 property: Optional[int] = None,
                 value_string: Optional[str] = None):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[str]:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[int]:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> Optional[int]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[str]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> Optional[int]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class CcRuleRuleGroupRuleCronConf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pathThreshold":
            suggest = "path_threshold"
        elif key == "singleThreshold":
            suggest = "single_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CcRuleRuleGroupRuleCronConf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CcRuleRuleGroupRuleCronConf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CcRuleRuleGroupRuleCronConf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 crontab: Optional[str] = None,
                 path_threshold: Optional[int] = None,
                 single_threshold: Optional[int] = None):
        """
        :param str crontab: The weekly cycle days and cycle time periods.
        :param int path_threshold: The threshold of the number of requests for path access.
        :param int single_threshold: The threshold of the number of visits to each statistical object.
        """
        if crontab is not None:
            pulumi.set(__self__, "crontab", crontab)
        if path_threshold is not None:
            pulumi.set(__self__, "path_threshold", path_threshold)
        if single_threshold is not None:
            pulumi.set(__self__, "single_threshold", single_threshold)

    @property
    @pulumi.getter
    def crontab(self) -> Optional[str]:
        """
        The weekly cycle days and cycle time periods.
        """
        return pulumi.get(self, "crontab")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> Optional[int]:
        """
        The threshold of the number of requests for path access.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> Optional[int]:
        """
        The threshold of the number of visits to each statistical object.
        """
        return pulumi.get(self, "single_threshold")


@pulumi.output_type
class CcRulesDataResult(dict):
    def __init__(__self__, *,
                 enable_count: int,
                 insert_time: str,
                 rule_groups: Sequence['outputs.CcRulesDataRuleGroupResult'],
                 total_count: int,
                 url: str):
        """
        :param int enable_count: The total number of enabled rules within the rule group.
        :param str insert_time: The creation time of the rule group.
        :param Sequence['CcRulesDataRuleGroupArgs'] rule_groups: Details of the rule group.
        :param int total_count: The total count of query.
        :param str url: Fuzzy search by the requested path.
        """
        pulumi.set(__self__, "enable_count", enable_count)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "rule_groups", rule_groups)
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="enableCount")
    def enable_count(self) -> int:
        """
        The total number of enabled rules within the rule group.
        """
        return pulumi.get(self, "enable_count")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> str:
        """
        The creation time of the rule group.
        """
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="ruleGroups")
    def rule_groups(self) -> Sequence['outputs.CcRulesDataRuleGroupResult']:
        """
        Details of the rule group.
        """
        return pulumi.get(self, "rule_groups")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Fuzzy search by the requested path.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class CcRulesDataRuleGroupResult(dict):
    def __init__(__self__, *,
                 group: 'outputs.CcRulesDataRuleGroupGroupResult',
                 rules: Sequence['outputs.CcRulesDataRuleGroupRuleResult']):
        """
        :param 'CcRulesDataRuleGroupGroupArgs' group: Rule group information.
        :param Sequence['CcRulesDataRuleGroupRuleArgs'] rules: Specific rule information within the rule group.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def group(self) -> 'outputs.CcRulesDataRuleGroupGroupResult':
        """
        Rule group information.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.CcRulesDataRuleGroupRuleResult']:
        """
        Specific rule information within the rule group.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class CcRulesDataRuleGroupGroupResult(dict):
    def __init__(__self__, *,
                 accurate_group_priority: int,
                 accurate_rules: Sequence['outputs.CcRulesDataRuleGroupGroupAccurateRuleResult'],
                 id: int,
                 logic: int):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['CcRulesDataRuleGroupGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: The ID of Rule group.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.CcRulesDataRuleGroupGroupAccurateRuleResult']:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class CcRulesDataRuleGroupGroupAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class CcRulesDataRuleGroupRuleResult(dict):
    def __init__(__self__, *,
                 accurate_group: 'outputs.CcRulesDataRuleGroupRuleAccurateGroupResult',
                 accurate_group_priority: int,
                 cc_type: int,
                 count_time: int,
                 cron_confs: Sequence['outputs.CcRulesDataRuleGroupRuleCronConfResult'],
                 cron_enable: int,
                 effect_time: int,
                 enable: int,
                 exemption_time: int,
                 field: str,
                 host: str,
                 id: int,
                 name: str,
                 path_threshold: int,
                 rule_priority: int,
                 rule_tag: str,
                 single_threshold: int,
                 update_time: str,
                 url: str):
        """
        :param 'CcRulesDataRuleGroupRuleAccurateGroupArgs' accurate_group: Advanced conditions.
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param int cc_type: The actions performed on subsequent requests after meeting the statistical conditions.
        :param int count_time: The statistical period of the strategy.
        :param Sequence['CcRulesDataRuleGroupRuleCronConfArgs'] cron_confs: Details of the periodic loop configuration.
        :param int cron_enable: Whether to set the cycle to take effect.
        :param int effect_time: Limit the duration, that is, the effective duration of the action.
        :param int enable: Whether the rule is enabled.
        :param int exemption_time: Strategy exemption time.
        :param str field: statistical object.
        :param str host: Website domain names that require the setting of protection rules.
        :param int id: The ID of Rule group.
        :param str name: The Name of Rule group.
        :param int path_threshold: The threshold of the number of requests for path access.
        :param int rule_priority: Rule execution priority.
        :param str rule_tag: Search precisely according to the rule ID.
        :param int single_threshold: The threshold of the number of visits to each statistical object.
        :param str update_time: Rule update time.
        :param str url: Fuzzy search by the requested path.
        """
        pulumi.set(__self__, "accurate_group", accurate_group)
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "cc_type", cc_type)
        pulumi.set(__self__, "count_time", count_time)
        pulumi.set(__self__, "cron_confs", cron_confs)
        pulumi.set(__self__, "cron_enable", cron_enable)
        pulumi.set(__self__, "effect_time", effect_time)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "exemption_time", exemption_time)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path_threshold", path_threshold)
        pulumi.set(__self__, "rule_priority", rule_priority)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "single_threshold", single_threshold)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> 'outputs.CcRulesDataRuleGroupRuleAccurateGroupResult':
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="ccType")
    def cc_type(self) -> int:
        """
        The actions performed on subsequent requests after meeting the statistical conditions.
        """
        return pulumi.get(self, "cc_type")

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> int:
        """
        The statistical period of the strategy.
        """
        return pulumi.get(self, "count_time")

    @property
    @pulumi.getter(name="cronConfs")
    def cron_confs(self) -> Sequence['outputs.CcRulesDataRuleGroupRuleCronConfResult']:
        """
        Details of the periodic loop configuration.
        """
        return pulumi.get(self, "cron_confs")

    @property
    @pulumi.getter(name="cronEnable")
    def cron_enable(self) -> int:
        """
        Whether to set the cycle to take effect.
        """
        return pulumi.get(self, "cron_enable")

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> int:
        """
        Limit the duration, that is, the effective duration of the action.
        """
        return pulumi.get(self, "effect_time")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether the rule is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> int:
        """
        Strategy exemption time.
        """
        return pulumi.get(self, "exemption_time")

    @property
    @pulumi.getter
    def field(self) -> str:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of Rule group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> int:
        """
        The threshold of the number of requests for path access.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> int:
        """
        Rule execution priority.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Search precisely according to the rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> int:
        """
        The threshold of the number of visits to each statistical object.
        """
        return pulumi.get(self, "single_threshold")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Fuzzy search by the requested path.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class CcRulesDataRuleGroupRuleAccurateGroupResult(dict):
    def __init__(__self__, *,
                 accurate_group_priority: int,
                 accurate_rules: Sequence['outputs.CcRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult'],
                 id: int,
                 logic: int):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['CcRulesDataRuleGroupRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: The ID of Rule group.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.CcRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult']:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class CcRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class CcRulesDataRuleGroupRuleCronConfResult(dict):
    def __init__(__self__, *,
                 crontab: str,
                 path_threshold: int,
                 single_threshold: int):
        """
        :param str crontab: The weekly cycle days and cycle time periods.
        :param int path_threshold: The threshold of the number of requests for path access.
        :param int single_threshold: The threshold of the number of visits to each statistical object.
        """
        pulumi.set(__self__, "crontab", crontab)
        pulumi.set(__self__, "path_threshold", path_threshold)
        pulumi.set(__self__, "single_threshold", single_threshold)

    @property
    @pulumi.getter
    def crontab(self) -> str:
        """
        The weekly cycle days and cycle time periods.
        """
        return pulumi.get(self, "crontab")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> int:
        """
        The threshold of the number of requests for path access.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> int:
        """
        The threshold of the number of visits to each statistical object.
        """
        return pulumi.get(self, "single_threshold")


@pulumi.output_type
class CustomBotAccurate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateRules":
            suggest = "accurate_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomBotAccurate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomBotAccurate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomBotAccurate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_rules: Optional[Sequence['outputs.CustomBotAccurateAccurateRule']] = None,
                 logic: Optional[int] = None):
        """
        :param Sequence['CustomBotAccurateAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int logic: The logical relationship of advanced conditions.
        """
        if accurate_rules is not None:
            pulumi.set(__self__, "accurate_rules", accurate_rules)
        if logic is not None:
            pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Optional[Sequence['outputs.CustomBotAccurateAccurateRule']]:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> Optional[int]:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class CustomBotAccurateAccurateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpObj":
            suggest = "http_obj"
        elif key == "objType":
            suggest = "obj_type"
        elif key == "valueString":
            suggest = "value_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomBotAccurateAccurateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomBotAccurateAccurateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomBotAccurateAccurateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_obj: Optional[str] = None,
                 obj_type: Optional[int] = None,
                 opretar: Optional[int] = None,
                 property: Optional[int] = None,
                 value_string: Optional[str] = None):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        if http_obj is not None:
            pulumi.set(__self__, "http_obj", http_obj)
        if obj_type is not None:
            pulumi.set(__self__, "obj_type", obj_type)
        if opretar is not None:
            pulumi.set(__self__, "opretar", opretar)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if value_string is not None:
            pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> Optional[str]:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> Optional[int]:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> Optional[int]:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> Optional[str]:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> Optional[int]:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class CustomBotsDataResult(dict):
    def __init__(__self__, *,
                 accurate: 'outputs.CustomBotsDataAccurateResult',
                 action: str,
                 advanced: int,
                 bot_type: str,
                 description: str,
                 enable: int,
                 id: int,
                 rule_tag: str,
                 update_time: str):
        """
        :param 'CustomBotsDataAccurateArgs' accurate: Advanced conditions.
        :param str action: The execution action of the Bot.
        :param int advanced: Whether to set advanced conditions.
        :param str bot_type: bot name.
        :param str description: The description of bot.
        :param int enable: Whether to enable bot.
        :param int id: The actual count bits of the rule unique identifier (corresponding to the RuleTag).
        :param str rule_tag: Rule unique identifier.
        :param str update_time: The update time.
        """
        pulumi.set(__self__, "accurate", accurate)
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "advanced", advanced)
        pulumi.set(__self__, "bot_type", bot_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def accurate(self) -> 'outputs.CustomBotsDataAccurateResult':
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate")

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The execution action of the Bot.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def advanced(self) -> int:
        """
        Whether to set advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="botType")
    def bot_type(self) -> str:
        """
        bot name.
        """
        return pulumi.get(self, "bot_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of bot.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether to enable bot.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The actual count bits of the rule unique identifier (corresponding to the RuleTag).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class CustomBotsDataAccurateResult(dict):
    def __init__(__self__, *,
                 accurate_rules: Sequence['outputs.CustomBotsDataAccurateAccurateRuleResult'],
                 logic: int):
        """
        :param Sequence['CustomBotsDataAccurateAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.CustomBotsDataAccurateAccurateRuleResult']:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class CustomBotsDataAccurateAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class CustomPageAccurate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accurateRules":
            suggest = "accurate_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomPageAccurate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomPageAccurate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomPageAccurate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accurate_rules: Sequence['outputs.CustomPageAccurateAccurateRule'],
                 logic: int):
        """
        :param Sequence['CustomPageAccurateAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.CustomPageAccurateAccurateRule']:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class CustomPageAccurateAccurateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpObj":
            suggest = "http_obj"
        elif key == "objType":
            suggest = "obj_type"
        elif key == "valueString":
            suggest = "value_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomPageAccurateAccurateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomPageAccurateAccurateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomPageAccurateAccurateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class CustomPagesDataResult(dict):
    def __init__(__self__, *,
                 accurate: 'outputs.CustomPagesDataAccurateResult',
                 advanced: int,
                 body: str,
                 client_ip: str,
                 code: str,
                 content_type: str,
                 description: str,
                 enable: int,
                 group_id: int,
                 header: str,
                 host: str,
                 id: int,
                 isolation_id: str,
                 name: str,
                 page_mode: int,
                 policy: int,
                 redirect_url: str,
                 rule_tag: str,
                 update_time: str,
                 url: str):
        """
        :param 'CustomPagesDataAccurateArgs' accurate: Advanced conditions.
        :param int advanced: Whether to configure advanced conditions.
        :param str body: The layout content of the response page.
        :param str client_ip: Fill in ALL, which means this rule will take effect on all IP addresses.
        :param str code: Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        :param str content_type: The layout template of the response page. Required if PageMode=0 or 1.
        :param str description: Rule description.
        :param int enable: Whether to enable the rule.
        :param int group_id: The ID of the advanced conditional rule group.
        :param str header: Request header information.
        :param str host: The domain names that need to be viewed.
        :param int id: The ID of rule.
        :param str isolation_id: The ID of Region.
        :param str name: Rule name.
        :param int page_mode: The layout template of the response page.
        :param int policy: Action to be taken on requests that match the rule.
        :param str redirect_url: The path where users should be redirected.
        :param str rule_tag: Unique identification of the rules.
        :param str update_time: Rule update time.
        :param str url: Match the path.
        """
        pulumi.set(__self__, "accurate", accurate)
        pulumi.set(__self__, "advanced", advanced)
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "isolation_id", isolation_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "page_mode", page_mode)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def accurate(self) -> 'outputs.CustomPagesDataAccurateResult':
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate")

    @property
    @pulumi.getter
    def advanced(self) -> int:
        """
        Whether to configure advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        The layout content of the response page.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> str:
        """
        Fill in ALL, which means this rule will take effect on all IP addresses.
        """
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The layout template of the response page. Required if PageMode=0 or 1.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether to enable the rule.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        """
        The ID of the advanced conditional rule group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Request header information.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The domain names that need to be viewed.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isolationId")
    def isolation_id(self) -> str:
        """
        The ID of Region.
        """
        return pulumi.get(self, "isolation_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pageMode")
    def page_mode(self) -> int:
        """
        The layout template of the response page.
        """
        return pulumi.get(self, "page_mode")

    @property
    @pulumi.getter
    def policy(self) -> int:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        The path where users should be redirected.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Unique identification of the rules.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Match the path.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class CustomPagesDataAccurateResult(dict):
    def __init__(__self__, *,
                 accurate_rules: Sequence['outputs.CustomPagesDataAccurateAccurateRuleResult'],
                 logic: int):
        """
        :param Sequence['CustomPagesDataAccurateAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.CustomPagesDataAccurateAccurateRuleResult']:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class CustomPagesDataAccurateAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class DomainsDataResult(dict):
    def __init__(__self__, *,
                 access_mode: int,
                 advanced_defense_ip: str,
                 api_enable: int,
                 attack_status: int,
                 auto_cc_enable: int,
                 backend_groups: Sequence['outputs.DomainsDataBackendGroupResult'],
                 black_ip_enable: int,
                 black_lct_enable: int,
                 cc_enable: int,
                 certificate_id: int,
                 certificate_name: str,
                 client_ip_location: int,
                 client_max_body_size: int,
                 cloud_access_configs: Sequence['outputs.DomainsDataCloudAccessConfigResult'],
                 cname: str,
                 custom_bot_enable: int,
                 custom_headers: Sequence[str],
                 custom_rsp_enable: int,
                 defence_mode: int,
                 dlp_enable: int,
                 domain: str,
                 enable_http2: int,
                 enable_ipv6: int,
                 keep_alive_request: int,
                 keep_alive_time_out: int,
                 lb_algorithm: str,
                 protocol_follow: int,
                 protocol_ports: 'outputs.DomainsDataProtocolPortsResult',
                 protocols: str,
                 proxy_config: int,
                 proxy_connect_time_out: int,
                 proxy_keep_alive: int,
                 proxy_keep_alive_time_out: int,
                 proxy_read_time_out: int,
                 proxy_retry: int,
                 proxy_write_time_out: int,
                 public_real_server: int,
                 region: str,
                 server_ips: str,
                 src_ips: str,
                 ssl_ciphers: Sequence[str],
                 ssl_protocols: Sequence[str],
                 status: int,
                 system_bot_enable: int,
                 tamper_proof_enable: int,
                 tls_enable: int,
                 update_time: str,
                 vpc_id: str,
                 waf_enable: int,
                 waf_white_req_enable: int,
                 white_enable: int,
                 white_field_enable: int):
        """
        :param int access_mode: Access mode.
        :param str advanced_defense_ip: High-defense instance IP.
        :param int api_enable: Whether the API protection policy has been enabled.
        :param int attack_status: The status of the attack.
        :param int auto_cc_enable: Whether to enable the intelligent CC protection strategy.
        :param Sequence['DomainsDataBackendGroupArgs'] backend_groups: The configuration of source station.
        :param int black_ip_enable: Whether the blacklist strategy has been enabled.
        :param int black_lct_enable: Whether the regional ban strategy has been activated.
        :param int cc_enable: Whether the cc protection strategy has been enabled.
        :param int certificate_id: When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        :param str certificate_name: The name of the certificate.
        :param int client_ip_location: The method of obtaining the client IP.
        :param int client_max_body_size: The client requests the maximum value of body.
        :param Sequence['DomainsDataCloudAccessConfigArgs'] cloud_access_configs: Access port information.
        :param str cname: The CNAME value generated by the WAF instance.
        :param int custom_bot_enable: Whether the custom Bot classification strategy has been enabled.
        :param Sequence[str] custom_headers: Custom Header.
        :param int custom_rsp_enable: Whether the custom response interception strategy has been enabled.
        :param int defence_mode: The protection mode of the instance.
        :param int dlp_enable: Whether to activate the strategy for preventing the leakage of sensitive information.
        :param str domain: The domain name of the protected website that needs to be queried.
        :param int enable_http2: Whether to enable HTTP 2.0.
        :param int enable_ipv6: Whether it supports protecting IPv6 requests.
        :param int keep_alive_request: The number of long connection multiplexes.
        :param int keep_alive_time_out: Long connection retention time.
        :param str lb_algorithm: The types of load balancing algorithms.
        :param int protocol_follow: Whether to enable protocol following.
        :param 'DomainsDataProtocolPortsArgs' protocol_ports: Access port information.
        :param str protocols: Access protocol types.
        :param int proxy_config: Whether to enable proxy configuration.
        :param int proxy_connect_time_out: The timeout period for establishing a connection between the WAF and the backend server.
        :param int proxy_keep_alive: The number of reusable WAF origin long connections.
        :param int proxy_keep_alive_time_out: Idle long connection timeout period.
        :param int proxy_read_time_out: The timeout period during which WAF reads the response from the backend server.
        :param int proxy_retry: The number of retries for WAF back to source.
        :param int proxy_write_time_out: The timeout period during which the WAF transmits the request to the backend server.
        :param int public_real_server: Connect to the source return mode.
        :param str region: domain region that need to be protected by WAF.
        :param str server_ips: The IP of the WAF protection instance.
        :param str src_ips: WAF source IP.
        :param Sequence[str] ssl_ciphers: Encryption kit.
        :param Sequence[str] ssl_protocols: TLS protocol version.
        :param int status: The status of access.
        :param int system_bot_enable: Whether the managed Bot classification strategy has been enabled.
        :param int tamper_proof_enable: Whether to enable the page tamper proof policy.
        :param int tls_enable: Whether to enable the log service.
        :param str update_time: The update time.
        :param str vpc_id: The ID of vpc.
        :param int waf_enable: Whether the vulnerability protection strategy has been enabled.
        :param int waf_white_req_enable: Whether to enable the whitening strategy for vulnerability protection requests.
        :param int white_enable: Whether the whitelist strategy has been enabled.
        :param int white_field_enable: Whether to enable the whitening strategy for vulnerability protection fields.
        """
        pulumi.set(__self__, "access_mode", access_mode)
        pulumi.set(__self__, "advanced_defense_ip", advanced_defense_ip)
        pulumi.set(__self__, "api_enable", api_enable)
        pulumi.set(__self__, "attack_status", attack_status)
        pulumi.set(__self__, "auto_cc_enable", auto_cc_enable)
        pulumi.set(__self__, "backend_groups", backend_groups)
        pulumi.set(__self__, "black_ip_enable", black_ip_enable)
        pulumi.set(__self__, "black_lct_enable", black_lct_enable)
        pulumi.set(__self__, "cc_enable", cc_enable)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "client_ip_location", client_ip_location)
        pulumi.set(__self__, "client_max_body_size", client_max_body_size)
        pulumi.set(__self__, "cloud_access_configs", cloud_access_configs)
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "custom_bot_enable", custom_bot_enable)
        pulumi.set(__self__, "custom_headers", custom_headers)
        pulumi.set(__self__, "custom_rsp_enable", custom_rsp_enable)
        pulumi.set(__self__, "defence_mode", defence_mode)
        pulumi.set(__self__, "dlp_enable", dlp_enable)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "enable_http2", enable_http2)
        pulumi.set(__self__, "enable_ipv6", enable_ipv6)
        pulumi.set(__self__, "keep_alive_request", keep_alive_request)
        pulumi.set(__self__, "keep_alive_time_out", keep_alive_time_out)
        pulumi.set(__self__, "lb_algorithm", lb_algorithm)
        pulumi.set(__self__, "protocol_follow", protocol_follow)
        pulumi.set(__self__, "protocol_ports", protocol_ports)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "proxy_config", proxy_config)
        pulumi.set(__self__, "proxy_connect_time_out", proxy_connect_time_out)
        pulumi.set(__self__, "proxy_keep_alive", proxy_keep_alive)
        pulumi.set(__self__, "proxy_keep_alive_time_out", proxy_keep_alive_time_out)
        pulumi.set(__self__, "proxy_read_time_out", proxy_read_time_out)
        pulumi.set(__self__, "proxy_retry", proxy_retry)
        pulumi.set(__self__, "proxy_write_time_out", proxy_write_time_out)
        pulumi.set(__self__, "public_real_server", public_real_server)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "server_ips", server_ips)
        pulumi.set(__self__, "src_ips", src_ips)
        pulumi.set(__self__, "ssl_ciphers", ssl_ciphers)
        pulumi.set(__self__, "ssl_protocols", ssl_protocols)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_bot_enable", system_bot_enable)
        pulumi.set(__self__, "tamper_proof_enable", tamper_proof_enable)
        pulumi.set(__self__, "tls_enable", tls_enable)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "waf_enable", waf_enable)
        pulumi.set(__self__, "waf_white_req_enable", waf_white_req_enable)
        pulumi.set(__self__, "white_enable", white_enable)
        pulumi.set(__self__, "white_field_enable", white_field_enable)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> int:
        """
        Access mode.
        """
        return pulumi.get(self, "access_mode")

    @property
    @pulumi.getter(name="advancedDefenseIp")
    def advanced_defense_ip(self) -> str:
        """
        High-defense instance IP.
        """
        return pulumi.get(self, "advanced_defense_ip")

    @property
    @pulumi.getter(name="apiEnable")
    def api_enable(self) -> int:
        """
        Whether the API protection policy has been enabled.
        """
        return pulumi.get(self, "api_enable")

    @property
    @pulumi.getter(name="attackStatus")
    def attack_status(self) -> int:
        """
        The status of the attack.
        """
        return pulumi.get(self, "attack_status")

    @property
    @pulumi.getter(name="autoCcEnable")
    def auto_cc_enable(self) -> int:
        """
        Whether to enable the intelligent CC protection strategy.
        """
        return pulumi.get(self, "auto_cc_enable")

    @property
    @pulumi.getter(name="backendGroups")
    def backend_groups(self) -> Sequence['outputs.DomainsDataBackendGroupResult']:
        """
        The configuration of source station.
        """
        return pulumi.get(self, "backend_groups")

    @property
    @pulumi.getter(name="blackIpEnable")
    def black_ip_enable(self) -> int:
        """
        Whether the blacklist strategy has been enabled.
        """
        return pulumi.get(self, "black_ip_enable")

    @property
    @pulumi.getter(name="blackLctEnable")
    def black_lct_enable(self) -> int:
        """
        Whether the regional ban strategy has been activated.
        """
        return pulumi.get(self, "black_lct_enable")

    @property
    @pulumi.getter(name="ccEnable")
    def cc_enable(self) -> int:
        """
        Whether the cc protection strategy has been enabled.
        """
        return pulumi.get(self, "cc_enable")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> int:
        """
        When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> str:
        """
        The name of the certificate.
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter(name="clientIpLocation")
    def client_ip_location(self) -> int:
        """
        The method of obtaining the client IP.
        """
        return pulumi.get(self, "client_ip_location")

    @property
    @pulumi.getter(name="clientMaxBodySize")
    def client_max_body_size(self) -> int:
        """
        The client requests the maximum value of body.
        """
        return pulumi.get(self, "client_max_body_size")

    @property
    @pulumi.getter(name="cloudAccessConfigs")
    def cloud_access_configs(self) -> Sequence['outputs.DomainsDataCloudAccessConfigResult']:
        """
        Access port information.
        """
        return pulumi.get(self, "cloud_access_configs")

    @property
    @pulumi.getter
    def cname(self) -> str:
        """
        The CNAME value generated by the WAF instance.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter(name="customBotEnable")
    def custom_bot_enable(self) -> int:
        """
        Whether the custom Bot classification strategy has been enabled.
        """
        return pulumi.get(self, "custom_bot_enable")

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Sequence[str]:
        """
        Custom Header.
        """
        return pulumi.get(self, "custom_headers")

    @property
    @pulumi.getter(name="customRspEnable")
    def custom_rsp_enable(self) -> int:
        """
        Whether the custom response interception strategy has been enabled.
        """
        return pulumi.get(self, "custom_rsp_enable")

    @property
    @pulumi.getter(name="defenceMode")
    def defence_mode(self) -> int:
        """
        The protection mode of the instance.
        """
        return pulumi.get(self, "defence_mode")

    @property
    @pulumi.getter(name="dlpEnable")
    def dlp_enable(self) -> int:
        """
        Whether to activate the strategy for preventing the leakage of sensitive information.
        """
        return pulumi.get(self, "dlp_enable")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain name of the protected website that needs to be queried.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="enableHttp2")
    def enable_http2(self) -> int:
        """
        Whether to enable HTTP 2.0.
        """
        return pulumi.get(self, "enable_http2")

    @property
    @pulumi.getter(name="enableIpv6")
    def enable_ipv6(self) -> int:
        """
        Whether it supports protecting IPv6 requests.
        """
        return pulumi.get(self, "enable_ipv6")

    @property
    @pulumi.getter(name="keepAliveRequest")
    def keep_alive_request(self) -> int:
        """
        The number of long connection multiplexes.
        """
        return pulumi.get(self, "keep_alive_request")

    @property
    @pulumi.getter(name="keepAliveTimeOut")
    def keep_alive_time_out(self) -> int:
        """
        Long connection retention time.
        """
        return pulumi.get(self, "keep_alive_time_out")

    @property
    @pulumi.getter(name="lbAlgorithm")
    def lb_algorithm(self) -> str:
        """
        The types of load balancing algorithms.
        """
        return pulumi.get(self, "lb_algorithm")

    @property
    @pulumi.getter(name="protocolFollow")
    def protocol_follow(self) -> int:
        """
        Whether to enable protocol following.
        """
        return pulumi.get(self, "protocol_follow")

    @property
    @pulumi.getter(name="protocolPorts")
    def protocol_ports(self) -> 'outputs.DomainsDataProtocolPortsResult':
        """
        Access port information.
        """
        return pulumi.get(self, "protocol_ports")

    @property
    @pulumi.getter
    def protocols(self) -> str:
        """
        Access protocol types.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="proxyConfig")
    def proxy_config(self) -> int:
        """
        Whether to enable proxy configuration.
        """
        return pulumi.get(self, "proxy_config")

    @property
    @pulumi.getter(name="proxyConnectTimeOut")
    def proxy_connect_time_out(self) -> int:
        """
        The timeout period for establishing a connection between the WAF and the backend server.
        """
        return pulumi.get(self, "proxy_connect_time_out")

    @property
    @pulumi.getter(name="proxyKeepAlive")
    def proxy_keep_alive(self) -> int:
        """
        The number of reusable WAF origin long connections.
        """
        return pulumi.get(self, "proxy_keep_alive")

    @property
    @pulumi.getter(name="proxyKeepAliveTimeOut")
    def proxy_keep_alive_time_out(self) -> int:
        """
        Idle long connection timeout period.
        """
        return pulumi.get(self, "proxy_keep_alive_time_out")

    @property
    @pulumi.getter(name="proxyReadTimeOut")
    def proxy_read_time_out(self) -> int:
        """
        The timeout period during which WAF reads the response from the backend server.
        """
        return pulumi.get(self, "proxy_read_time_out")

    @property
    @pulumi.getter(name="proxyRetry")
    def proxy_retry(self) -> int:
        """
        The number of retries for WAF back to source.
        """
        return pulumi.get(self, "proxy_retry")

    @property
    @pulumi.getter(name="proxyWriteTimeOut")
    def proxy_write_time_out(self) -> int:
        """
        The timeout period during which the WAF transmits the request to the backend server.
        """
        return pulumi.get(self, "proxy_write_time_out")

    @property
    @pulumi.getter(name="publicRealServer")
    def public_real_server(self) -> int:
        """
        Connect to the source return mode.
        """
        return pulumi.get(self, "public_real_server")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        domain region that need to be protected by WAF.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serverIps")
    def server_ips(self) -> str:
        """
        The IP of the WAF protection instance.
        """
        return pulumi.get(self, "server_ips")

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> str:
        """
        WAF source IP.
        """
        return pulumi.get(self, "src_ips")

    @property
    @pulumi.getter(name="sslCiphers")
    def ssl_ciphers(self) -> Sequence[str]:
        """
        Encryption kit.
        """
        return pulumi.get(self, "ssl_ciphers")

    @property
    @pulumi.getter(name="sslProtocols")
    def ssl_protocols(self) -> Sequence[str]:
        """
        TLS protocol version.
        """
        return pulumi.get(self, "ssl_protocols")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        The status of access.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemBotEnable")
    def system_bot_enable(self) -> int:
        """
        Whether the managed Bot classification strategy has been enabled.
        """
        return pulumi.get(self, "system_bot_enable")

    @property
    @pulumi.getter(name="tamperProofEnable")
    def tamper_proof_enable(self) -> int:
        """
        Whether to enable the page tamper proof policy.
        """
        return pulumi.get(self, "tamper_proof_enable")

    @property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> int:
        """
        Whether to enable the log service.
        """
        return pulumi.get(self, "tls_enable")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="wafEnable")
    def waf_enable(self) -> int:
        """
        Whether the vulnerability protection strategy has been enabled.
        """
        return pulumi.get(self, "waf_enable")

    @property
    @pulumi.getter(name="wafWhiteReqEnable")
    def waf_white_req_enable(self) -> int:
        """
        Whether to enable the whitening strategy for vulnerability protection requests.
        """
        return pulumi.get(self, "waf_white_req_enable")

    @property
    @pulumi.getter(name="whiteEnable")
    def white_enable(self) -> int:
        """
        Whether the whitelist strategy has been enabled.
        """
        return pulumi.get(self, "white_enable")

    @property
    @pulumi.getter(name="whiteFieldEnable")
    def white_field_enable(self) -> int:
        """
        Whether to enable the whitening strategy for vulnerability protection fields.
        """
        return pulumi.get(self, "white_field_enable")


@pulumi.output_type
class DomainsDataBackendGroupResult(dict):
    def __init__(__self__, *,
                 access_ports: Sequence[int],
                 backends: Sequence['outputs.DomainsDataBackendGroupBackendResult'],
                 name: str):
        """
        :param Sequence[int] access_ports: Access port number.
        :param Sequence['DomainsDataBackendGroupBackendArgs'] backends: The details of the source station group.
        :param str name: Source station group name. Works only on modified scenes.
        """
        pulumi.set(__self__, "access_ports", access_ports)
        pulumi.set(__self__, "backends", backends)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accessPorts")
    def access_ports(self) -> Sequence[int]:
        """
        Access port number.
        """
        return pulumi.get(self, "access_ports")

    @property
    @pulumi.getter
    def backends(self) -> Sequence['outputs.DomainsDataBackendGroupBackendResult']:
        """
        The details of the source station group.
        """
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Source station group name. Works only on modified scenes.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DomainsDataBackendGroupBackendResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int,
                 protocol: str,
                 weight: int):
        """
        :param str ip: Source station IP address.
        :param int port: The port number corresponding to the listener.
        :param str protocol: The type of Listener protocol.
        :param int weight: The weight of the source station rules.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Source station IP address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number corresponding to the listener.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The type of Listener protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        The weight of the source station rules.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class DomainsDataCloudAccessConfigResult(dict):
    def __init__(__self__, *,
                 access_protocol: str,
                 instance_id: str,
                 listener_id: str,
                 port: str,
                 protocol: str):
        """
        :param str access_protocol: The access protocol needs to be consistent with the monitoring protocol.
        :param str instance_id: The ID of instance.
        :param str listener_id: The ID of listener.
        :param str port: The port number corresponding to the listener.
        :param str protocol: The type of Listener protocol.
        """
        pulumi.set(__self__, "access_protocol", access_protocol)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="accessProtocol")
    def access_protocol(self) -> str:
        """
        The access protocol needs to be consistent with the monitoring protocol.
        """
        return pulumi.get(self, "access_protocol")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        The ID of listener.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        The port number corresponding to the listener.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The type of Listener protocol.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class DomainsDataProtocolPortsResult(dict):
    def __init__(__self__, *,
                 http: Sequence[int],
                 https: Sequence[int]):
        """
        :param Sequence[int] http: Ports supported by the HTTP protocol.
        :param Sequence[int] https: Ports supported by the HTTPs protocol.
        """
        pulumi.set(__self__, "http", http)
        pulumi.set(__self__, "https", https)

    @property
    @pulumi.getter
    def http(self) -> Sequence[int]:
        """
        Ports supported by the HTTP protocol.
        """
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def https(self) -> Sequence[int]:
        """
        Ports supported by the HTTPs protocol.
        """
        return pulumi.get(self, "https")


@pulumi.output_type
class HostGroupRelatedRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"
        elif key == "ruleTag":
            suggest = "rule_tag"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostGroupRelatedRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostGroupRelatedRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostGroupRelatedRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_name: Optional[str] = None,
                 rule_tag: Optional[str] = None,
                 rule_type: Optional[str] = None):
        """
        :param str rule_name: The name of the rule.
        :param str rule_tag: The ID of the rule.
        :param str rule_type: The type of the rule.
        """
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        """
        The type of the rule.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class HostGroupsHostGroupListResult(dict):
    def __init__(__self__, *,
                 description: str,
                 host_count: int,
                 host_group_id: int,
                 host_lists: Sequence[str],
                 name: str,
                 related_rules: Sequence['outputs.HostGroupsHostGroupListRelatedRuleResult'],
                 update_time: str):
        """
        :param str description: Domain name group description.
        :param int host_count: The number of domain names contained in the domain name group.
        :param int host_group_id: The ID of the domain name group.
        :param Sequence[str] host_lists: Domain names that need to be added to this domain name group.
        :param str name: The name of the domain name group.
        :param Sequence['HostGroupsHostGroupListRelatedRuleArgs'] related_rules: The list of associated rules.
        :param str update_time: Domain name group update time.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "host_count", host_count)
        pulumi.set(__self__, "host_group_id", host_group_id)
        pulumi.set(__self__, "host_lists", host_lists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "related_rules", related_rules)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Domain name group description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hostCount")
    def host_count(self) -> int:
        """
        The number of domain names contained in the domain name group.
        """
        return pulumi.get(self, "host_count")

    @property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> int:
        """
        The ID of the domain name group.
        """
        return pulumi.get(self, "host_group_id")

    @property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> Sequence[str]:
        """
        Domain names that need to be added to this domain name group.
        """
        return pulumi.get(self, "host_lists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the domain name group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="relatedRules")
    def related_rules(self) -> Sequence['outputs.HostGroupsHostGroupListRelatedRuleResult']:
        """
        The list of associated rules.
        """
        return pulumi.get(self, "related_rules")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Domain name group update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class HostGroupsHostGroupListRelatedRuleResult(dict):
    def __init__(__self__, *,
                 rule_name: str,
                 rule_tag: str,
                 rule_type: str):
        """
        :param str rule_name: The name of the rule.
        :param str rule_tag: The rule ID associated with domain name groups.
        :param str rule_type: The type of the rule.
        """
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        The rule ID associated with domain name groups.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        The type of the rule.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class IpGroupRelatedRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"
        elif key == "ruleTag":
            suggest = "rule_tag"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpGroupRelatedRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpGroupRelatedRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpGroupRelatedRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[str] = None,
                 rule_name: Optional[str] = None,
                 rule_tag: Optional[str] = None,
                 rule_type: Optional[str] = None):
        """
        :param str host: The information of the protected domain names associated with the rules.
        :param str rule_name: The name of the rule.
        :param str rule_tag: The ID of the rule.
        :param str rule_type: The type of the rule.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The information of the protected domain names associated with the rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        The ID of the rule.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        """
        The type of the rule.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class IpGroupsIpGroupListResult(dict):
    def __init__(__self__, *,
                 ip_count: int,
                 ip_group_id: int,
                 ip_lists: Sequence[str],
                 name: str,
                 related_rules: Sequence['outputs.IpGroupsIpGroupListRelatedRuleResult'],
                 update_time: str):
        """
        :param int ip_count: The number of IP addresses within the address group.
        :param int ip_group_id: The ID of the ip group.
        :param Sequence[str] ip_lists: The IP address to be added.
        :param str name: The name of the ip group.
        :param Sequence['IpGroupsIpGroupListRelatedRuleArgs'] related_rules: The list of associated rules.
        :param str update_time: ip group update time.
        """
        pulumi.set(__self__, "ip_count", ip_count)
        pulumi.set(__self__, "ip_group_id", ip_group_id)
        pulumi.set(__self__, "ip_lists", ip_lists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "related_rules", related_rules)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="ipCount")
    def ip_count(self) -> int:
        """
        The number of IP addresses within the address group.
        """
        return pulumi.get(self, "ip_count")

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> int:
        """
        The ID of the ip group.
        """
        return pulumi.get(self, "ip_group_id")

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Sequence[str]:
        """
        The IP address to be added.
        """
        return pulumi.get(self, "ip_lists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ip group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="relatedRules")
    def related_rules(self) -> Sequence['outputs.IpGroupsIpGroupListRelatedRuleResult']:
        """
        The list of associated rules.
        """
        return pulumi.get(self, "related_rules")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        ip group update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class IpGroupsIpGroupListRelatedRuleResult(dict):
    def __init__(__self__, *,
                 host: str,
                 rule_name: str,
                 rule_tag: str,
                 rule_type: str):
        """
        :param str host: The information of the protected domain names associated with the rules.
        :param str rule_name: The name of the rule.
        :param str rule_tag: Query the association rule ID.
        :param str rule_type: The type of the rule.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The information of the protected domain names associated with the rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Query the association rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        The type of the rule.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class ProhibitionsIpAggGroupResult(dict):
    def __init__(__self__, *,
                 drop_count: int,
                 ip: str,
                 reason: 'outputs.ProhibitionsIpAggGroupReasonResult',
                 rule_name: str,
                 rule_tag: str,
                 status: int,
                 update_time: str):
        """
        :param int drop_count: The number of attacks on the source IP of this attack.
        :param str ip: Attack source IP.
        :param 'ProhibitionsIpAggGroupReasonArgs' reason: Attack type filtering.
        :param str rule_name: Name of the ban rule.
        :param str rule_tag: Ban rule ID.
        :param int status: IP banned status.
        :param str update_time: Status update time.
        """
        pulumi.set(__self__, "drop_count", drop_count)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="dropCount")
    def drop_count(self) -> int:
        """
        The number of attacks on the source IP of this attack.
        """
        return pulumi.get(self, "drop_count")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Attack source IP.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def reason(self) -> 'outputs.ProhibitionsIpAggGroupReasonResult':
        """
        Attack type filtering.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Name of the ban rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Ban rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        IP banned status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Status update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class ProhibitionsIpAggGroupReasonResult(dict):
    def __init__(__self__, *,
                 black: int,
                 bot: int,
                 geo_black: int,
                 http_flood: int,
                 param_abnormal: int,
                 route_abnormal: int,
                 sensitive_info: int,
                 web_vulnerability: int):
        """
        :param int black: The number of visits to the blacklist.
        :param int bot: The number of Bot attacks.
        :param int geo_black: The number of geographical location access control.
        :param int http_flood: The number of CC attacks.
        :param int param_abnormal: The number of API parameter exceptions.
        :param int route_abnormal: The number of API routing exceptions.
        :param int sensitive_info: The number of times sensitive information is leaked.
        :param int web_vulnerability: The number of Web vulnerability attacks.
        """
        pulumi.set(__self__, "black", black)
        pulumi.set(__self__, "bot", bot)
        pulumi.set(__self__, "geo_black", geo_black)
        pulumi.set(__self__, "http_flood", http_flood)
        pulumi.set(__self__, "param_abnormal", param_abnormal)
        pulumi.set(__self__, "route_abnormal", route_abnormal)
        pulumi.set(__self__, "sensitive_info", sensitive_info)
        pulumi.set(__self__, "web_vulnerability", web_vulnerability)

    @property
    @pulumi.getter
    def black(self) -> int:
        """
        The number of visits to the blacklist.
        """
        return pulumi.get(self, "black")

    @property
    @pulumi.getter
    def bot(self) -> int:
        """
        The number of Bot attacks.
        """
        return pulumi.get(self, "bot")

    @property
    @pulumi.getter(name="geoBlack")
    def geo_black(self) -> int:
        """
        The number of geographical location access control.
        """
        return pulumi.get(self, "geo_black")

    @property
    @pulumi.getter(name="httpFlood")
    def http_flood(self) -> int:
        """
        The number of CC attacks.
        """
        return pulumi.get(self, "http_flood")

    @property
    @pulumi.getter(name="paramAbnormal")
    def param_abnormal(self) -> int:
        """
        The number of API parameter exceptions.
        """
        return pulumi.get(self, "param_abnormal")

    @property
    @pulumi.getter(name="routeAbnormal")
    def route_abnormal(self) -> int:
        """
        The number of API routing exceptions.
        """
        return pulumi.get(self, "route_abnormal")

    @property
    @pulumi.getter(name="sensitiveInfo")
    def sensitive_info(self) -> int:
        """
        The number of times sensitive information is leaked.
        """
        return pulumi.get(self, "sensitive_info")

    @property
    @pulumi.getter(name="webVulnerability")
    def web_vulnerability(self) -> int:
        """
        The number of Web vulnerability attacks.
        """
        return pulumi.get(self, "web_vulnerability")


@pulumi.output_type
class ServiceCertificatesDataResult(dict):
    def __init__(__self__, *,
                 applicable_domains: str,
                 description: str,
                 expire_time: str,
                 id: int,
                 insert_time: str,
                 name: str):
        """
        :param str applicable_domains: Associate the domain name of this certificate.
        :param str description: The description of the certificate.
        :param str expire_time: The expiration time of the certificate.
        :param int id: The ID of the certificate.
        :param str insert_time: The time when the certificate was added.
        :param str name: The name of the certificate.
        """
        pulumi.set(__self__, "applicable_domains", applicable_domains)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="applicableDomains")
    def applicable_domains(self) -> str:
        """
        Associate the domain name of this certificate.
        """
        return pulumi.get(self, "applicable_domains")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the certificate.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The expiration time of the certificate.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the certificate.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> str:
        """
        The time when the certificate was added.
        """
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the certificate.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SystemBotsDataResult(dict):
    def __init__(__self__, *,
                 action: str,
                 bot_type: str,
                 description: str,
                 enable: int,
                 rule_tag: str):
        """
        :param str action: The execution action of the Bot.
        :param str bot_type: The name of Bot.
        :param str description: The description of Bot.
        :param int enable: Whether to enable Bot.
        :param str rule_tag: The rule ID corresponding to Bot.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bot_type", bot_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "rule_tag", rule_tag)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The execution action of the Bot.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="botType")
    def bot_type(self) -> str:
        """
        The name of Bot.
        """
        return pulumi.get(self, "bot_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of Bot.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether to enable Bot.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        The rule ID corresponding to Bot.
        """
        return pulumi.get(self, "rule_tag")


@pulumi.output_type
class VulnerabilityAdvanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoTraversal":
            suggest = "auto_traversal"
        elif key == "freqScan":
            suggest = "freq_scan"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAdvanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAdvanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAdvanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_traversal: 'outputs.VulnerabilityAdvanceConfigAutoTraversal',
                 freq_scan: 'outputs.VulnerabilityAdvanceConfigFreqScan'):
        """
        :param 'VulnerabilityAdvanceConfigAutoTraversalArgs' auto_traversal: Configuration of the automatic blocking capability for directory traversal.
        :param 'VulnerabilityAdvanceConfigFreqScanArgs' freq_scan: Configuration of high-frequency scanning automatic blocking capability.
        """
        pulumi.set(__self__, "auto_traversal", auto_traversal)
        pulumi.set(__self__, "freq_scan", freq_scan)

    @property
    @pulumi.getter(name="autoTraversal")
    def auto_traversal(self) -> 'outputs.VulnerabilityAdvanceConfigAutoTraversal':
        """
        Configuration of the automatic blocking capability for directory traversal.
        """
        return pulumi.get(self, "auto_traversal")

    @property
    @pulumi.getter(name="freqScan")
    def freq_scan(self) -> 'outputs.VulnerabilityAdvanceConfigFreqScan':
        """
        Configuration of high-frequency scanning automatic blocking capability.
        """
        return pulumi.get(self, "freq_scan")


@pulumi.output_type
class VulnerabilityAdvanceConfigAutoTraversal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleTag":
            suggest = "rule_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAdvanceConfigAutoTraversal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAdvanceConfigAutoTraversal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAdvanceConfigAutoTraversal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 rule: Optional['outputs.VulnerabilityAdvanceConfigAutoTraversalRule'] = None,
                 rule_tag: Optional[str] = None):
        """
        :param bool enable: Rule switch, controlling whether the current rule takes effect.
        :param 'VulnerabilityAdvanceConfigAutoTraversalRuleArgs' rule: Rule detail.
        :param str rule_tag: Directory traversal automatically blocks the rule label, that is, the complete rule ID.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Rule switch, controlling whether the current rule takes effect.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def rule(self) -> Optional['outputs.VulnerabilityAdvanceConfigAutoTraversalRule']:
        """
        Rule detail.
        """
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        Directory traversal automatically blocks the rule label, that is, the complete rule ID.
        """
        return pulumi.get(self, "rule_tag")


@pulumi.output_type
class VulnerabilityAdvanceConfigAutoTraversalRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countTime":
            suggest = "count_time"
        elif key == "effectTime":
            suggest = "effect_time"
        elif key == "effectTimeViewUnit":
            suggest = "effect_time_view_unit"
        elif key == "hitRequestCount":
            suggest = "hit_request_count"
        elif key == "responseHttpStatusHitPercent":
            suggest = "response_http_status_hit_percent"
        elif key == "responseHttpStatuses":
            suggest = "response_http_statuses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAdvanceConfigAutoTraversalRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAdvanceConfigAutoTraversalRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAdvanceConfigAutoTraversalRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: int,
                 count_time: int,
                 effect_time: int,
                 effect_time_view_unit: str,
                 field: str,
                 hit_request_count: int,
                 response_http_status_hit_percent: int,
                 response_http_statuses: Sequence[int]):
        """
        :param int action: Disposal action.
        :param int count_time: Disposal action.
        :param int effect_time: Ban time (seconds).
        :param str effect_time_view_unit: The body records the units displayed at the front end of the length: s, min, hour, and day.
        :param str field: statistical object.
        :param int hit_request_count: The number of request triggers.
        :param int response_http_status_hit_percent: Hit percentage: 0-99.
        :param Sequence[int] response_http_statuses: Response status code.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "count_time", count_time)
        pulumi.set(__self__, "effect_time", effect_time)
        pulumi.set(__self__, "effect_time_view_unit", effect_time_view_unit)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "hit_request_count", hit_request_count)
        pulumi.set(__self__, "response_http_status_hit_percent", response_http_status_hit_percent)
        pulumi.set(__self__, "response_http_statuses", response_http_statuses)

    @property
    @pulumi.getter
    def action(self) -> int:
        """
        Disposal action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> int:
        """
        Disposal action.
        """
        return pulumi.get(self, "count_time")

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> int:
        """
        Ban time (seconds).
        """
        return pulumi.get(self, "effect_time")

    @property
    @pulumi.getter(name="effectTimeViewUnit")
    def effect_time_view_unit(self) -> str:
        """
        The body records the units displayed at the front end of the length: s, min, hour, and day.
        """
        return pulumi.get(self, "effect_time_view_unit")

    @property
    @pulumi.getter
    def field(self) -> str:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter(name="hitRequestCount")
    def hit_request_count(self) -> int:
        """
        The number of request triggers.
        """
        return pulumi.get(self, "hit_request_count")

    @property
    @pulumi.getter(name="responseHttpStatusHitPercent")
    def response_http_status_hit_percent(self) -> int:
        """
        Hit percentage: 0-99.
        """
        return pulumi.get(self, "response_http_status_hit_percent")

    @property
    @pulumi.getter(name="responseHttpStatuses")
    def response_http_statuses(self) -> Sequence[int]:
        """
        Response status code.
        """
        return pulumi.get(self, "response_http_statuses")


@pulumi.output_type
class VulnerabilityAdvanceConfigFreqScan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleTag":
            suggest = "rule_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAdvanceConfigFreqScan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAdvanceConfigFreqScan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAdvanceConfigFreqScan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 rule: Optional['outputs.VulnerabilityAdvanceConfigFreqScanRule'] = None,
                 rule_tag: Optional[str] = None):
        """
        :param bool enable: Rule switch, controlling whether the current rule takes effect.
        :param 'VulnerabilityAdvanceConfigFreqScanRuleArgs' rule: Rule detail.
        :param str rule_tag: Directory traversal automatically blocks the rule label, that is, the complete rule ID.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Rule switch, controlling whether the current rule takes effect.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def rule(self) -> Optional['outputs.VulnerabilityAdvanceConfigFreqScanRule']:
        """
        Rule detail.
        """
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        Directory traversal automatically blocks the rule label, that is, the complete rule ID.
        """
        return pulumi.get(self, "rule_tag")


@pulumi.output_type
class VulnerabilityAdvanceConfigFreqScanRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countTime":
            suggest = "count_time"
        elif key == "effectTime":
            suggest = "effect_time"
        elif key == "effectTimeViewUnit":
            suggest = "effect_time_view_unit"
        elif key == "hitRequestCount":
            suggest = "hit_request_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAdvanceConfigFreqScanRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAdvanceConfigFreqScanRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAdvanceConfigFreqScanRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: int,
                 count_time: int,
                 effect_time: int,
                 effect_time_view_unit: str,
                 field: str,
                 hit_request_count: int):
        """
        :param int action: Disposal action.
        :param int count_time: Disposal action.
        :param int effect_time: Ban time (seconds).
        :param str effect_time_view_unit: The body records the units displayed at the front end of the length: s, min, hour, and day.
        :param str field: statistical object.
        :param int hit_request_count: The number of request triggers.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "count_time", count_time)
        pulumi.set(__self__, "effect_time", effect_time)
        pulumi.set(__self__, "effect_time_view_unit", effect_time_view_unit)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "hit_request_count", hit_request_count)

    @property
    @pulumi.getter
    def action(self) -> int:
        """
        Disposal action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> int:
        """
        Disposal action.
        """
        return pulumi.get(self, "count_time")

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> int:
        """
        Ban time (seconds).
        """
        return pulumi.get(self, "effect_time")

    @property
    @pulumi.getter(name="effectTimeViewUnit")
    def effect_time_view_unit(self) -> str:
        """
        The body records the units displayed at the front end of the length: s, min, hour, and day.
        """
        return pulumi.get(self, "effect_time_view_unit")

    @property
    @pulumi.getter
    def field(self) -> str:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter(name="hitRequestCount")
    def hit_request_count(self) -> int:
        """
        The number of request triggers.
        """
        return pulumi.get(self, "hit_request_count")


@pulumi.output_type
class VulnerabilityRuleDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cveId":
            suggest = "cve_id"
        elif key == "riskLevel":
            suggest = "risk_level"
        elif key == "ruleName":
            suggest = "rule_name"
        elif key == "ruleSetName":
            suggest = "rule_set_name"
        elif key == "ruleTag":
            suggest = "rule_tag"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityRuleDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityRuleDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityRuleDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accuracy: Optional[int] = None,
                 cve_id: Optional[str] = None,
                 description: Optional[str] = None,
                 risk_level: Optional[int] = None,
                 rule_name: Optional[str] = None,
                 rule_set_name: Optional[str] = None,
                 rule_tag: Optional[str] = None,
                 subcategory: Optional[str] = None,
                 update_time: Optional[str] = None):
        """
        :param int accuracy: The accuracy of the rules. Only when updating the custom vulnerability rules.
        :param str cve_id: The ID of CVE. Only when updating the custom vulnerability rules.
        :param str description: The description of the rules. Only when updating the custom vulnerability rules.
        :param int risk_level: Risk grade. Only when updating the custom vulnerability rules.
        :param str rule_name: The name of rule. Only when updating the custom vulnerability rules.
        :param str rule_set_name: First-level rule category. Only when updating the custom vulnerability rules.
        :param str rule_tag: Rule label, that is, the complete rule ID. Only when updating the custom vulnerability rules.
        :param str subcategory: Secondary rule category. Only when updating the custom vulnerability rules.
        :param str update_time: The update time of the rules. Only when updating the custom vulnerability rules.
        """
        if accuracy is not None:
            pulumi.set(__self__, "accuracy", accuracy)
        if cve_id is not None:
            pulumi.set(__self__, "cve_id", cve_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_set_name is not None:
            pulumi.set(__self__, "rule_set_name", rule_set_name)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)
        if subcategory is not None:
            pulumi.set(__self__, "subcategory", subcategory)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def accuracy(self) -> Optional[int]:
        """
        The accuracy of the rules. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "accuracy")

    @property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> Optional[str]:
        """
        The ID of CVE. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "cve_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the rules. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[int]:
        """
        Risk grade. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        """
        The name of rule. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleSetName")
    def rule_set_name(self) -> Optional[str]:
        """
        First-level rule category. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "rule_set_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        Rule label, that is, the complete rule ID. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter
    def subcategory(self) -> Optional[str]:
        """
        Secondary rule category. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "subcategory")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        The update time of the rules. Only when updating the custom vulnerability rules.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class VulnerabilitySystemRuleSwitch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customSystemRuleSwitch":
            suggest = "custom_system_rule_switch"
        elif key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilitySystemRuleSwitch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilitySystemRuleSwitch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilitySystemRuleSwitch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_system_rule_switch: Optional[int] = None,
                 rule_id: Optional[int] = None):
        """
        :param int custom_system_rule_switch: Custom rule switch.
        :param int rule_id: The ID of rule.
        """
        if custom_system_rule_switch is not None:
            pulumi.set(__self__, "custom_system_rule_switch", custom_system_rule_switch)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="customSystemRuleSwitch")
    def custom_system_rule_switch(self) -> Optional[int]:
        """
        Custom rule switch.
        """
        return pulumi.get(self, "custom_system_rule_switch")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        """
        The ID of rule.
        """
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class WafDomainBackendGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPorts":
            suggest = "access_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafDomainBackendGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafDomainBackendGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafDomainBackendGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_ports: Optional[Sequence[int]] = None,
                 backends: Optional[Sequence['outputs.WafDomainBackendGroupBackend']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[int] access_ports: Access port number.
        :param Sequence['WafDomainBackendGroupBackendArgs'] backends: The details of the source station group.
        :param str name: Source station group name.
        """
        if access_ports is not None:
            pulumi.set(__self__, "access_ports", access_ports)
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accessPorts")
    def access_ports(self) -> Optional[Sequence[int]]:
        """
        Access port number.
        """
        return pulumi.get(self, "access_ports")

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence['outputs.WafDomainBackendGroupBackend']]:
        """
        The details of the source station group.
        """
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Source station group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class WafDomainBackendGroupBackend(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 weight: Optional[int] = None):
        """
        :param str ip: Source station IP address.
        :param int port: Source station port number.
        :param str protocol: The agreement of Source Station.
        :param int weight: The weight of the source station rules.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        Source station IP address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Source station port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The agreement of Source Station.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        The weight of the source station rules.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class WafDomainCloudAccessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "accessProtocol":
            suggest = "access_protocol"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "listenerId":
            suggest = "listener_id"
        elif key == "lostAssociationFromAlb":
            suggest = "lost_association_from_alb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafDomainCloudAccessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafDomainCloudAccessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafDomainCloudAccessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 access_protocol: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 listener_id: Optional[str] = None,
                 lost_association_from_alb: Optional[int] = None,
                 port: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param str instance_id: The ID of instance.
        :param str access_protocol: The access protocol needs to be consistent with the monitoring protocol.
        :param str instance_name: The name of instance. Works only on modified scenes.
        :param str listener_id: The ID of listener.
        :param int lost_association_from_alb: Whether the instance is unbound from the alb and is unbound on the ALB side. Works only on modified scenes.
        :param str port: The port number corresponding to the listener.
        :param str protocol: The type of Listener protocol.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if access_protocol is not None:
            pulumi.set(__self__, "access_protocol", access_protocol)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if lost_association_from_alb is not None:
            pulumi.set(__self__, "lost_association_from_alb", lost_association_from_alb)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="accessProtocol")
    def access_protocol(self) -> Optional[str]:
        """
        The access protocol needs to be consistent with the monitoring protocol.
        """
        return pulumi.get(self, "access_protocol")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        The name of instance. Works only on modified scenes.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[str]:
        """
        The ID of listener.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="lostAssociationFromAlb")
    def lost_association_from_alb(self) -> Optional[int]:
        """
        Whether the instance is unbound from the alb and is unbound on the ALB side. Works only on modified scenes.
        """
        return pulumi.get(self, "lost_association_from_alb")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        The port number corresponding to the listener.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The type of Listener protocol.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WafDomainExtraDefenceModeLbInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defenceMode":
            suggest = "defence_mode"
        elif key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafDomainExtraDefenceModeLbInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafDomainExtraDefenceModeLbInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafDomainExtraDefenceModeLbInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defence_mode: Optional[int] = None,
                 instance_id: Optional[str] = None):
        """
        :param int defence_mode: Set the protection mode for exceptional ALB instances. Works only on modified scenes.
        :param str instance_id: The Id of ALB instance. Works only on modified scenes.
        """
        if defence_mode is not None:
            pulumi.set(__self__, "defence_mode", defence_mode)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="defenceMode")
    def defence_mode(self) -> Optional[int]:
        """
        Set the protection mode for exceptional ALB instances. Works only on modified scenes.
        """
        return pulumi.get(self, "defence_mode")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        The Id of ALB instance. Works only on modified scenes.
        """
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class WafDomainProtocolPorts(dict):
    def __init__(__self__, *,
                 http: Optional[Sequence[int]] = None,
                 https: Optional[Sequence[int]] = None):
        """
        :param Sequence[int] http: Ports supported by the HTTP protocol.
        :param Sequence[int] https: Ports supported by the HTTPs protocol.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if https is not None:
            pulumi.set(__self__, "https", https)

    @property
    @pulumi.getter
    def http(self) -> Optional[Sequence[int]]:
        """
        Ports supported by the HTTP protocol.
        """
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def https(self) -> Optional[Sequence[int]]:
        """
        Ports supported by the HTTPs protocol.
        """
        return pulumi.get(self, "https")


@pulumi.output_type
class WafDomainTlsFieldsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headersConfig":
            suggest = "headers_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafDomainTlsFieldsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafDomainTlsFieldsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafDomainTlsFieldsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 headers_config: Optional['outputs.WafDomainTlsFieldsConfigHeadersConfig'] = None):
        """
        :param 'WafDomainTlsFieldsConfigHeadersConfigArgs' headers_config: The configuration of Headers. Works only on modified scenes.
        """
        if headers_config is not None:
            pulumi.set(__self__, "headers_config", headers_config)

    @property
    @pulumi.getter(name="headersConfig")
    def headers_config(self) -> Optional['outputs.WafDomainTlsFieldsConfigHeadersConfig']:
        """
        The configuration of Headers. Works only on modified scenes.
        """
        return pulumi.get(self, "headers_config")


@pulumi.output_type
class WafDomainTlsFieldsConfigHeadersConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedKeyLists":
            suggest = "excluded_key_lists"
        elif key == "statisticalKeyLists":
            suggest = "statistical_key_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafDomainTlsFieldsConfigHeadersConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafDomainTlsFieldsConfigHeadersConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafDomainTlsFieldsConfigHeadersConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[int] = None,
                 excluded_key_lists: Optional[Sequence[str]] = None,
                 statistical_key_lists: Optional[Sequence[str]] = None):
        """
        :param int enable: Whether the log contains this field. Works only on modified scenes.
        :param Sequence[str] excluded_key_lists: For the use of composite fields, exclude the fields in the keyword list from the JSON of the fields. Works only on modified scenes.
        :param Sequence[str] statistical_key_lists: Create statistical indexes for the fields of the list. Works only on modified scenes.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if excluded_key_lists is not None:
            pulumi.set(__self__, "excluded_key_lists", excluded_key_lists)
        if statistical_key_lists is not None:
            pulumi.set(__self__, "statistical_key_lists", statistical_key_lists)

    @property
    @pulumi.getter
    def enable(self) -> Optional[int]:
        """
        Whether the log contains this field. Works only on modified scenes.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="excludedKeyLists")
    def excluded_key_lists(self) -> Optional[Sequence[str]]:
        """
        For the use of composite fields, exclude the fields in the keyword list from the JSON of the fields. Works only on modified scenes.
        """
        return pulumi.get(self, "excluded_key_lists")

    @property
    @pulumi.getter(name="statisticalKeyLists")
    def statistical_key_lists(self) -> Optional[Sequence[str]]:
        """
        Create statistical indexes for the fields of the list. Works only on modified scenes.
        """
        return pulumi.get(self, "statistical_key_lists")


@pulumi.output_type
class GetAclRulesRuleResult(dict):
    def __init__(__self__, *,
                 accurate_group: 'outputs.GetAclRulesRuleAccurateGroupResult',
                 action: str,
                 advanced: int,
                 client_ip: str,
                 description: str,
                 enable: int,
                 host_add_type: int,
                 host_group_ids: Sequence[int],
                 host_groups: Sequence['outputs.GetAclRulesRuleHostGroupResult'],
                 host_lists: Sequence[str],
                 id: int,
                 ip_add_type: int,
                 ip_group_ids: Sequence[int],
                 ip_groups: Sequence['outputs.GetAclRulesRuleIpGroupResult'],
                 ip_lists: Sequence[str],
                 ip_location_countries: Sequence[str],
                 ip_location_subregions: Sequence[str],
                 name: str,
                 rule_tag: str,
                 update_time: str,
                 url: str):
        """
        :param 'GetAclRulesRuleAccurateGroupArgs' accurate_group: Advanced conditions.
        :param str action: Action to be taken on requests that match the rule.
        :param int advanced: Whether to set advanced conditions.
        :param str client_ip: IP address.
        :param str description: Rule description.
        :param int enable: The enabled status of the rule.
        :param int host_add_type: Type of domain name addition.
        :param Sequence[int] host_group_ids: The ID of host group.
        :param Sequence['GetAclRulesRuleHostGroupArgs'] host_groups: The list of domain name groups.
        :param Sequence[str] host_lists: Single or multiple domain names are supported.
        :param int id: Rule ID.
        :param int ip_add_type: Type of IP address addition.
        :param Sequence[int] ip_group_ids: The ID of the IP address group.
        :param Sequence['GetAclRulesRuleIpGroupArgs'] ip_groups: The list of domain name groups.
        :param Sequence[str] ip_lists: Single or multiple IP addresses are supported.
        :param Sequence[str] ip_location_countries: Country or region code.
        :param Sequence[str] ip_location_subregions: Domestic region code.
        :param str name: Rule name.
        :param str rule_tag: Rule unique identifier, precise search.
        :param str update_time: Update time of the rule.
        :param str url: The path of Matching.
        """
        pulumi.set(__self__, "accurate_group", accurate_group)
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "advanced", advanced)
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "host_add_type", host_add_type)
        pulumi.set(__self__, "host_group_ids", host_group_ids)
        pulumi.set(__self__, "host_groups", host_groups)
        pulumi.set(__self__, "host_lists", host_lists)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_add_type", ip_add_type)
        pulumi.set(__self__, "ip_group_ids", ip_group_ids)
        pulumi.set(__self__, "ip_groups", ip_groups)
        pulumi.set(__self__, "ip_lists", ip_lists)
        pulumi.set(__self__, "ip_location_countries", ip_location_countries)
        pulumi.set(__self__, "ip_location_subregions", ip_location_subregions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> 'outputs.GetAclRulesRuleAccurateGroupResult':
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def advanced(self) -> int:
        """
        Whether to set advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> str:
        """
        IP address.
        """
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        The enabled status of the rule.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="hostAddType")
    def host_add_type(self) -> int:
        """
        Type of domain name addition.
        """
        return pulumi.get(self, "host_add_type")

    @property
    @pulumi.getter(name="hostGroupIds")
    def host_group_ids(self) -> Sequence[int]:
        """
        The ID of host group.
        """
        return pulumi.get(self, "host_group_ids")

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> Sequence['outputs.GetAclRulesRuleHostGroupResult']:
        """
        The list of domain name groups.
        """
        return pulumi.get(self, "host_groups")

    @property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> Sequence[str]:
        """
        Single or multiple domain names are supported.
        """
        return pulumi.get(self, "host_lists")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddType")
    def ip_add_type(self) -> int:
        """
        Type of IP address addition.
        """
        return pulumi.get(self, "ip_add_type")

    @property
    @pulumi.getter(name="ipGroupIds")
    def ip_group_ids(self) -> Sequence[int]:
        """
        The ID of the IP address group.
        """
        return pulumi.get(self, "ip_group_ids")

    @property
    @pulumi.getter(name="ipGroups")
    def ip_groups(self) -> Sequence['outputs.GetAclRulesRuleIpGroupResult']:
        """
        The list of domain name groups.
        """
        return pulumi.get(self, "ip_groups")

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Sequence[str]:
        """
        Single or multiple IP addresses are supported.
        """
        return pulumi.get(self, "ip_lists")

    @property
    @pulumi.getter(name="ipLocationCountries")
    def ip_location_countries(self) -> Sequence[str]:
        """
        Country or region code.
        """
        return pulumi.get(self, "ip_location_countries")

    @property
    @pulumi.getter(name="ipLocationSubregions")
    def ip_location_subregions(self) -> Sequence[str]:
        """
        Domestic region code.
        """
        return pulumi.get(self, "ip_location_subregions")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Rule unique identifier, precise search.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time of the rule.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The path of Matching.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetAclRulesRuleAccurateGroupResult(dict):
    def __init__(__self__, *,
                 accurate_rules: Sequence['outputs.GetAclRulesRuleAccurateGroupAccurateRuleResult'],
                 logic: int):
        """
        :param Sequence['GetAclRulesRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.GetAclRulesRuleAccurateGroupAccurateRuleResult']:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class GetAclRulesRuleAccurateGroupAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetAclRulesRuleHostGroupResult(dict):
    def __init__(__self__, *,
                 host_group_id: int,
                 name: str):
        """
        :param int host_group_id: The ID of host group.
        :param str name: Rule name.
        """
        pulumi.set(__self__, "host_group_id", host_group_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> int:
        """
        The ID of host group.
        """
        return pulumi.get(self, "host_group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAclRulesRuleIpGroupResult(dict):
    def __init__(__self__, *,
                 ip_group_id: int,
                 name: str):
        """
        :param int ip_group_id: The ID of the IP address group.
        :param str name: Rule name.
        """
        pulumi.set(__self__, "ip_group_id", ip_group_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> int:
        """
        The ID of the IP address group.
        """
        return pulumi.get(self, "ip_group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBotAnalyseProtectRulesDataResult(dict):
    def __init__(__self__, *,
                 enable_count: int,
                 path: str,
                 rule_groups: Sequence['outputs.GetBotAnalyseProtectRulesDataRuleGroupResult'],
                 total_count: int):
        """
        :param int enable_count: The number of statistical protection rules enabled under the current domain name.
        :param str path: Protective path.
        :param Sequence['GetBotAnalyseProtectRulesDataRuleGroupArgs'] rule_groups: Details of the rule group.
        :param int total_count: The total count of query.
        """
        pulumi.set(__self__, "enable_count", enable_count)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "rule_groups", rule_groups)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="enableCount")
    def enable_count(self) -> int:
        """
        The number of statistical protection rules enabled under the current domain name.
        """
        return pulumi.get(self, "enable_count")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Protective path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="ruleGroups")
    def rule_groups(self) -> Sequence['outputs.GetBotAnalyseProtectRulesDataRuleGroupResult']:
        """
        Details of the rule group.
        """
        return pulumi.get(self, "rule_groups")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetBotAnalyseProtectRulesDataRuleGroupResult(dict):
    def __init__(__self__, *,
                 group: 'outputs.GetBotAnalyseProtectRulesDataRuleGroupGroupResult',
                 rules: Sequence['outputs.GetBotAnalyseProtectRulesDataRuleGroupRuleResult']):
        """
        :param 'GetBotAnalyseProtectRulesDataRuleGroupGroupArgs' group: Rule group information.
        :param Sequence['GetBotAnalyseProtectRulesDataRuleGroupRuleArgs'] rules: Specific rule information within the rule group.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def group(self) -> 'outputs.GetBotAnalyseProtectRulesDataRuleGroupGroupResult':
        """
        Rule group information.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetBotAnalyseProtectRulesDataRuleGroupRuleResult']:
        """
        Specific rule information within the rule group.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetBotAnalyseProtectRulesDataRuleGroupGroupResult(dict):
    def __init__(__self__, *,
                 accurate_group_priority: int,
                 accurate_rules: Sequence['outputs.GetBotAnalyseProtectRulesDataRuleGroupGroupAccurateRuleResult'],
                 id: int,
                 logic: int):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['GetBotAnalyseProtectRulesDataRuleGroupGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: Rule unique identifier.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.GetBotAnalyseProtectRulesDataRuleGroupGroupAccurateRuleResult']:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class GetBotAnalyseProtectRulesDataRuleGroupGroupAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetBotAnalyseProtectRulesDataRuleGroupRuleResult(dict):
    def __init__(__self__, *,
                 accurate_group: 'outputs.GetBotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupResult',
                 accurate_group_priority: int,
                 action_after_verification: int,
                 action_type: int,
                 effect_time: int,
                 enable: int,
                 exemption_time: int,
                 field: str,
                 host: str,
                 id: int,
                 name: str,
                 pass_ratio: float,
                 path: str,
                 path_threshold: int,
                 rule_priority: int,
                 rule_tag: str,
                 single_proportion: float,
                 single_threshold: int,
                 statistical_duration: int,
                 statistical_type: int,
                 update_time: str):
        """
        :param 'GetBotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupArgs' accurate_group: Advanced conditions.
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param int action_after_verification: Perform actions after human-machine verification /JS challenges.
        :param int action_type: perform the action.
        :param int effect_time: Limit the duration.
        :param int enable: Whether to enable the rules.
        :param int exemption_time: Exemption time.
        :param str field: statistical object.
        :param str host: Website domain names that require the setting of protection rules.
        :param int id: Rule unique identifier.
        :param str name: The name of the rule.
        :param float pass_ratio: JS challenge/human-machine verification pass rate.
        :param str path: Protective path.
        :param int path_threshold: Threshold of path access times.
        :param int rule_priority: Rule execution priority.
        :param str rule_tag: Unique identification of rules.
        :param float single_proportion: The IP proportion of the same statistical object.
        :param int single_threshold: The maximum number of ips for the same statistical object.
        :param int statistical_duration: The duration of the statistics.
        :param int statistical_type: Statistical content method.
        :param str update_time: Rule update time.
        """
        pulumi.set(__self__, "accurate_group", accurate_group)
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "action_after_verification", action_after_verification)
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "effect_time", effect_time)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "exemption_time", exemption_time)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pass_ratio", pass_ratio)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "path_threshold", path_threshold)
        pulumi.set(__self__, "rule_priority", rule_priority)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "single_proportion", single_proportion)
        pulumi.set(__self__, "single_threshold", single_threshold)
        pulumi.set(__self__, "statistical_duration", statistical_duration)
        pulumi.set(__self__, "statistical_type", statistical_type)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> 'outputs.GetBotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupResult':
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="actionAfterVerification")
    def action_after_verification(self) -> int:
        """
        Perform actions after human-machine verification /JS challenges.
        """
        return pulumi.get(self, "action_after_verification")

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> int:
        """
        perform the action.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> int:
        """
        Limit the duration.
        """
        return pulumi.get(self, "effect_time")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> int:
        """
        Exemption time.
        """
        return pulumi.get(self, "exemption_time")

    @property
    @pulumi.getter
    def field(self) -> str:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passRatio")
    def pass_ratio(self) -> float:
        """
        JS challenge/human-machine verification pass rate.
        """
        return pulumi.get(self, "pass_ratio")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Protective path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> int:
        """
        Threshold of path access times.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> int:
        """
        Rule execution priority.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Unique identification of rules.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="singleProportion")
    def single_proportion(self) -> float:
        """
        The IP proportion of the same statistical object.
        """
        return pulumi.get(self, "single_proportion")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> int:
        """
        The maximum number of ips for the same statistical object.
        """
        return pulumi.get(self, "single_threshold")

    @property
    @pulumi.getter(name="statisticalDuration")
    def statistical_duration(self) -> int:
        """
        The duration of the statistics.
        """
        return pulumi.get(self, "statistical_duration")

    @property
    @pulumi.getter(name="statisticalType")
    def statistical_type(self) -> int:
        """
        Statistical content method.
        """
        return pulumi.get(self, "statistical_type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetBotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupResult(dict):
    def __init__(__self__, *,
                 accurate_group_priority: int,
                 accurate_rules: Sequence['outputs.GetBotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult'],
                 id: int,
                 logic: int):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['GetBotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: Rule unique identifier.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.GetBotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult']:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class GetBotAnalyseProtectRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetCcRulesDataResult(dict):
    def __init__(__self__, *,
                 enable_count: int,
                 insert_time: str,
                 rule_groups: Sequence['outputs.GetCcRulesDataRuleGroupResult'],
                 total_count: int,
                 url: str):
        """
        :param int enable_count: The total number of enabled rules within the rule group.
        :param str insert_time: The creation time of the rule group.
        :param Sequence['GetCcRulesDataRuleGroupArgs'] rule_groups: Details of the rule group.
        :param int total_count: The total count of query.
        :param str url: Fuzzy search by the requested path.
        """
        pulumi.set(__self__, "enable_count", enable_count)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "rule_groups", rule_groups)
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="enableCount")
    def enable_count(self) -> int:
        """
        The total number of enabled rules within the rule group.
        """
        return pulumi.get(self, "enable_count")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> str:
        """
        The creation time of the rule group.
        """
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="ruleGroups")
    def rule_groups(self) -> Sequence['outputs.GetCcRulesDataRuleGroupResult']:
        """
        Details of the rule group.
        """
        return pulumi.get(self, "rule_groups")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Fuzzy search by the requested path.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCcRulesDataRuleGroupResult(dict):
    def __init__(__self__, *,
                 group: 'outputs.GetCcRulesDataRuleGroupGroupResult',
                 rules: Sequence['outputs.GetCcRulesDataRuleGroupRuleResult']):
        """
        :param 'GetCcRulesDataRuleGroupGroupArgs' group: Rule group information.
        :param Sequence['GetCcRulesDataRuleGroupRuleArgs'] rules: Specific rule information within the rule group.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def group(self) -> 'outputs.GetCcRulesDataRuleGroupGroupResult':
        """
        Rule group information.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetCcRulesDataRuleGroupRuleResult']:
        """
        Specific rule information within the rule group.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetCcRulesDataRuleGroupGroupResult(dict):
    def __init__(__self__, *,
                 accurate_group_priority: int,
                 accurate_rules: Sequence['outputs.GetCcRulesDataRuleGroupGroupAccurateRuleResult'],
                 id: int,
                 logic: int):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['GetCcRulesDataRuleGroupGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: The ID of Rule group.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.GetCcRulesDataRuleGroupGroupAccurateRuleResult']:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class GetCcRulesDataRuleGroupGroupAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetCcRulesDataRuleGroupRuleResult(dict):
    def __init__(__self__, *,
                 accurate_group: 'outputs.GetCcRulesDataRuleGroupRuleAccurateGroupResult',
                 accurate_group_priority: int,
                 cc_type: int,
                 count_time: int,
                 cron_confs: Sequence['outputs.GetCcRulesDataRuleGroupRuleCronConfResult'],
                 cron_enable: int,
                 effect_time: int,
                 enable: int,
                 exemption_time: int,
                 field: str,
                 host: str,
                 id: int,
                 name: str,
                 path_threshold: int,
                 rule_priority: int,
                 rule_tag: str,
                 single_threshold: int,
                 update_time: str,
                 url: str):
        """
        :param 'GetCcRulesDataRuleGroupRuleAccurateGroupArgs' accurate_group: Advanced conditions.
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param int cc_type: The actions performed on subsequent requests after meeting the statistical conditions.
        :param int count_time: The statistical period of the strategy.
        :param Sequence['GetCcRulesDataRuleGroupRuleCronConfArgs'] cron_confs: Details of the periodic loop configuration.
        :param int cron_enable: Whether to set the cycle to take effect.
        :param int effect_time: Limit the duration, that is, the effective duration of the action.
        :param int enable: Whether the rule is enabled.
        :param int exemption_time: Strategy exemption time.
        :param str field: statistical object.
        :param str host: Website domain names that require the setting of protection rules.
        :param int id: The ID of Rule group.
        :param str name: The Name of Rule group.
        :param int path_threshold: The threshold of the number of requests for path access.
        :param int rule_priority: Rule execution priority.
        :param str rule_tag: Search precisely according to the rule ID.
        :param int single_threshold: The threshold of the number of visits to each statistical object.
        :param str update_time: Rule update time.
        :param str url: Fuzzy search by the requested path.
        """
        pulumi.set(__self__, "accurate_group", accurate_group)
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "cc_type", cc_type)
        pulumi.set(__self__, "count_time", count_time)
        pulumi.set(__self__, "cron_confs", cron_confs)
        pulumi.set(__self__, "cron_enable", cron_enable)
        pulumi.set(__self__, "effect_time", effect_time)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "exemption_time", exemption_time)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path_threshold", path_threshold)
        pulumi.set(__self__, "rule_priority", rule_priority)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "single_threshold", single_threshold)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> 'outputs.GetCcRulesDataRuleGroupRuleAccurateGroupResult':
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="ccType")
    def cc_type(self) -> int:
        """
        The actions performed on subsequent requests after meeting the statistical conditions.
        """
        return pulumi.get(self, "cc_type")

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> int:
        """
        The statistical period of the strategy.
        """
        return pulumi.get(self, "count_time")

    @property
    @pulumi.getter(name="cronConfs")
    def cron_confs(self) -> Sequence['outputs.GetCcRulesDataRuleGroupRuleCronConfResult']:
        """
        Details of the periodic loop configuration.
        """
        return pulumi.get(self, "cron_confs")

    @property
    @pulumi.getter(name="cronEnable")
    def cron_enable(self) -> int:
        """
        Whether to set the cycle to take effect.
        """
        return pulumi.get(self, "cron_enable")

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> int:
        """
        Limit the duration, that is, the effective duration of the action.
        """
        return pulumi.get(self, "effect_time")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether the rule is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> int:
        """
        Strategy exemption time.
        """
        return pulumi.get(self, "exemption_time")

    @property
    @pulumi.getter
    def field(self) -> str:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of Rule group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> int:
        """
        The threshold of the number of requests for path access.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> int:
        """
        Rule execution priority.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Search precisely according to the rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> int:
        """
        The threshold of the number of visits to each statistical object.
        """
        return pulumi.get(self, "single_threshold")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Fuzzy search by the requested path.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCcRulesDataRuleGroupRuleAccurateGroupResult(dict):
    def __init__(__self__, *,
                 accurate_group_priority: int,
                 accurate_rules: Sequence['outputs.GetCcRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult'],
                 id: int,
                 logic: int):
        """
        :param int accurate_group_priority: After the rule creation is completed, the priority of the automatically generated rule group.
        :param Sequence['GetCcRulesDataRuleGroupRuleAccurateGroupAccurateRuleArgs'] accurate_rules: Request characteristic information of the rule group.
        :param int id: The ID of Rule group.
        :param int logic: In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        pulumi.set(__self__, "accurate_group_priority", accurate_group_priority)
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateGroupPriority")
    def accurate_group_priority(self) -> int:
        """
        After the rule creation is completed, the priority of the automatically generated rule group.
        """
        return pulumi.get(self, "accurate_group_priority")

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.GetCcRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult']:
        """
        Request characteristic information of the rule group.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of Rule group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        In the rule group, the high-level conditional operation relationships corresponding to each rule.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class GetCcRulesDataRuleGroupRuleAccurateGroupAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: Custom object.
        :param int obj_type: matching field.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        Custom object.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        matching field.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetCcRulesDataRuleGroupRuleCronConfResult(dict):
    def __init__(__self__, *,
                 crontab: str,
                 path_threshold: int,
                 single_threshold: int):
        """
        :param str crontab: The weekly cycle days and cycle time periods.
        :param int path_threshold: The threshold of the number of requests for path access.
        :param int single_threshold: The threshold of the number of visits to each statistical object.
        """
        pulumi.set(__self__, "crontab", crontab)
        pulumi.set(__self__, "path_threshold", path_threshold)
        pulumi.set(__self__, "single_threshold", single_threshold)

    @property
    @pulumi.getter
    def crontab(self) -> str:
        """
        The weekly cycle days and cycle time periods.
        """
        return pulumi.get(self, "crontab")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> int:
        """
        The threshold of the number of requests for path access.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> int:
        """
        The threshold of the number of visits to each statistical object.
        """
        return pulumi.get(self, "single_threshold")


@pulumi.output_type
class GetCustomBotsDataResult(dict):
    def __init__(__self__, *,
                 accurate: 'outputs.GetCustomBotsDataAccurateResult',
                 action: str,
                 advanced: int,
                 bot_type: str,
                 description: str,
                 enable: int,
                 id: int,
                 rule_tag: str,
                 update_time: str):
        """
        :param 'GetCustomBotsDataAccurateArgs' accurate: Advanced conditions.
        :param str action: The execution action of the Bot.
        :param int advanced: Whether to set advanced conditions.
        :param str bot_type: bot name.
        :param str description: The description of bot.
        :param int enable: Whether to enable bot.
        :param int id: The actual count bits of the rule unique identifier (corresponding to the RuleTag).
        :param str rule_tag: Rule unique identifier.
        :param str update_time: The update time.
        """
        pulumi.set(__self__, "accurate", accurate)
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "advanced", advanced)
        pulumi.set(__self__, "bot_type", bot_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def accurate(self) -> 'outputs.GetCustomBotsDataAccurateResult':
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate")

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The execution action of the Bot.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def advanced(self) -> int:
        """
        Whether to set advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="botType")
    def bot_type(self) -> str:
        """
        bot name.
        """
        return pulumi.get(self, "bot_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of bot.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether to enable bot.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The actual count bits of the rule unique identifier (corresponding to the RuleTag).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetCustomBotsDataAccurateResult(dict):
    def __init__(__self__, *,
                 accurate_rules: Sequence['outputs.GetCustomBotsDataAccurateAccurateRuleResult'],
                 logic: int):
        """
        :param Sequence['GetCustomBotsDataAccurateAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.GetCustomBotsDataAccurateAccurateRuleResult']:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class GetCustomBotsDataAccurateAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetCustomPagesDataResult(dict):
    def __init__(__self__, *,
                 accurate: 'outputs.GetCustomPagesDataAccurateResult',
                 advanced: int,
                 body: str,
                 client_ip: str,
                 code: str,
                 content_type: str,
                 description: str,
                 enable: int,
                 group_id: int,
                 header: str,
                 host: str,
                 id: int,
                 isolation_id: str,
                 name: str,
                 page_mode: int,
                 policy: int,
                 redirect_url: str,
                 rule_tag: str,
                 update_time: str,
                 url: str):
        """
        :param 'GetCustomPagesDataAccurateArgs' accurate: Advanced conditions.
        :param int advanced: Whether to configure advanced conditions.
        :param str body: The layout content of the response page.
        :param str client_ip: Fill in ALL, which means this rule will take effect on all IP addresses.
        :param str code: Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        :param str content_type: The layout template of the response page. Required if PageMode=0 or 1.
        :param str description: Rule description.
        :param int enable: Whether to enable the rule.
        :param int group_id: The ID of the advanced conditional rule group.
        :param str header: Request header information.
        :param str host: The domain names that need to be viewed.
        :param int id: The ID of rule.
        :param str isolation_id: The ID of Region.
        :param str name: Rule name.
        :param int page_mode: The layout template of the response page.
        :param int policy: Action to be taken on requests that match the rule.
        :param str redirect_url: The path where users should be redirected.
        :param str rule_tag: Unique identification of the rules.
        :param str update_time: Rule update time.
        :param str url: Match the path.
        """
        pulumi.set(__self__, "accurate", accurate)
        pulumi.set(__self__, "advanced", advanced)
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "isolation_id", isolation_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "page_mode", page_mode)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def accurate(self) -> 'outputs.GetCustomPagesDataAccurateResult':
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate")

    @property
    @pulumi.getter
    def advanced(self) -> int:
        """
        Whether to configure advanced conditions.
        """
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        The layout content of the response page.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> str:
        """
        Fill in ALL, which means this rule will take effect on all IP addresses.
        """
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Custom HTTP code returned when the request is blocked. Required if PageMode=0 or 1.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The layout template of the response page. Required if PageMode=0 or 1.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether to enable the rule.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        """
        The ID of the advanced conditional rule group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Request header information.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The domain names that need to be viewed.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isolationId")
    def isolation_id(self) -> str:
        """
        The ID of Region.
        """
        return pulumi.get(self, "isolation_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pageMode")
    def page_mode(self) -> int:
        """
        The layout template of the response page.
        """
        return pulumi.get(self, "page_mode")

    @property
    @pulumi.getter
    def policy(self) -> int:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        The path where users should be redirected.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Unique identification of the rules.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Rule update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Match the path.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCustomPagesDataAccurateResult(dict):
    def __init__(__self__, *,
                 accurate_rules: Sequence['outputs.GetCustomPagesDataAccurateAccurateRuleResult'],
                 logic: int):
        """
        :param Sequence['GetCustomPagesDataAccurateAccurateRuleArgs'] accurate_rules: Details of advanced conditions.
        :param int logic: The logical relationship of advanced conditions.
        """
        pulumi.set(__self__, "accurate_rules", accurate_rules)
        pulumi.set(__self__, "logic", logic)

    @property
    @pulumi.getter(name="accurateRules")
    def accurate_rules(self) -> Sequence['outputs.GetCustomPagesDataAccurateAccurateRuleResult']:
        """
        Details of advanced conditions.
        """
        return pulumi.get(self, "accurate_rules")

    @property
    @pulumi.getter
    def logic(self) -> int:
        """
        The logical relationship of advanced conditions.
        """
        return pulumi.get(self, "logic")


@pulumi.output_type
class GetCustomPagesDataAccurateAccurateRuleResult(dict):
    def __init__(__self__, *,
                 http_obj: str,
                 obj_type: int,
                 opretar: int,
                 property: int,
                 value_string: str):
        """
        :param str http_obj: The HTTP object to be added to the advanced conditions.
        :param int obj_type: The matching field for HTTP objects.
        :param int opretar: The logical operator for the condition.
        :param int property: Operate the properties of the http object.
        :param str value_string: The value to be matched.
        """
        pulumi.set(__self__, "http_obj", http_obj)
        pulumi.set(__self__, "obj_type", obj_type)
        pulumi.set(__self__, "opretar", opretar)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "value_string", value_string)

    @property
    @pulumi.getter(name="httpObj")
    def http_obj(self) -> str:
        """
        The HTTP object to be added to the advanced conditions.
        """
        return pulumi.get(self, "http_obj")

    @property
    @pulumi.getter(name="objType")
    def obj_type(self) -> int:
        """
        The matching field for HTTP objects.
        """
        return pulumi.get(self, "obj_type")

    @property
    @pulumi.getter
    def opretar(self) -> int:
        """
        The logical operator for the condition.
        """
        return pulumi.get(self, "opretar")

    @property
    @pulumi.getter(name="valueString")
    def value_string(self) -> str:
        """
        The value to be matched.
        """
        return pulumi.get(self, "value_string")

    @property
    @pulumi.getter
    def property(self) -> int:
        """
        Operate the properties of the http object.
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetDomainsDataResult(dict):
    def __init__(__self__, *,
                 access_mode: int,
                 advanced_defense_ip: str,
                 api_enable: int,
                 attack_status: int,
                 auto_cc_enable: int,
                 backend_groups: Sequence['outputs.GetDomainsDataBackendGroupResult'],
                 black_ip_enable: int,
                 black_lct_enable: int,
                 cc_enable: int,
                 certificate_id: int,
                 certificate_name: str,
                 client_ip_location: int,
                 client_max_body_size: int,
                 cloud_access_configs: Sequence['outputs.GetDomainsDataCloudAccessConfigResult'],
                 cname: str,
                 custom_bot_enable: int,
                 custom_headers: Sequence[str],
                 custom_rsp_enable: int,
                 defence_mode: int,
                 dlp_enable: int,
                 domain: str,
                 enable_http2: int,
                 enable_ipv6: int,
                 keep_alive_request: int,
                 keep_alive_time_out: int,
                 lb_algorithm: str,
                 protocol_follow: int,
                 protocol_ports: 'outputs.GetDomainsDataProtocolPortsResult',
                 protocols: str,
                 proxy_config: int,
                 proxy_connect_time_out: int,
                 proxy_keep_alive: int,
                 proxy_keep_alive_time_out: int,
                 proxy_read_time_out: int,
                 proxy_retry: int,
                 proxy_write_time_out: int,
                 public_real_server: int,
                 region: str,
                 server_ips: str,
                 src_ips: str,
                 ssl_ciphers: Sequence[str],
                 ssl_protocols: Sequence[str],
                 status: int,
                 system_bot_enable: int,
                 tamper_proof_enable: int,
                 tls_enable: int,
                 update_time: str,
                 vpc_id: str,
                 waf_enable: int,
                 waf_white_req_enable: int,
                 white_enable: int,
                 white_field_enable: int):
        """
        :param int access_mode: Access mode.
        :param str advanced_defense_ip: High-defense instance IP.
        :param int api_enable: Whether the API protection policy has been enabled.
        :param int attack_status: The status of the attack.
        :param int auto_cc_enable: Whether to enable the intelligent CC protection strategy.
        :param Sequence['GetDomainsDataBackendGroupArgs'] backend_groups: The configuration of source station.
        :param int black_ip_enable: Whether the blacklist strategy has been enabled.
        :param int black_lct_enable: Whether the regional ban strategy has been activated.
        :param int cc_enable: Whether the cc protection strategy has been enabled.
        :param int certificate_id: When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        :param str certificate_name: The name of the certificate.
        :param int client_ip_location: The method of obtaining the client IP.
        :param int client_max_body_size: The client requests the maximum value of body.
        :param Sequence['GetDomainsDataCloudAccessConfigArgs'] cloud_access_configs: Access port information.
        :param str cname: The CNAME value generated by the WAF instance.
        :param int custom_bot_enable: Whether the custom Bot classification strategy has been enabled.
        :param Sequence[str] custom_headers: Custom Header.
        :param int custom_rsp_enable: Whether the custom response interception strategy has been enabled.
        :param int defence_mode: The protection mode of the instance.
        :param int dlp_enable: Whether to activate the strategy for preventing the leakage of sensitive information.
        :param str domain: The domain name of the protected website that needs to be queried.
        :param int enable_http2: Whether to enable HTTP 2.0.
        :param int enable_ipv6: Whether it supports protecting IPv6 requests.
        :param int keep_alive_request: The number of long connection multiplexes.
        :param int keep_alive_time_out: Long connection retention time.
        :param str lb_algorithm: The types of load balancing algorithms.
        :param int protocol_follow: Whether to enable protocol following.
        :param 'GetDomainsDataProtocolPortsArgs' protocol_ports: Access port information.
        :param str protocols: Access protocol types.
        :param int proxy_config: Whether to enable proxy configuration.
        :param int proxy_connect_time_out: The timeout period for establishing a connection between the WAF and the backend server.
        :param int proxy_keep_alive: The number of reusable WAF origin long connections.
        :param int proxy_keep_alive_time_out: Idle long connection timeout period.
        :param int proxy_read_time_out: The timeout period during which WAF reads the response from the backend server.
        :param int proxy_retry: The number of retries for WAF back to source.
        :param int proxy_write_time_out: The timeout period during which the WAF transmits the request to the backend server.
        :param int public_real_server: Connect to the source return mode.
        :param str region: domain region that need to be protected by WAF.
        :param str server_ips: The IP of the WAF protection instance.
        :param str src_ips: WAF source IP.
        :param Sequence[str] ssl_ciphers: Encryption kit.
        :param Sequence[str] ssl_protocols: TLS protocol version.
        :param int status: The status of access.
        :param int system_bot_enable: Whether the managed Bot classification strategy has been enabled.
        :param int tamper_proof_enable: Whether to enable the page tamper proof policy.
        :param int tls_enable: Whether to enable the log service.
        :param str update_time: The update time.
        :param str vpc_id: The ID of vpc.
        :param int waf_enable: Whether the vulnerability protection strategy has been enabled.
        :param int waf_white_req_enable: Whether to enable the whitening strategy for vulnerability protection requests.
        :param int white_enable: Whether the whitelist strategy has been enabled.
        :param int white_field_enable: Whether to enable the whitening strategy for vulnerability protection fields.
        """
        pulumi.set(__self__, "access_mode", access_mode)
        pulumi.set(__self__, "advanced_defense_ip", advanced_defense_ip)
        pulumi.set(__self__, "api_enable", api_enable)
        pulumi.set(__self__, "attack_status", attack_status)
        pulumi.set(__self__, "auto_cc_enable", auto_cc_enable)
        pulumi.set(__self__, "backend_groups", backend_groups)
        pulumi.set(__self__, "black_ip_enable", black_ip_enable)
        pulumi.set(__self__, "black_lct_enable", black_lct_enable)
        pulumi.set(__self__, "cc_enable", cc_enable)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "client_ip_location", client_ip_location)
        pulumi.set(__self__, "client_max_body_size", client_max_body_size)
        pulumi.set(__self__, "cloud_access_configs", cloud_access_configs)
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "custom_bot_enable", custom_bot_enable)
        pulumi.set(__self__, "custom_headers", custom_headers)
        pulumi.set(__self__, "custom_rsp_enable", custom_rsp_enable)
        pulumi.set(__self__, "defence_mode", defence_mode)
        pulumi.set(__self__, "dlp_enable", dlp_enable)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "enable_http2", enable_http2)
        pulumi.set(__self__, "enable_ipv6", enable_ipv6)
        pulumi.set(__self__, "keep_alive_request", keep_alive_request)
        pulumi.set(__self__, "keep_alive_time_out", keep_alive_time_out)
        pulumi.set(__self__, "lb_algorithm", lb_algorithm)
        pulumi.set(__self__, "protocol_follow", protocol_follow)
        pulumi.set(__self__, "protocol_ports", protocol_ports)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "proxy_config", proxy_config)
        pulumi.set(__self__, "proxy_connect_time_out", proxy_connect_time_out)
        pulumi.set(__self__, "proxy_keep_alive", proxy_keep_alive)
        pulumi.set(__self__, "proxy_keep_alive_time_out", proxy_keep_alive_time_out)
        pulumi.set(__self__, "proxy_read_time_out", proxy_read_time_out)
        pulumi.set(__self__, "proxy_retry", proxy_retry)
        pulumi.set(__self__, "proxy_write_time_out", proxy_write_time_out)
        pulumi.set(__self__, "public_real_server", public_real_server)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "server_ips", server_ips)
        pulumi.set(__self__, "src_ips", src_ips)
        pulumi.set(__self__, "ssl_ciphers", ssl_ciphers)
        pulumi.set(__self__, "ssl_protocols", ssl_protocols)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_bot_enable", system_bot_enable)
        pulumi.set(__self__, "tamper_proof_enable", tamper_proof_enable)
        pulumi.set(__self__, "tls_enable", tls_enable)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "waf_enable", waf_enable)
        pulumi.set(__self__, "waf_white_req_enable", waf_white_req_enable)
        pulumi.set(__self__, "white_enable", white_enable)
        pulumi.set(__self__, "white_field_enable", white_field_enable)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> int:
        """
        Access mode.
        """
        return pulumi.get(self, "access_mode")

    @property
    @pulumi.getter(name="advancedDefenseIp")
    def advanced_defense_ip(self) -> str:
        """
        High-defense instance IP.
        """
        return pulumi.get(self, "advanced_defense_ip")

    @property
    @pulumi.getter(name="apiEnable")
    def api_enable(self) -> int:
        """
        Whether the API protection policy has been enabled.
        """
        return pulumi.get(self, "api_enable")

    @property
    @pulumi.getter(name="attackStatus")
    def attack_status(self) -> int:
        """
        The status of the attack.
        """
        return pulumi.get(self, "attack_status")

    @property
    @pulumi.getter(name="autoCcEnable")
    def auto_cc_enable(self) -> int:
        """
        Whether to enable the intelligent CC protection strategy.
        """
        return pulumi.get(self, "auto_cc_enable")

    @property
    @pulumi.getter(name="backendGroups")
    def backend_groups(self) -> Sequence['outputs.GetDomainsDataBackendGroupResult']:
        """
        The configuration of source station.
        """
        return pulumi.get(self, "backend_groups")

    @property
    @pulumi.getter(name="blackIpEnable")
    def black_ip_enable(self) -> int:
        """
        Whether the blacklist strategy has been enabled.
        """
        return pulumi.get(self, "black_ip_enable")

    @property
    @pulumi.getter(name="blackLctEnable")
    def black_lct_enable(self) -> int:
        """
        Whether the regional ban strategy has been activated.
        """
        return pulumi.get(self, "black_lct_enable")

    @property
    @pulumi.getter(name="ccEnable")
    def cc_enable(self) -> int:
        """
        Whether the cc protection strategy has been enabled.
        """
        return pulumi.get(self, "cc_enable")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> int:
        """
        When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> str:
        """
        The name of the certificate.
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter(name="clientIpLocation")
    def client_ip_location(self) -> int:
        """
        The method of obtaining the client IP.
        """
        return pulumi.get(self, "client_ip_location")

    @property
    @pulumi.getter(name="clientMaxBodySize")
    def client_max_body_size(self) -> int:
        """
        The client requests the maximum value of body.
        """
        return pulumi.get(self, "client_max_body_size")

    @property
    @pulumi.getter(name="cloudAccessConfigs")
    def cloud_access_configs(self) -> Sequence['outputs.GetDomainsDataCloudAccessConfigResult']:
        """
        Access port information.
        """
        return pulumi.get(self, "cloud_access_configs")

    @property
    @pulumi.getter
    def cname(self) -> str:
        """
        The CNAME value generated by the WAF instance.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter(name="customBotEnable")
    def custom_bot_enable(self) -> int:
        """
        Whether the custom Bot classification strategy has been enabled.
        """
        return pulumi.get(self, "custom_bot_enable")

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Sequence[str]:
        """
        Custom Header.
        """
        return pulumi.get(self, "custom_headers")

    @property
    @pulumi.getter(name="customRspEnable")
    def custom_rsp_enable(self) -> int:
        """
        Whether the custom response interception strategy has been enabled.
        """
        return pulumi.get(self, "custom_rsp_enable")

    @property
    @pulumi.getter(name="defenceMode")
    def defence_mode(self) -> int:
        """
        The protection mode of the instance.
        """
        return pulumi.get(self, "defence_mode")

    @property
    @pulumi.getter(name="dlpEnable")
    def dlp_enable(self) -> int:
        """
        Whether to activate the strategy for preventing the leakage of sensitive information.
        """
        return pulumi.get(self, "dlp_enable")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain name of the protected website that needs to be queried.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="enableHttp2")
    def enable_http2(self) -> int:
        """
        Whether to enable HTTP 2.0.
        """
        return pulumi.get(self, "enable_http2")

    @property
    @pulumi.getter(name="enableIpv6")
    def enable_ipv6(self) -> int:
        """
        Whether it supports protecting IPv6 requests.
        """
        return pulumi.get(self, "enable_ipv6")

    @property
    @pulumi.getter(name="keepAliveRequest")
    def keep_alive_request(self) -> int:
        """
        The number of long connection multiplexes.
        """
        return pulumi.get(self, "keep_alive_request")

    @property
    @pulumi.getter(name="keepAliveTimeOut")
    def keep_alive_time_out(self) -> int:
        """
        Long connection retention time.
        """
        return pulumi.get(self, "keep_alive_time_out")

    @property
    @pulumi.getter(name="lbAlgorithm")
    def lb_algorithm(self) -> str:
        """
        The types of load balancing algorithms.
        """
        return pulumi.get(self, "lb_algorithm")

    @property
    @pulumi.getter(name="protocolFollow")
    def protocol_follow(self) -> int:
        """
        Whether to enable protocol following.
        """
        return pulumi.get(self, "protocol_follow")

    @property
    @pulumi.getter(name="protocolPorts")
    def protocol_ports(self) -> 'outputs.GetDomainsDataProtocolPortsResult':
        """
        Access port information.
        """
        return pulumi.get(self, "protocol_ports")

    @property
    @pulumi.getter
    def protocols(self) -> str:
        """
        Access protocol types.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="proxyConfig")
    def proxy_config(self) -> int:
        """
        Whether to enable proxy configuration.
        """
        return pulumi.get(self, "proxy_config")

    @property
    @pulumi.getter(name="proxyConnectTimeOut")
    def proxy_connect_time_out(self) -> int:
        """
        The timeout period for establishing a connection between the WAF and the backend server.
        """
        return pulumi.get(self, "proxy_connect_time_out")

    @property
    @pulumi.getter(name="proxyKeepAlive")
    def proxy_keep_alive(self) -> int:
        """
        The number of reusable WAF origin long connections.
        """
        return pulumi.get(self, "proxy_keep_alive")

    @property
    @pulumi.getter(name="proxyKeepAliveTimeOut")
    def proxy_keep_alive_time_out(self) -> int:
        """
        Idle long connection timeout period.
        """
        return pulumi.get(self, "proxy_keep_alive_time_out")

    @property
    @pulumi.getter(name="proxyReadTimeOut")
    def proxy_read_time_out(self) -> int:
        """
        The timeout period during which WAF reads the response from the backend server.
        """
        return pulumi.get(self, "proxy_read_time_out")

    @property
    @pulumi.getter(name="proxyRetry")
    def proxy_retry(self) -> int:
        """
        The number of retries for WAF back to source.
        """
        return pulumi.get(self, "proxy_retry")

    @property
    @pulumi.getter(name="proxyWriteTimeOut")
    def proxy_write_time_out(self) -> int:
        """
        The timeout period during which the WAF transmits the request to the backend server.
        """
        return pulumi.get(self, "proxy_write_time_out")

    @property
    @pulumi.getter(name="publicRealServer")
    def public_real_server(self) -> int:
        """
        Connect to the source return mode.
        """
        return pulumi.get(self, "public_real_server")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        domain region that need to be protected by WAF.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serverIps")
    def server_ips(self) -> str:
        """
        The IP of the WAF protection instance.
        """
        return pulumi.get(self, "server_ips")

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> str:
        """
        WAF source IP.
        """
        return pulumi.get(self, "src_ips")

    @property
    @pulumi.getter(name="sslCiphers")
    def ssl_ciphers(self) -> Sequence[str]:
        """
        Encryption kit.
        """
        return pulumi.get(self, "ssl_ciphers")

    @property
    @pulumi.getter(name="sslProtocols")
    def ssl_protocols(self) -> Sequence[str]:
        """
        TLS protocol version.
        """
        return pulumi.get(self, "ssl_protocols")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        The status of access.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemBotEnable")
    def system_bot_enable(self) -> int:
        """
        Whether the managed Bot classification strategy has been enabled.
        """
        return pulumi.get(self, "system_bot_enable")

    @property
    @pulumi.getter(name="tamperProofEnable")
    def tamper_proof_enable(self) -> int:
        """
        Whether to enable the page tamper proof policy.
        """
        return pulumi.get(self, "tamper_proof_enable")

    @property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> int:
        """
        Whether to enable the log service.
        """
        return pulumi.get(self, "tls_enable")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="wafEnable")
    def waf_enable(self) -> int:
        """
        Whether the vulnerability protection strategy has been enabled.
        """
        return pulumi.get(self, "waf_enable")

    @property
    @pulumi.getter(name="wafWhiteReqEnable")
    def waf_white_req_enable(self) -> int:
        """
        Whether to enable the whitening strategy for vulnerability protection requests.
        """
        return pulumi.get(self, "waf_white_req_enable")

    @property
    @pulumi.getter(name="whiteEnable")
    def white_enable(self) -> int:
        """
        Whether the whitelist strategy has been enabled.
        """
        return pulumi.get(self, "white_enable")

    @property
    @pulumi.getter(name="whiteFieldEnable")
    def white_field_enable(self) -> int:
        """
        Whether to enable the whitening strategy for vulnerability protection fields.
        """
        return pulumi.get(self, "white_field_enable")


@pulumi.output_type
class GetDomainsDataBackendGroupResult(dict):
    def __init__(__self__, *,
                 access_ports: Sequence[int],
                 backends: Sequence['outputs.GetDomainsDataBackendGroupBackendResult'],
                 name: str):
        """
        :param Sequence[int] access_ports: Access port number.
        :param Sequence['GetDomainsDataBackendGroupBackendArgs'] backends: The details of the source station group.
        :param str name: Source station group name. Works only on modified scenes.
        """
        pulumi.set(__self__, "access_ports", access_ports)
        pulumi.set(__self__, "backends", backends)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accessPorts")
    def access_ports(self) -> Sequence[int]:
        """
        Access port number.
        """
        return pulumi.get(self, "access_ports")

    @property
    @pulumi.getter
    def backends(self) -> Sequence['outputs.GetDomainsDataBackendGroupBackendResult']:
        """
        The details of the source station group.
        """
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Source station group name. Works only on modified scenes.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDomainsDataBackendGroupBackendResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int,
                 protocol: str,
                 weight: int):
        """
        :param str ip: Source station IP address.
        :param int port: The port number corresponding to the listener.
        :param str protocol: The type of Listener protocol.
        :param int weight: The weight of the source station rules.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Source station IP address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number corresponding to the listener.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The type of Listener protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        The weight of the source station rules.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetDomainsDataCloudAccessConfigResult(dict):
    def __init__(__self__, *,
                 access_protocol: str,
                 instance_id: str,
                 listener_id: str,
                 port: str,
                 protocol: str):
        """
        :param str access_protocol: The access protocol needs to be consistent with the monitoring protocol.
        :param str instance_id: The ID of instance.
        :param str listener_id: The ID of listener.
        :param str port: The port number corresponding to the listener.
        :param str protocol: The type of Listener protocol.
        """
        pulumi.set(__self__, "access_protocol", access_protocol)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="accessProtocol")
    def access_protocol(self) -> str:
        """
        The access protocol needs to be consistent with the monitoring protocol.
        """
        return pulumi.get(self, "access_protocol")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        The ID of listener.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        The port number corresponding to the listener.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The type of Listener protocol.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetDomainsDataProtocolPortsResult(dict):
    def __init__(__self__, *,
                 http: Sequence[int],
                 https: Sequence[int]):
        """
        :param Sequence[int] http: Ports supported by the HTTP protocol.
        :param Sequence[int] https: Ports supported by the HTTPs protocol.
        """
        pulumi.set(__self__, "http", http)
        pulumi.set(__self__, "https", https)

    @property
    @pulumi.getter
    def http(self) -> Sequence[int]:
        """
        Ports supported by the HTTP protocol.
        """
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def https(self) -> Sequence[int]:
        """
        Ports supported by the HTTPs protocol.
        """
        return pulumi.get(self, "https")


@pulumi.output_type
class GetHostGroupsHostGroupListResult(dict):
    def __init__(__self__, *,
                 description: str,
                 host_count: int,
                 host_group_id: int,
                 host_lists: Sequence[str],
                 name: str,
                 related_rules: Sequence['outputs.GetHostGroupsHostGroupListRelatedRuleResult'],
                 update_time: str):
        """
        :param str description: Domain name group description.
        :param int host_count: The number of domain names contained in the domain name group.
        :param int host_group_id: The ID of the domain name group.
        :param Sequence[str] host_lists: Domain names that need to be added to this domain name group.
        :param str name: The name of the domain name group.
        :param Sequence['GetHostGroupsHostGroupListRelatedRuleArgs'] related_rules: The list of associated rules.
        :param str update_time: Domain name group update time.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "host_count", host_count)
        pulumi.set(__self__, "host_group_id", host_group_id)
        pulumi.set(__self__, "host_lists", host_lists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "related_rules", related_rules)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Domain name group description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hostCount")
    def host_count(self) -> int:
        """
        The number of domain names contained in the domain name group.
        """
        return pulumi.get(self, "host_count")

    @property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> int:
        """
        The ID of the domain name group.
        """
        return pulumi.get(self, "host_group_id")

    @property
    @pulumi.getter(name="hostLists")
    def host_lists(self) -> Sequence[str]:
        """
        Domain names that need to be added to this domain name group.
        """
        return pulumi.get(self, "host_lists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the domain name group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="relatedRules")
    def related_rules(self) -> Sequence['outputs.GetHostGroupsHostGroupListRelatedRuleResult']:
        """
        The list of associated rules.
        """
        return pulumi.get(self, "related_rules")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Domain name group update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetHostGroupsHostGroupListRelatedRuleResult(dict):
    def __init__(__self__, *,
                 rule_name: str,
                 rule_tag: str,
                 rule_type: str):
        """
        :param str rule_name: The name of the rule.
        :param str rule_tag: The rule ID associated with domain name groups.
        :param str rule_type: The type of the rule.
        """
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        The rule ID associated with domain name groups.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        The type of the rule.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class GetIpGroupsIpGroupListResult(dict):
    def __init__(__self__, *,
                 ip_count: int,
                 ip_group_id: int,
                 ip_lists: Sequence[str],
                 name: str,
                 related_rules: Sequence['outputs.GetIpGroupsIpGroupListRelatedRuleResult'],
                 update_time: str):
        """
        :param int ip_count: The number of IP addresses within the address group.
        :param int ip_group_id: The ID of the ip group.
        :param Sequence[str] ip_lists: The IP address to be added.
        :param str name: The name of the ip group.
        :param Sequence['GetIpGroupsIpGroupListRelatedRuleArgs'] related_rules: The list of associated rules.
        :param str update_time: ip group update time.
        """
        pulumi.set(__self__, "ip_count", ip_count)
        pulumi.set(__self__, "ip_group_id", ip_group_id)
        pulumi.set(__self__, "ip_lists", ip_lists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "related_rules", related_rules)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="ipCount")
    def ip_count(self) -> int:
        """
        The number of IP addresses within the address group.
        """
        return pulumi.get(self, "ip_count")

    @property
    @pulumi.getter(name="ipGroupId")
    def ip_group_id(self) -> int:
        """
        The ID of the ip group.
        """
        return pulumi.get(self, "ip_group_id")

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Sequence[str]:
        """
        The IP address to be added.
        """
        return pulumi.get(self, "ip_lists")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ip group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="relatedRules")
    def related_rules(self) -> Sequence['outputs.GetIpGroupsIpGroupListRelatedRuleResult']:
        """
        The list of associated rules.
        """
        return pulumi.get(self, "related_rules")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        ip group update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetIpGroupsIpGroupListRelatedRuleResult(dict):
    def __init__(__self__, *,
                 host: str,
                 rule_name: str,
                 rule_tag: str,
                 rule_type: str):
        """
        :param str host: The information of the protected domain names associated with the rules.
        :param str rule_name: The name of the rule.
        :param str rule_tag: Query the association rule ID.
        :param str rule_type: The type of the rule.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The information of the protected domain names associated with the rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Query the association rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        The type of the rule.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class GetProhibitionsIpAggGroupResult(dict):
    def __init__(__self__, *,
                 drop_count: int,
                 ip: str,
                 reason: 'outputs.GetProhibitionsIpAggGroupReasonResult',
                 rule_name: str,
                 rule_tag: str,
                 status: int,
                 update_time: str):
        """
        :param int drop_count: The number of attacks on the source IP of this attack.
        :param str ip: Attack source IP.
        :param 'GetProhibitionsIpAggGroupReasonArgs' reason: Attack type filtering.
        :param str rule_name: Name of the ban rule.
        :param str rule_tag: Ban rule ID.
        :param int status: IP banned status.
        :param str update_time: Status update time.
        """
        pulumi.set(__self__, "drop_count", drop_count)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_tag", rule_tag)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="dropCount")
    def drop_count(self) -> int:
        """
        The number of attacks on the source IP of this attack.
        """
        return pulumi.get(self, "drop_count")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Attack source IP.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def reason(self) -> 'outputs.GetProhibitionsIpAggGroupReasonResult':
        """
        Attack type filtering.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Name of the ban rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        Ban rule ID.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        IP banned status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Status update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetProhibitionsIpAggGroupReasonResult(dict):
    def __init__(__self__, *,
                 black: int,
                 bot: int,
                 geo_black: int,
                 http_flood: int,
                 param_abnormal: int,
                 route_abnormal: int,
                 sensitive_info: int,
                 web_vulnerability: int):
        """
        :param int black: The number of visits to the blacklist.
        :param int bot: The number of Bot attacks.
        :param int geo_black: The number of geographical location access control.
        :param int http_flood: The number of CC attacks.
        :param int param_abnormal: The number of API parameter exceptions.
        :param int route_abnormal: The number of API routing exceptions.
        :param int sensitive_info: The number of times sensitive information is leaked.
        :param int web_vulnerability: The number of Web vulnerability attacks.
        """
        pulumi.set(__self__, "black", black)
        pulumi.set(__self__, "bot", bot)
        pulumi.set(__self__, "geo_black", geo_black)
        pulumi.set(__self__, "http_flood", http_flood)
        pulumi.set(__self__, "param_abnormal", param_abnormal)
        pulumi.set(__self__, "route_abnormal", route_abnormal)
        pulumi.set(__self__, "sensitive_info", sensitive_info)
        pulumi.set(__self__, "web_vulnerability", web_vulnerability)

    @property
    @pulumi.getter
    def black(self) -> int:
        """
        The number of visits to the blacklist.
        """
        return pulumi.get(self, "black")

    @property
    @pulumi.getter
    def bot(self) -> int:
        """
        The number of Bot attacks.
        """
        return pulumi.get(self, "bot")

    @property
    @pulumi.getter(name="geoBlack")
    def geo_black(self) -> int:
        """
        The number of geographical location access control.
        """
        return pulumi.get(self, "geo_black")

    @property
    @pulumi.getter(name="httpFlood")
    def http_flood(self) -> int:
        """
        The number of CC attacks.
        """
        return pulumi.get(self, "http_flood")

    @property
    @pulumi.getter(name="paramAbnormal")
    def param_abnormal(self) -> int:
        """
        The number of API parameter exceptions.
        """
        return pulumi.get(self, "param_abnormal")

    @property
    @pulumi.getter(name="routeAbnormal")
    def route_abnormal(self) -> int:
        """
        The number of API routing exceptions.
        """
        return pulumi.get(self, "route_abnormal")

    @property
    @pulumi.getter(name="sensitiveInfo")
    def sensitive_info(self) -> int:
        """
        The number of times sensitive information is leaked.
        """
        return pulumi.get(self, "sensitive_info")

    @property
    @pulumi.getter(name="webVulnerability")
    def web_vulnerability(self) -> int:
        """
        The number of Web vulnerability attacks.
        """
        return pulumi.get(self, "web_vulnerability")


@pulumi.output_type
class GetServiceCertificatesDataResult(dict):
    def __init__(__self__, *,
                 applicable_domains: str,
                 description: str,
                 expire_time: str,
                 id: int,
                 insert_time: str,
                 name: str):
        """
        :param str applicable_domains: Associate the domain name of this certificate.
        :param str description: The description of the certificate.
        :param str expire_time: The expiration time of the certificate.
        :param int id: The ID of the certificate.
        :param str insert_time: The time when the certificate was added.
        :param str name: The name of the certificate.
        """
        pulumi.set(__self__, "applicable_domains", applicable_domains)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="applicableDomains")
    def applicable_domains(self) -> str:
        """
        Associate the domain name of this certificate.
        """
        return pulumi.get(self, "applicable_domains")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the certificate.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The expiration time of the certificate.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the certificate.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> str:
        """
        The time when the certificate was added.
        """
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the certificate.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSystemBotsDataResult(dict):
    def __init__(__self__, *,
                 action: str,
                 bot_type: str,
                 description: str,
                 enable: int,
                 rule_tag: str):
        """
        :param str action: The execution action of the Bot.
        :param str bot_type: The name of Bot.
        :param str description: The description of Bot.
        :param int enable: Whether to enable Bot.
        :param str rule_tag: The rule ID corresponding to Bot.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bot_type", bot_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "rule_tag", rule_tag)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The execution action of the Bot.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="botType")
    def bot_type(self) -> str:
        """
        The name of Bot.
        """
        return pulumi.get(self, "bot_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of Bot.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether to enable Bot.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> str:
        """
        The rule ID corresponding to Bot.
        """
        return pulumi.get(self, "rule_tag")


