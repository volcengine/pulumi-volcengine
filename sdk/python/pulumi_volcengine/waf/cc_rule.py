# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CcRuleArgs', 'CcRule']

@pulumi.input_type
class CcRuleArgs:
    def __init__(__self__, *,
                 cc_type: pulumi.Input[int],
                 count_time: pulumi.Input[int],
                 effect_time: pulumi.Input[int],
                 enable: pulumi.Input[int],
                 field: pulumi.Input[str],
                 host: pulumi.Input[str],
                 path_threshold: pulumi.Input[int],
                 rule_priority: pulumi.Input[int],
                 single_threshold: pulumi.Input[int],
                 url: pulumi.Input[str],
                 accurate_group: Optional[pulumi.Input['CcRuleAccurateGroupArgs']] = None,
                 advanced_enable: Optional[pulumi.Input[bool]] = None,
                 cron_confs: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleCronConfArgs']]]] = None,
                 cron_enable: Optional[pulumi.Input[int]] = None,
                 exemption_time: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CcRule resource.
        :param pulumi.Input[int] cc_type: The actions performed on subsequent requests after meeting the statistical conditions.
        :param pulumi.Input[int] count_time: The statistical period of the strategy.
        :param pulumi.Input[int] effect_time: Limit the duration, that is, the effective duration of the action.
        :param pulumi.Input[int] enable: Whether to enable the rules.
        :param pulumi.Input[str] field: statistical object.
        :param pulumi.Input[str] host: Website domain names that require the setting of protection rules.
        :param pulumi.Input[int] path_threshold: The threshold of the total number of times the request path is accessed.
        :param pulumi.Input[int] rule_priority: Rule execution priority.
        :param pulumi.Input[int] single_threshold: The threshold of the number of times each statistical object accesses the request path.
        :param pulumi.Input[str] url: The website request path that needs protection.
        :param pulumi.Input['CcRuleAccurateGroupArgs'] accurate_group: Advanced conditions.
        :param pulumi.Input[bool] advanced_enable: Whether to enable advanced conditions.
        :param pulumi.Input[Sequence[pulumi.Input['CcRuleCronConfArgs']]] cron_confs: Details of the periodic loop configuration.
        :param pulumi.Input[int] cron_enable: Whether to set the cycle to take effect.
        :param pulumi.Input[int] exemption_time: Strategy exemption time.
        :param pulumi.Input[str] name: The name of cc rule.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        """
        pulumi.set(__self__, "cc_type", cc_type)
        pulumi.set(__self__, "count_time", count_time)
        pulumi.set(__self__, "effect_time", effect_time)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path_threshold", path_threshold)
        pulumi.set(__self__, "rule_priority", rule_priority)
        pulumi.set(__self__, "single_threshold", single_threshold)
        pulumi.set(__self__, "url", url)
        if accurate_group is not None:
            pulumi.set(__self__, "accurate_group", accurate_group)
        if advanced_enable is not None:
            pulumi.set(__self__, "advanced_enable", advanced_enable)
        if cron_confs is not None:
            pulumi.set(__self__, "cron_confs", cron_confs)
        if cron_enable is not None:
            pulumi.set(__self__, "cron_enable", cron_enable)
        if exemption_time is not None:
            pulumi.set(__self__, "exemption_time", exemption_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)

    @property
    @pulumi.getter(name="ccType")
    def cc_type(self) -> pulumi.Input[int]:
        """
        The actions performed on subsequent requests after meeting the statistical conditions.
        """
        return pulumi.get(self, "cc_type")

    @cc_type.setter
    def cc_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "cc_type", value)

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> pulumi.Input[int]:
        """
        The statistical period of the strategy.
        """
        return pulumi.get(self, "count_time")

    @count_time.setter
    def count_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "count_time", value)

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> pulumi.Input[int]:
        """
        Limit the duration, that is, the effective duration of the action.
        """
        return pulumi.get(self, "effect_time")

    @effect_time.setter
    def effect_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "effect_time", value)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[int]:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> pulumi.Input[int]:
        """
        The threshold of the total number of times the request path is accessed.
        """
        return pulumi.get(self, "path_threshold")

    @path_threshold.setter
    def path_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "path_threshold", value)

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> pulumi.Input[int]:
        """
        Rule execution priority.
        """
        return pulumi.get(self, "rule_priority")

    @rule_priority.setter
    def rule_priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "rule_priority", value)

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> pulumi.Input[int]:
        """
        The threshold of the number of times each statistical object accesses the request path.
        """
        return pulumi.get(self, "single_threshold")

    @single_threshold.setter
    def single_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "single_threshold", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The website request path that needs protection.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> Optional[pulumi.Input['CcRuleAccurateGroupArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @accurate_group.setter
    def accurate_group(self, value: Optional[pulumi.Input['CcRuleAccurateGroupArgs']]):
        pulumi.set(self, "accurate_group", value)

    @property
    @pulumi.getter(name="advancedEnable")
    def advanced_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable advanced conditions.
        """
        return pulumi.get(self, "advanced_enable")

    @advanced_enable.setter
    def advanced_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "advanced_enable", value)

    @property
    @pulumi.getter(name="cronConfs")
    def cron_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleCronConfArgs']]]]:
        """
        Details of the periodic loop configuration.
        """
        return pulumi.get(self, "cron_confs")

    @cron_confs.setter
    def cron_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleCronConfArgs']]]]):
        pulumi.set(self, "cron_confs", value)

    @property
    @pulumi.getter(name="cronEnable")
    def cron_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to set the cycle to take effect.
        """
        return pulumi.get(self, "cron_enable")

    @cron_enable.setter
    def cron_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cron_enable", value)

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> Optional[pulumi.Input[int]]:
        """
        Strategy exemption time.
        """
        return pulumi.get(self, "exemption_time")

    @exemption_time.setter
    def exemption_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exemption_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of cc rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the affiliated project resource.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)


@pulumi.input_type
class _CcRuleState:
    def __init__(__self__, *,
                 accurate_group: Optional[pulumi.Input['CcRuleAccurateGroupArgs']] = None,
                 advanced_enable: Optional[pulumi.Input[bool]] = None,
                 cc_type: Optional[pulumi.Input[int]] = None,
                 count_time: Optional[pulumi.Input[int]] = None,
                 cron_confs: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleCronConfArgs']]]] = None,
                 cron_enable: Optional[pulumi.Input[int]] = None,
                 effect_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 enable_count: Optional[pulumi.Input[int]] = None,
                 exemption_time: Optional[pulumi.Input[int]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 insert_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_threshold: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupArgs']]]] = None,
                 rule_priority: Optional[pulumi.Input[int]] = None,
                 single_threshold: Optional[pulumi.Input[int]] = None,
                 total_count: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CcRule resources.
        :param pulumi.Input['CcRuleAccurateGroupArgs'] accurate_group: Advanced conditions.
        :param pulumi.Input[bool] advanced_enable: Whether to enable advanced conditions.
        :param pulumi.Input[int] cc_type: The actions performed on subsequent requests after meeting the statistical conditions.
        :param pulumi.Input[int] count_time: The statistical period of the strategy.
        :param pulumi.Input[Sequence[pulumi.Input['CcRuleCronConfArgs']]] cron_confs: Details of the periodic loop configuration.
        :param pulumi.Input[int] cron_enable: Whether to set the cycle to take effect.
        :param pulumi.Input[int] effect_time: Limit the duration, that is, the effective duration of the action.
        :param pulumi.Input[int] enable: Whether to enable the rules.
        :param pulumi.Input[int] enable_count: The total number of enabled rules within the rule group.
        :param pulumi.Input[int] exemption_time: Strategy exemption time.
        :param pulumi.Input[str] field: statistical object.
        :param pulumi.Input[str] host: Website domain names that require the setting of protection rules.
        :param pulumi.Input[str] insert_time: The creation time of the rule group.
        :param pulumi.Input[str] name: The name of cc rule.
        :param pulumi.Input[int] path_threshold: The threshold of the total number of times the request path is accessed.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        :param pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupArgs']]] rule_groups: Details of the rule group.
        :param pulumi.Input[int] rule_priority: Rule execution priority.
        :param pulumi.Input[int] single_threshold: The threshold of the number of times each statistical object accesses the request path.
        :param pulumi.Input[int] total_count: The total number of rules within the rule group.
        :param pulumi.Input[str] url: The website request path that needs protection.
        """
        if accurate_group is not None:
            pulumi.set(__self__, "accurate_group", accurate_group)
        if advanced_enable is not None:
            pulumi.set(__self__, "advanced_enable", advanced_enable)
        if cc_type is not None:
            pulumi.set(__self__, "cc_type", cc_type)
        if count_time is not None:
            pulumi.set(__self__, "count_time", count_time)
        if cron_confs is not None:
            pulumi.set(__self__, "cron_confs", cron_confs)
        if cron_enable is not None:
            pulumi.set(__self__, "cron_enable", cron_enable)
        if effect_time is not None:
            pulumi.set(__self__, "effect_time", effect_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if enable_count is not None:
            pulumi.set(__self__, "enable_count", enable_count)
        if exemption_time is not None:
            pulumi.set(__self__, "exemption_time", exemption_time)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if insert_time is not None:
            pulumi.set(__self__, "insert_time", insert_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_threshold is not None:
            pulumi.set(__self__, "path_threshold", path_threshold)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if rule_groups is not None:
            pulumi.set(__self__, "rule_groups", rule_groups)
        if rule_priority is not None:
            pulumi.set(__self__, "rule_priority", rule_priority)
        if single_threshold is not None:
            pulumi.set(__self__, "single_threshold", single_threshold)
        if total_count is not None:
            pulumi.set(__self__, "total_count", total_count)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> Optional[pulumi.Input['CcRuleAccurateGroupArgs']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @accurate_group.setter
    def accurate_group(self, value: Optional[pulumi.Input['CcRuleAccurateGroupArgs']]):
        pulumi.set(self, "accurate_group", value)

    @property
    @pulumi.getter(name="advancedEnable")
    def advanced_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable advanced conditions.
        """
        return pulumi.get(self, "advanced_enable")

    @advanced_enable.setter
    def advanced_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "advanced_enable", value)

    @property
    @pulumi.getter(name="ccType")
    def cc_type(self) -> Optional[pulumi.Input[int]]:
        """
        The actions performed on subsequent requests after meeting the statistical conditions.
        """
        return pulumi.get(self, "cc_type")

    @cc_type.setter
    def cc_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cc_type", value)

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> Optional[pulumi.Input[int]]:
        """
        The statistical period of the strategy.
        """
        return pulumi.get(self, "count_time")

    @count_time.setter
    def count_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count_time", value)

    @property
    @pulumi.getter(name="cronConfs")
    def cron_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleCronConfArgs']]]]:
        """
        Details of the periodic loop configuration.
        """
        return pulumi.get(self, "cron_confs")

    @cron_confs.setter
    def cron_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleCronConfArgs']]]]):
        pulumi.set(self, "cron_confs", value)

    @property
    @pulumi.getter(name="cronEnable")
    def cron_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to set the cycle to take effect.
        """
        return pulumi.get(self, "cron_enable")

    @cron_enable.setter
    def cron_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cron_enable", value)

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> Optional[pulumi.Input[int]]:
        """
        Limit the duration, that is, the effective duration of the action.
        """
        return pulumi.get(self, "effect_time")

    @effect_time.setter
    def effect_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "effect_time", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="enableCount")
    def enable_count(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of enabled rules within the rule group.
        """
        return pulumi.get(self, "enable_count")

    @enable_count.setter
    def enable_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_count", value)

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> Optional[pulumi.Input[int]]:
        """
        Strategy exemption time.
        """
        return pulumi.get(self, "exemption_time")

    @exemption_time.setter
    def exemption_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exemption_time", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of the rule group.
        """
        return pulumi.get(self, "insert_time")

    @insert_time.setter
    def insert_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of cc rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold of the total number of times the request path is accessed.
        """
        return pulumi.get(self, "path_threshold")

    @path_threshold.setter
    def path_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "path_threshold", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the affiliated project resource.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="ruleGroups")
    def rule_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupArgs']]]]:
        """
        Details of the rule group.
        """
        return pulumi.get(self, "rule_groups")

    @rule_groups.setter
    def rule_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CcRuleRuleGroupArgs']]]]):
        pulumi.set(self, "rule_groups", value)

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Rule execution priority.
        """
        return pulumi.get(self, "rule_priority")

    @rule_priority.setter
    def rule_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_priority", value)

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold of the number of times each statistical object accesses the request path.
        """
        return pulumi.get(self, "single_threshold")

    @single_threshold.setter
    def single_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "single_threshold", value)

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of rules within the rule group.
        """
        return pulumi.get(self, "total_count")

    @total_count.setter
    def total_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_count", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The website request path that needs protection.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class CcRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accurate_group: Optional[pulumi.Input[pulumi.InputType['CcRuleAccurateGroupArgs']]] = None,
                 advanced_enable: Optional[pulumi.Input[bool]] = None,
                 cc_type: Optional[pulumi.Input[int]] = None,
                 count_time: Optional[pulumi.Input[int]] = None,
                 cron_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcRuleCronConfArgs']]]]] = None,
                 cron_enable: Optional[pulumi.Input[int]] = None,
                 effect_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 exemption_time: Optional[pulumi.Input[int]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_threshold: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rule_priority: Optional[pulumi.Input[int]] = None,
                 single_threshold: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage waf cc rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.CcRule("foo",
            accurate_group=volcengine.waf.CcRuleAccurateGroupArgs(
                accurate_rules=[
                    volcengine.waf.CcRuleAccurateGroupAccurateRuleArgs(
                        http_obj="request.uri",
                        obj_type=1,
                        opretar=2,
                        property=0,
                        value_string="tf",
                    ),
                    volcengine.waf.CcRuleAccurateGroupAccurateRuleArgs(
                        http_obj="request.schema",
                        obj_type=0,
                        opretar=2,
                        property=0,
                        value_string="tf-2",
                    ),
                ],
                logic=2,
            ),
            cc_type=1,
            count_time=102,
            cron_confs=[
                volcengine.waf.CcRuleCronConfArgs(
                    crontab="* 0 * * 1,2,3,4,5,6,0",
                    path_threshold=123,
                    single_threshold=234,
                ),
                volcengine.waf.CcRuleCronConfArgs(
                    crontab="* 3-8 * * 1,2,3,4,5,6,0",
                    path_threshold=345,
                    single_threshold=456,
                ),
            ],
            cron_enable=1,
            effect_time=200,
            enable=1,
            exemption_time=0,
            field="HEADER:User-Agemnt",
            host="www.tf-test.com",
            path_threshold=101,
            rule_priority=2,
            single_threshold=100,
            url="/")
        ```

        ## Import

        WafCcRule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/ccRule:CcRule default resource_id:Host
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CcRuleAccurateGroupArgs']] accurate_group: Advanced conditions.
        :param pulumi.Input[bool] advanced_enable: Whether to enable advanced conditions.
        :param pulumi.Input[int] cc_type: The actions performed on subsequent requests after meeting the statistical conditions.
        :param pulumi.Input[int] count_time: The statistical period of the strategy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcRuleCronConfArgs']]]] cron_confs: Details of the periodic loop configuration.
        :param pulumi.Input[int] cron_enable: Whether to set the cycle to take effect.
        :param pulumi.Input[int] effect_time: Limit the duration, that is, the effective duration of the action.
        :param pulumi.Input[int] enable: Whether to enable the rules.
        :param pulumi.Input[int] exemption_time: Strategy exemption time.
        :param pulumi.Input[str] field: statistical object.
        :param pulumi.Input[str] host: Website domain names that require the setting of protection rules.
        :param pulumi.Input[str] name: The name of cc rule.
        :param pulumi.Input[int] path_threshold: The threshold of the total number of times the request path is accessed.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        :param pulumi.Input[int] rule_priority: Rule execution priority.
        :param pulumi.Input[int] single_threshold: The threshold of the number of times each statistical object accesses the request path.
        :param pulumi.Input[str] url: The website request path that needs protection.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CcRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage waf cc rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.CcRule("foo",
            accurate_group=volcengine.waf.CcRuleAccurateGroupArgs(
                accurate_rules=[
                    volcengine.waf.CcRuleAccurateGroupAccurateRuleArgs(
                        http_obj="request.uri",
                        obj_type=1,
                        opretar=2,
                        property=0,
                        value_string="tf",
                    ),
                    volcengine.waf.CcRuleAccurateGroupAccurateRuleArgs(
                        http_obj="request.schema",
                        obj_type=0,
                        opretar=2,
                        property=0,
                        value_string="tf-2",
                    ),
                ],
                logic=2,
            ),
            cc_type=1,
            count_time=102,
            cron_confs=[
                volcengine.waf.CcRuleCronConfArgs(
                    crontab="* 0 * * 1,2,3,4,5,6,0",
                    path_threshold=123,
                    single_threshold=234,
                ),
                volcengine.waf.CcRuleCronConfArgs(
                    crontab="* 3-8 * * 1,2,3,4,5,6,0",
                    path_threshold=345,
                    single_threshold=456,
                ),
            ],
            cron_enable=1,
            effect_time=200,
            enable=1,
            exemption_time=0,
            field="HEADER:User-Agemnt",
            host="www.tf-test.com",
            path_threshold=101,
            rule_priority=2,
            single_threshold=100,
            url="/")
        ```

        ## Import

        WafCcRule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/ccRule:CcRule default resource_id:Host
        ```

        :param str resource_name: The name of the resource.
        :param CcRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CcRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accurate_group: Optional[pulumi.Input[pulumi.InputType['CcRuleAccurateGroupArgs']]] = None,
                 advanced_enable: Optional[pulumi.Input[bool]] = None,
                 cc_type: Optional[pulumi.Input[int]] = None,
                 count_time: Optional[pulumi.Input[int]] = None,
                 cron_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcRuleCronConfArgs']]]]] = None,
                 cron_enable: Optional[pulumi.Input[int]] = None,
                 effect_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 exemption_time: Optional[pulumi.Input[int]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_threshold: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rule_priority: Optional[pulumi.Input[int]] = None,
                 single_threshold: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CcRuleArgs.__new__(CcRuleArgs)

            __props__.__dict__["accurate_group"] = accurate_group
            __props__.__dict__["advanced_enable"] = advanced_enable
            if cc_type is None and not opts.urn:
                raise TypeError("Missing required property 'cc_type'")
            __props__.__dict__["cc_type"] = cc_type
            if count_time is None and not opts.urn:
                raise TypeError("Missing required property 'count_time'")
            __props__.__dict__["count_time"] = count_time
            __props__.__dict__["cron_confs"] = cron_confs
            __props__.__dict__["cron_enable"] = cron_enable
            if effect_time is None and not opts.urn:
                raise TypeError("Missing required property 'effect_time'")
            __props__.__dict__["effect_time"] = effect_time
            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
            __props__.__dict__["exemption_time"] = exemption_time
            if field is None and not opts.urn:
                raise TypeError("Missing required property 'field'")
            __props__.__dict__["field"] = field
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["name"] = name
            if path_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'path_threshold'")
            __props__.__dict__["path_threshold"] = path_threshold
            __props__.__dict__["project_name"] = project_name
            if rule_priority is None and not opts.urn:
                raise TypeError("Missing required property 'rule_priority'")
            __props__.__dict__["rule_priority"] = rule_priority
            if single_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'single_threshold'")
            __props__.__dict__["single_threshold"] = single_threshold
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["enable_count"] = None
            __props__.__dict__["insert_time"] = None
            __props__.__dict__["rule_groups"] = None
            __props__.__dict__["total_count"] = None
        super(CcRule, __self__).__init__(
            'volcengine:waf/ccRule:CcRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accurate_group: Optional[pulumi.Input[pulumi.InputType['CcRuleAccurateGroupArgs']]] = None,
            advanced_enable: Optional[pulumi.Input[bool]] = None,
            cc_type: Optional[pulumi.Input[int]] = None,
            count_time: Optional[pulumi.Input[int]] = None,
            cron_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcRuleCronConfArgs']]]]] = None,
            cron_enable: Optional[pulumi.Input[int]] = None,
            effect_time: Optional[pulumi.Input[int]] = None,
            enable: Optional[pulumi.Input[int]] = None,
            enable_count: Optional[pulumi.Input[int]] = None,
            exemption_time: Optional[pulumi.Input[int]] = None,
            field: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            insert_time: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            path_threshold: Optional[pulumi.Input[int]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcRuleRuleGroupArgs']]]]] = None,
            rule_priority: Optional[pulumi.Input[int]] = None,
            single_threshold: Optional[pulumi.Input[int]] = None,
            total_count: Optional[pulumi.Input[int]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'CcRule':
        """
        Get an existing CcRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CcRuleAccurateGroupArgs']] accurate_group: Advanced conditions.
        :param pulumi.Input[bool] advanced_enable: Whether to enable advanced conditions.
        :param pulumi.Input[int] cc_type: The actions performed on subsequent requests after meeting the statistical conditions.
        :param pulumi.Input[int] count_time: The statistical period of the strategy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcRuleCronConfArgs']]]] cron_confs: Details of the periodic loop configuration.
        :param pulumi.Input[int] cron_enable: Whether to set the cycle to take effect.
        :param pulumi.Input[int] effect_time: Limit the duration, that is, the effective duration of the action.
        :param pulumi.Input[int] enable: Whether to enable the rules.
        :param pulumi.Input[int] enable_count: The total number of enabled rules within the rule group.
        :param pulumi.Input[int] exemption_time: Strategy exemption time.
        :param pulumi.Input[str] field: statistical object.
        :param pulumi.Input[str] host: Website domain names that require the setting of protection rules.
        :param pulumi.Input[str] insert_time: The creation time of the rule group.
        :param pulumi.Input[str] name: The name of cc rule.
        :param pulumi.Input[int] path_threshold: The threshold of the total number of times the request path is accessed.
        :param pulumi.Input[str] project_name: The Name of the affiliated project resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcRuleRuleGroupArgs']]]] rule_groups: Details of the rule group.
        :param pulumi.Input[int] rule_priority: Rule execution priority.
        :param pulumi.Input[int] single_threshold: The threshold of the number of times each statistical object accesses the request path.
        :param pulumi.Input[int] total_count: The total number of rules within the rule group.
        :param pulumi.Input[str] url: The website request path that needs protection.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CcRuleState.__new__(_CcRuleState)

        __props__.__dict__["accurate_group"] = accurate_group
        __props__.__dict__["advanced_enable"] = advanced_enable
        __props__.__dict__["cc_type"] = cc_type
        __props__.__dict__["count_time"] = count_time
        __props__.__dict__["cron_confs"] = cron_confs
        __props__.__dict__["cron_enable"] = cron_enable
        __props__.__dict__["effect_time"] = effect_time
        __props__.__dict__["enable"] = enable
        __props__.__dict__["enable_count"] = enable_count
        __props__.__dict__["exemption_time"] = exemption_time
        __props__.__dict__["field"] = field
        __props__.__dict__["host"] = host
        __props__.__dict__["insert_time"] = insert_time
        __props__.__dict__["name"] = name
        __props__.__dict__["path_threshold"] = path_threshold
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["rule_groups"] = rule_groups
        __props__.__dict__["rule_priority"] = rule_priority
        __props__.__dict__["single_threshold"] = single_threshold
        __props__.__dict__["total_count"] = total_count
        __props__.__dict__["url"] = url
        return CcRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accurateGroup")
    def accurate_group(self) -> pulumi.Output[Optional['outputs.CcRuleAccurateGroup']]:
        """
        Advanced conditions.
        """
        return pulumi.get(self, "accurate_group")

    @property
    @pulumi.getter(name="advancedEnable")
    def advanced_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable advanced conditions.
        """
        return pulumi.get(self, "advanced_enable")

    @property
    @pulumi.getter(name="ccType")
    def cc_type(self) -> pulumi.Output[int]:
        """
        The actions performed on subsequent requests after meeting the statistical conditions.
        """
        return pulumi.get(self, "cc_type")

    @property
    @pulumi.getter(name="countTime")
    def count_time(self) -> pulumi.Output[int]:
        """
        The statistical period of the strategy.
        """
        return pulumi.get(self, "count_time")

    @property
    @pulumi.getter(name="cronConfs")
    def cron_confs(self) -> pulumi.Output[Optional[Sequence['outputs.CcRuleCronConf']]]:
        """
        Details of the periodic loop configuration.
        """
        return pulumi.get(self, "cron_confs")

    @property
    @pulumi.getter(name="cronEnable")
    def cron_enable(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to set the cycle to take effect.
        """
        return pulumi.get(self, "cron_enable")

    @property
    @pulumi.getter(name="effectTime")
    def effect_time(self) -> pulumi.Output[int]:
        """
        Limit the duration, that is, the effective duration of the action.
        """
        return pulumi.get(self, "effect_time")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the rules.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="enableCount")
    def enable_count(self) -> pulumi.Output[int]:
        """
        The total number of enabled rules within the rule group.
        """
        return pulumi.get(self, "enable_count")

    @property
    @pulumi.getter(name="exemptionTime")
    def exemption_time(self) -> pulumi.Output[Optional[int]]:
        """
        Strategy exemption time.
        """
        return pulumi.get(self, "exemption_time")

    @property
    @pulumi.getter
    def field(self) -> pulumi.Output[str]:
        """
        statistical object.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Website domain names that require the setting of protection rules.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> pulumi.Output[str]:
        """
        The creation time of the rule group.
        """
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of cc rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pathThreshold")
    def path_threshold(self) -> pulumi.Output[int]:
        """
        The threshold of the total number of times the request path is accessed.
        """
        return pulumi.get(self, "path_threshold")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[Optional[str]]:
        """
        The Name of the affiliated project resource.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="ruleGroups")
    def rule_groups(self) -> pulumi.Output[Sequence['outputs.CcRuleRuleGroup']]:
        """
        Details of the rule group.
        """
        return pulumi.get(self, "rule_groups")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> pulumi.Output[int]:
        """
        Rule execution priority.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter(name="singleThreshold")
    def single_threshold(self) -> pulumi.Output[int]:
        """
        The threshold of the number of times each statistical object accesses the request path.
        """
        return pulumi.get(self, "single_threshold")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> pulumi.Output[int]:
        """
        The total number of rules within the rule group.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The website request path that needs protection.
        """
        return pulumi.get(self, "url")

