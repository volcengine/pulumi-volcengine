# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WafDomainArgs', 'WafDomain']

@pulumi.input_type
class WafDomainArgs:
    def __init__(__self__, *,
                 access_mode: pulumi.Input[int],
                 domain: pulumi.Input[str],
                 api_enable: Optional[pulumi.Input[int]] = None,
                 auto_cc_enable: Optional[pulumi.Input[int]] = None,
                 backend_groups: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupArgs']]]] = None,
                 black_ip_enable: Optional[pulumi.Input[int]] = None,
                 black_lct_enable: Optional[pulumi.Input[int]] = None,
                 bot_dytoken_enable: Optional[pulumi.Input[int]] = None,
                 bot_frequency_enable: Optional[pulumi.Input[int]] = None,
                 bot_repeat_enable: Optional[pulumi.Input[int]] = None,
                 bot_sequence_default_action: Optional[pulumi.Input[int]] = None,
                 bot_sequence_enable: Optional[pulumi.Input[int]] = None,
                 cc_enable: Optional[pulumi.Input[int]] = None,
                 certificate_id: Optional[pulumi.Input[int]] = None,
                 certificate_platform: Optional[pulumi.Input[str]] = None,
                 client_ip_location: Optional[pulumi.Input[int]] = None,
                 client_max_body_size: Optional[pulumi.Input[int]] = None,
                 cloud_access_configs: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainCloudAccessConfigArgs']]]] = None,
                 custom_bot_enable: Optional[pulumi.Input[int]] = None,
                 custom_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_rsp_enable: Optional[pulumi.Input[int]] = None,
                 custom_sni: Optional[pulumi.Input[str]] = None,
                 defence_mode: Optional[pulumi.Input[int]] = None,
                 dlp_enable: Optional[pulumi.Input[int]] = None,
                 enable_custom_redirect: Optional[pulumi.Input[int]] = None,
                 enable_http2: Optional[pulumi.Input[int]] = None,
                 enable_ipv6: Optional[pulumi.Input[int]] = None,
                 enable_sni: Optional[pulumi.Input[int]] = None,
                 extra_defence_mode_lb_instances: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainExtraDefenceModeLbInstanceArgs']]]] = None,
                 keep_alive_request: Optional[pulumi.Input[int]] = None,
                 keep_alive_time_out: Optional[pulumi.Input[int]] = None,
                 lb_algorithm: Optional[pulumi.Input[str]] = None,
                 llm_available: Optional[pulumi.Input[bool]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 protocol_follow: Optional[pulumi.Input[int]] = None,
                 protocol_ports: Optional[pulumi.Input['WafDomainProtocolPortsArgs']] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy_config: Optional[pulumi.Input[int]] = None,
                 proxy_connect_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_keep_alive: Optional[pulumi.Input[int]] = None,
                 proxy_keep_alive_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_read_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_retry: Optional[pulumi.Input[int]] = None,
                 proxy_write_time_out: Optional[pulumi.Input[int]] = None,
                 public_real_server: Optional[pulumi.Input[int]] = None,
                 redirect_https: Optional[pulumi.Input[bool]] = None,
                 ssl_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_bot_enable: Optional[pulumi.Input[int]] = None,
                 tamper_proof_enable: Optional[pulumi.Input[int]] = None,
                 tls_enable: Optional[pulumi.Input[int]] = None,
                 tls_fields_config: Optional[pulumi.Input['WafDomainTlsFieldsConfigArgs']] = None,
                 volc_certificate_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 waf_enable: Optional[pulumi.Input[int]] = None,
                 waf_white_req_enable: Optional[pulumi.Input[int]] = None,
                 white_enable: Optional[pulumi.Input[int]] = None,
                 white_field_enable: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a WafDomain resource.
        :param pulumi.Input[int] access_mode: Access mode.
        :param pulumi.Input[str] domain: List of domain names that need to be protected by WAF.
        :param pulumi.Input[int] api_enable: Whether to enable the API protection policy. Works only on modified scenes.
        :param pulumi.Input[int] auto_cc_enable: Whether to enable the intelligent CC protection strategy. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupArgs']]] backend_groups: The configuration of source station.
        :param pulumi.Input[int] black_ip_enable: Whether to enable the access ban list policy. Works only on modified scenes.
        :param pulumi.Input[int] black_lct_enable: Whether to enable the geographical location access control policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_dytoken_enable: Whether to enable the bot dynamic token. Works only on modified scenes.
        :param pulumi.Input[int] bot_frequency_enable: Whether to enable the bot frequency limit policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_repeat_enable: Whether to enable the bot frequency limit policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_sequence_default_action: Set the default actions of the bot behavior map strategy. Works only on modified scenes.
        :param pulumi.Input[int] bot_sequence_enable: Whether to enable the bot behavior map. Works only on modified scenes.
        :param pulumi.Input[int] cc_enable: Whether to enable the CC protection policy. Works only on modified scenes.
        :param pulumi.Input[int] certificate_id: When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        :param pulumi.Input[str] certificate_platform: Certificate custody platform.
        :param pulumi.Input[int] client_ip_location: The method of obtaining the client IP.
        :param pulumi.Input[int] client_max_body_size: The client requests the maximum value of body.
        :param pulumi.Input[Sequence[pulumi.Input['WafDomainCloudAccessConfigArgs']]] cloud_access_configs: Access port information.If AccessMode is Alb/CLB, this field is required.
        :param pulumi.Input[int] custom_bot_enable: Whether to enable the custom Bot classification strategy. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] custom_headers: Custom Header.
        :param pulumi.Input[int] custom_rsp_enable: Whether to enable the custom response interception policy. Works only on modified scenes.
        :param pulumi.Input[str] custom_sni: Custom SNI needs to be configured when EnableSNI=1. Works only on modified scenes.
        :param pulumi.Input[int] defence_mode: The protection mode of the instance. Works only on modified scenes.
        :param pulumi.Input[int] dlp_enable: Whether to activate the strategy for preventing the leakage of sensitive information. Works only on modified scenes.
        :param pulumi.Input[int] enable_custom_redirect: Whether to enable user-defined redirection. Works only on modified scenes.
        :param pulumi.Input[int] enable_http2: Whether to enable HTTP 2.0.
        :param pulumi.Input[int] enable_ipv6: Whether it supports protecting IPv6 requests.
        :param pulumi.Input[int] enable_sni: Whether to enable the SNI configuration. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input['WafDomainExtraDefenceModeLbInstanceArgs']]] extra_defence_mode_lb_instances: The protection mode of the exception instance. It takes effect when the access mode is accessed through an application load balancing (ALB) instance (AccessMode=20). Works only on modified scenes.
        :param pulumi.Input[int] keep_alive_request: The number of long connection multiplexes.
        :param pulumi.Input[int] keep_alive_time_out: Long connection retention time.
        :param pulumi.Input[str] lb_algorithm: The types of load balancing algorithms.
        :param pulumi.Input[bool] llm_available: Is LLM available. Works only on modified scenes.
        :param pulumi.Input[str] project_name: The name of project. Works only on modified scenes.
        :param pulumi.Input[int] protocol_follow: Whether to enable protocol following.
        :param pulumi.Input['WafDomainProtocolPortsArgs'] protocol_ports: Access port information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: Access protocol types.
        :param pulumi.Input[int] proxy_config: Whether to enable proxy configuration.
        :param pulumi.Input[int] proxy_connect_time_out: The timeout period for establishing a connection between the WAF and the backend server.
        :param pulumi.Input[int] proxy_keep_alive: The number of reusable WAF origin long connections.
        :param pulumi.Input[int] proxy_keep_alive_time_out: Idle long connection timeout period.
        :param pulumi.Input[int] proxy_read_time_out: The timeout period during which WAF reads the response from the backend server.
        :param pulumi.Input[int] proxy_retry: The number of retries for WAF back to source.
        :param pulumi.Input[int] proxy_write_time_out: The timeout period during which the WAF transmits the request to the backend server.
        :param pulumi.Input[int] public_real_server: Connect to the source return mode.
        :param pulumi.Input[bool] redirect_https: When only the HTTPS protocol is enabled, whether to redirect HTTP requests to HTTPS. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssl_ciphers: Encryption kit.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssl_protocols: TLS protocol version.
        :param pulumi.Input[int] system_bot_enable: Whether to enable the managed Bot classification strategy. Works only on modified scenes.
        :param pulumi.Input[int] tamper_proof_enable: Whether to enable the page tamper-proof policy. Works only on modified scenes.
        :param pulumi.Input[int] tls_enable: Whether to enable the log service.
        :param pulumi.Input['WafDomainTlsFieldsConfigArgs'] tls_fields_config: Details of log field configuration. Works only on modified scenes.
        :param pulumi.Input[str] volc_certificate_id: When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        :param pulumi.Input[str] vpc_id: The ID of vpc.
        :param pulumi.Input[int] waf_enable: Whether to enable the vulnerability protection strategy. Works only on modified scenes.
        :param pulumi.Input[int] waf_white_req_enable: Whether to enable the whitening strategy for vulnerability protection requests. Works only on modified scenes.
        :param pulumi.Input[int] white_enable: Whether to enable the access list policy. Works only on modified scenes.
        :param pulumi.Input[int] white_field_enable: Whether to enable the whitening strategy for vulnerability protection fields. Works only on modified scenes.
        """
        pulumi.set(__self__, "access_mode", access_mode)
        pulumi.set(__self__, "domain", domain)
        if api_enable is not None:
            pulumi.set(__self__, "api_enable", api_enable)
        if auto_cc_enable is not None:
            pulumi.set(__self__, "auto_cc_enable", auto_cc_enable)
        if backend_groups is not None:
            pulumi.set(__self__, "backend_groups", backend_groups)
        if black_ip_enable is not None:
            pulumi.set(__self__, "black_ip_enable", black_ip_enable)
        if black_lct_enable is not None:
            pulumi.set(__self__, "black_lct_enable", black_lct_enable)
        if bot_dytoken_enable is not None:
            pulumi.set(__self__, "bot_dytoken_enable", bot_dytoken_enable)
        if bot_frequency_enable is not None:
            pulumi.set(__self__, "bot_frequency_enable", bot_frequency_enable)
        if bot_repeat_enable is not None:
            pulumi.set(__self__, "bot_repeat_enable", bot_repeat_enable)
        if bot_sequence_default_action is not None:
            pulumi.set(__self__, "bot_sequence_default_action", bot_sequence_default_action)
        if bot_sequence_enable is not None:
            pulumi.set(__self__, "bot_sequence_enable", bot_sequence_enable)
        if cc_enable is not None:
            pulumi.set(__self__, "cc_enable", cc_enable)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_platform is not None:
            pulumi.set(__self__, "certificate_platform", certificate_platform)
        if client_ip_location is not None:
            pulumi.set(__self__, "client_ip_location", client_ip_location)
        if client_max_body_size is not None:
            pulumi.set(__self__, "client_max_body_size", client_max_body_size)
        if cloud_access_configs is not None:
            pulumi.set(__self__, "cloud_access_configs", cloud_access_configs)
        if custom_bot_enable is not None:
            pulumi.set(__self__, "custom_bot_enable", custom_bot_enable)
        if custom_headers is not None:
            pulumi.set(__self__, "custom_headers", custom_headers)
        if custom_rsp_enable is not None:
            pulumi.set(__self__, "custom_rsp_enable", custom_rsp_enable)
        if custom_sni is not None:
            pulumi.set(__self__, "custom_sni", custom_sni)
        if defence_mode is not None:
            pulumi.set(__self__, "defence_mode", defence_mode)
        if dlp_enable is not None:
            pulumi.set(__self__, "dlp_enable", dlp_enable)
        if enable_custom_redirect is not None:
            pulumi.set(__self__, "enable_custom_redirect", enable_custom_redirect)
        if enable_http2 is not None:
            pulumi.set(__self__, "enable_http2", enable_http2)
        if enable_ipv6 is not None:
            pulumi.set(__self__, "enable_ipv6", enable_ipv6)
        if enable_sni is not None:
            pulumi.set(__self__, "enable_sni", enable_sni)
        if extra_defence_mode_lb_instances is not None:
            pulumi.set(__self__, "extra_defence_mode_lb_instances", extra_defence_mode_lb_instances)
        if keep_alive_request is not None:
            pulumi.set(__self__, "keep_alive_request", keep_alive_request)
        if keep_alive_time_out is not None:
            pulumi.set(__self__, "keep_alive_time_out", keep_alive_time_out)
        if lb_algorithm is not None:
            pulumi.set(__self__, "lb_algorithm", lb_algorithm)
        if llm_available is not None:
            pulumi.set(__self__, "llm_available", llm_available)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if protocol_follow is not None:
            pulumi.set(__self__, "protocol_follow", protocol_follow)
        if protocol_ports is not None:
            pulumi.set(__self__, "protocol_ports", protocol_ports)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if proxy_config is not None:
            pulumi.set(__self__, "proxy_config", proxy_config)
        if proxy_connect_time_out is not None:
            pulumi.set(__self__, "proxy_connect_time_out", proxy_connect_time_out)
        if proxy_keep_alive is not None:
            pulumi.set(__self__, "proxy_keep_alive", proxy_keep_alive)
        if proxy_keep_alive_time_out is not None:
            pulumi.set(__self__, "proxy_keep_alive_time_out", proxy_keep_alive_time_out)
        if proxy_read_time_out is not None:
            pulumi.set(__self__, "proxy_read_time_out", proxy_read_time_out)
        if proxy_retry is not None:
            pulumi.set(__self__, "proxy_retry", proxy_retry)
        if proxy_write_time_out is not None:
            pulumi.set(__self__, "proxy_write_time_out", proxy_write_time_out)
        if public_real_server is not None:
            pulumi.set(__self__, "public_real_server", public_real_server)
        if redirect_https is not None:
            pulumi.set(__self__, "redirect_https", redirect_https)
        if ssl_ciphers is not None:
            pulumi.set(__self__, "ssl_ciphers", ssl_ciphers)
        if ssl_protocols is not None:
            pulumi.set(__self__, "ssl_protocols", ssl_protocols)
        if system_bot_enable is not None:
            pulumi.set(__self__, "system_bot_enable", system_bot_enable)
        if tamper_proof_enable is not None:
            pulumi.set(__self__, "tamper_proof_enable", tamper_proof_enable)
        if tls_enable is not None:
            pulumi.set(__self__, "tls_enable", tls_enable)
        if tls_fields_config is not None:
            pulumi.set(__self__, "tls_fields_config", tls_fields_config)
        if volc_certificate_id is not None:
            pulumi.set(__self__, "volc_certificate_id", volc_certificate_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if waf_enable is not None:
            pulumi.set(__self__, "waf_enable", waf_enable)
        if waf_white_req_enable is not None:
            pulumi.set(__self__, "waf_white_req_enable", waf_white_req_enable)
        if white_enable is not None:
            pulumi.set(__self__, "white_enable", white_enable)
        if white_field_enable is not None:
            pulumi.set(__self__, "white_field_enable", white_field_enable)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> pulumi.Input[int]:
        """
        Access mode.
        """
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: pulumi.Input[int]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        List of domain names that need to be protected by WAF.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="apiEnable")
    def api_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the API protection policy. Works only on modified scenes.
        """
        return pulumi.get(self, "api_enable")

    @api_enable.setter
    def api_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "api_enable", value)

    @property
    @pulumi.getter(name="autoCcEnable")
    def auto_cc_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the intelligent CC protection strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "auto_cc_enable")

    @auto_cc_enable.setter
    def auto_cc_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_cc_enable", value)

    @property
    @pulumi.getter(name="backendGroups")
    def backend_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupArgs']]]]:
        """
        The configuration of source station.
        """
        return pulumi.get(self, "backend_groups")

    @backend_groups.setter
    def backend_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupArgs']]]]):
        pulumi.set(self, "backend_groups", value)

    @property
    @pulumi.getter(name="blackIpEnable")
    def black_ip_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the access ban list policy. Works only on modified scenes.
        """
        return pulumi.get(self, "black_ip_enable")

    @black_ip_enable.setter
    def black_ip_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "black_ip_enable", value)

    @property
    @pulumi.getter(name="blackLctEnable")
    def black_lct_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the geographical location access control policy. Works only on modified scenes.
        """
        return pulumi.get(self, "black_lct_enable")

    @black_lct_enable.setter
    def black_lct_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "black_lct_enable", value)

    @property
    @pulumi.getter(name="botDytokenEnable")
    def bot_dytoken_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the bot dynamic token. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_dytoken_enable")

    @bot_dytoken_enable.setter
    def bot_dytoken_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_dytoken_enable", value)

    @property
    @pulumi.getter(name="botFrequencyEnable")
    def bot_frequency_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the bot frequency limit policy. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_frequency_enable")

    @bot_frequency_enable.setter
    def bot_frequency_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_frequency_enable", value)

    @property
    @pulumi.getter(name="botRepeatEnable")
    def bot_repeat_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the bot frequency limit policy. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_repeat_enable")

    @bot_repeat_enable.setter
    def bot_repeat_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_repeat_enable", value)

    @property
    @pulumi.getter(name="botSequenceDefaultAction")
    def bot_sequence_default_action(self) -> Optional[pulumi.Input[int]]:
        """
        Set the default actions of the bot behavior map strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_sequence_default_action")

    @bot_sequence_default_action.setter
    def bot_sequence_default_action(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_sequence_default_action", value)

    @property
    @pulumi.getter(name="botSequenceEnable")
    def bot_sequence_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the bot behavior map. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_sequence_enable")

    @bot_sequence_enable.setter
    def bot_sequence_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_sequence_enable", value)

    @property
    @pulumi.getter(name="ccEnable")
    def cc_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the CC protection policy. Works only on modified scenes.
        """
        return pulumi.get(self, "cc_enable")

    @cc_enable.setter
    def cc_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cc_enable", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[int]]:
        """
        When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificatePlatform")
    def certificate_platform(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate custody platform.
        """
        return pulumi.get(self, "certificate_platform")

    @certificate_platform.setter
    def certificate_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_platform", value)

    @property
    @pulumi.getter(name="clientIpLocation")
    def client_ip_location(self) -> Optional[pulumi.Input[int]]:
        """
        The method of obtaining the client IP.
        """
        return pulumi.get(self, "client_ip_location")

    @client_ip_location.setter
    def client_ip_location(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_ip_location", value)

    @property
    @pulumi.getter(name="clientMaxBodySize")
    def client_max_body_size(self) -> Optional[pulumi.Input[int]]:
        """
        The client requests the maximum value of body.
        """
        return pulumi.get(self, "client_max_body_size")

    @client_max_body_size.setter
    def client_max_body_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_max_body_size", value)

    @property
    @pulumi.getter(name="cloudAccessConfigs")
    def cloud_access_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainCloudAccessConfigArgs']]]]:
        """
        Access port information.If AccessMode is Alb/CLB, this field is required.
        """
        return pulumi.get(self, "cloud_access_configs")

    @cloud_access_configs.setter
    def cloud_access_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainCloudAccessConfigArgs']]]]):
        pulumi.set(self, "cloud_access_configs", value)

    @property
    @pulumi.getter(name="customBotEnable")
    def custom_bot_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the custom Bot classification strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "custom_bot_enable")

    @custom_bot_enable.setter
    def custom_bot_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_bot_enable", value)

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom Header.
        """
        return pulumi.get(self, "custom_headers")

    @custom_headers.setter
    def custom_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_headers", value)

    @property
    @pulumi.getter(name="customRspEnable")
    def custom_rsp_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the custom response interception policy. Works only on modified scenes.
        """
        return pulumi.get(self, "custom_rsp_enable")

    @custom_rsp_enable.setter
    def custom_rsp_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_rsp_enable", value)

    @property
    @pulumi.getter(name="customSni")
    def custom_sni(self) -> Optional[pulumi.Input[str]]:
        """
        Custom SNI needs to be configured when EnableSNI=1. Works only on modified scenes.
        """
        return pulumi.get(self, "custom_sni")

    @custom_sni.setter
    def custom_sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_sni", value)

    @property
    @pulumi.getter(name="defenceMode")
    def defence_mode(self) -> Optional[pulumi.Input[int]]:
        """
        The protection mode of the instance. Works only on modified scenes.
        """
        return pulumi.get(self, "defence_mode")

    @defence_mode.setter
    def defence_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "defence_mode", value)

    @property
    @pulumi.getter(name="dlpEnable")
    def dlp_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to activate the strategy for preventing the leakage of sensitive information. Works only on modified scenes.
        """
        return pulumi.get(self, "dlp_enable")

    @dlp_enable.setter
    def dlp_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dlp_enable", value)

    @property
    @pulumi.getter(name="enableCustomRedirect")
    def enable_custom_redirect(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable user-defined redirection. Works only on modified scenes.
        """
        return pulumi.get(self, "enable_custom_redirect")

    @enable_custom_redirect.setter
    def enable_custom_redirect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_custom_redirect", value)

    @property
    @pulumi.getter(name="enableHttp2")
    def enable_http2(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable HTTP 2.0.
        """
        return pulumi.get(self, "enable_http2")

    @enable_http2.setter
    def enable_http2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_http2", value)

    @property
    @pulumi.getter(name="enableIpv6")
    def enable_ipv6(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it supports protecting IPv6 requests.
        """
        return pulumi.get(self, "enable_ipv6")

    @enable_ipv6.setter
    def enable_ipv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_ipv6", value)

    @property
    @pulumi.getter(name="enableSni")
    def enable_sni(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the SNI configuration. Works only on modified scenes.
        """
        return pulumi.get(self, "enable_sni")

    @enable_sni.setter
    def enable_sni(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_sni", value)

    @property
    @pulumi.getter(name="extraDefenceModeLbInstances")
    def extra_defence_mode_lb_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainExtraDefenceModeLbInstanceArgs']]]]:
        """
        The protection mode of the exception instance. It takes effect when the access mode is accessed through an application load balancing (ALB) instance (AccessMode=20). Works only on modified scenes.
        """
        return pulumi.get(self, "extra_defence_mode_lb_instances")

    @extra_defence_mode_lb_instances.setter
    def extra_defence_mode_lb_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainExtraDefenceModeLbInstanceArgs']]]]):
        pulumi.set(self, "extra_defence_mode_lb_instances", value)

    @property
    @pulumi.getter(name="keepAliveRequest")
    def keep_alive_request(self) -> Optional[pulumi.Input[int]]:
        """
        The number of long connection multiplexes.
        """
        return pulumi.get(self, "keep_alive_request")

    @keep_alive_request.setter
    def keep_alive_request(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_request", value)

    @property
    @pulumi.getter(name="keepAliveTimeOut")
    def keep_alive_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Long connection retention time.
        """
        return pulumi.get(self, "keep_alive_time_out")

    @keep_alive_time_out.setter
    def keep_alive_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_time_out", value)

    @property
    @pulumi.getter(name="lbAlgorithm")
    def lb_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The types of load balancing algorithms.
        """
        return pulumi.get(self, "lb_algorithm")

    @lb_algorithm.setter
    def lb_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_algorithm", value)

    @property
    @pulumi.getter(name="llmAvailable")
    def llm_available(self) -> Optional[pulumi.Input[bool]]:
        """
        Is LLM available. Works only on modified scenes.
        """
        return pulumi.get(self, "llm_available")

    @llm_available.setter
    def llm_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "llm_available", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of project. Works only on modified scenes.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="protocolFollow")
    def protocol_follow(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable protocol following.
        """
        return pulumi.get(self, "protocol_follow")

    @protocol_follow.setter
    def protocol_follow(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol_follow", value)

    @property
    @pulumi.getter(name="protocolPorts")
    def protocol_ports(self) -> Optional[pulumi.Input['WafDomainProtocolPortsArgs']]:
        """
        Access port information.
        """
        return pulumi.get(self, "protocol_ports")

    @protocol_ports.setter
    def protocol_ports(self, value: Optional[pulumi.Input['WafDomainProtocolPortsArgs']]):
        pulumi.set(self, "protocol_ports", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Access protocol types.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="proxyConfig")
    def proxy_config(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable proxy configuration.
        """
        return pulumi.get(self, "proxy_config")

    @proxy_config.setter
    def proxy_config(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_config", value)

    @property
    @pulumi.getter(name="proxyConnectTimeOut")
    def proxy_connect_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout period for establishing a connection between the WAF and the backend server.
        """
        return pulumi.get(self, "proxy_connect_time_out")

    @proxy_connect_time_out.setter
    def proxy_connect_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_connect_time_out", value)

    @property
    @pulumi.getter(name="proxyKeepAlive")
    def proxy_keep_alive(self) -> Optional[pulumi.Input[int]]:
        """
        The number of reusable WAF origin long connections.
        """
        return pulumi.get(self, "proxy_keep_alive")

    @proxy_keep_alive.setter
    def proxy_keep_alive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_keep_alive", value)

    @property
    @pulumi.getter(name="proxyKeepAliveTimeOut")
    def proxy_keep_alive_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Idle long connection timeout period.
        """
        return pulumi.get(self, "proxy_keep_alive_time_out")

    @proxy_keep_alive_time_out.setter
    def proxy_keep_alive_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_keep_alive_time_out", value)

    @property
    @pulumi.getter(name="proxyReadTimeOut")
    def proxy_read_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout period during which WAF reads the response from the backend server.
        """
        return pulumi.get(self, "proxy_read_time_out")

    @proxy_read_time_out.setter
    def proxy_read_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_read_time_out", value)

    @property
    @pulumi.getter(name="proxyRetry")
    def proxy_retry(self) -> Optional[pulumi.Input[int]]:
        """
        The number of retries for WAF back to source.
        """
        return pulumi.get(self, "proxy_retry")

    @proxy_retry.setter
    def proxy_retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_retry", value)

    @property
    @pulumi.getter(name="proxyWriteTimeOut")
    def proxy_write_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout period during which the WAF transmits the request to the backend server.
        """
        return pulumi.get(self, "proxy_write_time_out")

    @proxy_write_time_out.setter
    def proxy_write_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_write_time_out", value)

    @property
    @pulumi.getter(name="publicRealServer")
    def public_real_server(self) -> Optional[pulumi.Input[int]]:
        """
        Connect to the source return mode.
        """
        return pulumi.get(self, "public_real_server")

    @public_real_server.setter
    def public_real_server(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "public_real_server", value)

    @property
    @pulumi.getter(name="redirectHttps")
    def redirect_https(self) -> Optional[pulumi.Input[bool]]:
        """
        When only the HTTPS protocol is enabled, whether to redirect HTTP requests to HTTPS. Works only on modified scenes.
        """
        return pulumi.get(self, "redirect_https")

    @redirect_https.setter
    def redirect_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redirect_https", value)

    @property
    @pulumi.getter(name="sslCiphers")
    def ssl_ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Encryption kit.
        """
        return pulumi.get(self, "ssl_ciphers")

    @ssl_ciphers.setter
    def ssl_ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssl_ciphers", value)

    @property
    @pulumi.getter(name="sslProtocols")
    def ssl_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TLS protocol version.
        """
        return pulumi.get(self, "ssl_protocols")

    @ssl_protocols.setter
    def ssl_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssl_protocols", value)

    @property
    @pulumi.getter(name="systemBotEnable")
    def system_bot_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the managed Bot classification strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "system_bot_enable")

    @system_bot_enable.setter
    def system_bot_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_bot_enable", value)

    @property
    @pulumi.getter(name="tamperProofEnable")
    def tamper_proof_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the page tamper-proof policy. Works only on modified scenes.
        """
        return pulumi.get(self, "tamper_proof_enable")

    @tamper_proof_enable.setter
    def tamper_proof_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tamper_proof_enable", value)

    @property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the log service.
        """
        return pulumi.get(self, "tls_enable")

    @tls_enable.setter
    def tls_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tls_enable", value)

    @property
    @pulumi.getter(name="tlsFieldsConfig")
    def tls_fields_config(self) -> Optional[pulumi.Input['WafDomainTlsFieldsConfigArgs']]:
        """
        Details of log field configuration. Works only on modified scenes.
        """
        return pulumi.get(self, "tls_fields_config")

    @tls_fields_config.setter
    def tls_fields_config(self, value: Optional[pulumi.Input['WafDomainTlsFieldsConfigArgs']]):
        pulumi.set(self, "tls_fields_config", value)

    @property
    @pulumi.getter(name="volcCertificateId")
    def volc_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        """
        return pulumi.get(self, "volc_certificate_id")

    @volc_certificate_id.setter
    def volc_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volc_certificate_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of vpc.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="wafEnable")
    def waf_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the vulnerability protection strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "waf_enable")

    @waf_enable.setter
    def waf_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "waf_enable", value)

    @property
    @pulumi.getter(name="wafWhiteReqEnable")
    def waf_white_req_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the whitening strategy for vulnerability protection requests. Works only on modified scenes.
        """
        return pulumi.get(self, "waf_white_req_enable")

    @waf_white_req_enable.setter
    def waf_white_req_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "waf_white_req_enable", value)

    @property
    @pulumi.getter(name="whiteEnable")
    def white_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the access list policy. Works only on modified scenes.
        """
        return pulumi.get(self, "white_enable")

    @white_enable.setter
    def white_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "white_enable", value)

    @property
    @pulumi.getter(name="whiteFieldEnable")
    def white_field_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the whitening strategy for vulnerability protection fields. Works only on modified scenes.
        """
        return pulumi.get(self, "white_field_enable")

    @white_field_enable.setter
    def white_field_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "white_field_enable", value)


@pulumi.input_type
class _WafDomainState:
    def __init__(__self__, *,
                 access_mode: Optional[pulumi.Input[int]] = None,
                 advanced_defense_ip: Optional[pulumi.Input[str]] = None,
                 advanced_defense_ipv6: Optional[pulumi.Input[str]] = None,
                 api_enable: Optional[pulumi.Input[int]] = None,
                 attack_status: Optional[pulumi.Input[int]] = None,
                 auto_cc_enable: Optional[pulumi.Input[int]] = None,
                 backend_groups: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupArgs']]]] = None,
                 black_ip_enable: Optional[pulumi.Input[int]] = None,
                 black_lct_enable: Optional[pulumi.Input[int]] = None,
                 bot_dytoken_enable: Optional[pulumi.Input[int]] = None,
                 bot_frequency_enable: Optional[pulumi.Input[int]] = None,
                 bot_repeat_enable: Optional[pulumi.Input[int]] = None,
                 bot_sequence_default_action: Optional[pulumi.Input[int]] = None,
                 bot_sequence_enable: Optional[pulumi.Input[int]] = None,
                 cc_enable: Optional[pulumi.Input[int]] = None,
                 certificate_id: Optional[pulumi.Input[int]] = None,
                 certificate_name: Optional[pulumi.Input[str]] = None,
                 certificate_platform: Optional[pulumi.Input[str]] = None,
                 client_ip_location: Optional[pulumi.Input[int]] = None,
                 client_max_body_size: Optional[pulumi.Input[int]] = None,
                 cloud_access_configs: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainCloudAccessConfigArgs']]]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 custom_bot_enable: Optional[pulumi.Input[int]] = None,
                 custom_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_rsp_enable: Optional[pulumi.Input[int]] = None,
                 custom_sni: Optional[pulumi.Input[str]] = None,
                 defence_mode: Optional[pulumi.Input[int]] = None,
                 defence_mode_computed: Optional[pulumi.Input[int]] = None,
                 dlp_enable: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enable_custom_redirect: Optional[pulumi.Input[int]] = None,
                 enable_http2: Optional[pulumi.Input[int]] = None,
                 enable_ipv6: Optional[pulumi.Input[int]] = None,
                 enable_sni: Optional[pulumi.Input[int]] = None,
                 extra_defence_mode_lb_instances: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainExtraDefenceModeLbInstanceArgs']]]] = None,
                 keep_alive_request: Optional[pulumi.Input[int]] = None,
                 keep_alive_time_out: Optional[pulumi.Input[int]] = None,
                 lb_algorithm: Optional[pulumi.Input[str]] = None,
                 llm_available: Optional[pulumi.Input[bool]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 protocol_follow: Optional[pulumi.Input[int]] = None,
                 protocol_ports: Optional[pulumi.Input['WafDomainProtocolPortsArgs']] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy_config: Optional[pulumi.Input[int]] = None,
                 proxy_connect_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_keep_alive: Optional[pulumi.Input[int]] = None,
                 proxy_keep_alive_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_read_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_retry: Optional[pulumi.Input[int]] = None,
                 proxy_write_time_out: Optional[pulumi.Input[int]] = None,
                 public_real_server: Optional[pulumi.Input[int]] = None,
                 redirect_https: Optional[pulumi.Input[bool]] = None,
                 server_ips: Optional[pulumi.Input[str]] = None,
                 src_ips: Optional[pulumi.Input[str]] = None,
                 ssl_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 system_bot_enable: Optional[pulumi.Input[int]] = None,
                 tamper_proof_enable: Optional[pulumi.Input[int]] = None,
                 tls_enable: Optional[pulumi.Input[int]] = None,
                 tls_fields_config: Optional[pulumi.Input['WafDomainTlsFieldsConfigArgs']] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 volc_certificate_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 waf_enable: Optional[pulumi.Input[int]] = None,
                 waf_white_req_enable: Optional[pulumi.Input[int]] = None,
                 white_enable: Optional[pulumi.Input[int]] = None,
                 white_field_enable: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering WafDomain resources.
        :param pulumi.Input[int] access_mode: Access mode.
        :param pulumi.Input[str] advanced_defense_ip: High-defense instance IP.
        :param pulumi.Input[str] advanced_defense_ipv6: High-defense instance IPv6.
        :param pulumi.Input[int] api_enable: Whether to enable the API protection policy. Works only on modified scenes.
        :param pulumi.Input[int] attack_status: The status of the attack.
        :param pulumi.Input[int] auto_cc_enable: Whether to enable the intelligent CC protection strategy. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupArgs']]] backend_groups: The configuration of source station.
        :param pulumi.Input[int] black_ip_enable: Whether to enable the access ban list policy. Works only on modified scenes.
        :param pulumi.Input[int] black_lct_enable: Whether to enable the geographical location access control policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_dytoken_enable: Whether to enable the bot dynamic token. Works only on modified scenes.
        :param pulumi.Input[int] bot_frequency_enable: Whether to enable the bot frequency limit policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_repeat_enable: Whether to enable the bot frequency limit policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_sequence_default_action: Set the default actions of the bot behavior map strategy. Works only on modified scenes.
        :param pulumi.Input[int] bot_sequence_enable: Whether to enable the bot behavior map. Works only on modified scenes.
        :param pulumi.Input[int] cc_enable: Whether to enable the CC protection policy. Works only on modified scenes.
        :param pulumi.Input[int] certificate_id: When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        :param pulumi.Input[str] certificate_name: The name of the certificate.
        :param pulumi.Input[str] certificate_platform: Certificate custody platform.
        :param pulumi.Input[int] client_ip_location: The method of obtaining the client IP.
        :param pulumi.Input[int] client_max_body_size: The client requests the maximum value of body.
        :param pulumi.Input[Sequence[pulumi.Input['WafDomainCloudAccessConfigArgs']]] cloud_access_configs: Access port information.If AccessMode is Alb/CLB, this field is required.
        :param pulumi.Input[str] cname: The CNAME value generated by the WAF instance.
        :param pulumi.Input[int] custom_bot_enable: Whether to enable the custom Bot classification strategy. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] custom_headers: Custom Header.
        :param pulumi.Input[int] custom_rsp_enable: Whether to enable the custom response interception policy. Works only on modified scenes.
        :param pulumi.Input[str] custom_sni: Custom SNI needs to be configured when EnableSNI=1. Works only on modified scenes.
        :param pulumi.Input[int] defence_mode: The protection mode of the instance. Works only on modified scenes.
        :param pulumi.Input[int] defence_mode_computed: The protection mode of the instance.
        :param pulumi.Input[int] dlp_enable: Whether to activate the strategy for preventing the leakage of sensitive information. Works only on modified scenes.
        :param pulumi.Input[str] domain: List of domain names that need to be protected by WAF.
        :param pulumi.Input[int] enable_custom_redirect: Whether to enable user-defined redirection. Works only on modified scenes.
        :param pulumi.Input[int] enable_http2: Whether to enable HTTP 2.0.
        :param pulumi.Input[int] enable_ipv6: Whether it supports protecting IPv6 requests.
        :param pulumi.Input[int] enable_sni: Whether to enable the SNI configuration. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input['WafDomainExtraDefenceModeLbInstanceArgs']]] extra_defence_mode_lb_instances: The protection mode of the exception instance. It takes effect when the access mode is accessed through an application load balancing (ALB) instance (AccessMode=20). Works only on modified scenes.
        :param pulumi.Input[int] keep_alive_request: The number of long connection multiplexes.
        :param pulumi.Input[int] keep_alive_time_out: Long connection retention time.
        :param pulumi.Input[str] lb_algorithm: The types of load balancing algorithms.
        :param pulumi.Input[bool] llm_available: Is LLM available. Works only on modified scenes.
        :param pulumi.Input[str] project_name: The name of project. Works only on modified scenes.
        :param pulumi.Input[int] protocol_follow: Whether to enable protocol following.
        :param pulumi.Input['WafDomainProtocolPortsArgs'] protocol_ports: Access port information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: Access protocol types.
        :param pulumi.Input[int] proxy_config: Whether to enable proxy configuration.
        :param pulumi.Input[int] proxy_connect_time_out: The timeout period for establishing a connection between the WAF and the backend server.
        :param pulumi.Input[int] proxy_keep_alive: The number of reusable WAF origin long connections.
        :param pulumi.Input[int] proxy_keep_alive_time_out: Idle long connection timeout period.
        :param pulumi.Input[int] proxy_read_time_out: The timeout period during which WAF reads the response from the backend server.
        :param pulumi.Input[int] proxy_retry: The number of retries for WAF back to source.
        :param pulumi.Input[int] proxy_write_time_out: The timeout period during which the WAF transmits the request to the backend server.
        :param pulumi.Input[int] public_real_server: Connect to the source return mode.
        :param pulumi.Input[bool] redirect_https: When only the HTTPS protocol is enabled, whether to redirect HTTP requests to HTTPS. Works only on modified scenes.
        :param pulumi.Input[str] server_ips: The IP of the WAF protection instance.
        :param pulumi.Input[str] src_ips: WAF source IP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssl_ciphers: Encryption kit.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssl_protocols: TLS protocol version.
        :param pulumi.Input[int] status: The status of access.
        :param pulumi.Input[int] system_bot_enable: Whether to enable the managed Bot classification strategy. Works only on modified scenes.
        :param pulumi.Input[int] tamper_proof_enable: Whether to enable the page tamper-proof policy. Works only on modified scenes.
        :param pulumi.Input[int] tls_enable: Whether to enable the log service.
        :param pulumi.Input['WafDomainTlsFieldsConfigArgs'] tls_fields_config: Details of log field configuration. Works only on modified scenes.
        :param pulumi.Input[str] update_time: The update time.
        :param pulumi.Input[str] volc_certificate_id: When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        :param pulumi.Input[str] vpc_id: The ID of vpc.
        :param pulumi.Input[int] waf_enable: Whether to enable the vulnerability protection strategy. Works only on modified scenes.
        :param pulumi.Input[int] waf_white_req_enable: Whether to enable the whitening strategy for vulnerability protection requests. Works only on modified scenes.
        :param pulumi.Input[int] white_enable: Whether to enable the access list policy. Works only on modified scenes.
        :param pulumi.Input[int] white_field_enable: Whether to enable the whitening strategy for vulnerability protection fields. Works only on modified scenes.
        """
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if advanced_defense_ip is not None:
            pulumi.set(__self__, "advanced_defense_ip", advanced_defense_ip)
        if advanced_defense_ipv6 is not None:
            pulumi.set(__self__, "advanced_defense_ipv6", advanced_defense_ipv6)
        if api_enable is not None:
            pulumi.set(__self__, "api_enable", api_enable)
        if attack_status is not None:
            pulumi.set(__self__, "attack_status", attack_status)
        if auto_cc_enable is not None:
            pulumi.set(__self__, "auto_cc_enable", auto_cc_enable)
        if backend_groups is not None:
            pulumi.set(__self__, "backend_groups", backend_groups)
        if black_ip_enable is not None:
            pulumi.set(__self__, "black_ip_enable", black_ip_enable)
        if black_lct_enable is not None:
            pulumi.set(__self__, "black_lct_enable", black_lct_enable)
        if bot_dytoken_enable is not None:
            pulumi.set(__self__, "bot_dytoken_enable", bot_dytoken_enable)
        if bot_frequency_enable is not None:
            pulumi.set(__self__, "bot_frequency_enable", bot_frequency_enable)
        if bot_repeat_enable is not None:
            pulumi.set(__self__, "bot_repeat_enable", bot_repeat_enable)
        if bot_sequence_default_action is not None:
            pulumi.set(__self__, "bot_sequence_default_action", bot_sequence_default_action)
        if bot_sequence_enable is not None:
            pulumi.set(__self__, "bot_sequence_enable", bot_sequence_enable)
        if cc_enable is not None:
            pulumi.set(__self__, "cc_enable", cc_enable)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if certificate_platform is not None:
            pulumi.set(__self__, "certificate_platform", certificate_platform)
        if client_ip_location is not None:
            pulumi.set(__self__, "client_ip_location", client_ip_location)
        if client_max_body_size is not None:
            pulumi.set(__self__, "client_max_body_size", client_max_body_size)
        if cloud_access_configs is not None:
            pulumi.set(__self__, "cloud_access_configs", cloud_access_configs)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if custom_bot_enable is not None:
            pulumi.set(__self__, "custom_bot_enable", custom_bot_enable)
        if custom_headers is not None:
            pulumi.set(__self__, "custom_headers", custom_headers)
        if custom_rsp_enable is not None:
            pulumi.set(__self__, "custom_rsp_enable", custom_rsp_enable)
        if custom_sni is not None:
            pulumi.set(__self__, "custom_sni", custom_sni)
        if defence_mode is not None:
            pulumi.set(__self__, "defence_mode", defence_mode)
        if defence_mode_computed is not None:
            pulumi.set(__self__, "defence_mode_computed", defence_mode_computed)
        if dlp_enable is not None:
            pulumi.set(__self__, "dlp_enable", dlp_enable)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enable_custom_redirect is not None:
            pulumi.set(__self__, "enable_custom_redirect", enable_custom_redirect)
        if enable_http2 is not None:
            pulumi.set(__self__, "enable_http2", enable_http2)
        if enable_ipv6 is not None:
            pulumi.set(__self__, "enable_ipv6", enable_ipv6)
        if enable_sni is not None:
            pulumi.set(__self__, "enable_sni", enable_sni)
        if extra_defence_mode_lb_instances is not None:
            pulumi.set(__self__, "extra_defence_mode_lb_instances", extra_defence_mode_lb_instances)
        if keep_alive_request is not None:
            pulumi.set(__self__, "keep_alive_request", keep_alive_request)
        if keep_alive_time_out is not None:
            pulumi.set(__self__, "keep_alive_time_out", keep_alive_time_out)
        if lb_algorithm is not None:
            pulumi.set(__self__, "lb_algorithm", lb_algorithm)
        if llm_available is not None:
            pulumi.set(__self__, "llm_available", llm_available)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if protocol_follow is not None:
            pulumi.set(__self__, "protocol_follow", protocol_follow)
        if protocol_ports is not None:
            pulumi.set(__self__, "protocol_ports", protocol_ports)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if proxy_config is not None:
            pulumi.set(__self__, "proxy_config", proxy_config)
        if proxy_connect_time_out is not None:
            pulumi.set(__self__, "proxy_connect_time_out", proxy_connect_time_out)
        if proxy_keep_alive is not None:
            pulumi.set(__self__, "proxy_keep_alive", proxy_keep_alive)
        if proxy_keep_alive_time_out is not None:
            pulumi.set(__self__, "proxy_keep_alive_time_out", proxy_keep_alive_time_out)
        if proxy_read_time_out is not None:
            pulumi.set(__self__, "proxy_read_time_out", proxy_read_time_out)
        if proxy_retry is not None:
            pulumi.set(__self__, "proxy_retry", proxy_retry)
        if proxy_write_time_out is not None:
            pulumi.set(__self__, "proxy_write_time_out", proxy_write_time_out)
        if public_real_server is not None:
            pulumi.set(__self__, "public_real_server", public_real_server)
        if redirect_https is not None:
            pulumi.set(__self__, "redirect_https", redirect_https)
        if server_ips is not None:
            pulumi.set(__self__, "server_ips", server_ips)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if ssl_ciphers is not None:
            pulumi.set(__self__, "ssl_ciphers", ssl_ciphers)
        if ssl_protocols is not None:
            pulumi.set(__self__, "ssl_protocols", ssl_protocols)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_bot_enable is not None:
            pulumi.set(__self__, "system_bot_enable", system_bot_enable)
        if tamper_proof_enable is not None:
            pulumi.set(__self__, "tamper_proof_enable", tamper_proof_enable)
        if tls_enable is not None:
            pulumi.set(__self__, "tls_enable", tls_enable)
        if tls_fields_config is not None:
            pulumi.set(__self__, "tls_fields_config", tls_fields_config)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if volc_certificate_id is not None:
            pulumi.set(__self__, "volc_certificate_id", volc_certificate_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if waf_enable is not None:
            pulumi.set(__self__, "waf_enable", waf_enable)
        if waf_white_req_enable is not None:
            pulumi.set(__self__, "waf_white_req_enable", waf_white_req_enable)
        if white_enable is not None:
            pulumi.set(__self__, "white_enable", white_enable)
        if white_field_enable is not None:
            pulumi.set(__self__, "white_field_enable", white_field_enable)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Access mode.
        """
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter(name="advancedDefenseIp")
    def advanced_defense_ip(self) -> Optional[pulumi.Input[str]]:
        """
        High-defense instance IP.
        """
        return pulumi.get(self, "advanced_defense_ip")

    @advanced_defense_ip.setter
    def advanced_defense_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advanced_defense_ip", value)

    @property
    @pulumi.getter(name="advancedDefenseIpv6")
    def advanced_defense_ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        High-defense instance IPv6.
        """
        return pulumi.get(self, "advanced_defense_ipv6")

    @advanced_defense_ipv6.setter
    def advanced_defense_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advanced_defense_ipv6", value)

    @property
    @pulumi.getter(name="apiEnable")
    def api_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the API protection policy. Works only on modified scenes.
        """
        return pulumi.get(self, "api_enable")

    @api_enable.setter
    def api_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "api_enable", value)

    @property
    @pulumi.getter(name="attackStatus")
    def attack_status(self) -> Optional[pulumi.Input[int]]:
        """
        The status of the attack.
        """
        return pulumi.get(self, "attack_status")

    @attack_status.setter
    def attack_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "attack_status", value)

    @property
    @pulumi.getter(name="autoCcEnable")
    def auto_cc_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the intelligent CC protection strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "auto_cc_enable")

    @auto_cc_enable.setter
    def auto_cc_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_cc_enable", value)

    @property
    @pulumi.getter(name="backendGroups")
    def backend_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupArgs']]]]:
        """
        The configuration of source station.
        """
        return pulumi.get(self, "backend_groups")

    @backend_groups.setter
    def backend_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainBackendGroupArgs']]]]):
        pulumi.set(self, "backend_groups", value)

    @property
    @pulumi.getter(name="blackIpEnable")
    def black_ip_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the access ban list policy. Works only on modified scenes.
        """
        return pulumi.get(self, "black_ip_enable")

    @black_ip_enable.setter
    def black_ip_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "black_ip_enable", value)

    @property
    @pulumi.getter(name="blackLctEnable")
    def black_lct_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the geographical location access control policy. Works only on modified scenes.
        """
        return pulumi.get(self, "black_lct_enable")

    @black_lct_enable.setter
    def black_lct_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "black_lct_enable", value)

    @property
    @pulumi.getter(name="botDytokenEnable")
    def bot_dytoken_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the bot dynamic token. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_dytoken_enable")

    @bot_dytoken_enable.setter
    def bot_dytoken_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_dytoken_enable", value)

    @property
    @pulumi.getter(name="botFrequencyEnable")
    def bot_frequency_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the bot frequency limit policy. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_frequency_enable")

    @bot_frequency_enable.setter
    def bot_frequency_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_frequency_enable", value)

    @property
    @pulumi.getter(name="botRepeatEnable")
    def bot_repeat_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the bot frequency limit policy. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_repeat_enable")

    @bot_repeat_enable.setter
    def bot_repeat_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_repeat_enable", value)

    @property
    @pulumi.getter(name="botSequenceDefaultAction")
    def bot_sequence_default_action(self) -> Optional[pulumi.Input[int]]:
        """
        Set the default actions of the bot behavior map strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_sequence_default_action")

    @bot_sequence_default_action.setter
    def bot_sequence_default_action(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_sequence_default_action", value)

    @property
    @pulumi.getter(name="botSequenceEnable")
    def bot_sequence_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the bot behavior map. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_sequence_enable")

    @bot_sequence_enable.setter
    def bot_sequence_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_sequence_enable", value)

    @property
    @pulumi.getter(name="ccEnable")
    def cc_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the CC protection policy. Works only on modified scenes.
        """
        return pulumi.get(self, "cc_enable")

    @cc_enable.setter
    def cc_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cc_enable", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[int]]:
        """
        When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the certificate.
        """
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter(name="certificatePlatform")
    def certificate_platform(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate custody platform.
        """
        return pulumi.get(self, "certificate_platform")

    @certificate_platform.setter
    def certificate_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_platform", value)

    @property
    @pulumi.getter(name="clientIpLocation")
    def client_ip_location(self) -> Optional[pulumi.Input[int]]:
        """
        The method of obtaining the client IP.
        """
        return pulumi.get(self, "client_ip_location")

    @client_ip_location.setter
    def client_ip_location(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_ip_location", value)

    @property
    @pulumi.getter(name="clientMaxBodySize")
    def client_max_body_size(self) -> Optional[pulumi.Input[int]]:
        """
        The client requests the maximum value of body.
        """
        return pulumi.get(self, "client_max_body_size")

    @client_max_body_size.setter
    def client_max_body_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_max_body_size", value)

    @property
    @pulumi.getter(name="cloudAccessConfigs")
    def cloud_access_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainCloudAccessConfigArgs']]]]:
        """
        Access port information.If AccessMode is Alb/CLB, this field is required.
        """
        return pulumi.get(self, "cloud_access_configs")

    @cloud_access_configs.setter
    def cloud_access_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainCloudAccessConfigArgs']]]]):
        pulumi.set(self, "cloud_access_configs", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        """
        The CNAME value generated by the WAF instance.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter(name="customBotEnable")
    def custom_bot_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the custom Bot classification strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "custom_bot_enable")

    @custom_bot_enable.setter
    def custom_bot_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_bot_enable", value)

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom Header.
        """
        return pulumi.get(self, "custom_headers")

    @custom_headers.setter
    def custom_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_headers", value)

    @property
    @pulumi.getter(name="customRspEnable")
    def custom_rsp_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the custom response interception policy. Works only on modified scenes.
        """
        return pulumi.get(self, "custom_rsp_enable")

    @custom_rsp_enable.setter
    def custom_rsp_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_rsp_enable", value)

    @property
    @pulumi.getter(name="customSni")
    def custom_sni(self) -> Optional[pulumi.Input[str]]:
        """
        Custom SNI needs to be configured when EnableSNI=1. Works only on modified scenes.
        """
        return pulumi.get(self, "custom_sni")

    @custom_sni.setter
    def custom_sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_sni", value)

    @property
    @pulumi.getter(name="defenceMode")
    def defence_mode(self) -> Optional[pulumi.Input[int]]:
        """
        The protection mode of the instance. Works only on modified scenes.
        """
        return pulumi.get(self, "defence_mode")

    @defence_mode.setter
    def defence_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "defence_mode", value)

    @property
    @pulumi.getter(name="defenceModeComputed")
    def defence_mode_computed(self) -> Optional[pulumi.Input[int]]:
        """
        The protection mode of the instance.
        """
        return pulumi.get(self, "defence_mode_computed")

    @defence_mode_computed.setter
    def defence_mode_computed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "defence_mode_computed", value)

    @property
    @pulumi.getter(name="dlpEnable")
    def dlp_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to activate the strategy for preventing the leakage of sensitive information. Works only on modified scenes.
        """
        return pulumi.get(self, "dlp_enable")

    @dlp_enable.setter
    def dlp_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dlp_enable", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        List of domain names that need to be protected by WAF.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="enableCustomRedirect")
    def enable_custom_redirect(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable user-defined redirection. Works only on modified scenes.
        """
        return pulumi.get(self, "enable_custom_redirect")

    @enable_custom_redirect.setter
    def enable_custom_redirect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_custom_redirect", value)

    @property
    @pulumi.getter(name="enableHttp2")
    def enable_http2(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable HTTP 2.0.
        """
        return pulumi.get(self, "enable_http2")

    @enable_http2.setter
    def enable_http2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_http2", value)

    @property
    @pulumi.getter(name="enableIpv6")
    def enable_ipv6(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it supports protecting IPv6 requests.
        """
        return pulumi.get(self, "enable_ipv6")

    @enable_ipv6.setter
    def enable_ipv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_ipv6", value)

    @property
    @pulumi.getter(name="enableSni")
    def enable_sni(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the SNI configuration. Works only on modified scenes.
        """
        return pulumi.get(self, "enable_sni")

    @enable_sni.setter
    def enable_sni(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_sni", value)

    @property
    @pulumi.getter(name="extraDefenceModeLbInstances")
    def extra_defence_mode_lb_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainExtraDefenceModeLbInstanceArgs']]]]:
        """
        The protection mode of the exception instance. It takes effect when the access mode is accessed through an application load balancing (ALB) instance (AccessMode=20). Works only on modified scenes.
        """
        return pulumi.get(self, "extra_defence_mode_lb_instances")

    @extra_defence_mode_lb_instances.setter
    def extra_defence_mode_lb_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafDomainExtraDefenceModeLbInstanceArgs']]]]):
        pulumi.set(self, "extra_defence_mode_lb_instances", value)

    @property
    @pulumi.getter(name="keepAliveRequest")
    def keep_alive_request(self) -> Optional[pulumi.Input[int]]:
        """
        The number of long connection multiplexes.
        """
        return pulumi.get(self, "keep_alive_request")

    @keep_alive_request.setter
    def keep_alive_request(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_request", value)

    @property
    @pulumi.getter(name="keepAliveTimeOut")
    def keep_alive_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Long connection retention time.
        """
        return pulumi.get(self, "keep_alive_time_out")

    @keep_alive_time_out.setter
    def keep_alive_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_time_out", value)

    @property
    @pulumi.getter(name="lbAlgorithm")
    def lb_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The types of load balancing algorithms.
        """
        return pulumi.get(self, "lb_algorithm")

    @lb_algorithm.setter
    def lb_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_algorithm", value)

    @property
    @pulumi.getter(name="llmAvailable")
    def llm_available(self) -> Optional[pulumi.Input[bool]]:
        """
        Is LLM available. Works only on modified scenes.
        """
        return pulumi.get(self, "llm_available")

    @llm_available.setter
    def llm_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "llm_available", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of project. Works only on modified scenes.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="protocolFollow")
    def protocol_follow(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable protocol following.
        """
        return pulumi.get(self, "protocol_follow")

    @protocol_follow.setter
    def protocol_follow(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol_follow", value)

    @property
    @pulumi.getter(name="protocolPorts")
    def protocol_ports(self) -> Optional[pulumi.Input['WafDomainProtocolPortsArgs']]:
        """
        Access port information.
        """
        return pulumi.get(self, "protocol_ports")

    @protocol_ports.setter
    def protocol_ports(self, value: Optional[pulumi.Input['WafDomainProtocolPortsArgs']]):
        pulumi.set(self, "protocol_ports", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Access protocol types.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="proxyConfig")
    def proxy_config(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable proxy configuration.
        """
        return pulumi.get(self, "proxy_config")

    @proxy_config.setter
    def proxy_config(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_config", value)

    @property
    @pulumi.getter(name="proxyConnectTimeOut")
    def proxy_connect_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout period for establishing a connection between the WAF and the backend server.
        """
        return pulumi.get(self, "proxy_connect_time_out")

    @proxy_connect_time_out.setter
    def proxy_connect_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_connect_time_out", value)

    @property
    @pulumi.getter(name="proxyKeepAlive")
    def proxy_keep_alive(self) -> Optional[pulumi.Input[int]]:
        """
        The number of reusable WAF origin long connections.
        """
        return pulumi.get(self, "proxy_keep_alive")

    @proxy_keep_alive.setter
    def proxy_keep_alive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_keep_alive", value)

    @property
    @pulumi.getter(name="proxyKeepAliveTimeOut")
    def proxy_keep_alive_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Idle long connection timeout period.
        """
        return pulumi.get(self, "proxy_keep_alive_time_out")

    @proxy_keep_alive_time_out.setter
    def proxy_keep_alive_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_keep_alive_time_out", value)

    @property
    @pulumi.getter(name="proxyReadTimeOut")
    def proxy_read_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout period during which WAF reads the response from the backend server.
        """
        return pulumi.get(self, "proxy_read_time_out")

    @proxy_read_time_out.setter
    def proxy_read_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_read_time_out", value)

    @property
    @pulumi.getter(name="proxyRetry")
    def proxy_retry(self) -> Optional[pulumi.Input[int]]:
        """
        The number of retries for WAF back to source.
        """
        return pulumi.get(self, "proxy_retry")

    @proxy_retry.setter
    def proxy_retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_retry", value)

    @property
    @pulumi.getter(name="proxyWriteTimeOut")
    def proxy_write_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout period during which the WAF transmits the request to the backend server.
        """
        return pulumi.get(self, "proxy_write_time_out")

    @proxy_write_time_out.setter
    def proxy_write_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_write_time_out", value)

    @property
    @pulumi.getter(name="publicRealServer")
    def public_real_server(self) -> Optional[pulumi.Input[int]]:
        """
        Connect to the source return mode.
        """
        return pulumi.get(self, "public_real_server")

    @public_real_server.setter
    def public_real_server(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "public_real_server", value)

    @property
    @pulumi.getter(name="redirectHttps")
    def redirect_https(self) -> Optional[pulumi.Input[bool]]:
        """
        When only the HTTPS protocol is enabled, whether to redirect HTTP requests to HTTPS. Works only on modified scenes.
        """
        return pulumi.get(self, "redirect_https")

    @redirect_https.setter
    def redirect_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redirect_https", value)

    @property
    @pulumi.getter(name="serverIps")
    def server_ips(self) -> Optional[pulumi.Input[str]]:
        """
        The IP of the WAF protection instance.
        """
        return pulumi.get(self, "server_ips")

    @server_ips.setter
    def server_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_ips", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[str]]:
        """
        WAF source IP.
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter(name="sslCiphers")
    def ssl_ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Encryption kit.
        """
        return pulumi.get(self, "ssl_ciphers")

    @ssl_ciphers.setter
    def ssl_ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssl_ciphers", value)

    @property
    @pulumi.getter(name="sslProtocols")
    def ssl_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TLS protocol version.
        """
        return pulumi.get(self, "ssl_protocols")

    @ssl_protocols.setter
    def ssl_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssl_protocols", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        The status of access.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="systemBotEnable")
    def system_bot_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the managed Bot classification strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "system_bot_enable")

    @system_bot_enable.setter
    def system_bot_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_bot_enable", value)

    @property
    @pulumi.getter(name="tamperProofEnable")
    def tamper_proof_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the page tamper-proof policy. Works only on modified scenes.
        """
        return pulumi.get(self, "tamper_proof_enable")

    @tamper_proof_enable.setter
    def tamper_proof_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tamper_proof_enable", value)

    @property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the log service.
        """
        return pulumi.get(self, "tls_enable")

    @tls_enable.setter
    def tls_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tls_enable", value)

    @property
    @pulumi.getter(name="tlsFieldsConfig")
    def tls_fields_config(self) -> Optional[pulumi.Input['WafDomainTlsFieldsConfigArgs']]:
        """
        Details of log field configuration. Works only on modified scenes.
        """
        return pulumi.get(self, "tls_fields_config")

    @tls_fields_config.setter
    def tls_fields_config(self, value: Optional[pulumi.Input['WafDomainTlsFieldsConfigArgs']]):
        pulumi.set(self, "tls_fields_config", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="volcCertificateId")
    def volc_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        """
        return pulumi.get(self, "volc_certificate_id")

    @volc_certificate_id.setter
    def volc_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volc_certificate_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of vpc.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="wafEnable")
    def waf_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the vulnerability protection strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "waf_enable")

    @waf_enable.setter
    def waf_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "waf_enable", value)

    @property
    @pulumi.getter(name="wafWhiteReqEnable")
    def waf_white_req_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the whitening strategy for vulnerability protection requests. Works only on modified scenes.
        """
        return pulumi.get(self, "waf_white_req_enable")

    @waf_white_req_enable.setter
    def waf_white_req_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "waf_white_req_enable", value)

    @property
    @pulumi.getter(name="whiteEnable")
    def white_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the access list policy. Works only on modified scenes.
        """
        return pulumi.get(self, "white_enable")

    @white_enable.setter
    def white_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "white_enable", value)

    @property
    @pulumi.getter(name="whiteFieldEnable")
    def white_field_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the whitening strategy for vulnerability protection fields. Works only on modified scenes.
        """
        return pulumi.get(self, "white_field_enable")

    @white_field_enable.setter
    def white_field_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "white_field_enable", value)


class WafDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_mode: Optional[pulumi.Input[int]] = None,
                 api_enable: Optional[pulumi.Input[int]] = None,
                 auto_cc_enable: Optional[pulumi.Input[int]] = None,
                 backend_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainBackendGroupArgs']]]]] = None,
                 black_ip_enable: Optional[pulumi.Input[int]] = None,
                 black_lct_enable: Optional[pulumi.Input[int]] = None,
                 bot_dytoken_enable: Optional[pulumi.Input[int]] = None,
                 bot_frequency_enable: Optional[pulumi.Input[int]] = None,
                 bot_repeat_enable: Optional[pulumi.Input[int]] = None,
                 bot_sequence_default_action: Optional[pulumi.Input[int]] = None,
                 bot_sequence_enable: Optional[pulumi.Input[int]] = None,
                 cc_enable: Optional[pulumi.Input[int]] = None,
                 certificate_id: Optional[pulumi.Input[int]] = None,
                 certificate_platform: Optional[pulumi.Input[str]] = None,
                 client_ip_location: Optional[pulumi.Input[int]] = None,
                 client_max_body_size: Optional[pulumi.Input[int]] = None,
                 cloud_access_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainCloudAccessConfigArgs']]]]] = None,
                 custom_bot_enable: Optional[pulumi.Input[int]] = None,
                 custom_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_rsp_enable: Optional[pulumi.Input[int]] = None,
                 custom_sni: Optional[pulumi.Input[str]] = None,
                 defence_mode: Optional[pulumi.Input[int]] = None,
                 dlp_enable: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enable_custom_redirect: Optional[pulumi.Input[int]] = None,
                 enable_http2: Optional[pulumi.Input[int]] = None,
                 enable_ipv6: Optional[pulumi.Input[int]] = None,
                 enable_sni: Optional[pulumi.Input[int]] = None,
                 extra_defence_mode_lb_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainExtraDefenceModeLbInstanceArgs']]]]] = None,
                 keep_alive_request: Optional[pulumi.Input[int]] = None,
                 keep_alive_time_out: Optional[pulumi.Input[int]] = None,
                 lb_algorithm: Optional[pulumi.Input[str]] = None,
                 llm_available: Optional[pulumi.Input[bool]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 protocol_follow: Optional[pulumi.Input[int]] = None,
                 protocol_ports: Optional[pulumi.Input[pulumi.InputType['WafDomainProtocolPortsArgs']]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy_config: Optional[pulumi.Input[int]] = None,
                 proxy_connect_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_keep_alive: Optional[pulumi.Input[int]] = None,
                 proxy_keep_alive_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_read_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_retry: Optional[pulumi.Input[int]] = None,
                 proxy_write_time_out: Optional[pulumi.Input[int]] = None,
                 public_real_server: Optional[pulumi.Input[int]] = None,
                 redirect_https: Optional[pulumi.Input[bool]] = None,
                 ssl_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_bot_enable: Optional[pulumi.Input[int]] = None,
                 tamper_proof_enable: Optional[pulumi.Input[int]] = None,
                 tls_enable: Optional[pulumi.Input[int]] = None,
                 tls_fields_config: Optional[pulumi.Input[pulumi.InputType['WafDomainTlsFieldsConfigArgs']]] = None,
                 volc_certificate_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 waf_enable: Optional[pulumi.Input[int]] = None,
                 waf_white_req_enable: Optional[pulumi.Input[int]] = None,
                 white_enable: Optional[pulumi.Input[int]] = None,
                 white_field_enable: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage waf domain
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.WafDomain("foo",
            access_mode=10,
            backend_groups=[volcengine.waf.WafDomainBackendGroupArgs(
                access_ports=[80],
                backends=[
                    volcengine.waf.WafDomainBackendGroupBackendArgs(
                        ip="192.168.0.0",
                        port=80,
                        protocol="HTTP",
                        weight=40,
                    ),
                    volcengine.waf.WafDomainBackendGroupBackendArgs(
                        ip="192.168.1.0",
                        port=80,
                        protocol="HTTP",
                        weight=60,
                    ),
                ],
                name="default",
            )],
            client_ip_location=0,
            client_max_body_size=1024,
            custom_headers=[
                "x-top-1",
                "x-top-2",
            ],
            domain="www.tf-test.com",
            enable_ipv6=0,
            keep_alive_request=200,
            keep_alive_time_out=100,
            lb_algorithm="wlc",
            protocol_ports=volcengine.waf.WafDomainProtocolPortsArgs(
                https=[80],
            ),
            protocols=["HTTP"],
            proxy_config=1,
            proxy_connect_time_out=10,
            proxy_keep_alive=101,
            proxy_keep_alive_time_out=20,
            proxy_read_time_out=200,
            proxy_retry=10,
            proxy_write_time_out=120,
            public_real_server=0,
            vpc_id="vpc-2d6485y7p95og58ozfcvxxxxx")
        ```

        ## Import

        WafDomain can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/wafDomain:WafDomain default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] access_mode: Access mode.
        :param pulumi.Input[int] api_enable: Whether to enable the API protection policy. Works only on modified scenes.
        :param pulumi.Input[int] auto_cc_enable: Whether to enable the intelligent CC protection strategy. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainBackendGroupArgs']]]] backend_groups: The configuration of source station.
        :param pulumi.Input[int] black_ip_enable: Whether to enable the access ban list policy. Works only on modified scenes.
        :param pulumi.Input[int] black_lct_enable: Whether to enable the geographical location access control policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_dytoken_enable: Whether to enable the bot dynamic token. Works only on modified scenes.
        :param pulumi.Input[int] bot_frequency_enable: Whether to enable the bot frequency limit policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_repeat_enable: Whether to enable the bot frequency limit policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_sequence_default_action: Set the default actions of the bot behavior map strategy. Works only on modified scenes.
        :param pulumi.Input[int] bot_sequence_enable: Whether to enable the bot behavior map. Works only on modified scenes.
        :param pulumi.Input[int] cc_enable: Whether to enable the CC protection policy. Works only on modified scenes.
        :param pulumi.Input[int] certificate_id: When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        :param pulumi.Input[str] certificate_platform: Certificate custody platform.
        :param pulumi.Input[int] client_ip_location: The method of obtaining the client IP.
        :param pulumi.Input[int] client_max_body_size: The client requests the maximum value of body.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainCloudAccessConfigArgs']]]] cloud_access_configs: Access port information.If AccessMode is Alb/CLB, this field is required.
        :param pulumi.Input[int] custom_bot_enable: Whether to enable the custom Bot classification strategy. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] custom_headers: Custom Header.
        :param pulumi.Input[int] custom_rsp_enable: Whether to enable the custom response interception policy. Works only on modified scenes.
        :param pulumi.Input[str] custom_sni: Custom SNI needs to be configured when EnableSNI=1. Works only on modified scenes.
        :param pulumi.Input[int] defence_mode: The protection mode of the instance. Works only on modified scenes.
        :param pulumi.Input[int] dlp_enable: Whether to activate the strategy for preventing the leakage of sensitive information. Works only on modified scenes.
        :param pulumi.Input[str] domain: List of domain names that need to be protected by WAF.
        :param pulumi.Input[int] enable_custom_redirect: Whether to enable user-defined redirection. Works only on modified scenes.
        :param pulumi.Input[int] enable_http2: Whether to enable HTTP 2.0.
        :param pulumi.Input[int] enable_ipv6: Whether it supports protecting IPv6 requests.
        :param pulumi.Input[int] enable_sni: Whether to enable the SNI configuration. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainExtraDefenceModeLbInstanceArgs']]]] extra_defence_mode_lb_instances: The protection mode of the exception instance. It takes effect when the access mode is accessed through an application load balancing (ALB) instance (AccessMode=20). Works only on modified scenes.
        :param pulumi.Input[int] keep_alive_request: The number of long connection multiplexes.
        :param pulumi.Input[int] keep_alive_time_out: Long connection retention time.
        :param pulumi.Input[str] lb_algorithm: The types of load balancing algorithms.
        :param pulumi.Input[bool] llm_available: Is LLM available. Works only on modified scenes.
        :param pulumi.Input[str] project_name: The name of project. Works only on modified scenes.
        :param pulumi.Input[int] protocol_follow: Whether to enable protocol following.
        :param pulumi.Input[pulumi.InputType['WafDomainProtocolPortsArgs']] protocol_ports: Access port information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: Access protocol types.
        :param pulumi.Input[int] proxy_config: Whether to enable proxy configuration.
        :param pulumi.Input[int] proxy_connect_time_out: The timeout period for establishing a connection between the WAF and the backend server.
        :param pulumi.Input[int] proxy_keep_alive: The number of reusable WAF origin long connections.
        :param pulumi.Input[int] proxy_keep_alive_time_out: Idle long connection timeout period.
        :param pulumi.Input[int] proxy_read_time_out: The timeout period during which WAF reads the response from the backend server.
        :param pulumi.Input[int] proxy_retry: The number of retries for WAF back to source.
        :param pulumi.Input[int] proxy_write_time_out: The timeout period during which the WAF transmits the request to the backend server.
        :param pulumi.Input[int] public_real_server: Connect to the source return mode.
        :param pulumi.Input[bool] redirect_https: When only the HTTPS protocol is enabled, whether to redirect HTTP requests to HTTPS. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssl_ciphers: Encryption kit.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssl_protocols: TLS protocol version.
        :param pulumi.Input[int] system_bot_enable: Whether to enable the managed Bot classification strategy. Works only on modified scenes.
        :param pulumi.Input[int] tamper_proof_enable: Whether to enable the page tamper-proof policy. Works only on modified scenes.
        :param pulumi.Input[int] tls_enable: Whether to enable the log service.
        :param pulumi.Input[pulumi.InputType['WafDomainTlsFieldsConfigArgs']] tls_fields_config: Details of log field configuration. Works only on modified scenes.
        :param pulumi.Input[str] volc_certificate_id: When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        :param pulumi.Input[str] vpc_id: The ID of vpc.
        :param pulumi.Input[int] waf_enable: Whether to enable the vulnerability protection strategy. Works only on modified scenes.
        :param pulumi.Input[int] waf_white_req_enable: Whether to enable the whitening strategy for vulnerability protection requests. Works only on modified scenes.
        :param pulumi.Input[int] white_enable: Whether to enable the access list policy. Works only on modified scenes.
        :param pulumi.Input[int] white_field_enable: Whether to enable the whitening strategy for vulnerability protection fields. Works only on modified scenes.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WafDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage waf domain
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.waf.WafDomain("foo",
            access_mode=10,
            backend_groups=[volcengine.waf.WafDomainBackendGroupArgs(
                access_ports=[80],
                backends=[
                    volcengine.waf.WafDomainBackendGroupBackendArgs(
                        ip="192.168.0.0",
                        port=80,
                        protocol="HTTP",
                        weight=40,
                    ),
                    volcengine.waf.WafDomainBackendGroupBackendArgs(
                        ip="192.168.1.0",
                        port=80,
                        protocol="HTTP",
                        weight=60,
                    ),
                ],
                name="default",
            )],
            client_ip_location=0,
            client_max_body_size=1024,
            custom_headers=[
                "x-top-1",
                "x-top-2",
            ],
            domain="www.tf-test.com",
            enable_ipv6=0,
            keep_alive_request=200,
            keep_alive_time_out=100,
            lb_algorithm="wlc",
            protocol_ports=volcengine.waf.WafDomainProtocolPortsArgs(
                https=[80],
            ),
            protocols=["HTTP"],
            proxy_config=1,
            proxy_connect_time_out=10,
            proxy_keep_alive=101,
            proxy_keep_alive_time_out=20,
            proxy_read_time_out=200,
            proxy_retry=10,
            proxy_write_time_out=120,
            public_real_server=0,
            vpc_id="vpc-2d6485y7p95og58ozfcvxxxxx")
        ```

        ## Import

        WafDomain can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:waf/wafDomain:WafDomain default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param WafDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WafDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_mode: Optional[pulumi.Input[int]] = None,
                 api_enable: Optional[pulumi.Input[int]] = None,
                 auto_cc_enable: Optional[pulumi.Input[int]] = None,
                 backend_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainBackendGroupArgs']]]]] = None,
                 black_ip_enable: Optional[pulumi.Input[int]] = None,
                 black_lct_enable: Optional[pulumi.Input[int]] = None,
                 bot_dytoken_enable: Optional[pulumi.Input[int]] = None,
                 bot_frequency_enable: Optional[pulumi.Input[int]] = None,
                 bot_repeat_enable: Optional[pulumi.Input[int]] = None,
                 bot_sequence_default_action: Optional[pulumi.Input[int]] = None,
                 bot_sequence_enable: Optional[pulumi.Input[int]] = None,
                 cc_enable: Optional[pulumi.Input[int]] = None,
                 certificate_id: Optional[pulumi.Input[int]] = None,
                 certificate_platform: Optional[pulumi.Input[str]] = None,
                 client_ip_location: Optional[pulumi.Input[int]] = None,
                 client_max_body_size: Optional[pulumi.Input[int]] = None,
                 cloud_access_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainCloudAccessConfigArgs']]]]] = None,
                 custom_bot_enable: Optional[pulumi.Input[int]] = None,
                 custom_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_rsp_enable: Optional[pulumi.Input[int]] = None,
                 custom_sni: Optional[pulumi.Input[str]] = None,
                 defence_mode: Optional[pulumi.Input[int]] = None,
                 dlp_enable: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enable_custom_redirect: Optional[pulumi.Input[int]] = None,
                 enable_http2: Optional[pulumi.Input[int]] = None,
                 enable_ipv6: Optional[pulumi.Input[int]] = None,
                 enable_sni: Optional[pulumi.Input[int]] = None,
                 extra_defence_mode_lb_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainExtraDefenceModeLbInstanceArgs']]]]] = None,
                 keep_alive_request: Optional[pulumi.Input[int]] = None,
                 keep_alive_time_out: Optional[pulumi.Input[int]] = None,
                 lb_algorithm: Optional[pulumi.Input[str]] = None,
                 llm_available: Optional[pulumi.Input[bool]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 protocol_follow: Optional[pulumi.Input[int]] = None,
                 protocol_ports: Optional[pulumi.Input[pulumi.InputType['WafDomainProtocolPortsArgs']]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy_config: Optional[pulumi.Input[int]] = None,
                 proxy_connect_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_keep_alive: Optional[pulumi.Input[int]] = None,
                 proxy_keep_alive_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_read_time_out: Optional[pulumi.Input[int]] = None,
                 proxy_retry: Optional[pulumi.Input[int]] = None,
                 proxy_write_time_out: Optional[pulumi.Input[int]] = None,
                 public_real_server: Optional[pulumi.Input[int]] = None,
                 redirect_https: Optional[pulumi.Input[bool]] = None,
                 ssl_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_bot_enable: Optional[pulumi.Input[int]] = None,
                 tamper_proof_enable: Optional[pulumi.Input[int]] = None,
                 tls_enable: Optional[pulumi.Input[int]] = None,
                 tls_fields_config: Optional[pulumi.Input[pulumi.InputType['WafDomainTlsFieldsConfigArgs']]] = None,
                 volc_certificate_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 waf_enable: Optional[pulumi.Input[int]] = None,
                 waf_white_req_enable: Optional[pulumi.Input[int]] = None,
                 white_enable: Optional[pulumi.Input[int]] = None,
                 white_field_enable: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WafDomainArgs.__new__(WafDomainArgs)

            if access_mode is None and not opts.urn:
                raise TypeError("Missing required property 'access_mode'")
            __props__.__dict__["access_mode"] = access_mode
            __props__.__dict__["api_enable"] = api_enable
            __props__.__dict__["auto_cc_enable"] = auto_cc_enable
            __props__.__dict__["backend_groups"] = backend_groups
            __props__.__dict__["black_ip_enable"] = black_ip_enable
            __props__.__dict__["black_lct_enable"] = black_lct_enable
            __props__.__dict__["bot_dytoken_enable"] = bot_dytoken_enable
            __props__.__dict__["bot_frequency_enable"] = bot_frequency_enable
            __props__.__dict__["bot_repeat_enable"] = bot_repeat_enable
            __props__.__dict__["bot_sequence_default_action"] = bot_sequence_default_action
            __props__.__dict__["bot_sequence_enable"] = bot_sequence_enable
            __props__.__dict__["cc_enable"] = cc_enable
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["certificate_platform"] = certificate_platform
            __props__.__dict__["client_ip_location"] = client_ip_location
            __props__.__dict__["client_max_body_size"] = client_max_body_size
            __props__.__dict__["cloud_access_configs"] = cloud_access_configs
            __props__.__dict__["custom_bot_enable"] = custom_bot_enable
            __props__.__dict__["custom_headers"] = custom_headers
            __props__.__dict__["custom_rsp_enable"] = custom_rsp_enable
            __props__.__dict__["custom_sni"] = custom_sni
            __props__.__dict__["defence_mode"] = defence_mode
            __props__.__dict__["dlp_enable"] = dlp_enable
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["enable_custom_redirect"] = enable_custom_redirect
            __props__.__dict__["enable_http2"] = enable_http2
            __props__.__dict__["enable_ipv6"] = enable_ipv6
            __props__.__dict__["enable_sni"] = enable_sni
            __props__.__dict__["extra_defence_mode_lb_instances"] = extra_defence_mode_lb_instances
            __props__.__dict__["keep_alive_request"] = keep_alive_request
            __props__.__dict__["keep_alive_time_out"] = keep_alive_time_out
            __props__.__dict__["lb_algorithm"] = lb_algorithm
            __props__.__dict__["llm_available"] = llm_available
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["protocol_follow"] = protocol_follow
            __props__.__dict__["protocol_ports"] = protocol_ports
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["proxy_config"] = proxy_config
            __props__.__dict__["proxy_connect_time_out"] = proxy_connect_time_out
            __props__.__dict__["proxy_keep_alive"] = proxy_keep_alive
            __props__.__dict__["proxy_keep_alive_time_out"] = proxy_keep_alive_time_out
            __props__.__dict__["proxy_read_time_out"] = proxy_read_time_out
            __props__.__dict__["proxy_retry"] = proxy_retry
            __props__.__dict__["proxy_write_time_out"] = proxy_write_time_out
            __props__.__dict__["public_real_server"] = public_real_server
            __props__.__dict__["redirect_https"] = redirect_https
            __props__.__dict__["ssl_ciphers"] = ssl_ciphers
            __props__.__dict__["ssl_protocols"] = ssl_protocols
            __props__.__dict__["system_bot_enable"] = system_bot_enable
            __props__.__dict__["tamper_proof_enable"] = tamper_proof_enable
            __props__.__dict__["tls_enable"] = tls_enable
            __props__.__dict__["tls_fields_config"] = tls_fields_config
            __props__.__dict__["volc_certificate_id"] = volc_certificate_id
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["waf_enable"] = waf_enable
            __props__.__dict__["waf_white_req_enable"] = waf_white_req_enable
            __props__.__dict__["white_enable"] = white_enable
            __props__.__dict__["white_field_enable"] = white_field_enable
            __props__.__dict__["advanced_defense_ip"] = None
            __props__.__dict__["advanced_defense_ipv6"] = None
            __props__.__dict__["attack_status"] = None
            __props__.__dict__["certificate_name"] = None
            __props__.__dict__["cname"] = None
            __props__.__dict__["defence_mode_computed"] = None
            __props__.__dict__["server_ips"] = None
            __props__.__dict__["src_ips"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_time"] = None
        super(WafDomain, __self__).__init__(
            'volcengine:waf/wafDomain:WafDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_mode: Optional[pulumi.Input[int]] = None,
            advanced_defense_ip: Optional[pulumi.Input[str]] = None,
            advanced_defense_ipv6: Optional[pulumi.Input[str]] = None,
            api_enable: Optional[pulumi.Input[int]] = None,
            attack_status: Optional[pulumi.Input[int]] = None,
            auto_cc_enable: Optional[pulumi.Input[int]] = None,
            backend_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainBackendGroupArgs']]]]] = None,
            black_ip_enable: Optional[pulumi.Input[int]] = None,
            black_lct_enable: Optional[pulumi.Input[int]] = None,
            bot_dytoken_enable: Optional[pulumi.Input[int]] = None,
            bot_frequency_enable: Optional[pulumi.Input[int]] = None,
            bot_repeat_enable: Optional[pulumi.Input[int]] = None,
            bot_sequence_default_action: Optional[pulumi.Input[int]] = None,
            bot_sequence_enable: Optional[pulumi.Input[int]] = None,
            cc_enable: Optional[pulumi.Input[int]] = None,
            certificate_id: Optional[pulumi.Input[int]] = None,
            certificate_name: Optional[pulumi.Input[str]] = None,
            certificate_platform: Optional[pulumi.Input[str]] = None,
            client_ip_location: Optional[pulumi.Input[int]] = None,
            client_max_body_size: Optional[pulumi.Input[int]] = None,
            cloud_access_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainCloudAccessConfigArgs']]]]] = None,
            cname: Optional[pulumi.Input[str]] = None,
            custom_bot_enable: Optional[pulumi.Input[int]] = None,
            custom_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            custom_rsp_enable: Optional[pulumi.Input[int]] = None,
            custom_sni: Optional[pulumi.Input[str]] = None,
            defence_mode: Optional[pulumi.Input[int]] = None,
            defence_mode_computed: Optional[pulumi.Input[int]] = None,
            dlp_enable: Optional[pulumi.Input[int]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            enable_custom_redirect: Optional[pulumi.Input[int]] = None,
            enable_http2: Optional[pulumi.Input[int]] = None,
            enable_ipv6: Optional[pulumi.Input[int]] = None,
            enable_sni: Optional[pulumi.Input[int]] = None,
            extra_defence_mode_lb_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainExtraDefenceModeLbInstanceArgs']]]]] = None,
            keep_alive_request: Optional[pulumi.Input[int]] = None,
            keep_alive_time_out: Optional[pulumi.Input[int]] = None,
            lb_algorithm: Optional[pulumi.Input[str]] = None,
            llm_available: Optional[pulumi.Input[bool]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            protocol_follow: Optional[pulumi.Input[int]] = None,
            protocol_ports: Optional[pulumi.Input[pulumi.InputType['WafDomainProtocolPortsArgs']]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            proxy_config: Optional[pulumi.Input[int]] = None,
            proxy_connect_time_out: Optional[pulumi.Input[int]] = None,
            proxy_keep_alive: Optional[pulumi.Input[int]] = None,
            proxy_keep_alive_time_out: Optional[pulumi.Input[int]] = None,
            proxy_read_time_out: Optional[pulumi.Input[int]] = None,
            proxy_retry: Optional[pulumi.Input[int]] = None,
            proxy_write_time_out: Optional[pulumi.Input[int]] = None,
            public_real_server: Optional[pulumi.Input[int]] = None,
            redirect_https: Optional[pulumi.Input[bool]] = None,
            server_ips: Optional[pulumi.Input[str]] = None,
            src_ips: Optional[pulumi.Input[str]] = None,
            ssl_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ssl_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[int]] = None,
            system_bot_enable: Optional[pulumi.Input[int]] = None,
            tamper_proof_enable: Optional[pulumi.Input[int]] = None,
            tls_enable: Optional[pulumi.Input[int]] = None,
            tls_fields_config: Optional[pulumi.Input[pulumi.InputType['WafDomainTlsFieldsConfigArgs']]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            volc_certificate_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            waf_enable: Optional[pulumi.Input[int]] = None,
            waf_white_req_enable: Optional[pulumi.Input[int]] = None,
            white_enable: Optional[pulumi.Input[int]] = None,
            white_field_enable: Optional[pulumi.Input[int]] = None) -> 'WafDomain':
        """
        Get an existing WafDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] access_mode: Access mode.
        :param pulumi.Input[str] advanced_defense_ip: High-defense instance IP.
        :param pulumi.Input[str] advanced_defense_ipv6: High-defense instance IPv6.
        :param pulumi.Input[int] api_enable: Whether to enable the API protection policy. Works only on modified scenes.
        :param pulumi.Input[int] attack_status: The status of the attack.
        :param pulumi.Input[int] auto_cc_enable: Whether to enable the intelligent CC protection strategy. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainBackendGroupArgs']]]] backend_groups: The configuration of source station.
        :param pulumi.Input[int] black_ip_enable: Whether to enable the access ban list policy. Works only on modified scenes.
        :param pulumi.Input[int] black_lct_enable: Whether to enable the geographical location access control policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_dytoken_enable: Whether to enable the bot dynamic token. Works only on modified scenes.
        :param pulumi.Input[int] bot_frequency_enable: Whether to enable the bot frequency limit policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_repeat_enable: Whether to enable the bot frequency limit policy. Works only on modified scenes.
        :param pulumi.Input[int] bot_sequence_default_action: Set the default actions of the bot behavior map strategy. Works only on modified scenes.
        :param pulumi.Input[int] bot_sequence_enable: Whether to enable the bot behavior map. Works only on modified scenes.
        :param pulumi.Input[int] cc_enable: Whether to enable the CC protection policy. Works only on modified scenes.
        :param pulumi.Input[int] certificate_id: When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        :param pulumi.Input[str] certificate_name: The name of the certificate.
        :param pulumi.Input[str] certificate_platform: Certificate custody platform.
        :param pulumi.Input[int] client_ip_location: The method of obtaining the client IP.
        :param pulumi.Input[int] client_max_body_size: The client requests the maximum value of body.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainCloudAccessConfigArgs']]]] cloud_access_configs: Access port information.If AccessMode is Alb/CLB, this field is required.
        :param pulumi.Input[str] cname: The CNAME value generated by the WAF instance.
        :param pulumi.Input[int] custom_bot_enable: Whether to enable the custom Bot classification strategy. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] custom_headers: Custom Header.
        :param pulumi.Input[int] custom_rsp_enable: Whether to enable the custom response interception policy. Works only on modified scenes.
        :param pulumi.Input[str] custom_sni: Custom SNI needs to be configured when EnableSNI=1. Works only on modified scenes.
        :param pulumi.Input[int] defence_mode: The protection mode of the instance. Works only on modified scenes.
        :param pulumi.Input[int] defence_mode_computed: The protection mode of the instance.
        :param pulumi.Input[int] dlp_enable: Whether to activate the strategy for preventing the leakage of sensitive information. Works only on modified scenes.
        :param pulumi.Input[str] domain: List of domain names that need to be protected by WAF.
        :param pulumi.Input[int] enable_custom_redirect: Whether to enable user-defined redirection. Works only on modified scenes.
        :param pulumi.Input[int] enable_http2: Whether to enable HTTP 2.0.
        :param pulumi.Input[int] enable_ipv6: Whether it supports protecting IPv6 requests.
        :param pulumi.Input[int] enable_sni: Whether to enable the SNI configuration. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafDomainExtraDefenceModeLbInstanceArgs']]]] extra_defence_mode_lb_instances: The protection mode of the exception instance. It takes effect when the access mode is accessed through an application load balancing (ALB) instance (AccessMode=20). Works only on modified scenes.
        :param pulumi.Input[int] keep_alive_request: The number of long connection multiplexes.
        :param pulumi.Input[int] keep_alive_time_out: Long connection retention time.
        :param pulumi.Input[str] lb_algorithm: The types of load balancing algorithms.
        :param pulumi.Input[bool] llm_available: Is LLM available. Works only on modified scenes.
        :param pulumi.Input[str] project_name: The name of project. Works only on modified scenes.
        :param pulumi.Input[int] protocol_follow: Whether to enable protocol following.
        :param pulumi.Input[pulumi.InputType['WafDomainProtocolPortsArgs']] protocol_ports: Access port information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: Access protocol types.
        :param pulumi.Input[int] proxy_config: Whether to enable proxy configuration.
        :param pulumi.Input[int] proxy_connect_time_out: The timeout period for establishing a connection between the WAF and the backend server.
        :param pulumi.Input[int] proxy_keep_alive: The number of reusable WAF origin long connections.
        :param pulumi.Input[int] proxy_keep_alive_time_out: Idle long connection timeout period.
        :param pulumi.Input[int] proxy_read_time_out: The timeout period during which WAF reads the response from the backend server.
        :param pulumi.Input[int] proxy_retry: The number of retries for WAF back to source.
        :param pulumi.Input[int] proxy_write_time_out: The timeout period during which the WAF transmits the request to the backend server.
        :param pulumi.Input[int] public_real_server: Connect to the source return mode.
        :param pulumi.Input[bool] redirect_https: When only the HTTPS protocol is enabled, whether to redirect HTTP requests to HTTPS. Works only on modified scenes.
        :param pulumi.Input[str] server_ips: The IP of the WAF protection instance.
        :param pulumi.Input[str] src_ips: WAF source IP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssl_ciphers: Encryption kit.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssl_protocols: TLS protocol version.
        :param pulumi.Input[int] status: The status of access.
        :param pulumi.Input[int] system_bot_enable: Whether to enable the managed Bot classification strategy. Works only on modified scenes.
        :param pulumi.Input[int] tamper_proof_enable: Whether to enable the page tamper-proof policy. Works only on modified scenes.
        :param pulumi.Input[int] tls_enable: Whether to enable the log service.
        :param pulumi.Input[pulumi.InputType['WafDomainTlsFieldsConfigArgs']] tls_fields_config: Details of log field configuration. Works only on modified scenes.
        :param pulumi.Input[str] update_time: The update time.
        :param pulumi.Input[str] volc_certificate_id: When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        :param pulumi.Input[str] vpc_id: The ID of vpc.
        :param pulumi.Input[int] waf_enable: Whether to enable the vulnerability protection strategy. Works only on modified scenes.
        :param pulumi.Input[int] waf_white_req_enable: Whether to enable the whitening strategy for vulnerability protection requests. Works only on modified scenes.
        :param pulumi.Input[int] white_enable: Whether to enable the access list policy. Works only on modified scenes.
        :param pulumi.Input[int] white_field_enable: Whether to enable the whitening strategy for vulnerability protection fields. Works only on modified scenes.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WafDomainState.__new__(_WafDomainState)

        __props__.__dict__["access_mode"] = access_mode
        __props__.__dict__["advanced_defense_ip"] = advanced_defense_ip
        __props__.__dict__["advanced_defense_ipv6"] = advanced_defense_ipv6
        __props__.__dict__["api_enable"] = api_enable
        __props__.__dict__["attack_status"] = attack_status
        __props__.__dict__["auto_cc_enable"] = auto_cc_enable
        __props__.__dict__["backend_groups"] = backend_groups
        __props__.__dict__["black_ip_enable"] = black_ip_enable
        __props__.__dict__["black_lct_enable"] = black_lct_enable
        __props__.__dict__["bot_dytoken_enable"] = bot_dytoken_enable
        __props__.__dict__["bot_frequency_enable"] = bot_frequency_enable
        __props__.__dict__["bot_repeat_enable"] = bot_repeat_enable
        __props__.__dict__["bot_sequence_default_action"] = bot_sequence_default_action
        __props__.__dict__["bot_sequence_enable"] = bot_sequence_enable
        __props__.__dict__["cc_enable"] = cc_enable
        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["certificate_name"] = certificate_name
        __props__.__dict__["certificate_platform"] = certificate_platform
        __props__.__dict__["client_ip_location"] = client_ip_location
        __props__.__dict__["client_max_body_size"] = client_max_body_size
        __props__.__dict__["cloud_access_configs"] = cloud_access_configs
        __props__.__dict__["cname"] = cname
        __props__.__dict__["custom_bot_enable"] = custom_bot_enable
        __props__.__dict__["custom_headers"] = custom_headers
        __props__.__dict__["custom_rsp_enable"] = custom_rsp_enable
        __props__.__dict__["custom_sni"] = custom_sni
        __props__.__dict__["defence_mode"] = defence_mode
        __props__.__dict__["defence_mode_computed"] = defence_mode_computed
        __props__.__dict__["dlp_enable"] = dlp_enable
        __props__.__dict__["domain"] = domain
        __props__.__dict__["enable_custom_redirect"] = enable_custom_redirect
        __props__.__dict__["enable_http2"] = enable_http2
        __props__.__dict__["enable_ipv6"] = enable_ipv6
        __props__.__dict__["enable_sni"] = enable_sni
        __props__.__dict__["extra_defence_mode_lb_instances"] = extra_defence_mode_lb_instances
        __props__.__dict__["keep_alive_request"] = keep_alive_request
        __props__.__dict__["keep_alive_time_out"] = keep_alive_time_out
        __props__.__dict__["lb_algorithm"] = lb_algorithm
        __props__.__dict__["llm_available"] = llm_available
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["protocol_follow"] = protocol_follow
        __props__.__dict__["protocol_ports"] = protocol_ports
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["proxy_config"] = proxy_config
        __props__.__dict__["proxy_connect_time_out"] = proxy_connect_time_out
        __props__.__dict__["proxy_keep_alive"] = proxy_keep_alive
        __props__.__dict__["proxy_keep_alive_time_out"] = proxy_keep_alive_time_out
        __props__.__dict__["proxy_read_time_out"] = proxy_read_time_out
        __props__.__dict__["proxy_retry"] = proxy_retry
        __props__.__dict__["proxy_write_time_out"] = proxy_write_time_out
        __props__.__dict__["public_real_server"] = public_real_server
        __props__.__dict__["redirect_https"] = redirect_https
        __props__.__dict__["server_ips"] = server_ips
        __props__.__dict__["src_ips"] = src_ips
        __props__.__dict__["ssl_ciphers"] = ssl_ciphers
        __props__.__dict__["ssl_protocols"] = ssl_protocols
        __props__.__dict__["status"] = status
        __props__.__dict__["system_bot_enable"] = system_bot_enable
        __props__.__dict__["tamper_proof_enable"] = tamper_proof_enable
        __props__.__dict__["tls_enable"] = tls_enable
        __props__.__dict__["tls_fields_config"] = tls_fields_config
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["volc_certificate_id"] = volc_certificate_id
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["waf_enable"] = waf_enable
        __props__.__dict__["waf_white_req_enable"] = waf_white_req_enable
        __props__.__dict__["white_enable"] = white_enable
        __props__.__dict__["white_field_enable"] = white_field_enable
        return WafDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> pulumi.Output[int]:
        """
        Access mode.
        """
        return pulumi.get(self, "access_mode")

    @property
    @pulumi.getter(name="advancedDefenseIp")
    def advanced_defense_ip(self) -> pulumi.Output[str]:
        """
        High-defense instance IP.
        """
        return pulumi.get(self, "advanced_defense_ip")

    @property
    @pulumi.getter(name="advancedDefenseIpv6")
    def advanced_defense_ipv6(self) -> pulumi.Output[str]:
        """
        High-defense instance IPv6.
        """
        return pulumi.get(self, "advanced_defense_ipv6")

    @property
    @pulumi.getter(name="apiEnable")
    def api_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the API protection policy. Works only on modified scenes.
        """
        return pulumi.get(self, "api_enable")

    @property
    @pulumi.getter(name="attackStatus")
    def attack_status(self) -> pulumi.Output[int]:
        """
        The status of the attack.
        """
        return pulumi.get(self, "attack_status")

    @property
    @pulumi.getter(name="autoCcEnable")
    def auto_cc_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the intelligent CC protection strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "auto_cc_enable")

    @property
    @pulumi.getter(name="backendGroups")
    def backend_groups(self) -> pulumi.Output[Sequence['outputs.WafDomainBackendGroup']]:
        """
        The configuration of source station.
        """
        return pulumi.get(self, "backend_groups")

    @property
    @pulumi.getter(name="blackIpEnable")
    def black_ip_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the access ban list policy. Works only on modified scenes.
        """
        return pulumi.get(self, "black_ip_enable")

    @property
    @pulumi.getter(name="blackLctEnable")
    def black_lct_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the geographical location access control policy. Works only on modified scenes.
        """
        return pulumi.get(self, "black_lct_enable")

    @property
    @pulumi.getter(name="botDytokenEnable")
    def bot_dytoken_enable(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable the bot dynamic token. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_dytoken_enable")

    @property
    @pulumi.getter(name="botFrequencyEnable")
    def bot_frequency_enable(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable the bot frequency limit policy. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_frequency_enable")

    @property
    @pulumi.getter(name="botRepeatEnable")
    def bot_repeat_enable(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable the bot frequency limit policy. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_repeat_enable")

    @property
    @pulumi.getter(name="botSequenceDefaultAction")
    def bot_sequence_default_action(self) -> pulumi.Output[Optional[int]]:
        """
        Set the default actions of the bot behavior map strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_sequence_default_action")

    @property
    @pulumi.getter(name="botSequenceEnable")
    def bot_sequence_enable(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable the bot behavior map. Works only on modified scenes.
        """
        return pulumi.get(self, "bot_sequence_enable")

    @property
    @pulumi.getter(name="ccEnable")
    def cc_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the CC protection policy. Works only on modified scenes.
        """
        return pulumi.get(self, "cc_enable")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[int]:
        """
        When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> pulumi.Output[str]:
        """
        The name of the certificate.
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter(name="certificatePlatform")
    def certificate_platform(self) -> pulumi.Output[str]:
        """
        Certificate custody platform.
        """
        return pulumi.get(self, "certificate_platform")

    @property
    @pulumi.getter(name="clientIpLocation")
    def client_ip_location(self) -> pulumi.Output[int]:
        """
        The method of obtaining the client IP.
        """
        return pulumi.get(self, "client_ip_location")

    @property
    @pulumi.getter(name="clientMaxBodySize")
    def client_max_body_size(self) -> pulumi.Output[int]:
        """
        The client requests the maximum value of body.
        """
        return pulumi.get(self, "client_max_body_size")

    @property
    @pulumi.getter(name="cloudAccessConfigs")
    def cloud_access_configs(self) -> pulumi.Output[Sequence['outputs.WafDomainCloudAccessConfig']]:
        """
        Access port information.If AccessMode is Alb/CLB, this field is required.
        """
        return pulumi.get(self, "cloud_access_configs")

    @property
    @pulumi.getter
    def cname(self) -> pulumi.Output[str]:
        """
        The CNAME value generated by the WAF instance.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter(name="customBotEnable")
    def custom_bot_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the custom Bot classification strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "custom_bot_enable")

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Custom Header.
        """
        return pulumi.get(self, "custom_headers")

    @property
    @pulumi.getter(name="customRspEnable")
    def custom_rsp_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the custom response interception policy. Works only on modified scenes.
        """
        return pulumi.get(self, "custom_rsp_enable")

    @property
    @pulumi.getter(name="customSni")
    def custom_sni(self) -> pulumi.Output[Optional[str]]:
        """
        Custom SNI needs to be configured when EnableSNI=1. Works only on modified scenes.
        """
        return pulumi.get(self, "custom_sni")

    @property
    @pulumi.getter(name="defenceMode")
    def defence_mode(self) -> pulumi.Output[Optional[int]]:
        """
        The protection mode of the instance. Works only on modified scenes.
        """
        return pulumi.get(self, "defence_mode")

    @property
    @pulumi.getter(name="defenceModeComputed")
    def defence_mode_computed(self) -> pulumi.Output[int]:
        """
        The protection mode of the instance.
        """
        return pulumi.get(self, "defence_mode_computed")

    @property
    @pulumi.getter(name="dlpEnable")
    def dlp_enable(self) -> pulumi.Output[int]:
        """
        Whether to activate the strategy for preventing the leakage of sensitive information. Works only on modified scenes.
        """
        return pulumi.get(self, "dlp_enable")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        List of domain names that need to be protected by WAF.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="enableCustomRedirect")
    def enable_custom_redirect(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable user-defined redirection. Works only on modified scenes.
        """
        return pulumi.get(self, "enable_custom_redirect")

    @property
    @pulumi.getter(name="enableHttp2")
    def enable_http2(self) -> pulumi.Output[int]:
        """
        Whether to enable HTTP 2.0.
        """
        return pulumi.get(self, "enable_http2")

    @property
    @pulumi.getter(name="enableIpv6")
    def enable_ipv6(self) -> pulumi.Output[int]:
        """
        Whether it supports protecting IPv6 requests.
        """
        return pulumi.get(self, "enable_ipv6")

    @property
    @pulumi.getter(name="enableSni")
    def enable_sni(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable the SNI configuration. Works only on modified scenes.
        """
        return pulumi.get(self, "enable_sni")

    @property
    @pulumi.getter(name="extraDefenceModeLbInstances")
    def extra_defence_mode_lb_instances(self) -> pulumi.Output[Optional[Sequence['outputs.WafDomainExtraDefenceModeLbInstance']]]:
        """
        The protection mode of the exception instance. It takes effect when the access mode is accessed through an application load balancing (ALB) instance (AccessMode=20). Works only on modified scenes.
        """
        return pulumi.get(self, "extra_defence_mode_lb_instances")

    @property
    @pulumi.getter(name="keepAliveRequest")
    def keep_alive_request(self) -> pulumi.Output[int]:
        """
        The number of long connection multiplexes.
        """
        return pulumi.get(self, "keep_alive_request")

    @property
    @pulumi.getter(name="keepAliveTimeOut")
    def keep_alive_time_out(self) -> pulumi.Output[int]:
        """
        Long connection retention time.
        """
        return pulumi.get(self, "keep_alive_time_out")

    @property
    @pulumi.getter(name="lbAlgorithm")
    def lb_algorithm(self) -> pulumi.Output[str]:
        """
        The types of load balancing algorithms.
        """
        return pulumi.get(self, "lb_algorithm")

    @property
    @pulumi.getter(name="llmAvailable")
    def llm_available(self) -> pulumi.Output[Optional[bool]]:
        """
        Is LLM available. Works only on modified scenes.
        """
        return pulumi.get(self, "llm_available")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The name of project. Works only on modified scenes.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="protocolFollow")
    def protocol_follow(self) -> pulumi.Output[int]:
        """
        Whether to enable protocol following.
        """
        return pulumi.get(self, "protocol_follow")

    @property
    @pulumi.getter(name="protocolPorts")
    def protocol_ports(self) -> pulumi.Output['outputs.WafDomainProtocolPorts']:
        """
        Access port information.
        """
        return pulumi.get(self, "protocol_ports")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Sequence[str]]:
        """
        Access protocol types.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="proxyConfig")
    def proxy_config(self) -> pulumi.Output[int]:
        """
        Whether to enable proxy configuration.
        """
        return pulumi.get(self, "proxy_config")

    @property
    @pulumi.getter(name="proxyConnectTimeOut")
    def proxy_connect_time_out(self) -> pulumi.Output[int]:
        """
        The timeout period for establishing a connection between the WAF and the backend server.
        """
        return pulumi.get(self, "proxy_connect_time_out")

    @property
    @pulumi.getter(name="proxyKeepAlive")
    def proxy_keep_alive(self) -> pulumi.Output[int]:
        """
        The number of reusable WAF origin long connections.
        """
        return pulumi.get(self, "proxy_keep_alive")

    @property
    @pulumi.getter(name="proxyKeepAliveTimeOut")
    def proxy_keep_alive_time_out(self) -> pulumi.Output[int]:
        """
        Idle long connection timeout period.
        """
        return pulumi.get(self, "proxy_keep_alive_time_out")

    @property
    @pulumi.getter(name="proxyReadTimeOut")
    def proxy_read_time_out(self) -> pulumi.Output[int]:
        """
        The timeout period during which WAF reads the response from the backend server.
        """
        return pulumi.get(self, "proxy_read_time_out")

    @property
    @pulumi.getter(name="proxyRetry")
    def proxy_retry(self) -> pulumi.Output[int]:
        """
        The number of retries for WAF back to source.
        """
        return pulumi.get(self, "proxy_retry")

    @property
    @pulumi.getter(name="proxyWriteTimeOut")
    def proxy_write_time_out(self) -> pulumi.Output[int]:
        """
        The timeout period during which the WAF transmits the request to the backend server.
        """
        return pulumi.get(self, "proxy_write_time_out")

    @property
    @pulumi.getter(name="publicRealServer")
    def public_real_server(self) -> pulumi.Output[int]:
        """
        Connect to the source return mode.
        """
        return pulumi.get(self, "public_real_server")

    @property
    @pulumi.getter(name="redirectHttps")
    def redirect_https(self) -> pulumi.Output[Optional[bool]]:
        """
        When only the HTTPS protocol is enabled, whether to redirect HTTP requests to HTTPS. Works only on modified scenes.
        """
        return pulumi.get(self, "redirect_https")

    @property
    @pulumi.getter(name="serverIps")
    def server_ips(self) -> pulumi.Output[str]:
        """
        The IP of the WAF protection instance.
        """
        return pulumi.get(self, "server_ips")

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> pulumi.Output[str]:
        """
        WAF source IP.
        """
        return pulumi.get(self, "src_ips")

    @property
    @pulumi.getter(name="sslCiphers")
    def ssl_ciphers(self) -> pulumi.Output[Sequence[str]]:
        """
        Encryption kit.
        """
        return pulumi.get(self, "ssl_ciphers")

    @property
    @pulumi.getter(name="sslProtocols")
    def ssl_protocols(self) -> pulumi.Output[Sequence[str]]:
        """
        TLS protocol version.
        """
        return pulumi.get(self, "ssl_protocols")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        The status of access.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemBotEnable")
    def system_bot_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the managed Bot classification strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "system_bot_enable")

    @property
    @pulumi.getter(name="tamperProofEnable")
    def tamper_proof_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the page tamper-proof policy. Works only on modified scenes.
        """
        return pulumi.get(self, "tamper_proof_enable")

    @property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the log service.
        """
        return pulumi.get(self, "tls_enable")

    @property
    @pulumi.getter(name="tlsFieldsConfig")
    def tls_fields_config(self) -> pulumi.Output[Optional['outputs.WafDomainTlsFieldsConfig']]:
        """
        Details of log field configuration. Works only on modified scenes.
        """
        return pulumi.get(self, "tls_fields_config")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="volcCertificateId")
    def volc_certificate_id(self) -> pulumi.Output[str]:
        """
        When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        """
        return pulumi.get(self, "volc_certificate_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The ID of vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="wafEnable")
    def waf_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the vulnerability protection strategy. Works only on modified scenes.
        """
        return pulumi.get(self, "waf_enable")

    @property
    @pulumi.getter(name="wafWhiteReqEnable")
    def waf_white_req_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the whitening strategy for vulnerability protection requests. Works only on modified scenes.
        """
        return pulumi.get(self, "waf_white_req_enable")

    @property
    @pulumi.getter(name="whiteEnable")
    def white_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the access list policy. Works only on modified scenes.
        """
        return pulumi.get(self, "white_enable")

    @property
    @pulumi.getter(name="whiteFieldEnable")
    def white_field_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable the whitening strategy for vulnerability protection fields. Works only on modified scenes.
        """
        return pulumi.get(self, "white_field_enable")

