# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AclRulesResult',
    'AwaitableAclRulesResult',
    'acl_rules',
    'acl_rules_output',
]

warnings.warn("""volcengine.waf.AclRules has been deprecated in favor of volcengine.waf.getAclRules""", DeprecationWarning)

@pulumi.output_type
class AclRulesResult:
    """
    A collection of values returned by AclRules.
    """
    def __init__(__self__, acl_type=None, actions=None, defence_hosts=None, enables=None, id=None, name_regex=None, output_file=None, project_name=None, rule_name=None, rule_tag=None, rules=None, time_order_by=None, total_count=None):
        if acl_type and not isinstance(acl_type, str):
            raise TypeError("Expected argument 'acl_type' to be a str")
        pulumi.set(__self__, "acl_type", acl_type)
        if actions and not isinstance(actions, list):
            raise TypeError("Expected argument 'actions' to be a list")
        pulumi.set(__self__, "actions", actions)
        if defence_hosts and not isinstance(defence_hosts, list):
            raise TypeError("Expected argument 'defence_hosts' to be a list")
        pulumi.set(__self__, "defence_hosts", defence_hosts)
        if enables and not isinstance(enables, list):
            raise TypeError("Expected argument 'enables' to be a list")
        pulumi.set(__self__, "enables", enables)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if rule_name and not isinstance(rule_name, str):
            raise TypeError("Expected argument 'rule_name' to be a str")
        pulumi.set(__self__, "rule_name", rule_name)
        if rule_tag and not isinstance(rule_tag, str):
            raise TypeError("Expected argument 'rule_tag' to be a str")
        pulumi.set(__self__, "rule_tag", rule_tag)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if time_order_by and not isinstance(time_order_by, str):
            raise TypeError("Expected argument 'time_order_by' to be a str")
        pulumi.set(__self__, "time_order_by", time_order_by)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="aclType")
    def acl_type(self) -> str:
        return pulumi.get(self, "acl_type")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        """
        Action to be taken on requests that match the rule.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="defenceHosts")
    def defence_hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "defence_hosts")

    @property
    @pulumi.getter
    def enables(self) -> Optional[Sequence[int]]:
        """
        Whether to enable the rule.
        """
        return pulumi.get(self, "enables")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        Rule unique identifier.
        """
        return pulumi.get(self, "rule_tag")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.AclRulesRuleResult']:
        """
        Details of the rules.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="timeOrderBy")
    def time_order_by(self) -> Optional[str]:
        return pulumi.get(self, "time_order_by")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableAclRulesResult(AclRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return AclRulesResult(
            acl_type=self.acl_type,
            actions=self.actions,
            defence_hosts=self.defence_hosts,
            enables=self.enables,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_name=self.project_name,
            rule_name=self.rule_name,
            rule_tag=self.rule_tag,
            rules=self.rules,
            time_order_by=self.time_order_by,
            total_count=self.total_count)


def acl_rules(acl_type: Optional[str] = None,
              actions: Optional[Sequence[str]] = None,
              defence_hosts: Optional[Sequence[str]] = None,
              enables: Optional[Sequence[int]] = None,
              name_regex: Optional[str] = None,
              output_file: Optional[str] = None,
              project_name: Optional[str] = None,
              rule_name: Optional[str] = None,
              rule_tag: Optional[str] = None,
              time_order_by: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableAclRulesResult:
    """
    Use this data source to query detailed information of waf acl rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_acl_rules(acl_type="Block",
        actions=["observe"],
        defence_hosts=["www.tf-test.com"],
        enables=[1],
        project_name="default",
        rule_name="tf-test",
        time_order_by="ASC")
    ```


    :param str acl_type: The types of access control rules.
    :param Sequence[str] actions: Action to be taken on requests that match the rule.
    :param Sequence[str] defence_hosts: The list of queried domain names.
    :param Sequence[int] enables: The enabled status of the rule.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The name of the project to which your domain names belong.
    :param str rule_name: Rule name, fuzzy search.
    :param str rule_tag: Rule unique identifier, precise search.
    :param str time_order_by: The list shows the timing sequence.
    """
    pulumi.log.warn("""acl_rules is deprecated: volcengine.waf.AclRules has been deprecated in favor of volcengine.waf.getAclRules""")
    __args__ = dict()
    __args__['aclType'] = acl_type
    __args__['actions'] = actions
    __args__['defenceHosts'] = defence_hosts
    __args__['enables'] = enables
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['ruleName'] = rule_name
    __args__['ruleTag'] = rule_tag
    __args__['timeOrderBy'] = time_order_by
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:waf/aclRules:AclRules', __args__, opts=opts, typ=AclRulesResult).value

    return AwaitableAclRulesResult(
        acl_type=pulumi.get(__ret__, 'acl_type'),
        actions=pulumi.get(__ret__, 'actions'),
        defence_hosts=pulumi.get(__ret__, 'defence_hosts'),
        enables=pulumi.get(__ret__, 'enables'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        rule_name=pulumi.get(__ret__, 'rule_name'),
        rule_tag=pulumi.get(__ret__, 'rule_tag'),
        rules=pulumi.get(__ret__, 'rules'),
        time_order_by=pulumi.get(__ret__, 'time_order_by'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(acl_rules)
def acl_rules_output(acl_type: Optional[pulumi.Input[str]] = None,
                     actions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     defence_hosts: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     enables: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                     name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                     output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     project_name: Optional[pulumi.Input[Optional[str]]] = None,
                     rule_name: Optional[pulumi.Input[Optional[str]]] = None,
                     rule_tag: Optional[pulumi.Input[Optional[str]]] = None,
                     time_order_by: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[AclRulesResult]:
    """
    Use this data source to query detailed information of waf acl rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.waf.get_acl_rules(acl_type="Block",
        actions=["observe"],
        defence_hosts=["www.tf-test.com"],
        enables=[1],
        project_name="default",
        rule_name="tf-test",
        time_order_by="ASC")
    ```


    :param str acl_type: The types of access control rules.
    :param Sequence[str] actions: Action to be taken on requests that match the rule.
    :param Sequence[str] defence_hosts: The list of queried domain names.
    :param Sequence[int] enables: The enabled status of the rule.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The name of the project to which your domain names belong.
    :param str rule_name: Rule name, fuzzy search.
    :param str rule_tag: Rule unique identifier, precise search.
    :param str time_order_by: The list shows the timing sequence.
    """
    pulumi.log.warn("""acl_rules is deprecated: volcengine.waf.AclRules has been deprecated in favor of volcengine.waf.getAclRules""")
    ...
