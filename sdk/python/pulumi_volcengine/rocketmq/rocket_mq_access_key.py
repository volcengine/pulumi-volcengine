# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RocketMQAccessKeyArgs', 'RocketMQAccessKey']

@pulumi.input_type
class RocketMQAccessKeyArgs:
    def __init__(__self__, *,
                 all_authority: pulumi.Input[str],
                 description: pulumi.Input[str],
                 instance_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a RocketMQAccessKey resource.
        :param pulumi.Input[str] all_authority: The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        :param pulumi.Input[str] description: The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        """
        pulumi.set(__self__, "all_authority", all_authority)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> pulumi.Input[str]:
        """
        The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        """
        return pulumi.get(self, "all_authority")

    @all_authority.setter
    def all_authority(self, value: pulumi.Input[str]):
        pulumi.set(self, "all_authority", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)


@pulumi.input_type
class _RocketMQAccessKeyState:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 acl_config_json: Optional[pulumi.Input[str]] = None,
                 actived: Optional[pulumi.Input[bool]] = None,
                 all_authority: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 topic_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQAccessKeyTopicPermissionArgs']]]] = None):
        """
        Input properties used for looking up and filtering RocketMQAccessKey resources.
        :param pulumi.Input[str] access_key: The access key id of the rocketmq key.
        :param pulumi.Input[str] acl_config_json: The acl config of the rocketmq key.
        :param pulumi.Input[bool] actived: The active status of the rocketmq key.
        :param pulumi.Input[str] all_authority: The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        :param pulumi.Input[str] create_time: The create time of the rocketmq key.
        :param pulumi.Input[str] description: The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        :param pulumi.Input[str] secret_key: The secret key of the rocketmq key.
        :param pulumi.Input[Sequence[pulumi.Input['RocketMQAccessKeyTopicPermissionArgs']]] topic_permissions: The custom authority of the rocketmq key.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if acl_config_json is not None:
            pulumi.set(__self__, "acl_config_json", acl_config_json)
        if actived is not None:
            pulumi.set(__self__, "actived", actived)
        if all_authority is not None:
            pulumi.set(__self__, "all_authority", all_authority)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if topic_permissions is not None:
            pulumi.set(__self__, "topic_permissions", topic_permissions)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        The access key id of the rocketmq key.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="aclConfigJson")
    def acl_config_json(self) -> Optional[pulumi.Input[str]]:
        """
        The acl config of the rocketmq key.
        """
        return pulumi.get(self, "acl_config_json")

    @acl_config_json.setter
    def acl_config_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl_config_json", value)

    @property
    @pulumi.getter
    def actived(self) -> Optional[pulumi.Input[bool]]:
        """
        The active status of the rocketmq key.
        """
        return pulumi.get(self, "actived")

    @actived.setter
    def actived(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "actived", value)

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> Optional[pulumi.Input[str]]:
        """
        The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        """
        return pulumi.get(self, "all_authority")

    @all_authority.setter
    def all_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "all_authority", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of the rocketmq key.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The secret key of the rocketmq key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="topicPermissions")
    def topic_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQAccessKeyTopicPermissionArgs']]]]:
        """
        The custom authority of the rocketmq key.
        """
        return pulumi.get(self, "topic_permissions")

    @topic_permissions.setter
    def topic_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQAccessKeyTopicPermissionArgs']]]]):
        pulumi.set(self, "topic_permissions", value)


class RocketMQAccessKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_authority: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage rocketmq access key
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_rocket_mq_instance = volcengine.rocketmq.RocketMQInstance("fooRocketMQInstance",
            zone_ids=[foo_zones.zones[0].id],
            subnet_id=foo_subnet.id,
            version="4.8",
            compute_spec="rocketmq.n1.x2.micro",
            storage_space=300,
            auto_scale_queue=True,
            file_reserved_time=10,
            instance_name="acc-test-rocketmq",
            instance_description="acc-test",
            project_name="default",
            charge_info=volcengine.rocketmq.RocketMQInstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            tags=[volcengine.rocketmq.RocketMQInstanceTagArgs(
                key="k1",
                value="v1",
            )])
        foo_rocket_mq_access_key = volcengine.rocketmq.RocketMQAccessKey("fooRocketMQAccessKey",
            instance_id=foo_rocket_mq_instance.id,
            description="acc-test-key",
            all_authority="SUB")
        ```

        ## Import

        RocketmqAccessKey can be imported using the instance_id:access_key, e.g.

        ```sh
        $ pulumi import volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] all_authority: The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        :param pulumi.Input[str] description: The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RocketMQAccessKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rocketmq access key
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_rocket_mq_instance = volcengine.rocketmq.RocketMQInstance("fooRocketMQInstance",
            zone_ids=[foo_zones.zones[0].id],
            subnet_id=foo_subnet.id,
            version="4.8",
            compute_spec="rocketmq.n1.x2.micro",
            storage_space=300,
            auto_scale_queue=True,
            file_reserved_time=10,
            instance_name="acc-test-rocketmq",
            instance_description="acc-test",
            project_name="default",
            charge_info=volcengine.rocketmq.RocketMQInstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            tags=[volcengine.rocketmq.RocketMQInstanceTagArgs(
                key="k1",
                value="v1",
            )])
        foo_rocket_mq_access_key = volcengine.rocketmq.RocketMQAccessKey("fooRocketMQAccessKey",
            instance_id=foo_rocket_mq_instance.id,
            description="acc-test-key",
            all_authority="SUB")
        ```

        ## Import

        RocketmqAccessKey can be imported using the instance_id:access_key, e.g.

        ```sh
        $ pulumi import volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param RocketMQAccessKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RocketMQAccessKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_authority: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RocketMQAccessKeyArgs.__new__(RocketMQAccessKeyArgs)

            if all_authority is None and not opts.urn:
                raise TypeError("Missing required property 'all_authority'")
            __props__.__dict__["all_authority"] = all_authority
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["access_key"] = None
            __props__.__dict__["acl_config_json"] = None
            __props__.__dict__["actived"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["secret_key"] = None
            __props__.__dict__["topic_permissions"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secretKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(RocketMQAccessKey, __self__).__init__(
            'volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key: Optional[pulumi.Input[str]] = None,
            acl_config_json: Optional[pulumi.Input[str]] = None,
            actived: Optional[pulumi.Input[bool]] = None,
            all_authority: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            secret_key: Optional[pulumi.Input[str]] = None,
            topic_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQAccessKeyTopicPermissionArgs']]]]] = None) -> 'RocketMQAccessKey':
        """
        Get an existing RocketMQAccessKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key: The access key id of the rocketmq key.
        :param pulumi.Input[str] acl_config_json: The acl config of the rocketmq key.
        :param pulumi.Input[bool] actived: The active status of the rocketmq key.
        :param pulumi.Input[str] all_authority: The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        :param pulumi.Input[str] create_time: The create time of the rocketmq key.
        :param pulumi.Input[str] description: The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        :param pulumi.Input[str] secret_key: The secret key of the rocketmq key.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQAccessKeyTopicPermissionArgs']]]] topic_permissions: The custom authority of the rocketmq key.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RocketMQAccessKeyState.__new__(_RocketMQAccessKeyState)

        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["acl_config_json"] = acl_config_json
        __props__.__dict__["actived"] = actived
        __props__.__dict__["all_authority"] = all_authority
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["secret_key"] = secret_key
        __props__.__dict__["topic_permissions"] = topic_permissions
        return RocketMQAccessKey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[str]:
        """
        The access key id of the rocketmq key.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="aclConfigJson")
    def acl_config_json(self) -> pulumi.Output[str]:
        """
        The acl config of the rocketmq key.
        """
        return pulumi.get(self, "acl_config_json")

    @property
    @pulumi.getter
    def actived(self) -> pulumi.Output[bool]:
        """
        The active status of the rocketmq key.
        """
        return pulumi.get(self, "actived")

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> pulumi.Output[str]:
        """
        The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        """
        return pulumi.get(self, "all_authority")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of the rocketmq key.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Output[str]:
        """
        The secret key of the rocketmq key.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="topicPermissions")
    def topic_permissions(self) -> pulumi.Output[Sequence['outputs.RocketMQAccessKeyTopicPermission']]:
        """
        The custom authority of the rocketmq key.
        """
        return pulumi.get(self, "topic_permissions")

