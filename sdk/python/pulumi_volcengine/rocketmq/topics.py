# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'TopicsResult',
    'AwaitableTopicsResult',
    'topics',
    'topics_output',
]

@pulumi.output_type
class TopicsResult:
    """
    A collection of values returned by Topics.
    """
    def __init__(__self__, id=None, instance_id=None, message_type=None, name_regex=None, output_file=None, rocketmq_topics=None, topic_name=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if message_type and not isinstance(message_type, int):
            raise TypeError("Expected argument 'message_type' to be a int")
        pulumi.set(__self__, "message_type", message_type)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if rocketmq_topics and not isinstance(rocketmq_topics, list):
            raise TypeError("Expected argument 'rocketmq_topics' to be a list")
        pulumi.set(__self__, "rocketmq_topics", rocketmq_topics)
        if topic_name and not isinstance(topic_name, str):
            raise TypeError("Expected argument 'topic_name' to be a str")
        pulumi.set(__self__, "topic_name", topic_name)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The id of rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> Optional[int]:
        """
        The type of the rocketmq message.
        """
        return pulumi.get(self, "message_type")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="rocketmqTopics")
    def rocketmq_topics(self) -> Sequence['outputs.TopicsRocketmqTopicResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "rocketmq_topics")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        The name of the rocketmq topic.
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableTopicsResult(TopicsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return TopicsResult(
            id=self.id,
            instance_id=self.instance_id,
            message_type=self.message_type,
            name_regex=self.name_regex,
            output_file=self.output_file,
            rocketmq_topics=self.rocketmq_topics,
            topic_name=self.topic_name,
            total_count=self.total_count)


def topics(instance_id: Optional[str] = None,
           message_type: Optional[int] = None,
           name_regex: Optional[str] = None,
           output_file: Optional[str] = None,
           topic_name: Optional[str] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableTopicsResult:
    """
    Use this data source to query detailed information of rocketmq topics
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.rocketmq.topics(instance_id="rocketmq-cnoeea6b32118fc2")
    ```


    :param str instance_id: The id of rocketmq instance.
    :param int message_type: The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
           0: Regular message
           1: Transaction message
           2: Partition order message
           3: Global sequential message
           4: Delay message.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str topic_name: The name of the rocketmq topic. This field support fuzzy query.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['messageType'] = message_type
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['topicName'] = topic_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:rocketmq/topics:Topics', __args__, opts=opts, typ=TopicsResult).value

    return AwaitableTopicsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        message_type=pulumi.get(__ret__, 'message_type'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        rocketmq_topics=pulumi.get(__ret__, 'rocketmq_topics'),
        topic_name=pulumi.get(__ret__, 'topic_name'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(topics)
def topics_output(instance_id: Optional[pulumi.Input[str]] = None,
                  message_type: Optional[pulumi.Input[Optional[int]]] = None,
                  name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                  output_file: Optional[pulumi.Input[Optional[str]]] = None,
                  topic_name: Optional[pulumi.Input[Optional[str]]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[TopicsResult]:
    """
    Use this data source to query detailed information of rocketmq topics
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.rocketmq.topics(instance_id="rocketmq-cnoeea6b32118fc2")
    ```


    :param str instance_id: The id of rocketmq instance.
    :param int message_type: The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
           0: Regular message
           1: Transaction message
           2: Partition order message
           3: Global sequential message
           4: Delay message.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str topic_name: The name of the rocketmq topic. This field support fuzzy query.
    """
    ...
