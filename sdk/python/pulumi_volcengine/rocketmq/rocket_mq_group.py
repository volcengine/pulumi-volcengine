# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RocketMQGroupArgs', 'RocketMQGroup']

@pulumi.input_type
class RocketMQGroupArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RocketMQGroup resource.
        :param pulumi.Input[str] group_id: The id of rocketmq group.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        :param pulumi.Input[str] description: The description of rocketmq group.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "instance_id", instance_id)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        The id of rocketmq group.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of rocketmq group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _RocketMQGroupState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_sub_same: Optional[pulumi.Input[bool]] = None,
                 message_delay_time: Optional[pulumi.Input[str]] = None,
                 message_model: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 total_consume_rate: Optional[pulumi.Input[str]] = None,
                 total_diff: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering RocketMQGroup resources.
        :param pulumi.Input[str] create_time: The create time of the rocketmq group.
        :param pulumi.Input[str] description: The description of rocketmq group.
        :param pulumi.Input[str] group_id: The id of rocketmq group.
        :param pulumi.Input[str] group_type: The type of the rocketmq group.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        :param pulumi.Input[bool] is_sub_same: Whether the subscription relationship of consumer instance groups within the group is consistent.
        :param pulumi.Input[str] message_delay_time: The message delay time of the rocketmq group. The unit is milliseconds.
        :param pulumi.Input[str] message_model: The message model of the rocketmq group.
        :param pulumi.Input[str] status: The status of the rocketmq group.
        :param pulumi.Input[str] total_consume_rate: The total consume rate of the rocketmq group. The unit is per second.
        :param pulumi.Input[int] total_diff: The total amount of unconsumed messages.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_sub_same is not None:
            pulumi.set(__self__, "is_sub_same", is_sub_same)
        if message_delay_time is not None:
            pulumi.set(__self__, "message_delay_time", message_delay_time)
        if message_model is not None:
            pulumi.set(__self__, "message_model", message_model)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if total_consume_rate is not None:
            pulumi.set(__self__, "total_consume_rate", total_consume_rate)
        if total_diff is not None:
            pulumi.set(__self__, "total_diff", total_diff)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of the rocketmq group.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of rocketmq group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of rocketmq group.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the rocketmq group.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="isSubSame")
    def is_sub_same(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the subscription relationship of consumer instance groups within the group is consistent.
        """
        return pulumi.get(self, "is_sub_same")

    @is_sub_same.setter
    def is_sub_same(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_sub_same", value)

    @property
    @pulumi.getter(name="messageDelayTime")
    def message_delay_time(self) -> Optional[pulumi.Input[str]]:
        """
        The message delay time of the rocketmq group. The unit is milliseconds.
        """
        return pulumi.get(self, "message_delay_time")

    @message_delay_time.setter
    def message_delay_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_delay_time", value)

    @property
    @pulumi.getter(name="messageModel")
    def message_model(self) -> Optional[pulumi.Input[str]]:
        """
        The message model of the rocketmq group.
        """
        return pulumi.get(self, "message_model")

    @message_model.setter
    def message_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_model", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the rocketmq group.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="totalConsumeRate")
    def total_consume_rate(self) -> Optional[pulumi.Input[str]]:
        """
        The total consume rate of the rocketmq group. The unit is per second.
        """
        return pulumi.get(self, "total_consume_rate")

    @total_consume_rate.setter
    def total_consume_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "total_consume_rate", value)

    @property
    @pulumi.getter(name="totalDiff")
    def total_diff(self) -> Optional[pulumi.Input[int]]:
        """
        The total amount of unconsumed messages.
        """
        return pulumi.get(self, "total_diff")

    @total_diff.setter
    def total_diff(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_diff", value)


class RocketMQGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage rocketmq group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_rocket_mq_instance = volcengine.rocketmq.RocketMQInstance("fooRocketMQInstance",
            zone_ids=[foo_zones.zones[0].id],
            subnet_id=foo_subnet.id,
            version="4.8",
            compute_spec="rocketmq.n1.x2.micro",
            storage_space=300,
            auto_scale_queue=True,
            file_reserved_time=10,
            instance_name="acc-test-rocketmq",
            instance_description="acc-test",
            project_name="default",
            charge_info=volcengine.rocketmq.RocketMQInstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            tags=[volcengine.rocketmq.RocketMQInstanceTagArgs(
                key="k1",
                value="v1",
            )])
        foo_rocket_mq_group = volcengine.rocketmq.RocketMQGroup("fooRocketMQGroup",
            instance_id=foo_rocket_mq_instance.id,
            group_id="acc-test-rocketmq-group",
            description="acc-test")
        ```

        ## Import

        RocketmqGroup can be imported using the instance_id:group_id, e.g.

        ```sh
        $ pulumi import volcengine:rocketmq/rocketMQGroup:RocketMQGroup default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of rocketmq group.
        :param pulumi.Input[str] group_id: The id of rocketmq group.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RocketMQGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rocketmq group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_rocket_mq_instance = volcengine.rocketmq.RocketMQInstance("fooRocketMQInstance",
            zone_ids=[foo_zones.zones[0].id],
            subnet_id=foo_subnet.id,
            version="4.8",
            compute_spec="rocketmq.n1.x2.micro",
            storage_space=300,
            auto_scale_queue=True,
            file_reserved_time=10,
            instance_name="acc-test-rocketmq",
            instance_description="acc-test",
            project_name="default",
            charge_info=volcengine.rocketmq.RocketMQInstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            tags=[volcengine.rocketmq.RocketMQInstanceTagArgs(
                key="k1",
                value="v1",
            )])
        foo_rocket_mq_group = volcengine.rocketmq.RocketMQGroup("fooRocketMQGroup",
            instance_id=foo_rocket_mq_instance.id,
            group_id="acc-test-rocketmq-group",
            description="acc-test")
        ```

        ## Import

        RocketmqGroup can be imported using the instance_id:group_id, e.g.

        ```sh
        $ pulumi import volcengine:rocketmq/rocketMQGroup:RocketMQGroup default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param RocketMQGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RocketMQGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RocketMQGroupArgs.__new__(RocketMQGroupArgs)

            __props__.__dict__["description"] = description
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["group_type"] = None
            __props__.__dict__["is_sub_same"] = None
            __props__.__dict__["message_delay_time"] = None
            __props__.__dict__["message_model"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["total_consume_rate"] = None
            __props__.__dict__["total_diff"] = None
        super(RocketMQGroup, __self__).__init__(
            'volcengine:rocketmq/rocketMQGroup:RocketMQGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            group_type: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            is_sub_same: Optional[pulumi.Input[bool]] = None,
            message_delay_time: Optional[pulumi.Input[str]] = None,
            message_model: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            total_consume_rate: Optional[pulumi.Input[str]] = None,
            total_diff: Optional[pulumi.Input[int]] = None) -> 'RocketMQGroup':
        """
        Get an existing RocketMQGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: The create time of the rocketmq group.
        :param pulumi.Input[str] description: The description of rocketmq group.
        :param pulumi.Input[str] group_id: The id of rocketmq group.
        :param pulumi.Input[str] group_type: The type of the rocketmq group.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        :param pulumi.Input[bool] is_sub_same: Whether the subscription relationship of consumer instance groups within the group is consistent.
        :param pulumi.Input[str] message_delay_time: The message delay time of the rocketmq group. The unit is milliseconds.
        :param pulumi.Input[str] message_model: The message model of the rocketmq group.
        :param pulumi.Input[str] status: The status of the rocketmq group.
        :param pulumi.Input[str] total_consume_rate: The total consume rate of the rocketmq group. The unit is per second.
        :param pulumi.Input[int] total_diff: The total amount of unconsumed messages.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RocketMQGroupState.__new__(_RocketMQGroupState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["group_type"] = group_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_sub_same"] = is_sub_same
        __props__.__dict__["message_delay_time"] = message_delay_time
        __props__.__dict__["message_model"] = message_model
        __props__.__dict__["status"] = status
        __props__.__dict__["total_consume_rate"] = total_consume_rate
        __props__.__dict__["total_diff"] = total_diff
        return RocketMQGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of the rocketmq group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of rocketmq group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        The id of rocketmq group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Output[str]:
        """
        The type of the rocketmq group.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isSubSame")
    def is_sub_same(self) -> pulumi.Output[bool]:
        """
        Whether the subscription relationship of consumer instance groups within the group is consistent.
        """
        return pulumi.get(self, "is_sub_same")

    @property
    @pulumi.getter(name="messageDelayTime")
    def message_delay_time(self) -> pulumi.Output[str]:
        """
        The message delay time of the rocketmq group. The unit is milliseconds.
        """
        return pulumi.get(self, "message_delay_time")

    @property
    @pulumi.getter(name="messageModel")
    def message_model(self) -> pulumi.Output[str]:
        """
        The message model of the rocketmq group.
        """
        return pulumi.get(self, "message_model")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the rocketmq group.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalConsumeRate")
    def total_consume_rate(self) -> pulumi.Output[str]:
        """
        The total consume rate of the rocketmq group. The unit is per second.
        """
        return pulumi.get(self, "total_consume_rate")

    @property
    @pulumi.getter(name="totalDiff")
    def total_diff(self) -> pulumi.Output[int]:
        """
        The total amount of unconsumed messages.
        """
        return pulumi.get(self, "total_diff")

