# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetGroupsResult',
    'AwaitableGetGroupsResult',
    'get_groups',
    'get_groups_output',
]

@pulumi.output_type
class GetGroupsResult:
    """
    A collection of values returned by getGroups.
    """
    def __init__(__self__, group_id=None, group_type=None, id=None, instance_id=None, output_file=None, rocketmq_groups=None, total_count=None):
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if group_type and not isinstance(group_type, str):
            raise TypeError("Expected argument 'group_type' to be a str")
        pulumi.set(__self__, "group_type", group_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if rocketmq_groups and not isinstance(rocketmq_groups, list):
            raise TypeError("Expected argument 'rocketmq_groups' to be a list")
        pulumi.set(__self__, "rocketmq_groups", rocketmq_groups)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        The id of the rocketmq group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[str]:
        """
        The type of the rocketmq group.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="rocketmqGroups")
    def rocketmq_groups(self) -> Sequence['outputs.GetGroupsRocketmqGroupResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "rocketmq_groups")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetGroupsResult(GetGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupsResult(
            group_id=self.group_id,
            group_type=self.group_type,
            id=self.id,
            instance_id=self.instance_id,
            output_file=self.output_file,
            rocketmq_groups=self.rocketmq_groups,
            total_count=self.total_count)


def get_groups(group_id: Optional[str] = None,
               group_type: Optional[str] = None,
               instance_id: Optional[str] = None,
               output_file: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupsResult:
    """
    Use this data source to query detailed information of rocketmq groups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.rocketmq.get_groups(instance_id="rocketmq-cnoeea6b32118fc2")
    ```


    :param str group_id: The id of rocketmq group. This field support fuzzy query.
    :param str group_type: The type of rocketmq group. Valid values: `TCP`.
    :param str instance_id: The id of rocketmq instance.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['groupType'] = group_type
    __args__['instanceId'] = instance_id
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:rocketmq/getGroups:getGroups', __args__, opts=opts, typ=GetGroupsResult).value

    return AwaitableGetGroupsResult(
        group_id=pulumi.get(__ret__, 'group_id'),
        group_type=pulumi.get(__ret__, 'group_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        rocketmq_groups=pulumi.get(__ret__, 'rocketmq_groups'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_groups)
def get_groups_output(group_id: Optional[pulumi.Input[Optional[str]]] = None,
                      group_type: Optional[pulumi.Input[Optional[str]]] = None,
                      instance_id: Optional[pulumi.Input[str]] = None,
                      output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupsResult]:
    """
    Use this data source to query detailed information of rocketmq groups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.rocketmq.get_groups(instance_id="rocketmq-cnoeea6b32118fc2")
    ```


    :param str group_id: The id of rocketmq group. This field support fuzzy query.
    :param str group_type: The type of rocketmq group. Valid values: `TCP`.
    :param str instance_id: The id of rocketmq instance.
    :param str output_file: File name where to save data source results.
    """
    ...
