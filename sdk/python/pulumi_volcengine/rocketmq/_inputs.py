# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstancesTagArgs',
    'RocketMQAccessKeyTopicPermissionArgs',
    'RocketMQAllowListAssociatedInstanceArgs',
    'RocketMQInstanceChargeInfoArgs',
    'RocketMQInstanceConnectionInfoArgs',
    'RocketMQInstanceTagArgs',
    'RocketMQTopicAccessPolicyArgs',
    'RocketMQTopicGroupArgs',
    'RocketMQTopicQueueArgs',
]

@pulumi.input_type
class InstancesTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RocketMQAccessKeyTopicPermissionArgs:
    def __init__(__self__, *,
                 permission: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] permission: The custom authority for the topic.
        :param pulumi.Input[str] topic_name: The name of the rocketmq topic.
        """
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        """
        The custom authority for the topic.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rocketmq topic.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class RocketMQAllowListAssociatedInstanceArgs:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 vpc: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_id: The id of the rocketmq instance.
        :param pulumi.Input[str] instance_name: The name of the rocketmq instance.
        :param pulumi.Input[str] vpc: The vpc id of the rocketmq instance.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rocketmq instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[str]]:
        """
        The vpc id of the rocketmq instance.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc", value)


@pulumi.input_type
class RocketMQInstanceChargeInfoArgs:
    def __init__(__self__, *,
                 charge_type: pulumi.Input[str],
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 period_unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] charge_type: The charge type of the rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
        :param pulumi.Input[bool] auto_renew: Whether to automatically renew in prepaid scenarios. Default is false.
        :param pulumi.Input[int] period: Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Monthly`, the value range is 1-9. When PeriodUnit is specified as `Yearly`, the value range is 1-3. Default is 1.
        :param pulumi.Input[str] period_unit: The purchase cycle in the prepaid scenario. Valid values: `Monthly`, `Yearly`. Default is `Monthly`.
        """
        pulumi.set(__self__, "charge_type", charge_type)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Input[str]:
        """
        The charge type of the rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically renew in prepaid scenarios. Default is false.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Monthly`, the value range is 1-9. When PeriodUnit is specified as `Yearly`, the value range is 1-3. Default is 1.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[str]]:
        """
        The purchase cycle in the prepaid scenario. Valid values: `Monthly`, `Yearly`. Default is `Monthly`.
        """
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period_unit", value)


@pulumi.input_type
class RocketMQInstanceConnectionInfoArgs:
    def __init__(__self__, *,
                 endpoint_address_ip: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None,
                 internal_endpoint: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 public_endpoint: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] endpoint_address_ip: The endpoint address ip of the rocketmq.
        :param pulumi.Input[str] endpoint_type: The endpoint type of the rocketmq.
        :param pulumi.Input[str] internal_endpoint: The internal endpoint of the rocketmq.
        :param pulumi.Input[str] network_type: The network type of the rocketmq.
        :param pulumi.Input[str] public_endpoint: The public endpoint of the rocketmq.
        """
        if endpoint_address_ip is not None:
            pulumi.set(__self__, "endpoint_address_ip", endpoint_address_ip)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if internal_endpoint is not None:
            pulumi.set(__self__, "internal_endpoint", internal_endpoint)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if public_endpoint is not None:
            pulumi.set(__self__, "public_endpoint", public_endpoint)

    @property
    @pulumi.getter(name="endpointAddressIp")
    def endpoint_address_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint address ip of the rocketmq.
        """
        return pulumi.get(self, "endpoint_address_ip")

    @endpoint_address_ip.setter
    def endpoint_address_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_address_ip", value)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint type of the rocketmq.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_type", value)

    @property
    @pulumi.getter(name="internalEndpoint")
    def internal_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The internal endpoint of the rocketmq.
        """
        return pulumi.get(self, "internal_endpoint")

    @internal_endpoint.setter
    def internal_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_endpoint", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        The network type of the rocketmq.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The public endpoint of the rocketmq.
        """
        return pulumi.get(self, "public_endpoint")

    @public_endpoint.setter
    def public_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_endpoint", value)


@pulumi.input_type
class RocketMQInstanceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The Key of Tags.
        :param pulumi.Input[str] value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RocketMQTopicAccessPolicyArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 authority: pulumi.Input[str]):
        """
        :param pulumi.Input[str] access_key: The access key of the rocketmq key.
        :param pulumi.Input[str] authority: The authority of the rocketmq key for the current topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "authority", authority)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        """
        The access key of the rocketmq key.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def authority(self) -> pulumi.Input[str]:
        """
        The authority of the rocketmq key for the current topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        """
        return pulumi.get(self, "authority")

    @authority.setter
    def authority(self, value: pulumi.Input[str]):
        pulumi.set(self, "authority", value)


@pulumi.input_type
class RocketMQTopicGroupArgs:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[str]] = None,
                 message_model: Optional[pulumi.Input[str]] = None,
                 sub_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_id: The id of the rocketmq group.
        :param pulumi.Input[str] message_model: The message model of the rocketmq group.
        :param pulumi.Input[str] sub_string: The sub string of the rocketmq group.
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if message_model is not None:
            pulumi.set(__self__, "message_model", message_model)
        if sub_string is not None:
            pulumi.set(__self__, "sub_string", sub_string)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the rocketmq group.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="messageModel")
    def message_model(self) -> Optional[pulumi.Input[str]]:
        """
        The message model of the rocketmq group.
        """
        return pulumi.get(self, "message_model")

    @message_model.setter
    def message_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_model", value)

    @property
    @pulumi.getter(name="subString")
    def sub_string(self) -> Optional[pulumi.Input[str]]:
        """
        The sub string of the rocketmq group.
        """
        return pulumi.get(self, "sub_string")

    @sub_string.setter
    def sub_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_string", value)


@pulumi.input_type
class RocketMQTopicQueueArgs:
    def __init__(__self__, *,
                 end_offset: Optional[pulumi.Input[int]] = None,
                 last_update_timestamp: Optional[pulumi.Input[int]] = None,
                 message_count: Optional[pulumi.Input[int]] = None,
                 queue_id: Optional[pulumi.Input[str]] = None,
                 start_offset: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_offset: The end offset of the rocketmq queue.
        :param pulumi.Input[int] last_update_timestamp: The last update timestamp of the rocketmq queue.
        :param pulumi.Input[int] message_count: The message count of the rocketmq queue.
        :param pulumi.Input[str] queue_id: The id of the rocketmq queue.
        :param pulumi.Input[int] start_offset: The start offset of the rocketmq queue.
        """
        if end_offset is not None:
            pulumi.set(__self__, "end_offset", end_offset)
        if last_update_timestamp is not None:
            pulumi.set(__self__, "last_update_timestamp", last_update_timestamp)
        if message_count is not None:
            pulumi.set(__self__, "message_count", message_count)
        if queue_id is not None:
            pulumi.set(__self__, "queue_id", queue_id)
        if start_offset is not None:
            pulumi.set(__self__, "start_offset", start_offset)

    @property
    @pulumi.getter(name="endOffset")
    def end_offset(self) -> Optional[pulumi.Input[int]]:
        """
        The end offset of the rocketmq queue.
        """
        return pulumi.get(self, "end_offset")

    @end_offset.setter
    def end_offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_offset", value)

    @property
    @pulumi.getter(name="lastUpdateTimestamp")
    def last_update_timestamp(self) -> Optional[pulumi.Input[int]]:
        """
        The last update timestamp of the rocketmq queue.
        """
        return pulumi.get(self, "last_update_timestamp")

    @last_update_timestamp.setter
    def last_update_timestamp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_update_timestamp", value)

    @property
    @pulumi.getter(name="messageCount")
    def message_count(self) -> Optional[pulumi.Input[int]]:
        """
        The message count of the rocketmq queue.
        """
        return pulumi.get(self, "message_count")

    @message_count.setter
    def message_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_count", value)

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the rocketmq queue.
        """
        return pulumi.get(self, "queue_id")

    @queue_id.setter
    def queue_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_id", value)

    @property
    @pulumi.getter(name="startOffset")
    def start_offset(self) -> Optional[pulumi.Input[int]]:
        """
        The start offset of the rocketmq queue.
        """
        return pulumi.get(self, "start_offset")

    @start_offset.setter
    def start_offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_offset", value)


