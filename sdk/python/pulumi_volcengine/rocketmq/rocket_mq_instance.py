# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RocketMQInstanceArgs', 'RocketMQInstance']

@pulumi.input_type
class RocketMQInstanceArgs:
    def __init__(__self__, *,
                 charge_info: pulumi.Input['RocketMQInstanceChargeInfoArgs'],
                 compute_spec: pulumi.Input[str],
                 file_reserved_time: pulumi.Input[int],
                 storage_space: pulumi.Input[int],
                 subnet_id: pulumi.Input[str],
                 version: pulumi.Input[str],
                 zone_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 auto_scale_queue: Optional[pulumi.Input[bool]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceTagArgs']]]] = None):
        """
        The set of arguments for constructing a RocketMQInstance resource.
        :param pulumi.Input['RocketMQInstanceChargeInfoArgs'] charge_info: The charge information of the rocketmq instance.
        :param pulumi.Input[str] compute_spec: The compute spec of the rocketmq instance.
        :param pulumi.Input[int] file_reserved_time: The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
        :param pulumi.Input[int] storage_space: The storage space of the rocketmq instance.
        :param pulumi.Input[str] subnet_id: The subnet id of the rocketmq instance.
        :param pulumi.Input[str] version: The version of the rocketmq instance. Valid values: `4.8`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the rocketmq instance. Support specifying multiple availability zones.
        :param pulumi.Input[bool] auto_scale_queue: Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `compute_field` and `storage_space`.
        :param pulumi.Input[str] instance_description: The instance description of the rocketmq instance.
        :param pulumi.Input[str] instance_name: The instance name of the rocketmq instance.
        :param pulumi.Input[str] project_name: The project name of the rocketmq instance.
        :param pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceTagArgs']]] tags: Tags.
        """
        pulumi.set(__self__, "charge_info", charge_info)
        pulumi.set(__self__, "compute_spec", compute_spec)
        pulumi.set(__self__, "file_reserved_time", file_reserved_time)
        pulumi.set(__self__, "storage_space", storage_space)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "zone_ids", zone_ids)
        if auto_scale_queue is not None:
            pulumi.set(__self__, "auto_scale_queue", auto_scale_queue)
        if instance_description is not None:
            pulumi.set(__self__, "instance_description", instance_description)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="chargeInfo")
    def charge_info(self) -> pulumi.Input['RocketMQInstanceChargeInfoArgs']:
        """
        The charge information of the rocketmq instance.
        """
        return pulumi.get(self, "charge_info")

    @charge_info.setter
    def charge_info(self, value: pulumi.Input['RocketMQInstanceChargeInfoArgs']):
        pulumi.set(self, "charge_info", value)

    @property
    @pulumi.getter(name="computeSpec")
    def compute_spec(self) -> pulumi.Input[str]:
        """
        The compute spec of the rocketmq instance.
        """
        return pulumi.get(self, "compute_spec")

    @compute_spec.setter
    def compute_spec(self, value: pulumi.Input[str]):
        pulumi.set(self, "compute_spec", value)

    @property
    @pulumi.getter(name="fileReservedTime")
    def file_reserved_time(self) -> pulumi.Input[int]:
        """
        The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
        """
        return pulumi.get(self, "file_reserved_time")

    @file_reserved_time.setter
    def file_reserved_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "file_reserved_time", value)

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> pulumi.Input[int]:
        """
        The storage space of the rocketmq instance.
        """
        return pulumi.get(self, "storage_space")

    @storage_space.setter
    def storage_space(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_space", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The subnet id of the rocketmq instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        The version of the rocketmq instance. Valid values: `4.8`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The zone id of the rocketmq instance. Support specifying multiple availability zones.
        """
        return pulumi.get(self, "zone_ids")

    @zone_ids.setter
    def zone_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "zone_ids", value)

    @property
    @pulumi.getter(name="autoScaleQueue")
    def auto_scale_queue(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `compute_field` and `storage_space`.
        """
        return pulumi.get(self, "auto_scale_queue")

    @auto_scale_queue.setter
    def auto_scale_queue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_scale_queue", value)

    @property
    @pulumi.getter(name="instanceDescription")
    def instance_description(self) -> Optional[pulumi.Input[str]]:
        """
        The instance description of the rocketmq instance.
        """
        return pulumi.get(self, "instance_description")

    @instance_description.setter
    def instance_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_description", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The instance name of the rocketmq instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of the rocketmq instance.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _RocketMQInstanceState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 apply_private_dns_to_public: Optional[pulumi.Input[bool]] = None,
                 auto_scale_queue: Optional[pulumi.Input[bool]] = None,
                 available_queue_number: Optional[pulumi.Input[int]] = None,
                 charge_info: Optional[pulumi.Input['RocketMQInstanceChargeInfoArgs']] = None,
                 compute_spec: Optional[pulumi.Input[str]] = None,
                 connection_infos: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceConnectionInfoArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 enable_ssl: Optional[pulumi.Input[bool]] = None,
                 file_reserved_time: Optional[pulumi.Input[int]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_status: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceTagArgs']]]] = None,
                 used_group_number: Optional[pulumi.Input[int]] = None,
                 used_queue_number: Optional[pulumi.Input[int]] = None,
                 used_storage_space: Optional[pulumi.Input[int]] = None,
                 used_topic_number: Optional[pulumi.Input[int]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering RocketMQInstance resources.
        :param pulumi.Input[str] account_id: The account id of the rocketmq instance.
        :param pulumi.Input[bool] apply_private_dns_to_public: Whether the private dns to public function is enabled for the rocketmq instance.
        :param pulumi.Input[bool] auto_scale_queue: Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `compute_field` and `storage_space`.
        :param pulumi.Input[int] available_queue_number: The available queue number of the rocketmq instance.
        :param pulumi.Input['RocketMQInstanceChargeInfoArgs'] charge_info: The charge information of the rocketmq instance.
        :param pulumi.Input[str] compute_spec: The compute spec of the rocketmq instance.
        :param pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceConnectionInfoArgs']]] connection_infos: The connection information of the rocketmq.
        :param pulumi.Input[str] create_time: The create time of the rocketmq instance.
        :param pulumi.Input[str] eip_id: The eip id of the rocketmq instance.
        :param pulumi.Input[bool] enable_ssl: Whether the ssl authentication is enabled for the rocketmq instance.
        :param pulumi.Input[int] file_reserved_time: The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
        :param pulumi.Input[str] instance_description: The instance description of the rocketmq instance.
        :param pulumi.Input[str] instance_name: The instance name of the rocketmq instance.
        :param pulumi.Input[str] instance_status: The status of the rocketmq instance.
        :param pulumi.Input[str] project_name: The project name of the rocketmq instance.
        :param pulumi.Input[str] region_id: The region id of the rocketmq instance.
        :param pulumi.Input[str] ssl_mode: The ssl mode of the rocketmq instance.
        :param pulumi.Input[int] storage_space: The storage space of the rocketmq instance.
        :param pulumi.Input[str] subnet_id: The subnet id of the rocketmq instance.
        :param pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceTagArgs']]] tags: Tags.
        :param pulumi.Input[int] used_group_number: The used group number of the rocketmq instance.
        :param pulumi.Input[int] used_queue_number: The used queue number of the rocketmq instance.
        :param pulumi.Input[int] used_storage_space: The used storage space of the rocketmq instance.
        :param pulumi.Input[int] used_topic_number: The used topic number of the rocketmq instance.
        :param pulumi.Input[str] version: The version of the rocketmq instance. Valid values: `4.8`.
        :param pulumi.Input[str] vpc_id: The vpc id of the rocketmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the rocketmq instance. Support specifying multiple availability zones.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if apply_private_dns_to_public is not None:
            pulumi.set(__self__, "apply_private_dns_to_public", apply_private_dns_to_public)
        if auto_scale_queue is not None:
            pulumi.set(__self__, "auto_scale_queue", auto_scale_queue)
        if available_queue_number is not None:
            pulumi.set(__self__, "available_queue_number", available_queue_number)
        if charge_info is not None:
            pulumi.set(__self__, "charge_info", charge_info)
        if compute_spec is not None:
            pulumi.set(__self__, "compute_spec", compute_spec)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if enable_ssl is not None:
            pulumi.set(__self__, "enable_ssl", enable_ssl)
        if file_reserved_time is not None:
            pulumi.set(__self__, "file_reserved_time", file_reserved_time)
        if instance_description is not None:
            pulumi.set(__self__, "instance_description", instance_description)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_status is not None:
            pulumi.set(__self__, "instance_status", instance_status)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if storage_space is not None:
            pulumi.set(__self__, "storage_space", storage_space)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if used_group_number is not None:
            pulumi.set(__self__, "used_group_number", used_group_number)
        if used_queue_number is not None:
            pulumi.set(__self__, "used_queue_number", used_queue_number)
        if used_storage_space is not None:
            pulumi.set(__self__, "used_storage_space", used_storage_space)
        if used_topic_number is not None:
            pulumi.set(__self__, "used_topic_number", used_topic_number)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone_ids is not None:
            pulumi.set(__self__, "zone_ids", zone_ids)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account id of the rocketmq instance.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applyPrivateDnsToPublic")
    def apply_private_dns_to_public(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the private dns to public function is enabled for the rocketmq instance.
        """
        return pulumi.get(self, "apply_private_dns_to_public")

    @apply_private_dns_to_public.setter
    def apply_private_dns_to_public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_private_dns_to_public", value)

    @property
    @pulumi.getter(name="autoScaleQueue")
    def auto_scale_queue(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `compute_field` and `storage_space`.
        """
        return pulumi.get(self, "auto_scale_queue")

    @auto_scale_queue.setter
    def auto_scale_queue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_scale_queue", value)

    @property
    @pulumi.getter(name="availableQueueNumber")
    def available_queue_number(self) -> Optional[pulumi.Input[int]]:
        """
        The available queue number of the rocketmq instance.
        """
        return pulumi.get(self, "available_queue_number")

    @available_queue_number.setter
    def available_queue_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "available_queue_number", value)

    @property
    @pulumi.getter(name="chargeInfo")
    def charge_info(self) -> Optional[pulumi.Input['RocketMQInstanceChargeInfoArgs']]:
        """
        The charge information of the rocketmq instance.
        """
        return pulumi.get(self, "charge_info")

    @charge_info.setter
    def charge_info(self, value: Optional[pulumi.Input['RocketMQInstanceChargeInfoArgs']]):
        pulumi.set(self, "charge_info", value)

    @property
    @pulumi.getter(name="computeSpec")
    def compute_spec(self) -> Optional[pulumi.Input[str]]:
        """
        The compute spec of the rocketmq instance.
        """
        return pulumi.get(self, "compute_spec")

    @compute_spec.setter
    def compute_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_spec", value)

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceConnectionInfoArgs']]]]:
        """
        The connection information of the rocketmq.
        """
        return pulumi.get(self, "connection_infos")

    @connection_infos.setter
    def connection_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceConnectionInfoArgs']]]]):
        pulumi.set(self, "connection_infos", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of the rocketmq instance.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The eip id of the rocketmq instance.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="enableSsl")
    def enable_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the ssl authentication is enabled for the rocketmq instance.
        """
        return pulumi.get(self, "enable_ssl")

    @enable_ssl.setter
    def enable_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ssl", value)

    @property
    @pulumi.getter(name="fileReservedTime")
    def file_reserved_time(self) -> Optional[pulumi.Input[int]]:
        """
        The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
        """
        return pulumi.get(self, "file_reserved_time")

    @file_reserved_time.setter
    def file_reserved_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_reserved_time", value)

    @property
    @pulumi.getter(name="instanceDescription")
    def instance_description(self) -> Optional[pulumi.Input[str]]:
        """
        The instance description of the rocketmq instance.
        """
        return pulumi.get(self, "instance_description")

    @instance_description.setter
    def instance_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_description", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The instance name of the rocketmq instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the rocketmq instance.
        """
        return pulumi.get(self, "instance_status")

    @instance_status.setter
    def instance_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_status", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of the rocketmq instance.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The region id of the rocketmq instance.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The ssl mode of the rocketmq instance.
        """
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> Optional[pulumi.Input[int]]:
        """
        The storage space of the rocketmq instance.
        """
        return pulumi.get(self, "storage_space")

    @storage_space.setter
    def storage_space(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_space", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet id of the rocketmq instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQInstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="usedGroupNumber")
    def used_group_number(self) -> Optional[pulumi.Input[int]]:
        """
        The used group number of the rocketmq instance.
        """
        return pulumi.get(self, "used_group_number")

    @used_group_number.setter
    def used_group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_group_number", value)

    @property
    @pulumi.getter(name="usedQueueNumber")
    def used_queue_number(self) -> Optional[pulumi.Input[int]]:
        """
        The used queue number of the rocketmq instance.
        """
        return pulumi.get(self, "used_queue_number")

    @used_queue_number.setter
    def used_queue_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_queue_number", value)

    @property
    @pulumi.getter(name="usedStorageSpace")
    def used_storage_space(self) -> Optional[pulumi.Input[int]]:
        """
        The used storage space of the rocketmq instance.
        """
        return pulumi.get(self, "used_storage_space")

    @used_storage_space.setter
    def used_storage_space(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_storage_space", value)

    @property
    @pulumi.getter(name="usedTopicNumber")
    def used_topic_number(self) -> Optional[pulumi.Input[int]]:
        """
        The used topic number of the rocketmq instance.
        """
        return pulumi.get(self, "used_topic_number")

    @used_topic_number.setter
    def used_topic_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_topic_number", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the rocketmq instance. Valid values: `4.8`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The vpc id of the rocketmq instance.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The zone id of the rocketmq instance. Support specifying multiple availability zones.
        """
        return pulumi.get(self, "zone_ids")

    @zone_ids.setter
    def zone_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zone_ids", value)


class RocketMQInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scale_queue: Optional[pulumi.Input[bool]] = None,
                 charge_info: Optional[pulumi.Input[pulumi.InputType['RocketMQInstanceChargeInfoArgs']]] = None,
                 compute_spec: Optional[pulumi.Input[str]] = None,
                 file_reserved_time: Optional[pulumi.Input[int]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQInstanceTagArgs']]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage rocketmq instance
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_rocket_mq_instance = volcengine.rocketmq.RocketMQInstance("fooRocketMQInstance",
            zone_ids=[foo_zones.zones[0].id],
            subnet_id=foo_subnet.id,
            version="4.8",
            compute_spec="rocketmq.n1.x2.micro",
            storage_space=300,
            auto_scale_queue=True,
            file_reserved_time=10,
            instance_name="acc-test-rocketmq",
            instance_description="acc-test",
            project_name="default",
            charge_info=volcengine.rocketmq.RocketMQInstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            tags=[volcengine.rocketmq.RocketMQInstanceTagArgs(
                key="k1",
                value="v1",
            )])
        ```

        ## Import

        RocketmqInstance can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:rocketmq/rocketMQInstance:RocketMQInstance default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_scale_queue: Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `compute_field` and `storage_space`.
        :param pulumi.Input[pulumi.InputType['RocketMQInstanceChargeInfoArgs']] charge_info: The charge information of the rocketmq instance.
        :param pulumi.Input[str] compute_spec: The compute spec of the rocketmq instance.
        :param pulumi.Input[int] file_reserved_time: The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
        :param pulumi.Input[str] instance_description: The instance description of the rocketmq instance.
        :param pulumi.Input[str] instance_name: The instance name of the rocketmq instance.
        :param pulumi.Input[str] project_name: The project name of the rocketmq instance.
        :param pulumi.Input[int] storage_space: The storage space of the rocketmq instance.
        :param pulumi.Input[str] subnet_id: The subnet id of the rocketmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQInstanceTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] version: The version of the rocketmq instance. Valid values: `4.8`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the rocketmq instance. Support specifying multiple availability zones.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RocketMQInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rocketmq instance
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_rocket_mq_instance = volcengine.rocketmq.RocketMQInstance("fooRocketMQInstance",
            zone_ids=[foo_zones.zones[0].id],
            subnet_id=foo_subnet.id,
            version="4.8",
            compute_spec="rocketmq.n1.x2.micro",
            storage_space=300,
            auto_scale_queue=True,
            file_reserved_time=10,
            instance_name="acc-test-rocketmq",
            instance_description="acc-test",
            project_name="default",
            charge_info=volcengine.rocketmq.RocketMQInstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            tags=[volcengine.rocketmq.RocketMQInstanceTagArgs(
                key="k1",
                value="v1",
            )])
        ```

        ## Import

        RocketmqInstance can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:rocketmq/rocketMQInstance:RocketMQInstance default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param RocketMQInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RocketMQInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scale_queue: Optional[pulumi.Input[bool]] = None,
                 charge_info: Optional[pulumi.Input[pulumi.InputType['RocketMQInstanceChargeInfoArgs']]] = None,
                 compute_spec: Optional[pulumi.Input[str]] = None,
                 file_reserved_time: Optional[pulumi.Input[int]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQInstanceTagArgs']]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RocketMQInstanceArgs.__new__(RocketMQInstanceArgs)

            __props__.__dict__["auto_scale_queue"] = auto_scale_queue
            if charge_info is None and not opts.urn:
                raise TypeError("Missing required property 'charge_info'")
            __props__.__dict__["charge_info"] = charge_info
            if compute_spec is None and not opts.urn:
                raise TypeError("Missing required property 'compute_spec'")
            __props__.__dict__["compute_spec"] = compute_spec
            if file_reserved_time is None and not opts.urn:
                raise TypeError("Missing required property 'file_reserved_time'")
            __props__.__dict__["file_reserved_time"] = file_reserved_time
            __props__.__dict__["instance_description"] = instance_description
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["project_name"] = project_name
            if storage_space is None and not opts.urn:
                raise TypeError("Missing required property 'storage_space'")
            __props__.__dict__["storage_space"] = storage_space
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            if zone_ids is None and not opts.urn:
                raise TypeError("Missing required property 'zone_ids'")
            __props__.__dict__["zone_ids"] = zone_ids
            __props__.__dict__["account_id"] = None
            __props__.__dict__["apply_private_dns_to_public"] = None
            __props__.__dict__["available_queue_number"] = None
            __props__.__dict__["connection_infos"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["eip_id"] = None
            __props__.__dict__["enable_ssl"] = None
            __props__.__dict__["instance_status"] = None
            __props__.__dict__["region_id"] = None
            __props__.__dict__["ssl_mode"] = None
            __props__.__dict__["used_group_number"] = None
            __props__.__dict__["used_queue_number"] = None
            __props__.__dict__["used_storage_space"] = None
            __props__.__dict__["used_topic_number"] = None
            __props__.__dict__["vpc_id"] = None
        super(RocketMQInstance, __self__).__init__(
            'volcengine:rocketmq/rocketMQInstance:RocketMQInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            apply_private_dns_to_public: Optional[pulumi.Input[bool]] = None,
            auto_scale_queue: Optional[pulumi.Input[bool]] = None,
            available_queue_number: Optional[pulumi.Input[int]] = None,
            charge_info: Optional[pulumi.Input[pulumi.InputType['RocketMQInstanceChargeInfoArgs']]] = None,
            compute_spec: Optional[pulumi.Input[str]] = None,
            connection_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQInstanceConnectionInfoArgs']]]]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            eip_id: Optional[pulumi.Input[str]] = None,
            enable_ssl: Optional[pulumi.Input[bool]] = None,
            file_reserved_time: Optional[pulumi.Input[int]] = None,
            instance_description: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_status: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            region_id: Optional[pulumi.Input[str]] = None,
            ssl_mode: Optional[pulumi.Input[str]] = None,
            storage_space: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQInstanceTagArgs']]]]] = None,
            used_group_number: Optional[pulumi.Input[int]] = None,
            used_queue_number: Optional[pulumi.Input[int]] = None,
            used_storage_space: Optional[pulumi.Input[int]] = None,
            used_topic_number: Optional[pulumi.Input[int]] = None,
            version: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'RocketMQInstance':
        """
        Get an existing RocketMQInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The account id of the rocketmq instance.
        :param pulumi.Input[bool] apply_private_dns_to_public: Whether the private dns to public function is enabled for the rocketmq instance.
        :param pulumi.Input[bool] auto_scale_queue: Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `compute_field` and `storage_space`.
        :param pulumi.Input[int] available_queue_number: The available queue number of the rocketmq instance.
        :param pulumi.Input[pulumi.InputType['RocketMQInstanceChargeInfoArgs']] charge_info: The charge information of the rocketmq instance.
        :param pulumi.Input[str] compute_spec: The compute spec of the rocketmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQInstanceConnectionInfoArgs']]]] connection_infos: The connection information of the rocketmq.
        :param pulumi.Input[str] create_time: The create time of the rocketmq instance.
        :param pulumi.Input[str] eip_id: The eip id of the rocketmq instance.
        :param pulumi.Input[bool] enable_ssl: Whether the ssl authentication is enabled for the rocketmq instance.
        :param pulumi.Input[int] file_reserved_time: The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
        :param pulumi.Input[str] instance_description: The instance description of the rocketmq instance.
        :param pulumi.Input[str] instance_name: The instance name of the rocketmq instance.
        :param pulumi.Input[str] instance_status: The status of the rocketmq instance.
        :param pulumi.Input[str] project_name: The project name of the rocketmq instance.
        :param pulumi.Input[str] region_id: The region id of the rocketmq instance.
        :param pulumi.Input[str] ssl_mode: The ssl mode of the rocketmq instance.
        :param pulumi.Input[int] storage_space: The storage space of the rocketmq instance.
        :param pulumi.Input[str] subnet_id: The subnet id of the rocketmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQInstanceTagArgs']]]] tags: Tags.
        :param pulumi.Input[int] used_group_number: The used group number of the rocketmq instance.
        :param pulumi.Input[int] used_queue_number: The used queue number of the rocketmq instance.
        :param pulumi.Input[int] used_storage_space: The used storage space of the rocketmq instance.
        :param pulumi.Input[int] used_topic_number: The used topic number of the rocketmq instance.
        :param pulumi.Input[str] version: The version of the rocketmq instance. Valid values: `4.8`.
        :param pulumi.Input[str] vpc_id: The vpc id of the rocketmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the rocketmq instance. Support specifying multiple availability zones.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RocketMQInstanceState.__new__(_RocketMQInstanceState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["apply_private_dns_to_public"] = apply_private_dns_to_public
        __props__.__dict__["auto_scale_queue"] = auto_scale_queue
        __props__.__dict__["available_queue_number"] = available_queue_number
        __props__.__dict__["charge_info"] = charge_info
        __props__.__dict__["compute_spec"] = compute_spec
        __props__.__dict__["connection_infos"] = connection_infos
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["enable_ssl"] = enable_ssl
        __props__.__dict__["file_reserved_time"] = file_reserved_time
        __props__.__dict__["instance_description"] = instance_description
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_status"] = instance_status
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["ssl_mode"] = ssl_mode
        __props__.__dict__["storage_space"] = storage_space
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["used_group_number"] = used_group_number
        __props__.__dict__["used_queue_number"] = used_queue_number
        __props__.__dict__["used_storage_space"] = used_storage_space
        __props__.__dict__["used_topic_number"] = used_topic_number
        __props__.__dict__["version"] = version
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone_ids"] = zone_ids
        return RocketMQInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The account id of the rocketmq instance.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applyPrivateDnsToPublic")
    def apply_private_dns_to_public(self) -> pulumi.Output[bool]:
        """
        Whether the private dns to public function is enabled for the rocketmq instance.
        """
        return pulumi.get(self, "apply_private_dns_to_public")

    @property
    @pulumi.getter(name="autoScaleQueue")
    def auto_scale_queue(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `compute_field` and `storage_space`.
        """
        return pulumi.get(self, "auto_scale_queue")

    @property
    @pulumi.getter(name="availableQueueNumber")
    def available_queue_number(self) -> pulumi.Output[int]:
        """
        The available queue number of the rocketmq instance.
        """
        return pulumi.get(self, "available_queue_number")

    @property
    @pulumi.getter(name="chargeInfo")
    def charge_info(self) -> pulumi.Output['outputs.RocketMQInstanceChargeInfo']:
        """
        The charge information of the rocketmq instance.
        """
        return pulumi.get(self, "charge_info")

    @property
    @pulumi.getter(name="computeSpec")
    def compute_spec(self) -> pulumi.Output[str]:
        """
        The compute spec of the rocketmq instance.
        """
        return pulumi.get(self, "compute_spec")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> pulumi.Output[Sequence['outputs.RocketMQInstanceConnectionInfo']]:
        """
        The connection information of the rocketmq.
        """
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of the rocketmq instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[str]:
        """
        The eip id of the rocketmq instance.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="enableSsl")
    def enable_ssl(self) -> pulumi.Output[bool]:
        """
        Whether the ssl authentication is enabled for the rocketmq instance.
        """
        return pulumi.get(self, "enable_ssl")

    @property
    @pulumi.getter(name="fileReservedTime")
    def file_reserved_time(self) -> pulumi.Output[int]:
        """
        The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
        """
        return pulumi.get(self, "file_reserved_time")

    @property
    @pulumi.getter(name="instanceDescription")
    def instance_description(self) -> pulumi.Output[Optional[str]]:
        """
        The instance description of the rocketmq instance.
        """
        return pulumi.get(self, "instance_description")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        The instance name of the rocketmq instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> pulumi.Output[str]:
        """
        The status of the rocketmq instance.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The project name of the rocketmq instance.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[str]:
        """
        The region id of the rocketmq instance.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> pulumi.Output[str]:
        """
        The ssl mode of the rocketmq instance.
        """
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> pulumi.Output[int]:
        """
        The storage space of the rocketmq instance.
        """
        return pulumi.get(self, "storage_space")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The subnet id of the rocketmq instance.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.RocketMQInstanceTag']]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="usedGroupNumber")
    def used_group_number(self) -> pulumi.Output[int]:
        """
        The used group number of the rocketmq instance.
        """
        return pulumi.get(self, "used_group_number")

    @property
    @pulumi.getter(name="usedQueueNumber")
    def used_queue_number(self) -> pulumi.Output[int]:
        """
        The used queue number of the rocketmq instance.
        """
        return pulumi.get(self, "used_queue_number")

    @property
    @pulumi.getter(name="usedStorageSpace")
    def used_storage_space(self) -> pulumi.Output[int]:
        """
        The used storage space of the rocketmq instance.
        """
        return pulumi.get(self, "used_storage_space")

    @property
    @pulumi.getter(name="usedTopicNumber")
    def used_topic_number(self) -> pulumi.Output[int]:
        """
        The used topic number of the rocketmq instance.
        """
        return pulumi.get(self, "used_topic_number")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version of the rocketmq instance. Valid values: `4.8`.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The vpc id of the rocketmq instance.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The zone id of the rocketmq instance. Support specifying multiple availability zones.
        """
        return pulumi.get(self, "zone_ids")

