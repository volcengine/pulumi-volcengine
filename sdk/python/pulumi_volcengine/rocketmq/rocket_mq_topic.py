# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RocketMQTopicArgs', 'RocketMQTopic']

@pulumi.input_type
class RocketMQTopicArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 message_type: pulumi.Input[int],
                 queue_number: pulumi.Input[int],
                 topic_name: pulumi.Input[str],
                 access_policies: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicAccessPolicyArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RocketMQTopic resource.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        :param pulumi.Input[int] message_type: The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
        :param pulumi.Input[int] queue_number: The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
        :param pulumi.Input[str] topic_name: The name of the rocketmq topic.
        :param pulumi.Input[Sequence[pulumi.Input['RocketMQTopicAccessPolicyArgs']]] access_policies: The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
        :param pulumi.Input[str] description: The description of the rocketmq topic.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "message_type", message_type)
        pulumi.set(__self__, "queue_number", queue_number)
        pulumi.set(__self__, "topic_name", topic_name)
        if access_policies is not None:
            pulumi.set(__self__, "access_policies", access_policies)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> pulumi.Input[int]:
        """
        The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
        """
        return pulumi.get(self, "message_type")

    @message_type.setter
    def message_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "message_type", value)

    @property
    @pulumi.getter(name="queueNumber")
    def queue_number(self) -> pulumi.Input[int]:
        """
        The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
        """
        return pulumi.get(self, "queue_number")

    @queue_number.setter
    def queue_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "queue_number", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        The name of the rocketmq topic.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicAccessPolicyArgs']]]]:
        """
        The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
        """
        return pulumi.get(self, "access_policies")

    @access_policies.setter
    def access_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicAccessPolicyArgs']]]]):
        pulumi.set(self, "access_policies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rocketmq topic.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _RocketMQTopicState:
    def __init__(__self__, *,
                 access_policies: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicAccessPolicyArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicGroupArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 message_type: Optional[pulumi.Input[int]] = None,
                 queue_number: Optional[pulumi.Input[int]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicQueueArgs']]]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RocketMQTopic resources.
        :param pulumi.Input[Sequence[pulumi.Input['RocketMQTopicAccessPolicyArgs']]] access_policies: The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
        :param pulumi.Input[str] description: The description of the rocketmq topic.
        :param pulumi.Input[Sequence[pulumi.Input['RocketMQTopicGroupArgs']]] groups: The groups information of the rocketmq topic.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        :param pulumi.Input[int] message_type: The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
        :param pulumi.Input[int] queue_number: The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
        :param pulumi.Input[Sequence[pulumi.Input['RocketMQTopicQueueArgs']]] queues: The queues information of the rocketmq topic.
        :param pulumi.Input[str] topic_name: The name of the rocketmq topic.
        """
        if access_policies is not None:
            pulumi.set(__self__, "access_policies", access_policies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if message_type is not None:
            pulumi.set(__self__, "message_type", message_type)
        if queue_number is not None:
            pulumi.set(__self__, "queue_number", queue_number)
        if queues is not None:
            pulumi.set(__self__, "queues", queues)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicAccessPolicyArgs']]]]:
        """
        The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
        """
        return pulumi.get(self, "access_policies")

    @access_policies.setter
    def access_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicAccessPolicyArgs']]]]):
        pulumi.set(self, "access_policies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rocketmq topic.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicGroupArgs']]]]:
        """
        The groups information of the rocketmq topic.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> Optional[pulumi.Input[int]]:
        """
        The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
        """
        return pulumi.get(self, "message_type")

    @message_type.setter
    def message_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_type", value)

    @property
    @pulumi.getter(name="queueNumber")
    def queue_number(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
        """
        return pulumi.get(self, "queue_number")

    @queue_number.setter
    def queue_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queue_number", value)

    @property
    @pulumi.getter
    def queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicQueueArgs']]]]:
        """
        The queues information of the rocketmq topic.
        """
        return pulumi.get(self, "queues")

    @queues.setter
    def queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocketMQTopicQueueArgs']]]]):
        pulumi.set(self, "queues", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rocketmq topic.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


class RocketMQTopic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQTopicAccessPolicyArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 message_type: Optional[pulumi.Input[int]] = None,
                 queue_number: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage rocketmq topic
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_rocket_mq_instance = volcengine.rocketmq.RocketMQInstance("fooRocketMQInstance",
            zone_ids=[foo_zones.zones[0].id],
            subnet_id=foo_subnet.id,
            version="4.8",
            compute_spec="rocketmq.n1.x2.micro",
            storage_space=300,
            auto_scale_queue=True,
            file_reserved_time=10,
            instance_name="acc-test-rocketmq",
            instance_description="acc-test",
            project_name="default",
            charge_info=volcengine.rocketmq.RocketMQInstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            tags=[volcengine.rocketmq.RocketMQInstanceTagArgs(
                key="k1",
                value="v1",
            )])
        foo_rocket_mq_access_key = volcengine.rocketmq.RocketMQAccessKey("fooRocketMQAccessKey",
            instance_id=foo_rocket_mq_instance.id,
            description="acc-test-key",
            all_authority="SUB")
        foo_rocket_mq_topic = volcengine.rocketmq.RocketMQTopic("fooRocketMQTopic",
            instance_id=foo_rocket_mq_instance.id,
            topic_name="acc-test-rocketmq-topic",
            description="acc-test",
            queue_number=2,
            message_type=1,
            access_policies=[volcengine.rocketmq.RocketMQTopicAccessPolicyArgs(
                access_key=foo_rocket_mq_access_key.access_key,
                authority="PUB",
            )])
        ```

        ## Import

        RocketmqTopic can be imported using the instance_id:topic_name, e.g.

        ```sh
        $ pulumi import volcengine:rocketmq/rocketMQTopic:RocketMQTopic default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQTopicAccessPolicyArgs']]]] access_policies: The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
        :param pulumi.Input[str] description: The description of the rocketmq topic.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        :param pulumi.Input[int] message_type: The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
        :param pulumi.Input[int] queue_number: The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
        :param pulumi.Input[str] topic_name: The name of the rocketmq topic.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RocketMQTopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rocketmq topic
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_rocket_mq_instance = volcengine.rocketmq.RocketMQInstance("fooRocketMQInstance",
            zone_ids=[foo_zones.zones[0].id],
            subnet_id=foo_subnet.id,
            version="4.8",
            compute_spec="rocketmq.n1.x2.micro",
            storage_space=300,
            auto_scale_queue=True,
            file_reserved_time=10,
            instance_name="acc-test-rocketmq",
            instance_description="acc-test",
            project_name="default",
            charge_info=volcengine.rocketmq.RocketMQInstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            tags=[volcengine.rocketmq.RocketMQInstanceTagArgs(
                key="k1",
                value="v1",
            )])
        foo_rocket_mq_access_key = volcengine.rocketmq.RocketMQAccessKey("fooRocketMQAccessKey",
            instance_id=foo_rocket_mq_instance.id,
            description="acc-test-key",
            all_authority="SUB")
        foo_rocket_mq_topic = volcengine.rocketmq.RocketMQTopic("fooRocketMQTopic",
            instance_id=foo_rocket_mq_instance.id,
            topic_name="acc-test-rocketmq-topic",
            description="acc-test",
            queue_number=2,
            message_type=1,
            access_policies=[volcengine.rocketmq.RocketMQTopicAccessPolicyArgs(
                access_key=foo_rocket_mq_access_key.access_key,
                authority="PUB",
            )])
        ```

        ## Import

        RocketmqTopic can be imported using the instance_id:topic_name, e.g.

        ```sh
        $ pulumi import volcengine:rocketmq/rocketMQTopic:RocketMQTopic default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param RocketMQTopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RocketMQTopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQTopicAccessPolicyArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 message_type: Optional[pulumi.Input[int]] = None,
                 queue_number: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RocketMQTopicArgs.__new__(RocketMQTopicArgs)

            __props__.__dict__["access_policies"] = access_policies
            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if message_type is None and not opts.urn:
                raise TypeError("Missing required property 'message_type'")
            __props__.__dict__["message_type"] = message_type
            if queue_number is None and not opts.urn:
                raise TypeError("Missing required property 'queue_number'")
            __props__.__dict__["queue_number"] = queue_number
            if topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'topic_name'")
            __props__.__dict__["topic_name"] = topic_name
            __props__.__dict__["groups"] = None
            __props__.__dict__["queues"] = None
        super(RocketMQTopic, __self__).__init__(
            'volcengine:rocketmq/rocketMQTopic:RocketMQTopic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQTopicAccessPolicyArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQTopicGroupArgs']]]]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            message_type: Optional[pulumi.Input[int]] = None,
            queue_number: Optional[pulumi.Input[int]] = None,
            queues: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQTopicQueueArgs']]]]] = None,
            topic_name: Optional[pulumi.Input[str]] = None) -> 'RocketMQTopic':
        """
        Get an existing RocketMQTopic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQTopicAccessPolicyArgs']]]] access_policies: The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
        :param pulumi.Input[str] description: The description of the rocketmq topic.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQTopicGroupArgs']]]] groups: The groups information of the rocketmq topic.
        :param pulumi.Input[str] instance_id: The id of rocketmq instance.
        :param pulumi.Input[int] message_type: The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
        :param pulumi.Input[int] queue_number: The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocketMQTopicQueueArgs']]]] queues: The queues information of the rocketmq topic.
        :param pulumi.Input[str] topic_name: The name of the rocketmq topic.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RocketMQTopicState.__new__(_RocketMQTopicState)

        __props__.__dict__["access_policies"] = access_policies
        __props__.__dict__["description"] = description
        __props__.__dict__["groups"] = groups
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["message_type"] = message_type
        __props__.__dict__["queue_number"] = queue_number
        __props__.__dict__["queues"] = queues
        __props__.__dict__["topic_name"] = topic_name
        return RocketMQTopic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> pulumi.Output[Sequence['outputs.RocketMQTopicAccessPolicy']]:
        """
        The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
        """
        return pulumi.get(self, "access_policies")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the rocketmq topic.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Sequence['outputs.RocketMQTopicGroup']]:
        """
        The groups information of the rocketmq topic.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of rocketmq instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> pulumi.Output[int]:
        """
        The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
        """
        return pulumi.get(self, "message_type")

    @property
    @pulumi.getter(name="queueNumber")
    def queue_number(self) -> pulumi.Output[int]:
        """
        The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
        """
        return pulumi.get(self, "queue_number")

    @property
    @pulumi.getter
    def queues(self) -> pulumi.Output[Sequence['outputs.RocketMQTopicQueue']]:
        """
        The queues information of the rocketmq topic.
        """
        return pulumi.get(self, "queues")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[str]:
        """
        The name of the rocketmq topic.
        """
        return pulumi.get(self, "topic_name")

