# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTrafficMirrorTargetsResult',
    'AwaitableGetTrafficMirrorTargetsResult',
    'get_traffic_mirror_targets',
    'get_traffic_mirror_targets_output',
]

@pulumi.output_type
class GetTrafficMirrorTargetsResult:
    """
    A collection of values returned by getTrafficMirrorTargets.
    """
    def __init__(__self__, id=None, name_regex=None, output_file=None, project_name=None, tags=None, total_count=None, traffic_mirror_target_ids=None, traffic_mirror_target_name=None, traffic_mirror_targets=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if traffic_mirror_target_ids and not isinstance(traffic_mirror_target_ids, list):
            raise TypeError("Expected argument 'traffic_mirror_target_ids' to be a list")
        pulumi.set(__self__, "traffic_mirror_target_ids", traffic_mirror_target_ids)
        if traffic_mirror_target_name and not isinstance(traffic_mirror_target_name, str):
            raise TypeError("Expected argument 'traffic_mirror_target_name' to be a str")
        pulumi.set(__self__, "traffic_mirror_target_name", traffic_mirror_target_name)
        if traffic_mirror_targets and not isinstance(traffic_mirror_targets, list):
            raise TypeError("Expected argument 'traffic_mirror_targets' to be a list")
        pulumi.set(__self__, "traffic_mirror_targets", traffic_mirror_targets)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The project name of traffic mirror target.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetTrafficMirrorTargetsTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="trafficMirrorTargetIds")
    def traffic_mirror_target_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "traffic_mirror_target_ids")

    @property
    @pulumi.getter(name="trafficMirrorTargetName")
    def traffic_mirror_target_name(self) -> Optional[str]:
        """
        The name of traffic mirror target.
        """
        return pulumi.get(self, "traffic_mirror_target_name")

    @property
    @pulumi.getter(name="trafficMirrorTargets")
    def traffic_mirror_targets(self) -> Sequence['outputs.GetTrafficMirrorTargetsTrafficMirrorTargetResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "traffic_mirror_targets")


class AwaitableGetTrafficMirrorTargetsResult(GetTrafficMirrorTargetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrafficMirrorTargetsResult(
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_name=self.project_name,
            tags=self.tags,
            total_count=self.total_count,
            traffic_mirror_target_ids=self.traffic_mirror_target_ids,
            traffic_mirror_target_name=self.traffic_mirror_target_name,
            traffic_mirror_targets=self.traffic_mirror_targets)


def get_traffic_mirror_targets(name_regex: Optional[str] = None,
                               output_file: Optional[str] = None,
                               project_name: Optional[str] = None,
                               tags: Optional[Sequence[pulumi.InputType['GetTrafficMirrorTargetsTagArgs']]] = None,
                               traffic_mirror_target_ids: Optional[Sequence[str]] = None,
                               traffic_mirror_target_name: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrafficMirrorTargetsResult:
    """
    Use this data source to query detailed information of traffic mirror targets
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vpc.get_traffic_mirror_targets(traffic_mirror_target_ids=["tmt-rry7yljufsw0v0x58w2****"])
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of traffic mirror target.
    :param Sequence[pulumi.InputType['GetTrafficMirrorTargetsTagArgs']] tags: Tags.
    :param Sequence[str] traffic_mirror_target_ids: A list of traffic mirror target IDs.
    :param str traffic_mirror_target_name: The name of traffic mirror target.
    """
    __args__ = dict()
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['tags'] = tags
    __args__['trafficMirrorTargetIds'] = traffic_mirror_target_ids
    __args__['trafficMirrorTargetName'] = traffic_mirror_target_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vpc/getTrafficMirrorTargets:getTrafficMirrorTargets', __args__, opts=opts, typ=GetTrafficMirrorTargetsResult).value

    return AwaitableGetTrafficMirrorTargetsResult(
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        traffic_mirror_target_ids=pulumi.get(__ret__, 'traffic_mirror_target_ids'),
        traffic_mirror_target_name=pulumi.get(__ret__, 'traffic_mirror_target_name'),
        traffic_mirror_targets=pulumi.get(__ret__, 'traffic_mirror_targets'))


@_utilities.lift_output_func(get_traffic_mirror_targets)
def get_traffic_mirror_targets_output(name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                                      output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      project_name: Optional[pulumi.Input[Optional[str]]] = None,
                                      tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetTrafficMirrorTargetsTagArgs']]]]] = None,
                                      traffic_mirror_target_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                      traffic_mirror_target_name: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTrafficMirrorTargetsResult]:
    """
    Use this data source to query detailed information of traffic mirror targets
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vpc.get_traffic_mirror_targets(traffic_mirror_target_ids=["tmt-rry7yljufsw0v0x58w2****"])
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of traffic mirror target.
    :param Sequence[pulumi.InputType['GetTrafficMirrorTargetsTagArgs']] tags: Tags.
    :param Sequence[str] traffic_mirror_target_ids: A list of traffic mirror target IDs.
    :param str traffic_mirror_target_name: The name of traffic mirror target.
    """
    ...
