# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'TrafficMirrorSessionsResult',
    'AwaitableTrafficMirrorSessionsResult',
    'traffic_mirror_sessions',
    'traffic_mirror_sessions_output',
]

warnings.warn("""volcengine.vpc.TrafficMirrorSessions has been deprecated in favor of volcengine.vpc.getTrafficMirrorSessions""", DeprecationWarning)

@pulumi.output_type
class TrafficMirrorSessionsResult:
    """
    A collection of values returned by TrafficMirrorSessions.
    """
    def __init__(__self__, id=None, name_regex=None, network_interface_id=None, output_file=None, packet_length=None, priority=None, project_name=None, tags=None, total_count=None, traffic_mirror_filter_id=None, traffic_mirror_session_ids=None, traffic_mirror_session_names=None, traffic_mirror_sessions=None, traffic_mirror_target_id=None, virtual_network_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if network_interface_id and not isinstance(network_interface_id, str):
            raise TypeError("Expected argument 'network_interface_id' to be a str")
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if packet_length and not isinstance(packet_length, int):
            raise TypeError("Expected argument 'packet_length' to be a int")
        pulumi.set(__self__, "packet_length", packet_length)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if traffic_mirror_filter_id and not isinstance(traffic_mirror_filter_id, str):
            raise TypeError("Expected argument 'traffic_mirror_filter_id' to be a str")
        pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        if traffic_mirror_session_ids and not isinstance(traffic_mirror_session_ids, list):
            raise TypeError("Expected argument 'traffic_mirror_session_ids' to be a list")
        pulumi.set(__self__, "traffic_mirror_session_ids", traffic_mirror_session_ids)
        if traffic_mirror_session_names and not isinstance(traffic_mirror_session_names, list):
            raise TypeError("Expected argument 'traffic_mirror_session_names' to be a list")
        pulumi.set(__self__, "traffic_mirror_session_names", traffic_mirror_session_names)
        if traffic_mirror_sessions and not isinstance(traffic_mirror_sessions, list):
            raise TypeError("Expected argument 'traffic_mirror_sessions' to be a list")
        pulumi.set(__self__, "traffic_mirror_sessions", traffic_mirror_sessions)
        if traffic_mirror_target_id and not isinstance(traffic_mirror_target_id, str):
            raise TypeError("Expected argument 'traffic_mirror_target_id' to be a str")
        pulumi.set(__self__, "traffic_mirror_target_id", traffic_mirror_target_id)
        if virtual_network_id and not isinstance(virtual_network_id, int):
            raise TypeError("Expected argument 'virtual_network_id' to be a int")
        pulumi.set(__self__, "virtual_network_id", virtual_network_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[str]:
        return pulumi.get(self, "network_interface_id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[int]:
        """
        The packet length of traffic mirror session.
        """
        return pulumi.get(self, "packet_length")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        The priority of traffic mirror session.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The project name of traffic mirror session.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.TrafficMirrorSessionsTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> Optional[str]:
        """
        The ID of traffic mirror filter.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @property
    @pulumi.getter(name="trafficMirrorSessionIds")
    def traffic_mirror_session_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "traffic_mirror_session_ids")

    @property
    @pulumi.getter(name="trafficMirrorSessionNames")
    def traffic_mirror_session_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "traffic_mirror_session_names")

    @property
    @pulumi.getter(name="trafficMirrorSessions")
    def traffic_mirror_sessions(self) -> Sequence['outputs.TrafficMirrorSessionsTrafficMirrorSessionResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "traffic_mirror_sessions")

    @property
    @pulumi.getter(name="trafficMirrorTargetId")
    def traffic_mirror_target_id(self) -> Optional[str]:
        """
        The ID of traffic mirror target.
        """
        return pulumi.get(self, "traffic_mirror_target_id")

    @property
    @pulumi.getter(name="virtualNetworkId")
    def virtual_network_id(self) -> Optional[int]:
        """
        The ID of virtual network.
        """
        return pulumi.get(self, "virtual_network_id")


class AwaitableTrafficMirrorSessionsResult(TrafficMirrorSessionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return TrafficMirrorSessionsResult(
            id=self.id,
            name_regex=self.name_regex,
            network_interface_id=self.network_interface_id,
            output_file=self.output_file,
            packet_length=self.packet_length,
            priority=self.priority,
            project_name=self.project_name,
            tags=self.tags,
            total_count=self.total_count,
            traffic_mirror_filter_id=self.traffic_mirror_filter_id,
            traffic_mirror_session_ids=self.traffic_mirror_session_ids,
            traffic_mirror_session_names=self.traffic_mirror_session_names,
            traffic_mirror_sessions=self.traffic_mirror_sessions,
            traffic_mirror_target_id=self.traffic_mirror_target_id,
            virtual_network_id=self.virtual_network_id)


def traffic_mirror_sessions(name_regex: Optional[str] = None,
                            network_interface_id: Optional[str] = None,
                            output_file: Optional[str] = None,
                            packet_length: Optional[int] = None,
                            priority: Optional[int] = None,
                            project_name: Optional[str] = None,
                            tags: Optional[Sequence[pulumi.InputType['TrafficMirrorSessionsTagArgs']]] = None,
                            traffic_mirror_filter_id: Optional[str] = None,
                            traffic_mirror_session_ids: Optional[Sequence[str]] = None,
                            traffic_mirror_session_names: Optional[Sequence[str]] = None,
                            traffic_mirror_target_id: Optional[str] = None,
                            virtual_network_id: Optional[int] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableTrafficMirrorSessionsResult:
    """
    Use this data source to query detailed information of traffic mirror sessions
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vpc.get_traffic_mirror_sessions(traffic_mirror_session_ids=["tms-mjpcyvp71r0g5smt1ayf****"])
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str network_interface_id: The ID of network interface.
    :param str output_file: File name where to save data source results.
    :param int packet_length: The packet length of traffic mirror session.
    :param int priority: The priority of traffic mirror session.
    :param str project_name: The project name of traffic mirror session.
    :param Sequence[pulumi.InputType['TrafficMirrorSessionsTagArgs']] tags: Tags.
    :param str traffic_mirror_filter_id: The ID of traffic mirror filter.
    :param Sequence[str] traffic_mirror_session_ids: A list of traffic mirror session IDs.
    :param Sequence[str] traffic_mirror_session_names: A list of traffic mirror session names.
    :param str traffic_mirror_target_id: The ID of traffic mirror target.
    :param int virtual_network_id: The ID of virtual network.
    """
    pulumi.log.warn("""traffic_mirror_sessions is deprecated: volcengine.vpc.TrafficMirrorSessions has been deprecated in favor of volcengine.vpc.getTrafficMirrorSessions""")
    __args__ = dict()
    __args__['nameRegex'] = name_regex
    __args__['networkInterfaceId'] = network_interface_id
    __args__['outputFile'] = output_file
    __args__['packetLength'] = packet_length
    __args__['priority'] = priority
    __args__['projectName'] = project_name
    __args__['tags'] = tags
    __args__['trafficMirrorFilterId'] = traffic_mirror_filter_id
    __args__['trafficMirrorSessionIds'] = traffic_mirror_session_ids
    __args__['trafficMirrorSessionNames'] = traffic_mirror_session_names
    __args__['trafficMirrorTargetId'] = traffic_mirror_target_id
    __args__['virtualNetworkId'] = virtual_network_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vpc/trafficMirrorSessions:TrafficMirrorSessions', __args__, opts=opts, typ=TrafficMirrorSessionsResult).value

    return AwaitableTrafficMirrorSessionsResult(
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        network_interface_id=pulumi.get(__ret__, 'network_interface_id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        packet_length=pulumi.get(__ret__, 'packet_length'),
        priority=pulumi.get(__ret__, 'priority'),
        project_name=pulumi.get(__ret__, 'project_name'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        traffic_mirror_filter_id=pulumi.get(__ret__, 'traffic_mirror_filter_id'),
        traffic_mirror_session_ids=pulumi.get(__ret__, 'traffic_mirror_session_ids'),
        traffic_mirror_session_names=pulumi.get(__ret__, 'traffic_mirror_session_names'),
        traffic_mirror_sessions=pulumi.get(__ret__, 'traffic_mirror_sessions'),
        traffic_mirror_target_id=pulumi.get(__ret__, 'traffic_mirror_target_id'),
        virtual_network_id=pulumi.get(__ret__, 'virtual_network_id'))


@_utilities.lift_output_func(traffic_mirror_sessions)
def traffic_mirror_sessions_output(name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                                   network_interface_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                   packet_length: Optional[pulumi.Input[Optional[int]]] = None,
                                   priority: Optional[pulumi.Input[Optional[int]]] = None,
                                   project_name: Optional[pulumi.Input[Optional[str]]] = None,
                                   tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['TrafficMirrorSessionsTagArgs']]]]] = None,
                                   traffic_mirror_filter_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   traffic_mirror_session_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                   traffic_mirror_session_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                   traffic_mirror_target_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   virtual_network_id: Optional[pulumi.Input[Optional[int]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[TrafficMirrorSessionsResult]:
    """
    Use this data source to query detailed information of traffic mirror sessions
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vpc.get_traffic_mirror_sessions(traffic_mirror_session_ids=["tms-mjpcyvp71r0g5smt1ayf****"])
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str network_interface_id: The ID of network interface.
    :param str output_file: File name where to save data source results.
    :param int packet_length: The packet length of traffic mirror session.
    :param int priority: The priority of traffic mirror session.
    :param str project_name: The project name of traffic mirror session.
    :param Sequence[pulumi.InputType['TrafficMirrorSessionsTagArgs']] tags: Tags.
    :param str traffic_mirror_filter_id: The ID of traffic mirror filter.
    :param Sequence[str] traffic_mirror_session_ids: A list of traffic mirror session IDs.
    :param Sequence[str] traffic_mirror_session_names: A list of traffic mirror session names.
    :param str traffic_mirror_target_id: The ID of traffic mirror target.
    :param int virtual_network_id: The ID of virtual network.
    """
    pulumi.log.warn("""traffic_mirror_sessions is deprecated: volcengine.vpc.TrafficMirrorSessions has been deprecated in favor of volcengine.vpc.getTrafficMirrorSessions""")
    ...
