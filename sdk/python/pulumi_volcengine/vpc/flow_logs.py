# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'FlowLogsResult',
    'AwaitableFlowLogsResult',
    'flow_logs',
    'flow_logs_output',
]

warnings.warn("""volcengine.vpc.FlowLogs has been deprecated in favor of volcengine.vpc.getFlowLogs""", DeprecationWarning)

@pulumi.output_type
class FlowLogsResult:
    """
    A collection of values returned by FlowLogs.
    """
    def __init__(__self__, aggregation_interval=None, description=None, flow_log_ids=None, flow_log_name=None, flow_logs=None, id=None, log_project_id=None, log_topic_id=None, name_regex=None, output_file=None, project_name=None, resource_id=None, resource_type=None, status=None, tags=None, total_count=None, traffic_type=None, vpc_id=None):
        if aggregation_interval and not isinstance(aggregation_interval, int):
            raise TypeError("Expected argument 'aggregation_interval' to be a int")
        pulumi.set(__self__, "aggregation_interval", aggregation_interval)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if flow_log_ids and not isinstance(flow_log_ids, list):
            raise TypeError("Expected argument 'flow_log_ids' to be a list")
        pulumi.set(__self__, "flow_log_ids", flow_log_ids)
        if flow_log_name and not isinstance(flow_log_name, str):
            raise TypeError("Expected argument 'flow_log_name' to be a str")
        pulumi.set(__self__, "flow_log_name", flow_log_name)
        if flow_logs and not isinstance(flow_logs, list):
            raise TypeError("Expected argument 'flow_logs' to be a list")
        pulumi.set(__self__, "flow_logs", flow_logs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_project_id and not isinstance(log_project_id, str):
            raise TypeError("Expected argument 'log_project_id' to be a str")
        pulumi.set(__self__, "log_project_id", log_project_id)
        if log_topic_id and not isinstance(log_topic_id, str):
            raise TypeError("Expected argument 'log_topic_id' to be a str")
        pulumi.set(__self__, "log_topic_id", log_topic_id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if traffic_type and not isinstance(traffic_type, str):
            raise TypeError("Expected argument 'traffic_type' to be a str")
        pulumi.set(__self__, "traffic_type", traffic_type)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="aggregationInterval")
    def aggregation_interval(self) -> Optional[int]:
        """
        The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        """
        return pulumi.get(self, "aggregation_interval")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of flow log.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="flowLogIds")
    def flow_log_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "flow_log_ids")

    @property
    @pulumi.getter(name="flowLogName")
    def flow_log_name(self) -> Optional[str]:
        """
        The name of flow log.
        """
        return pulumi.get(self, "flow_log_name")

    @property
    @pulumi.getter(name="flowLogs")
    def flow_logs(self) -> Sequence['outputs.FlowLogsFlowLogResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "flow_logs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logProjectId")
    def log_project_id(self) -> Optional[str]:
        """
        The ID of log project.
        """
        return pulumi.get(self, "log_project_id")

    @property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> Optional[str]:
        """
        The ID of log topic.
        """
        return pulumi.get(self, "log_topic_id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The project name of flow log.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        The ID of resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of flow log. Valid values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FlowLogsTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[str]:
        """
        The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        """
        return pulumi.get(self, "traffic_type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        The ID of VPC.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableFlowLogsResult(FlowLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return FlowLogsResult(
            aggregation_interval=self.aggregation_interval,
            description=self.description,
            flow_log_ids=self.flow_log_ids,
            flow_log_name=self.flow_log_name,
            flow_logs=self.flow_logs,
            id=self.id,
            log_project_id=self.log_project_id,
            log_topic_id=self.log_topic_id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_name=self.project_name,
            resource_id=self.resource_id,
            resource_type=self.resource_type,
            status=self.status,
            tags=self.tags,
            total_count=self.total_count,
            traffic_type=self.traffic_type,
            vpc_id=self.vpc_id)


def flow_logs(aggregation_interval: Optional[int] = None,
              description: Optional[str] = None,
              flow_log_ids: Optional[Sequence[str]] = None,
              flow_log_name: Optional[str] = None,
              log_project_id: Optional[str] = None,
              log_topic_id: Optional[str] = None,
              name_regex: Optional[str] = None,
              output_file: Optional[str] = None,
              project_name: Optional[str] = None,
              resource_id: Optional[str] = None,
              resource_type: Optional[str] = None,
              status: Optional[str] = None,
              tags: Optional[Sequence[pulumi.InputType['FlowLogsTagArgs']]] = None,
              traffic_type: Optional[str] = None,
              vpc_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableFlowLogsResult:
    """
    Use this data source to query detailed information of flow logs
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vpc.get_flow_logs(flow_log_ids=["fl-13g4fqngluhog3n6nu57o****"])
    ```


    :param int aggregation_interval: The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
    :param str description: The description of flow log.
    :param Sequence[str] flow_log_ids: A list of flow log IDs.
    :param str flow_log_name: The name of flow log.
    :param str log_project_id: The ID of log project.
    :param str log_topic_id: The ID of log topic.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of flow log.
    :param str resource_id: The ID of resource.
    :param str resource_type: The type of resource. Valid values: `vpc`, `subnet`, `eni`.
    :param str status: The status of flow log. Valid values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
    :param Sequence[pulumi.InputType['FlowLogsTagArgs']] tags: Tags.
    :param str traffic_type: The type of traffic. Valid values: `All`, `Allow`, `Drop`.
    :param str vpc_id: The ID of VPC.
    """
    pulumi.log.warn("""flow_logs is deprecated: volcengine.vpc.FlowLogs has been deprecated in favor of volcengine.vpc.getFlowLogs""")
    __args__ = dict()
    __args__['aggregationInterval'] = aggregation_interval
    __args__['description'] = description
    __args__['flowLogIds'] = flow_log_ids
    __args__['flowLogName'] = flow_log_name
    __args__['logProjectId'] = log_project_id
    __args__['logTopicId'] = log_topic_id
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['resourceId'] = resource_id
    __args__['resourceType'] = resource_type
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['trafficType'] = traffic_type
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vpc/flowLogs:FlowLogs', __args__, opts=opts, typ=FlowLogsResult).value

    return AwaitableFlowLogsResult(
        aggregation_interval=pulumi.get(__ret__, 'aggregation_interval'),
        description=pulumi.get(__ret__, 'description'),
        flow_log_ids=pulumi.get(__ret__, 'flow_log_ids'),
        flow_log_name=pulumi.get(__ret__, 'flow_log_name'),
        flow_logs=pulumi.get(__ret__, 'flow_logs'),
        id=pulumi.get(__ret__, 'id'),
        log_project_id=pulumi.get(__ret__, 'log_project_id'),
        log_topic_id=pulumi.get(__ret__, 'log_topic_id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        traffic_type=pulumi.get(__ret__, 'traffic_type'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(flow_logs)
def flow_logs_output(aggregation_interval: Optional[pulumi.Input[Optional[int]]] = None,
                     description: Optional[pulumi.Input[Optional[str]]] = None,
                     flow_log_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     flow_log_name: Optional[pulumi.Input[Optional[str]]] = None,
                     log_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                     log_topic_id: Optional[pulumi.Input[Optional[str]]] = None,
                     name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                     output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     project_name: Optional[pulumi.Input[Optional[str]]] = None,
                     resource_id: Optional[pulumi.Input[Optional[str]]] = None,
                     resource_type: Optional[pulumi.Input[Optional[str]]] = None,
                     status: Optional[pulumi.Input[Optional[str]]] = None,
                     tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['FlowLogsTagArgs']]]]] = None,
                     traffic_type: Optional[pulumi.Input[Optional[str]]] = None,
                     vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[FlowLogsResult]:
    """
    Use this data source to query detailed information of flow logs
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vpc.get_flow_logs(flow_log_ids=["fl-13g4fqngluhog3n6nu57o****"])
    ```


    :param int aggregation_interval: The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
    :param str description: The description of flow log.
    :param Sequence[str] flow_log_ids: A list of flow log IDs.
    :param str flow_log_name: The name of flow log.
    :param str log_project_id: The ID of log project.
    :param str log_topic_id: The ID of log topic.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of flow log.
    :param str resource_id: The ID of resource.
    :param str resource_type: The type of resource. Valid values: `vpc`, `subnet`, `eni`.
    :param str status: The status of flow log. Valid values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
    :param Sequence[pulumi.InputType['FlowLogsTagArgs']] tags: Tags.
    :param str traffic_type: The type of traffic. Valid values: `All`, `Allow`, `Drop`.
    :param str vpc_id: The ID of VPC.
    """
    pulumi.log.warn("""flow_logs is deprecated: volcengine.vpc.FlowLogs has been deprecated in favor of volcengine.vpc.getFlowLogs""")
    ...
