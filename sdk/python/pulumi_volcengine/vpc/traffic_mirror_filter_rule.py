# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TrafficMirrorFilterRuleArgs', 'TrafficMirrorFilterRule']

@pulumi.input_type
class TrafficMirrorFilterRuleArgs:
    def __init__(__self__, *,
                 destination_cidr_block: pulumi.Input[str],
                 policy: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 source_cidr_block: pulumi.Input[str],
                 traffic_direction: pulumi.Input[str],
                 traffic_mirror_filter_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 destination_port_range: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 source_port_range: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TrafficMirrorFilterRule resource.
        :param pulumi.Input[str] destination_cidr_block: The destination cidr block of traffic mirror filter rule.
        :param pulumi.Input[str] policy: The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
        :param pulumi.Input[str] protocol: The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
        :param pulumi.Input[str] source_cidr_block: The source cidr block of traffic mirror filter rule.
        :param pulumi.Input[str] traffic_direction: The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
        :param pulumi.Input[str] traffic_mirror_filter_id: The ID of traffic mirror filter.
        :param pulumi.Input[str] description: The description of traffic mirror filter rule.
        :param pulumi.Input[str] destination_port_range: The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
               When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        :param pulumi.Input[int] priority: The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
        :param pulumi.Input[str] source_port_range: The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
               When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        """
        pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_cidr_block", source_cidr_block)
        pulumi.set(__self__, "traffic_direction", traffic_direction)
        pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_port_range is not None:
            pulumi.set(__self__, "destination_port_range", destination_port_range)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> pulumi.Input[str]:
        """
        The destination cidr block of traffic mirror filter rule.
        """
        return pulumi.get(self, "destination_cidr_block")

    @destination_cidr_block.setter
    def destination_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_cidr_block", value)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Input[str]:
        """
        The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sourceCidrBlock")
    def source_cidr_block(self) -> pulumi.Input[str]:
        """
        The source cidr block of traffic mirror filter rule.
        """
        return pulumi.get(self, "source_cidr_block")

    @source_cidr_block.setter
    def source_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_cidr_block", value)

    @property
    @pulumi.getter(name="trafficDirection")
    def traffic_direction(self) -> pulumi.Input[str]:
        """
        The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
        """
        return pulumi.get(self, "traffic_direction")

    @traffic_direction.setter
    def traffic_direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "traffic_direction", value)

    @property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> pulumi.Input[str]:
        """
        The ID of traffic mirror filter.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @traffic_mirror_filter_id.setter
    def traffic_mirror_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "traffic_mirror_filter_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of traffic mirror filter rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
        When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        """
        return pulumi.get(self, "destination_port_range")

    @destination_port_range.setter
    def destination_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_range", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
        When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        """
        return pulumi.get(self, "source_port_range")

    @source_port_range.setter
    def source_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_range", value)


@pulumi.input_type
class _TrafficMirrorFilterRuleState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_cidr_block: Optional[pulumi.Input[str]] = None,
                 destination_port_range: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 source_cidr_block: Optional[pulumi.Input[str]] = None,
                 source_port_range: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 traffic_direction: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_filter_id: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_filter_rule_id: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TrafficMirrorFilterRule resources.
        :param pulumi.Input[str] created_at: The create time of traffic mirror filter rule.
        :param pulumi.Input[str] description: The description of traffic mirror filter rule.
        :param pulumi.Input[str] destination_cidr_block: The destination cidr block of traffic mirror filter rule.
        :param pulumi.Input[str] destination_port_range: The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
               When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        :param pulumi.Input[str] policy: The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
        :param pulumi.Input[int] priority: The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
        :param pulumi.Input[str] protocol: The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
        :param pulumi.Input[str] source_cidr_block: The source cidr block of traffic mirror filter rule.
        :param pulumi.Input[str] source_port_range: The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
               When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        :param pulumi.Input[str] status: The status of traffic mirror filter rule.
        :param pulumi.Input[str] traffic_direction: The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
        :param pulumi.Input[str] traffic_mirror_filter_id: The ID of traffic mirror filter.
        :param pulumi.Input[str] traffic_mirror_filter_rule_id: The ID of traffic mirror filter rule.
        :param pulumi.Input[str] updated_at: The last update time of traffic mirror filter rule.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_cidr_block is not None:
            pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        if destination_port_range is not None:
            pulumi.set(__self__, "destination_port_range", destination_port_range)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_cidr_block is not None:
            pulumi.set(__self__, "source_cidr_block", source_cidr_block)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if traffic_direction is not None:
            pulumi.set(__self__, "traffic_direction", traffic_direction)
        if traffic_mirror_filter_id is not None:
            pulumi.set(__self__, "traffic_mirror_filter_id", traffic_mirror_filter_id)
        if traffic_mirror_filter_rule_id is not None:
            pulumi.set(__self__, "traffic_mirror_filter_rule_id", traffic_mirror_filter_rule_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of traffic mirror filter rule.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of traffic mirror filter rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The destination cidr block of traffic mirror filter rule.
        """
        return pulumi.get(self, "destination_cidr_block")

    @destination_cidr_block.setter
    def destination_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_cidr_block", value)

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
        When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        """
        return pulumi.get(self, "destination_port_range")

    @destination_port_range.setter
    def destination_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_range", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sourceCidrBlock")
    def source_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The source cidr block of traffic mirror filter rule.
        """
        return pulumi.get(self, "source_cidr_block")

    @source_cidr_block.setter
    def source_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_cidr_block", value)

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
        When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        """
        return pulumi.get(self, "source_port_range")

    @source_port_range.setter
    def source_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_range", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of traffic mirror filter rule.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trafficDirection")
    def traffic_direction(self) -> Optional[pulumi.Input[str]]:
        """
        The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
        """
        return pulumi.get(self, "traffic_direction")

    @traffic_direction.setter
    def traffic_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_direction", value)

    @property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of traffic mirror filter.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @traffic_mirror_filter_id.setter
    def traffic_mirror_filter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_mirror_filter_id", value)

    @property
    @pulumi.getter(name="trafficMirrorFilterRuleId")
    def traffic_mirror_filter_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of traffic mirror filter rule.
        """
        return pulumi.get(self, "traffic_mirror_filter_rule_id")

    @traffic_mirror_filter_rule_id.setter
    def traffic_mirror_filter_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_mirror_filter_rule_id", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The last update time of traffic mirror filter rule.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class TrafficMirrorFilterRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_cidr_block: Optional[pulumi.Input[str]] = None,
                 destination_port_range: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 source_cidr_block: Optional[pulumi.Input[str]] = None,
                 source_port_range: Optional[pulumi.Input[str]] = None,
                 traffic_direction: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_filter_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage traffic mirror filter rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vpc.TrafficMirrorFilter("foo",
            traffic_mirror_filter_name="acc-test-traffic-mirror-filter",
            description="acc-test",
            project_name="default",
            tags=[volcengine.vpc.TrafficMirrorFilterTagArgs(
                key="k1",
                value="v1",
            )])
        foo_ingress = volcengine.vpc.TrafficMirrorFilterRule("foo-ingress",
            traffic_mirror_filter_id=foo.id,
            traffic_direction="ingress",
            description="acc-test",
            priority=1,
            policy="reject",
            protocol="all",
            source_cidr_block="10.0.1.0/24",
            source_port_range="-1/-1",
            destination_cidr_block="10.0.0.0/24",
            destination_port_range="-1/-1")
        foo_egress = volcengine.vpc.TrafficMirrorFilterRule("foo-egress",
            traffic_mirror_filter_id=foo.id,
            traffic_direction="egress",
            description="acc-test",
            priority=2,
            policy="reject",
            protocol="tcp",
            source_cidr_block="10.0.1.0/24",
            source_port_range="80/80",
            destination_cidr_block="10.0.0.0/24",
            destination_port_range="88/90")
        ```

        ## Import

        TrafficMirrorFilterRule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vpc/trafficMirrorFilterRule:TrafficMirrorFilterRule default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of traffic mirror filter rule.
        :param pulumi.Input[str] destination_cidr_block: The destination cidr block of traffic mirror filter rule.
        :param pulumi.Input[str] destination_port_range: The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
               When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        :param pulumi.Input[str] policy: The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
        :param pulumi.Input[int] priority: The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
        :param pulumi.Input[str] protocol: The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
        :param pulumi.Input[str] source_cidr_block: The source cidr block of traffic mirror filter rule.
        :param pulumi.Input[str] source_port_range: The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
               When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        :param pulumi.Input[str] traffic_direction: The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
        :param pulumi.Input[str] traffic_mirror_filter_id: The ID of traffic mirror filter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TrafficMirrorFilterRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage traffic mirror filter rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vpc.TrafficMirrorFilter("foo",
            traffic_mirror_filter_name="acc-test-traffic-mirror-filter",
            description="acc-test",
            project_name="default",
            tags=[volcengine.vpc.TrafficMirrorFilterTagArgs(
                key="k1",
                value="v1",
            )])
        foo_ingress = volcengine.vpc.TrafficMirrorFilterRule("foo-ingress",
            traffic_mirror_filter_id=foo.id,
            traffic_direction="ingress",
            description="acc-test",
            priority=1,
            policy="reject",
            protocol="all",
            source_cidr_block="10.0.1.0/24",
            source_port_range="-1/-1",
            destination_cidr_block="10.0.0.0/24",
            destination_port_range="-1/-1")
        foo_egress = volcengine.vpc.TrafficMirrorFilterRule("foo-egress",
            traffic_mirror_filter_id=foo.id,
            traffic_direction="egress",
            description="acc-test",
            priority=2,
            policy="reject",
            protocol="tcp",
            source_cidr_block="10.0.1.0/24",
            source_port_range="80/80",
            destination_cidr_block="10.0.0.0/24",
            destination_port_range="88/90")
        ```

        ## Import

        TrafficMirrorFilterRule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vpc/trafficMirrorFilterRule:TrafficMirrorFilterRule default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param TrafficMirrorFilterRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrafficMirrorFilterRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_cidr_block: Optional[pulumi.Input[str]] = None,
                 destination_port_range: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 source_cidr_block: Optional[pulumi.Input[str]] = None,
                 source_port_range: Optional[pulumi.Input[str]] = None,
                 traffic_direction: Optional[pulumi.Input[str]] = None,
                 traffic_mirror_filter_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrafficMirrorFilterRuleArgs.__new__(TrafficMirrorFilterRuleArgs)

            __props__.__dict__["description"] = description
            if destination_cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'destination_cidr_block'")
            __props__.__dict__["destination_cidr_block"] = destination_cidr_block
            __props__.__dict__["destination_port_range"] = destination_port_range
            if policy is None and not opts.urn:
                raise TypeError("Missing required property 'policy'")
            __props__.__dict__["policy"] = policy
            __props__.__dict__["priority"] = priority
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if source_cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'source_cidr_block'")
            __props__.__dict__["source_cidr_block"] = source_cidr_block
            __props__.__dict__["source_port_range"] = source_port_range
            if traffic_direction is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_direction'")
            __props__.__dict__["traffic_direction"] = traffic_direction
            if traffic_mirror_filter_id is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_mirror_filter_id'")
            __props__.__dict__["traffic_mirror_filter_id"] = traffic_mirror_filter_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["traffic_mirror_filter_rule_id"] = None
            __props__.__dict__["updated_at"] = None
        super(TrafficMirrorFilterRule, __self__).__init__(
            'volcengine:vpc/trafficMirrorFilterRule:TrafficMirrorFilterRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            destination_cidr_block: Optional[pulumi.Input[str]] = None,
            destination_port_range: Optional[pulumi.Input[str]] = None,
            policy: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            source_cidr_block: Optional[pulumi.Input[str]] = None,
            source_port_range: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            traffic_direction: Optional[pulumi.Input[str]] = None,
            traffic_mirror_filter_id: Optional[pulumi.Input[str]] = None,
            traffic_mirror_filter_rule_id: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'TrafficMirrorFilterRule':
        """
        Get an existing TrafficMirrorFilterRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: The create time of traffic mirror filter rule.
        :param pulumi.Input[str] description: The description of traffic mirror filter rule.
        :param pulumi.Input[str] destination_cidr_block: The destination cidr block of traffic mirror filter rule.
        :param pulumi.Input[str] destination_port_range: The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
               When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        :param pulumi.Input[str] policy: The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
        :param pulumi.Input[int] priority: The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
        :param pulumi.Input[str] protocol: The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
        :param pulumi.Input[str] source_cidr_block: The source cidr block of traffic mirror filter rule.
        :param pulumi.Input[str] source_port_range: The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
               When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        :param pulumi.Input[str] status: The status of traffic mirror filter rule.
        :param pulumi.Input[str] traffic_direction: The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
        :param pulumi.Input[str] traffic_mirror_filter_id: The ID of traffic mirror filter.
        :param pulumi.Input[str] traffic_mirror_filter_rule_id: The ID of traffic mirror filter rule.
        :param pulumi.Input[str] updated_at: The last update time of traffic mirror filter rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TrafficMirrorFilterRuleState.__new__(_TrafficMirrorFilterRuleState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["destination_cidr_block"] = destination_cidr_block
        __props__.__dict__["destination_port_range"] = destination_port_range
        __props__.__dict__["policy"] = policy
        __props__.__dict__["priority"] = priority
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["source_cidr_block"] = source_cidr_block
        __props__.__dict__["source_port_range"] = source_port_range
        __props__.__dict__["status"] = status
        __props__.__dict__["traffic_direction"] = traffic_direction
        __props__.__dict__["traffic_mirror_filter_id"] = traffic_mirror_filter_id
        __props__.__dict__["traffic_mirror_filter_rule_id"] = traffic_mirror_filter_rule_id
        __props__.__dict__["updated_at"] = updated_at
        return TrafficMirrorFilterRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The create time of traffic mirror filter rule.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of traffic mirror filter rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> pulumi.Output[str]:
        """
        The destination cidr block of traffic mirror filter rule.
        """
        return pulumi.get(self, "destination_cidr_block")

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> pulumi.Output[str]:
        """
        The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
        When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        """
        return pulumi.get(self, "destination_port_range")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output[str]:
        """
        The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sourceCidrBlock")
    def source_cidr_block(self) -> pulumi.Output[str]:
        """
        The source cidr block of traffic mirror filter rule.
        """
        return pulumi.get(self, "source_cidr_block")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> pulumi.Output[str]:
        """
        The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
        When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
        """
        return pulumi.get(self, "source_port_range")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of traffic mirror filter rule.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trafficDirection")
    def traffic_direction(self) -> pulumi.Output[str]:
        """
        The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
        """
        return pulumi.get(self, "traffic_direction")

    @property
    @pulumi.getter(name="trafficMirrorFilterId")
    def traffic_mirror_filter_id(self) -> pulumi.Output[str]:
        """
        The ID of traffic mirror filter.
        """
        return pulumi.get(self, "traffic_mirror_filter_id")

    @property
    @pulumi.getter(name="trafficMirrorFilterRuleId")
    def traffic_mirror_filter_rule_id(self) -> pulumi.Output[str]:
        """
        The ID of traffic mirror filter rule.
        """
        return pulumi.get(self, "traffic_mirror_filter_rule_id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The last update time of traffic mirror filter rule.
        """
        return pulumi.get(self, "updated_at")

