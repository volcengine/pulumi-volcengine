# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FlowLogArgs', 'FlowLog']

@pulumi.input_type
class FlowLogArgs:
    def __init__(__self__, *,
                 aggregation_interval: pulumi.Input[int],
                 flow_log_name: pulumi.Input[str],
                 log_project_name: pulumi.Input[str],
                 log_topic_name: pulumi.Input[str],
                 resource_id: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 traffic_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FlowLogTagArgs']]]] = None):
        """
        The set of arguments for constructing a FlowLog resource.
        :param pulumi.Input[int] aggregation_interval: The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        :param pulumi.Input[str] flow_log_name: The name of flow log.
        :param pulumi.Input[str] log_project_name: The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] log_topic_name: The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] resource_id: The ID of resource.
        :param pulumi.Input[str] resource_type: The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        :param pulumi.Input[str] traffic_type: The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        :param pulumi.Input[str] description: The description of flow log.
        :param pulumi.Input[str] project_name: The project name of flow log.
        :param pulumi.Input[Sequence[pulumi.Input['FlowLogTagArgs']]] tags: Tags.
        """
        pulumi.set(__self__, "aggregation_interval", aggregation_interval)
        pulumi.set(__self__, "flow_log_name", flow_log_name)
        pulumi.set(__self__, "log_project_name", log_project_name)
        pulumi.set(__self__, "log_topic_name", log_topic_name)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "traffic_type", traffic_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="aggregationInterval")
    def aggregation_interval(self) -> pulumi.Input[int]:
        """
        The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        """
        return pulumi.get(self, "aggregation_interval")

    @aggregation_interval.setter
    def aggregation_interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "aggregation_interval", value)

    @property
    @pulumi.getter(name="flowLogName")
    def flow_log_name(self) -> pulumi.Input[str]:
        """
        The name of flow log.
        """
        return pulumi.get(self, "flow_log_name")

    @flow_log_name.setter
    def flow_log_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "flow_log_name", value)

    @property
    @pulumi.getter(name="logProjectName")
    def log_project_name(self) -> pulumi.Input[str]:
        """
        The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
        When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "log_project_name")

    @log_project_name.setter
    def log_project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_project_name", value)

    @property
    @pulumi.getter(name="logTopicName")
    def log_topic_name(self) -> pulumi.Input[str]:
        """
        The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
        When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "log_topic_name")

    @log_topic_name.setter
    def log_topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_topic_name", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        The ID of resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> pulumi.Input[str]:
        """
        The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "traffic_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of flow log.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of flow log.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowLogTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowLogTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _FlowLogState:
    def __init__(__self__, *,
                 aggregation_interval: Optional[pulumi.Input[int]] = None,
                 business_status: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flow_log_name: Optional[pulumi.Input[str]] = None,
                 lock_reason: Optional[pulumi.Input[str]] = None,
                 log_project_id: Optional[pulumi.Input[str]] = None,
                 log_project_name: Optional[pulumi.Input[str]] = None,
                 log_topic_id: Optional[pulumi.Input[str]] = None,
                 log_topic_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FlowLogTagArgs']]]] = None,
                 traffic_type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FlowLog resources.
        :param pulumi.Input[int] aggregation_interval: The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        :param pulumi.Input[str] business_status: The business status of flow log.
        :param pulumi.Input[str] created_at: The created time of flow log.
        :param pulumi.Input[str] description: The description of flow log.
        :param pulumi.Input[str] flow_log_name: The name of flow log.
        :param pulumi.Input[str] lock_reason: The reason why flow log is locked.
        :param pulumi.Input[str] log_project_id: The ID of log project.
        :param pulumi.Input[str] log_project_name: The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] log_topic_id: The ID of log topic.
        :param pulumi.Input[str] log_topic_name: The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] project_name: The project name of flow log.
        :param pulumi.Input[str] resource_id: The ID of resource.
        :param pulumi.Input[str] resource_type: The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        :param pulumi.Input[str] status: The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
        :param pulumi.Input[Sequence[pulumi.Input['FlowLogTagArgs']]] tags: Tags.
        :param pulumi.Input[str] traffic_type: The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        :param pulumi.Input[str] updated_at: The updated time of flow log.
        """
        if aggregation_interval is not None:
            pulumi.set(__self__, "aggregation_interval", aggregation_interval)
        if business_status is not None:
            pulumi.set(__self__, "business_status", business_status)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if flow_log_name is not None:
            pulumi.set(__self__, "flow_log_name", flow_log_name)
        if lock_reason is not None:
            pulumi.set(__self__, "lock_reason", lock_reason)
        if log_project_id is not None:
            pulumi.set(__self__, "log_project_id", log_project_id)
        if log_project_name is not None:
            pulumi.set(__self__, "log_project_name", log_project_name)
        if log_topic_id is not None:
            pulumi.set(__self__, "log_topic_id", log_topic_id)
        if log_topic_name is not None:
            pulumi.set(__self__, "log_topic_name", log_topic_name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="aggregationInterval")
    def aggregation_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        """
        return pulumi.get(self, "aggregation_interval")

    @aggregation_interval.setter
    def aggregation_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aggregation_interval", value)

    @property
    @pulumi.getter(name="businessStatus")
    def business_status(self) -> Optional[pulumi.Input[str]]:
        """
        The business status of flow log.
        """
        return pulumi.get(self, "business_status")

    @business_status.setter
    def business_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "business_status", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The created time of flow log.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of flow log.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="flowLogName")
    def flow_log_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of flow log.
        """
        return pulumi.get(self, "flow_log_name")

    @flow_log_name.setter
    def flow_log_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_name", value)

    @property
    @pulumi.getter(name="lockReason")
    def lock_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason why flow log is locked.
        """
        return pulumi.get(self, "lock_reason")

    @lock_reason.setter
    def lock_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lock_reason", value)

    @property
    @pulumi.getter(name="logProjectId")
    def log_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of log project.
        """
        return pulumi.get(self, "log_project_id")

    @log_project_id.setter
    def log_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_project_id", value)

    @property
    @pulumi.getter(name="logProjectName")
    def log_project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
        When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "log_project_name")

    @log_project_name.setter
    def log_project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_project_name", value)

    @property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of log topic.
        """
        return pulumi.get(self, "log_topic_id")

    @log_topic_id.setter
    def log_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_topic_id", value)

    @property
    @pulumi.getter(name="logTopicName")
    def log_topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
        When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "log_topic_name")

    @log_topic_name.setter
    def log_topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_topic_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of flow log.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowLogTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowLogTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The updated time of flow log.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class FlowLog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregation_interval: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flow_log_name: Optional[pulumi.Input[str]] = None,
                 log_project_name: Optional[pulumi.Input[str]] = None,
                 log_topic_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowLogTagArgs']]]]] = None,
                 traffic_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage flow log
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16",
            project_name="default")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_flow_log = volcengine.vpc.FlowLog("fooFlowLog",
            flow_log_name="acc-test-flow-log",
            description="acc-test",
            resource_type="subnet",
            resource_id=foo_subnet.id,
            traffic_type="All",
            log_project_name="acc-test-project",
            log_topic_name="acc-test-topic",
            aggregation_interval=10,
            project_name="default",
            tags=[volcengine.vpc.FlowLogTagArgs(
                key="k1",
                value="v1",
            )])
        ```

        ## Import

        FlowLog can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vpc/flowLog:FlowLog default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] aggregation_interval: The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        :param pulumi.Input[str] description: The description of flow log.
        :param pulumi.Input[str] flow_log_name: The name of flow log.
        :param pulumi.Input[str] log_project_name: The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] log_topic_name: The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] project_name: The project name of flow log.
        :param pulumi.Input[str] resource_id: The ID of resource.
        :param pulumi.Input[str] resource_type: The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowLogTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] traffic_type: The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FlowLogArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage flow log
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16",
            project_name="default")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_flow_log = volcengine.vpc.FlowLog("fooFlowLog",
            flow_log_name="acc-test-flow-log",
            description="acc-test",
            resource_type="subnet",
            resource_id=foo_subnet.id,
            traffic_type="All",
            log_project_name="acc-test-project",
            log_topic_name="acc-test-topic",
            aggregation_interval=10,
            project_name="default",
            tags=[volcengine.vpc.FlowLogTagArgs(
                key="k1",
                value="v1",
            )])
        ```

        ## Import

        FlowLog can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vpc/flowLog:FlowLog default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param FlowLogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FlowLogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregation_interval: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flow_log_name: Optional[pulumi.Input[str]] = None,
                 log_project_name: Optional[pulumi.Input[str]] = None,
                 log_topic_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowLogTagArgs']]]]] = None,
                 traffic_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FlowLogArgs.__new__(FlowLogArgs)

            if aggregation_interval is None and not opts.urn:
                raise TypeError("Missing required property 'aggregation_interval'")
            __props__.__dict__["aggregation_interval"] = aggregation_interval
            __props__.__dict__["description"] = description
            if flow_log_name is None and not opts.urn:
                raise TypeError("Missing required property 'flow_log_name'")
            __props__.__dict__["flow_log_name"] = flow_log_name
            if log_project_name is None and not opts.urn:
                raise TypeError("Missing required property 'log_project_name'")
            __props__.__dict__["log_project_name"] = log_project_name
            if log_topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'log_topic_name'")
            __props__.__dict__["log_topic_name"] = log_topic_name
            __props__.__dict__["project_name"] = project_name
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
            __props__.__dict__["tags"] = tags
            if traffic_type is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_type'")
            __props__.__dict__["traffic_type"] = traffic_type
            __props__.__dict__["business_status"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["lock_reason"] = None
            __props__.__dict__["log_project_id"] = None
            __props__.__dict__["log_topic_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(FlowLog, __self__).__init__(
            'volcengine:vpc/flowLog:FlowLog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aggregation_interval: Optional[pulumi.Input[int]] = None,
            business_status: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            flow_log_name: Optional[pulumi.Input[str]] = None,
            lock_reason: Optional[pulumi.Input[str]] = None,
            log_project_id: Optional[pulumi.Input[str]] = None,
            log_project_name: Optional[pulumi.Input[str]] = None,
            log_topic_id: Optional[pulumi.Input[str]] = None,
            log_topic_name: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            resource_id: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowLogTagArgs']]]]] = None,
            traffic_type: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'FlowLog':
        """
        Get an existing FlowLog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] aggregation_interval: The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        :param pulumi.Input[str] business_status: The business status of flow log.
        :param pulumi.Input[str] created_at: The created time of flow log.
        :param pulumi.Input[str] description: The description of flow log.
        :param pulumi.Input[str] flow_log_name: The name of flow log.
        :param pulumi.Input[str] lock_reason: The reason why flow log is locked.
        :param pulumi.Input[str] log_project_id: The ID of log project.
        :param pulumi.Input[str] log_project_name: The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] log_topic_id: The ID of log topic.
        :param pulumi.Input[str] log_topic_name: The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
               When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] project_name: The project name of flow log.
        :param pulumi.Input[str] resource_id: The ID of resource.
        :param pulumi.Input[str] resource_type: The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        :param pulumi.Input[str] status: The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowLogTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] traffic_type: The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        :param pulumi.Input[str] updated_at: The updated time of flow log.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FlowLogState.__new__(_FlowLogState)

        __props__.__dict__["aggregation_interval"] = aggregation_interval
        __props__.__dict__["business_status"] = business_status
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["flow_log_name"] = flow_log_name
        __props__.__dict__["lock_reason"] = lock_reason
        __props__.__dict__["log_project_id"] = log_project_id
        __props__.__dict__["log_project_name"] = log_project_name
        __props__.__dict__["log_topic_id"] = log_topic_id
        __props__.__dict__["log_topic_name"] = log_topic_name
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["traffic_type"] = traffic_type
        __props__.__dict__["updated_at"] = updated_at
        return FlowLog(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aggregationInterval")
    def aggregation_interval(self) -> pulumi.Output[int]:
        """
        The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        """
        return pulumi.get(self, "aggregation_interval")

    @property
    @pulumi.getter(name="businessStatus")
    def business_status(self) -> pulumi.Output[str]:
        """
        The business status of flow log.
        """
        return pulumi.get(self, "business_status")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The created time of flow log.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of flow log.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="flowLogName")
    def flow_log_name(self) -> pulumi.Output[str]:
        """
        The name of flow log.
        """
        return pulumi.get(self, "flow_log_name")

    @property
    @pulumi.getter(name="lockReason")
    def lock_reason(self) -> pulumi.Output[str]:
        """
        The reason why flow log is locked.
        """
        return pulumi.get(self, "lock_reason")

    @property
    @pulumi.getter(name="logProjectId")
    def log_project_id(self) -> pulumi.Output[str]:
        """
        The ID of log project.
        """
        return pulumi.get(self, "log_project_id")

    @property
    @pulumi.getter(name="logProjectName")
    def log_project_name(self) -> pulumi.Output[str]:
        """
        The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
        When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "log_project_name")

    @property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> pulumi.Output[str]:
        """
        The ID of log topic.
        """
        return pulumi.get(self, "log_topic_id")

    @property
    @pulumi.getter(name="logTopicName")
    def log_topic_name(self) -> pulumi.Output[str]:
        """
        The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
        When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "log_topic_name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The project name of flow log.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        """
        The ID of resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.FlowLogTag']]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> pulumi.Output[str]:
        """
        The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        """
        return pulumi.get(self, "traffic_type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The updated time of flow log.
        """
        return pulumi.get(self, "updated_at")

