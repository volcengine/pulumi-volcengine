# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'TrafficMirrorFilterRulesResult',
    'AwaitableTrafficMirrorFilterRulesResult',
    'traffic_mirror_filter_rules',
    'traffic_mirror_filter_rules_output',
]

warnings.warn("""volcengine.vpc.TrafficMirrorFilterRules has been deprecated in favor of volcengine.vpc.getTrafficMirrorFilterRules""", DeprecationWarning)

@pulumi.output_type
class TrafficMirrorFilterRulesResult:
    """
    A collection of values returned by TrafficMirrorFilterRules.
    """
    def __init__(__self__, id=None, output_file=None, project_name=None, tags=None, total_count=None, traffic_mirror_filter_ids=None, traffic_mirror_filter_names=None, traffic_mirror_filter_rules=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if traffic_mirror_filter_ids and not isinstance(traffic_mirror_filter_ids, list):
            raise TypeError("Expected argument 'traffic_mirror_filter_ids' to be a list")
        pulumi.set(__self__, "traffic_mirror_filter_ids", traffic_mirror_filter_ids)
        if traffic_mirror_filter_names and not isinstance(traffic_mirror_filter_names, list):
            raise TypeError("Expected argument 'traffic_mirror_filter_names' to be a list")
        pulumi.set(__self__, "traffic_mirror_filter_names", traffic_mirror_filter_names)
        if traffic_mirror_filter_rules and not isinstance(traffic_mirror_filter_rules, list):
            raise TypeError("Expected argument 'traffic_mirror_filter_rules' to be a list")
        pulumi.set(__self__, "traffic_mirror_filter_rules", traffic_mirror_filter_rules)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.TrafficMirrorFilterRulesTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="trafficMirrorFilterIds")
    def traffic_mirror_filter_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "traffic_mirror_filter_ids")

    @property
    @pulumi.getter(name="trafficMirrorFilterNames")
    def traffic_mirror_filter_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "traffic_mirror_filter_names")

    @property
    @pulumi.getter(name="trafficMirrorFilterRules")
    def traffic_mirror_filter_rules(self) -> Sequence['outputs.TrafficMirrorFilterRulesTrafficMirrorFilterRuleResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "traffic_mirror_filter_rules")


class AwaitableTrafficMirrorFilterRulesResult(TrafficMirrorFilterRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return TrafficMirrorFilterRulesResult(
            id=self.id,
            output_file=self.output_file,
            project_name=self.project_name,
            tags=self.tags,
            total_count=self.total_count,
            traffic_mirror_filter_ids=self.traffic_mirror_filter_ids,
            traffic_mirror_filter_names=self.traffic_mirror_filter_names,
            traffic_mirror_filter_rules=self.traffic_mirror_filter_rules)


def traffic_mirror_filter_rules(output_file: Optional[str] = None,
                                project_name: Optional[str] = None,
                                tags: Optional[Sequence[pulumi.InputType['TrafficMirrorFilterRulesTagArgs']]] = None,
                                traffic_mirror_filter_ids: Optional[Sequence[str]] = None,
                                traffic_mirror_filter_names: Optional[Sequence[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableTrafficMirrorFilterRulesResult:
    """
    Use this data source to query detailed information of traffic mirror filter rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vpc.get_traffic_mirror_filter_rules(traffic_mirror_filter_ids=["tmf-mivro9v5x24g5smt1bsq****"])
    ```


    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of traffic mirror filter.
    :param Sequence[pulumi.InputType['TrafficMirrorFilterRulesTagArgs']] tags: Tags.
    :param Sequence[str] traffic_mirror_filter_ids: A list of traffic mirror filter IDs.
    :param Sequence[str] traffic_mirror_filter_names: A list of traffic mirror filter names.
    """
    pulumi.log.warn("""traffic_mirror_filter_rules is deprecated: volcengine.vpc.TrafficMirrorFilterRules has been deprecated in favor of volcengine.vpc.getTrafficMirrorFilterRules""")
    __args__ = dict()
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['tags'] = tags
    __args__['trafficMirrorFilterIds'] = traffic_mirror_filter_ids
    __args__['trafficMirrorFilterNames'] = traffic_mirror_filter_names
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vpc/trafficMirrorFilterRules:TrafficMirrorFilterRules', __args__, opts=opts, typ=TrafficMirrorFilterRulesResult).value

    return AwaitableTrafficMirrorFilterRulesResult(
        id=pulumi.get(__ret__, 'id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        traffic_mirror_filter_ids=pulumi.get(__ret__, 'traffic_mirror_filter_ids'),
        traffic_mirror_filter_names=pulumi.get(__ret__, 'traffic_mirror_filter_names'),
        traffic_mirror_filter_rules=pulumi.get(__ret__, 'traffic_mirror_filter_rules'))


@_utilities.lift_output_func(traffic_mirror_filter_rules)
def traffic_mirror_filter_rules_output(output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                       project_name: Optional[pulumi.Input[Optional[str]]] = None,
                                       tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['TrafficMirrorFilterRulesTagArgs']]]]] = None,
                                       traffic_mirror_filter_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                       traffic_mirror_filter_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[TrafficMirrorFilterRulesResult]:
    """
    Use this data source to query detailed information of traffic mirror filter rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vpc.get_traffic_mirror_filter_rules(traffic_mirror_filter_ids=["tmf-mivro9v5x24g5smt1bsq****"])
    ```


    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of traffic mirror filter.
    :param Sequence[pulumi.InputType['TrafficMirrorFilterRulesTagArgs']] tags: Tags.
    :param Sequence[str] traffic_mirror_filter_ids: A list of traffic mirror filter IDs.
    :param Sequence[str] traffic_mirror_filter_names: A list of traffic mirror filter names.
    """
    pulumi.log.warn("""traffic_mirror_filter_rules is deprecated: volcengine.vpc.TrafficMirrorFilterRules has been deprecated in favor of volcengine.vpc.getTrafficMirrorFilterRules""")
    ...
