# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CidrBlockAssociateArgs', 'CidrBlockAssociate']

@pulumi.input_type
class CidrBlockAssociateArgs:
    def __init__(__self__, *,
                 secondary_cidr_block: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a CidrBlockAssociate resource.
        :param pulumi.Input[str] secondary_cidr_block: The secondary cidr block of the VPC.
        :param pulumi.Input[str] vpc_id: The id of the VPC.
        """
        pulumi.set(__self__, "secondary_cidr_block", secondary_cidr_block)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="secondaryCidrBlock")
    def secondary_cidr_block(self) -> pulumi.Input[str]:
        """
        The secondary cidr block of the VPC.
        """
        return pulumi.get(self, "secondary_cidr_block")

    @secondary_cidr_block.setter
    def secondary_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "secondary_cidr_block", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The id of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _CidrBlockAssociateState:
    def __init__(__self__, *,
                 secondary_cidr_block: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CidrBlockAssociate resources.
        :param pulumi.Input[str] secondary_cidr_block: The secondary cidr block of the VPC.
        :param pulumi.Input[str] vpc_id: The id of the VPC.
        """
        if secondary_cidr_block is not None:
            pulumi.set(__self__, "secondary_cidr_block", secondary_cidr_block)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="secondaryCidrBlock")
    def secondary_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The secondary cidr block of the VPC.
        """
        return pulumi.get(self, "secondary_cidr_block")

    @secondary_cidr_block.setter
    def secondary_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_cidr_block", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class CidrBlockAssociate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 secondary_cidr_block: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage vpc cidr block associate
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="192.168.0.0/20",
            project_name="default")
        foo_cidr_block_associate = volcengine.vpc.CidrBlockAssociate("fooCidrBlockAssociate",
            vpc_id=foo_vpc.id,
            secondary_cidr_block="192.168.16.0/20")
        ```

        ## Import

        The VpcCidrBlockAssociate is not support import.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] secondary_cidr_block: The secondary cidr block of the VPC.
        :param pulumi.Input[str] vpc_id: The id of the VPC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CidrBlockAssociateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vpc cidr block associate
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="192.168.0.0/20",
            project_name="default")
        foo_cidr_block_associate = volcengine.vpc.CidrBlockAssociate("fooCidrBlockAssociate",
            vpc_id=foo_vpc.id,
            secondary_cidr_block="192.168.16.0/20")
        ```

        ## Import

        The VpcCidrBlockAssociate is not support import.

        :param str resource_name: The name of the resource.
        :param CidrBlockAssociateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CidrBlockAssociateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 secondary_cidr_block: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CidrBlockAssociateArgs.__new__(CidrBlockAssociateArgs)

            if secondary_cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'secondary_cidr_block'")
            __props__.__dict__["secondary_cidr_block"] = secondary_cidr_block
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
        super(CidrBlockAssociate, __self__).__init__(
            'volcengine:vpc/cidrBlockAssociate:CidrBlockAssociate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            secondary_cidr_block: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'CidrBlockAssociate':
        """
        Get an existing CidrBlockAssociate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] secondary_cidr_block: The secondary cidr block of the VPC.
        :param pulumi.Input[str] vpc_id: The id of the VPC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CidrBlockAssociateState.__new__(_CidrBlockAssociateState)

        __props__.__dict__["secondary_cidr_block"] = secondary_cidr_block
        __props__.__dict__["vpc_id"] = vpc_id
        return CidrBlockAssociate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="secondaryCidrBlock")
    def secondary_cidr_block(self) -> pulumi.Output[str]:
        """
        The secondary cidr block of the VPC.
        """
        return pulumi.get(self, "secondary_cidr_block")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The id of the VPC.
        """
        return pulumi.get(self, "vpc_id")

