# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ScalingInstancesResult',
    'AwaitableScalingInstancesResult',
    'scaling_instances',
    'scaling_instances_output',
]

@pulumi.output_type
class ScalingInstancesResult:
    """
    A collection of values returned by ScalingInstances.
    """
    def __init__(__self__, creation_type=None, id=None, ids=None, output_file=None, scaling_configuration_id=None, scaling_group_id=None, scaling_instances=None, status=None, total_count=None):
        if creation_type and not isinstance(creation_type, str):
            raise TypeError("Expected argument 'creation_type' to be a str")
        pulumi.set(__self__, "creation_type", creation_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if scaling_configuration_id and not isinstance(scaling_configuration_id, str):
            raise TypeError("Expected argument 'scaling_configuration_id' to be a str")
        pulumi.set(__self__, "scaling_configuration_id", scaling_configuration_id)
        if scaling_group_id and not isinstance(scaling_group_id, str):
            raise TypeError("Expected argument 'scaling_group_id' to be a str")
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        if scaling_instances and not isinstance(scaling_instances, list):
            raise TypeError("Expected argument 'scaling_instances' to be a list")
        pulumi.set(__self__, "scaling_instances", scaling_instances)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="creationType")
    def creation_type(self) -> Optional[str]:
        """
        The creation type of the instance. Valid values: AutoCreated, Attached.
        """
        return pulumi.get(self, "creation_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="scalingConfigurationId")
    def scaling_configuration_id(self) -> Optional[str]:
        """
        The id of the scaling configuration.
        """
        return pulumi.get(self, "scaling_configuration_id")

    @property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> str:
        """
        The id of the scaling group.
        """
        return pulumi.get(self, "scaling_group_id")

    @property
    @pulumi.getter(name="scalingInstances")
    def scaling_instances(self) -> Sequence['outputs.ScalingInstancesScalingInstanceResult']:
        """
        The collection of scaling instances.
        """
        return pulumi.get(self, "scaling_instances")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of instances.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of scaling instances query.
        """
        return pulumi.get(self, "total_count")


class AwaitableScalingInstancesResult(ScalingInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ScalingInstancesResult(
            creation_type=self.creation_type,
            id=self.id,
            ids=self.ids,
            output_file=self.output_file,
            scaling_configuration_id=self.scaling_configuration_id,
            scaling_group_id=self.scaling_group_id,
            scaling_instances=self.scaling_instances,
            status=self.status,
            total_count=self.total_count)


def scaling_instances(creation_type: Optional[str] = None,
                      ids: Optional[Sequence[str]] = None,
                      output_file: Optional[str] = None,
                      scaling_configuration_id: Optional[str] = None,
                      scaling_group_id: Optional[str] = None,
                      status: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableScalingInstancesResult:
    """
    Use this data source to query detailed information of scaling instances
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.autoscaling.scaling_instances(ids=[
            "i-ybzl4u5uogl8j07hgcbg",
            "i-ybyncrcpzpgh9zmlct0w",
            "i-ybyncrcpzogh9z4ax9tv",
        ],
        scaling_configuration_id="scc-ybtawzucw95pkgon0wst",
        scaling_group_id="scg-ybtawtznszgh9yv8agcp",
        status="InService")
    ```


    :param str creation_type: The creation type of the instances. Valid values: AutoCreated, Attached.
    :param Sequence[str] ids: A list of instance ids.
    :param str output_file: File name where to save data source results.
    :param str scaling_configuration_id: The id of the scaling configuration id.
    :param str scaling_group_id: The id of the scaling group.
    :param str status: The status of instances. Valid values: Init, Pending, Pending:Wait, InService, Error, Removing, Removing:Wait, Stopped, Protected.
    """
    __args__ = dict()
    __args__['creationType'] = creation_type
    __args__['ids'] = ids
    __args__['outputFile'] = output_file
    __args__['scalingConfigurationId'] = scaling_configuration_id
    __args__['scalingGroupId'] = scaling_group_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:autoscaling/scalingInstances:ScalingInstances', __args__, opts=opts, typ=ScalingInstancesResult).value

    return AwaitableScalingInstancesResult(
        creation_type=pulumi.get(__ret__, 'creation_type'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        output_file=pulumi.get(__ret__, 'output_file'),
        scaling_configuration_id=pulumi.get(__ret__, 'scaling_configuration_id'),
        scaling_group_id=pulumi.get(__ret__, 'scaling_group_id'),
        scaling_instances=pulumi.get(__ret__, 'scaling_instances'),
        status=pulumi.get(__ret__, 'status'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(scaling_instances)
def scaling_instances_output(creation_type: Optional[pulumi.Input[Optional[str]]] = None,
                             ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             scaling_configuration_id: Optional[pulumi.Input[Optional[str]]] = None,
                             scaling_group_id: Optional[pulumi.Input[str]] = None,
                             status: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ScalingInstancesResult]:
    """
    Use this data source to query detailed information of scaling instances
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.autoscaling.scaling_instances(ids=[
            "i-ybzl4u5uogl8j07hgcbg",
            "i-ybyncrcpzpgh9zmlct0w",
            "i-ybyncrcpzogh9z4ax9tv",
        ],
        scaling_configuration_id="scc-ybtawzucw95pkgon0wst",
        scaling_group_id="scg-ybtawtznszgh9yv8agcp",
        status="InService")
    ```


    :param str creation_type: The creation type of the instances. Valid values: AutoCreated, Attached.
    :param Sequence[str] ids: A list of instance ids.
    :param str output_file: File name where to save data source results.
    :param str scaling_configuration_id: The id of the scaling configuration id.
    :param str scaling_group_id: The id of the scaling group.
    :param str status: The status of instances. Valid values: Init, Pending, Pending:Wait, InService, Error, Removing, Removing:Wait, Stopped, Protected.
    """
    ...
