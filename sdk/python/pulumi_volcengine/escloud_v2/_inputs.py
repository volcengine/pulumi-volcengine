# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'EscloudInstanceV2NetworkSpecArgs',
    'EscloudInstanceV2NodeSpecsAssignArgs',
    'EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs',
    'EscloudInstanceV2TagArgs',
    'EscloudInstancesV2TagArgs',
    'GetEscloudInstancesV2TagArgs',
]

@pulumi.input_type
class EscloudInstanceV2NetworkSpecArgs:
    def __init__(__self__, *,
                 bandwidth: pulumi.Input[int],
                 is_open: pulumi.Input[bool],
                 spec_name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[int] bandwidth: The bandwidth of the eip. Unit: Mbps.
        :param pulumi.Input[bool] is_open: Whether the eip is opened.
        :param pulumi.Input[str] spec_name: The spec name of public network.
        :param pulumi.Input[str] type: The type of public network, valid values: `Elasticsearch`, `Kibana`.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "spec_name", spec_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[int]:
        """
        The bandwidth of the eip. Unit: Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[int]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> pulumi.Input[bool]:
        """
        Whether the eip is opened.
        """
        return pulumi.get(self, "is_open")

    @is_open.setter
    def is_open(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_open", value)

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> pulumi.Input[str]:
        """
        The spec name of public network.
        """
        return pulumi.get(self, "spec_name")

    @spec_name.setter
    def spec_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "spec_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of public network, valid values: `Elasticsearch`, `Kibana`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class EscloudInstanceV2NodeSpecsAssignArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[int],
                 resource_spec_name: pulumi.Input[str],
                 storage_size: pulumi.Input[int],
                 storage_spec_name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 extra_performance: Optional[pulumi.Input['EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs']] = None):
        """
        :param pulumi.Input[int] number: The number of node.
        :param pulumi.Input[str] resource_spec_name: The name of compute resource spec.
        :param pulumi.Input[int] storage_size: The size of storage. Unit: GiB. the adjustment step size is 10GiB. Default is 100 GiB. Kibana NodeSpecsAssign should specify this field to 0.
        :param pulumi.Input[str] storage_spec_name: The name of storage spec. Kibana NodeSpecsAssign should specify this field to ``.
        :param pulumi.Input[str] type: The type of node, valid values: `Master`, `Hot`, `Cold`, `Warm`, `Kibana`, `Coordinator`.
        :param pulumi.Input['EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs'] extra_performance: The extra performance of FlexPL storage spec.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "resource_spec_name", resource_spec_name)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "storage_spec_name", storage_spec_name)
        pulumi.set(__self__, "type", type)
        if extra_performance is not None:
            pulumi.set(__self__, "extra_performance", extra_performance)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[int]:
        """
        The number of node.
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter(name="resourceSpecName")
    def resource_spec_name(self) -> pulumi.Input[str]:
        """
        The name of compute resource spec.
        """
        return pulumi.get(self, "resource_spec_name")

    @resource_spec_name.setter
    def resource_spec_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_spec_name", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Input[int]:
        """
        The size of storage. Unit: GiB. the adjustment step size is 10GiB. Default is 100 GiB. Kibana NodeSpecsAssign should specify this field to 0.
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="storageSpecName")
    def storage_spec_name(self) -> pulumi.Input[str]:
        """
        The name of storage spec. Kibana NodeSpecsAssign should specify this field to ``.
        """
        return pulumi.get(self, "storage_spec_name")

    @storage_spec_name.setter
    def storage_spec_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_spec_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of node, valid values: `Master`, `Hot`, `Cold`, `Warm`, `Kibana`, `Coordinator`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="extraPerformance")
    def extra_performance(self) -> Optional[pulumi.Input['EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs']]:
        """
        The extra performance of FlexPL storage spec.
        """
        return pulumi.get(self, "extra_performance")

    @extra_performance.setter
    def extra_performance(self, value: Optional[pulumi.Input['EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs']]):
        pulumi.set(self, "extra_performance", value)


@pulumi.input_type
class EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs:
    def __init__(__self__, *,
                 throughput: pulumi.Input[int]):
        """
        :param pulumi.Input[int] throughput: When your data node chooses to use FlexPL storage type and the storage specification configuration is 500GiB or above, it supports purchasing bandwidth packages to increase disk bandwidth.
               The unit is MiB, and the adjustment step size is 10MiB.
        """
        pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def throughput(self) -> pulumi.Input[int]:
        """
        When your data node chooses to use FlexPL storage type and the storage specification configuration is 500GiB or above, it supports purchasing bandwidth packages to increase disk bandwidth.
        The unit is MiB, and the adjustment step size is 10MiB.
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: pulumi.Input[int]):
        pulumi.set(self, "throughput", value)


@pulumi.input_type
class EscloudInstanceV2TagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The Key of Tags.
        :param pulumi.Input[str] value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EscloudInstancesV2TagArgs:
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The Key of Tags.
        :param Sequence[str] values: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetEscloudInstancesV2TagArgs:
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The Key of Tags.
        :param Sequence[str] values: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


