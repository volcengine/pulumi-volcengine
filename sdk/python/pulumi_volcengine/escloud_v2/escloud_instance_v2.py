# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EscloudInstanceV2Args', 'EscloudInstanceV2']

@pulumi.input_type
class EscloudInstanceV2Args:
    def __init__(__self__, *,
                 admin_password: pulumi.Input[str],
                 charge_type: pulumi.Input[str],
                 configuration_code: pulumi.Input[str],
                 enable_https: pulumi.Input[bool],
                 instance_name: pulumi.Input[str],
                 node_specs_assigns: pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NodeSpecsAssignArgs']]],
                 subnet_id: pulumi.Input[str],
                 version: pulumi.Input[str],
                 zone_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 enable_pure_master: Optional[pulumi.Input[bool]] = None,
                 maintenance_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 maintenance_time: Optional[pulumi.Input[str]] = None,
                 network_specs: Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NetworkSpecArgs']]]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2TagArgs']]]] = None):
        """
        The set of arguments for constructing a EscloudInstanceV2 resource.
        :param pulumi.Input[str] admin_password: The password of administrator account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] charge_type: The charge type of ESCloud instance, valid values: `PostPaid`, `PrePaid`.
        :param pulumi.Input[str] configuration_code: Configuration code used for billing.
        :param pulumi.Input[bool] enable_https: Whether Https access is enabled.
        :param pulumi.Input[str] instance_name: The name of ESCloud instance.
        :param pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NodeSpecsAssignArgs']]] node_specs_assigns: The number and configuration of various ESCloud instance node. Kibana NodeSpecsAssign should not be modified.
        :param pulumi.Input[str] subnet_id: The id of subnet, the subnet must belong to the AZ selected.
        :param pulumi.Input[str] version: The version of instance. When creating ESCloud instance, the valid value is `V6_7` or `V7_10`. When creating OpenSearch instance, the valid value is `OPEN_SEARCH_2_9`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the ESCloud instance. Support specifying multiple availability zones.
               The first zone id is the primary availability zone, while the rest are backup availability zones.
        :param pulumi.Input[bool] auto_renew: Whether to automatically renew in prepaid scenarios. Default is false.
        :param pulumi.Input[bool] deletion_protection: Whether enable deletion protection for ESCloud instance. Default is false.
        :param pulumi.Input[bool] enable_pure_master: Whether the Master node is independent.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] maintenance_days: The maintainable day for the instance. Valid values: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`. Works only on modified scenes.
        :param pulumi.Input[str] maintenance_time: The maintainable time period for the instance. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NetworkSpecArgs']]] network_specs: The public network config of the ESCloud instance.
        :param pulumi.Input[int] period: Purchase duration in prepaid scenarios. Unit: Monthly.
        :param pulumi.Input[str] project_name: The project name to which the ESCloud instance belongs.
        :param pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2TagArgs']]] tags: Tags.
        """
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "configuration_code", configuration_code)
        pulumi.set(__self__, "enable_https", enable_https)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "node_specs_assigns", node_specs_assigns)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "zone_ids", zone_ids)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if enable_pure_master is not None:
            pulumi.set(__self__, "enable_pure_master", enable_pure_master)
        if maintenance_days is not None:
            pulumi.set(__self__, "maintenance_days", maintenance_days)
        if maintenance_time is not None:
            pulumi.set(__self__, "maintenance_time", maintenance_time)
        if network_specs is not None:
            pulumi.set(__self__, "network_specs", network_specs)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> pulumi.Input[str]:
        """
        The password of administrator account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Input[str]:
        """
        The charge type of ESCloud instance, valid values: `PostPaid`, `PrePaid`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="configurationCode")
    def configuration_code(self) -> pulumi.Input[str]:
        """
        Configuration code used for billing.
        """
        return pulumi.get(self, "configuration_code")

    @configuration_code.setter
    def configuration_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration_code", value)

    @property
    @pulumi.getter(name="enableHttps")
    def enable_https(self) -> pulumi.Input[bool]:
        """
        Whether Https access is enabled.
        """
        return pulumi.get(self, "enable_https")

    @enable_https.setter
    def enable_https(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_https", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        The name of ESCloud instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="nodeSpecsAssigns")
    def node_specs_assigns(self) -> pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NodeSpecsAssignArgs']]]:
        """
        The number and configuration of various ESCloud instance node. Kibana NodeSpecsAssign should not be modified.
        """
        return pulumi.get(self, "node_specs_assigns")

    @node_specs_assigns.setter
    def node_specs_assigns(self, value: pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NodeSpecsAssignArgs']]]):
        pulumi.set(self, "node_specs_assigns", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The id of subnet, the subnet must belong to the AZ selected.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        The version of instance. When creating ESCloud instance, the valid value is `V6_7` or `V7_10`. When creating OpenSearch instance, the valid value is `OPEN_SEARCH_2_9`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The zone id of the ESCloud instance. Support specifying multiple availability zones.
        The first zone id is the primary availability zone, while the rest are backup availability zones.
        """
        return pulumi.get(self, "zone_ids")

    @zone_ids.setter
    def zone_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "zone_ids", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically renew in prepaid scenarios. Default is false.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable deletion protection for ESCloud instance. Default is false.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter(name="enablePureMaster")
    def enable_pure_master(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Master node is independent.
        """
        return pulumi.get(self, "enable_pure_master")

    @enable_pure_master.setter
    def enable_pure_master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_pure_master", value)

    @property
    @pulumi.getter(name="maintenanceDays")
    def maintenance_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The maintainable day for the instance. Valid values: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`. Works only on modified scenes.
        """
        return pulumi.get(self, "maintenance_days")

    @maintenance_days.setter
    def maintenance_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "maintenance_days", value)

    @property
    @pulumi.getter(name="maintenanceTime")
    def maintenance_time(self) -> Optional[pulumi.Input[str]]:
        """
        The maintainable time period for the instance. Works only on modified scenes.
        """
        return pulumi.get(self, "maintenance_time")

    @maintenance_time.setter
    def maintenance_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_time", value)

    @property
    @pulumi.getter(name="networkSpecs")
    def network_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NetworkSpecArgs']]]]:
        """
        The public network config of the ESCloud instance.
        """
        return pulumi.get(self, "network_specs")

    @network_specs.setter
    def network_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NetworkSpecArgs']]]]):
        pulumi.set(self, "network_specs", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase duration in prepaid scenarios. Unit: Monthly.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name to which the ESCloud instance belongs.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2TagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _EscloudInstanceV2State:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 cerebro_private_domain: Optional[pulumi.Input[str]] = None,
                 cerebro_public_domain: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 configuration_code: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 enable_https: Optional[pulumi.Input[bool]] = None,
                 enable_pure_master: Optional[pulumi.Input[bool]] = None,
                 es_eip: Optional[pulumi.Input[str]] = None,
                 es_eip_id: Optional[pulumi.Input[str]] = None,
                 es_private_domain: Optional[pulumi.Input[str]] = None,
                 es_private_endpoint: Optional[pulumi.Input[str]] = None,
                 es_private_ip_whitelist: Optional[pulumi.Input[str]] = None,
                 es_public_domain: Optional[pulumi.Input[str]] = None,
                 es_public_endpoint: Optional[pulumi.Input[str]] = None,
                 es_public_ip_whitelist: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 kibana_eip: Optional[pulumi.Input[str]] = None,
                 kibana_eip_id: Optional[pulumi.Input[str]] = None,
                 kibana_private_domain: Optional[pulumi.Input[str]] = None,
                 kibana_private_ip_whitelist: Optional[pulumi.Input[str]] = None,
                 kibana_public_domain: Optional[pulumi.Input[str]] = None,
                 kibana_public_ip_whitelist: Optional[pulumi.Input[str]] = None,
                 main_zone_id: Optional[pulumi.Input[str]] = None,
                 maintenance_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 maintenance_time: Optional[pulumi.Input[str]] = None,
                 network_specs: Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NetworkSpecArgs']]]] = None,
                 node_specs_assigns: Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NodeSpecsAssignArgs']]]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2TagArgs']]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering EscloudInstanceV2 resources.
        :param pulumi.Input[str] admin_password: The password of administrator account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[bool] auto_renew: Whether to automatically renew in prepaid scenarios. Default is false.
        :param pulumi.Input[str] cerebro_private_domain: The cerebro private domain of instance.
        :param pulumi.Input[str] cerebro_public_domain: The cerebro public domain of instance.
        :param pulumi.Input[str] charge_type: The charge type of ESCloud instance, valid values: `PostPaid`, `PrePaid`.
        :param pulumi.Input[str] configuration_code: Configuration code used for billing.
        :param pulumi.Input[bool] deletion_protection: Whether enable deletion protection for ESCloud instance. Default is false.
        :param pulumi.Input[bool] enable_https: Whether Https access is enabled.
        :param pulumi.Input[bool] enable_pure_master: Whether the Master node is independent.
        :param pulumi.Input[str] es_eip: The eip address of instance.
        :param pulumi.Input[str] es_eip_id: The eip id associated with the instance.
        :param pulumi.Input[str] es_private_domain: The es private domain of instance.
        :param pulumi.Input[str] es_private_endpoint: The es private endpoint of instance.
        :param pulumi.Input[str] es_private_ip_whitelist: The whitelist of es private ip.
        :param pulumi.Input[str] es_public_domain: The es public domain of instance.
        :param pulumi.Input[str] es_public_endpoint: The es public endpoint of instance.
        :param pulumi.Input[str] es_public_ip_whitelist: The whitelist of es public ip.
        :param pulumi.Input[str] instance_name: The name of ESCloud instance.
        :param pulumi.Input[str] kibana_eip: The eip address of kibana.
        :param pulumi.Input[str] kibana_eip_id: The eip id associated with kibana.
        :param pulumi.Input[str] kibana_private_domain: The kibana private domain of instance.
        :param pulumi.Input[str] kibana_private_ip_whitelist: The whitelist of kibana private ip.
        :param pulumi.Input[str] kibana_public_domain: The kibana public domain of instance.
        :param pulumi.Input[str] kibana_public_ip_whitelist: The whitelist of kibana public ip.
        :param pulumi.Input[str] main_zone_id: The main zone id of instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] maintenance_days: The maintainable day for the instance. Valid values: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`. Works only on modified scenes.
        :param pulumi.Input[str] maintenance_time: The maintainable time period for the instance. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NetworkSpecArgs']]] network_specs: The public network config of the ESCloud instance.
        :param pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NodeSpecsAssignArgs']]] node_specs_assigns: The number and configuration of various ESCloud instance node. Kibana NodeSpecsAssign should not be modified.
        :param pulumi.Input[int] period: Purchase duration in prepaid scenarios. Unit: Monthly.
        :param pulumi.Input[str] project_name: The project name to which the ESCloud instance belongs.
        :param pulumi.Input[str] status: The status of instance.
        :param pulumi.Input[str] subnet_id: The id of subnet, the subnet must belong to the AZ selected.
        :param pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2TagArgs']]] tags: Tags.
        :param pulumi.Input[str] version: The version of instance. When creating ESCloud instance, the valid value is `V6_7` or `V7_10`. When creating OpenSearch instance, the valid value is `OPEN_SEARCH_2_9`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the ESCloud instance. Support specifying multiple availability zones.
               The first zone id is the primary availability zone, while the rest are backup availability zones.
        """
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if cerebro_private_domain is not None:
            pulumi.set(__self__, "cerebro_private_domain", cerebro_private_domain)
        if cerebro_public_domain is not None:
            pulumi.set(__self__, "cerebro_public_domain", cerebro_public_domain)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if configuration_code is not None:
            pulumi.set(__self__, "configuration_code", configuration_code)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if enable_https is not None:
            pulumi.set(__self__, "enable_https", enable_https)
        if enable_pure_master is not None:
            pulumi.set(__self__, "enable_pure_master", enable_pure_master)
        if es_eip is not None:
            pulumi.set(__self__, "es_eip", es_eip)
        if es_eip_id is not None:
            pulumi.set(__self__, "es_eip_id", es_eip_id)
        if es_private_domain is not None:
            pulumi.set(__self__, "es_private_domain", es_private_domain)
        if es_private_endpoint is not None:
            pulumi.set(__self__, "es_private_endpoint", es_private_endpoint)
        if es_private_ip_whitelist is not None:
            pulumi.set(__self__, "es_private_ip_whitelist", es_private_ip_whitelist)
        if es_public_domain is not None:
            pulumi.set(__self__, "es_public_domain", es_public_domain)
        if es_public_endpoint is not None:
            pulumi.set(__self__, "es_public_endpoint", es_public_endpoint)
        if es_public_ip_whitelist is not None:
            pulumi.set(__self__, "es_public_ip_whitelist", es_public_ip_whitelist)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if kibana_eip is not None:
            pulumi.set(__self__, "kibana_eip", kibana_eip)
        if kibana_eip_id is not None:
            pulumi.set(__self__, "kibana_eip_id", kibana_eip_id)
        if kibana_private_domain is not None:
            pulumi.set(__self__, "kibana_private_domain", kibana_private_domain)
        if kibana_private_ip_whitelist is not None:
            pulumi.set(__self__, "kibana_private_ip_whitelist", kibana_private_ip_whitelist)
        if kibana_public_domain is not None:
            pulumi.set(__self__, "kibana_public_domain", kibana_public_domain)
        if kibana_public_ip_whitelist is not None:
            pulumi.set(__self__, "kibana_public_ip_whitelist", kibana_public_ip_whitelist)
        if main_zone_id is not None:
            pulumi.set(__self__, "main_zone_id", main_zone_id)
        if maintenance_days is not None:
            pulumi.set(__self__, "maintenance_days", maintenance_days)
        if maintenance_time is not None:
            pulumi.set(__self__, "maintenance_time", maintenance_time)
        if network_specs is not None:
            pulumi.set(__self__, "network_specs", network_specs)
        if node_specs_assigns is not None:
            pulumi.set(__self__, "node_specs_assigns", node_specs_assigns)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if zone_ids is not None:
            pulumi.set(__self__, "zone_ids", zone_ids)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of administrator account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically renew in prepaid scenarios. Default is false.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="cerebroPrivateDomain")
    def cerebro_private_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The cerebro private domain of instance.
        """
        return pulumi.get(self, "cerebro_private_domain")

    @cerebro_private_domain.setter
    def cerebro_private_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cerebro_private_domain", value)

    @property
    @pulumi.getter(name="cerebroPublicDomain")
    def cerebro_public_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The cerebro public domain of instance.
        """
        return pulumi.get(self, "cerebro_public_domain")

    @cerebro_public_domain.setter
    def cerebro_public_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cerebro_public_domain", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of ESCloud instance, valid values: `PostPaid`, `PrePaid`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="configurationCode")
    def configuration_code(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration code used for billing.
        """
        return pulumi.get(self, "configuration_code")

    @configuration_code.setter
    def configuration_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_code", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable deletion protection for ESCloud instance. Default is false.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter(name="enableHttps")
    def enable_https(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Https access is enabled.
        """
        return pulumi.get(self, "enable_https")

    @enable_https.setter
    def enable_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_https", value)

    @property
    @pulumi.getter(name="enablePureMaster")
    def enable_pure_master(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Master node is independent.
        """
        return pulumi.get(self, "enable_pure_master")

    @enable_pure_master.setter
    def enable_pure_master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_pure_master", value)

    @property
    @pulumi.getter(name="esEip")
    def es_eip(self) -> Optional[pulumi.Input[str]]:
        """
        The eip address of instance.
        """
        return pulumi.get(self, "es_eip")

    @es_eip.setter
    def es_eip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "es_eip", value)

    @property
    @pulumi.getter(name="esEipId")
    def es_eip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The eip id associated with the instance.
        """
        return pulumi.get(self, "es_eip_id")

    @es_eip_id.setter
    def es_eip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "es_eip_id", value)

    @property
    @pulumi.getter(name="esPrivateDomain")
    def es_private_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The es private domain of instance.
        """
        return pulumi.get(self, "es_private_domain")

    @es_private_domain.setter
    def es_private_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "es_private_domain", value)

    @property
    @pulumi.getter(name="esPrivateEndpoint")
    def es_private_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The es private endpoint of instance.
        """
        return pulumi.get(self, "es_private_endpoint")

    @es_private_endpoint.setter
    def es_private_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "es_private_endpoint", value)

    @property
    @pulumi.getter(name="esPrivateIpWhitelist")
    def es_private_ip_whitelist(self) -> Optional[pulumi.Input[str]]:
        """
        The whitelist of es private ip.
        """
        return pulumi.get(self, "es_private_ip_whitelist")

    @es_private_ip_whitelist.setter
    def es_private_ip_whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "es_private_ip_whitelist", value)

    @property
    @pulumi.getter(name="esPublicDomain")
    def es_public_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The es public domain of instance.
        """
        return pulumi.get(self, "es_public_domain")

    @es_public_domain.setter
    def es_public_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "es_public_domain", value)

    @property
    @pulumi.getter(name="esPublicEndpoint")
    def es_public_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The es public endpoint of instance.
        """
        return pulumi.get(self, "es_public_endpoint")

    @es_public_endpoint.setter
    def es_public_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "es_public_endpoint", value)

    @property
    @pulumi.getter(name="esPublicIpWhitelist")
    def es_public_ip_whitelist(self) -> Optional[pulumi.Input[str]]:
        """
        The whitelist of es public ip.
        """
        return pulumi.get(self, "es_public_ip_whitelist")

    @es_public_ip_whitelist.setter
    def es_public_ip_whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "es_public_ip_whitelist", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of ESCloud instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="kibanaEip")
    def kibana_eip(self) -> Optional[pulumi.Input[str]]:
        """
        The eip address of kibana.
        """
        return pulumi.get(self, "kibana_eip")

    @kibana_eip.setter
    def kibana_eip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_eip", value)

    @property
    @pulumi.getter(name="kibanaEipId")
    def kibana_eip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The eip id associated with kibana.
        """
        return pulumi.get(self, "kibana_eip_id")

    @kibana_eip_id.setter
    def kibana_eip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_eip_id", value)

    @property
    @pulumi.getter(name="kibanaPrivateDomain")
    def kibana_private_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The kibana private domain of instance.
        """
        return pulumi.get(self, "kibana_private_domain")

    @kibana_private_domain.setter
    def kibana_private_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_private_domain", value)

    @property
    @pulumi.getter(name="kibanaPrivateIpWhitelist")
    def kibana_private_ip_whitelist(self) -> Optional[pulumi.Input[str]]:
        """
        The whitelist of kibana private ip.
        """
        return pulumi.get(self, "kibana_private_ip_whitelist")

    @kibana_private_ip_whitelist.setter
    def kibana_private_ip_whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_private_ip_whitelist", value)

    @property
    @pulumi.getter(name="kibanaPublicDomain")
    def kibana_public_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The kibana public domain of instance.
        """
        return pulumi.get(self, "kibana_public_domain")

    @kibana_public_domain.setter
    def kibana_public_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_public_domain", value)

    @property
    @pulumi.getter(name="kibanaPublicIpWhitelist")
    def kibana_public_ip_whitelist(self) -> Optional[pulumi.Input[str]]:
        """
        The whitelist of kibana public ip.
        """
        return pulumi.get(self, "kibana_public_ip_whitelist")

    @kibana_public_ip_whitelist.setter
    def kibana_public_ip_whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_public_ip_whitelist", value)

    @property
    @pulumi.getter(name="mainZoneId")
    def main_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The main zone id of instance.
        """
        return pulumi.get(self, "main_zone_id")

    @main_zone_id.setter
    def main_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "main_zone_id", value)

    @property
    @pulumi.getter(name="maintenanceDays")
    def maintenance_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The maintainable day for the instance. Valid values: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`. Works only on modified scenes.
        """
        return pulumi.get(self, "maintenance_days")

    @maintenance_days.setter
    def maintenance_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "maintenance_days", value)

    @property
    @pulumi.getter(name="maintenanceTime")
    def maintenance_time(self) -> Optional[pulumi.Input[str]]:
        """
        The maintainable time period for the instance. Works only on modified scenes.
        """
        return pulumi.get(self, "maintenance_time")

    @maintenance_time.setter
    def maintenance_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_time", value)

    @property
    @pulumi.getter(name="networkSpecs")
    def network_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NetworkSpecArgs']]]]:
        """
        The public network config of the ESCloud instance.
        """
        return pulumi.get(self, "network_specs")

    @network_specs.setter
    def network_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NetworkSpecArgs']]]]):
        pulumi.set(self, "network_specs", value)

    @property
    @pulumi.getter(name="nodeSpecsAssigns")
    def node_specs_assigns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NodeSpecsAssignArgs']]]]:
        """
        The number and configuration of various ESCloud instance node. Kibana NodeSpecsAssign should not be modified.
        """
        return pulumi.get(self, "node_specs_assigns")

    @node_specs_assigns.setter
    def node_specs_assigns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2NodeSpecsAssignArgs']]]]):
        pulumi.set(self, "node_specs_assigns", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase duration in prepaid scenarios. Unit: Monthly.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name to which the ESCloud instance belongs.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of instance.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of subnet, the subnet must belong to the AZ selected.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2TagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EscloudInstanceV2TagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of instance. When creating ESCloud instance, the valid value is `V6_7` or `V7_10`. When creating OpenSearch instance, the valid value is `OPEN_SEARCH_2_9`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The zone id of the ESCloud instance. Support specifying multiple availability zones.
        The first zone id is the primary availability zone, while the rest are backup availability zones.
        """
        return pulumi.get(self, "zone_ids")

    @zone_ids.setter
    def zone_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zone_ids", value)


class EscloudInstanceV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 configuration_code: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 enable_https: Optional[pulumi.Input[bool]] = None,
                 enable_pure_master: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 maintenance_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 maintenance_time: Optional[pulumi.Input[str]] = None,
                 network_specs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2NetworkSpecArgs']]]]] = None,
                 node_specs_assigns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2NodeSpecsAssignArgs']]]]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2TagArgs']]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            description="tfdesc",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_escloud_instance_v2 = volcengine.escloud_v2.EscloudInstanceV2("fooEscloudInstanceV2",
            instance_name="acc-test-escloud-instance",
            version="V7_10",
            zone_ids=[
                foo_zones.zones[0].id,
                foo_zones.zones[1].id,
                foo_zones.zones[2].id,
            ],
            subnet_id=foo_subnet.id,
            enable_https=False,
            admin_password="Password@@123",
            charge_type="PostPaid",
            auto_renew=False,
            period=1,
            configuration_code="es.standard",
            enable_pure_master=True,
            deletion_protection=False,
            project_name="default",
            node_specs_assigns=[
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Master",
                    number=3,
                    resource_spec_name="es.x2.medium",
                    storage_spec_name="es.volume.essd.pl0",
                    storage_size=20,
                ),
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Hot",
                    number=6,
                    resource_spec_name="es.x2.medium",
                    storage_spec_name="es.volume.essd.flexpl-standard",
                    storage_size=500,
                    extra_performance=volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs(
                        throughput=65,
                    ),
                ),
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Kibana",
                    number=1,
                    resource_spec_name="kibana.x2.small",
                    storage_spec_name="",
                    storage_size=0,
                ),
            ],
            network_specs=[
                volcengine.escloud_v2.EscloudInstanceV2NetworkSpecArgs(
                    type="Elasticsearch",
                    bandwidth=1,
                    is_open=True,
                    spec_name="es.eip.bgp_fixed_bandwidth",
                ),
                volcengine.escloud_v2.EscloudInstanceV2NetworkSpecArgs(
                    type="Kibana",
                    bandwidth=1,
                    is_open=True,
                    spec_name="es.eip.bgp_fixed_bandwidth",
                ),
            ],
            tags=[volcengine.escloud_v2.EscloudInstanceV2TagArgs(
                key="k1",
                value="v1",
            )])
        #  maintenance_time = "02:00-08:00"
        #  maintenance_day = ["FRIDAY", "MONDAY"]
        ```

        ## Import

        EscloudInstanceV2 can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:escloud_v2/escloudInstanceV2:EscloudInstanceV2 default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_password: The password of administrator account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[bool] auto_renew: Whether to automatically renew in prepaid scenarios. Default is false.
        :param pulumi.Input[str] charge_type: The charge type of ESCloud instance, valid values: `PostPaid`, `PrePaid`.
        :param pulumi.Input[str] configuration_code: Configuration code used for billing.
        :param pulumi.Input[bool] deletion_protection: Whether enable deletion protection for ESCloud instance. Default is false.
        :param pulumi.Input[bool] enable_https: Whether Https access is enabled.
        :param pulumi.Input[bool] enable_pure_master: Whether the Master node is independent.
        :param pulumi.Input[str] instance_name: The name of ESCloud instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] maintenance_days: The maintainable day for the instance. Valid values: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`. Works only on modified scenes.
        :param pulumi.Input[str] maintenance_time: The maintainable time period for the instance. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2NetworkSpecArgs']]]] network_specs: The public network config of the ESCloud instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2NodeSpecsAssignArgs']]]] node_specs_assigns: The number and configuration of various ESCloud instance node. Kibana NodeSpecsAssign should not be modified.
        :param pulumi.Input[int] period: Purchase duration in prepaid scenarios. Unit: Monthly.
        :param pulumi.Input[str] project_name: The project name to which the ESCloud instance belongs.
        :param pulumi.Input[str] subnet_id: The id of subnet, the subnet must belong to the AZ selected.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2TagArgs']]]] tags: Tags.
        :param pulumi.Input[str] version: The version of instance. When creating ESCloud instance, the valid value is `V6_7` or `V7_10`. When creating OpenSearch instance, the valid value is `OPEN_SEARCH_2_9`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the ESCloud instance. Support specifying multiple availability zones.
               The first zone id is the primary availability zone, while the rest are backup availability zones.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EscloudInstanceV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            description="tfdesc",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_escloud_instance_v2 = volcengine.escloud_v2.EscloudInstanceV2("fooEscloudInstanceV2",
            instance_name="acc-test-escloud-instance",
            version="V7_10",
            zone_ids=[
                foo_zones.zones[0].id,
                foo_zones.zones[1].id,
                foo_zones.zones[2].id,
            ],
            subnet_id=foo_subnet.id,
            enable_https=False,
            admin_password="Password@@123",
            charge_type="PostPaid",
            auto_renew=False,
            period=1,
            configuration_code="es.standard",
            enable_pure_master=True,
            deletion_protection=False,
            project_name="default",
            node_specs_assigns=[
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Master",
                    number=3,
                    resource_spec_name="es.x2.medium",
                    storage_spec_name="es.volume.essd.pl0",
                    storage_size=20,
                ),
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Hot",
                    number=6,
                    resource_spec_name="es.x2.medium",
                    storage_spec_name="es.volume.essd.flexpl-standard",
                    storage_size=500,
                    extra_performance=volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs(
                        throughput=65,
                    ),
                ),
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Kibana",
                    number=1,
                    resource_spec_name="kibana.x2.small",
                    storage_spec_name="",
                    storage_size=0,
                ),
            ],
            network_specs=[
                volcengine.escloud_v2.EscloudInstanceV2NetworkSpecArgs(
                    type="Elasticsearch",
                    bandwidth=1,
                    is_open=True,
                    spec_name="es.eip.bgp_fixed_bandwidth",
                ),
                volcengine.escloud_v2.EscloudInstanceV2NetworkSpecArgs(
                    type="Kibana",
                    bandwidth=1,
                    is_open=True,
                    spec_name="es.eip.bgp_fixed_bandwidth",
                ),
            ],
            tags=[volcengine.escloud_v2.EscloudInstanceV2TagArgs(
                key="k1",
                value="v1",
            )])
        #  maintenance_time = "02:00-08:00"
        #  maintenance_day = ["FRIDAY", "MONDAY"]
        ```

        ## Import

        EscloudInstanceV2 can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:escloud_v2/escloudInstanceV2:EscloudInstanceV2 default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param EscloudInstanceV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EscloudInstanceV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 configuration_code: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 enable_https: Optional[pulumi.Input[bool]] = None,
                 enable_pure_master: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 maintenance_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 maintenance_time: Optional[pulumi.Input[str]] = None,
                 network_specs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2NetworkSpecArgs']]]]] = None,
                 node_specs_assigns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2NodeSpecsAssignArgs']]]]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2TagArgs']]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EscloudInstanceV2Args.__new__(EscloudInstanceV2Args)

            if admin_password is None and not opts.urn:
                raise TypeError("Missing required property 'admin_password'")
            __props__.__dict__["admin_password"] = None if admin_password is None else pulumi.Output.secret(admin_password)
            __props__.__dict__["auto_renew"] = auto_renew
            if charge_type is None and not opts.urn:
                raise TypeError("Missing required property 'charge_type'")
            __props__.__dict__["charge_type"] = charge_type
            if configuration_code is None and not opts.urn:
                raise TypeError("Missing required property 'configuration_code'")
            __props__.__dict__["configuration_code"] = configuration_code
            __props__.__dict__["deletion_protection"] = deletion_protection
            if enable_https is None and not opts.urn:
                raise TypeError("Missing required property 'enable_https'")
            __props__.__dict__["enable_https"] = enable_https
            __props__.__dict__["enable_pure_master"] = enable_pure_master
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["maintenance_days"] = maintenance_days
            __props__.__dict__["maintenance_time"] = maintenance_time
            __props__.__dict__["network_specs"] = network_specs
            if node_specs_assigns is None and not opts.urn:
                raise TypeError("Missing required property 'node_specs_assigns'")
            __props__.__dict__["node_specs_assigns"] = node_specs_assigns
            __props__.__dict__["period"] = period
            __props__.__dict__["project_name"] = project_name
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            if zone_ids is None and not opts.urn:
                raise TypeError("Missing required property 'zone_ids'")
            __props__.__dict__["zone_ids"] = zone_ids
            __props__.__dict__["cerebro_private_domain"] = None
            __props__.__dict__["cerebro_public_domain"] = None
            __props__.__dict__["es_eip"] = None
            __props__.__dict__["es_eip_id"] = None
            __props__.__dict__["es_private_domain"] = None
            __props__.__dict__["es_private_endpoint"] = None
            __props__.__dict__["es_private_ip_whitelist"] = None
            __props__.__dict__["es_public_domain"] = None
            __props__.__dict__["es_public_endpoint"] = None
            __props__.__dict__["es_public_ip_whitelist"] = None
            __props__.__dict__["kibana_eip"] = None
            __props__.__dict__["kibana_eip_id"] = None
            __props__.__dict__["kibana_private_domain"] = None
            __props__.__dict__["kibana_private_ip_whitelist"] = None
            __props__.__dict__["kibana_public_domain"] = None
            __props__.__dict__["kibana_public_ip_whitelist"] = None
            __props__.__dict__["main_zone_id"] = None
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["adminPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(EscloudInstanceV2, __self__).__init__(
            'volcengine:escloud_v2/escloudInstanceV2:EscloudInstanceV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_password: Optional[pulumi.Input[str]] = None,
            auto_renew: Optional[pulumi.Input[bool]] = None,
            cerebro_private_domain: Optional[pulumi.Input[str]] = None,
            cerebro_public_domain: Optional[pulumi.Input[str]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            configuration_code: Optional[pulumi.Input[str]] = None,
            deletion_protection: Optional[pulumi.Input[bool]] = None,
            enable_https: Optional[pulumi.Input[bool]] = None,
            enable_pure_master: Optional[pulumi.Input[bool]] = None,
            es_eip: Optional[pulumi.Input[str]] = None,
            es_eip_id: Optional[pulumi.Input[str]] = None,
            es_private_domain: Optional[pulumi.Input[str]] = None,
            es_private_endpoint: Optional[pulumi.Input[str]] = None,
            es_private_ip_whitelist: Optional[pulumi.Input[str]] = None,
            es_public_domain: Optional[pulumi.Input[str]] = None,
            es_public_endpoint: Optional[pulumi.Input[str]] = None,
            es_public_ip_whitelist: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            kibana_eip: Optional[pulumi.Input[str]] = None,
            kibana_eip_id: Optional[pulumi.Input[str]] = None,
            kibana_private_domain: Optional[pulumi.Input[str]] = None,
            kibana_private_ip_whitelist: Optional[pulumi.Input[str]] = None,
            kibana_public_domain: Optional[pulumi.Input[str]] = None,
            kibana_public_ip_whitelist: Optional[pulumi.Input[str]] = None,
            main_zone_id: Optional[pulumi.Input[str]] = None,
            maintenance_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            maintenance_time: Optional[pulumi.Input[str]] = None,
            network_specs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2NetworkSpecArgs']]]]] = None,
            node_specs_assigns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2NodeSpecsAssignArgs']]]]] = None,
            period: Optional[pulumi.Input[int]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2TagArgs']]]]] = None,
            version: Optional[pulumi.Input[str]] = None,
            zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'EscloudInstanceV2':
        """
        Get an existing EscloudInstanceV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_password: The password of administrator account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[bool] auto_renew: Whether to automatically renew in prepaid scenarios. Default is false.
        :param pulumi.Input[str] cerebro_private_domain: The cerebro private domain of instance.
        :param pulumi.Input[str] cerebro_public_domain: The cerebro public domain of instance.
        :param pulumi.Input[str] charge_type: The charge type of ESCloud instance, valid values: `PostPaid`, `PrePaid`.
        :param pulumi.Input[str] configuration_code: Configuration code used for billing.
        :param pulumi.Input[bool] deletion_protection: Whether enable deletion protection for ESCloud instance. Default is false.
        :param pulumi.Input[bool] enable_https: Whether Https access is enabled.
        :param pulumi.Input[bool] enable_pure_master: Whether the Master node is independent.
        :param pulumi.Input[str] es_eip: The eip address of instance.
        :param pulumi.Input[str] es_eip_id: The eip id associated with the instance.
        :param pulumi.Input[str] es_private_domain: The es private domain of instance.
        :param pulumi.Input[str] es_private_endpoint: The es private endpoint of instance.
        :param pulumi.Input[str] es_private_ip_whitelist: The whitelist of es private ip.
        :param pulumi.Input[str] es_public_domain: The es public domain of instance.
        :param pulumi.Input[str] es_public_endpoint: The es public endpoint of instance.
        :param pulumi.Input[str] es_public_ip_whitelist: The whitelist of es public ip.
        :param pulumi.Input[str] instance_name: The name of ESCloud instance.
        :param pulumi.Input[str] kibana_eip: The eip address of kibana.
        :param pulumi.Input[str] kibana_eip_id: The eip id associated with kibana.
        :param pulumi.Input[str] kibana_private_domain: The kibana private domain of instance.
        :param pulumi.Input[str] kibana_private_ip_whitelist: The whitelist of kibana private ip.
        :param pulumi.Input[str] kibana_public_domain: The kibana public domain of instance.
        :param pulumi.Input[str] kibana_public_ip_whitelist: The whitelist of kibana public ip.
        :param pulumi.Input[str] main_zone_id: The main zone id of instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] maintenance_days: The maintainable day for the instance. Valid values: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`. Works only on modified scenes.
        :param pulumi.Input[str] maintenance_time: The maintainable time period for the instance. Works only on modified scenes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2NetworkSpecArgs']]]] network_specs: The public network config of the ESCloud instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2NodeSpecsAssignArgs']]]] node_specs_assigns: The number and configuration of various ESCloud instance node. Kibana NodeSpecsAssign should not be modified.
        :param pulumi.Input[int] period: Purchase duration in prepaid scenarios. Unit: Monthly.
        :param pulumi.Input[str] project_name: The project name to which the ESCloud instance belongs.
        :param pulumi.Input[str] status: The status of instance.
        :param pulumi.Input[str] subnet_id: The id of subnet, the subnet must belong to the AZ selected.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EscloudInstanceV2TagArgs']]]] tags: Tags.
        :param pulumi.Input[str] version: The version of instance. When creating ESCloud instance, the valid value is `V6_7` or `V7_10`. When creating OpenSearch instance, the valid value is `OPEN_SEARCH_2_9`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the ESCloud instance. Support specifying multiple availability zones.
               The first zone id is the primary availability zone, while the rest are backup availability zones.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EscloudInstanceV2State.__new__(_EscloudInstanceV2State)

        __props__.__dict__["admin_password"] = admin_password
        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["cerebro_private_domain"] = cerebro_private_domain
        __props__.__dict__["cerebro_public_domain"] = cerebro_public_domain
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["configuration_code"] = configuration_code
        __props__.__dict__["deletion_protection"] = deletion_protection
        __props__.__dict__["enable_https"] = enable_https
        __props__.__dict__["enable_pure_master"] = enable_pure_master
        __props__.__dict__["es_eip"] = es_eip
        __props__.__dict__["es_eip_id"] = es_eip_id
        __props__.__dict__["es_private_domain"] = es_private_domain
        __props__.__dict__["es_private_endpoint"] = es_private_endpoint
        __props__.__dict__["es_private_ip_whitelist"] = es_private_ip_whitelist
        __props__.__dict__["es_public_domain"] = es_public_domain
        __props__.__dict__["es_public_endpoint"] = es_public_endpoint
        __props__.__dict__["es_public_ip_whitelist"] = es_public_ip_whitelist
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["kibana_eip"] = kibana_eip
        __props__.__dict__["kibana_eip_id"] = kibana_eip_id
        __props__.__dict__["kibana_private_domain"] = kibana_private_domain
        __props__.__dict__["kibana_private_ip_whitelist"] = kibana_private_ip_whitelist
        __props__.__dict__["kibana_public_domain"] = kibana_public_domain
        __props__.__dict__["kibana_public_ip_whitelist"] = kibana_public_ip_whitelist
        __props__.__dict__["main_zone_id"] = main_zone_id
        __props__.__dict__["maintenance_days"] = maintenance_days
        __props__.__dict__["maintenance_time"] = maintenance_time
        __props__.__dict__["network_specs"] = network_specs
        __props__.__dict__["node_specs_assigns"] = node_specs_assigns
        __props__.__dict__["period"] = period
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["version"] = version
        __props__.__dict__["zone_ids"] = zone_ids
        return EscloudInstanceV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> pulumi.Output[str]:
        """
        The password of administrator account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to automatically renew in prepaid scenarios. Default is false.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="cerebroPrivateDomain")
    def cerebro_private_domain(self) -> pulumi.Output[str]:
        """
        The cerebro private domain of instance.
        """
        return pulumi.get(self, "cerebro_private_domain")

    @property
    @pulumi.getter(name="cerebroPublicDomain")
    def cerebro_public_domain(self) -> pulumi.Output[str]:
        """
        The cerebro public domain of instance.
        """
        return pulumi.get(self, "cerebro_public_domain")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[str]:
        """
        The charge type of ESCloud instance, valid values: `PostPaid`, `PrePaid`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="configurationCode")
    def configuration_code(self) -> pulumi.Output[str]:
        """
        Configuration code used for billing.
        """
        return pulumi.get(self, "configuration_code")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether enable deletion protection for ESCloud instance. Default is false.
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter(name="enableHttps")
    def enable_https(self) -> pulumi.Output[bool]:
        """
        Whether Https access is enabled.
        """
        return pulumi.get(self, "enable_https")

    @property
    @pulumi.getter(name="enablePureMaster")
    def enable_pure_master(self) -> pulumi.Output[bool]:
        """
        Whether the Master node is independent.
        """
        return pulumi.get(self, "enable_pure_master")

    @property
    @pulumi.getter(name="esEip")
    def es_eip(self) -> pulumi.Output[str]:
        """
        The eip address of instance.
        """
        return pulumi.get(self, "es_eip")

    @property
    @pulumi.getter(name="esEipId")
    def es_eip_id(self) -> pulumi.Output[str]:
        """
        The eip id associated with the instance.
        """
        return pulumi.get(self, "es_eip_id")

    @property
    @pulumi.getter(name="esPrivateDomain")
    def es_private_domain(self) -> pulumi.Output[str]:
        """
        The es private domain of instance.
        """
        return pulumi.get(self, "es_private_domain")

    @property
    @pulumi.getter(name="esPrivateEndpoint")
    def es_private_endpoint(self) -> pulumi.Output[str]:
        """
        The es private endpoint of instance.
        """
        return pulumi.get(self, "es_private_endpoint")

    @property
    @pulumi.getter(name="esPrivateIpWhitelist")
    def es_private_ip_whitelist(self) -> pulumi.Output[str]:
        """
        The whitelist of es private ip.
        """
        return pulumi.get(self, "es_private_ip_whitelist")

    @property
    @pulumi.getter(name="esPublicDomain")
    def es_public_domain(self) -> pulumi.Output[str]:
        """
        The es public domain of instance.
        """
        return pulumi.get(self, "es_public_domain")

    @property
    @pulumi.getter(name="esPublicEndpoint")
    def es_public_endpoint(self) -> pulumi.Output[str]:
        """
        The es public endpoint of instance.
        """
        return pulumi.get(self, "es_public_endpoint")

    @property
    @pulumi.getter(name="esPublicIpWhitelist")
    def es_public_ip_whitelist(self) -> pulumi.Output[str]:
        """
        The whitelist of es public ip.
        """
        return pulumi.get(self, "es_public_ip_whitelist")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        The name of ESCloud instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="kibanaEip")
    def kibana_eip(self) -> pulumi.Output[str]:
        """
        The eip address of kibana.
        """
        return pulumi.get(self, "kibana_eip")

    @property
    @pulumi.getter(name="kibanaEipId")
    def kibana_eip_id(self) -> pulumi.Output[str]:
        """
        The eip id associated with kibana.
        """
        return pulumi.get(self, "kibana_eip_id")

    @property
    @pulumi.getter(name="kibanaPrivateDomain")
    def kibana_private_domain(self) -> pulumi.Output[str]:
        """
        The kibana private domain of instance.
        """
        return pulumi.get(self, "kibana_private_domain")

    @property
    @pulumi.getter(name="kibanaPrivateIpWhitelist")
    def kibana_private_ip_whitelist(self) -> pulumi.Output[str]:
        """
        The whitelist of kibana private ip.
        """
        return pulumi.get(self, "kibana_private_ip_whitelist")

    @property
    @pulumi.getter(name="kibanaPublicDomain")
    def kibana_public_domain(self) -> pulumi.Output[str]:
        """
        The kibana public domain of instance.
        """
        return pulumi.get(self, "kibana_public_domain")

    @property
    @pulumi.getter(name="kibanaPublicIpWhitelist")
    def kibana_public_ip_whitelist(self) -> pulumi.Output[str]:
        """
        The whitelist of kibana public ip.
        """
        return pulumi.get(self, "kibana_public_ip_whitelist")

    @property
    @pulumi.getter(name="mainZoneId")
    def main_zone_id(self) -> pulumi.Output[str]:
        """
        The main zone id of instance.
        """
        return pulumi.get(self, "main_zone_id")

    @property
    @pulumi.getter(name="maintenanceDays")
    def maintenance_days(self) -> pulumi.Output[Sequence[str]]:
        """
        The maintainable day for the instance. Valid values: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`. Works only on modified scenes.
        """
        return pulumi.get(self, "maintenance_days")

    @property
    @pulumi.getter(name="maintenanceTime")
    def maintenance_time(self) -> pulumi.Output[str]:
        """
        The maintainable time period for the instance. Works only on modified scenes.
        """
        return pulumi.get(self, "maintenance_time")

    @property
    @pulumi.getter(name="networkSpecs")
    def network_specs(self) -> pulumi.Output[Optional[Sequence['outputs.EscloudInstanceV2NetworkSpec']]]:
        """
        The public network config of the ESCloud instance.
        """
        return pulumi.get(self, "network_specs")

    @property
    @pulumi.getter(name="nodeSpecsAssigns")
    def node_specs_assigns(self) -> pulumi.Output[Sequence['outputs.EscloudInstanceV2NodeSpecsAssign']]:
        """
        The number and configuration of various ESCloud instance node. Kibana NodeSpecsAssign should not be modified.
        """
        return pulumi.get(self, "node_specs_assigns")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        Purchase duration in prepaid scenarios. Unit: Monthly.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The project name to which the ESCloud instance belongs.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of instance.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The id of subnet, the subnet must belong to the AZ selected.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.EscloudInstanceV2Tag']]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version of instance. When creating ESCloud instance, the valid value is `V6_7` or `V7_10`. When creating OpenSearch instance, the valid value is `OPEN_SEARCH_2_9`.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The zone id of the ESCloud instance. Support specifying multiple availability zones.
        The first zone id is the primary availability zone, while the rest are backup availability zones.
        """
        return pulumi.get(self, "zone_ids")

