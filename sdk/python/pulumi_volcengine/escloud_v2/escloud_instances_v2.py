# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'EscloudInstancesV2Result',
    'AwaitableEscloudInstancesV2Result',
    'escloud_instances_v2',
    'escloud_instances_v2_output',
]

@pulumi.output_type
class EscloudInstancesV2Result:
    """
    A collection of values returned by EscloudInstancesV2.
    """
    def __init__(__self__, charge_types=None, id=None, ids=None, instance_names=None, instances=None, output_file=None, project_name=None, statuses=None, tags=None, total_count=None, versions=None, zone_ids=None):
        if charge_types and not isinstance(charge_types, list):
            raise TypeError("Expected argument 'charge_types' to be a list")
        pulumi.set(__self__, "charge_types", charge_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if instance_names and not isinstance(instance_names, list):
            raise TypeError("Expected argument 'instance_names' to be a list")
        pulumi.set(__self__, "instance_names", instance_names)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        pulumi.set(__self__, "versions", versions)
        if zone_ids and not isinstance(zone_ids, list):
            raise TypeError("Expected argument 'zone_ids' to be a list")
        pulumi.set(__self__, "zone_ids", zone_ids)

    @property
    @pulumi.getter(name="chargeTypes")
    def charge_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "charge_types")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="instanceNames")
    def instance_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_names")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.EscloudInstancesV2InstanceResult']:
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.EscloudInstancesV2TagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "versions")

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "zone_ids")


class AwaitableEscloudInstancesV2Result(EscloudInstancesV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return EscloudInstancesV2Result(
            charge_types=self.charge_types,
            id=self.id,
            ids=self.ids,
            instance_names=self.instance_names,
            instances=self.instances,
            output_file=self.output_file,
            project_name=self.project_name,
            statuses=self.statuses,
            tags=self.tags,
            total_count=self.total_count,
            versions=self.versions,
            zone_ids=self.zone_ids)


def escloud_instances_v2(charge_types: Optional[Sequence[str]] = None,
                         ids: Optional[Sequence[str]] = None,
                         instance_names: Optional[Sequence[str]] = None,
                         output_file: Optional[str] = None,
                         project_name: Optional[str] = None,
                         statuses: Optional[Sequence[str]] = None,
                         tags: Optional[Sequence[pulumi.InputType['EscloudInstancesV2TagArgs']]] = None,
                         versions: Optional[Sequence[str]] = None,
                         zone_ids: Optional[Sequence[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableEscloudInstancesV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['chargeTypes'] = charge_types
    __args__['ids'] = ids
    __args__['instanceNames'] = instance_names
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['statuses'] = statuses
    __args__['tags'] = tags
    __args__['versions'] = versions
    __args__['zoneIds'] = zone_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:escloud_v2/escloudInstancesV2:EscloudInstancesV2', __args__, opts=opts, typ=EscloudInstancesV2Result).value

    return AwaitableEscloudInstancesV2Result(
        charge_types=pulumi.get(__ret__, 'charge_types'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        instance_names=pulumi.get(__ret__, 'instance_names'),
        instances=pulumi.get(__ret__, 'instances'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        statuses=pulumi.get(__ret__, 'statuses'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        versions=pulumi.get(__ret__, 'versions'),
        zone_ids=pulumi.get(__ret__, 'zone_ids'))


@_utilities.lift_output_func(escloud_instances_v2)
def escloud_instances_v2_output(charge_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                instance_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                project_name: Optional[pulumi.Input[Optional[str]]] = None,
                                statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['EscloudInstancesV2TagArgs']]]]] = None,
                                versions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                zone_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[EscloudInstancesV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
