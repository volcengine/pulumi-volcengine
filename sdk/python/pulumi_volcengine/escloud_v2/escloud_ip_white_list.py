# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EscloudIpWhiteListArgs', 'EscloudIpWhiteList']

@pulumi.input_type
class EscloudIpWhiteListArgs:
    def __init__(__self__, *,
                 component: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 ip_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input[str]):
        """
        The set of arguments for constructing a EscloudIpWhiteList resource.
        :param pulumi.Input[str] component: The component of the ip white list. Valid values: `es`, `kibana`.
        :param pulumi.Input[str] instance_id: The id of the EsCloud instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: The ip list of the ip white list.
        :param pulumi.Input[str] type: The type of the ip white list. Valid values: `private`, `public`.
        """
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_lists", ip_lists)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def component(self) -> pulumi.Input[str]:
        """
        The component of the ip white list. Valid values: `es`, `kibana`.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: pulumi.Input[str]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of the EsCloud instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The ip list of the ip white list.
        """
        return pulumi.get(self, "ip_lists")

    @ip_lists.setter
    def ip_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ip_lists", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the ip white list. Valid values: `private`, `public`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _EscloudIpWhiteListState:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EscloudIpWhiteList resources.
        :param pulumi.Input[str] component: The component of the ip white list. Valid values: `es`, `kibana`.
        :param pulumi.Input[str] instance_id: The id of the EsCloud instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: The ip list of the ip white list.
        :param pulumi.Input[str] type: The type of the ip white list. Valid values: `private`, `public`.
        """
        if component is not None:
            pulumi.set(__self__, "component", component)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_lists is not None:
            pulumi.set(__self__, "ip_lists", ip_lists)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        """
        The component of the ip white list. Valid values: `es`, `kibana`.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the EsCloud instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ip list of the ip white list.
        """
        return pulumi.get(self, "ip_lists")

    @ip_lists.setter
    def ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_lists", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the ip white list. Valid values: `private`, `public`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class EscloudIpWhiteList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 component: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage escloud ip white list
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            description="tfdesc",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_escloud_instance_v2 = volcengine.escloud_v2.EscloudInstanceV2("fooEscloudInstanceV2",
            instance_name="acc-test-escloud-instance",
            version="V7_10",
            zone_ids=[
                foo_zones.zones[0].id,
                foo_zones.zones[1].id,
                foo_zones.zones[2].id,
            ],
            subnet_id=foo_subnet.id,
            enable_https=False,
            admin_password="Password@@123",
            charge_type="PostPaid",
            auto_renew=False,
            period=1,
            configuration_code="es.standard",
            enable_pure_master=True,
            deletion_protection=False,
            project_name="default",
            node_specs_assigns=[
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Master",
                    number=3,
                    resource_spec_name="es.x2.medium",
                    storage_spec_name="es.volume.essd.pl0",
                    storage_size=20,
                ),
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Hot",
                    number=6,
                    resource_spec_name="es.x2.medium",
                    storage_spec_name="es.volume.essd.flexpl-standard",
                    storage_size=500,
                    extra_performance=volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs(
                        throughput=65,
                    ),
                ),
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Kibana",
                    number=1,
                    resource_spec_name="kibana.x2.small",
                    storage_spec_name="",
                    storage_size=0,
                ),
            ],
            network_specs=[
                volcengine.escloud_v2.EscloudInstanceV2NetworkSpecArgs(
                    type="Elasticsearch",
                    bandwidth=1,
                    is_open=True,
                    spec_name="es.eip.bgp_fixed_bandwidth",
                ),
                volcengine.escloud_v2.EscloudInstanceV2NetworkSpecArgs(
                    type="Kibana",
                    bandwidth=1,
                    is_open=True,
                    spec_name="es.eip.bgp_fixed_bandwidth",
                ),
            ],
            tags=[volcengine.escloud_v2.EscloudInstanceV2TagArgs(
                key="k1",
                value="v1",
            )])
        foo_escloud_ip_white_list = volcengine.escloud_v2.EscloudIpWhiteList("fooEscloudIpWhiteList",
            instance_id=foo_escloud_instance_v2.id,
            type="public",
            component="es",
            ip_lists=[
                "172.16.0.10",
                "172.16.0.11",
                "172.16.0.12",
            ])
        ```

        ## Import

        EscloudIpWhiteList can be imported using the instance_id:type:component, e.g.

        ```sh
        $ pulumi import volcengine:escloud_v2/escloudIpWhiteList:EscloudIpWhiteList default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] component: The component of the ip white list. Valid values: `es`, `kibana`.
        :param pulumi.Input[str] instance_id: The id of the EsCloud instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: The ip list of the ip white list.
        :param pulumi.Input[str] type: The type of the ip white list. Valid values: `private`, `public`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EscloudIpWhiteListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage escloud ip white list
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            description="tfdesc",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_escloud_instance_v2 = volcengine.escloud_v2.EscloudInstanceV2("fooEscloudInstanceV2",
            instance_name="acc-test-escloud-instance",
            version="V7_10",
            zone_ids=[
                foo_zones.zones[0].id,
                foo_zones.zones[1].id,
                foo_zones.zones[2].id,
            ],
            subnet_id=foo_subnet.id,
            enable_https=False,
            admin_password="Password@@123",
            charge_type="PostPaid",
            auto_renew=False,
            period=1,
            configuration_code="es.standard",
            enable_pure_master=True,
            deletion_protection=False,
            project_name="default",
            node_specs_assigns=[
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Master",
                    number=3,
                    resource_spec_name="es.x2.medium",
                    storage_spec_name="es.volume.essd.pl0",
                    storage_size=20,
                ),
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Hot",
                    number=6,
                    resource_spec_name="es.x2.medium",
                    storage_spec_name="es.volume.essd.flexpl-standard",
                    storage_size=500,
                    extra_performance=volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs(
                        throughput=65,
                    ),
                ),
                volcengine.escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs(
                    type="Kibana",
                    number=1,
                    resource_spec_name="kibana.x2.small",
                    storage_spec_name="",
                    storage_size=0,
                ),
            ],
            network_specs=[
                volcengine.escloud_v2.EscloudInstanceV2NetworkSpecArgs(
                    type="Elasticsearch",
                    bandwidth=1,
                    is_open=True,
                    spec_name="es.eip.bgp_fixed_bandwidth",
                ),
                volcengine.escloud_v2.EscloudInstanceV2NetworkSpecArgs(
                    type="Kibana",
                    bandwidth=1,
                    is_open=True,
                    spec_name="es.eip.bgp_fixed_bandwidth",
                ),
            ],
            tags=[volcengine.escloud_v2.EscloudInstanceV2TagArgs(
                key="k1",
                value="v1",
            )])
        foo_escloud_ip_white_list = volcengine.escloud_v2.EscloudIpWhiteList("fooEscloudIpWhiteList",
            instance_id=foo_escloud_instance_v2.id,
            type="public",
            component="es",
            ip_lists=[
                "172.16.0.10",
                "172.16.0.11",
                "172.16.0.12",
            ])
        ```

        ## Import

        EscloudIpWhiteList can be imported using the instance_id:type:component, e.g.

        ```sh
        $ pulumi import volcengine:escloud_v2/escloudIpWhiteList:EscloudIpWhiteList default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param EscloudIpWhiteListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EscloudIpWhiteListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 component: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EscloudIpWhiteListArgs.__new__(EscloudIpWhiteListArgs)

            if component is None and not opts.urn:
                raise TypeError("Missing required property 'component'")
            __props__.__dict__["component"] = component
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if ip_lists is None and not opts.urn:
                raise TypeError("Missing required property 'ip_lists'")
            __props__.__dict__["ip_lists"] = ip_lists
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(EscloudIpWhiteList, __self__).__init__(
            'volcengine:escloud_v2/escloudIpWhiteList:EscloudIpWhiteList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            component: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'EscloudIpWhiteList':
        """
        Get an existing EscloudIpWhiteList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] component: The component of the ip white list. Valid values: `es`, `kibana`.
        :param pulumi.Input[str] instance_id: The id of the EsCloud instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_lists: The ip list of the ip white list.
        :param pulumi.Input[str] type: The type of the ip white list. Valid values: `private`, `public`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EscloudIpWhiteListState.__new__(_EscloudIpWhiteListState)

        __props__.__dict__["component"] = component
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["ip_lists"] = ip_lists
        __props__.__dict__["type"] = type
        return EscloudIpWhiteList(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def component(self) -> pulumi.Output[str]:
        """
        The component of the ip white list. Valid values: `es`, `kibana`.
        """
        return pulumi.get(self, "component")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of the EsCloud instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        The ip list of the ip white list.
        """
        return pulumi.get(self, "ip_lists")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the ip white list. Valid values: `private`, `public`.
        """
        return pulumi.get(self, "type")

