# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'EscloudInstanceV2NetworkSpec',
    'EscloudInstanceV2NodeSpecsAssign',
    'EscloudInstanceV2NodeSpecsAssignExtraPerformance',
    'EscloudInstanceV2Tag',
    'EscloudInstancesV2InstanceResult',
    'EscloudInstancesV2InstanceInstanceConfigurationResult',
    'EscloudInstancesV2InstanceInstanceConfigurationColdNodeResourceSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationColdNodeStorageSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationCoordinatorNodeResourceSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationCoordinatorNodeStorageSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationHotNodeResourceSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationHotNodeStorageSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationKibanaNodeResourceSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationKibanaNodeStorageSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationMasterNodeResourceSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationMasterNodeStorageSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationSubnetResult',
    'EscloudInstancesV2InstanceInstanceConfigurationVpcResult',
    'EscloudInstancesV2InstanceInstanceConfigurationWarmNodeResourceSpecResult',
    'EscloudInstancesV2InstanceInstanceConfigurationWarmNodeStorageSpecResult',
    'EscloudInstancesV2InstanceNodeResult',
    'EscloudInstancesV2InstanceNodeResourceSpecResult',
    'EscloudInstancesV2InstanceNodeStorageSpecResult',
    'EscloudInstancesV2InstancePluginResult',
    'EscloudInstancesV2InstanceTagResult',
    'EscloudInstancesV2TagResult',
]

@pulumi.output_type
class EscloudInstanceV2NetworkSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isOpen":
            suggest = "is_open"
        elif key == "specName":
            suggest = "spec_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EscloudInstanceV2NetworkSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EscloudInstanceV2NetworkSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EscloudInstanceV2NetworkSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth: int,
                 is_open: bool,
                 spec_name: str,
                 type: str):
        """
        :param int bandwidth: The bandwidth of the eip. Unit: Mbps.
        :param bool is_open: Whether the eip is opened.
        :param str spec_name: The spec name of public network.
        :param str type: The type of public network, valid values: `Elasticsearch`, `Kibana`.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "spec_name", spec_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The bandwidth of the eip. Unit: Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> bool:
        """
        Whether the eip is opened.
        """
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        """
        The spec name of public network.
        """
        return pulumi.get(self, "spec_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of public network, valid values: `Elasticsearch`, `Kibana`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EscloudInstanceV2NodeSpecsAssign(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceSpecName":
            suggest = "resource_spec_name"
        elif key == "storageSize":
            suggest = "storage_size"
        elif key == "storageSpecName":
            suggest = "storage_spec_name"
        elif key == "extraPerformance":
            suggest = "extra_performance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EscloudInstanceV2NodeSpecsAssign. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EscloudInstanceV2NodeSpecsAssign.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EscloudInstanceV2NodeSpecsAssign.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number: int,
                 resource_spec_name: str,
                 storage_size: int,
                 storage_spec_name: str,
                 type: str,
                 extra_performance: Optional['outputs.EscloudInstanceV2NodeSpecsAssignExtraPerformance'] = None):
        """
        :param int number: The number of node.
        :param str resource_spec_name: The name of compute resource spec.
        :param int storage_size: The size of storage. Unit: GiB. the adjustment step size is 10GiB. Default is 100 GiB. Kibana NodeSpecsAssign should specify this field to 0.
        :param str storage_spec_name: The name of storage spec. Kibana NodeSpecsAssign should specify this field to ``.
        :param str type: The type of node, valid values: `Master`, `Hot`, `Cold`, `Warm`, `Kibana`, `Coordinator`.
        :param 'EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs' extra_performance: The extra performance of FlexPL storage spec.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "resource_spec_name", resource_spec_name)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "storage_spec_name", storage_spec_name)
        pulumi.set(__self__, "type", type)
        if extra_performance is not None:
            pulumi.set(__self__, "extra_performance", extra_performance)

    @property
    @pulumi.getter
    def number(self) -> int:
        """
        The number of node.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter(name="resourceSpecName")
    def resource_spec_name(self) -> str:
        """
        The name of compute resource spec.
        """
        return pulumi.get(self, "resource_spec_name")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> int:
        """
        The size of storage. Unit: GiB. the adjustment step size is 10GiB. Default is 100 GiB. Kibana NodeSpecsAssign should specify this field to 0.
        """
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="storageSpecName")
    def storage_spec_name(self) -> str:
        """
        The name of storage spec. Kibana NodeSpecsAssign should specify this field to ``.
        """
        return pulumi.get(self, "storage_spec_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of node, valid values: `Master`, `Hot`, `Cold`, `Warm`, `Kibana`, `Coordinator`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="extraPerformance")
    def extra_performance(self) -> Optional['outputs.EscloudInstanceV2NodeSpecsAssignExtraPerformance']:
        """
        The extra performance of FlexPL storage spec.
        """
        return pulumi.get(self, "extra_performance")


@pulumi.output_type
class EscloudInstanceV2NodeSpecsAssignExtraPerformance(dict):
    def __init__(__self__, *,
                 throughput: int):
        """
        :param int throughput: When your data node chooses to use FlexPL storage type and the storage specification configuration is 500GiB or above, it supports purchasing bandwidth packages to increase disk bandwidth.
               The unit is MiB, and the adjustment step size is 10MiB.
        """
        pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def throughput(self) -> int:
        """
        When your data node chooses to use FlexPL storage type and the storage specification configuration is 500GiB or above, it supports purchasing bandwidth packages to increase disk bandwidth.
        The unit is MiB, and the adjustment step size is 10MiB.
        """
        return pulumi.get(self, "throughput")


@pulumi.output_type
class EscloudInstanceV2Tag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EscloudInstancesV2InstanceResult(dict):
    def __init__(__self__, *,
                 cerebro_enabled: bool,
                 cerebro_private_domain: str,
                 cerebro_public_domain: str,
                 charge_enabled: bool,
                 cluster_id: str,
                 create_time: str,
                 deletion_protection: bool,
                 enable_es_private_domain_public: bool,
                 enable_es_private_network: bool,
                 enable_es_public_network: bool,
                 enable_kibana_private_domain_public: bool,
                 enable_kibana_private_network: bool,
                 enable_kibana_public_network: bool,
                 es_eip: str,
                 es_eip_id: str,
                 es_inner_endpoint: str,
                 es_private_domain: str,
                 es_private_endpoint: str,
                 es_private_ip_whitelist: str,
                 es_public_domain: str,
                 es_public_endpoint: str,
                 es_public_ip_whitelist: str,
                 expire_date: str,
                 id: str,
                 instance_configurations: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationResult'],
                 instance_id: str,
                 kibana_eip: str,
                 kibana_eip_id: str,
                 kibana_private_domain: str,
                 kibana_private_ip_whitelist: str,
                 kibana_public_domain: str,
                 kibana_public_ip_whitelist: str,
                 main_zone_id: str,
                 maintenance_days: Sequence[str],
                 maintenance_time: str,
                 nodes: Sequence['outputs.EscloudInstancesV2InstanceNodeResult'],
                 plugins: Sequence['outputs.EscloudInstancesV2InstancePluginResult'],
                 status: str,
                 support_code_node: bool,
                 tags: Sequence['outputs.EscloudInstancesV2InstanceTagResult'],
                 total_nodes: int,
                 user_id: str):
        """
        :param bool cerebro_enabled: Whether to enable cerebro.
        :param str cerebro_private_domain: The cerebro private domain of instance.
        :param str cerebro_public_domain: The cerebro public domain of instance.
        :param bool charge_enabled: The charge status of instance.
        :param str cluster_id: The cluster id of instance.
        :param str create_time: The create time of instance.
        :param bool deletion_protection: Whether enable deletion protection for ESCloud instance.
        :param bool enable_es_private_domain_public: whether enable es private domain public.
        :param bool enable_es_private_network: whether enable es private network.
        :param bool enable_es_public_network: whether enable es public network.
        :param bool enable_kibana_private_domain_public: whether enable kibana private domain public.
        :param bool enable_kibana_private_network: whether enable kibana private network.
        :param bool enable_kibana_public_network: whether enable kibana public network.
        :param str es_eip: The eip address of instance.
        :param str es_eip_id: The eip id associated with the instance.
        :param str es_inner_endpoint: The es inner endpoint of instance.
        :param str es_private_domain: The es private domain of instance.
        :param str es_private_endpoint: The es private endpoint of instance.
        :param str es_private_ip_whitelist: The whitelist of es private ip.
        :param str es_public_domain: The es public domain of instance.
        :param str es_public_endpoint: The es public endpoint of instance.
        :param str es_public_ip_whitelist: The whitelist of es public ip.
        :param str expire_date: The expire time of instance.
        :param str id: The id of instance.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationArgs'] instance_configurations: The configuration of instance.
        :param str instance_id: The id of instance.
        :param str kibana_eip: The eip address of kibana.
        :param str kibana_eip_id: The eip id associated with kibana.
        :param str kibana_private_domain: The kibana private domain of instance.
        :param str kibana_private_ip_whitelist: The whitelist of kibana private ip.
        :param str kibana_public_domain: The kibana public domain of instance.
        :param str kibana_public_ip_whitelist: The whitelist of kibana public ip.
        :param str main_zone_id: The main zone id of instance.
        :param Sequence[str] maintenance_days: The maintenance day of instance.
        :param str maintenance_time: The maintenance time of instance.
        :param Sequence['EscloudInstancesV2InstanceNodeArgs'] nodes: The nodes info of instance.
        :param Sequence['EscloudInstancesV2InstancePluginArgs'] plugins: The plugin info of instance.
        :param str status: The status of instance.
        :param bool support_code_node: Whether support code node.
        :param Sequence['EscloudInstancesV2InstanceTagArgs'] tags: Tags.
        :param int total_nodes: The total nodes of instance.
        :param str user_id: The user id of instance.
        """
        pulumi.set(__self__, "cerebro_enabled", cerebro_enabled)
        pulumi.set(__self__, "cerebro_private_domain", cerebro_private_domain)
        pulumi.set(__self__, "cerebro_public_domain", cerebro_public_domain)
        pulumi.set(__self__, "charge_enabled", charge_enabled)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        pulumi.set(__self__, "enable_es_private_domain_public", enable_es_private_domain_public)
        pulumi.set(__self__, "enable_es_private_network", enable_es_private_network)
        pulumi.set(__self__, "enable_es_public_network", enable_es_public_network)
        pulumi.set(__self__, "enable_kibana_private_domain_public", enable_kibana_private_domain_public)
        pulumi.set(__self__, "enable_kibana_private_network", enable_kibana_private_network)
        pulumi.set(__self__, "enable_kibana_public_network", enable_kibana_public_network)
        pulumi.set(__self__, "es_eip", es_eip)
        pulumi.set(__self__, "es_eip_id", es_eip_id)
        pulumi.set(__self__, "es_inner_endpoint", es_inner_endpoint)
        pulumi.set(__self__, "es_private_domain", es_private_domain)
        pulumi.set(__self__, "es_private_endpoint", es_private_endpoint)
        pulumi.set(__self__, "es_private_ip_whitelist", es_private_ip_whitelist)
        pulumi.set(__self__, "es_public_domain", es_public_domain)
        pulumi.set(__self__, "es_public_endpoint", es_public_endpoint)
        pulumi.set(__self__, "es_public_ip_whitelist", es_public_ip_whitelist)
        pulumi.set(__self__, "expire_date", expire_date)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_configurations", instance_configurations)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "kibana_eip", kibana_eip)
        pulumi.set(__self__, "kibana_eip_id", kibana_eip_id)
        pulumi.set(__self__, "kibana_private_domain", kibana_private_domain)
        pulumi.set(__self__, "kibana_private_ip_whitelist", kibana_private_ip_whitelist)
        pulumi.set(__self__, "kibana_public_domain", kibana_public_domain)
        pulumi.set(__self__, "kibana_public_ip_whitelist", kibana_public_ip_whitelist)
        pulumi.set(__self__, "main_zone_id", main_zone_id)
        pulumi.set(__self__, "maintenance_days", maintenance_days)
        pulumi.set(__self__, "maintenance_time", maintenance_time)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "plugins", plugins)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_code_node", support_code_node)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "total_nodes", total_nodes)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="cerebroEnabled")
    def cerebro_enabled(self) -> bool:
        """
        Whether to enable cerebro.
        """
        return pulumi.get(self, "cerebro_enabled")

    @property
    @pulumi.getter(name="cerebroPrivateDomain")
    def cerebro_private_domain(self) -> str:
        """
        The cerebro private domain of instance.
        """
        return pulumi.get(self, "cerebro_private_domain")

    @property
    @pulumi.getter(name="cerebroPublicDomain")
    def cerebro_public_domain(self) -> str:
        """
        The cerebro public domain of instance.
        """
        return pulumi.get(self, "cerebro_public_domain")

    @property
    @pulumi.getter(name="chargeEnabled")
    def charge_enabled(self) -> bool:
        """
        The charge status of instance.
        """
        return pulumi.get(self, "charge_enabled")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The cluster id of instance.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> bool:
        """
        Whether enable deletion protection for ESCloud instance.
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter(name="enableEsPrivateDomainPublic")
    def enable_es_private_domain_public(self) -> bool:
        """
        whether enable es private domain public.
        """
        return pulumi.get(self, "enable_es_private_domain_public")

    @property
    @pulumi.getter(name="enableEsPrivateNetwork")
    def enable_es_private_network(self) -> bool:
        """
        whether enable es private network.
        """
        return pulumi.get(self, "enable_es_private_network")

    @property
    @pulumi.getter(name="enableEsPublicNetwork")
    def enable_es_public_network(self) -> bool:
        """
        whether enable es public network.
        """
        return pulumi.get(self, "enable_es_public_network")

    @property
    @pulumi.getter(name="enableKibanaPrivateDomainPublic")
    def enable_kibana_private_domain_public(self) -> bool:
        """
        whether enable kibana private domain public.
        """
        return pulumi.get(self, "enable_kibana_private_domain_public")

    @property
    @pulumi.getter(name="enableKibanaPrivateNetwork")
    def enable_kibana_private_network(self) -> bool:
        """
        whether enable kibana private network.
        """
        return pulumi.get(self, "enable_kibana_private_network")

    @property
    @pulumi.getter(name="enableKibanaPublicNetwork")
    def enable_kibana_public_network(self) -> bool:
        """
        whether enable kibana public network.
        """
        return pulumi.get(self, "enable_kibana_public_network")

    @property
    @pulumi.getter(name="esEip")
    def es_eip(self) -> str:
        """
        The eip address of instance.
        """
        return pulumi.get(self, "es_eip")

    @property
    @pulumi.getter(name="esEipId")
    def es_eip_id(self) -> str:
        """
        The eip id associated with the instance.
        """
        return pulumi.get(self, "es_eip_id")

    @property
    @pulumi.getter(name="esInnerEndpoint")
    def es_inner_endpoint(self) -> str:
        """
        The es inner endpoint of instance.
        """
        return pulumi.get(self, "es_inner_endpoint")

    @property
    @pulumi.getter(name="esPrivateDomain")
    def es_private_domain(self) -> str:
        """
        The es private domain of instance.
        """
        return pulumi.get(self, "es_private_domain")

    @property
    @pulumi.getter(name="esPrivateEndpoint")
    def es_private_endpoint(self) -> str:
        """
        The es private endpoint of instance.
        """
        return pulumi.get(self, "es_private_endpoint")

    @property
    @pulumi.getter(name="esPrivateIpWhitelist")
    def es_private_ip_whitelist(self) -> str:
        """
        The whitelist of es private ip.
        """
        return pulumi.get(self, "es_private_ip_whitelist")

    @property
    @pulumi.getter(name="esPublicDomain")
    def es_public_domain(self) -> str:
        """
        The es public domain of instance.
        """
        return pulumi.get(self, "es_public_domain")

    @property
    @pulumi.getter(name="esPublicEndpoint")
    def es_public_endpoint(self) -> str:
        """
        The es public endpoint of instance.
        """
        return pulumi.get(self, "es_public_endpoint")

    @property
    @pulumi.getter(name="esPublicIpWhitelist")
    def es_public_ip_whitelist(self) -> str:
        """
        The whitelist of es public ip.
        """
        return pulumi.get(self, "es_public_ip_whitelist")

    @property
    @pulumi.getter(name="expireDate")
    def expire_date(self) -> str:
        """
        The expire time of instance.
        """
        return pulumi.get(self, "expire_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceConfigurations")
    def instance_configurations(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationResult']:
        """
        The configuration of instance.
        """
        return pulumi.get(self, "instance_configurations")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The id of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="kibanaEip")
    def kibana_eip(self) -> str:
        """
        The eip address of kibana.
        """
        return pulumi.get(self, "kibana_eip")

    @property
    @pulumi.getter(name="kibanaEipId")
    def kibana_eip_id(self) -> str:
        """
        The eip id associated with kibana.
        """
        return pulumi.get(self, "kibana_eip_id")

    @property
    @pulumi.getter(name="kibanaPrivateDomain")
    def kibana_private_domain(self) -> str:
        """
        The kibana private domain of instance.
        """
        return pulumi.get(self, "kibana_private_domain")

    @property
    @pulumi.getter(name="kibanaPrivateIpWhitelist")
    def kibana_private_ip_whitelist(self) -> str:
        """
        The whitelist of kibana private ip.
        """
        return pulumi.get(self, "kibana_private_ip_whitelist")

    @property
    @pulumi.getter(name="kibanaPublicDomain")
    def kibana_public_domain(self) -> str:
        """
        The kibana public domain of instance.
        """
        return pulumi.get(self, "kibana_public_domain")

    @property
    @pulumi.getter(name="kibanaPublicIpWhitelist")
    def kibana_public_ip_whitelist(self) -> str:
        """
        The whitelist of kibana public ip.
        """
        return pulumi.get(self, "kibana_public_ip_whitelist")

    @property
    @pulumi.getter(name="mainZoneId")
    def main_zone_id(self) -> str:
        """
        The main zone id of instance.
        """
        return pulumi.get(self, "main_zone_id")

    @property
    @pulumi.getter(name="maintenanceDays")
    def maintenance_days(self) -> Sequence[str]:
        """
        The maintenance day of instance.
        """
        return pulumi.get(self, "maintenance_days")

    @property
    @pulumi.getter(name="maintenanceTime")
    def maintenance_time(self) -> str:
        """
        The maintenance time of instance.
        """
        return pulumi.get(self, "maintenance_time")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.EscloudInstancesV2InstanceNodeResult']:
        """
        The nodes info of instance.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence['outputs.EscloudInstancesV2InstancePluginResult']:
        """
        The plugin info of instance.
        """
        return pulumi.get(self, "plugins")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of instance.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportCodeNode")
    def support_code_node(self) -> bool:
        """
        Whether support code node.
        """
        return pulumi.get(self, "support_code_node")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.EscloudInstancesV2InstanceTagResult']:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalNodes")
    def total_nodes(self) -> int:
        """
        The total nodes of instance.
        """
        return pulumi.get(self, "total_nodes")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The user id of instance.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 admin_user_name: str,
                 charge_type: str,
                 cold_node_number: int,
                 cold_node_resource_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationColdNodeResourceSpecResult'],
                 cold_node_storage_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationColdNodeStorageSpecResult'],
                 coordinator_node_number: int,
                 coordinator_node_resource_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationCoordinatorNodeResourceSpecResult'],
                 coordinator_node_storage_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationCoordinatorNodeStorageSpecResult'],
                 enable_https: bool,
                 enable_pure_master: bool,
                 hot_node_number: int,
                 hot_node_resource_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationHotNodeResourceSpecResult'],
                 hot_node_storage_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationHotNodeStorageSpecResult'],
                 instance_name: str,
                 kibana_node_number: int,
                 kibana_node_resource_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationKibanaNodeResourceSpecResult'],
                 kibana_node_storage_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationKibanaNodeStorageSpecResult'],
                 master_node_number: int,
                 master_node_resource_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationMasterNodeResourceSpecResult'],
                 master_node_storage_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationMasterNodeStorageSpecResult'],
                 period: int,
                 project_name: str,
                 region_id: str,
                 subnets: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationSubnetResult'],
                 version: str,
                 vpcs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationVpcResult'],
                 warm_node_number: int,
                 warm_node_resource_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationWarmNodeResourceSpecResult'],
                 warm_node_storage_specs: Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationWarmNodeStorageSpecResult'],
                 zone_id: str,
                 zone_number: int):
        """
        :param str admin_user_name: The user name of instance.
        :param str charge_type: The charge type of instance.
        :param int cold_node_number: The node number of cold.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationColdNodeResourceSpecArgs'] cold_node_resource_specs: The node resource spec of cold.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationColdNodeStorageSpecArgs'] cold_node_storage_specs: The node storage spec of cold.
        :param int coordinator_node_number: The node number of coordinator.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationCoordinatorNodeResourceSpecArgs'] coordinator_node_resource_specs: The node resource spec of coordinator.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationCoordinatorNodeStorageSpecArgs'] coordinator_node_storage_specs: The node storage spec of coordinator.
        :param bool enable_https: whether enable https.
        :param bool enable_pure_master: Whether enable pure master.
        :param int hot_node_number: The node number of hot.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationHotNodeResourceSpecArgs'] hot_node_resource_specs: The node resource spec of hot.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationHotNodeStorageSpecArgs'] hot_node_storage_specs: The node storage spec of hot.
        :param str instance_name: The name of instance.
        :param int kibana_node_number: The node number of kibana.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationKibanaNodeResourceSpecArgs'] kibana_node_resource_specs: The node resource spec of kibana.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationKibanaNodeStorageSpecArgs'] kibana_node_storage_specs: The node storage spec of kibana.
        :param int master_node_number: The node number of master.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationMasterNodeResourceSpecArgs'] master_node_resource_specs: The node resource spec of master.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationMasterNodeStorageSpecArgs'] master_node_storage_specs: The node storage spec of master.
        :param int period: The period of project.
        :param str project_name: The name of project.
        :param str region_id: The region info of instance.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationSubnetArgs'] subnets: The subnet info.
        :param str version: The version of instance.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationVpcArgs'] vpcs: The vpc info.
        :param int warm_node_number: The node number of warm.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationWarmNodeResourceSpecArgs'] warm_node_resource_specs: The node resource spec of warm.
        :param Sequence['EscloudInstancesV2InstanceInstanceConfigurationWarmNodeStorageSpecArgs'] warm_node_storage_specs: The node storage spec of warm.
        :param str zone_id: The zoneId of instance.
        :param int zone_number: The zone number of instance.
        """
        pulumi.set(__self__, "admin_user_name", admin_user_name)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cold_node_number", cold_node_number)
        pulumi.set(__self__, "cold_node_resource_specs", cold_node_resource_specs)
        pulumi.set(__self__, "cold_node_storage_specs", cold_node_storage_specs)
        pulumi.set(__self__, "coordinator_node_number", coordinator_node_number)
        pulumi.set(__self__, "coordinator_node_resource_specs", coordinator_node_resource_specs)
        pulumi.set(__self__, "coordinator_node_storage_specs", coordinator_node_storage_specs)
        pulumi.set(__self__, "enable_https", enable_https)
        pulumi.set(__self__, "enable_pure_master", enable_pure_master)
        pulumi.set(__self__, "hot_node_number", hot_node_number)
        pulumi.set(__self__, "hot_node_resource_specs", hot_node_resource_specs)
        pulumi.set(__self__, "hot_node_storage_specs", hot_node_storage_specs)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "kibana_node_number", kibana_node_number)
        pulumi.set(__self__, "kibana_node_resource_specs", kibana_node_resource_specs)
        pulumi.set(__self__, "kibana_node_storage_specs", kibana_node_storage_specs)
        pulumi.set(__self__, "master_node_number", master_node_number)
        pulumi.set(__self__, "master_node_resource_specs", master_node_resource_specs)
        pulumi.set(__self__, "master_node_storage_specs", master_node_storage_specs)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "subnets", subnets)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpcs", vpcs)
        pulumi.set(__self__, "warm_node_number", warm_node_number)
        pulumi.set(__self__, "warm_node_resource_specs", warm_node_resource_specs)
        pulumi.set(__self__, "warm_node_storage_specs", warm_node_storage_specs)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_number", zone_number)

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> str:
        """
        The user name of instance.
        """
        return pulumi.get(self, "admin_user_name")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of instance.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="coldNodeNumber")
    def cold_node_number(self) -> int:
        """
        The node number of cold.
        """
        return pulumi.get(self, "cold_node_number")

    @property
    @pulumi.getter(name="coldNodeResourceSpecs")
    def cold_node_resource_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationColdNodeResourceSpecResult']:
        """
        The node resource spec of cold.
        """
        return pulumi.get(self, "cold_node_resource_specs")

    @property
    @pulumi.getter(name="coldNodeStorageSpecs")
    def cold_node_storage_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationColdNodeStorageSpecResult']:
        """
        The node storage spec of cold.
        """
        return pulumi.get(self, "cold_node_storage_specs")

    @property
    @pulumi.getter(name="coordinatorNodeNumber")
    def coordinator_node_number(self) -> int:
        """
        The node number of coordinator.
        """
        return pulumi.get(self, "coordinator_node_number")

    @property
    @pulumi.getter(name="coordinatorNodeResourceSpecs")
    def coordinator_node_resource_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationCoordinatorNodeResourceSpecResult']:
        """
        The node resource spec of coordinator.
        """
        return pulumi.get(self, "coordinator_node_resource_specs")

    @property
    @pulumi.getter(name="coordinatorNodeStorageSpecs")
    def coordinator_node_storage_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationCoordinatorNodeStorageSpecResult']:
        """
        The node storage spec of coordinator.
        """
        return pulumi.get(self, "coordinator_node_storage_specs")

    @property
    @pulumi.getter(name="enableHttps")
    def enable_https(self) -> bool:
        """
        whether enable https.
        """
        return pulumi.get(self, "enable_https")

    @property
    @pulumi.getter(name="enablePureMaster")
    def enable_pure_master(self) -> bool:
        """
        Whether enable pure master.
        """
        return pulumi.get(self, "enable_pure_master")

    @property
    @pulumi.getter(name="hotNodeNumber")
    def hot_node_number(self) -> int:
        """
        The node number of hot.
        """
        return pulumi.get(self, "hot_node_number")

    @property
    @pulumi.getter(name="hotNodeResourceSpecs")
    def hot_node_resource_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationHotNodeResourceSpecResult']:
        """
        The node resource spec of hot.
        """
        return pulumi.get(self, "hot_node_resource_specs")

    @property
    @pulumi.getter(name="hotNodeStorageSpecs")
    def hot_node_storage_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationHotNodeStorageSpecResult']:
        """
        The node storage spec of hot.
        """
        return pulumi.get(self, "hot_node_storage_specs")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        The name of instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="kibanaNodeNumber")
    def kibana_node_number(self) -> int:
        """
        The node number of kibana.
        """
        return pulumi.get(self, "kibana_node_number")

    @property
    @pulumi.getter(name="kibanaNodeResourceSpecs")
    def kibana_node_resource_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationKibanaNodeResourceSpecResult']:
        """
        The node resource spec of kibana.
        """
        return pulumi.get(self, "kibana_node_resource_specs")

    @property
    @pulumi.getter(name="kibanaNodeStorageSpecs")
    def kibana_node_storage_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationKibanaNodeStorageSpecResult']:
        """
        The node storage spec of kibana.
        """
        return pulumi.get(self, "kibana_node_storage_specs")

    @property
    @pulumi.getter(name="masterNodeNumber")
    def master_node_number(self) -> int:
        """
        The node number of master.
        """
        return pulumi.get(self, "master_node_number")

    @property
    @pulumi.getter(name="masterNodeResourceSpecs")
    def master_node_resource_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationMasterNodeResourceSpecResult']:
        """
        The node resource spec of master.
        """
        return pulumi.get(self, "master_node_resource_specs")

    @property
    @pulumi.getter(name="masterNodeStorageSpecs")
    def master_node_storage_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationMasterNodeStorageSpecResult']:
        """
        The node storage spec of master.
        """
        return pulumi.get(self, "master_node_storage_specs")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        The period of project.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The name of project.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The region info of instance.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationSubnetResult']:
        """
        The subnet info.
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of instance.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationVpcResult']:
        """
        The vpc info.
        """
        return pulumi.get(self, "vpcs")

    @property
    @pulumi.getter(name="warmNodeNumber")
    def warm_node_number(self) -> int:
        """
        The node number of warm.
        """
        return pulumi.get(self, "warm_node_number")

    @property
    @pulumi.getter(name="warmNodeResourceSpecs")
    def warm_node_resource_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationWarmNodeResourceSpecResult']:
        """
        The node resource spec of warm.
        """
        return pulumi.get(self, "warm_node_resource_specs")

    @property
    @pulumi.getter(name="warmNodeStorageSpecs")
    def warm_node_storage_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceInstanceConfigurationWarmNodeStorageSpecResult']:
        """
        The node storage spec of warm.
        """
        return pulumi.get(self, "warm_node_storage_specs")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zoneId of instance.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneNumber")
    def zone_number(self) -> int:
        """
        The zone number of instance.
        """
        return pulumi.get(self, "zone_number")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationColdNodeResourceSpecResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 description: str,
                 display_name: str,
                 memory: int,
                 name: str):
        """
        :param int cpu: The cpu info of resource spec.
        :param str description: The description of resource spec.
        :param str display_name: The show name of resource spec.
        :param int memory: The memory info of resource spec.
        :param str name: The name of resource spec.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        The cpu info of resource spec.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of resource spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of resource spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The memory info of resource spec.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of resource spec.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationColdNodeStorageSpecResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 max_size: int,
                 min_size: int,
                 name: str,
                 size: int):
        """
        :param str description: The description of storage spec.
        :param str display_name: The show name of storage spec.
        :param int max_size: The max size of storage spec.
        :param int min_size: The min size of storage spec.
        :param str name: The name of storage spec.
        :param int size: The size of storage spec.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of storage spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of storage spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        """
        The max size of storage spec.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        """
        The min size of storage spec.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of storage spec.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of storage spec.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationCoordinatorNodeResourceSpecResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 description: str,
                 display_name: str,
                 memory: int,
                 name: str):
        """
        :param int cpu: The cpu info of resource spec.
        :param str description: The description of resource spec.
        :param str display_name: The show name of resource spec.
        :param int memory: The memory info of resource spec.
        :param str name: The name of resource spec.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        The cpu info of resource spec.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of resource spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of resource spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The memory info of resource spec.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of resource spec.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationCoordinatorNodeStorageSpecResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 max_size: int,
                 min_size: int,
                 name: str,
                 size: int):
        """
        :param str description: The description of storage spec.
        :param str display_name: The show name of storage spec.
        :param int max_size: The max size of storage spec.
        :param int min_size: The min size of storage spec.
        :param str name: The name of storage spec.
        :param int size: The size of storage spec.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of storage spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of storage spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        """
        The max size of storage spec.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        """
        The min size of storage spec.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of storage spec.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of storage spec.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationHotNodeResourceSpecResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 description: str,
                 display_name: str,
                 memory: int,
                 name: str):
        """
        :param int cpu: The cpu info of resource spec.
        :param str description: The description of resource spec.
        :param str display_name: The show name of resource spec.
        :param int memory: The memory info of resource spec.
        :param str name: The name of resource spec.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        The cpu info of resource spec.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of resource spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of resource spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The memory info of resource spec.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of resource spec.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationHotNodeStorageSpecResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 max_size: int,
                 min_size: int,
                 name: str,
                 size: int):
        """
        :param str description: The description of storage spec.
        :param str display_name: The show name of storage spec.
        :param int max_size: The max size of storage spec.
        :param int min_size: The min size of storage spec.
        :param str name: The name of storage spec.
        :param int size: The size of storage spec.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of storage spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of storage spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        """
        The max size of storage spec.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        """
        The min size of storage spec.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of storage spec.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of storage spec.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationKibanaNodeResourceSpecResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 description: str,
                 display_name: str,
                 memory: int,
                 name: str):
        """
        :param int cpu: The cpu info of resource spec.
        :param str description: The description of resource spec.
        :param str display_name: The show name of resource spec.
        :param int memory: The memory info of resource spec.
        :param str name: The name of resource spec.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        The cpu info of resource spec.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of resource spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of resource spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The memory info of resource spec.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of resource spec.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationKibanaNodeStorageSpecResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 max_size: int,
                 min_size: int,
                 name: str,
                 size: int):
        """
        :param str description: The description of storage spec.
        :param str display_name: The show name of storage spec.
        :param int max_size: The max size of storage spec.
        :param int min_size: The min size of storage spec.
        :param str name: The name of storage spec.
        :param int size: The size of storage spec.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of storage spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of storage spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        """
        The max size of storage spec.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        """
        The min size of storage spec.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of storage spec.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of storage spec.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationMasterNodeResourceSpecResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 description: str,
                 display_name: str,
                 memory: int,
                 name: str):
        """
        :param int cpu: The cpu info of resource spec.
        :param str description: The description of resource spec.
        :param str display_name: The show name of resource spec.
        :param int memory: The memory info of resource spec.
        :param str name: The name of resource spec.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        The cpu info of resource spec.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of resource spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of resource spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The memory info of resource spec.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of resource spec.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationMasterNodeStorageSpecResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 max_size: int,
                 min_size: int,
                 name: str,
                 size: int):
        """
        :param str description: The description of storage spec.
        :param str display_name: The show name of storage spec.
        :param int max_size: The max size of storage spec.
        :param int min_size: The min size of storage spec.
        :param str name: The name of storage spec.
        :param int size: The size of storage spec.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of storage spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of storage spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        """
        The max size of storage spec.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        """
        The min size of storage spec.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of storage spec.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of storage spec.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationSubnetResult(dict):
    def __init__(__self__, *,
                 subnet_id: str,
                 subnet_name: str):
        """
        :param str subnet_id: The id of subnet.
        :param str subnet_name: The name of subnet.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subnet_name", subnet_name)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The id of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        """
        The name of subnet.
        """
        return pulumi.get(self, "subnet_name")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationVpcResult(dict):
    def __init__(__self__, *,
                 vpc_id: str,
                 vpc_name: str):
        """
        :param str vpc_id: The id of vpc.
        :param str vpc_name: The name of vpc.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The id of vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> str:
        """
        The name of vpc.
        """
        return pulumi.get(self, "vpc_name")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationWarmNodeResourceSpecResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 description: str,
                 display_name: str,
                 memory: int,
                 name: str):
        """
        :param int cpu: The cpu info of resource spec.
        :param str description: The description of resource spec.
        :param str display_name: The show name of resource spec.
        :param int memory: The memory info of resource spec.
        :param str name: The name of resource spec.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        The cpu info of resource spec.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of resource spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of resource spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The memory info of resource spec.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of resource spec.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class EscloudInstancesV2InstanceInstanceConfigurationWarmNodeStorageSpecResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 max_size: int,
                 min_size: int,
                 name: str,
                 size: int):
        """
        :param str description: The description of storage spec.
        :param str display_name: The show name of storage spec.
        :param int max_size: The max size of storage spec.
        :param int min_size: The min size of storage spec.
        :param str name: The name of storage spec.
        :param int size: The size of storage spec.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of storage spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of storage spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        """
        The max size of storage spec.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        """
        The min size of storage spec.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of storage spec.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of storage spec.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class EscloudInstancesV2InstanceNodeResult(dict):
    def __init__(__self__, *,
                 is_cold: bool,
                 is_coordinator: bool,
                 is_hot: bool,
                 is_kibana: bool,
                 is_master: bool,
                 is_warm: bool,
                 node_display_name: str,
                 node_name: str,
                 resource_specs: Sequence['outputs.EscloudInstancesV2InstanceNodeResourceSpecResult'],
                 restart_number: int,
                 start_time: str,
                 status: str,
                 storage_specs: Sequence['outputs.EscloudInstancesV2InstanceNodeStorageSpecResult']):
        """
        :param bool is_cold: Is cold node.
        :param bool is_coordinator: Is coordinator node.
        :param bool is_hot: Is hot node.
        :param bool is_kibana: Is kibana node.
        :param bool is_master: Is master node.
        :param bool is_warm: Is warm node.
        :param str node_display_name: The show name of node.
        :param str node_name: The name of node.
        :param Sequence['EscloudInstancesV2InstanceNodeResourceSpecArgs'] resource_specs: The node resource spec of master.
        :param int restart_number: The restart times of node.
        :param str start_time: The start time of node.
        :param str status: The status of node.
        :param Sequence['EscloudInstancesV2InstanceNodeStorageSpecArgs'] storage_specs: The node storage spec of master.
        """
        pulumi.set(__self__, "is_cold", is_cold)
        pulumi.set(__self__, "is_coordinator", is_coordinator)
        pulumi.set(__self__, "is_hot", is_hot)
        pulumi.set(__self__, "is_kibana", is_kibana)
        pulumi.set(__self__, "is_master", is_master)
        pulumi.set(__self__, "is_warm", is_warm)
        pulumi.set(__self__, "node_display_name", node_display_name)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "resource_specs", resource_specs)
        pulumi.set(__self__, "restart_number", restart_number)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_specs", storage_specs)

    @property
    @pulumi.getter(name="isCold")
    def is_cold(self) -> bool:
        """
        Is cold node.
        """
        return pulumi.get(self, "is_cold")

    @property
    @pulumi.getter(name="isCoordinator")
    def is_coordinator(self) -> bool:
        """
        Is coordinator node.
        """
        return pulumi.get(self, "is_coordinator")

    @property
    @pulumi.getter(name="isHot")
    def is_hot(self) -> bool:
        """
        Is hot node.
        """
        return pulumi.get(self, "is_hot")

    @property
    @pulumi.getter(name="isKibana")
    def is_kibana(self) -> bool:
        """
        Is kibana node.
        """
        return pulumi.get(self, "is_kibana")

    @property
    @pulumi.getter(name="isMaster")
    def is_master(self) -> bool:
        """
        Is master node.
        """
        return pulumi.get(self, "is_master")

    @property
    @pulumi.getter(name="isWarm")
    def is_warm(self) -> bool:
        """
        Is warm node.
        """
        return pulumi.get(self, "is_warm")

    @property
    @pulumi.getter(name="nodeDisplayName")
    def node_display_name(self) -> str:
        """
        The show name of node.
        """
        return pulumi.get(self, "node_display_name")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        """
        The name of node.
        """
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter(name="resourceSpecs")
    def resource_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceNodeResourceSpecResult']:
        """
        The node resource spec of master.
        """
        return pulumi.get(self, "resource_specs")

    @property
    @pulumi.getter(name="restartNumber")
    def restart_number(self) -> int:
        """
        The restart times of node.
        """
        return pulumi.get(self, "restart_number")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The start time of node.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of node.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageSpecs")
    def storage_specs(self) -> Sequence['outputs.EscloudInstancesV2InstanceNodeStorageSpecResult']:
        """
        The node storage spec of master.
        """
        return pulumi.get(self, "storage_specs")


@pulumi.output_type
class EscloudInstancesV2InstanceNodeResourceSpecResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 description: str,
                 display_name: str,
                 memory: int):
        """
        :param int cpu: The cpu info of resource spec.
        :param str description: The description of resource spec.
        :param str display_name: The show name of resource spec.
        :param int memory: The memory info of resource spec.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        The cpu info of resource spec.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of resource spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of resource spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The memory info of resource spec.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class EscloudInstancesV2InstanceNodeStorageSpecResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 max_size: int,
                 min_size: int):
        """
        :param str description: The description of storage spec.
        :param str display_name: The show name of storage spec.
        :param int max_size: The max size of storage spec.
        :param int min_size: The min size of storage spec.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of storage spec.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The show name of storage spec.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        """
        The max size of storage spec.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        """
        The min size of storage spec.
        """
        return pulumi.get(self, "min_size")


@pulumi.output_type
class EscloudInstancesV2InstancePluginResult(dict):
    def __init__(__self__, *,
                 description: str,
                 plugin_name: str,
                 status: str,
                 version: str):
        """
        :param str description: The description of plugin.
        :param str plugin_name: The name of plugin.
        :param str status: The status of plugin.
        :param str version: The version of plugin.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "plugin_name", plugin_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of plugin.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> str:
        """
        The name of plugin.
        """
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of plugin.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of plugin.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class EscloudInstancesV2InstanceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EscloudInstancesV2TagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The Key of Tags.
        :param Sequence[str] values: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "values")


