# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstancePluginArgs', 'InstancePlugin']

@pulumi.input_type
class InstancePluginArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 plugin_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a InstancePlugin resource.
        :param pulumi.Input[str] instance_id: The id of the rabbitmq instance..
        :param pulumi.Input[str] plugin_name: The name of the plugin.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "plugin_name", plugin_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of the rabbitmq instance..
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> pulumi.Input[str]:
        """
        The name of the plugin.
        """
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_name", value)


@pulumi.input_type
class _InstancePluginState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_prompt: Optional[pulumi.Input[str]] = None,
                 enable_prompt: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 need_reboot_on_change: Optional[pulumi.Input[bool]] = None,
                 plugin_name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InstancePlugin resources.
        :param pulumi.Input[str] description: The description of the plugin.
        :param pulumi.Input[str] disable_prompt: The disable prompt of the plugin.
        :param pulumi.Input[str] enable_prompt: The enable prompt of the plugin.
        :param pulumi.Input[bool] enabled: Whether the plugin is enabled.
        :param pulumi.Input[str] instance_id: The id of the rabbitmq instance..
        :param pulumi.Input[bool] need_reboot_on_change: Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
        :param pulumi.Input[str] plugin_name: The name of the plugin.
        :param pulumi.Input[int] port: The port of the plugin.
        :param pulumi.Input[str] version: The version of the plugin.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_prompt is not None:
            pulumi.set(__self__, "disable_prompt", disable_prompt)
        if enable_prompt is not None:
            pulumi.set(__self__, "enable_prompt", enable_prompt)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if need_reboot_on_change is not None:
            pulumi.set(__self__, "need_reboot_on_change", need_reboot_on_change)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the plugin.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disablePrompt")
    def disable_prompt(self) -> Optional[pulumi.Input[str]]:
        """
        The disable prompt of the plugin.
        """
        return pulumi.get(self, "disable_prompt")

    @disable_prompt.setter
    def disable_prompt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_prompt", value)

    @property
    @pulumi.getter(name="enablePrompt")
    def enable_prompt(self) -> Optional[pulumi.Input[str]]:
        """
        The enable prompt of the plugin.
        """
        return pulumi.get(self, "enable_prompt")

    @enable_prompt.setter
    def enable_prompt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_prompt", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the plugin is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the rabbitmq instance..
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="needRebootOnChange")
    def need_reboot_on_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
        """
        return pulumi.get(self, "need_reboot_on_change")

    @need_reboot_on_change.setter
    def need_reboot_on_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_reboot_on_change", value)

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the plugin.
        """
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port of the plugin.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the plugin.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class InstancePlugin(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 plugin_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage rabbitmq instance plugin
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.rabbitmq.Instance("fooInstance",
            zone_ids=[
                foo_zones.zones[0].id,
                foo_zones.zones[1].id,
                foo_zones.zones[2].id,
            ],
            subnet_id=foo_subnet.id,
            version="3.8.18",
            user_name="acc-test-user",
            user_password="93f0cb0614Aab12",
            compute_spec="rabbitmq.n3.x2.small",
            storage_space=300,
            instance_name="acc-test-rabbitmq",
            instance_description="acc-test",
            charge_info=volcengine.rabbitmq.InstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            project_name="default",
            tags=[volcengine.rabbitmq.InstanceTagArgs(
                key="k1",
                value="v1",
            )])
        foo_instance_plugin = volcengine.rabbitmq.InstancePlugin("fooInstancePlugin",
            instance_id=foo_instance.id,
            plugin_name="rabbitmq_shovel")
        ```

        ## Import

        RabbitmqInstancePlugin can be imported using the instance_id:plugin_name, e.g.

        ```sh
        $ pulumi import volcengine:rabbitmq/instancePlugin:InstancePlugin default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: The id of the rabbitmq instance..
        :param pulumi.Input[str] plugin_name: The name of the plugin.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstancePluginArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rabbitmq instance plugin
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.rabbitmq.Instance("fooInstance",
            zone_ids=[
                foo_zones.zones[0].id,
                foo_zones.zones[1].id,
                foo_zones.zones[2].id,
            ],
            subnet_id=foo_subnet.id,
            version="3.8.18",
            user_name="acc-test-user",
            user_password="93f0cb0614Aab12",
            compute_spec="rabbitmq.n3.x2.small",
            storage_space=300,
            instance_name="acc-test-rabbitmq",
            instance_description="acc-test",
            charge_info=volcengine.rabbitmq.InstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            project_name="default",
            tags=[volcengine.rabbitmq.InstanceTagArgs(
                key="k1",
                value="v1",
            )])
        foo_instance_plugin = volcengine.rabbitmq.InstancePlugin("fooInstancePlugin",
            instance_id=foo_instance.id,
            plugin_name="rabbitmq_shovel")
        ```

        ## Import

        RabbitmqInstancePlugin can be imported using the instance_id:plugin_name, e.g.

        ```sh
        $ pulumi import volcengine:rabbitmq/instancePlugin:InstancePlugin default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param InstancePluginArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstancePluginArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 plugin_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstancePluginArgs.__new__(InstancePluginArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if plugin_name is None and not opts.urn:
                raise TypeError("Missing required property 'plugin_name'")
            __props__.__dict__["plugin_name"] = plugin_name
            __props__.__dict__["description"] = None
            __props__.__dict__["disable_prompt"] = None
            __props__.__dict__["enable_prompt"] = None
            __props__.__dict__["enabled"] = None
            __props__.__dict__["need_reboot_on_change"] = None
            __props__.__dict__["port"] = None
            __props__.__dict__["version"] = None
        super(InstancePlugin, __self__).__init__(
            'volcengine:rabbitmq/instancePlugin:InstancePlugin',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            disable_prompt: Optional[pulumi.Input[str]] = None,
            enable_prompt: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            need_reboot_on_change: Optional[pulumi.Input[bool]] = None,
            plugin_name: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'InstancePlugin':
        """
        Get an existing InstancePlugin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the plugin.
        :param pulumi.Input[str] disable_prompt: The disable prompt of the plugin.
        :param pulumi.Input[str] enable_prompt: The enable prompt of the plugin.
        :param pulumi.Input[bool] enabled: Whether the plugin is enabled.
        :param pulumi.Input[str] instance_id: The id of the rabbitmq instance..
        :param pulumi.Input[bool] need_reboot_on_change: Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
        :param pulumi.Input[str] plugin_name: The name of the plugin.
        :param pulumi.Input[int] port: The port of the plugin.
        :param pulumi.Input[str] version: The version of the plugin.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstancePluginState.__new__(_InstancePluginState)

        __props__.__dict__["description"] = description
        __props__.__dict__["disable_prompt"] = disable_prompt
        __props__.__dict__["enable_prompt"] = enable_prompt
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["need_reboot_on_change"] = need_reboot_on_change
        __props__.__dict__["plugin_name"] = plugin_name
        __props__.__dict__["port"] = port
        __props__.__dict__["version"] = version
        return InstancePlugin(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the plugin.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disablePrompt")
    def disable_prompt(self) -> pulumi.Output[str]:
        """
        The disable prompt of the plugin.
        """
        return pulumi.get(self, "disable_prompt")

    @property
    @pulumi.getter(name="enablePrompt")
    def enable_prompt(self) -> pulumi.Output[str]:
        """
        The enable prompt of the plugin.
        """
        return pulumi.get(self, "enable_prompt")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the plugin is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of the rabbitmq instance..
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="needRebootOnChange")
    def need_reboot_on_change(self) -> pulumi.Output[bool]:
        """
        Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
        """
        return pulumi.get(self, "need_reboot_on_change")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> pulumi.Output[str]:
        """
        The name of the plugin.
        """
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        The port of the plugin.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version of the plugin.
        """
        return pulumi.get(self, "version")

