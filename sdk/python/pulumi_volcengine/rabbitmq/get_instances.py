# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetInstancesResult',
    'AwaitableGetInstancesResult',
    'get_instances',
    'get_instances_output',
]

@pulumi.output_type
class GetInstancesResult:
    """
    A collection of values returned by getInstances.
    """
    def __init__(__self__, charge_type=None, id=None, instance_id=None, instance_name=None, instance_status=None, name_regex=None, output_file=None, project_name=None, rabbitmq_instances=None, spec=None, tags=None, total_count=None, vpc_id=None, zone_id=None):
        if charge_type and not isinstance(charge_type, str):
            raise TypeError("Expected argument 'charge_type' to be a str")
        pulumi.set(__self__, "charge_type", charge_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if instance_status and not isinstance(instance_status, str):
            raise TypeError("Expected argument 'instance_status' to be a str")
        pulumi.set(__self__, "instance_status", instance_status)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if rabbitmq_instances and not isinstance(rabbitmq_instances, list):
            raise TypeError("Expected argument 'rabbitmq_instances' to be a list")
        pulumi.set(__self__, "rabbitmq_instances", rabbitmq_instances)
        if spec and not isinstance(spec, str):
            raise TypeError("Expected argument 'spec' to be a str")
        pulumi.set(__self__, "spec", spec)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[str]:
        """
        The charge type of the rabbitmq instance.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        The id of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        The name of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> Optional[str]:
        """
        The status of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The project name of the rabbitmq instance.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="rabbitmqInstances")
    def rabbitmq_instances(self) -> Sequence['outputs.GetInstancesRabbitmqInstanceResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "rabbitmq_instances")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetInstancesTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        The vpc id of the rabbitmq instance.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        The zone id of the rabbitmq instance.
        """
        return pulumi.get(self, "zone_id")


class AwaitableGetInstancesResult(GetInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstancesResult(
            charge_type=self.charge_type,
            id=self.id,
            instance_id=self.instance_id,
            instance_name=self.instance_name,
            instance_status=self.instance_status,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_name=self.project_name,
            rabbitmq_instances=self.rabbitmq_instances,
            spec=self.spec,
            tags=self.tags,
            total_count=self.total_count,
            vpc_id=self.vpc_id,
            zone_id=self.zone_id)


def get_instances(charge_type: Optional[str] = None,
                  instance_id: Optional[str] = None,
                  instance_name: Optional[str] = None,
                  instance_status: Optional[str] = None,
                  name_regex: Optional[str] = None,
                  output_file: Optional[str] = None,
                  project_name: Optional[str] = None,
                  spec: Optional[str] = None,
                  tags: Optional[Sequence[pulumi.InputType['GetInstancesTagArgs']]] = None,
                  vpc_id: Optional[str] = None,
                  zone_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstancesResult:
    """
    Use this data source to query detailed information of rabbitmq instances
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.get_zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_instance = volcengine.rabbitmq.Instance("fooInstance",
        zone_ids=[
            foo_zones.zones[0].id,
            foo_zones.zones[1].id,
            foo_zones.zones[2].id,
        ],
        subnet_id=foo_subnet.id,
        version="3.8.18",
        user_name="acc-test-user",
        user_password="93f0cb0614Aab12",
        compute_spec="rabbitmq.n3.x2.small",
        storage_space=300,
        instance_name="acc-test-rabbitmq",
        instance_description="acc-test",
        charge_info=volcengine.rabbitmq.InstanceChargeInfoArgs(
            charge_type="PostPaid",
        ),
        project_name="default",
        tags=[volcengine.rabbitmq.InstanceTagArgs(
            key="k1",
            value="v1",
        )])
    foo_instances = volcengine.rabbitmq.get_instances_output(instance_id=foo_instance.id)
    ```


    :param str charge_type: The charge type of rabbitmq instance.
    :param str instance_id: The id of rabbitmq instance. This field supports fuzzy query.
    :param str instance_name: The name of rabbitmq instance. This field supports fuzzy query.
    :param str instance_status: The status of rabbitmq instance.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of rabbitmq instance.
    :param str spec: The calculation specification of rabbitmq instance.
    :param Sequence[pulumi.InputType['GetInstancesTagArgs']] tags: Tags.
    :param str vpc_id: The vpc id of rabbitmq instance. This field supports fuzzy query.
    :param str zone_id: The zone id of rabbitmq instance. This field supports fuzzy query.
    """
    __args__ = dict()
    __args__['chargeType'] = charge_type
    __args__['instanceId'] = instance_id
    __args__['instanceName'] = instance_name
    __args__['instanceStatus'] = instance_status
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['spec'] = spec
    __args__['tags'] = tags
    __args__['vpcId'] = vpc_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:rabbitmq/getInstances:getInstances', __args__, opts=opts, typ=GetInstancesResult).value

    return AwaitableGetInstancesResult(
        charge_type=pulumi.get(__ret__, 'charge_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        instance_status=pulumi.get(__ret__, 'instance_status'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        rabbitmq_instances=pulumi.get(__ret__, 'rabbitmq_instances'),
        spec=pulumi.get(__ret__, 'spec'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'),
        zone_id=pulumi.get(__ret__, 'zone_id'))


@_utilities.lift_output_func(get_instances)
def get_instances_output(charge_type: Optional[pulumi.Input[Optional[str]]] = None,
                         instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                         instance_name: Optional[pulumi.Input[Optional[str]]] = None,
                         instance_status: Optional[pulumi.Input[Optional[str]]] = None,
                         name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                         output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         project_name: Optional[pulumi.Input[Optional[str]]] = None,
                         spec: Optional[pulumi.Input[Optional[str]]] = None,
                         tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetInstancesTagArgs']]]]] = None,
                         vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                         zone_id: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstancesResult]:
    """
    Use this data source to query detailed information of rabbitmq instances
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.get_zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_instance = volcengine.rabbitmq.Instance("fooInstance",
        zone_ids=[
            foo_zones.zones[0].id,
            foo_zones.zones[1].id,
            foo_zones.zones[2].id,
        ],
        subnet_id=foo_subnet.id,
        version="3.8.18",
        user_name="acc-test-user",
        user_password="93f0cb0614Aab12",
        compute_spec="rabbitmq.n3.x2.small",
        storage_space=300,
        instance_name="acc-test-rabbitmq",
        instance_description="acc-test",
        charge_info=volcengine.rabbitmq.InstanceChargeInfoArgs(
            charge_type="PostPaid",
        ),
        project_name="default",
        tags=[volcengine.rabbitmq.InstanceTagArgs(
            key="k1",
            value="v1",
        )])
    foo_instances = volcengine.rabbitmq.get_instances_output(instance_id=foo_instance.id)
    ```


    :param str charge_type: The charge type of rabbitmq instance.
    :param str instance_id: The id of rabbitmq instance. This field supports fuzzy query.
    :param str instance_name: The name of rabbitmq instance. This field supports fuzzy query.
    :param str instance_status: The status of rabbitmq instance.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of rabbitmq instance.
    :param str spec: The calculation specification of rabbitmq instance.
    :param Sequence[pulumi.InputType['GetInstancesTagArgs']] tags: Tags.
    :param str vpc_id: The vpc id of rabbitmq instance. This field supports fuzzy query.
    :param str zone_id: The zone id of rabbitmq instance. This field supports fuzzy query.
    """
    ...
