# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 charge_info: pulumi.Input['InstanceChargeInfoArgs'],
                 compute_spec: pulumi.Input[str],
                 storage_space: pulumi.Input[int],
                 subnet_id: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 user_password: pulumi.Input[str],
                 version: pulumi.Input[str],
                 zone_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input['InstanceChargeInfoArgs'] charge_info: The charge information of the rocketmq instance.
        :param pulumi.Input[str] compute_spec: The compute specification of the rabbitmq instance.
        :param pulumi.Input[int] storage_space: The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
        :param pulumi.Input[str] subnet_id: The subnet id of the rabbitmq instance.
        :param pulumi.Input[str] user_name: The administrator name of the rabbitmq instance.
        :param pulumi.Input[str] user_password: The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] version: The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the rabbitmq instance. Support specifying multiple availability zones.
        :param pulumi.Input[str] instance_description: The description of the rabbitmq instance.
        :param pulumi.Input[str] instance_name: The name of the rabbitmq instance.
        :param pulumi.Input[str] project_name: The IAM project name where the rabbitmq instance resides.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]] tags: Tags.
        """
        pulumi.set(__self__, "charge_info", charge_info)
        pulumi.set(__self__, "compute_spec", compute_spec)
        pulumi.set(__self__, "storage_space", storage_space)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "user_password", user_password)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "zone_ids", zone_ids)
        if instance_description is not None:
            pulumi.set(__self__, "instance_description", instance_description)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="chargeInfo")
    def charge_info(self) -> pulumi.Input['InstanceChargeInfoArgs']:
        """
        The charge information of the rocketmq instance.
        """
        return pulumi.get(self, "charge_info")

    @charge_info.setter
    def charge_info(self, value: pulumi.Input['InstanceChargeInfoArgs']):
        pulumi.set(self, "charge_info", value)

    @property
    @pulumi.getter(name="computeSpec")
    def compute_spec(self) -> pulumi.Input[str]:
        """
        The compute specification of the rabbitmq instance.
        """
        return pulumi.get(self, "compute_spec")

    @compute_spec.setter
    def compute_spec(self, value: pulumi.Input[str]):
        pulumi.set(self, "compute_spec", value)

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> pulumi.Input[int]:
        """
        The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
        """
        return pulumi.get(self, "storage_space")

    @storage_space.setter
    def storage_space(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_space", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The subnet id of the rabbitmq instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        The administrator name of the rabbitmq instance.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> pulumi.Input[str]:
        """
        The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_password", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The zone id of the rabbitmq instance. Support specifying multiple availability zones.
        """
        return pulumi.get(self, "zone_ids")

    @zone_ids.setter
    def zone_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "zone_ids", value)

    @property
    @pulumi.getter(name="instanceDescription")
    def instance_description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_description")

    @instance_description.setter
    def instance_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_description", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The IAM project name where the rabbitmq instance resides.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 apply_private_dns_to_public: Optional[pulumi.Input[bool]] = None,
                 arch_type: Optional[pulumi.Input[str]] = None,
                 charge_info: Optional[pulumi.Input['InstanceChargeInfoArgs']] = None,
                 compute_spec: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceEndpointArgs']]]] = None,
                 init_user_name: Optional[pulumi.Input[str]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_status: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None,
                 used_storage_space: Optional[pulumi.Input[int]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] account_id: The account id of the rabbitmq instance.
        :param pulumi.Input[bool] apply_private_dns_to_public: Whether enable the public network parsing function of the rabbitmq instance.
        :param pulumi.Input[str] arch_type: The type of the rabbitmq instance.
        :param pulumi.Input['InstanceChargeInfoArgs'] charge_info: The charge information of the rocketmq instance.
        :param pulumi.Input[str] compute_spec: The compute specification of the rabbitmq instance.
        :param pulumi.Input[str] create_time: The create time of the rabbitmq instance.
        :param pulumi.Input[str] eip_id: The eip id of the rabbitmq instance.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceEndpointArgs']]] endpoints: The endpoint info of the rabbitmq instance.
        :param pulumi.Input[str] init_user_name: The WebUI admin user name of the rabbitmq instance.
        :param pulumi.Input[str] instance_description: The description of the rabbitmq instance.
        :param pulumi.Input[str] instance_name: The name of the rabbitmq instance.
        :param pulumi.Input[str] instance_status: The status of the rabbitmq instance.
        :param pulumi.Input[str] project_name: The IAM project name where the rabbitmq instance resides.
        :param pulumi.Input[str] region_id: The region id of the rabbitmq instance.
        :param pulumi.Input[int] storage_space: The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
        :param pulumi.Input[str] subnet_id: The subnet id of the rabbitmq instance.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]] tags: Tags.
        :param pulumi.Input[int] used_storage_space: The used storage space of the rabbitmq instance. Unit: GiB.
        :param pulumi.Input[str] user_name: The administrator name of the rabbitmq instance.
        :param pulumi.Input[str] user_password: The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] version: The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
        :param pulumi.Input[str] vpc_id: The vpc id of the rabbitmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the rabbitmq instance. Support specifying multiple availability zones.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if apply_private_dns_to_public is not None:
            pulumi.set(__self__, "apply_private_dns_to_public", apply_private_dns_to_public)
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if charge_info is not None:
            pulumi.set(__self__, "charge_info", charge_info)
        if compute_spec is not None:
            pulumi.set(__self__, "compute_spec", compute_spec)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if init_user_name is not None:
            pulumi.set(__self__, "init_user_name", init_user_name)
        if instance_description is not None:
            pulumi.set(__self__, "instance_description", instance_description)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_status is not None:
            pulumi.set(__self__, "instance_status", instance_status)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if storage_space is not None:
            pulumi.set(__self__, "storage_space", storage_space)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if used_storage_space is not None:
            pulumi.set(__self__, "used_storage_space", used_storage_space)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_password is not None:
            pulumi.set(__self__, "user_password", user_password)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone_ids is not None:
            pulumi.set(__self__, "zone_ids", zone_ids)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account id of the rabbitmq instance.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applyPrivateDnsToPublic")
    def apply_private_dns_to_public(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable the public network parsing function of the rabbitmq instance.
        """
        return pulumi.get(self, "apply_private_dns_to_public")

    @apply_private_dns_to_public.setter
    def apply_private_dns_to_public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_private_dns_to_public", value)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the rabbitmq instance.
        """
        return pulumi.get(self, "arch_type")

    @arch_type.setter
    def arch_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch_type", value)

    @property
    @pulumi.getter(name="chargeInfo")
    def charge_info(self) -> Optional[pulumi.Input['InstanceChargeInfoArgs']]:
        """
        The charge information of the rocketmq instance.
        """
        return pulumi.get(self, "charge_info")

    @charge_info.setter
    def charge_info(self, value: Optional[pulumi.Input['InstanceChargeInfoArgs']]):
        pulumi.set(self, "charge_info", value)

    @property
    @pulumi.getter(name="computeSpec")
    def compute_spec(self) -> Optional[pulumi.Input[str]]:
        """
        The compute specification of the rabbitmq instance.
        """
        return pulumi.get(self, "compute_spec")

    @compute_spec.setter
    def compute_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_spec", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of the rabbitmq instance.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The eip id of the rabbitmq instance.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceEndpointArgs']]]]:
        """
        The endpoint info of the rabbitmq instance.
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceEndpointArgs']]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter(name="initUserName")
    def init_user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The WebUI admin user name of the rabbitmq instance.
        """
        return pulumi.get(self, "init_user_name")

    @init_user_name.setter
    def init_user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "init_user_name", value)

    @property
    @pulumi.getter(name="instanceDescription")
    def instance_description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_description")

    @instance_description.setter
    def instance_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_description", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_status")

    @instance_status.setter
    def instance_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_status", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The IAM project name where the rabbitmq instance resides.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The region id of the rabbitmq instance.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> Optional[pulumi.Input[int]]:
        """
        The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
        """
        return pulumi.get(self, "storage_space")

    @storage_space.setter
    def storage_space(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_space", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet id of the rabbitmq instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="usedStorageSpace")
    def used_storage_space(self) -> Optional[pulumi.Input[int]]:
        """
        The used storage space of the rabbitmq instance. Unit: GiB.
        """
        return pulumi.get(self, "used_storage_space")

    @used_storage_space.setter
    def used_storage_space(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_storage_space", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The administrator name of the rabbitmq instance.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> Optional[pulumi.Input[str]]:
        """
        The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_password", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The vpc id of the rabbitmq instance.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The zone id of the rabbitmq instance. Support specifying multiple availability zones.
        """
        return pulumi.get(self, "zone_ids")

    @zone_ids.setter
    def zone_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zone_ids", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charge_info: Optional[pulumi.Input[pulumi.InputType['InstanceChargeInfoArgs']]] = None,
                 compute_spec: Optional[pulumi.Input[str]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage rabbitmq instance
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.rabbitmq.Instance("fooInstance",
            zone_ids=[
                foo_zones.zones[0].id,
                foo_zones.zones[1].id,
                foo_zones.zones[2].id,
            ],
            subnet_id=foo_subnet.id,
            version="3.8.18",
            user_name="acc-test-user",
            user_password="93f0cb0614Aab12",
            compute_spec="rabbitmq.n3.x2.small",
            storage_space=300,
            instance_name="acc-test-rabbitmq",
            instance_description="acc-test",
            charge_info=volcengine.rabbitmq.InstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            project_name="default",
            tags=[volcengine.rabbitmq.InstanceTagArgs(
                key="k1",
                value="v1",
            )])
        ```

        ## Import

        RabbitmqInstance can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:rabbitmq/instance:Instance default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['InstanceChargeInfoArgs']] charge_info: The charge information of the rocketmq instance.
        :param pulumi.Input[str] compute_spec: The compute specification of the rabbitmq instance.
        :param pulumi.Input[str] instance_description: The description of the rabbitmq instance.
        :param pulumi.Input[str] instance_name: The name of the rabbitmq instance.
        :param pulumi.Input[str] project_name: The IAM project name where the rabbitmq instance resides.
        :param pulumi.Input[int] storage_space: The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
        :param pulumi.Input[str] subnet_id: The subnet id of the rabbitmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] user_name: The administrator name of the rabbitmq instance.
        :param pulumi.Input[str] user_password: The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] version: The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the rabbitmq instance. Support specifying multiple availability zones.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage rabbitmq instance
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.rabbitmq.Instance("fooInstance",
            zone_ids=[
                foo_zones.zones[0].id,
                foo_zones.zones[1].id,
                foo_zones.zones[2].id,
            ],
            subnet_id=foo_subnet.id,
            version="3.8.18",
            user_name="acc-test-user",
            user_password="93f0cb0614Aab12",
            compute_spec="rabbitmq.n3.x2.small",
            storage_space=300,
            instance_name="acc-test-rabbitmq",
            instance_description="acc-test",
            charge_info=volcengine.rabbitmq.InstanceChargeInfoArgs(
                charge_type="PostPaid",
            ),
            project_name="default",
            tags=[volcengine.rabbitmq.InstanceTagArgs(
                key="k1",
                value="v1",
            )])
        ```

        ## Import

        RabbitmqInstance can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:rabbitmq/instance:Instance default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charge_info: Optional[pulumi.Input[pulumi.InputType['InstanceChargeInfoArgs']]] = None,
                 compute_spec: Optional[pulumi.Input[str]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if charge_info is None and not opts.urn:
                raise TypeError("Missing required property 'charge_info'")
            __props__.__dict__["charge_info"] = charge_info
            if compute_spec is None and not opts.urn:
                raise TypeError("Missing required property 'compute_spec'")
            __props__.__dict__["compute_spec"] = compute_spec
            __props__.__dict__["instance_description"] = instance_description
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["project_name"] = project_name
            if storage_space is None and not opts.urn:
                raise TypeError("Missing required property 'storage_space'")
            __props__.__dict__["storage_space"] = storage_space
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
            if user_password is None and not opts.urn:
                raise TypeError("Missing required property 'user_password'")
            __props__.__dict__["user_password"] = None if user_password is None else pulumi.Output.secret(user_password)
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            if zone_ids is None and not opts.urn:
                raise TypeError("Missing required property 'zone_ids'")
            __props__.__dict__["zone_ids"] = zone_ids
            __props__.__dict__["account_id"] = None
            __props__.__dict__["apply_private_dns_to_public"] = None
            __props__.__dict__["arch_type"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["eip_id"] = None
            __props__.__dict__["endpoints"] = None
            __props__.__dict__["init_user_name"] = None
            __props__.__dict__["instance_status"] = None
            __props__.__dict__["region_id"] = None
            __props__.__dict__["used_storage_space"] = None
            __props__.__dict__["vpc_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["userPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'volcengine:rabbitmq/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            apply_private_dns_to_public: Optional[pulumi.Input[bool]] = None,
            arch_type: Optional[pulumi.Input[str]] = None,
            charge_info: Optional[pulumi.Input[pulumi.InputType['InstanceChargeInfoArgs']]] = None,
            compute_spec: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            eip_id: Optional[pulumi.Input[str]] = None,
            endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceEndpointArgs']]]]] = None,
            init_user_name: Optional[pulumi.Input[str]] = None,
            instance_description: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_status: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            region_id: Optional[pulumi.Input[str]] = None,
            storage_space: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
            used_storage_space: Optional[pulumi.Input[int]] = None,
            user_name: Optional[pulumi.Input[str]] = None,
            user_password: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The account id of the rabbitmq instance.
        :param pulumi.Input[bool] apply_private_dns_to_public: Whether enable the public network parsing function of the rabbitmq instance.
        :param pulumi.Input[str] arch_type: The type of the rabbitmq instance.
        :param pulumi.Input[pulumi.InputType['InstanceChargeInfoArgs']] charge_info: The charge information of the rocketmq instance.
        :param pulumi.Input[str] compute_spec: The compute specification of the rabbitmq instance.
        :param pulumi.Input[str] create_time: The create time of the rabbitmq instance.
        :param pulumi.Input[str] eip_id: The eip id of the rabbitmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceEndpointArgs']]]] endpoints: The endpoint info of the rabbitmq instance.
        :param pulumi.Input[str] init_user_name: The WebUI admin user name of the rabbitmq instance.
        :param pulumi.Input[str] instance_description: The description of the rabbitmq instance.
        :param pulumi.Input[str] instance_name: The name of the rabbitmq instance.
        :param pulumi.Input[str] instance_status: The status of the rabbitmq instance.
        :param pulumi.Input[str] project_name: The IAM project name where the rabbitmq instance resides.
        :param pulumi.Input[str] region_id: The region id of the rabbitmq instance.
        :param pulumi.Input[int] storage_space: The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
        :param pulumi.Input[str] subnet_id: The subnet id of the rabbitmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]] tags: Tags.
        :param pulumi.Input[int] used_storage_space: The used storage space of the rabbitmq instance. Unit: GiB.
        :param pulumi.Input[str] user_name: The administrator name of the rabbitmq instance.
        :param pulumi.Input[str] user_password: The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] version: The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
        :param pulumi.Input[str] vpc_id: The vpc id of the rabbitmq instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zone_ids: The zone id of the rabbitmq instance. Support specifying multiple availability zones.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["apply_private_dns_to_public"] = apply_private_dns_to_public
        __props__.__dict__["arch_type"] = arch_type
        __props__.__dict__["charge_info"] = charge_info
        __props__.__dict__["compute_spec"] = compute_spec
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["endpoints"] = endpoints
        __props__.__dict__["init_user_name"] = init_user_name
        __props__.__dict__["instance_description"] = instance_description
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_status"] = instance_status
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["storage_space"] = storage_space
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["used_storage_space"] = used_storage_space
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["user_password"] = user_password
        __props__.__dict__["version"] = version
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone_ids"] = zone_ids
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The account id of the rabbitmq instance.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applyPrivateDnsToPublic")
    def apply_private_dns_to_public(self) -> pulumi.Output[bool]:
        """
        Whether enable the public network parsing function of the rabbitmq instance.
        """
        return pulumi.get(self, "apply_private_dns_to_public")

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> pulumi.Output[str]:
        """
        The type of the rabbitmq instance.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="chargeInfo")
    def charge_info(self) -> pulumi.Output['outputs.InstanceChargeInfo']:
        """
        The charge information of the rocketmq instance.
        """
        return pulumi.get(self, "charge_info")

    @property
    @pulumi.getter(name="computeSpec")
    def compute_spec(self) -> pulumi.Output[str]:
        """
        The compute specification of the rabbitmq instance.
        """
        return pulumi.get(self, "compute_spec")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of the rabbitmq instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[str]:
        """
        The eip id of the rabbitmq instance.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter
    def endpoints(self) -> pulumi.Output[Sequence['outputs.InstanceEndpoint']]:
        """
        The endpoint info of the rabbitmq instance.
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="initUserName")
    def init_user_name(self) -> pulumi.Output[str]:
        """
        The WebUI admin user name of the rabbitmq instance.
        """
        return pulumi.get(self, "init_user_name")

    @property
    @pulumi.getter(name="instanceDescription")
    def instance_description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_description")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        The name of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> pulumi.Output[str]:
        """
        The status of the rabbitmq instance.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The IAM project name where the rabbitmq instance resides.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[str]:
        """
        The region id of the rabbitmq instance.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> pulumi.Output[int]:
        """
        The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
        """
        return pulumi.get(self, "storage_space")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The subnet id of the rabbitmq instance.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceTag']]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="usedStorageSpace")
    def used_storage_space(self) -> pulumi.Output[int]:
        """
        The used storage space of the rabbitmq instance. Unit: GiB.
        """
        return pulumi.get(self, "used_storage_space")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        The administrator name of the rabbitmq instance.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> pulumi.Output[str]:
        """
        The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "user_password")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The vpc id of the rabbitmq instance.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The zone id of the rabbitmq instance. Support specifying multiple availability zones.
        """
        return pulumi.get(self, "zone_ids")

