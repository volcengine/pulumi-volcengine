# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'AutoSnapshotPoliciesResult',
    'AwaitableAutoSnapshotPoliciesResult',
    'auto_snapshot_policies',
    'auto_snapshot_policies_output',
]

@pulumi.output_type
class AutoSnapshotPoliciesResult:
    """
    A collection of values returned by AutoSnapshotPolicies.
    """
    def __init__(__self__, auto_snapshot_policies=None, id=None, ids=None, name_regex=None, output_file=None, project_name=None, tags=None, total_count=None):
        if auto_snapshot_policies and not isinstance(auto_snapshot_policies, list):
            raise TypeError("Expected argument 'auto_snapshot_policies' to be a list")
        pulumi.set(__self__, "auto_snapshot_policies", auto_snapshot_policies)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="autoSnapshotPolicies")
    def auto_snapshot_policies(self) -> Sequence['outputs.AutoSnapshotPoliciesAutoSnapshotPolicyResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "auto_snapshot_policies")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The project name of the auto snapshot policy.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.AutoSnapshotPoliciesTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableAutoSnapshotPoliciesResult(AutoSnapshotPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return AutoSnapshotPoliciesResult(
            auto_snapshot_policies=self.auto_snapshot_policies,
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_name=self.project_name,
            tags=self.tags,
            total_count=self.total_count)


def auto_snapshot_policies(ids: Optional[Sequence[str]] = None,
                           name_regex: Optional[str] = None,
                           output_file: Optional[str] = None,
                           project_name: Optional[str] = None,
                           tags: Optional[Sequence[pulumi.InputType['AutoSnapshotPoliciesTagArgs']]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableAutoSnapshotPoliciesResult:
    """
    Use this data source to query detailed information of ebs auto snapshot policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_auto_snapshot_policy = []
    for range in [{"value": i} for i in range(0, 2)]:
        foo_auto_snapshot_policy.append(volcengine.ebs.AutoSnapshotPolicy(f"fooAutoSnapshotPolicy-{range['value']}",
            auto_snapshot_policy_name="acc-test-auto-snapshot-policy",
            time_points=[
                "1",
                "5",
                "9",
            ],
            retention_days=-1,
            repeat_weekdays=[
                "2",
                "6",
            ],
            project_name="default",
            tags=[volcengine.ebs.AutoSnapshotPolicyTagArgs(
                key="k1",
                value="v1",
            )]))
    foo_auto_snapshot_policies = volcengine.ebs.auto_snapshot_policies_output(ids=[__item.id for __item in foo_auto_snapshot_policy])
    ```


    :param Sequence[str] ids: A list of auto snapshot policy IDs.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of auto snapshot policy.
    :param Sequence[pulumi.InputType['AutoSnapshotPoliciesTagArgs']] tags: Tags.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:ebs/autoSnapshotPolicies:AutoSnapshotPolicies', __args__, opts=opts, typ=AutoSnapshotPoliciesResult).value

    return AwaitableAutoSnapshotPoliciesResult(
        auto_snapshot_policies=pulumi.get(__ret__, 'auto_snapshot_policies'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(auto_snapshot_policies)
def auto_snapshot_policies_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                  name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                                  output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  project_name: Optional[pulumi.Input[Optional[str]]] = None,
                                  tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['AutoSnapshotPoliciesTagArgs']]]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[AutoSnapshotPoliciesResult]:
    """
    Use this data source to query detailed information of ebs auto snapshot policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_auto_snapshot_policy = []
    for range in [{"value": i} for i in range(0, 2)]:
        foo_auto_snapshot_policy.append(volcengine.ebs.AutoSnapshotPolicy(f"fooAutoSnapshotPolicy-{range['value']}",
            auto_snapshot_policy_name="acc-test-auto-snapshot-policy",
            time_points=[
                "1",
                "5",
                "9",
            ],
            retention_days=-1,
            repeat_weekdays=[
                "2",
                "6",
            ],
            project_name="default",
            tags=[volcengine.ebs.AutoSnapshotPolicyTagArgs(
                key="k1",
                value="v1",
            )]))
    foo_auto_snapshot_policies = volcengine.ebs.auto_snapshot_policies_output(ids=[__item.id for __item in foo_auto_snapshot_policy])
    ```


    :param Sequence[str] ids: A list of auto snapshot policy IDs.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of auto snapshot policy.
    :param Sequence[pulumi.InputType['AutoSnapshotPoliciesTagArgs']] tags: Tags.
    """
    ...
