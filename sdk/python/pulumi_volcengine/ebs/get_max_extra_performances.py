# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMaxExtraPerformancesResult',
    'AwaitableGetMaxExtraPerformancesResult',
    'get_max_extra_performances',
    'get_max_extra_performances_output',
]

@pulumi.output_type
class GetMaxExtraPerformancesResult:
    """
    A collection of values returned by getMaxExtraPerformances.
    """
    def __init__(__self__, id=None, name_regex=None, output_file=None, performances=None, size=None, total_count=None, volume_id=None, volume_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if performances and not isinstance(performances, list):
            raise TypeError("Expected argument 'performances' to be a list")
        pulumi.set(__self__, "performances", performances)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if volume_id and not isinstance(volume_id, str):
            raise TypeError("Expected argument 'volume_id' to be a str")
        pulumi.set(__self__, "volume_id", volume_id)
        if volume_type and not isinstance(volume_type, str):
            raise TypeError("Expected argument 'volume_type' to be a str")
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def performances(self) -> Sequence['outputs.GetMaxExtraPerformancesPerformanceResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "performances")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        return pulumi.get(self, "volume_type")


class AwaitableGetMaxExtraPerformancesResult(GetMaxExtraPerformancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMaxExtraPerformancesResult(
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            performances=self.performances,
            size=self.size,
            total_count=self.total_count,
            volume_id=self.volume_id,
            volume_type=self.volume_type)


def get_max_extra_performances(name_regex: Optional[str] = None,
                               output_file: Optional[str] = None,
                               size: Optional[int] = None,
                               volume_id: Optional[str] = None,
                               volume_type: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMaxExtraPerformancesResult:
    """
    Use this data source to query detailed information of ebs max extra performances


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param int size: The size of the volume. Unit: GiB.
    :param str volume_id: The id of the volume.
    :param str volume_type: The type of the volume. Valid values: `TSSD_TL0`.
    """
    __args__ = dict()
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['size'] = size
    __args__['volumeId'] = volume_id
    __args__['volumeType'] = volume_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:ebs/getMaxExtraPerformances:getMaxExtraPerformances', __args__, opts=opts, typ=GetMaxExtraPerformancesResult).value

    return AwaitableGetMaxExtraPerformancesResult(
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        performances=pulumi.get(__ret__, 'performances'),
        size=pulumi.get(__ret__, 'size'),
        total_count=pulumi.get(__ret__, 'total_count'),
        volume_id=pulumi.get(__ret__, 'volume_id'),
        volume_type=pulumi.get(__ret__, 'volume_type'))


@_utilities.lift_output_func(get_max_extra_performances)
def get_max_extra_performances_output(name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                                      output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      size: Optional[pulumi.Input[Optional[int]]] = None,
                                      volume_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      volume_type: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMaxExtraPerformancesResult]:
    """
    Use this data source to query detailed information of ebs max extra performances


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param int size: The size of the volume. Unit: GiB.
    :param str volume_id: The id of the volume.
    :param str volume_type: The type of the volume. Valid values: `TSSD_TL0`.
    """
    ...
