# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SnapshotGroupsResult',
    'AwaitableSnapshotGroupsResult',
    'snapshot_groups',
    'snapshot_groups_output',
]

@pulumi.output_type
class SnapshotGroupsResult:
    """
    A collection of values returned by SnapshotGroups.
    """
    def __init__(__self__, id=None, ids=None, instance_id=None, name=None, name_regex=None, output_file=None, project_name=None, snapshot_groups=None, statuses=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if snapshot_groups and not isinstance(snapshot_groups, list):
            raise TypeError("Expected argument 'snapshot_groups' to be a list")
        pulumi.set(__self__, "snapshot_groups", snapshot_groups)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        The instance id of the snapshot group.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the snapshot group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The id of the snapshot.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="snapshotGroups")
    def snapshot_groups(self) -> Sequence['outputs.SnapshotGroupsSnapshotGroupResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "snapshot_groups")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        """
        The status of the snapshot group.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableSnapshotGroupsResult(SnapshotGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return SnapshotGroupsResult(
            id=self.id,
            ids=self.ids,
            instance_id=self.instance_id,
            name=self.name,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_name=self.project_name,
            snapshot_groups=self.snapshot_groups,
            statuses=self.statuses,
            total_count=self.total_count)


def snapshot_groups(ids: Optional[Sequence[str]] = None,
                    instance_id: Optional[str] = None,
                    name: Optional[str] = None,
                    name_regex: Optional[str] = None,
                    output_file: Optional[str] = None,
                    project_name: Optional[str] = None,
                    statuses: Optional[Sequence[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableSnapshotGroupsResult:
    """
    Use this data source to query detailed information of ebs snapshot groups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
        security_group_name="acc-test-security-group",
        vpc_id=foo_vpc.id)
    foo_images = volcengine.ecs.images(os_type="Linux",
        visibility="public",
        instance_type_id="ecs.g3il.large")
    foo_instance = volcengine.ecs.Instance("fooInstance",
        instance_name="acc-test-ecs",
        description="acc-test",
        host_name="tf-acc-test",
        image_id=foo_images.images[0].image_id,
        instance_type="ecs.g3il.large",
        password="93f0cb0614Aab12",
        instance_charge_type="PostPaid",
        system_volume_type="ESSD_PL0",
        system_volume_size=40,
        subnet_id=foo_subnet.id,
        security_group_ids=[foo_security_group.id],
        project_name="default",
        tags=[volcengine.ecs.InstanceTagArgs(
            key="k1",
            value="v1",
        )])
    foo_volume = volcengine.ebs.Volume("fooVolume",
        volume_name="acc-test-volume",
        volume_type="ESSD_PL0",
        description="acc-test",
        kind="data",
        size=500,
        zone_id=foo_zones.zones[0].id,
        volume_charge_type="PostPaid",
        project_name="default")
    foo_volume_attach = volcengine.ebs.VolumeAttach("fooVolumeAttach",
        instance_id=foo_instance.id,
        volume_id=foo_volume.id)
    foo_snapshot_group = volcengine.ebs.SnapshotGroup("fooSnapshotGroup",
        volume_ids=[
            foo_instance.system_volume_id,
            foo_volume.id,
        ],
        instance_id=foo_instance.id,
        description="acc-test",
        project_name="default",
        tags=[volcengine.ebs.SnapshotGroupTagArgs(
            key="k1",
            value="v1",
        )],
        opts=pulumi.ResourceOptions(depends_on=[foo_volume_attach]))
    foo_snapshot_groups = volcengine.ebs.snapshot_groups_output(ids=[foo_snapshot_group.id])
    ```


    :param Sequence[str] ids: A list of snapshot group IDs.
    :param str instance_id: The instance id of snapshot group.
    :param str name: The name of snapshot group.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of snapshot group.
    :param Sequence[str] statuses: A list of snapshot group status. Valid values: `creating`, `available`, `failed`.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:ebs/snapshotGroups:SnapshotGroups', __args__, opts=opts, typ=SnapshotGroupsResult).value

    return AwaitableSnapshotGroupsResult(
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        snapshot_groups=pulumi.get(__ret__, 'snapshot_groups'),
        statuses=pulumi.get(__ret__, 'statuses'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(snapshot_groups)
def snapshot_groups_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                           output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           project_name: Optional[pulumi.Input[Optional[str]]] = None,
                           statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[SnapshotGroupsResult]:
    """
    Use this data source to query detailed information of ebs snapshot groups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_security_group = volcengine.vpc.SecurityGroup("fooSecurityGroup",
        security_group_name="acc-test-security-group",
        vpc_id=foo_vpc.id)
    foo_images = volcengine.ecs.images(os_type="Linux",
        visibility="public",
        instance_type_id="ecs.g3il.large")
    foo_instance = volcengine.ecs.Instance("fooInstance",
        instance_name="acc-test-ecs",
        description="acc-test",
        host_name="tf-acc-test",
        image_id=foo_images.images[0].image_id,
        instance_type="ecs.g3il.large",
        password="93f0cb0614Aab12",
        instance_charge_type="PostPaid",
        system_volume_type="ESSD_PL0",
        system_volume_size=40,
        subnet_id=foo_subnet.id,
        security_group_ids=[foo_security_group.id],
        project_name="default",
        tags=[volcengine.ecs.InstanceTagArgs(
            key="k1",
            value="v1",
        )])
    foo_volume = volcengine.ebs.Volume("fooVolume",
        volume_name="acc-test-volume",
        volume_type="ESSD_PL0",
        description="acc-test",
        kind="data",
        size=500,
        zone_id=foo_zones.zones[0].id,
        volume_charge_type="PostPaid",
        project_name="default")
    foo_volume_attach = volcengine.ebs.VolumeAttach("fooVolumeAttach",
        instance_id=foo_instance.id,
        volume_id=foo_volume.id)
    foo_snapshot_group = volcengine.ebs.SnapshotGroup("fooSnapshotGroup",
        volume_ids=[
            foo_instance.system_volume_id,
            foo_volume.id,
        ],
        instance_id=foo_instance.id,
        description="acc-test",
        project_name="default",
        tags=[volcengine.ebs.SnapshotGroupTagArgs(
            key="k1",
            value="v1",
        )],
        opts=pulumi.ResourceOptions(depends_on=[foo_volume_attach]))
    foo_snapshot_groups = volcengine.ebs.snapshot_groups_output(ids=[foo_snapshot_group.id])
    ```


    :param Sequence[str] ids: A list of snapshot group IDs.
    :param str instance_id: The instance id of snapshot group.
    :param str name: The name of snapshot group.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of snapshot group.
    :param Sequence[str] statuses: A list of snapshot group status. Valid values: `creating`, `available`, `failed`.
    """
    ...
