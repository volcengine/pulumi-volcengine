# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'SnapshotsResult',
    'AwaitableSnapshotsResult',
    'snapshots',
    'snapshots_output',
]

@pulumi.output_type
class SnapshotsResult:
    """
    A collection of values returned by Snapshots.
    """
    def __init__(__self__, id=None, ids=None, name_regex=None, output_file=None, project_name=None, snapshot_statuses=None, snapshots=None, tags=None, total_count=None, zone_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if snapshot_statuses and not isinstance(snapshot_statuses, list):
            raise TypeError("Expected argument 'snapshot_statuses' to be a list")
        pulumi.set(__self__, "snapshot_statuses", snapshot_statuses)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The project name of the snapshot.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="snapshotStatuses")
    def snapshot_statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "snapshot_statuses")

    @property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.SnapshotsSnapshotResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.SnapshotsTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        The zone id of the snapshot.
        """
        return pulumi.get(self, "zone_id")


class AwaitableSnapshotsResult(SnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return SnapshotsResult(
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_name=self.project_name,
            snapshot_statuses=self.snapshot_statuses,
            snapshots=self.snapshots,
            tags=self.tags,
            total_count=self.total_count,
            zone_id=self.zone_id)


def snapshots(ids: Optional[Sequence[str]] = None,
              name_regex: Optional[str] = None,
              output_file: Optional[str] = None,
              project_name: Optional[str] = None,
              snapshot_statuses: Optional[Sequence[str]] = None,
              tags: Optional[Sequence[pulumi.InputType['SnapshotsTagArgs']]] = None,
              zone_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableSnapshotsResult:
    """
    Use this data source to query detailed information of ebs snapshots
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.zones()
    foo_volume = volcengine.ebs.Volume("fooVolume",
        volume_name="acc-test-volume",
        volume_type="ESSD_PL0",
        description="acc-test",
        kind="data",
        size=500,
        zone_id=foo_zones.zones[0].id,
        volume_charge_type="PostPaid",
        project_name="default")
    foo_snapshot = []
    for range in [{"value": i} for i in range(0, 2)]:
        foo_snapshot.append(volcengine.ebs.Snapshot(f"fooSnapshot-{range['value']}",
            volume_id=foo_volume.id,
            snapshot_name="acc-test-snapshot",
            description="acc-test",
            retention_days=3,
            project_name="default",
            tags=[volcengine.ebs.SnapshotTagArgs(
                key="k1",
                value="v1",
            )]))
    foo_snapshots = volcengine.ebs.snapshots_output(ids=[__item.id for __item in foo_snapshot])
    ```


    :param Sequence[str] ids: A list of snapshot IDs.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of snapshot.
    :param Sequence[str] snapshot_statuses: A list of snapshot status.
    :param Sequence[pulumi.InputType['SnapshotsTagArgs']] tags: Tags.
    :param str zone_id: The zone id of snapshot.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['snapshotStatuses'] = snapshot_statuses
    __args__['tags'] = tags
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:ebs/snapshots:Snapshots', __args__, opts=opts, typ=SnapshotsResult).value

    return AwaitableSnapshotsResult(
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        snapshot_statuses=pulumi.get(__ret__, 'snapshot_statuses'),
        snapshots=pulumi.get(__ret__, 'snapshots'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        zone_id=pulumi.get(__ret__, 'zone_id'))


@_utilities.lift_output_func(snapshots)
def snapshots_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                     output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     project_name: Optional[pulumi.Input[Optional[str]]] = None,
                     snapshot_statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SnapshotsTagArgs']]]]] = None,
                     zone_id: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[SnapshotsResult]:
    """
    Use this data source to query detailed information of ebs snapshots
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.zones()
    foo_volume = volcengine.ebs.Volume("fooVolume",
        volume_name="acc-test-volume",
        volume_type="ESSD_PL0",
        description="acc-test",
        kind="data",
        size=500,
        zone_id=foo_zones.zones[0].id,
        volume_charge_type="PostPaid",
        project_name="default")
    foo_snapshot = []
    for range in [{"value": i} for i in range(0, 2)]:
        foo_snapshot.append(volcengine.ebs.Snapshot(f"fooSnapshot-{range['value']}",
            volume_id=foo_volume.id,
            snapshot_name="acc-test-snapshot",
            description="acc-test",
            retention_days=3,
            project_name="default",
            tags=[volcengine.ebs.SnapshotTagArgs(
                key="k1",
                value="v1",
            )]))
    foo_snapshots = volcengine.ebs.snapshots_output(ids=[__item.id for __item in foo_snapshot])
    ```


    :param Sequence[str] ids: A list of snapshot IDs.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The project name of snapshot.
    :param Sequence[str] snapshot_statuses: A list of snapshot status.
    :param Sequence[pulumi.InputType['SnapshotsTagArgs']] tags: Tags.
    :param str zone_id: The zone id of snapshot.
    """
    ...
