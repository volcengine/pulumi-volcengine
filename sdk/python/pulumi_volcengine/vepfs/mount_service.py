# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MountServiceArgs', 'MountService']

@pulumi.input_type
class MountServiceArgs:
    def __init__(__self__, *,
                 mount_service_name: pulumi.Input[str],
                 node_type: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MountService resource.
        :param pulumi.Input[str] mount_service_name: The name of the mount service.
        :param pulumi.Input[str] node_type: The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] subnet_id: The subnet id of the mount service.
        :param pulumi.Input[str] project: The node type of the mount service.
        """
        pulumi.set(__self__, "mount_service_name", mount_service_name)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="mountServiceName")
    def mount_service_name(self) -> pulumi.Input[str]:
        """
        The name of the mount service.
        """
        return pulumi.get(self, "mount_service_name")

    @mount_service_name.setter
    def mount_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_service_name", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> pulumi.Input[str]:
        """
        The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The subnet id of the mount service.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The node type of the mount service.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _MountServiceState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 attach_file_systems: Optional[pulumi.Input[Sequence[pulumi.Input['MountServiceAttachFileSystemArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 mount_service_name: Optional[pulumi.Input[str]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['MountServiceNodeArgs']]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MountService resources.
        :param pulumi.Input[str] account_id: The account id of the vepfs file system.
        :param pulumi.Input[Sequence[pulumi.Input['MountServiceAttachFileSystemArgs']]] attach_file_systems: The attached file system info of the mount service.
        :param pulumi.Input[str] create_time: The created time of the mount service.
        :param pulumi.Input[str] mount_service_name: The name of the mount service.
        :param pulumi.Input[str] node_type: The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input['MountServiceNodeArgs']]] nodes: The nodes info of the mount service.
        :param pulumi.Input[str] project: The node type of the mount service.
        :param pulumi.Input[str] region_id: The region id of the mount service.
        :param pulumi.Input[str] status: The status of the mount service.
        :param pulumi.Input[str] subnet_id: The subnet id of the mount service.
        :param pulumi.Input[str] vpc_id: The vpc id of the mount service.
        :param pulumi.Input[str] zone_id: The zone id of the mount service.
        :param pulumi.Input[str] zone_name: The zone name of the mount service.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if attach_file_systems is not None:
            pulumi.set(__self__, "attach_file_systems", attach_file_systems)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if mount_service_name is not None:
            pulumi.set(__self__, "mount_service_name", mount_service_name)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account id of the vepfs file system.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="attachFileSystems")
    def attach_file_systems(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MountServiceAttachFileSystemArgs']]]]:
        """
        The attached file system info of the mount service.
        """
        return pulumi.get(self, "attach_file_systems")

    @attach_file_systems.setter
    def attach_file_systems(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MountServiceAttachFileSystemArgs']]]]):
        pulumi.set(self, "attach_file_systems", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The created time of the mount service.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="mountServiceName")
    def mount_service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the mount service.
        """
        return pulumi.get(self, "mount_service_name")

    @mount_service_name.setter
    def mount_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_service_name", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        """
        The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MountServiceNodeArgs']]]]:
        """
        The nodes info of the mount service.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MountServiceNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The node type of the mount service.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The region id of the mount service.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the mount service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet id of the mount service.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The vpc id of the mount service.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The zone id of the mount service.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        The zone name of the mount service.
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_name", value)


class MountService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mount_service_name: Optional[pulumi.Input[str]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage vepfs mount service
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id="cn-beijing-a",
            vpc_id=foo_vpc.id)
        foo_mount_service = volcengine.vepfs.MountService("fooMountService",
            mount_service_name="acc-test-mount-service",
            subnet_id=foo_subnet.id,
            node_type="ecs.g1ie.large",
            project="default")
        ```

        ## Import

        VepfsMountService can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:vepfs/mountService:MountService default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] mount_service_name: The name of the mount service.
        :param pulumi.Input[str] node_type: The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] project: The node type of the mount service.
        :param pulumi.Input[str] subnet_id: The subnet id of the mount service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MountServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vepfs mount service
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id="cn-beijing-a",
            vpc_id=foo_vpc.id)
        foo_mount_service = volcengine.vepfs.MountService("fooMountService",
            mount_service_name="acc-test-mount-service",
            subnet_id=foo_subnet.id,
            node_type="ecs.g1ie.large",
            project="default")
        ```

        ## Import

        VepfsMountService can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:vepfs/mountService:MountService default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param MountServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MountServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mount_service_name: Optional[pulumi.Input[str]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MountServiceArgs.__new__(MountServiceArgs)

            if mount_service_name is None and not opts.urn:
                raise TypeError("Missing required property 'mount_service_name'")
            __props__.__dict__["mount_service_name"] = mount_service_name
            if node_type is None and not opts.urn:
                raise TypeError("Missing required property 'node_type'")
            __props__.__dict__["node_type"] = node_type
            __props__.__dict__["project"] = project
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["account_id"] = None
            __props__.__dict__["attach_file_systems"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["nodes"] = None
            __props__.__dict__["region_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vpc_id"] = None
            __props__.__dict__["zone_id"] = None
            __props__.__dict__["zone_name"] = None
        super(MountService, __self__).__init__(
            'volcengine:vepfs/mountService:MountService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            attach_file_systems: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MountServiceAttachFileSystemArgs']]]]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            mount_service_name: Optional[pulumi.Input[str]] = None,
            node_type: Optional[pulumi.Input[str]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MountServiceNodeArgs']]]]] = None,
            project: Optional[pulumi.Input[str]] = None,
            region_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None,
            zone_name: Optional[pulumi.Input[str]] = None) -> 'MountService':
        """
        Get an existing MountService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The account id of the vepfs file system.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MountServiceAttachFileSystemArgs']]]] attach_file_systems: The attached file system info of the mount service.
        :param pulumi.Input[str] create_time: The created time of the mount service.
        :param pulumi.Input[str] mount_service_name: The name of the mount service.
        :param pulumi.Input[str] node_type: The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MountServiceNodeArgs']]]] nodes: The nodes info of the mount service.
        :param pulumi.Input[str] project: The node type of the mount service.
        :param pulumi.Input[str] region_id: The region id of the mount service.
        :param pulumi.Input[str] status: The status of the mount service.
        :param pulumi.Input[str] subnet_id: The subnet id of the mount service.
        :param pulumi.Input[str] vpc_id: The vpc id of the mount service.
        :param pulumi.Input[str] zone_id: The zone id of the mount service.
        :param pulumi.Input[str] zone_name: The zone name of the mount service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MountServiceState.__new__(_MountServiceState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["attach_file_systems"] = attach_file_systems
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["mount_service_name"] = mount_service_name
        __props__.__dict__["node_type"] = node_type
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["project"] = project
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone_id"] = zone_id
        __props__.__dict__["zone_name"] = zone_name
        return MountService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The account id of the vepfs file system.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="attachFileSystems")
    def attach_file_systems(self) -> pulumi.Output[Sequence['outputs.MountServiceAttachFileSystem']]:
        """
        The attached file system info of the mount service.
        """
        return pulumi.get(self, "attach_file_systems")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The created time of the mount service.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="mountServiceName")
    def mount_service_name(self) -> pulumi.Output[str]:
        """
        The name of the mount service.
        """
        return pulumi.get(self, "mount_service_name")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> pulumi.Output[str]:
        """
        The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence['outputs.MountServiceNode']]:
        """
        The nodes info of the mount service.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The node type of the mount service.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[str]:
        """
        The region id of the mount service.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the mount service.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The subnet id of the mount service.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The vpc id of the mount service.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        The zone id of the mount service.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> pulumi.Output[str]:
        """
        The zone name of the mount service.
        """
        return pulumi.get(self, "zone_name")

