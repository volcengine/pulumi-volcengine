# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['FilesetArgs', 'Fileset']

@pulumi.input_type
class FilesetArgs:
    def __init__(__self__, *,
                 file_system_id: pulumi.Input[str],
                 fileset_name: pulumi.Input[str],
                 fileset_path: pulumi.Input[str],
                 capacity_limit: Optional[pulumi.Input[int]] = None,
                 file_limit: Optional[pulumi.Input[int]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None,
                 max_iops: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Fileset resource.
        :param pulumi.Input[str] file_system_id: The id of the vepfs file system.
        :param pulumi.Input[str] fileset_name: The name of the vepfs fileset.
        :param pulumi.Input[str] fileset_path: The path of the vepfs fileset.
        :param pulumi.Input[int] capacity_limit: The capacity limit of the vepfs fileset. Unit: Gib.
        :param pulumi.Input[int] file_limit: The file number limit of the vepfs fileset.
        :param pulumi.Input[int] max_bandwidth: The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
        :param pulumi.Input[int] max_iops: The max IOPS qos limit of the vepfs fileset.
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "fileset_name", fileset_name)
        pulumi.set(__self__, "fileset_path", fileset_path)
        if capacity_limit is not None:
            pulumi.set(__self__, "capacity_limit", capacity_limit)
        if file_limit is not None:
            pulumi.set(__self__, "file_limit", file_limit)
        if max_bandwidth is not None:
            pulumi.set(__self__, "max_bandwidth", max_bandwidth)
        if max_iops is not None:
            pulumi.set(__self__, "max_iops", max_iops)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Input[str]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="filesetName")
    def fileset_name(self) -> pulumi.Input[str]:
        """
        The name of the vepfs fileset.
        """
        return pulumi.get(self, "fileset_name")

    @fileset_name.setter
    def fileset_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "fileset_name", value)

    @property
    @pulumi.getter(name="filesetPath")
    def fileset_path(self) -> pulumi.Input[str]:
        """
        The path of the vepfs fileset.
        """
        return pulumi.get(self, "fileset_path")

    @fileset_path.setter
    def fileset_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "fileset_path", value)

    @property
    @pulumi.getter(name="capacityLimit")
    def capacity_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The capacity limit of the vepfs fileset. Unit: Gib.
        """
        return pulumi.get(self, "capacity_limit")

    @capacity_limit.setter
    def capacity_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity_limit", value)

    @property
    @pulumi.getter(name="fileLimit")
    def file_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The file number limit of the vepfs fileset.
        """
        return pulumi.get(self, "file_limit")

    @file_limit.setter
    def file_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_limit", value)

    @property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
        """
        return pulumi.get(self, "max_bandwidth")

    @max_bandwidth.setter
    def max_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bandwidth", value)

    @property
    @pulumi.getter(name="maxIops")
    def max_iops(self) -> Optional[pulumi.Input[int]]:
        """
        The max IOPS qos limit of the vepfs fileset.
        """
        return pulumi.get(self, "max_iops")

    @max_iops.setter
    def max_iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_iops", value)


@pulumi.input_type
class _FilesetState:
    def __init__(__self__, *,
                 capacity_limit: Optional[pulumi.Input[int]] = None,
                 capacity_used: Optional[pulumi.Input[int]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 file_limit: Optional[pulumi.Input[int]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 file_used: Optional[pulumi.Input[int]] = None,
                 fileset_name: Optional[pulumi.Input[str]] = None,
                 fileset_path: Optional[pulumi.Input[str]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None,
                 max_inode_num: Optional[pulumi.Input[int]] = None,
                 max_iops: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Fileset resources.
        :param pulumi.Input[int] capacity_limit: The capacity limit of the vepfs fileset. Unit: Gib.
        :param pulumi.Input[int] capacity_used: The used capacity of the vepfs fileset. Unit: GiB.
        :param pulumi.Input[str] create_time: The create time of the vepfs fileset.
        :param pulumi.Input[int] file_limit: The file number limit of the vepfs fileset.
        :param pulumi.Input[str] file_system_id: The id of the vepfs file system.
        :param pulumi.Input[int] file_used: The used file number of the vepfs fileset.
        :param pulumi.Input[str] fileset_name: The name of the vepfs fileset.
        :param pulumi.Input[str] fileset_path: The path of the vepfs fileset.
        :param pulumi.Input[int] max_bandwidth: The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
        :param pulumi.Input[int] max_inode_num: The max number of inode in the vepfs fileset.
        :param pulumi.Input[int] max_iops: The max IOPS qos limit of the vepfs fileset.
        :param pulumi.Input[str] status: The status of the vepfs fileset.
        """
        if capacity_limit is not None:
            pulumi.set(__self__, "capacity_limit", capacity_limit)
        if capacity_used is not None:
            pulumi.set(__self__, "capacity_used", capacity_used)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if file_limit is not None:
            pulumi.set(__self__, "file_limit", file_limit)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if file_used is not None:
            pulumi.set(__self__, "file_used", file_used)
        if fileset_name is not None:
            pulumi.set(__self__, "fileset_name", fileset_name)
        if fileset_path is not None:
            pulumi.set(__self__, "fileset_path", fileset_path)
        if max_bandwidth is not None:
            pulumi.set(__self__, "max_bandwidth", max_bandwidth)
        if max_inode_num is not None:
            pulumi.set(__self__, "max_inode_num", max_inode_num)
        if max_iops is not None:
            pulumi.set(__self__, "max_iops", max_iops)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="capacityLimit")
    def capacity_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The capacity limit of the vepfs fileset. Unit: Gib.
        """
        return pulumi.get(self, "capacity_limit")

    @capacity_limit.setter
    def capacity_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity_limit", value)

    @property
    @pulumi.getter(name="capacityUsed")
    def capacity_used(self) -> Optional[pulumi.Input[int]]:
        """
        The used capacity of the vepfs fileset. Unit: GiB.
        """
        return pulumi.get(self, "capacity_used")

    @capacity_used.setter
    def capacity_used(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity_used", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of the vepfs fileset.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="fileLimit")
    def file_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The file number limit of the vepfs fileset.
        """
        return pulumi.get(self, "file_limit")

    @file_limit.setter
    def file_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_limit", value)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="fileUsed")
    def file_used(self) -> Optional[pulumi.Input[int]]:
        """
        The used file number of the vepfs fileset.
        """
        return pulumi.get(self, "file_used")

    @file_used.setter
    def file_used(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_used", value)

    @property
    @pulumi.getter(name="filesetName")
    def fileset_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the vepfs fileset.
        """
        return pulumi.get(self, "fileset_name")

    @fileset_name.setter
    def fileset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fileset_name", value)

    @property
    @pulumi.getter(name="filesetPath")
    def fileset_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path of the vepfs fileset.
        """
        return pulumi.get(self, "fileset_path")

    @fileset_path.setter
    def fileset_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fileset_path", value)

    @property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
        """
        return pulumi.get(self, "max_bandwidth")

    @max_bandwidth.setter
    def max_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bandwidth", value)

    @property
    @pulumi.getter(name="maxInodeNum")
    def max_inode_num(self) -> Optional[pulumi.Input[int]]:
        """
        The max number of inode in the vepfs fileset.
        """
        return pulumi.get(self, "max_inode_num")

    @max_inode_num.setter
    def max_inode_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_inode_num", value)

    @property
    @pulumi.getter(name="maxIops")
    def max_iops(self) -> Optional[pulumi.Input[int]]:
        """
        The max IOPS qos limit of the vepfs fileset.
        """
        return pulumi.get(self, "max_iops")

    @max_iops.setter
    def max_iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_iops", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the vepfs fileset.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class Fileset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity_limit: Optional[pulumi.Input[int]] = None,
                 file_limit: Optional[pulumi.Input[int]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 fileset_name: Optional[pulumi.Input[str]] = None,
                 fileset_path: Optional[pulumi.Input[str]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None,
                 max_iops: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage vepfs fileset
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id="cn-beijing-a",
            vpc_id=foo_vpc.id)
        foo_file_system = volcengine.vepfs.FileSystem("fooFileSystem",
            file_system_name="acc-test-file-system",
            subnet_id=foo_subnet.id,
            store_type="Advance_100",
            description="tf-test",
            capacity=12,
            project="default",
            enable_restripe=False,
            tags=[volcengine.vepfs.FileSystemTagArgs(
                key="k1",
                value="v1",
            )])
        foo_fileset = volcengine.vepfs.Fileset("fooFileset",
            file_system_id=foo_file_system.id,
            fileset_name="acc-test-fileset",
            fileset_path="/tf-test/",
            max_iops=100,
            max_bandwidth=10,
            file_limit=20,
            capacity_limit=30)
        ```

        ## Import

        VepfsFileset can be imported using the file_system_id:fileset_id, e.g.

        ```sh
         $ pulumi import volcengine:vepfs/fileset:Fileset default file_system_id:fileset_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] capacity_limit: The capacity limit of the vepfs fileset. Unit: Gib.
        :param pulumi.Input[int] file_limit: The file number limit of the vepfs fileset.
        :param pulumi.Input[str] file_system_id: The id of the vepfs file system.
        :param pulumi.Input[str] fileset_name: The name of the vepfs fileset.
        :param pulumi.Input[str] fileset_path: The path of the vepfs fileset.
        :param pulumi.Input[int] max_bandwidth: The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
        :param pulumi.Input[int] max_iops: The max IOPS qos limit of the vepfs fileset.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FilesetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vepfs fileset
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id="cn-beijing-a",
            vpc_id=foo_vpc.id)
        foo_file_system = volcengine.vepfs.FileSystem("fooFileSystem",
            file_system_name="acc-test-file-system",
            subnet_id=foo_subnet.id,
            store_type="Advance_100",
            description="tf-test",
            capacity=12,
            project="default",
            enable_restripe=False,
            tags=[volcengine.vepfs.FileSystemTagArgs(
                key="k1",
                value="v1",
            )])
        foo_fileset = volcengine.vepfs.Fileset("fooFileset",
            file_system_id=foo_file_system.id,
            fileset_name="acc-test-fileset",
            fileset_path="/tf-test/",
            max_iops=100,
            max_bandwidth=10,
            file_limit=20,
            capacity_limit=30)
        ```

        ## Import

        VepfsFileset can be imported using the file_system_id:fileset_id, e.g.

        ```sh
         $ pulumi import volcengine:vepfs/fileset:Fileset default file_system_id:fileset_id
        ```

        :param str resource_name: The name of the resource.
        :param FilesetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FilesetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity_limit: Optional[pulumi.Input[int]] = None,
                 file_limit: Optional[pulumi.Input[int]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 fileset_name: Optional[pulumi.Input[str]] = None,
                 fileset_path: Optional[pulumi.Input[str]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None,
                 max_iops: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FilesetArgs.__new__(FilesetArgs)

            __props__.__dict__["capacity_limit"] = capacity_limit
            __props__.__dict__["file_limit"] = file_limit
            if file_system_id is None and not opts.urn:
                raise TypeError("Missing required property 'file_system_id'")
            __props__.__dict__["file_system_id"] = file_system_id
            if fileset_name is None and not opts.urn:
                raise TypeError("Missing required property 'fileset_name'")
            __props__.__dict__["fileset_name"] = fileset_name
            if fileset_path is None and not opts.urn:
                raise TypeError("Missing required property 'fileset_path'")
            __props__.__dict__["fileset_path"] = fileset_path
            __props__.__dict__["max_bandwidth"] = max_bandwidth
            __props__.__dict__["max_iops"] = max_iops
            __props__.__dict__["capacity_used"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["file_used"] = None
            __props__.__dict__["max_inode_num"] = None
            __props__.__dict__["status"] = None
        super(Fileset, __self__).__init__(
            'volcengine:vepfs/fileset:Fileset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capacity_limit: Optional[pulumi.Input[int]] = None,
            capacity_used: Optional[pulumi.Input[int]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            file_limit: Optional[pulumi.Input[int]] = None,
            file_system_id: Optional[pulumi.Input[str]] = None,
            file_used: Optional[pulumi.Input[int]] = None,
            fileset_name: Optional[pulumi.Input[str]] = None,
            fileset_path: Optional[pulumi.Input[str]] = None,
            max_bandwidth: Optional[pulumi.Input[int]] = None,
            max_inode_num: Optional[pulumi.Input[int]] = None,
            max_iops: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'Fileset':
        """
        Get an existing Fileset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] capacity_limit: The capacity limit of the vepfs fileset. Unit: Gib.
        :param pulumi.Input[int] capacity_used: The used capacity of the vepfs fileset. Unit: GiB.
        :param pulumi.Input[str] create_time: The create time of the vepfs fileset.
        :param pulumi.Input[int] file_limit: The file number limit of the vepfs fileset.
        :param pulumi.Input[str] file_system_id: The id of the vepfs file system.
        :param pulumi.Input[int] file_used: The used file number of the vepfs fileset.
        :param pulumi.Input[str] fileset_name: The name of the vepfs fileset.
        :param pulumi.Input[str] fileset_path: The path of the vepfs fileset.
        :param pulumi.Input[int] max_bandwidth: The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
        :param pulumi.Input[int] max_inode_num: The max number of inode in the vepfs fileset.
        :param pulumi.Input[int] max_iops: The max IOPS qos limit of the vepfs fileset.
        :param pulumi.Input[str] status: The status of the vepfs fileset.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FilesetState.__new__(_FilesetState)

        __props__.__dict__["capacity_limit"] = capacity_limit
        __props__.__dict__["capacity_used"] = capacity_used
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["file_limit"] = file_limit
        __props__.__dict__["file_system_id"] = file_system_id
        __props__.__dict__["file_used"] = file_used
        __props__.__dict__["fileset_name"] = fileset_name
        __props__.__dict__["fileset_path"] = fileset_path
        __props__.__dict__["max_bandwidth"] = max_bandwidth
        __props__.__dict__["max_inode_num"] = max_inode_num
        __props__.__dict__["max_iops"] = max_iops
        __props__.__dict__["status"] = status
        return Fileset(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="capacityLimit")
    def capacity_limit(self) -> pulumi.Output[Optional[int]]:
        """
        The capacity limit of the vepfs fileset. Unit: Gib.
        """
        return pulumi.get(self, "capacity_limit")

    @property
    @pulumi.getter(name="capacityUsed")
    def capacity_used(self) -> pulumi.Output[int]:
        """
        The used capacity of the vepfs fileset. Unit: GiB.
        """
        return pulumi.get(self, "capacity_used")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of the vepfs fileset.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="fileLimit")
    def file_limit(self) -> pulumi.Output[Optional[int]]:
        """
        The file number limit of the vepfs fileset.
        """
        return pulumi.get(self, "file_limit")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Output[str]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileUsed")
    def file_used(self) -> pulumi.Output[int]:
        """
        The used file number of the vepfs fileset.
        """
        return pulumi.get(self, "file_used")

    @property
    @pulumi.getter(name="filesetName")
    def fileset_name(self) -> pulumi.Output[str]:
        """
        The name of the vepfs fileset.
        """
        return pulumi.get(self, "fileset_name")

    @property
    @pulumi.getter(name="filesetPath")
    def fileset_path(self) -> pulumi.Output[str]:
        """
        The path of the vepfs fileset.
        """
        return pulumi.get(self, "fileset_path")

    @property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> pulumi.Output[Optional[int]]:
        """
        The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
        """
        return pulumi.get(self, "max_bandwidth")

    @property
    @pulumi.getter(name="maxInodeNum")
    def max_inode_num(self) -> pulumi.Output[int]:
        """
        The max number of inode in the vepfs fileset.
        """
        return pulumi.get(self, "max_inode_num")

    @property
    @pulumi.getter(name="maxIops")
    def max_iops(self) -> pulumi.Output[Optional[int]]:
        """
        The max IOPS qos limit of the vepfs fileset.
        """
        return pulumi.get(self, "max_iops")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the vepfs fileset.
        """
        return pulumi.get(self, "status")

