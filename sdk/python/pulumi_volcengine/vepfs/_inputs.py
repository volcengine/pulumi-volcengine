# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'FileSystemTagArgs',
    'MountServiceAttachFileSystemArgs',
    'MountServiceNodeArgs',
]

@pulumi.input_type
class FileSystemTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The Key of Tags.
        :param pulumi.Input[str] value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class MountServiceAttachFileSystemArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 customer_path: Optional[pulumi.Input[str]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 file_system_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] account_id: The account id of the vepfs file system.
        :param pulumi.Input[str] customer_path: The id of the vepfs file system.
        :param pulumi.Input[str] file_system_id: The id of the vepfs file system.
        :param pulumi.Input[str] file_system_name: The name of the vepfs file system.
        :param pulumi.Input[str] status: The status of the mount service.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if customer_path is not None:
            pulumi.set(__self__, "customer_path", customer_path)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if file_system_name is not None:
            pulumi.set(__self__, "file_system_name", file_system_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account id of the vepfs file system.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="customerPath")
    def customer_path(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "customer_path")

    @customer_path.setter
    def customer_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_path", value)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="fileSystemName")
    def file_system_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the vepfs file system.
        """
        return pulumi.get(self, "file_system_name")

    @file_system_name.setter
    def file_system_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the mount service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class MountServiceNodeArgs:
    def __init__(__self__, *,
                 default_password: Optional[pulumi.Input[str]] = None,
                 node_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_password: The default password of ecs instance.
        :param pulumi.Input[str] node_id: The id of ecs instance.
        """
        if default_password is not None:
            pulumi.set(__self__, "default_password", default_password)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)

    @property
    @pulumi.getter(name="defaultPassword")
    def default_password(self) -> Optional[pulumi.Input[str]]:
        """
        The default password of ecs instance.
        """
        return pulumi.get(self, "default_password")

    @default_password.setter
    def default_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_password", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of ecs instance.
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_id", value)


