# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FileSystemTag',
    'FileSystemsFileSystemResult',
    'FileSystemsFileSystemCapacityInfoResult',
    'FileSystemsFileSystemTagResult',
    'FilesetsFilesetResult',
    'MountServiceAttachFileSystem',
    'MountServiceNode',
    'MountServicesMountServiceResult',
    'MountServicesMountServiceAttachFileSystemResult',
    'MountServicesMountServiceNodeResult',
]

@pulumi.output_type
class FileSystemTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FileSystemsFileSystemResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 bandwidth: int,
                 capacity_info: 'outputs.FileSystemsFileSystemCapacityInfoResult',
                 charge_status: str,
                 charge_type: str,
                 create_time: str,
                 description: str,
                 expire_time: str,
                 file_system_id: str,
                 file_system_name: str,
                 file_system_type: str,
                 free_time: str,
                 id: str,
                 last_modify_time: str,
                 project: str,
                 protocol_type: str,
                 region_id: str,
                 status: str,
                 stop_service_time: str,
                 store_type: str,
                 store_type_cn: str,
                 tags: Sequence['outputs.FileSystemsFileSystemTagResult'],
                 version: str,
                 zone_id: str,
                 zone_name: str):
        """
        :param str account_id: The id of the account.
        :param int bandwidth: The bandwidth info of the vepfs file system.
        :param 'FileSystemsFileSystemCapacityInfoArgs' capacity_info: The capacity info of the vepfs file system.
        :param str charge_status: The charge status of the vepfs file system.
        :param str charge_type: The charge type of the vepfs file system.
        :param str create_time: The create time of the vepfs file system.
        :param str description: The description of the vepfs file system.
        :param str expire_time: The expire time of the vepfs file system.
        :param str file_system_id: The id of the vepfs file system.
        :param str file_system_name: The Name of Vepfs File System. This field support fuzzy query.
        :param str file_system_type: The type of the vepfs file system.
        :param str free_time: The free time of the vepfs file system.
        :param str id: The id of the vepfs file system.
        :param str last_modify_time: The last modify time of the vepfs file system.
        :param str project: The project of Vepfs File System.
        :param str protocol_type: The protocol type of the vepfs file system.
        :param str region_id: The id of the region.
        :param str status: The query status list of Vepfs File System.
        :param str stop_service_time: The stop service time of the vepfs file system.
        :param str store_type: The Store Type of Vepfs File System.
        :param str store_type_cn: The store type cn name of the vepfs file system.
        :param Sequence['FileSystemsFileSystemTagArgs'] tags: The tags of the vepfs file system.
        :param str version: The version info of the vepfs file system.
        :param str zone_id: The zone id of File System.
        :param str zone_name: The name of the zone.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "capacity_info", capacity_info)
        pulumi.set(__self__, "charge_status", charge_status)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "file_system_name", file_system_name)
        pulumi.set(__self__, "file_system_type", file_system_type)
        pulumi.set(__self__, "free_time", free_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modify_time", last_modify_time)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "stop_service_time", stop_service_time)
        pulumi.set(__self__, "store_type", store_type)
        pulumi.set(__self__, "store_type_cn", store_type_cn)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The id of the account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The bandwidth info of the vepfs file system.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="capacityInfo")
    def capacity_info(self) -> 'outputs.FileSystemsFileSystemCapacityInfoResult':
        """
        The capacity info of the vepfs file system.
        """
        return pulumi.get(self, "capacity_info")

    @property
    @pulumi.getter(name="chargeStatus")
    def charge_status(self) -> str:
        """
        The charge status of the vepfs file system.
        """
        return pulumi.get(self, "charge_status")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of the vepfs file system.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the vepfs file system.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the vepfs file system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The expire time of the vepfs file system.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemName")
    def file_system_name(self) -> str:
        """
        The Name of Vepfs File System. This field support fuzzy query.
        """
        return pulumi.get(self, "file_system_name")

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> str:
        """
        The type of the vepfs file system.
        """
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter(name="freeTime")
    def free_time(self) -> str:
        """
        The free time of the vepfs file system.
        """
        return pulumi.get(self, "free_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifyTime")
    def last_modify_time(self) -> str:
        """
        The last modify time of the vepfs file system.
        """
        return pulumi.get(self, "last_modify_time")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project of Vepfs File System.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        The protocol type of the vepfs file system.
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The id of the region.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The query status list of Vepfs File System.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stopServiceTime")
    def stop_service_time(self) -> str:
        """
        The stop service time of the vepfs file system.
        """
        return pulumi.get(self, "stop_service_time")

    @property
    @pulumi.getter(name="storeType")
    def store_type(self) -> str:
        """
        The Store Type of Vepfs File System.
        """
        return pulumi.get(self, "store_type")

    @property
    @pulumi.getter(name="storeTypeCn")
    def store_type_cn(self) -> str:
        """
        The store type cn name of the vepfs file system.
        """
        return pulumi.get(self, "store_type_cn")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.FileSystemsFileSystemTagResult']:
        """
        The tags of the vepfs file system.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version info of the vepfs file system.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone id of File System.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        The name of the zone.
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class FileSystemsFileSystemCapacityInfoResult(dict):
    def __init__(__self__, *,
                 total_tib: int,
                 used_gib: int):
        """
        :param int total_tib: The total size. Unit: TiB.
        :param int used_gib: The used size. Unit: GiB.
        """
        pulumi.set(__self__, "total_tib", total_tib)
        pulumi.set(__self__, "used_gib", used_gib)

    @property
    @pulumi.getter(name="totalTib")
    def total_tib(self) -> int:
        """
        The total size. Unit: TiB.
        """
        return pulumi.get(self, "total_tib")

    @property
    @pulumi.getter(name="usedGib")
    def used_gib(self) -> int:
        """
        The used size. Unit: GiB.
        """
        return pulumi.get(self, "used_gib")


@pulumi.output_type
class FileSystemsFileSystemTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 type: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str type: The Type of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Tags.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FilesetsFilesetResult(dict):
    def __init__(__self__, *,
                 bandwidth_qos: int,
                 capacity_limit: int,
                 capacity_used: int,
                 create_time: str,
                 file_limit: int,
                 file_used: int,
                 fileset_id: str,
                 fileset_name: str,
                 fileset_path: str,
                 id: str,
                 iops_qos: int,
                 max_inode_num: int,
                 status: str):
        """
        :param int bandwidth_qos: The bandwidth Qos of the vepfs fileset.
        :param int capacity_limit: The capacity limit of the vepfs fileset. Unit: GiB.
        :param int capacity_used: The used capacity of the vepfs fileset. Unit: GiB.
        :param str create_time: The create time of the vepfs fileset.
        :param int file_limit: Quota for the number of files or directories. A return of 0 indicates that there is no quota limit set for the number of directories after the file.
        :param int file_used: The used file number of the vepfs fileset.
        :param str fileset_id: The id of Vepfs Fileset.
        :param str fileset_name: The name of Vepfs Fileset. This field support fuzzy query.
        :param str fileset_path: The path of Vepfs Fileset. This field support fuzzy query.
        :param str id: The id of the vepfs fileset.
        :param int iops_qos: The IOPS Qos of the vepfs fileset.
        :param int max_inode_num: The max number of inode in the vepfs fileset.
        :param str status: The query status list of Vepfs Fileset.
        """
        pulumi.set(__self__, "bandwidth_qos", bandwidth_qos)
        pulumi.set(__self__, "capacity_limit", capacity_limit)
        pulumi.set(__self__, "capacity_used", capacity_used)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "file_limit", file_limit)
        pulumi.set(__self__, "file_used", file_used)
        pulumi.set(__self__, "fileset_id", fileset_id)
        pulumi.set(__self__, "fileset_name", fileset_name)
        pulumi.set(__self__, "fileset_path", fileset_path)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "iops_qos", iops_qos)
        pulumi.set(__self__, "max_inode_num", max_inode_num)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="bandwidthQos")
    def bandwidth_qos(self) -> int:
        """
        The bandwidth Qos of the vepfs fileset.
        """
        return pulumi.get(self, "bandwidth_qos")

    @property
    @pulumi.getter(name="capacityLimit")
    def capacity_limit(self) -> int:
        """
        The capacity limit of the vepfs fileset. Unit: GiB.
        """
        return pulumi.get(self, "capacity_limit")

    @property
    @pulumi.getter(name="capacityUsed")
    def capacity_used(self) -> int:
        """
        The used capacity of the vepfs fileset. Unit: GiB.
        """
        return pulumi.get(self, "capacity_used")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the vepfs fileset.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="fileLimit")
    def file_limit(self) -> int:
        """
        Quota for the number of files or directories. A return of 0 indicates that there is no quota limit set for the number of directories after the file.
        """
        return pulumi.get(self, "file_limit")

    @property
    @pulumi.getter(name="fileUsed")
    def file_used(self) -> int:
        """
        The used file number of the vepfs fileset.
        """
        return pulumi.get(self, "file_used")

    @property
    @pulumi.getter(name="filesetId")
    def fileset_id(self) -> str:
        """
        The id of Vepfs Fileset.
        """
        return pulumi.get(self, "fileset_id")

    @property
    @pulumi.getter(name="filesetName")
    def fileset_name(self) -> str:
        """
        The name of Vepfs Fileset. This field support fuzzy query.
        """
        return pulumi.get(self, "fileset_name")

    @property
    @pulumi.getter(name="filesetPath")
    def fileset_path(self) -> str:
        """
        The path of Vepfs Fileset. This field support fuzzy query.
        """
        return pulumi.get(self, "fileset_path")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the vepfs fileset.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="iopsQos")
    def iops_qos(self) -> int:
        """
        The IOPS Qos of the vepfs fileset.
        """
        return pulumi.get(self, "iops_qos")

    @property
    @pulumi.getter(name="maxInodeNum")
    def max_inode_num(self) -> int:
        """
        The max number of inode in the vepfs fileset.
        """
        return pulumi.get(self, "max_inode_num")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The query status list of Vepfs Fileset.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class MountServiceAttachFileSystem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "customerPath":
            suggest = "customer_path"
        elif key == "fileSystemId":
            suggest = "file_system_id"
        elif key == "fileSystemName":
            suggest = "file_system_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MountServiceAttachFileSystem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MountServiceAttachFileSystem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MountServiceAttachFileSystem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 customer_path: Optional[str] = None,
                 file_system_id: Optional[str] = None,
                 file_system_name: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str account_id: The account id of the vepfs file system.
        :param str customer_path: The id of the vepfs file system.
        :param str file_system_id: The id of the vepfs file system.
        :param str file_system_name: The name of the vepfs file system.
        :param str status: The status of the mount service.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if customer_path is not None:
            pulumi.set(__self__, "customer_path", customer_path)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if file_system_name is not None:
            pulumi.set(__self__, "file_system_name", file_system_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        The account id of the vepfs file system.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="customerPath")
    def customer_path(self) -> Optional[str]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "customer_path")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[str]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemName")
    def file_system_name(self) -> Optional[str]:
        """
        The name of the vepfs file system.
        """
        return pulumi.get(self, "file_system_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the mount service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class MountServiceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultPassword":
            suggest = "default_password"
        elif key == "nodeId":
            suggest = "node_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MountServiceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MountServiceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MountServiceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_password: Optional[str] = None,
                 node_id: Optional[str] = None):
        """
        :param str default_password: The default password of ecs instance.
        :param str node_id: The id of ecs instance.
        """
        if default_password is not None:
            pulumi.set(__self__, "default_password", default_password)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)

    @property
    @pulumi.getter(name="defaultPassword")
    def default_password(self) -> Optional[str]:
        """
        The default password of ecs instance.
        """
        return pulumi.get(self, "default_password")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[str]:
        """
        The id of ecs instance.
        """
        return pulumi.get(self, "node_id")


@pulumi.output_type
class MountServicesMountServiceResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 attach_file_systems: Sequence['outputs.MountServicesMountServiceAttachFileSystemResult'],
                 create_time: str,
                 id: str,
                 mount_service_id: str,
                 mount_service_name: str,
                 nodes: Sequence['outputs.MountServicesMountServiceNodeResult'],
                 project: str,
                 region_id: str,
                 status: str,
                 subnet_id: str,
                 vpc_id: str,
                 zone_id: str,
                 zone_name: str):
        """
        :param str account_id: The account id of the vepfs file system.
        :param Sequence['MountServicesMountServiceAttachFileSystemArgs'] attach_file_systems: The attached file system info of the mount service.
        :param str create_time: The created time of the mount service.
        :param str id: The id of the mount service.
        :param str mount_service_id: The id of mount service.
        :param str mount_service_name: The name of mount service. This field support fuzzy query.
        :param Sequence['MountServicesMountServiceNodeArgs'] nodes: The nodes info of the mount service.
        :param str project: The project of the mount service.
        :param str region_id: The region id of the mount service.
        :param str status: The query status list of mount service.
        :param str subnet_id: The subnet id of the mount service.
        :param str vpc_id: The vpc id of the mount service.
        :param str zone_id: The zone id of the mount service.
        :param str zone_name: The zone name of the mount service.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "attach_file_systems", attach_file_systems)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mount_service_id", mount_service_id)
        pulumi.set(__self__, "mount_service_name", mount_service_name)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account id of the vepfs file system.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="attachFileSystems")
    def attach_file_systems(self) -> Sequence['outputs.MountServicesMountServiceAttachFileSystemResult']:
        """
        The attached file system info of the mount service.
        """
        return pulumi.get(self, "attach_file_systems")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The created time of the mount service.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the mount service.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mountServiceId")
    def mount_service_id(self) -> str:
        """
        The id of mount service.
        """
        return pulumi.get(self, "mount_service_id")

    @property
    @pulumi.getter(name="mountServiceName")
    def mount_service_name(self) -> str:
        """
        The name of mount service. This field support fuzzy query.
        """
        return pulumi.get(self, "mount_service_name")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.MountServicesMountServiceNodeResult']:
        """
        The nodes info of the mount service.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project of the mount service.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The region id of the mount service.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The query status list of mount service.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet id of the mount service.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The vpc id of the mount service.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone id of the mount service.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        The zone name of the mount service.
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class MountServicesMountServiceAttachFileSystemResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 customer_path: str,
                 file_system_id: str,
                 file_system_name: str,
                 status: str):
        """
        :param str account_id: The account id of the vepfs file system.
        :param str customer_path: The id of the vepfs file system.
        :param str file_system_id: The id of Vepfs File System.
        :param str file_system_name: The name of the vepfs file system.
        :param str status: The query status list of mount service.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "customer_path", customer_path)
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "file_system_name", file_system_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account id of the vepfs file system.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="customerPath")
    def customer_path(self) -> str:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "customer_path")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The id of Vepfs File System.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemName")
    def file_system_name(self) -> str:
        """
        The name of the vepfs file system.
        """
        return pulumi.get(self, "file_system_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The query status list of mount service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class MountServicesMountServiceNodeResult(dict):
    def __init__(__self__, *,
                 default_password: str,
                 node_id: str):
        """
        :param str default_password: The default password of ecs instance.
        :param str node_id: The id of ecs instance.
        """
        pulumi.set(__self__, "default_password", default_password)
        pulumi.set(__self__, "node_id", node_id)

    @property
    @pulumi.getter(name="defaultPassword")
    def default_password(self) -> str:
        """
        The default password of ecs instance.
        """
        return pulumi.get(self, "default_password")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        The id of ecs instance.
        """
        return pulumi.get(self, "node_id")


