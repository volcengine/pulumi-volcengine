# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['MountServiceAttachmentArgs', 'MountServiceAttachment']

@pulumi.input_type
class MountServiceAttachmentArgs:
    def __init__(__self__, *,
                 file_system_id: pulumi.Input[str],
                 mount_service_id: pulumi.Input[str],
                 customer_path: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MountServiceAttachment resource.
        :param pulumi.Input[str] file_system_id: The id of the vepfs file system.
        :param pulumi.Input[str] mount_service_id: The id of the mount service.
        :param pulumi.Input[str] customer_path: The custom mount directory, the default value is file system id.
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "mount_service_id", mount_service_id)
        if customer_path is not None:
            pulumi.set(__self__, "customer_path", customer_path)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Input[str]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="mountServiceId")
    def mount_service_id(self) -> pulumi.Input[str]:
        """
        The id of the mount service.
        """
        return pulumi.get(self, "mount_service_id")

    @mount_service_id.setter
    def mount_service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_service_id", value)

    @property
    @pulumi.getter(name="customerPath")
    def customer_path(self) -> Optional[pulumi.Input[str]]:
        """
        The custom mount directory, the default value is file system id.
        """
        return pulumi.get(self, "customer_path")

    @customer_path.setter
    def customer_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_path", value)


@pulumi.input_type
class _MountServiceAttachmentState:
    def __init__(__self__, *,
                 attach_status: Optional[pulumi.Input[str]] = None,
                 customer_path: Optional[pulumi.Input[str]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 mount_service_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MountServiceAttachment resources.
        :param pulumi.Input[str] attach_status: The attach status of the vepfs file system.
        :param pulumi.Input[str] customer_path: The custom mount directory, the default value is file system id.
        :param pulumi.Input[str] file_system_id: The id of the vepfs file system.
        :param pulumi.Input[str] mount_service_id: The id of the mount service.
        """
        if attach_status is not None:
            pulumi.set(__self__, "attach_status", attach_status)
        if customer_path is not None:
            pulumi.set(__self__, "customer_path", customer_path)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if mount_service_id is not None:
            pulumi.set(__self__, "mount_service_id", mount_service_id)

    @property
    @pulumi.getter(name="attachStatus")
    def attach_status(self) -> Optional[pulumi.Input[str]]:
        """
        The attach status of the vepfs file system.
        """
        return pulumi.get(self, "attach_status")

    @attach_status.setter
    def attach_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attach_status", value)

    @property
    @pulumi.getter(name="customerPath")
    def customer_path(self) -> Optional[pulumi.Input[str]]:
        """
        The custom mount directory, the default value is file system id.
        """
        return pulumi.get(self, "customer_path")

    @customer_path.setter
    def customer_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_path", value)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="mountServiceId")
    def mount_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the mount service.
        """
        return pulumi.get(self, "mount_service_id")

    @mount_service_id.setter
    def mount_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_service_id", value)


class MountServiceAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 customer_path: Optional[pulumi.Input[str]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 mount_service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage vepfs mount service attachment
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id="cn-beijing-a",
            vpc_id=foo_vpc.id)
        foo_file_system = volcengine.vepfs.FileSystem("fooFileSystem",
            file_system_name="acc-test-file-system",
            subnet_id=foo_subnet.id,
            store_type="Advance_100",
            description="tf-test",
            capacity=12,
            project="default",
            enable_restripe=False,
            tags=[volcengine.vepfs.FileSystemTagArgs(
                key="k1",
                value="v1",
            )])
        foo_mount_service = volcengine.vepfs.MountService("fooMountService",
            mount_service_name="acc-test-mount-service",
            subnet_id=foo_subnet.id,
            node_type="ecs.g1ie.large",
            project="default")
        foo_mount_service_attachment = volcengine.vepfs.MountServiceAttachment("fooMountServiceAttachment",
            mount_service_id=foo_mount_service.id,
            file_system_id=foo_file_system.id)
        ```

        ## Import

        VepfsMountServiceAttachment can be imported using the mount_service_id:file_system_id, e.g.

        ```sh
         $ pulumi import volcengine:vepfs/mountServiceAttachment:MountServiceAttachment default mount_service_id:file_system_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] customer_path: The custom mount directory, the default value is file system id.
        :param pulumi.Input[str] file_system_id: The id of the vepfs file system.
        :param pulumi.Input[str] mount_service_id: The id of the mount service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MountServiceAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vepfs mount service attachment
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id="cn-beijing-a",
            vpc_id=foo_vpc.id)
        foo_file_system = volcengine.vepfs.FileSystem("fooFileSystem",
            file_system_name="acc-test-file-system",
            subnet_id=foo_subnet.id,
            store_type="Advance_100",
            description="tf-test",
            capacity=12,
            project="default",
            enable_restripe=False,
            tags=[volcengine.vepfs.FileSystemTagArgs(
                key="k1",
                value="v1",
            )])
        foo_mount_service = volcengine.vepfs.MountService("fooMountService",
            mount_service_name="acc-test-mount-service",
            subnet_id=foo_subnet.id,
            node_type="ecs.g1ie.large",
            project="default")
        foo_mount_service_attachment = volcengine.vepfs.MountServiceAttachment("fooMountServiceAttachment",
            mount_service_id=foo_mount_service.id,
            file_system_id=foo_file_system.id)
        ```

        ## Import

        VepfsMountServiceAttachment can be imported using the mount_service_id:file_system_id, e.g.

        ```sh
         $ pulumi import volcengine:vepfs/mountServiceAttachment:MountServiceAttachment default mount_service_id:file_system_id
        ```

        :param str resource_name: The name of the resource.
        :param MountServiceAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MountServiceAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 customer_path: Optional[pulumi.Input[str]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 mount_service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MountServiceAttachmentArgs.__new__(MountServiceAttachmentArgs)

            __props__.__dict__["customer_path"] = customer_path
            if file_system_id is None and not opts.urn:
                raise TypeError("Missing required property 'file_system_id'")
            __props__.__dict__["file_system_id"] = file_system_id
            if mount_service_id is None and not opts.urn:
                raise TypeError("Missing required property 'mount_service_id'")
            __props__.__dict__["mount_service_id"] = mount_service_id
            __props__.__dict__["attach_status"] = None
        super(MountServiceAttachment, __self__).__init__(
            'volcengine:vepfs/mountServiceAttachment:MountServiceAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attach_status: Optional[pulumi.Input[str]] = None,
            customer_path: Optional[pulumi.Input[str]] = None,
            file_system_id: Optional[pulumi.Input[str]] = None,
            mount_service_id: Optional[pulumi.Input[str]] = None) -> 'MountServiceAttachment':
        """
        Get an existing MountServiceAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attach_status: The attach status of the vepfs file system.
        :param pulumi.Input[str] customer_path: The custom mount directory, the default value is file system id.
        :param pulumi.Input[str] file_system_id: The id of the vepfs file system.
        :param pulumi.Input[str] mount_service_id: The id of the mount service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MountServiceAttachmentState.__new__(_MountServiceAttachmentState)

        __props__.__dict__["attach_status"] = attach_status
        __props__.__dict__["customer_path"] = customer_path
        __props__.__dict__["file_system_id"] = file_system_id
        __props__.__dict__["mount_service_id"] = mount_service_id
        return MountServiceAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attachStatus")
    def attach_status(self) -> pulumi.Output[str]:
        """
        The attach status of the vepfs file system.
        """
        return pulumi.get(self, "attach_status")

    @property
    @pulumi.getter(name="customerPath")
    def customer_path(self) -> pulumi.Output[str]:
        """
        The custom mount directory, the default value is file system id.
        """
        return pulumi.get(self, "customer_path")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Output[str]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="mountServiceId")
    def mount_service_id(self) -> pulumi.Output[str]:
        """
        The id of the mount service.
        """
        return pulumi.get(self, "mount_service_id")

