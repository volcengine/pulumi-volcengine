# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'MountServicesResult',
    'AwaitableMountServicesResult',
    'mount_services',
    'mount_services_output',
]

@pulumi.output_type
class MountServicesResult:
    """
    A collection of values returned by MountServices.
    """
    def __init__(__self__, file_system_id=None, id=None, mount_service_id=None, mount_service_name=None, mount_services=None, name_regex=None, output_file=None, statuses=None, total_count=None):
        if file_system_id and not isinstance(file_system_id, str):
            raise TypeError("Expected argument 'file_system_id' to be a str")
        pulumi.set(__self__, "file_system_id", file_system_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mount_service_id and not isinstance(mount_service_id, str):
            raise TypeError("Expected argument 'mount_service_id' to be a str")
        pulumi.set(__self__, "mount_service_id", mount_service_id)
        if mount_service_name and not isinstance(mount_service_name, str):
            raise TypeError("Expected argument 'mount_service_name' to be a str")
        pulumi.set(__self__, "mount_service_name", mount_service_name)
        if mount_services and not isinstance(mount_services, list):
            raise TypeError("Expected argument 'mount_services' to be a list")
        pulumi.set(__self__, "mount_services", mount_services)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[str]:
        """
        The id of the vepfs file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mountServiceId")
    def mount_service_id(self) -> Optional[str]:
        """
        The id of the mount service.
        """
        return pulumi.get(self, "mount_service_id")

    @property
    @pulumi.getter(name="mountServiceName")
    def mount_service_name(self) -> Optional[str]:
        """
        The name of the mount service.
        """
        return pulumi.get(self, "mount_service_name")

    @property
    @pulumi.getter(name="mountServices")
    def mount_services(self) -> Sequence['outputs.MountServicesMountServiceResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "mount_services")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        """
        The status of the mount service.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableMountServicesResult(MountServicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return MountServicesResult(
            file_system_id=self.file_system_id,
            id=self.id,
            mount_service_id=self.mount_service_id,
            mount_service_name=self.mount_service_name,
            mount_services=self.mount_services,
            name_regex=self.name_regex,
            output_file=self.output_file,
            statuses=self.statuses,
            total_count=self.total_count)


def mount_services(file_system_id: Optional[str] = None,
                   mount_service_id: Optional[str] = None,
                   mount_service_name: Optional[str] = None,
                   name_regex: Optional[str] = None,
                   output_file: Optional[str] = None,
                   statuses: Optional[Sequence[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableMountServicesResult:
    """
    Use this data source to query detailed information of vepfs mount services
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id="cn-beijing-a",
        vpc_id=foo_vpc.id)
    foo_mount_service = volcengine.vepfs.MountService("fooMountService",
        mount_service_name="acc-test-mount-service",
        subnet_id=foo_subnet.id,
        node_type="ecs.g1ie.large",
        project="default")
    foo_mount_services = volcengine.vepfs.mount_services_output(mount_service_id=foo_mount_service.id)
    ```


    :param str file_system_id: The id of Vepfs File System.
    :param str mount_service_id: The id of mount service.
    :param str mount_service_name: The name of mount service. This field support fuzzy query.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] statuses: The query status list of mount service.
    """
    __args__ = dict()
    __args__['fileSystemId'] = file_system_id
    __args__['mountServiceId'] = mount_service_id
    __args__['mountServiceName'] = mount_service_name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vepfs/mountServices:MountServices', __args__, opts=opts, typ=MountServicesResult).value

    return AwaitableMountServicesResult(
        file_system_id=pulumi.get(__ret__, 'file_system_id'),
        id=pulumi.get(__ret__, 'id'),
        mount_service_id=pulumi.get(__ret__, 'mount_service_id'),
        mount_service_name=pulumi.get(__ret__, 'mount_service_name'),
        mount_services=pulumi.get(__ret__, 'mount_services'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        statuses=pulumi.get(__ret__, 'statuses'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(mount_services)
def mount_services_output(file_system_id: Optional[pulumi.Input[Optional[str]]] = None,
                          mount_service_id: Optional[pulumi.Input[Optional[str]]] = None,
                          mount_service_name: Optional[pulumi.Input[Optional[str]]] = None,
                          name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                          output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[MountServicesResult]:
    """
    Use this data source to query detailed information of vepfs mount services
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id="cn-beijing-a",
        vpc_id=foo_vpc.id)
    foo_mount_service = volcengine.vepfs.MountService("fooMountService",
        mount_service_name="acc-test-mount-service",
        subnet_id=foo_subnet.id,
        node_type="ecs.g1ie.large",
        project="default")
    foo_mount_services = volcengine.vepfs.mount_services_output(mount_service_id=foo_mount_service.id)
    ```


    :param str file_system_id: The id of Vepfs File System.
    :param str mount_service_id: The id of mount service.
    :param str mount_service_name: The name of mount service. This field support fuzzy query.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] statuses: The query status list of mount service.
    """
    ...
