# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BackupsBackupInfoResult',
    'RecordSetsRecordSetResult',
    'RecordsRecordResult',
    'ZoneTag',
    'ZonesTagResult',
    'ZonesZoneResult',
    'ZonesZoneTagResult',
]

@pulumi.output_type
class BackupsBackupInfoResult(dict):
    def __init__(__self__, *,
                 backup_id: str,
                 backup_time: str,
                 record_count: int):
        """
        :param str backup_id: The ID of the backup.
        :param str backup_time: The time when the backup was created. The time zone is UTC + 8.
        :param int record_count: The number of DNS records in the backup.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_time", backup_time)
        pulumi.set(__self__, "record_count", record_count)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        """
        The ID of the backup.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> str:
        """
        The time when the backup was created. The time zone is UTC + 8.
        """
        return pulumi.get(self, "backup_time")

    @property
    @pulumi.getter(name="recordCount")
    def record_count(self) -> int:
        """
        The number of DNS records in the backup.
        """
        return pulumi.get(self, "record_count")


@pulumi.output_type
class RecordSetsRecordSetResult(dict):
    def __init__(__self__, *,
                 host: str,
                 id: str,
                 line: str,
                 pqdn: str,
                 type: str,
                 weight_enabled: bool):
        """
        :param str host: The domain prefix of the record set.
        :param str id: The ID of the DNS record set.
        :param str line: The line code corresponding to the DNS record set.
        :param str pqdn: The domain prefix contained in the DNS record set, in PQDN (Partially Qualified Domain Name) format.
        :param str type: The type of DNS records in the DNS record set.
        :param bool weight_enabled: Indicates whether load balancing is enabled for the DNS record set.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "line", line)
        pulumi.set(__self__, "pqdn", pqdn)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "weight_enabled", weight_enabled)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The domain prefix of the record set.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the DNS record set.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def line(self) -> str:
        """
        The line code corresponding to the DNS record set.
        """
        return pulumi.get(self, "line")

    @property
    @pulumi.getter
    def pqdn(self) -> str:
        """
        The domain prefix contained in the DNS record set, in PQDN (Partially Qualified Domain Name) format.
        """
        return pulumi.get(self, "pqdn")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of DNS records in the DNS record set.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="weightEnabled")
    def weight_enabled(self) -> bool:
        """
        Indicates whether load balancing is enabled for the DNS record set.
        """
        return pulumi.get(self, "weight_enabled")


@pulumi.output_type
class RecordsRecordResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 enable: bool,
                 host: str,
                 line: str,
                 operators: Sequence[str],
                 pqdn: str,
                 record_id: str,
                 record_set_id: str,
                 remark: str,
                 tags: Sequence[str],
                 ttl: int,
                 type: str,
                 updated_at: str,
                 value: str,
                 weight: int):
        """
        :param str created_at: The creation time of the domain.
        :param bool enable: Indicates whether the DNS record is enabled.
        :param str host: Domain prefix of the DNS record.
        :param str line: Line of the DNS record.
        :param Sequence[str] operators: The account ID that called this API.
        :param str pqdn: The hostname included in the DNS record, in PQDN (Partially Qualified Domain Name) format.
        :param str record_id: The ID of the DNS record.
        :param str record_set_id: The ID of the record set to which the DNS record belongs.
        :param str remark: The remark of the DNS record.
        :param Sequence[str] tags: The tag information of the DNS record.
        :param int ttl: The Time to Live (TTL) of the DNS record. The unit is seconds.
        :param str type: Type of the DNS record.
        :param str updated_at: The most recent update time of the domain.
        :param str value: Value of the DNS record.
        :param int weight: The weight of the DNS record.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "line", line)
        pulumi.set(__self__, "operators", operators)
        pulumi.set(__self__, "pqdn", pqdn)
        pulumi.set(__self__, "record_id", record_id)
        pulumi.set(__self__, "record_set_id", record_set_id)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The creation time of the domain.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Indicates whether the DNS record is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Domain prefix of the DNS record.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def line(self) -> str:
        """
        Line of the DNS record.
        """
        return pulumi.get(self, "line")

    @property
    @pulumi.getter
    def operators(self) -> Sequence[str]:
        """
        The account ID that called this API.
        """
        return pulumi.get(self, "operators")

    @property
    @pulumi.getter
    def pqdn(self) -> str:
        """
        The hostname included in the DNS record, in PQDN (Partially Qualified Domain Name) format.
        """
        return pulumi.get(self, "pqdn")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> str:
        """
        The ID of the DNS record.
        """
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter(name="recordSetId")
    def record_set_id(self) -> str:
        """
        The ID of the record set to which the DNS record belongs.
        """
        return pulumi.get(self, "record_set_id")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        The remark of the DNS record.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The tag information of the DNS record.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        The Time to Live (TTL) of the DNS record. The unit is seconds.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the DNS record.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The most recent update time of the domain.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the DNS record.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        The weight of the DNS record.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ZoneTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ZonesTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The Key of Tags.
        :param Sequence[str] values: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ZonesZoneResult(dict):
    def __init__(__self__, *,
                 allocate_dns_server_lists: Sequence[str],
                 auto_renew: bool,
                 cache_stage: int,
                 created_at: str,
                 dns_security: str,
                 expired_time: int,
                 id: str,
                 instance_id: str,
                 instance_no: str,
                 is_ns_correct: bool,
                 is_sub_domain: bool,
                 last_operator: str,
                 project_name: str,
                 real_dns_server_lists: Sequence[str],
                 record_count: int,
                 remark: str,
                 stage: int,
                 sub_domain_host: str,
                 tags: Sequence['outputs.ZonesZoneTagResult'],
                 trade_code: str,
                 updated_at: str,
                 zid: int,
                 zone_name: str):
        """
        :param Sequence[str] allocate_dns_server_lists: The list of DNS servers allocated to the domain by BytePlus DNS.
        :param bool auto_renew: Whether automatic domain renewal is enabled.
        :param int cache_stage: The most recent update time of the domain.
        :param str created_at: The creation time of the domain.
        :param str dns_security: The version of DNS DDoS protection service.
        :param int expired_time: The expiration time of the domain.
        :param str id: The id of the zone.
        :param str instance_id: The ID of the instance.
        :param str instance_no: The ID of the instance. For free edition, the value of this field is null.
        :param bool is_ns_correct: Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
        :param bool is_sub_domain: Whether the domain is a subdomain.
        :param str last_operator: The ID of the account that last updated this domain.
        :param str project_name: The ProjectName of the domain.
        :param Sequence[str] real_dns_server_lists: The list of DNS servers actually used by the domain.
        :param int record_count: The total number of DNS records contained in the domain.
        :param str remark: The remarks for the domain.
        :param int stage: The status of the domain.
        :param str sub_domain_host: The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
        :param Sequence['ZonesZoneTagArgs'] tags: Tags.
        :param str trade_code: The edition of the domain.
        :param str updated_at: The most recent update time of the domain.
        :param int zid: The ID of the domain.
        :param str zone_name: The domain name.
        """
        pulumi.set(__self__, "allocate_dns_server_lists", allocate_dns_server_lists)
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "cache_stage", cache_stage)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "dns_security", dns_security)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_no", instance_no)
        pulumi.set(__self__, "is_ns_correct", is_ns_correct)
        pulumi.set(__self__, "is_sub_domain", is_sub_domain)
        pulumi.set(__self__, "last_operator", last_operator)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "real_dns_server_lists", real_dns_server_lists)
        pulumi.set(__self__, "record_count", record_count)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "sub_domain_host", sub_domain_host)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "trade_code", trade_code)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "zid", zid)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="allocateDnsServerLists")
    def allocate_dns_server_lists(self) -> Sequence[str]:
        """
        The list of DNS servers allocated to the domain by BytePlus DNS.
        """
        return pulumi.get(self, "allocate_dns_server_lists")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> bool:
        """
        Whether automatic domain renewal is enabled.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="cacheStage")
    def cache_stage(self) -> int:
        """
        The most recent update time of the domain.
        """
        return pulumi.get(self, "cache_stage")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The creation time of the domain.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dnsSecurity")
    def dns_security(self) -> str:
        """
        The version of DNS DDoS protection service.
        """
        return pulumi.get(self, "dns_security")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> int:
        """
        The expiration time of the domain.
        """
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceNo")
    def instance_no(self) -> str:
        """
        The ID of the instance. For free edition, the value of this field is null.
        """
        return pulumi.get(self, "instance_no")

    @property
    @pulumi.getter(name="isNsCorrect")
    def is_ns_correct(self) -> bool:
        """
        Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
        """
        return pulumi.get(self, "is_ns_correct")

    @property
    @pulumi.getter(name="isSubDomain")
    def is_sub_domain(self) -> bool:
        """
        Whether the domain is a subdomain.
        """
        return pulumi.get(self, "is_sub_domain")

    @property
    @pulumi.getter(name="lastOperator")
    def last_operator(self) -> str:
        """
        The ID of the account that last updated this domain.
        """
        return pulumi.get(self, "last_operator")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The ProjectName of the domain.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="realDnsServerLists")
    def real_dns_server_lists(self) -> Sequence[str]:
        """
        The list of DNS servers actually used by the domain.
        """
        return pulumi.get(self, "real_dns_server_lists")

    @property
    @pulumi.getter(name="recordCount")
    def record_count(self) -> int:
        """
        The total number of DNS records contained in the domain.
        """
        return pulumi.get(self, "record_count")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        The remarks for the domain.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def stage(self) -> int:
        """
        The status of the domain.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter(name="subDomainHost")
    def sub_domain_host(self) -> str:
        """
        The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
        """
        return pulumi.get(self, "sub_domain_host")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.ZonesZoneTagResult']:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tradeCode")
    def trade_code(self) -> str:
        """
        The edition of the domain.
        """
        return pulumi.get(self, "trade_code")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The most recent update time of the domain.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def zid(self) -> int:
        """
        The ID of the domain.
        """
        return pulumi.get(self, "zid")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        The domain name.
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class ZonesZoneTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


