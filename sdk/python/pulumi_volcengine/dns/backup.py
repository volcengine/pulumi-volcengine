# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BackupArgs', 'Backup']

@pulumi.input_type
class BackupArgs:
    def __init__(__self__, *,
                 zid: pulumi.Input[int]):
        """
        The set of arguments for constructing a Backup resource.
        :param pulumi.Input[int] zid: The ID of the domain for which you want to get the backup schedule.
        """
        pulumi.set(__self__, "zid", zid)

    @property
    @pulumi.getter
    def zid(self) -> pulumi.Input[int]:
        """
        The ID of the domain for which you want to get the backup schedule.
        """
        return pulumi.get(self, "zid")

    @zid.setter
    def zid(self, value: pulumi.Input[int]):
        pulumi.set(self, "zid", value)


@pulumi.input_type
class _BackupState:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[str]] = None,
                 backup_time: Optional[pulumi.Input[str]] = None,
                 zid: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Backup resources.
        :param pulumi.Input[str] backup_id: The ID of backup.
        :param pulumi.Input[str] backup_time: Time when the backup was created. Timezone is UTC.
        :param pulumi.Input[int] zid: The ID of the domain for which you want to get the backup schedule.
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if backup_time is not None:
            pulumi.set(__self__, "backup_time", backup_time)
        if zid is not None:
            pulumi.set(__self__, "zid", zid)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of backup.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_id", value)

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time when the backup was created. Timezone is UTC.
        """
        return pulumi.get(self, "backup_time")

    @backup_time.setter
    def backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_time", value)

    @property
    @pulumi.getter
    def zid(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the domain for which you want to get the backup schedule.
        """
        return pulumi.get(self, "zid")

    @zid.setter
    def zid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zid", value)


class Backup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 zid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage dns backup
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.dns.Backup("foo", zid=58846)
        ```

        ## Import

        DnsBackup can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:dns/backup:Backup default ZID:BackupID
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] zid: The ID of the domain for which you want to get the backup schedule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage dns backup
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.dns.Backup("foo", zid=58846)
        ```

        ## Import

        DnsBackup can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:dns/backup:Backup default ZID:BackupID
        ```

        :param str resource_name: The name of the resource.
        :param BackupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 zid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupArgs.__new__(BackupArgs)

            if zid is None and not opts.urn:
                raise TypeError("Missing required property 'zid'")
            __props__.__dict__["zid"] = zid
            __props__.__dict__["backup_id"] = None
            __props__.__dict__["backup_time"] = None
        super(Backup, __self__).__init__(
            'volcengine:dns/backup:Backup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_id: Optional[pulumi.Input[str]] = None,
            backup_time: Optional[pulumi.Input[str]] = None,
            zid: Optional[pulumi.Input[int]] = None) -> 'Backup':
        """
        Get an existing Backup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_id: The ID of backup.
        :param pulumi.Input[str] backup_time: Time when the backup was created. Timezone is UTC.
        :param pulumi.Input[int] zid: The ID of the domain for which you want to get the backup schedule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupState.__new__(_BackupState)

        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["backup_time"] = backup_time
        __props__.__dict__["zid"] = zid
        return Backup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[str]:
        """
        The ID of backup.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> pulumi.Output[str]:
        """
        Time when the backup was created. Timezone is UTC.
        """
        return pulumi.get(self, "backup_time")

    @property
    @pulumi.getter
    def zid(self) -> pulumi.Output[int]:
        """
        The ID of the domain for which you want to get the backup schedule.
        """
        return pulumi.get(self, "zid")

