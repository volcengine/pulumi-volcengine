# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RecordArgs', 'Record']

@pulumi.input_type
class RecordArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 zid: pulumi.Input[int],
                 line: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Record resource.
        :param pulumi.Input[str] host: The host record, which is the domain prefix of the subdomain.
        :param pulumi.Input[str] type: The record type.
        :param pulumi.Input[str] value: The value of the DNS record.
        :param pulumi.Input[int] zid: The ID of the domain to which you want to add a DNS record.
        :param pulumi.Input[str] line: The value of the DNS record.
        :param pulumi.Input[str] remark: The remark for the DNS record.
        :param pulumi.Input[int] ttl: The Time-To-Live (TTL) of the DNS record, in seconds.
        :param pulumi.Input[int] weight: The weight of the DNS record.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "zid", zid)
        if line is not None:
            pulumi.set(__self__, "line", line)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host record, which is the domain prefix of the subdomain.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The record type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the DNS record.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def zid(self) -> pulumi.Input[int]:
        """
        The ID of the domain to which you want to add a DNS record.
        """
        return pulumi.get(self, "zid")

    @zid.setter
    def zid(self, value: pulumi.Input[int]):
        pulumi.set(self, "zid", value)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the DNS record.
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remark for the DNS record.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The Time-To-Live (TTL) of the DNS record, in seconds.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight of the DNS record.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _RecordState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 line: Optional[pulumi.Input[str]] = None,
                 operators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pqdn: Optional[pulumi.Input[str]] = None,
                 record_id: Optional[pulumi.Input[str]] = None,
                 record_set_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zid: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Record resources.
        :param pulumi.Input[str] created_at: The creation time of the domain.
        :param pulumi.Input[bool] enable: Whether the DNS record is enabled.
        :param pulumi.Input[str] host: The host record, which is the domain prefix of the subdomain.
        :param pulumi.Input[str] line: The value of the DNS record.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] operators: The account ID that called this API.
        :param pulumi.Input[str] pqdn: The account ID that called this API.
        :param pulumi.Input[str] record_id: The ID of the DNS record.
        :param pulumi.Input[str] record_set_id: The ID of the record set where the DNS record is located.
        :param pulumi.Input[str] remark: The remark for the DNS record.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The tag information of the DNS record.
        :param pulumi.Input[int] ttl: The Time-To-Live (TTL) of the DNS record, in seconds.
        :param pulumi.Input[str] type: The record type.
        :param pulumi.Input[str] updated_at: The update time of the domain.
        :param pulumi.Input[str] value: The value of the DNS record.
        :param pulumi.Input[int] weight: The weight of the DNS record.
        :param pulumi.Input[int] zid: The ID of the domain to which you want to add a DNS record.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if line is not None:
            pulumi.set(__self__, "line", line)
        if operators is not None:
            pulumi.set(__self__, "operators", operators)
        if pqdn is not None:
            pulumi.set(__self__, "pqdn", pqdn)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if record_set_id is not None:
            pulumi.set(__self__, "record_set_id", record_set_id)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if zid is not None:
            pulumi.set(__self__, "zid", zid)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of the domain.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the DNS record is enabled.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The host record, which is the domain prefix of the subdomain.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the DNS record.
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line", value)

    @property
    @pulumi.getter
    def operators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The account ID that called this API.
        """
        return pulumi.get(self, "operators")

    @operators.setter
    def operators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "operators", value)

    @property
    @pulumi.getter
    def pqdn(self) -> Optional[pulumi.Input[str]]:
        """
        The account ID that called this API.
        """
        return pulumi.get(self, "pqdn")

    @pqdn.setter
    def pqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pqdn", value)

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the DNS record.
        """
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_id", value)

    @property
    @pulumi.getter(name="recordSetId")
    def record_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the record set where the DNS record is located.
        """
        return pulumi.get(self, "record_set_id")

    @record_set_id.setter
    def record_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_set_id", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remark for the DNS record.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The tag information of the DNS record.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The Time-To-Live (TTL) of the DNS record, in seconds.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The record type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of the domain.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the DNS record.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight of the DNS record.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter
    def zid(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the domain to which you want to add a DNS record.
        """
        return pulumi.get(self, "zid")

    @zid.setter
    def zid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zid", value)


class Record(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 line: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage dns record
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.dns.Record("foo",
            host="a.com",
            type="A",
            value="1.1.1.2",
            zid=58846)
        ```

        ## Import

        DnsRecord can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:dns/record:Record default ZID:recordId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] host: The host record, which is the domain prefix of the subdomain.
        :param pulumi.Input[str] line: The value of the DNS record.
        :param pulumi.Input[str] remark: The remark for the DNS record.
        :param pulumi.Input[int] ttl: The Time-To-Live (TTL) of the DNS record, in seconds.
        :param pulumi.Input[str] type: The record type.
        :param pulumi.Input[str] value: The value of the DNS record.
        :param pulumi.Input[int] weight: The weight of the DNS record.
        :param pulumi.Input[int] zid: The ID of the domain to which you want to add a DNS record.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RecordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage dns record
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.dns.Record("foo",
            host="a.com",
            type="A",
            value="1.1.1.2",
            zid=58846)
        ```

        ## Import

        DnsRecord can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:dns/record:Record default ZID:recordId
        ```

        :param str resource_name: The name of the resource.
        :param RecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 line: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RecordArgs.__new__(RecordArgs)

            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["line"] = line
            __props__.__dict__["remark"] = remark
            __props__.__dict__["ttl"] = ttl
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            __props__.__dict__["weight"] = weight
            if zid is None and not opts.urn:
                raise TypeError("Missing required property 'zid'")
            __props__.__dict__["zid"] = zid
            __props__.__dict__["created_at"] = None
            __props__.__dict__["enable"] = None
            __props__.__dict__["operators"] = None
            __props__.__dict__["pqdn"] = None
            __props__.__dict__["record_id"] = None
            __props__.__dict__["record_set_id"] = None
            __props__.__dict__["tags"] = None
            __props__.__dict__["updated_at"] = None
        super(Record, __self__).__init__(
            'volcengine:dns/record:Record',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            host: Optional[pulumi.Input[str]] = None,
            line: Optional[pulumi.Input[str]] = None,
            operators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            pqdn: Optional[pulumi.Input[str]] = None,
            record_id: Optional[pulumi.Input[str]] = None,
            record_set_id: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ttl: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[str]] = None,
            weight: Optional[pulumi.Input[int]] = None,
            zid: Optional[pulumi.Input[int]] = None) -> 'Record':
        """
        Get an existing Record resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: The creation time of the domain.
        :param pulumi.Input[bool] enable: Whether the DNS record is enabled.
        :param pulumi.Input[str] host: The host record, which is the domain prefix of the subdomain.
        :param pulumi.Input[str] line: The value of the DNS record.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] operators: The account ID that called this API.
        :param pulumi.Input[str] pqdn: The account ID that called this API.
        :param pulumi.Input[str] record_id: The ID of the DNS record.
        :param pulumi.Input[str] record_set_id: The ID of the record set where the DNS record is located.
        :param pulumi.Input[str] remark: The remark for the DNS record.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The tag information of the DNS record.
        :param pulumi.Input[int] ttl: The Time-To-Live (TTL) of the DNS record, in seconds.
        :param pulumi.Input[str] type: The record type.
        :param pulumi.Input[str] updated_at: The update time of the domain.
        :param pulumi.Input[str] value: The value of the DNS record.
        :param pulumi.Input[int] weight: The weight of the DNS record.
        :param pulumi.Input[int] zid: The ID of the domain to which you want to add a DNS record.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RecordState.__new__(_RecordState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enable"] = enable
        __props__.__dict__["host"] = host
        __props__.__dict__["line"] = line
        __props__.__dict__["operators"] = operators
        __props__.__dict__["pqdn"] = pqdn
        __props__.__dict__["record_id"] = record_id
        __props__.__dict__["record_set_id"] = record_set_id
        __props__.__dict__["remark"] = remark
        __props__.__dict__["tags"] = tags
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["value"] = value
        __props__.__dict__["weight"] = weight
        __props__.__dict__["zid"] = zid
        return Record(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The creation time of the domain.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[bool]:
        """
        Whether the DNS record is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        The host record, which is the domain prefix of the subdomain.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def line(self) -> pulumi.Output[str]:
        """
        The value of the DNS record.
        """
        return pulumi.get(self, "line")

    @property
    @pulumi.getter
    def operators(self) -> pulumi.Output[Sequence[str]]:
        """
        The account ID that called this API.
        """
        return pulumi.get(self, "operators")

    @property
    @pulumi.getter
    def pqdn(self) -> pulumi.Output[str]:
        """
        The account ID that called this API.
        """
        return pulumi.get(self, "pqdn")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> pulumi.Output[str]:
        """
        The ID of the DNS record.
        """
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter(name="recordSetId")
    def record_set_id(self) -> pulumi.Output[str]:
        """
        The ID of the record set where the DNS record is located.
        """
        return pulumi.get(self, "record_set_id")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[str]:
        """
        The remark for the DNS record.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[str]]:
        """
        The tag information of the DNS record.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[int]:
        """
        The Time-To-Live (TTL) of the DNS record, in seconds.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The record type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The update time of the domain.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        """
        The value of the DNS record.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[int]:
        """
        The weight of the DNS record.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter
    def zid(self) -> pulumi.Output[int]:
        """
        The ID of the domain to which you want to add a DNS record.
        """
        return pulumi.get(self, "zid")

