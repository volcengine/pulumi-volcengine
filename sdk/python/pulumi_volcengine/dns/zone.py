# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZoneArgs', 'Zone']

@pulumi.input_type
class ZoneArgs:
    def __init__(__self__, *,
                 zone_name: pulumi.Input[str],
                 project_name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]] = None):
        """
        The set of arguments for constructing a Zone resource.
        :param pulumi.Input[str] zone_name: The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
        :param pulumi.Input[str] project_name: The project to which the domain name belongs. The default value is default.
        :param pulumi.Input[str] remark: The remark for the domain.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]] tags: Tags.
        """
        pulumi.set(__self__, "zone_name", zone_name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> pulumi.Input[str]:
        """
        The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project to which the domain name belongs. The default value is default.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remark for the domain.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ZoneState:
    def __init__(__self__, *,
                 allocate_dns_server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 dns_security: Optional[pulumi.Input[str]] = None,
                 expired_time: Optional[pulumi.Input[int]] = None,
                 instance_no: Optional[pulumi.Input[str]] = None,
                 is_ns_correct: Optional[pulumi.Input[bool]] = None,
                 is_sub_domain: Optional[pulumi.Input[bool]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 real_dns_server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 record_count: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 stage: Optional[pulumi.Input[int]] = None,
                 sub_domain_host: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]] = None,
                 trade_code: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 zid: Optional[pulumi.Input[int]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Zone resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allocate_dns_server_lists: The list of DNS servers allocated to the domain by BytePlus DNS.
        :param pulumi.Input[bool] auto_renew: Whether automatic domain renewal is enabled.
        :param pulumi.Input[str] dns_security: The version of DNS DDoS protection service.
        :param pulumi.Input[int] expired_time: The expiration time of the domain.
        :param pulumi.Input[str] instance_no: The ID of the instance. For free edition, the value of this field is null.
        :param pulumi.Input[bool] is_ns_correct: Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
        :param pulumi.Input[bool] is_sub_domain: Whether the domain is a subdomain.
        :param pulumi.Input[str] project_name: The project to which the domain name belongs. The default value is default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] real_dns_server_lists: The list of DNS servers actually used by the domain.
        :param pulumi.Input[int] record_count: The total number of DNS records under the domain.
        :param pulumi.Input[str] remark: The remark for the domain.
        :param pulumi.Input[int] stage: The status of the domain.
        :param pulumi.Input[str] sub_domain_host: The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]] tags: Tags.
        :param pulumi.Input[str] trade_code: The edition of the domain.
        :param pulumi.Input[str] updated_at: The update time of the domain.
        :param pulumi.Input[int] zid: The ID of the domain.
        :param pulumi.Input[str] zone_name: The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
        """
        if allocate_dns_server_lists is not None:
            pulumi.set(__self__, "allocate_dns_server_lists", allocate_dns_server_lists)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if dns_security is not None:
            pulumi.set(__self__, "dns_security", dns_security)
        if expired_time is not None:
            pulumi.set(__self__, "expired_time", expired_time)
        if instance_no is not None:
            pulumi.set(__self__, "instance_no", instance_no)
        if is_ns_correct is not None:
            pulumi.set(__self__, "is_ns_correct", is_ns_correct)
        if is_sub_domain is not None:
            pulumi.set(__self__, "is_sub_domain", is_sub_domain)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if real_dns_server_lists is not None:
            pulumi.set(__self__, "real_dns_server_lists", real_dns_server_lists)
        if record_count is not None:
            pulumi.set(__self__, "record_count", record_count)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if stage is not None:
            pulumi.set(__self__, "stage", stage)
        if sub_domain_host is not None:
            pulumi.set(__self__, "sub_domain_host", sub_domain_host)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trade_code is not None:
            pulumi.set(__self__, "trade_code", trade_code)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if zid is not None:
            pulumi.set(__self__, "zid", zid)
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="allocateDnsServerLists")
    def allocate_dns_server_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of DNS servers allocated to the domain by BytePlus DNS.
        """
        return pulumi.get(self, "allocate_dns_server_lists")

    @allocate_dns_server_lists.setter
    def allocate_dns_server_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allocate_dns_server_lists", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether automatic domain renewal is enabled.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="dnsSecurity")
    def dns_security(self) -> Optional[pulumi.Input[str]]:
        """
        The version of DNS DDoS protection service.
        """
        return pulumi.get(self, "dns_security")

    @dns_security.setter
    def dns_security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_security", value)

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> Optional[pulumi.Input[int]]:
        """
        The expiration time of the domain.
        """
        return pulumi.get(self, "expired_time")

    @expired_time.setter
    def expired_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expired_time", value)

    @property
    @pulumi.getter(name="instanceNo")
    def instance_no(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the instance. For free edition, the value of this field is null.
        """
        return pulumi.get(self, "instance_no")

    @instance_no.setter
    def instance_no(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_no", value)

    @property
    @pulumi.getter(name="isNsCorrect")
    def is_ns_correct(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
        """
        return pulumi.get(self, "is_ns_correct")

    @is_ns_correct.setter
    def is_ns_correct(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ns_correct", value)

    @property
    @pulumi.getter(name="isSubDomain")
    def is_sub_domain(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the domain is a subdomain.
        """
        return pulumi.get(self, "is_sub_domain")

    @is_sub_domain.setter
    def is_sub_domain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_sub_domain", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project to which the domain name belongs. The default value is default.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="realDnsServerLists")
    def real_dns_server_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of DNS servers actually used by the domain.
        """
        return pulumi.get(self, "real_dns_server_lists")

    @real_dns_server_lists.setter
    def real_dns_server_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "real_dns_server_lists", value)

    @property
    @pulumi.getter(name="recordCount")
    def record_count(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of DNS records under the domain.
        """
        return pulumi.get(self, "record_count")

    @record_count.setter
    def record_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "record_count", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remark for the domain.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def stage(self) -> Optional[pulumi.Input[int]]:
        """
        The status of the domain.
        """
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stage", value)

    @property
    @pulumi.getter(name="subDomainHost")
    def sub_domain_host(self) -> Optional[pulumi.Input[str]]:
        """
        The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
        """
        return pulumi.get(self, "sub_domain_host")

    @sub_domain_host.setter
    def sub_domain_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_domain_host", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tradeCode")
    def trade_code(self) -> Optional[pulumi.Input[str]]:
        """
        The edition of the domain.
        """
        return pulumi.get(self, "trade_code")

    @trade_code.setter
    def trade_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trade_code", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of the domain.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def zid(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the domain.
        """
        return pulumi.get(self, "zid")

    @zid.setter
    def zid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zid", value)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_name", value)


class Zone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagArgs']]]]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage dns zone
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.dns.Zone("foo",
            project_name="xxx",
            remark="xxx",
            tags=[volcengine.dns.ZoneTagArgs(
                key="xx",
                value="xx",
            )],
            zone_name="xxxx.com")
        ```

        ## Import

        Zone can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:dns/zone:Zone default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] project_name: The project to which the domain name belongs. The default value is default.
        :param pulumi.Input[str] remark: The remark for the domain.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] zone_name: The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZoneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage dns zone
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.dns.Zone("foo",
            project_name="xxx",
            remark="xxx",
            tags=[volcengine.dns.ZoneTagArgs(
                key="xx",
                value="xx",
            )],
            zone_name="xxxx.com")
        ```

        ## Import

        Zone can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:dns/zone:Zone default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagArgs']]]]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZoneArgs.__new__(ZoneArgs)

            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["remark"] = remark
            __props__.__dict__["tags"] = tags
            if zone_name is None and not opts.urn:
                raise TypeError("Missing required property 'zone_name'")
            __props__.__dict__["zone_name"] = zone_name
            __props__.__dict__["allocate_dns_server_lists"] = None
            __props__.__dict__["auto_renew"] = None
            __props__.__dict__["dns_security"] = None
            __props__.__dict__["expired_time"] = None
            __props__.__dict__["instance_no"] = None
            __props__.__dict__["is_ns_correct"] = None
            __props__.__dict__["is_sub_domain"] = None
            __props__.__dict__["real_dns_server_lists"] = None
            __props__.__dict__["record_count"] = None
            __props__.__dict__["stage"] = None
            __props__.__dict__["sub_domain_host"] = None
            __props__.__dict__["trade_code"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["zid"] = None
        super(Zone, __self__).__init__(
            'volcengine:dns/zone:Zone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allocate_dns_server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            auto_renew: Optional[pulumi.Input[bool]] = None,
            dns_security: Optional[pulumi.Input[str]] = None,
            expired_time: Optional[pulumi.Input[int]] = None,
            instance_no: Optional[pulumi.Input[str]] = None,
            is_ns_correct: Optional[pulumi.Input[bool]] = None,
            is_sub_domain: Optional[pulumi.Input[bool]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            real_dns_server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            record_count: Optional[pulumi.Input[int]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            stage: Optional[pulumi.Input[int]] = None,
            sub_domain_host: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagArgs']]]]] = None,
            trade_code: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            zid: Optional[pulumi.Input[int]] = None,
            zone_name: Optional[pulumi.Input[str]] = None) -> 'Zone':
        """
        Get an existing Zone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allocate_dns_server_lists: The list of DNS servers allocated to the domain by BytePlus DNS.
        :param pulumi.Input[bool] auto_renew: Whether automatic domain renewal is enabled.
        :param pulumi.Input[str] dns_security: The version of DNS DDoS protection service.
        :param pulumi.Input[int] expired_time: The expiration time of the domain.
        :param pulumi.Input[str] instance_no: The ID of the instance. For free edition, the value of this field is null.
        :param pulumi.Input[bool] is_ns_correct: Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
        :param pulumi.Input[bool] is_sub_domain: Whether the domain is a subdomain.
        :param pulumi.Input[str] project_name: The project to which the domain name belongs. The default value is default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] real_dns_server_lists: The list of DNS servers actually used by the domain.
        :param pulumi.Input[int] record_count: The total number of DNS records under the domain.
        :param pulumi.Input[str] remark: The remark for the domain.
        :param pulumi.Input[int] stage: The status of the domain.
        :param pulumi.Input[str] sub_domain_host: The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] trade_code: The edition of the domain.
        :param pulumi.Input[str] updated_at: The update time of the domain.
        :param pulumi.Input[int] zid: The ID of the domain.
        :param pulumi.Input[str] zone_name: The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZoneState.__new__(_ZoneState)

        __props__.__dict__["allocate_dns_server_lists"] = allocate_dns_server_lists
        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["dns_security"] = dns_security
        __props__.__dict__["expired_time"] = expired_time
        __props__.__dict__["instance_no"] = instance_no
        __props__.__dict__["is_ns_correct"] = is_ns_correct
        __props__.__dict__["is_sub_domain"] = is_sub_domain
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["real_dns_server_lists"] = real_dns_server_lists
        __props__.__dict__["record_count"] = record_count
        __props__.__dict__["remark"] = remark
        __props__.__dict__["stage"] = stage
        __props__.__dict__["sub_domain_host"] = sub_domain_host
        __props__.__dict__["tags"] = tags
        __props__.__dict__["trade_code"] = trade_code
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["zid"] = zid
        __props__.__dict__["zone_name"] = zone_name
        return Zone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allocateDnsServerLists")
    def allocate_dns_server_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of DNS servers allocated to the domain by BytePlus DNS.
        """
        return pulumi.get(self, "allocate_dns_server_lists")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[bool]:
        """
        Whether automatic domain renewal is enabled.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="dnsSecurity")
    def dns_security(self) -> pulumi.Output[str]:
        """
        The version of DNS DDoS protection service.
        """
        return pulumi.get(self, "dns_security")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> pulumi.Output[int]:
        """
        The expiration time of the domain.
        """
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter(name="instanceNo")
    def instance_no(self) -> pulumi.Output[str]:
        """
        The ID of the instance. For free edition, the value of this field is null.
        """
        return pulumi.get(self, "instance_no")

    @property
    @pulumi.getter(name="isNsCorrect")
    def is_ns_correct(self) -> pulumi.Output[bool]:
        """
        Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
        """
        return pulumi.get(self, "is_ns_correct")

    @property
    @pulumi.getter(name="isSubDomain")
    def is_sub_domain(self) -> pulumi.Output[bool]:
        """
        Whether the domain is a subdomain.
        """
        return pulumi.get(self, "is_sub_domain")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The project to which the domain name belongs. The default value is default.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="realDnsServerLists")
    def real_dns_server_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of DNS servers actually used by the domain.
        """
        return pulumi.get(self, "real_dns_server_lists")

    @property
    @pulumi.getter(name="recordCount")
    def record_count(self) -> pulumi.Output[int]:
        """
        The total number of DNS records under the domain.
        """
        return pulumi.get(self, "record_count")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        The remark for the domain.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Output[int]:
        """
        The status of the domain.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter(name="subDomainHost")
    def sub_domain_host(self) -> pulumi.Output[str]:
        """
        The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
        """
        return pulumi.get(self, "sub_domain_host")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.ZoneTag']]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tradeCode")
    def trade_code(self) -> pulumi.Output[str]:
        """
        The edition of the domain.
        """
        return pulumi.get(self, "trade_code")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The update time of the domain.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def zid(self) -> pulumi.Output[int]:
        """
        The ID of the domain.
        """
        return pulumi.get(self, "zid")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> pulumi.Output[str]:
        """
        The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
        """
        return pulumi.get(self, "zone_name")

