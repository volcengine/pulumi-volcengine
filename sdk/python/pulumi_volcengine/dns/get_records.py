# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRecordsResult',
    'AwaitableGetRecordsResult',
    'get_records',
    'get_records_output',
]

@pulumi.output_type
class GetRecordsResult:
    """
    A collection of values returned by getRecords.
    """
    def __init__(__self__, host=None, id=None, line=None, name_regex=None, output_file=None, records=None, search_mode=None, search_order=None, total_count=None, type=None, value=None, zid=None):
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if line and not isinstance(line, str):
            raise TypeError("Expected argument 'line' to be a str")
        pulumi.set(__self__, "line", line)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if search_mode and not isinstance(search_mode, str):
            raise TypeError("Expected argument 'search_mode' to be a str")
        pulumi.set(__self__, "search_mode", search_mode)
        if search_order and not isinstance(search_order, str):
            raise TypeError("Expected argument 'search_order' to be a str")
        pulumi.set(__self__, "search_order", search_order)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)
        if zid and not isinstance(zid, int):
            raise TypeError("Expected argument 'zid' to be a int")
        pulumi.set(__self__, "zid", zid)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The host record included in the DNS record.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def line(self) -> Optional[str]:
        """
        The line code corresponding to the DNS record.
        """
        return pulumi.get(self, "line")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetRecordsRecordResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "records")

    @property
    @pulumi.getter(name="searchMode")
    def search_mode(self) -> Optional[str]:
        return pulumi.get(self, "search_mode")

    @property
    @pulumi.getter(name="searchOrder")
    def search_order(self) -> Optional[str]:
        return pulumi.get(self, "search_order")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the DNS record.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The record value contained in the DNS record.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def zid(self) -> int:
        return pulumi.get(self, "zid")


class AwaitableGetRecordsResult(GetRecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRecordsResult(
            host=self.host,
            id=self.id,
            line=self.line,
            name_regex=self.name_regex,
            output_file=self.output_file,
            records=self.records,
            search_mode=self.search_mode,
            search_order=self.search_order,
            total_count=self.total_count,
            type=self.type,
            value=self.value,
            zid=self.zid)


def get_records(host: Optional[str] = None,
                line: Optional[str] = None,
                name_regex: Optional[str] = None,
                output_file: Optional[str] = None,
                search_mode: Optional[str] = None,
                search_order: Optional[str] = None,
                type: Optional[str] = None,
                value: Optional[str] = None,
                zid: Optional[int] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRecordsResult:
    """
    Use this data source to query detailed information of dns records
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.dns.get_records(zid=58857)
    ```


    :param str host: Domain prefix of the DNS record.
    :param str line: Line of the DNS record.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str search_mode: The matching mode for the Host parameter.
    :param str search_order: The Method to sort the returned list of DNS records.
    :param str type: Type of the DNS record.
    :param str value: Value of the DNS record.
    :param int zid: The ID of the domain.
    """
    __args__ = dict()
    __args__['host'] = host
    __args__['line'] = line
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['searchMode'] = search_mode
    __args__['searchOrder'] = search_order
    __args__['type'] = type
    __args__['value'] = value
    __args__['zid'] = zid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:dns/getRecords:getRecords', __args__, opts=opts, typ=GetRecordsResult).value

    return AwaitableGetRecordsResult(
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        line=pulumi.get(__ret__, 'line'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        records=pulumi.get(__ret__, 'records'),
        search_mode=pulumi.get(__ret__, 'search_mode'),
        search_order=pulumi.get(__ret__, 'search_order'),
        total_count=pulumi.get(__ret__, 'total_count'),
        type=pulumi.get(__ret__, 'type'),
        value=pulumi.get(__ret__, 'value'),
        zid=pulumi.get(__ret__, 'zid'))


@_utilities.lift_output_func(get_records)
def get_records_output(host: Optional[pulumi.Input[Optional[str]]] = None,
                       line: Optional[pulumi.Input[Optional[str]]] = None,
                       name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                       output_file: Optional[pulumi.Input[Optional[str]]] = None,
                       search_mode: Optional[pulumi.Input[Optional[str]]] = None,
                       search_order: Optional[pulumi.Input[Optional[str]]] = None,
                       type: Optional[pulumi.Input[Optional[str]]] = None,
                       value: Optional[pulumi.Input[Optional[str]]] = None,
                       zid: Optional[pulumi.Input[int]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRecordsResult]:
    """
    Use this data source to query detailed information of dns records
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.dns.get_records(zid=58857)
    ```


    :param str host: Domain prefix of the DNS record.
    :param str line: Line of the DNS record.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str search_mode: The matching mode for the Host parameter.
    :param str search_order: The Method to sort the returned list of DNS records.
    :param str type: Type of the DNS record.
    :param str value: Value of the DNS record.
    :param int zid: The ID of the domain.
    """
    ...
