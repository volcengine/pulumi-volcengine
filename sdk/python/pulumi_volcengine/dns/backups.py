# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BackupsResult',
    'AwaitableBackupsResult',
    'backups',
    'backups_output',
]

warnings.warn("""volcengine.dns.Backups has been deprecated in favor of volcengine.dns.getBackups""", DeprecationWarning)

@pulumi.output_type
class BackupsResult:
    """
    A collection of values returned by Backups.
    """
    def __init__(__self__, backup_infos=None, id=None, name_regex=None, output_file=None, total_count=None, zid=None):
        if backup_infos and not isinstance(backup_infos, list):
            raise TypeError("Expected argument 'backup_infos' to be a list")
        pulumi.set(__self__, "backup_infos", backup_infos)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if zid and not isinstance(zid, int):
            raise TypeError("Expected argument 'zid' to be a int")
        pulumi.set(__self__, "zid", zid)

    @property
    @pulumi.getter(name="backupInfos")
    def backup_infos(self) -> Sequence['outputs.BackupsBackupInfoResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "backup_infos")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def zid(self) -> int:
        return pulumi.get(self, "zid")


class AwaitableBackupsResult(BackupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return BackupsResult(
            backup_infos=self.backup_infos,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count,
            zid=self.zid)


def backups(name_regex: Optional[str] = None,
            output_file: Optional[str] = None,
            zid: Optional[int] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableBackupsResult:
    """
    Use this data source to query detailed information of dns backups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.dns.get_backups(zid=58846)
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param int zid: The ID of the domain for which you want to get the backup schedule.
    """
    pulumi.log.warn("""backups is deprecated: volcengine.dns.Backups has been deprecated in favor of volcengine.dns.getBackups""")
    __args__ = dict()
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['zid'] = zid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:dns/backups:Backups', __args__, opts=opts, typ=BackupsResult).value

    return AwaitableBackupsResult(
        backup_infos=pulumi.get(__ret__, 'backup_infos'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'),
        zid=pulumi.get(__ret__, 'zid'))


@_utilities.lift_output_func(backups)
def backups_output(name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                   output_file: Optional[pulumi.Input[Optional[str]]] = None,
                   zid: Optional[pulumi.Input[int]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[BackupsResult]:
    """
    Use this data source to query detailed information of dns backups
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.dns.get_backups(zid=58846)
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param int zid: The ID of the domain for which you want to get the backup schedule.
    """
    pulumi.log.warn("""backups is deprecated: volcengine.dns.Backups has been deprecated in favor of volcengine.dns.getBackups""")
    ...
