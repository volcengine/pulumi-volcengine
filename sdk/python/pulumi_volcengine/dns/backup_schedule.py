# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BackupScheduleArgs', 'BackupSchedule']

@pulumi.input_type
class BackupScheduleArgs:
    def __init__(__self__, *,
                 schedule: pulumi.Input[int],
                 zid: pulumi.Input[int]):
        """
        The set of arguments for constructing a BackupSchedule resource.
        :param pulumi.Input[int] schedule: The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
        :param pulumi.Input[int] zid: The ID of the domain for which you want to update the backup schedule.
        """
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "zid", zid)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[int]:
        """
        The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[int]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def zid(self) -> pulumi.Input[int]:
        """
        The ID of the domain for which you want to update the backup schedule.
        """
        return pulumi.get(self, "zid")

    @zid.setter
    def zid(self, value: pulumi.Input[int]):
        pulumi.set(self, "zid", value)


@pulumi.input_type
class _BackupScheduleState:
    def __init__(__self__, *,
                 count_limit: Optional[pulumi.Input[int]] = None,
                 schedule: Optional[pulumi.Input[int]] = None,
                 zid: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering BackupSchedule resources.
        :param pulumi.Input[int] count_limit: Maximum number of backups per domain.
        :param pulumi.Input[int] schedule: The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
        :param pulumi.Input[int] zid: The ID of the domain for which you want to update the backup schedule.
        """
        if count_limit is not None:
            pulumi.set(__self__, "count_limit", count_limit)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if zid is not None:
            pulumi.set(__self__, "zid", zid)

    @property
    @pulumi.getter(name="countLimit")
    def count_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of backups per domain.
        """
        return pulumi.get(self, "count_limit")

    @count_limit.setter
    def count_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count_limit", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[int]]:
        """
        The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def zid(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the domain for which you want to update the backup schedule.
        """
        return pulumi.get(self, "zid")

    @zid.setter
    def zid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zid", value)


class BackupSchedule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 schedule: Optional[pulumi.Input[int]] = None,
                 zid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage dns backup schedule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.dns.BackupSchedule("foo",
            schedule=1,
            zid=58846)
        ```

        ## Import

        DnsBackupSchedule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:dns/backupSchedule:BackupSchedule default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] schedule: The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
        :param pulumi.Input[int] zid: The ID of the domain for which you want to update the backup schedule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupScheduleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage dns backup schedule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.dns.BackupSchedule("foo",
            schedule=1,
            zid=58846)
        ```

        ## Import

        DnsBackupSchedule can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:dns/backupSchedule:BackupSchedule default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param BackupScheduleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupScheduleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 schedule: Optional[pulumi.Input[int]] = None,
                 zid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupScheduleArgs.__new__(BackupScheduleArgs)

            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            if zid is None and not opts.urn:
                raise TypeError("Missing required property 'zid'")
            __props__.__dict__["zid"] = zid
            __props__.__dict__["count_limit"] = None
        super(BackupSchedule, __self__).__init__(
            'volcengine:dns/backupSchedule:BackupSchedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            count_limit: Optional[pulumi.Input[int]] = None,
            schedule: Optional[pulumi.Input[int]] = None,
            zid: Optional[pulumi.Input[int]] = None) -> 'BackupSchedule':
        """
        Get an existing BackupSchedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] count_limit: Maximum number of backups per domain.
        :param pulumi.Input[int] schedule: The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
        :param pulumi.Input[int] zid: The ID of the domain for which you want to update the backup schedule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupScheduleState.__new__(_BackupScheduleState)

        __props__.__dict__["count_limit"] = count_limit
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["zid"] = zid
        return BackupSchedule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="countLimit")
    def count_limit(self) -> pulumi.Output[int]:
        """
        Maximum number of backups per domain.
        """
        return pulumi.get(self, "count_limit")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[int]:
        """
        The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def zid(self) -> pulumi.Output[int]:
        """
        The ID of the domain for which you want to update the backup schedule.
        """
        return pulumi.get(self, "zid")

