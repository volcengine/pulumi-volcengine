# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'ZonesResult',
    'AwaitableZonesResult',
    'zones',
    'zones_output',
]

@pulumi.output_type
class ZonesResult:
    """
    A collection of values returned by Zones.
    """
    def __init__(__self__, id=None, key=None, name_regex=None, order_key=None, output_file=None, project_name=None, search_mode=None, search_order=None, stage=None, tags=None, total_count=None, trade_code=None, zones=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if order_key and not isinstance(order_key, str):
            raise TypeError("Expected argument 'order_key' to be a str")
        pulumi.set(__self__, "order_key", order_key)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if search_mode and not isinstance(search_mode, str):
            raise TypeError("Expected argument 'search_mode' to be a str")
        pulumi.set(__self__, "search_mode", search_mode)
        if search_order and not isinstance(search_order, str):
            raise TypeError("Expected argument 'search_order' to be a str")
        pulumi.set(__self__, "search_order", search_order)
        if stage and not isinstance(stage, str):
            raise TypeError("Expected argument 'stage' to be a str")
        pulumi.set(__self__, "stage", stage)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if trade_code and not isinstance(trade_code, str):
            raise TypeError("Expected argument 'trade_code' to be a str")
        pulumi.set(__self__, "trade_code", trade_code)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="orderKey")
    def order_key(self) -> Optional[str]:
        return pulumi.get(self, "order_key")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The ProjectName of the domain.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="searchMode")
    def search_mode(self) -> Optional[str]:
        return pulumi.get(self, "search_mode")

    @property
    @pulumi.getter(name="searchOrder")
    def search_order(self) -> Optional[str]:
        return pulumi.get(self, "search_order")

    @property
    @pulumi.getter
    def stage(self) -> Optional[str]:
        """
        The status of the domain.
        """
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ZonesTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="tradeCode")
    def trade_code(self) -> Optional[str]:
        """
        The edition of the domain.
        """
        return pulumi.get(self, "trade_code")

    @property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.ZonesZoneResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "zones")


class AwaitableZonesResult(ZonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ZonesResult(
            id=self.id,
            key=self.key,
            name_regex=self.name_regex,
            order_key=self.order_key,
            output_file=self.output_file,
            project_name=self.project_name,
            search_mode=self.search_mode,
            search_order=self.search_order,
            stage=self.stage,
            tags=self.tags,
            total_count=self.total_count,
            trade_code=self.trade_code,
            zones=self.zones)


def zones(key: Optional[str] = None,
          name_regex: Optional[str] = None,
          order_key: Optional[str] = None,
          output_file: Optional[str] = None,
          project_name: Optional[str] = None,
          search_mode: Optional[str] = None,
          search_order: Optional[str] = None,
          stage: Optional[str] = None,
          tags: Optional[Sequence[pulumi.InputType['ZonesTagArgs']]] = None,
          trade_code: Optional[str] = None,
          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableZonesResult:
    """
    Use this data source to query detailed information of dns zones
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.dns.zones(tags=[volcengine.dns.ZonesTagArgs(
        key="xx",
        values=["xx"],
    )])
    ```


    :param str key: The keyword included in domains.
    :param str name_regex: A Name Regex of Resource.
    :param str order_key: The key for sorting the results.
    :param str output_file: File name where to save data source results.
    :param str project_name: The ProjectName of the domain.
    :param str search_mode: The matching mode for the Key parameter.
    :param str search_order: The sorting order of the results.
    :param str stage: The status of the domain.
    :param Sequence[pulumi.InputType['ZonesTagArgs']] tags: Tags.
    :param str trade_code: The edition of the domain.
    """
    __args__ = dict()
    __args__['key'] = key
    __args__['nameRegex'] = name_regex
    __args__['orderKey'] = order_key
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['searchMode'] = search_mode
    __args__['searchOrder'] = search_order
    __args__['stage'] = stage
    __args__['tags'] = tags
    __args__['tradeCode'] = trade_code
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:dns/zones:Zones', __args__, opts=opts, typ=ZonesResult).value

    return AwaitableZonesResult(
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        order_key=pulumi.get(__ret__, 'order_key'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        search_mode=pulumi.get(__ret__, 'search_mode'),
        search_order=pulumi.get(__ret__, 'search_order'),
        stage=pulumi.get(__ret__, 'stage'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        trade_code=pulumi.get(__ret__, 'trade_code'),
        zones=pulumi.get(__ret__, 'zones'))


@_utilities.lift_output_func(zones)
def zones_output(key: Optional[pulumi.Input[Optional[str]]] = None,
                 name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                 order_key: Optional[pulumi.Input[Optional[str]]] = None,
                 output_file: Optional[pulumi.Input[Optional[str]]] = None,
                 project_name: Optional[pulumi.Input[Optional[str]]] = None,
                 search_mode: Optional[pulumi.Input[Optional[str]]] = None,
                 search_order: Optional[pulumi.Input[Optional[str]]] = None,
                 stage: Optional[pulumi.Input[Optional[str]]] = None,
                 tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['ZonesTagArgs']]]]] = None,
                 trade_code: Optional[pulumi.Input[Optional[str]]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ZonesResult]:
    """
    Use this data source to query detailed information of dns zones
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.dns.zones(tags=[volcengine.dns.ZonesTagArgs(
        key="xx",
        values=["xx"],
    )])
    ```


    :param str key: The keyword included in domains.
    :param str name_regex: A Name Regex of Resource.
    :param str order_key: The key for sorting the results.
    :param str output_file: File name where to save data source results.
    :param str project_name: The ProjectName of the domain.
    :param str search_mode: The matching mode for the Key parameter.
    :param str search_order: The sorting order of the results.
    :param str stage: The status of the domain.
    :param Sequence[pulumi.InputType['ZonesTagArgs']] tags: Tags.
    :param str trade_code: The edition of the domain.
    """
    ...
