# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBigKeysResult',
    'AwaitableGetBigKeysResult',
    'get_big_keys',
    'get_big_keys_output',
]

@pulumi.output_type
class GetBigKeysResult:
    """
    A collection of values returned by getBigKeys.
    """
    def __init__(__self__, big_keys=None, id=None, instance_id=None, key_type=None, name_regex=None, order_by=None, output_file=None, query_end_time=None, query_start_time=None, total_count=None):
        if big_keys and not isinstance(big_keys, list):
            raise TypeError("Expected argument 'big_keys' to be a list")
        pulumi.set(__self__, "big_keys", big_keys)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if key_type and not isinstance(key_type, str):
            raise TypeError("Expected argument 'key_type' to be a str")
        pulumi.set(__self__, "key_type", key_type)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if query_end_time and not isinstance(query_end_time, str):
            raise TypeError("Expected argument 'query_end_time' to be a str")
        pulumi.set(__self__, "query_end_time", query_end_time)
        if query_start_time and not isinstance(query_start_time, str):
            raise TypeError("Expected argument 'query_start_time' to be a str")
        pulumi.set(__self__, "query_start_time", query_start_time)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="bigKeys")
    def big_keys(self) -> Sequence['outputs.GetBigKeysBigKeyResult']:
        """
        Details of the big Key.
        """
        return pulumi.get(self, "big_keys")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[str]:
        """
        The type of big Key.
        """
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="queryEndTime")
    def query_end_time(self) -> Optional[str]:
        return pulumi.get(self, "query_end_time")

    @property
    @pulumi.getter(name="queryStartTime")
    def query_start_time(self) -> Optional[str]:
        return pulumi.get(self, "query_start_time")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetBigKeysResult(GetBigKeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBigKeysResult(
            big_keys=self.big_keys,
            id=self.id,
            instance_id=self.instance_id,
            key_type=self.key_type,
            name_regex=self.name_regex,
            order_by=self.order_by,
            output_file=self.output_file,
            query_end_time=self.query_end_time,
            query_start_time=self.query_start_time,
            total_count=self.total_count)


def get_big_keys(instance_id: Optional[str] = None,
                 key_type: Optional[str] = None,
                 name_regex: Optional[str] = None,
                 order_by: Optional[str] = None,
                 output_file: Optional[str] = None,
                 query_end_time: Optional[str] = None,
                 query_start_time: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBigKeysResult:
    """
    Use this data source to query detailed information of redis big keys
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.get_zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_instance = volcengine.redis.Instance("fooInstance",
        zone_ids=[foo_zones.zones[0].id],
        instance_name="acc-test-tf-redis",
        sharded_cluster=1,
        password="1qaz!QAZ12",
        node_number=2,
        shard_capacity=1024,
        shard_number=2,
        engine_version="5.0",
        subnet_id=foo_subnet.id,
        deletion_protection="disabled",
        vpc_auth_mode="close",
        charge_type="PostPaid",
        port=6381,
        project_name="default")
    foo_big_keys = volcengine.redis.get_big_keys_output(instance_id=foo_instance.id)
    ```


    :param str instance_id: The ID of Instance.
    :param str key_type: Specify the data type used to filter the query results of hot keys.
    :param str name_regex: A Name Regex of Resource.
    :param str order_by: Specify the sorting conditions of the query results.
    :param str output_file: File name where to save data source results.
    :param str query_end_time: Query the end time in the format of yyyy-MM-ddTHH:mm:ssZ (UTC).
    :param str query_start_time: Query the start time in the format of yyyy-MM-ddTHH:mm:ssZ (UTC).
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['keyType'] = key_type
    __args__['nameRegex'] = name_regex
    __args__['orderBy'] = order_by
    __args__['outputFile'] = output_file
    __args__['queryEndTime'] = query_end_time
    __args__['queryStartTime'] = query_start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:redis/getBigKeys:getBigKeys', __args__, opts=opts, typ=GetBigKeysResult).value

    return AwaitableGetBigKeysResult(
        big_keys=pulumi.get(__ret__, 'big_keys'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        key_type=pulumi.get(__ret__, 'key_type'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        order_by=pulumi.get(__ret__, 'order_by'),
        output_file=pulumi.get(__ret__, 'output_file'),
        query_end_time=pulumi.get(__ret__, 'query_end_time'),
        query_start_time=pulumi.get(__ret__, 'query_start_time'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_big_keys)
def get_big_keys_output(instance_id: Optional[pulumi.Input[str]] = None,
                        key_type: Optional[pulumi.Input[Optional[str]]] = None,
                        name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                        order_by: Optional[pulumi.Input[Optional[str]]] = None,
                        output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        query_end_time: Optional[pulumi.Input[Optional[str]]] = None,
                        query_start_time: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBigKeysResult]:
    """
    Use this data source to query detailed information of redis big keys
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.get_zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_instance = volcengine.redis.Instance("fooInstance",
        zone_ids=[foo_zones.zones[0].id],
        instance_name="acc-test-tf-redis",
        sharded_cluster=1,
        password="1qaz!QAZ12",
        node_number=2,
        shard_capacity=1024,
        shard_number=2,
        engine_version="5.0",
        subnet_id=foo_subnet.id,
        deletion_protection="disabled",
        vpc_auth_mode="close",
        charge_type="PostPaid",
        port=6381,
        project_name="default")
    foo_big_keys = volcengine.redis.get_big_keys_output(instance_id=foo_instance.id)
    ```


    :param str instance_id: The ID of Instance.
    :param str key_type: Specify the data type used to filter the query results of hot keys.
    :param str name_regex: A Name Regex of Resource.
    :param str order_by: Specify the sorting conditions of the query results.
    :param str output_file: File name where to save data source results.
    :param str query_end_time: Query the end time in the format of yyyy-MM-ddTHH:mm:ssZ (UTC).
    :param str query_start_time: Query the start time in the format of yyyy-MM-ddTHH:mm:ssZ (UTC).
    """
    ...
