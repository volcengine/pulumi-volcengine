# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceSpecsResult',
    'AwaitableGetInstanceSpecsResult',
    'get_instance_specs',
    'get_instance_specs_output',
]

@pulumi.output_type
class GetInstanceSpecsResult:
    """
    A collection of values returned by getInstanceSpecs.
    """
    def __init__(__self__, arch_type=None, id=None, instance_class=None, instance_specs=None, name_regex=None, output_file=None, total_count=None):
        if arch_type and not isinstance(arch_type, str):
            raise TypeError("Expected argument 'arch_type' to be a str")
        pulumi.set(__self__, "arch_type", arch_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_class and not isinstance(instance_class, str):
            raise TypeError("Expected argument 'instance_class' to be a str")
        pulumi.set(__self__, "instance_class", instance_class)
        if instance_specs and not isinstance(instance_specs, list):
            raise TypeError("Expected argument 'instance_specs' to be a list")
        pulumi.set(__self__, "instance_specs", instance_specs)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        """
        The architecture type of the Redis instance.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceClass")
    def instance_class(self) -> Optional[str]:
        return pulumi.get(self, "instance_class")

    @property
    @pulumi.getter(name="instanceSpecs")
    def instance_specs(self) -> Sequence['outputs.GetInstanceSpecsInstanceSpecResult']:
        """
        The List of Redis instance specifications.
        """
        return pulumi.get(self, "instance_specs")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetInstanceSpecsResult(GetInstanceSpecsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceSpecsResult(
            arch_type=self.arch_type,
            id=self.id,
            instance_class=self.instance_class,
            instance_specs=self.instance_specs,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count)


def get_instance_specs(arch_type: Optional[str] = None,
                       instance_class: Optional[str] = None,
                       name_regex: Optional[str] = None,
                       output_file: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceSpecsResult:
    """
    Use this data source to query detailed information of redis instance specs


    :param str arch_type: The architecture type of the Redis instance.
    :param str instance_class: The type of Redis instance.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['archType'] = arch_type
    __args__['instanceClass'] = instance_class
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:redis/getInstanceSpecs:getInstanceSpecs', __args__, opts=opts, typ=GetInstanceSpecsResult).value

    return AwaitableGetInstanceSpecsResult(
        arch_type=pulumi.get(__ret__, 'arch_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_class=pulumi.get(__ret__, 'instance_class'),
        instance_specs=pulumi.get(__ret__, 'instance_specs'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_instance_specs)
def get_instance_specs_output(arch_type: Optional[pulumi.Input[Optional[str]]] = None,
                              instance_class: Optional[pulumi.Input[Optional[str]]] = None,
                              name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                              output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceSpecsResult]:
    """
    Use this data source to query detailed information of redis instance specs


    :param str arch_type: The architecture type of the Redis instance.
    :param str instance_class: The type of Redis instance.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    ...
