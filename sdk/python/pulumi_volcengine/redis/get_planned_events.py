# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPlannedEventsResult',
    'AwaitableGetPlannedEventsResult',
    'get_planned_events',
    'get_planned_events_output',
]

@pulumi.output_type
class GetPlannedEventsResult:
    """
    A collection of values returned by getPlannedEvents.
    """
    def __init__(__self__, id=None, instance_id=None, max_start_time=None, min_start_time=None, name_regex=None, output_file=None, planned_events=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if max_start_time and not isinstance(max_start_time, str):
            raise TypeError("Expected argument 'max_start_time' to be a str")
        pulumi.set(__self__, "max_start_time", max_start_time)
        if min_start_time and not isinstance(min_start_time, str):
            raise TypeError("Expected argument 'min_start_time' to be a str")
        pulumi.set(__self__, "min_start_time", min_start_time)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if planned_events and not isinstance(planned_events, list):
            raise TypeError("Expected argument 'planned_events' to be a list")
        pulumi.set(__self__, "planned_events", planned_events)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="maxStartTime")
    def max_start_time(self) -> Optional[str]:
        return pulumi.get(self, "max_start_time")

    @property
    @pulumi.getter(name="minStartTime")
    def min_start_time(self) -> Optional[str]:
        return pulumi.get(self, "min_start_time")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="plannedEvents")
    def planned_events(self) -> Sequence['outputs.GetPlannedEventsPlannedEventResult']:
        """
        The List of planned event information.
        """
        return pulumi.get(self, "planned_events")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetPlannedEventsResult(GetPlannedEventsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlannedEventsResult(
            id=self.id,
            instance_id=self.instance_id,
            max_start_time=self.max_start_time,
            min_start_time=self.min_start_time,
            name_regex=self.name_regex,
            output_file=self.output_file,
            planned_events=self.planned_events,
            total_count=self.total_count)


def get_planned_events(instance_id: Optional[str] = None,
                       max_start_time: Optional[str] = None,
                       min_start_time: Optional[str] = None,
                       name_regex: Optional[str] = None,
                       output_file: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlannedEventsResult:
    """
    Use this data source to query detailed information of redis planned events
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.get_zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_instance = volcengine.redis.Instance("fooInstance",
        zone_ids=[foo_zones.zones[0].id],
        instance_name="acc-test-tf-redis",
        sharded_cluster=1,
        password="1qaz!QAZ12",
        node_number=2,
        shard_capacity=1024,
        shard_number=2,
        engine_version="5.0",
        subnet_id=foo_subnet.id,
        deletion_protection="disabled",
        vpc_auth_mode="close",
        charge_type="PostPaid",
        port=6381,
        project_name="default")
    foo_planned_events = volcengine.redis.get_planned_events_output(instance_id=foo_instance.id)
    ```


    :param str instance_id: The ID of instance.
    :param str max_start_time: The latest execution time of the planned events that need to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
    :param str min_start_time: The earliest execution time of the planned event that needs to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['maxStartTime'] = max_start_time
    __args__['minStartTime'] = min_start_time
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:redis/getPlannedEvents:getPlannedEvents', __args__, opts=opts, typ=GetPlannedEventsResult).value

    return AwaitableGetPlannedEventsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        max_start_time=pulumi.get(__ret__, 'max_start_time'),
        min_start_time=pulumi.get(__ret__, 'min_start_time'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        planned_events=pulumi.get(__ret__, 'planned_events'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_planned_events)
def get_planned_events_output(instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                              max_start_time: Optional[pulumi.Input[Optional[str]]] = None,
                              min_start_time: Optional[pulumi.Input[Optional[str]]] = None,
                              name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                              output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPlannedEventsResult]:
    """
    Use this data source to query detailed information of redis planned events
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.get_zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_instance = volcengine.redis.Instance("fooInstance",
        zone_ids=[foo_zones.zones[0].id],
        instance_name="acc-test-tf-redis",
        sharded_cluster=1,
        password="1qaz!QAZ12",
        node_number=2,
        shard_capacity=1024,
        shard_number=2,
        engine_version="5.0",
        subnet_id=foo_subnet.id,
        deletion_protection="disabled",
        vpc_auth_mode="close",
        charge_type="PostPaid",
        port=6381,
        project_name="default")
    foo_planned_events = volcengine.redis.get_planned_events_output(instance_id=foo_instance.id)
    ```


    :param str instance_id: The ID of instance.
    :param str max_start_time: The latest execution time of the planned events that need to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
    :param str min_start_time: The earliest execution time of the planned event that needs to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    ...
