# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EndpointArgs', 'Endpoint']

@pulumi.input_type
class EndpointArgs:
    def __init__(__self__, *,
                 endpoint_type: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 node_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 consist_level: Optional[pulumi.Input[str]] = None,
                 consist_timeout: Optional[pulumi.Input[int]] = None,
                 consist_timeout_action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distributed_transaction: Optional[pulumi.Input[bool]] = None,
                 endpoint_name: Optional[pulumi.Input[str]] = None,
                 master_accept_read_requests: Optional[pulumi.Input[bool]] = None,
                 read_write_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Endpoint resource.
        :param pulumi.Input[str] endpoint_type: Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
        :param pulumi.Input[str] instance_id: The id of the instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_ids: Connect the node IDs associated with the endpoint.The filling rules are as follows:
               When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
               When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        :param pulumi.Input[str] consist_level: Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
               Eventual: eventual consistency.
               Session: session consistency.
               Global: global consistency.
               Description
               When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
               When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        :param pulumi.Input[int] consist_timeout: When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
               Explanation
               This parameter takes effect only when the value of ConsistLevel is Global or Session.
        :param pulumi.Input[str] consist_timeout_action: Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
               ReturnError: Return SQL error (wait replication complete timeout, please retry).
               ReadMaster: Send a request to the master node (default).
               Description
               This parameter takes effect only when the value of ConsistLevel is Global or Session.
        :param pulumi.Input[str] description: Description information for connecting endpoint. The length cannot exceed 200 characters.
        :param pulumi.Input[bool] distributed_transaction: Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
               true: Enabled (default).
               false: Disabled.
               Description
               Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        :param pulumi.Input[str] endpoint_name: Connect the endpoint name. The setting rules are as follows:
               It cannot start with a number or a hyphen (-).
               It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
               The length is 1 to 64 characters.
        :param pulumi.Input[bool] master_accept_read_requests: The master node accepts read requests. Value range:
               true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
               false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
               Description
               Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        :param pulumi.Input[str] read_write_mode: Endpoint read-write mode. Values:
               ReadWrite: Read and write endpoint.
               ReadOnly: Read-only endpoint (default).
        """
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "node_ids", node_ids)
        if consist_level is not None:
            pulumi.set(__self__, "consist_level", consist_level)
        if consist_timeout is not None:
            pulumi.set(__self__, "consist_timeout", consist_timeout)
        if consist_timeout_action is not None:
            pulumi.set(__self__, "consist_timeout_action", consist_timeout_action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distributed_transaction is not None:
            pulumi.set(__self__, "distributed_transaction", distributed_transaction)
        if endpoint_name is not None:
            pulumi.set(__self__, "endpoint_name", endpoint_name)
        if master_accept_read_requests is not None:
            pulumi.set(__self__, "master_accept_read_requests", master_accept_read_requests)
        if read_write_mode is not None:
            pulumi.set(__self__, "read_write_mode", read_write_mode)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Input[str]:
        """
        Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="nodeIds")
    def node_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Connect the node IDs associated with the endpoint.The filling rules are as follows:
        When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
        When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        """
        return pulumi.get(self, "node_ids")

    @node_ids.setter
    def node_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "node_ids", value)

    @property
    @pulumi.getter(name="consistLevel")
    def consist_level(self) -> Optional[pulumi.Input[str]]:
        """
        Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
        Eventual: eventual consistency.
        Session: session consistency.
        Global: global consistency.
        Description
        When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
        When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        """
        return pulumi.get(self, "consist_level")

    @consist_level.setter
    def consist_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consist_level", value)

    @property
    @pulumi.getter(name="consistTimeout")
    def consist_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
        Explanation
        This parameter takes effect only when the value of ConsistLevel is Global or Session.
        """
        return pulumi.get(self, "consist_timeout")

    @consist_timeout.setter
    def consist_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "consist_timeout", value)

    @property
    @pulumi.getter(name="consistTimeoutAction")
    def consist_timeout_action(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
        ReturnError: Return SQL error (wait replication complete timeout, please retry).
        ReadMaster: Send a request to the master node (default).
        Description
        This parameter takes effect only when the value of ConsistLevel is Global or Session.
        """
        return pulumi.get(self, "consist_timeout_action")

    @consist_timeout_action.setter
    def consist_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consist_timeout_action", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description information for connecting endpoint. The length cannot exceed 200 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distributedTransaction")
    def distributed_transaction(self) -> Optional[pulumi.Input[bool]]:
        """
        Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
        true: Enabled (default).
        false: Disabled.
        Description
        Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        """
        return pulumi.get(self, "distributed_transaction")

    @distributed_transaction.setter
    def distributed_transaction(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "distributed_transaction", value)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> Optional[pulumi.Input[str]]:
        """
        Connect the endpoint name. The setting rules are as follows:
        It cannot start with a number or a hyphen (-).
        It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        The length is 1 to 64 characters.
        """
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="masterAcceptReadRequests")
    def master_accept_read_requests(self) -> Optional[pulumi.Input[bool]]:
        """
        The master node accepts read requests. Value range:
        true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
        false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
        Description
        Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        """
        return pulumi.get(self, "master_accept_read_requests")

    @master_accept_read_requests.setter
    def master_accept_read_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "master_accept_read_requests", value)

    @property
    @pulumi.getter(name="readWriteMode")
    def read_write_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint read-write mode. Values:
        ReadWrite: Read and write endpoint.
        ReadOnly: Read-only endpoint (default).
        """
        return pulumi.get(self, "read_write_mode")

    @read_write_mode.setter
    def read_write_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_write_mode", value)


@pulumi.input_type
class _EndpointState:
    def __init__(__self__, *,
                 consist_level: Optional[pulumi.Input[str]] = None,
                 consist_timeout: Optional[pulumi.Input[int]] = None,
                 consist_timeout_action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distributed_transaction: Optional[pulumi.Input[bool]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 endpoint_name: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 master_accept_read_requests: Optional[pulumi.Input[bool]] = None,
                 node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 read_write_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Endpoint resources.
        :param pulumi.Input[str] consist_level: Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
               Eventual: eventual consistency.
               Session: session consistency.
               Global: global consistency.
               Description
               When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
               When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        :param pulumi.Input[int] consist_timeout: When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
               Explanation
               This parameter takes effect only when the value of ConsistLevel is Global or Session.
        :param pulumi.Input[str] consist_timeout_action: Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
               ReturnError: Return SQL error (wait replication complete timeout, please retry).
               ReadMaster: Send a request to the master node (default).
               Description
               This parameter takes effect only when the value of ConsistLevel is Global or Session.
        :param pulumi.Input[str] description: Description information for connecting endpoint. The length cannot exceed 200 characters.
        :param pulumi.Input[bool] distributed_transaction: Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
               true: Enabled (default).
               false: Disabled.
               Description
               Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint.
        :param pulumi.Input[str] endpoint_name: Connect the endpoint name. The setting rules are as follows:
               It cannot start with a number or a hyphen (-).
               It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
               The length is 1 to 64 characters.
        :param pulumi.Input[str] endpoint_type: Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
        :param pulumi.Input[str] instance_id: The id of the instance.
        :param pulumi.Input[bool] master_accept_read_requests: The master node accepts read requests. Value range:
               true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
               false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
               Description
               Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_ids: Connect the node IDs associated with the endpoint.The filling rules are as follows:
               When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
               When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        :param pulumi.Input[str] read_write_mode: Endpoint read-write mode. Values:
               ReadWrite: Read and write endpoint.
               ReadOnly: Read-only endpoint (default).
        """
        if consist_level is not None:
            pulumi.set(__self__, "consist_level", consist_level)
        if consist_timeout is not None:
            pulumi.set(__self__, "consist_timeout", consist_timeout)
        if consist_timeout_action is not None:
            pulumi.set(__self__, "consist_timeout_action", consist_timeout_action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distributed_transaction is not None:
            pulumi.set(__self__, "distributed_transaction", distributed_transaction)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if endpoint_name is not None:
            pulumi.set(__self__, "endpoint_name", endpoint_name)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if master_accept_read_requests is not None:
            pulumi.set(__self__, "master_accept_read_requests", master_accept_read_requests)
        if node_ids is not None:
            pulumi.set(__self__, "node_ids", node_ids)
        if read_write_mode is not None:
            pulumi.set(__self__, "read_write_mode", read_write_mode)

    @property
    @pulumi.getter(name="consistLevel")
    def consist_level(self) -> Optional[pulumi.Input[str]]:
        """
        Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
        Eventual: eventual consistency.
        Session: session consistency.
        Global: global consistency.
        Description
        When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
        When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        """
        return pulumi.get(self, "consist_level")

    @consist_level.setter
    def consist_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consist_level", value)

    @property
    @pulumi.getter(name="consistTimeout")
    def consist_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
        Explanation
        This parameter takes effect only when the value of ConsistLevel is Global or Session.
        """
        return pulumi.get(self, "consist_timeout")

    @consist_timeout.setter
    def consist_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "consist_timeout", value)

    @property
    @pulumi.getter(name="consistTimeoutAction")
    def consist_timeout_action(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
        ReturnError: Return SQL error (wait replication complete timeout, please retry).
        ReadMaster: Send a request to the master node (default).
        Description
        This parameter takes effect only when the value of ConsistLevel is Global or Session.
        """
        return pulumi.get(self, "consist_timeout_action")

    @consist_timeout_action.setter
    def consist_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consist_timeout_action", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description information for connecting endpoint. The length cannot exceed 200 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distributedTransaction")
    def distributed_transaction(self) -> Optional[pulumi.Input[bool]]:
        """
        Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
        true: Enabled (default).
        false: Disabled.
        Description
        Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        """
        return pulumi.get(self, "distributed_transaction")

    @distributed_transaction.setter
    def distributed_transaction(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "distributed_transaction", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> Optional[pulumi.Input[str]]:
        """
        Connect the endpoint name. The setting rules are as follows:
        It cannot start with a number or a hyphen (-).
        It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        The length is 1 to 64 characters.
        """
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[str]]:
        """
        Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="masterAcceptReadRequests")
    def master_accept_read_requests(self) -> Optional[pulumi.Input[bool]]:
        """
        The master node accepts read requests. Value range:
        true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
        false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
        Description
        Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        """
        return pulumi.get(self, "master_accept_read_requests")

    @master_accept_read_requests.setter
    def master_accept_read_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "master_accept_read_requests", value)

    @property
    @pulumi.getter(name="nodeIds")
    def node_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Connect the node IDs associated with the endpoint.The filling rules are as follows:
        When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
        When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        """
        return pulumi.get(self, "node_ids")

    @node_ids.setter
    def node_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_ids", value)

    @property
    @pulumi.getter(name="readWriteMode")
    def read_write_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint read-write mode. Values:
        ReadWrite: Read and write endpoint.
        ReadOnly: Read-only endpoint (default).
        """
        return pulumi.get(self, "read_write_mode")

    @read_write_mode.setter
    def read_write_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_write_mode", value)


class Endpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consist_level: Optional[pulumi.Input[str]] = None,
                 consist_timeout: Optional[pulumi.Input[int]] = None,
                 consist_timeout_action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distributed_transaction: Optional[pulumi.Input[bool]] = None,
                 endpoint_name: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 master_accept_read_requests: Optional[pulumi.Input[bool]] = None,
                 node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 read_write_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage vedb mysql endpoint
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[2].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.vedb_mysql.Instance("fooInstance",
            charge_type="PostPaid",
            storage_charge_type="PostPaid",
            db_engine_version="MySQL_8_0",
            db_minor_version="3.0",
            node_number=2,
            node_spec="vedb.mysql.x4.large",
            subnet_id=foo_subnet.id,
            instance_name="tf-test",
            project_name="testA",
            tags=[
                volcengine.vedb_mysql.InstanceTagArgs(
                    key="tftest",
                    value="tftest",
                ),
                volcengine.vedb_mysql.InstanceTagArgs(
                    key="tftest2",
                    value="tftest2",
                ),
            ])
        foo_instances = volcengine.vedb_mysql.instances_output(instance_id=foo_instance.id)
        foo_endpoint = volcengine.vedb_mysql.Endpoint("fooEndpoint",
            endpoint_type="Custom",
            instance_id=foo_instance.id,
            node_ids=[
                foo_instances.instances[0].nodes[0].node_id,
                foo_instances.instances[0].nodes[1].node_id,
            ],
            read_write_mode="ReadWrite",
            endpoint_name="tf-test",
            description="tf test",
            master_accept_read_requests=True,
            distributed_transaction=True,
            consist_level="Session",
            consist_timeout=100000,
            consist_timeout_action="ReadMaster")
        ```

        ## Import

        VedbMysqlEndpoint can be imported using the instance id:endpoint id, e.g.

        ```sh
        $ pulumi import volcengine:vedb_mysql/endpoint:Endpoint default vedbm-iqnh3a7z****:vedbm-2pf2xk5v****-Custom-50yv
        ```
        Note: The master node endpoint only supports modifying the EndpointName and Description parameters. If values are passed in for other parameters, these values will be ignored without generating an error.
        The default endpoint does not support modifying the ReadWriteMode, AutoAddNewNodes, and Nodes parameters. If values are passed in for these parameters, these values will be ignored without generating an error.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] consist_level: Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
               Eventual: eventual consistency.
               Session: session consistency.
               Global: global consistency.
               Description
               When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
               When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        :param pulumi.Input[int] consist_timeout: When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
               Explanation
               This parameter takes effect only when the value of ConsistLevel is Global or Session.
        :param pulumi.Input[str] consist_timeout_action: Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
               ReturnError: Return SQL error (wait replication complete timeout, please retry).
               ReadMaster: Send a request to the master node (default).
               Description
               This parameter takes effect only when the value of ConsistLevel is Global or Session.
        :param pulumi.Input[str] description: Description information for connecting endpoint. The length cannot exceed 200 characters.
        :param pulumi.Input[bool] distributed_transaction: Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
               true: Enabled (default).
               false: Disabled.
               Description
               Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        :param pulumi.Input[str] endpoint_name: Connect the endpoint name. The setting rules are as follows:
               It cannot start with a number or a hyphen (-).
               It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
               The length is 1 to 64 characters.
        :param pulumi.Input[str] endpoint_type: Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
        :param pulumi.Input[str] instance_id: The id of the instance.
        :param pulumi.Input[bool] master_accept_read_requests: The master node accepts read requests. Value range:
               true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
               false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
               Description
               Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_ids: Connect the node IDs associated with the endpoint.The filling rules are as follows:
               When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
               When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        :param pulumi.Input[str] read_write_mode: Endpoint read-write mode. Values:
               ReadWrite: Read and write endpoint.
               ReadOnly: Read-only endpoint (default).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vedb mysql endpoint
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[2].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.vedb_mysql.Instance("fooInstance",
            charge_type="PostPaid",
            storage_charge_type="PostPaid",
            db_engine_version="MySQL_8_0",
            db_minor_version="3.0",
            node_number=2,
            node_spec="vedb.mysql.x4.large",
            subnet_id=foo_subnet.id,
            instance_name="tf-test",
            project_name="testA",
            tags=[
                volcengine.vedb_mysql.InstanceTagArgs(
                    key="tftest",
                    value="tftest",
                ),
                volcengine.vedb_mysql.InstanceTagArgs(
                    key="tftest2",
                    value="tftest2",
                ),
            ])
        foo_instances = volcengine.vedb_mysql.instances_output(instance_id=foo_instance.id)
        foo_endpoint = volcengine.vedb_mysql.Endpoint("fooEndpoint",
            endpoint_type="Custom",
            instance_id=foo_instance.id,
            node_ids=[
                foo_instances.instances[0].nodes[0].node_id,
                foo_instances.instances[0].nodes[1].node_id,
            ],
            read_write_mode="ReadWrite",
            endpoint_name="tf-test",
            description="tf test",
            master_accept_read_requests=True,
            distributed_transaction=True,
            consist_level="Session",
            consist_timeout=100000,
            consist_timeout_action="ReadMaster")
        ```

        ## Import

        VedbMysqlEndpoint can be imported using the instance id:endpoint id, e.g.

        ```sh
        $ pulumi import volcengine:vedb_mysql/endpoint:Endpoint default vedbm-iqnh3a7z****:vedbm-2pf2xk5v****-Custom-50yv
        ```
        Note: The master node endpoint only supports modifying the EndpointName and Description parameters. If values are passed in for other parameters, these values will be ignored without generating an error.
        The default endpoint does not support modifying the ReadWriteMode, AutoAddNewNodes, and Nodes parameters. If values are passed in for these parameters, these values will be ignored without generating an error.

        :param str resource_name: The name of the resource.
        :param EndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consist_level: Optional[pulumi.Input[str]] = None,
                 consist_timeout: Optional[pulumi.Input[int]] = None,
                 consist_timeout_action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distributed_transaction: Optional[pulumi.Input[bool]] = None,
                 endpoint_name: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 master_accept_read_requests: Optional[pulumi.Input[bool]] = None,
                 node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 read_write_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndpointArgs.__new__(EndpointArgs)

            __props__.__dict__["consist_level"] = consist_level
            __props__.__dict__["consist_timeout"] = consist_timeout
            __props__.__dict__["consist_timeout_action"] = consist_timeout_action
            __props__.__dict__["description"] = description
            __props__.__dict__["distributed_transaction"] = distributed_transaction
            __props__.__dict__["endpoint_name"] = endpoint_name
            if endpoint_type is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint_type'")
            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["master_accept_read_requests"] = master_accept_read_requests
            if node_ids is None and not opts.urn:
                raise TypeError("Missing required property 'node_ids'")
            __props__.__dict__["node_ids"] = node_ids
            __props__.__dict__["read_write_mode"] = read_write_mode
            __props__.__dict__["endpoint_id"] = None
        super(Endpoint, __self__).__init__(
            'volcengine:vedb_mysql/endpoint:Endpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            consist_level: Optional[pulumi.Input[str]] = None,
            consist_timeout: Optional[pulumi.Input[int]] = None,
            consist_timeout_action: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            distributed_transaction: Optional[pulumi.Input[bool]] = None,
            endpoint_id: Optional[pulumi.Input[str]] = None,
            endpoint_name: Optional[pulumi.Input[str]] = None,
            endpoint_type: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            master_accept_read_requests: Optional[pulumi.Input[bool]] = None,
            node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            read_write_mode: Optional[pulumi.Input[str]] = None) -> 'Endpoint':
        """
        Get an existing Endpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] consist_level: Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
               Eventual: eventual consistency.
               Session: session consistency.
               Global: global consistency.
               Description
               When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
               When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        :param pulumi.Input[int] consist_timeout: When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
               Explanation
               This parameter takes effect only when the value of ConsistLevel is Global or Session.
        :param pulumi.Input[str] consist_timeout_action: Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
               ReturnError: Return SQL error (wait replication complete timeout, please retry).
               ReadMaster: Send a request to the master node (default).
               Description
               This parameter takes effect only when the value of ConsistLevel is Global or Session.
        :param pulumi.Input[str] description: Description information for connecting endpoint. The length cannot exceed 200 characters.
        :param pulumi.Input[bool] distributed_transaction: Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
               true: Enabled (default).
               false: Disabled.
               Description
               Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        :param pulumi.Input[str] endpoint_id: The id of the endpoint.
        :param pulumi.Input[str] endpoint_name: Connect the endpoint name. The setting rules are as follows:
               It cannot start with a number or a hyphen (-).
               It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
               The length is 1 to 64 characters.
        :param pulumi.Input[str] endpoint_type: Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
        :param pulumi.Input[str] instance_id: The id of the instance.
        :param pulumi.Input[bool] master_accept_read_requests: The master node accepts read requests. Value range:
               true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
               false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
               Description
               Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_ids: Connect the node IDs associated with the endpoint.The filling rules are as follows:
               When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
               When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        :param pulumi.Input[str] read_write_mode: Endpoint read-write mode. Values:
               ReadWrite: Read and write endpoint.
               ReadOnly: Read-only endpoint (default).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EndpointState.__new__(_EndpointState)

        __props__.__dict__["consist_level"] = consist_level
        __props__.__dict__["consist_timeout"] = consist_timeout
        __props__.__dict__["consist_timeout_action"] = consist_timeout_action
        __props__.__dict__["description"] = description
        __props__.__dict__["distributed_transaction"] = distributed_transaction
        __props__.__dict__["endpoint_id"] = endpoint_id
        __props__.__dict__["endpoint_name"] = endpoint_name
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["master_accept_read_requests"] = master_accept_read_requests
        __props__.__dict__["node_ids"] = node_ids
        __props__.__dict__["read_write_mode"] = read_write_mode
        return Endpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="consistLevel")
    def consist_level(self) -> pulumi.Output[str]:
        """
        Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
        Eventual: eventual consistency.
        Session: session consistency.
        Global: global consistency.
        Description
        When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
        When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        """
        return pulumi.get(self, "consist_level")

    @property
    @pulumi.getter(name="consistTimeout")
    def consist_timeout(self) -> pulumi.Output[int]:
        """
        When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
        Explanation
        This parameter takes effect only when the value of ConsistLevel is Global or Session.
        """
        return pulumi.get(self, "consist_timeout")

    @property
    @pulumi.getter(name="consistTimeoutAction")
    def consist_timeout_action(self) -> pulumi.Output[str]:
        """
        Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
        ReturnError: Return SQL error (wait replication complete timeout, please retry).
        ReadMaster: Send a request to the master node (default).
        Description
        This parameter takes effect only when the value of ConsistLevel is Global or Session.
        """
        return pulumi.get(self, "consist_timeout_action")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description information for connecting endpoint. The length cannot exceed 200 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributedTransaction")
    def distributed_transaction(self) -> pulumi.Output[Optional[bool]]:
        """
        Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
        true: Enabled (default).
        false: Disabled.
        Description
        Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        """
        return pulumi.get(self, "distributed_transaction")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Output[str]:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Output[str]:
        """
        Connect the endpoint name. The setting rules are as follows:
        It cannot start with a number or a hyphen (-).
        It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        The length is 1 to 64 characters.
        """
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[str]:
        """
        Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="masterAcceptReadRequests")
    def master_accept_read_requests(self) -> pulumi.Output[Optional[bool]]:
        """
        The master node accepts read requests. Value range:
        true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
        false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
        Description
        Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        """
        return pulumi.get(self, "master_accept_read_requests")

    @property
    @pulumi.getter(name="nodeIds")
    def node_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Connect the node IDs associated with the endpoint.The filling rules are as follows:
        When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
        When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        """
        return pulumi.get(self, "node_ids")

    @property
    @pulumi.getter(name="readWriteMode")
    def read_write_mode(self) -> pulumi.Output[str]:
        """
        Endpoint read-write mode. Values:
        ReadWrite: Read and write endpoint.
        ReadOnly: Read-only endpoint (default).
        """
        return pulumi.get(self, "read_write_mode")

