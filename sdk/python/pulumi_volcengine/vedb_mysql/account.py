# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccountArgs', 'Account']

@pulumi.input_type
class AccountArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 account_password: pulumi.Input[str],
                 account_type: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 account_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]] = None):
        """
        The set of arguments for constructing a Account resource.
        :param pulumi.Input[str] account_name: Database account name. The account name must meet the following requirements:
               The name is unique and within 2 to 32 characters in length.
               Consists of lowercase letters, numbers, or underscores (_).
               Starts with a lowercase letter and ends with a letter or number.
               The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
        :param pulumi.Input[str] account_password: Password of database account. The account password must meet the following requirements:
               It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
               It must be within 8 to 32 characters in length.
               It must contain at least three of upper case letters, lower case letters, numbers or special characters.
        :param pulumi.Input[str] account_type: Database account type. Values: 
               Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
               Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
        :param pulumi.Input[str] instance_id: The id of the instance.
        :param pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]] account_privileges: Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_password", account_password)
        pulumi.set(__self__, "account_type", account_type)
        pulumi.set(__self__, "instance_id", instance_id)
        if account_privileges is not None:
            pulumi.set(__self__, "account_privileges", account_privileges)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        Database account name. The account name must meet the following requirements:
        The name is unique and within 2 to 32 characters in length.
        Consists of lowercase letters, numbers, or underscores (_).
        Starts with a lowercase letter and ends with a letter or number.
        The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> pulumi.Input[str]:
        """
        Password of database account. The account password must meet the following requirements:
        It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
        It must be within 8 to 32 characters in length.
        It must contain at least three of upper case letters, lower case letters, numbers or special characters.
        """
        return pulumi.get(self, "account_password")

    @account_password.setter
    def account_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_password", value)

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> pulumi.Input[str]:
        """
        Database account type. Values: 
        Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
        Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
        """
        return pulumi.get(self, "account_type")

    @account_type.setter
    def account_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="accountPrivileges")
    def account_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]]:
        """
        Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
        """
        return pulumi.get(self, "account_privileges")

    @account_privileges.setter
    def account_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]]):
        pulumi.set(self, "account_privileges", value)


@pulumi.input_type
class _AccountState:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_password: Optional[pulumi.Input[str]] = None,
                 account_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]] = None,
                 account_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Account resources.
        :param pulumi.Input[str] account_name: Database account name. The account name must meet the following requirements:
               The name is unique and within 2 to 32 characters in length.
               Consists of lowercase letters, numbers, or underscores (_).
               Starts with a lowercase letter and ends with a letter or number.
               The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
        :param pulumi.Input[str] account_password: Password of database account. The account password must meet the following requirements:
               It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
               It must be within 8 to 32 characters in length.
               It must contain at least three of upper case letters, lower case letters, numbers or special characters.
        :param pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]] account_privileges: Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
        :param pulumi.Input[str] account_type: Database account type. Values: 
               Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
               Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
        :param pulumi.Input[str] instance_id: The id of the instance.
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_password is not None:
            pulumi.set(__self__, "account_password", account_password)
        if account_privileges is not None:
            pulumi.set(__self__, "account_privileges", account_privileges)
        if account_type is not None:
            pulumi.set(__self__, "account_type", account_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database account name. The account name must meet the following requirements:
        The name is unique and within 2 to 32 characters in length.
        Consists of lowercase letters, numbers, or underscores (_).
        Starts with a lowercase letter and ends with a letter or number.
        The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of database account. The account password must meet the following requirements:
        It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
        It must be within 8 to 32 characters in length.
        It must contain at least three of upper case letters, lower case letters, numbers or special characters.
        """
        return pulumi.get(self, "account_password")

    @account_password.setter
    def account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_password", value)

    @property
    @pulumi.getter(name="accountPrivileges")
    def account_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]]:
        """
        Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
        """
        return pulumi.get(self, "account_privileges")

    @account_privileges.setter
    def account_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountAccountPrivilegeArgs']]]]):
        pulumi.set(self, "account_privileges", value)

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[pulumi.Input[str]]:
        """
        Database account type. Values: 
        Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
        Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
        """
        return pulumi.get(self, "account_type")

    @account_type.setter
    def account_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


class Account(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_password: Optional[pulumi.Input[str]] = None,
                 account_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountAccountPrivilegeArgs']]]]] = None,
                 account_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage vedb mysql account
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[2].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.vedb_mysql.Instance("fooInstance",
            charge_type="PostPaid",
            storage_charge_type="PostPaid",
            db_engine_version="MySQL_8_0",
            db_minor_version="3.0",
            node_number=2,
            node_spec="vedb.mysql.x4.large",
            subnet_id=foo_subnet.id,
            instance_name="tf-test",
            project_name="testA",
            tags=[
                volcengine.vedb_mysql.InstanceTagArgs(
                    key="tftest",
                    value="tftest",
                ),
                volcengine.vedb_mysql.InstanceTagArgs(
                    key="tftest2",
                    value="tftest2",
                ),
            ])
        foo_database = volcengine.vedb_mysql.Database("fooDatabase",
            db_name="tf-table",
            instance_id=foo_instance.id)
        foo_account = volcengine.vedb_mysql.Account("fooAccount",
            account_name="tftest",
            account_password="93f0cb0614Aab12",
            account_type="Normal",
            instance_id=foo_instance.id,
            account_privileges=[volcengine.vedb_mysql.AccountAccountPrivilegeArgs(
                db_name=foo_database.db_name,
                account_privilege="Custom",
                account_privilege_detail="SELECT,INSERT,DELETE",
            )])
        ```

        ## Import

        VedbMysqlAccount can be imported using the instance id and account name, e.g.

        ```sh
        $ pulumi import volcengine:vedb_mysql/account:Account default vedbm-r3xq0zdl****:testuser
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: Database account name. The account name must meet the following requirements:
               The name is unique and within 2 to 32 characters in length.
               Consists of lowercase letters, numbers, or underscores (_).
               Starts with a lowercase letter and ends with a letter or number.
               The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
        :param pulumi.Input[str] account_password: Password of database account. The account password must meet the following requirements:
               It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
               It must be within 8 to 32 characters in length.
               It must contain at least three of upper case letters, lower case letters, numbers or special characters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountAccountPrivilegeArgs']]]] account_privileges: Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
        :param pulumi.Input[str] account_type: Database account type. Values: 
               Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
               Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
        :param pulumi.Input[str] instance_id: The id of the instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vedb mysql account
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[2].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.vedb_mysql.Instance("fooInstance",
            charge_type="PostPaid",
            storage_charge_type="PostPaid",
            db_engine_version="MySQL_8_0",
            db_minor_version="3.0",
            node_number=2,
            node_spec="vedb.mysql.x4.large",
            subnet_id=foo_subnet.id,
            instance_name="tf-test",
            project_name="testA",
            tags=[
                volcengine.vedb_mysql.InstanceTagArgs(
                    key="tftest",
                    value="tftest",
                ),
                volcengine.vedb_mysql.InstanceTagArgs(
                    key="tftest2",
                    value="tftest2",
                ),
            ])
        foo_database = volcengine.vedb_mysql.Database("fooDatabase",
            db_name="tf-table",
            instance_id=foo_instance.id)
        foo_account = volcengine.vedb_mysql.Account("fooAccount",
            account_name="tftest",
            account_password="93f0cb0614Aab12",
            account_type="Normal",
            instance_id=foo_instance.id,
            account_privileges=[volcengine.vedb_mysql.AccountAccountPrivilegeArgs(
                db_name=foo_database.db_name,
                account_privilege="Custom",
                account_privilege_detail="SELECT,INSERT,DELETE",
            )])
        ```

        ## Import

        VedbMysqlAccount can be imported using the instance id and account name, e.g.

        ```sh
        $ pulumi import volcengine:vedb_mysql/account:Account default vedbm-r3xq0zdl****:testuser
        ```

        :param str resource_name: The name of the resource.
        :param AccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_password: Optional[pulumi.Input[str]] = None,
                 account_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountAccountPrivilegeArgs']]]]] = None,
                 account_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountArgs.__new__(AccountArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            if account_password is None and not opts.urn:
                raise TypeError("Missing required property 'account_password'")
            __props__.__dict__["account_password"] = None if account_password is None else pulumi.Output.secret(account_password)
            __props__.__dict__["account_privileges"] = account_privileges
            if account_type is None and not opts.urn:
                raise TypeError("Missing required property 'account_type'")
            __props__.__dict__["account_type"] = account_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accountPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Account, __self__).__init__(
            'volcengine:vedb_mysql/account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_name: Optional[pulumi.Input[str]] = None,
            account_password: Optional[pulumi.Input[str]] = None,
            account_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountAccountPrivilegeArgs']]]]] = None,
            account_type: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: Database account name. The account name must meet the following requirements:
               The name is unique and within 2 to 32 characters in length.
               Consists of lowercase letters, numbers, or underscores (_).
               Starts with a lowercase letter and ends with a letter or number.
               The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
        :param pulumi.Input[str] account_password: Password of database account. The account password must meet the following requirements:
               It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
               It must be within 8 to 32 characters in length.
               It must contain at least three of upper case letters, lower case letters, numbers or special characters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountAccountPrivilegeArgs']]]] account_privileges: Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
        :param pulumi.Input[str] account_type: Database account type. Values: 
               Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
               Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
        :param pulumi.Input[str] instance_id: The id of the instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountState.__new__(_AccountState)

        __props__.__dict__["account_name"] = account_name
        __props__.__dict__["account_password"] = account_password
        __props__.__dict__["account_privileges"] = account_privileges
        __props__.__dict__["account_type"] = account_type
        __props__.__dict__["instance_id"] = instance_id
        return Account(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[str]:
        """
        Database account name. The account name must meet the following requirements:
        The name is unique and within 2 to 32 characters in length.
        Consists of lowercase letters, numbers, or underscores (_).
        Starts with a lowercase letter and ends with a letter or number.
        The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> pulumi.Output[str]:
        """
        Password of database account. The account password must meet the following requirements:
        It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
        It must be within 8 to 32 characters in length.
        It must contain at least three of upper case letters, lower case letters, numbers or special characters.
        """
        return pulumi.get(self, "account_password")

    @property
    @pulumi.getter(name="accountPrivileges")
    def account_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.AccountAccountPrivilege']]]:
        """
        Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
        """
        return pulumi.get(self, "account_privileges")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> pulumi.Output[str]:
        """
        Database account type. Values: 
        Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
        Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")

