# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccountAccountPrivilege',
    'AccountsAccountResult',
    'AccountsAccountAccountPrivilegeResult',
    'AllowlistsAllowListResult',
    'AllowlistsAllowListAssociatedInstanceResult',
    'BackupBackupPolicy',
    'BackupsBackupResult',
    'BackupsBackupBackupPolicyResult',
    'DatabasesDatabaseResult',
    'DatabasesDatabaseDatabasesPrivilegeResult',
    'EndpointsEndpointResult',
    'EndpointsEndpointAddressResult',
    'InstanceTag',
    'InstancesInstanceResult',
    'InstancesInstanceNodeResult',
    'InstancesInstanceTagResult',
    'InstancesTagResult',
]

@pulumi.output_type
class AccountAccountPrivilege(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountPrivilege":
            suggest = "account_privilege"
        elif key == "dbName":
            suggest = "db_name"
        elif key == "accountPrivilegeDetail":
            suggest = "account_privilege_detail"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountAccountPrivilege. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountAccountPrivilege.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountAccountPrivilege.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_privilege: str,
                 db_name: str,
                 account_privilege_detail: Optional[str] = None):
        """
        :param str account_privilege: Authorization database privilege types: 
               ReadWrite: Read and write privilege.
               ReadOnly: Read-only privilege.
               DDLOnly: Only DDL privilege.
               DMLOnly: Only DML privilege.
               Custom: Custom privilege.
        :param str db_name: Database name requiring authorization.
        :param str account_privilege_detail: The specific SQL operation permissions contained in the permission type are separated by English commas (,) between multiple strings.
               When used as a request parameter in the CreateDatabase interface, when the AccountPrivilege value is Custom, this parameter is required. Value range (multiple selections allowed): SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER. When used as a return parameter in the DescribeDatabases interface, regardless of the value of AccountPrivilege, the details of the SQL operation permissions contained in this permission type are returned. For the specific SQL operation permissions contained in each permission type, please refer to the account permission list.
        """
        pulumi.set(__self__, "account_privilege", account_privilege)
        pulumi.set(__self__, "db_name", db_name)
        if account_privilege_detail is not None:
            pulumi.set(__self__, "account_privilege_detail", account_privilege_detail)

    @property
    @pulumi.getter(name="accountPrivilege")
    def account_privilege(self) -> str:
        """
        Authorization database privilege types: 
        ReadWrite: Read and write privilege.
        ReadOnly: Read-only privilege.
        DDLOnly: Only DDL privilege.
        DMLOnly: Only DML privilege.
        Custom: Custom privilege.
        """
        return pulumi.get(self, "account_privilege")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        Database name requiring authorization.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="accountPrivilegeDetail")
    def account_privilege_detail(self) -> Optional[str]:
        """
        The specific SQL operation permissions contained in the permission type are separated by English commas (,) between multiple strings.
        When used as a request parameter in the CreateDatabase interface, when the AccountPrivilege value is Custom, this parameter is required. Value range (multiple selections allowed): SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER. When used as a return parameter in the DescribeDatabases interface, regardless of the value of AccountPrivilege, the details of the SQL operation permissions contained in this permission type are returned. For the specific SQL operation permissions contained in each permission type, please refer to the account permission list.
        """
        return pulumi.get(self, "account_privilege_detail")


@pulumi.output_type
class AccountsAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_privileges: Sequence['outputs.AccountsAccountAccountPrivilegeResult'],
                 account_type: str):
        """
        :param str account_name: The name of the database account. This field supports fuzzy query.
        :param Sequence['AccountsAccountAccountPrivilegeArgs'] account_privileges: The privilege detail list of RDS mysql instance account.
        :param str account_type: The type of the database account.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_privileges", account_privileges)
        pulumi.set(__self__, "account_type", account_type)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        The name of the database account. This field supports fuzzy query.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountPrivileges")
    def account_privileges(self) -> Sequence['outputs.AccountsAccountAccountPrivilegeResult']:
        """
        The privilege detail list of RDS mysql instance account.
        """
        return pulumi.get(self, "account_privileges")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> str:
        """
        The type of the database account.
        """
        return pulumi.get(self, "account_type")


@pulumi.output_type
class AccountsAccountAccountPrivilegeResult(dict):
    def __init__(__self__, *,
                 account_privilege: str,
                 account_privilege_detail: str,
                 db_name: str):
        """
        :param str account_privilege: The privilege type of the account.
        :param str account_privilege_detail: The privilege detail of the account.
        :param str db_name: The name of database.
        """
        pulumi.set(__self__, "account_privilege", account_privilege)
        pulumi.set(__self__, "account_privilege_detail", account_privilege_detail)
        pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter(name="accountPrivilege")
    def account_privilege(self) -> str:
        """
        The privilege type of the account.
        """
        return pulumi.get(self, "account_privilege")

    @property
    @pulumi.getter(name="accountPrivilegeDetail")
    def account_privilege_detail(self) -> str:
        """
        The privilege detail of the account.
        """
        return pulumi.get(self, "account_privilege_detail")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        The name of database.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class AllowlistsAllowListResult(dict):
    def __init__(__self__, *,
                 allow_list_desc: str,
                 allow_list_id: str,
                 allow_list_ip_num: int,
                 allow_list_name: str,
                 allow_list_type: str,
                 allow_lists: Sequence[str],
                 associated_instance_num: int,
                 associated_instances: Sequence['outputs.AllowlistsAllowListAssociatedInstanceResult']):
        """
        :param str allow_list_desc: The description of the allow list.
        :param str allow_list_id: The id of the allow list.
        :param int allow_list_ip_num: The total number of IP addresses (or address ranges) in the whitelist.
        :param str allow_list_name: The name of the allow list.
        :param str allow_list_type: The type of the allow list.
        :param Sequence[str] allow_lists: The IP address or a range of IP addresses in CIDR format.
        :param int associated_instance_num: The total number of instances bound under the whitelist.
        :param Sequence['AllowlistsAllowListAssociatedInstanceArgs'] associated_instances: The list of instances.
        """
        pulumi.set(__self__, "allow_list_desc", allow_list_desc)
        pulumi.set(__self__, "allow_list_id", allow_list_id)
        pulumi.set(__self__, "allow_list_ip_num", allow_list_ip_num)
        pulumi.set(__self__, "allow_list_name", allow_list_name)
        pulumi.set(__self__, "allow_list_type", allow_list_type)
        pulumi.set(__self__, "allow_lists", allow_lists)
        pulumi.set(__self__, "associated_instance_num", associated_instance_num)
        pulumi.set(__self__, "associated_instances", associated_instances)

    @property
    @pulumi.getter(name="allowListDesc")
    def allow_list_desc(self) -> str:
        """
        The description of the allow list.
        """
        return pulumi.get(self, "allow_list_desc")

    @property
    @pulumi.getter(name="allowListId")
    def allow_list_id(self) -> str:
        """
        The id of the allow list.
        """
        return pulumi.get(self, "allow_list_id")

    @property
    @pulumi.getter(name="allowListIpNum")
    def allow_list_ip_num(self) -> int:
        """
        The total number of IP addresses (or address ranges) in the whitelist.
        """
        return pulumi.get(self, "allow_list_ip_num")

    @property
    @pulumi.getter(name="allowListName")
    def allow_list_name(self) -> str:
        """
        The name of the allow list.
        """
        return pulumi.get(self, "allow_list_name")

    @property
    @pulumi.getter(name="allowListType")
    def allow_list_type(self) -> str:
        """
        The type of the allow list.
        """
        return pulumi.get(self, "allow_list_type")

    @property
    @pulumi.getter(name="allowLists")
    def allow_lists(self) -> Sequence[str]:
        """
        The IP address or a range of IP addresses in CIDR format.
        """
        return pulumi.get(self, "allow_lists")

    @property
    @pulumi.getter(name="associatedInstanceNum")
    def associated_instance_num(self) -> int:
        """
        The total number of instances bound under the whitelist.
        """
        return pulumi.get(self, "associated_instance_num")

    @property
    @pulumi.getter(name="associatedInstances")
    def associated_instances(self) -> Sequence['outputs.AllowlistsAllowListAssociatedInstanceResult']:
        """
        The list of instances.
        """
        return pulumi.get(self, "associated_instances")


@pulumi.output_type
class AllowlistsAllowListAssociatedInstanceResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 instance_name: str,
                 vpc: str):
        """
        :param str instance_id: Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
        :param str instance_name: The name of the instance.
        :param str vpc: The id of the vpc.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        The name of the instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def vpc(self) -> str:
        """
        The id of the vpc.
        """
        return pulumi.get(self, "vpc")


@pulumi.output_type
class BackupBackupPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupRetentionPeriod":
            suggest = "backup_retention_period"
        elif key == "backupTime":
            suggest = "backup_time"
        elif key == "fullBackupPeriod":
            suggest = "full_backup_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupBackupPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupBackupPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupBackupPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_retention_period: int,
                 backup_time: str,
                 full_backup_period: str):
        """
        :param int backup_retention_period: Data backup retention period, value: 7 to 30 days.
        :param str backup_time: The time for executing the backup task has an interval window of 2 hours and must be an even-hour time. Format: HH:mmZ-HH:mmZ (UTC time).
        :param str full_backup_period: Full backup period. It is recommended to select at least 2 days per week for full backup. Multiple values are separated by English commas (,). Values: Monday: Monday. Tuesday: Tuesday. Wednesday: Wednesday. Thursday: Thursday. Friday: Friday. Saturday: Saturday. Sunday: Sunday.
        """
        pulumi.set(__self__, "backup_retention_period", backup_retention_period)
        pulumi.set(__self__, "backup_time", backup_time)
        pulumi.set(__self__, "full_backup_period", full_backup_period)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> int:
        """
        Data backup retention period, value: 7 to 30 days.
        """
        return pulumi.get(self, "backup_retention_period")

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> str:
        """
        The time for executing the backup task has an interval window of 2 hours and must be an even-hour time. Format: HH:mmZ-HH:mmZ (UTC time).
        """
        return pulumi.get(self, "backup_time")

    @property
    @pulumi.getter(name="fullBackupPeriod")
    def full_backup_period(self) -> str:
        """
        Full backup period. It is recommended to select at least 2 days per week for full backup. Multiple values are separated by English commas (,). Values: Monday: Monday. Tuesday: Tuesday. Wednesday: Wednesday. Thursday: Thursday. Friday: Friday. Saturday: Saturday. Sunday: Sunday.
        """
        return pulumi.get(self, "full_backup_period")


@pulumi.output_type
class BackupsBackupResult(dict):
    def __init__(__self__, *,
                 backup_end_time: str,
                 backup_file_size: int,
                 backup_id: str,
                 backup_method: str,
                 backup_policies: Sequence['outputs.BackupsBackupBackupPolicyResult'],
                 backup_start_time: str,
                 backup_status: str,
                 backup_type: str,
                 consistent_time: str,
                 create_type: str,
                 id: str):
        """
        :param str backup_end_time: The end time of the backup.
        :param int backup_file_size: The size of the backup file.
        :param str backup_id: The id of the backup.
        :param str backup_method: Backup method. Currently, only physical backup is supported. The value is Physical.
        :param Sequence['BackupsBackupBackupPolicyArgs'] backup_policies: Data backup strategy for instances.
        :param str backup_start_time: The start time of the backup.
        :param str backup_status: The status of the backup.
        :param str backup_type: The type of the backup.
        :param str consistent_time: The time point of consistent backup, in the format: yyyy-MM-ddTHH:mm:ssZ (UTC time).
        :param str create_type: The type of the backup create.
        :param str id: The id of the backup.
        """
        pulumi.set(__self__, "backup_end_time", backup_end_time)
        pulumi.set(__self__, "backup_file_size", backup_file_size)
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_method", backup_method)
        pulumi.set(__self__, "backup_policies", backup_policies)
        pulumi.set(__self__, "backup_start_time", backup_start_time)
        pulumi.set(__self__, "backup_status", backup_status)
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "consistent_time", consistent_time)
        pulumi.set(__self__, "create_type", create_type)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="backupEndTime")
    def backup_end_time(self) -> str:
        """
        The end time of the backup.
        """
        return pulumi.get(self, "backup_end_time")

    @property
    @pulumi.getter(name="backupFileSize")
    def backup_file_size(self) -> int:
        """
        The size of the backup file.
        """
        return pulumi.get(self, "backup_file_size")

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        """
        The id of the backup.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> str:
        """
        Backup method. Currently, only physical backup is supported. The value is Physical.
        """
        return pulumi.get(self, "backup_method")

    @property
    @pulumi.getter(name="backupPolicies")
    def backup_policies(self) -> Sequence['outputs.BackupsBackupBackupPolicyResult']:
        """
        Data backup strategy for instances.
        """
        return pulumi.get(self, "backup_policies")

    @property
    @pulumi.getter(name="backupStartTime")
    def backup_start_time(self) -> str:
        """
        The start time of the backup.
        """
        return pulumi.get(self, "backup_start_time")

    @property
    @pulumi.getter(name="backupStatus")
    def backup_status(self) -> str:
        """
        The status of the backup.
        """
        return pulumi.get(self, "backup_status")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        """
        The type of the backup.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="consistentTime")
    def consistent_time(self) -> str:
        """
        The time point of consistent backup, in the format: yyyy-MM-ddTHH:mm:ssZ (UTC time).
        """
        return pulumi.get(self, "consistent_time")

    @property
    @pulumi.getter(name="createType")
    def create_type(self) -> str:
        """
        The type of the backup create.
        """
        return pulumi.get(self, "create_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the backup.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class BackupsBackupBackupPolicyResult(dict):
    def __init__(__self__, *,
                 backup_retention_period: int,
                 backup_time: str,
                 continue_backup: bool,
                 full_backup_period: str,
                 instance_id: str):
        """
        :param int backup_retention_period: Data backup retention period, value: 7 to 30 days.
        :param str backup_time: The time for executing the backup task. The interval window is two hours. Format: HH:mmZ-HH:mmZ (UTC time).
        :param bool continue_backup: Whether to enable continuous backup. The value is fixed as true.
        :param str full_backup_period: Full backup period. Multiple values are separated by English commas (,). Values:
               Monday: Monday.
               Tuesday: Tuesday.
               Wednesday: Wednesday.
               Thursday: Thursday.
               Friday: Friday.
               Saturday: Saturday.
               Sunday: Sunday.
        :param str instance_id: The id of the instance.
        """
        pulumi.set(__self__, "backup_retention_period", backup_retention_period)
        pulumi.set(__self__, "backup_time", backup_time)
        pulumi.set(__self__, "continue_backup", continue_backup)
        pulumi.set(__self__, "full_backup_period", full_backup_period)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> int:
        """
        Data backup retention period, value: 7 to 30 days.
        """
        return pulumi.get(self, "backup_retention_period")

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> str:
        """
        The time for executing the backup task. The interval window is two hours. Format: HH:mmZ-HH:mmZ (UTC time).
        """
        return pulumi.get(self, "backup_time")

    @property
    @pulumi.getter(name="continueBackup")
    def continue_backup(self) -> bool:
        """
        Whether to enable continuous backup. The value is fixed as true.
        """
        return pulumi.get(self, "continue_backup")

    @property
    @pulumi.getter(name="fullBackupPeriod")
    def full_backup_period(self) -> str:
        """
        Full backup period. Multiple values are separated by English commas (,). Values:
        Monday: Monday.
        Tuesday: Tuesday.
        Wednesday: Wednesday.
        Thursday: Thursday.
        Friday: Friday.
        Saturday: Saturday.
        Sunday: Sunday.
        """
        return pulumi.get(self, "full_backup_period")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The id of the instance.
        """
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class DatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 character_set_name: str,
                 databases_privileges: Sequence['outputs.DatabasesDatabaseDatabasesPrivilegeResult'],
                 db_name: str):
        """
        :param str character_set_name: Database character set: utf8mb4 (default), utf8, latin1, ascii.
        :param str db_name: Database name.
        """
        pulumi.set(__self__, "character_set_name", character_set_name)
        pulumi.set(__self__, "databases_privileges", databases_privileges)
        pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter(name="characterSetName")
    def character_set_name(self) -> str:
        """
        Database character set: utf8mb4 (default), utf8, latin1, ascii.
        """
        return pulumi.get(self, "character_set_name")

    @property
    @pulumi.getter(name="databasesPrivileges")
    def databases_privileges(self) -> Sequence['outputs.DatabasesDatabaseDatabasesPrivilegeResult']:
        return pulumi.get(self, "databases_privileges")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class DatabasesDatabaseDatabasesPrivilegeResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_privilege: str,
                 account_privilege_detail: str):
        """
        :param str account_name: Account name that requires authorization.
        :param str account_privilege: Authorization database privilege types: 
               ReadWrite: Read and write privilege.
                ReadOnly: Read-only privilege.
                DDLOnly: Only DDL privilege.
                DMLOnly: Only DML privilege.
                Custom: Custom privilege.
        :param str account_privilege_detail: The specific SQL operation permissions contained in the permission type are separated by English commas (,) between multiple strings.
                When used as a request parameter in the CreateDatabase interface, when the AccountPrivilege value is Custom, this parameter is required. Value range (multiple selections allowed): SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER. When used as a return parameter in the DescribeDatabases interface, regardless of the value of AccountPrivilege, the details of the SQL operation permissions contained in this permission type are returned. For the specific SQL operation permissions contained in each permission type, please refer to the account permission list.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_privilege", account_privilege)
        pulumi.set(__self__, "account_privilege_detail", account_privilege_detail)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Account name that requires authorization.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountPrivilege")
    def account_privilege(self) -> str:
        """
        Authorization database privilege types: 
        ReadWrite: Read and write privilege.
         ReadOnly: Read-only privilege.
         DDLOnly: Only DDL privilege.
         DMLOnly: Only DML privilege.
         Custom: Custom privilege.
        """
        return pulumi.get(self, "account_privilege")

    @property
    @pulumi.getter(name="accountPrivilegeDetail")
    def account_privilege_detail(self) -> str:
        """
        The specific SQL operation permissions contained in the permission type are separated by English commas (,) between multiple strings.
         When used as a request parameter in the CreateDatabase interface, when the AccountPrivilege value is Custom, this parameter is required. Value range (multiple selections allowed): SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER. When used as a return parameter in the DescribeDatabases interface, regardless of the value of AccountPrivilege, the details of the SQL operation permissions contained in this permission type are returned. For the specific SQL operation permissions contained in each permission type, please refer to the account permission list.
        """
        return pulumi.get(self, "account_privilege_detail")


@pulumi.output_type
class EndpointsEndpointResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.EndpointsEndpointAddressResult'],
                 auto_add_new_nodes: bool,
                 consist_level: str,
                 consist_timeout: int,
                 consist_timeout_action: str,
                 description: str,
                 distributed_transaction: bool,
                 endpoint_id: str,
                 endpoint_name: str,
                 endpoint_type: str,
                 id: str,
                 master_accept_read_requests: bool,
                 node_ids: Sequence[str],
                 read_write_mode: str):
        """
        :param Sequence['EndpointsEndpointAddressArgs'] addresses: The address information.
        :param bool auto_add_new_nodes: Set whether newly created read-only nodes will automatically join this connection endpoint. Values:
               true: Automatically join.
               false: Do not automatically join (default).
        :param str consist_level: Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
               Eventual: eventual consistency.
               Session: session consistency.
               Global: global consistency.
               Description
               When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
               When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        :param int consist_timeout: When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
               Explanation
               This parameter takes effect only when the value of ConsistLevel is Global or Session.
        :param str consist_timeout_action: Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
               ReturnError: Return SQL error (wait replication complete timeout, please retry).
               ReadMaster: Send a request to the master node (default).
               Description
               This parameter takes effect only when the value of ConsistLevel is Global or Session.
        :param str description: Description information for connecting endpoint. The length cannot exceed 200 characters.
        :param bool distributed_transaction: Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
               true: Enabled (default).
               false: Disabled.
               Description
               Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        :param str endpoint_id: The id of the endpoint.
        :param str endpoint_name: Connect the endpoint name. The setting rules are as follows:
               It cannot start with a number or a hyphen (-).
               It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
               The length is 1 to 64 characters.
        :param str endpoint_type: Connect terminal type. The value is fixed as Custom, indicating a custom terminal.
        :param str id: The id of the endpoint.
        :param bool master_accept_read_requests: The master node accepts read requests. Value range:
               true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
               false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
               Description
               Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        :param Sequence[str] node_ids: Connect the node IDs associated with the endpoint.The filling rules are as follows:
               When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
               When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        :param str read_write_mode: Endpoint read-write mode. Values:
               ReadWrite: Read and write terminal.
               ReadOnly: Read-only terminal (default).
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "auto_add_new_nodes", auto_add_new_nodes)
        pulumi.set(__self__, "consist_level", consist_level)
        pulumi.set(__self__, "consist_timeout", consist_timeout)
        pulumi.set(__self__, "consist_timeout_action", consist_timeout_action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "distributed_transaction", distributed_transaction)
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "master_accept_read_requests", master_accept_read_requests)
        pulumi.set(__self__, "node_ids", node_ids)
        pulumi.set(__self__, "read_write_mode", read_write_mode)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.EndpointsEndpointAddressResult']:
        """
        The address information.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="autoAddNewNodes")
    def auto_add_new_nodes(self) -> bool:
        """
        Set whether newly created read-only nodes will automatically join this connection endpoint. Values:
        true: Automatically join.
        false: Do not automatically join (default).
        """
        return pulumi.get(self, "auto_add_new_nodes")

    @property
    @pulumi.getter(name="consistLevel")
    def consist_level(self) -> str:
        """
        Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
        Eventual: eventual consistency.
        Session: session consistency.
        Global: global consistency.
        Description
        When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
        When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        """
        return pulumi.get(self, "consist_level")

    @property
    @pulumi.getter(name="consistTimeout")
    def consist_timeout(self) -> int:
        """
        When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
        Explanation
        This parameter takes effect only when the value of ConsistLevel is Global or Session.
        """
        return pulumi.get(self, "consist_timeout")

    @property
    @pulumi.getter(name="consistTimeoutAction")
    def consist_timeout_action(self) -> str:
        """
        Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
        ReturnError: Return SQL error (wait replication complete timeout, please retry).
        ReadMaster: Send a request to the master node (default).
        Description
        This parameter takes effect only when the value of ConsistLevel is Global or Session.
        """
        return pulumi.get(self, "consist_timeout_action")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description information for connecting endpoint. The length cannot exceed 200 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributedTransaction")
    def distributed_transaction(self) -> bool:
        """
        Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
        true: Enabled (default).
        false: Disabled.
        Description
        Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        """
        return pulumi.get(self, "distributed_transaction")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> str:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> str:
        """
        Connect the endpoint name. The setting rules are as follows:
        It cannot start with a number or a hyphen (-).
        It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        The length is 1 to 64 characters.
        """
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> str:
        """
        Connect terminal type. The value is fixed as Custom, indicating a custom terminal.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the endpoint.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="masterAcceptReadRequests")
    def master_accept_read_requests(self) -> bool:
        """
        The master node accepts read requests. Value range:
        true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
        false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
        Description
        Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        """
        return pulumi.get(self, "master_accept_read_requests")

    @property
    @pulumi.getter(name="nodeIds")
    def node_ids(self) -> Sequence[str]:
        """
        Connect the node IDs associated with the endpoint.The filling rules are as follows:
        When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
        When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        """
        return pulumi.get(self, "node_ids")

    @property
    @pulumi.getter(name="readWriteMode")
    def read_write_mode(self) -> str:
        """
        Endpoint read-write mode. Values:
        ReadWrite: Read and write terminal.
        ReadOnly: Read-only terminal (default).
        """
        return pulumi.get(self, "read_write_mode")


@pulumi.output_type
class EndpointsEndpointAddressResult(dict):
    def __init__(__self__, *,
                 dns_visibility: bool,
                 domain: str,
                 eip_id: str,
                 ip_address: str,
                 network_type: str,
                 port: str,
                 subnet_id: str):
        """
        :param bool dns_visibility: Parsing method. Currently, the return value can only be false (Volcengine private network parsing).
        :param str domain: Instance intranet access domain name.
        :param str eip_id: The EIP id.
        :param str ip_address: IP address.
        :param str network_type: Network type:
               Private: Private network VPC.
               Public: Public network access.
        :param str port: Instance intranet access port.
        :param str subnet_id: Subnet ID. The subnet must belong to the selected availability zone.
               Description
               A subnet is an IP address block within a private network. All cloud resources in a private network must be deployed within a subnet. The subnet assigns private IP addresses to cloud resources.
        """
        pulumi.set(__self__, "dns_visibility", dns_visibility)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="dnsVisibility")
    def dns_visibility(self) -> bool:
        """
        Parsing method. Currently, the return value can only be false (Volcengine private network parsing).
        """
        return pulumi.get(self, "dns_visibility")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Instance intranet access domain name.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> str:
        """
        The EIP id.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        Network type:
        Private: Private network VPC.
        Public: Public network access.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Instance intranet access port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet ID. The subnet must belong to the selected availability zone.
        Description
        A subnet is an IP address block within a private network. All cloud resources in a private network must be deployed within a subnet. The subnet assigns private IP addresses to cloud resources.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class InstanceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstancesInstanceResult(dict):
    def __init__(__self__, *,
                 auto_renew: bool,
                 charge_end_time: str,
                 charge_start_time: str,
                 charge_status: str,
                 charge_type: str,
                 create_time: str,
                 db_engine_version: str,
                 id: str,
                 instance_id: str,
                 instance_name: str,
                 instance_status: str,
                 lower_case_table_names: str,
                 nodes: Sequence['outputs.InstancesInstanceNodeResult'],
                 overdue_reclaim_time: str,
                 overdue_time: str,
                 pre_paid_storage_in_gb: int,
                 project_name: str,
                 region_id: str,
                 storage_charge_type: str,
                 storage_used_gib: float,
                 subnet_id: str,
                 tags: Sequence['outputs.InstancesInstanceTagResult'],
                 time_zone: str,
                 vpc_id: str,
                 zone_ids: str):
        """
        :param bool auto_renew: Whether auto-renewal is enabled in the prepaid scenario. Values:
               true: Auto-renewal is enabled.
               false: Auto-renewal is not enabled.
        :param str charge_end_time: The billing expiration time in the prepaid scenario, in the format: yyyy-MM-ddTHH:mm:ssZ (UTC time).
        :param str charge_start_time: The time when billing starts. Format: yyyy-MM-ddTHH:mm:ssZ (UTC time).
        :param str charge_status: Payment status:
               Normal: Normal.
               Overdue: In arrears.
               Shutdown: Shut down.
        :param str charge_type: The charge type of the veDB Mysql instance.
        :param str create_time: The create time of the veDB Mysql instance.
        :param str db_engine_version: The version of the veDB Mysql instance.
        :param str id: The ID of the veDB Mysql instance.
        :param str instance_id: The id of the veDB Mysql instance.
        :param str instance_name: The name of the veDB Mysql instance.
        :param str instance_status: The status of the veDB Mysql instance.
        :param str lower_case_table_names: Whether the table name is case sensitive, the default value is 1.
               Ranges:
               0: Table names are stored as fixed and table names are case-sensitive.
               1: Table names will be stored in lowercase and table names are not case sensitive.
        :param Sequence['InstancesInstanceNodeArgs'] nodes: Detailed information of instance nodes.
        :param str overdue_reclaim_time: Expected release time when shut down due to arrears. Format: yyyy-MM-ddTHH:mm:ssZ (UTC time).
        :param str overdue_time: Overdue shutdown time. Format: yyyy-MM-ddTHH:mm:ssZ (UTC time).
        :param int pre_paid_storage_in_gb: Total storage capacity in GiB for prepaid services.
        :param str project_name: The project name of the veDB Mysql instance.
        :param str region_id: The region id.
        :param str storage_charge_type: Storage billing type. Values:
               PostPaid: Pay-as-you-go (postpaid).
               PrePaid: Monthly/yearly subscription (prepaid).
        :param float storage_used_gib: Used storage size, unit: GiB.
        :param str subnet_id: The subnet ID of the veDB Mysql instance.
        :param Sequence['InstancesInstanceTagArgs'] tags: Tags.
        :param str time_zone: Time zone.
        :param str vpc_id: The vpc ID of the veDB Mysql instance.
        :param str zone_ids: The available zone of the veDB Mysql instance.
        """
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "charge_end_time", charge_end_time)
        pulumi.set(__self__, "charge_start_time", charge_start_time)
        pulumi.set(__self__, "charge_status", charge_status)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "db_engine_version", db_engine_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "lower_case_table_names", lower_case_table_names)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "overdue_reclaim_time", overdue_reclaim_time)
        pulumi.set(__self__, "overdue_time", overdue_time)
        pulumi.set(__self__, "pre_paid_storage_in_gb", pre_paid_storage_in_gb)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "storage_charge_type", storage_charge_type)
        pulumi.set(__self__, "storage_used_gib", storage_used_gib)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone_ids", zone_ids)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> bool:
        """
        Whether auto-renewal is enabled in the prepaid scenario. Values:
        true: Auto-renewal is enabled.
        false: Auto-renewal is not enabled.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="chargeEndTime")
    def charge_end_time(self) -> str:
        """
        The billing expiration time in the prepaid scenario, in the format: yyyy-MM-ddTHH:mm:ssZ (UTC time).
        """
        return pulumi.get(self, "charge_end_time")

    @property
    @pulumi.getter(name="chargeStartTime")
    def charge_start_time(self) -> str:
        """
        The time when billing starts. Format: yyyy-MM-ddTHH:mm:ssZ (UTC time).
        """
        return pulumi.get(self, "charge_start_time")

    @property
    @pulumi.getter(name="chargeStatus")
    def charge_status(self) -> str:
        """
        Payment status:
        Normal: Normal.
        Overdue: In arrears.
        Shutdown: Shut down.
        """
        return pulumi.get(self, "charge_status")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of the veDB Mysql instance.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the veDB Mysql instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbEngineVersion")
    def db_engine_version(self) -> str:
        """
        The version of the veDB Mysql instance.
        """
        return pulumi.get(self, "db_engine_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the veDB Mysql instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The id of the veDB Mysql instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        The name of the veDB Mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> str:
        """
        The status of the veDB Mysql instance.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="lowerCaseTableNames")
    def lower_case_table_names(self) -> str:
        """
        Whether the table name is case sensitive, the default value is 1.
        Ranges:
        0: Table names are stored as fixed and table names are case-sensitive.
        1: Table names will be stored in lowercase and table names are not case sensitive.
        """
        return pulumi.get(self, "lower_case_table_names")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.InstancesInstanceNodeResult']:
        """
        Detailed information of instance nodes.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="overdueReclaimTime")
    def overdue_reclaim_time(self) -> str:
        """
        Expected release time when shut down due to arrears. Format: yyyy-MM-ddTHH:mm:ssZ (UTC time).
        """
        return pulumi.get(self, "overdue_reclaim_time")

    @property
    @pulumi.getter(name="overdueTime")
    def overdue_time(self) -> str:
        """
        Overdue shutdown time. Format: yyyy-MM-ddTHH:mm:ssZ (UTC time).
        """
        return pulumi.get(self, "overdue_time")

    @property
    @pulumi.getter(name="prePaidStorageInGb")
    def pre_paid_storage_in_gb(self) -> int:
        """
        Total storage capacity in GiB for prepaid services.
        """
        return pulumi.get(self, "pre_paid_storage_in_gb")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The project name of the veDB Mysql instance.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The region id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="storageChargeType")
    def storage_charge_type(self) -> str:
        """
        Storage billing type. Values:
        PostPaid: Pay-as-you-go (postpaid).
        PrePaid: Monthly/yearly subscription (prepaid).
        """
        return pulumi.get(self, "storage_charge_type")

    @property
    @pulumi.getter(name="storageUsedGib")
    def storage_used_gib(self) -> float:
        """
        Used storage size, unit: GiB.
        """
        return pulumi.get(self, "storage_used_gib")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet ID of the veDB Mysql instance.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.InstancesInstanceTagResult']:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        Time zone.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The vpc ID of the veDB Mysql instance.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> str:
        """
        The available zone of the veDB Mysql instance.
        """
        return pulumi.get(self, "zone_ids")


@pulumi.output_type
class InstancesInstanceNodeResult(dict):
    def __init__(__self__, *,
                 memory: int,
                 node_id: str,
                 node_spec: str,
                 node_type: str,
                 v_cpu: int,
                 zone_id: str):
        """
        :param int memory: Memory size, in GiB.
        :param str node_id: The id of the node.
        :param str node_spec: Node specification of an instance.
        :param str node_type: Node type. Values:
               Primary: Primary node.
               ReadOnly: Read-only node.
        :param int v_cpu: CPU size. For example, when the value is 1, it means the CPU size is 1U.
        :param str zone_id: The available zone of the veDB Mysql instance.
        """
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "node_spec", node_spec)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "v_cpu", v_cpu)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory size, in GiB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        The id of the node.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="nodeSpec")
    def node_spec(self) -> str:
        """
        Node specification of an instance.
        """
        return pulumi.get(self, "node_spec")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Node type. Values:
        Primary: Primary node.
        ReadOnly: Read-only node.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="vCpu")
    def v_cpu(self) -> int:
        """
        CPU size. For example, when the value is 1, it means the CPU size is 1U.
        """
        return pulumi.get(self, "v_cpu")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The available zone of the veDB Mysql instance.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class InstancesInstanceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstancesTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


