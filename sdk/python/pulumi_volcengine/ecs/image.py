# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImageArgs', 'Image']

@pulumi.input_type
class ImageArgs:
    def __init__(__self__, *,
                 image_name: pulumi.Input[str],
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 create_whole_image: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 snapshot_group_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]] = None):
        """
        The set of arguments for constructing a Image resource.
        :param pulumi.Input[str] image_name: The name of the custom image.
        :param pulumi.Input[str] boot_mode: The boot mode of the custom image. Valid values: `BIOS`, `UEFI`. This field is only effective when modifying the image.
        :param pulumi.Input[bool] create_whole_image: Whether to create whole image. Default is false. This field is only effective when creating a new custom image.
        :param pulumi.Input[str] description: The description of the custom image.
        :param pulumi.Input[str] instance_id: The instance id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] project_name: The project name of the custom image.
        :param pulumi.Input[str] snapshot_group_id: The snapshot group id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] snapshot_id: The snapshot id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]] tags: Tags.
        """
        pulumi.set(__self__, "image_name", image_name)
        if boot_mode is not None:
            pulumi.set(__self__, "boot_mode", boot_mode)
        if create_whole_image is not None:
            pulumi.set(__self__, "create_whole_image", create_whole_image)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if snapshot_group_id is not None:
            pulumi.set(__self__, "snapshot_group_id", snapshot_group_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the custom image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The boot mode of the custom image. Valid values: `BIOS`, `UEFI`. This field is only effective when modifying the image.
        """
        return pulumi.get(self, "boot_mode")

    @boot_mode.setter
    def boot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_mode", value)

    @property
    @pulumi.getter(name="createWholeImage")
    def create_whole_image(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create whole image. Default is false. This field is only effective when creating a new custom image.
        """
        return pulumi.get(self, "create_whole_image")

    @create_whole_image.setter
    def create_whole_image(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_whole_image", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the custom image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The instance id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of the custom image.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="snapshotGroupId")
    def snapshot_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The snapshot group id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "snapshot_group_id")

    @snapshot_group_id.setter
    def snapshot_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_group_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The snapshot id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ImageState:
    def __init__(__self__, *,
                 architecture: Optional[pulumi.Input[str]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 create_whole_image: Optional[pulumi.Input[bool]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_support_cloud_init: Optional[pulumi.Input[bool]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input[str]] = None,
                 platform_version: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 share_status: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 snapshot_group_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Image resources.
        :param pulumi.Input[str] architecture: The architecture of Image.
        :param pulumi.Input[str] boot_mode: The boot mode of the custom image. Valid values: `BIOS`, `UEFI`. This field is only effective when modifying the image.
        :param pulumi.Input[bool] create_whole_image: Whether to create whole image. Default is false. This field is only effective when creating a new custom image.
        :param pulumi.Input[str] created_at: The create time of Image.
        :param pulumi.Input[str] description: The description of the custom image.
        :param pulumi.Input[str] image_name: The name of the custom image.
        :param pulumi.Input[str] instance_id: The instance id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[bool] is_support_cloud_init: Whether the Image support cloud-init.
        :param pulumi.Input[str] os_name: The name of Image operating system.
        :param pulumi.Input[str] os_type: The operating system type of Image.
        :param pulumi.Input[str] platform: The platform of Image.
        :param pulumi.Input[str] platform_version: The platform version of Image.
        :param pulumi.Input[str] project_name: The project name of the custom image.
        :param pulumi.Input[str] share_status: The share mode of Image.
        :param pulumi.Input[int] size: The size(GiB) of Image.
        :param pulumi.Input[str] snapshot_group_id: The snapshot group id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] snapshot_id: The snapshot id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] status: The status of Image.
        :param pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]] tags: Tags.
        :param pulumi.Input[str] updated_at: The update time of Image.
        :param pulumi.Input[str] visibility: The visibility of Image.
        """
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if boot_mode is not None:
            pulumi.set(__self__, "boot_mode", boot_mode)
        if create_whole_image is not None:
            pulumi.set(__self__, "create_whole_image", create_whole_image)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_support_cloud_init is not None:
            pulumi.set(__self__, "is_support_cloud_init", is_support_cloud_init)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if platform_version is not None:
            pulumi.set(__self__, "platform_version", platform_version)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if share_status is not None:
            pulumi.set(__self__, "share_status", share_status)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_group_id is not None:
            pulumi.set(__self__, "snapshot_group_id", snapshot_group_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[str]]:
        """
        The architecture of Image.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The boot mode of the custom image. Valid values: `BIOS`, `UEFI`. This field is only effective when modifying the image.
        """
        return pulumi.get(self, "boot_mode")

    @boot_mode.setter
    def boot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_mode", value)

    @property
    @pulumi.getter(name="createWholeImage")
    def create_whole_image(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create whole image. Default is false. This field is only effective when creating a new custom image.
        """
        return pulumi.get(self, "create_whole_image")

    @create_whole_image.setter
    def create_whole_image(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_whole_image", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of Image.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the custom image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the custom image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The instance id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="isSupportCloudInit")
    def is_support_cloud_init(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Image support cloud-init.
        """
        return pulumi.get(self, "is_support_cloud_init")

    @is_support_cloud_init.setter
    def is_support_cloud_init(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_support_cloud_init", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of Image operating system.
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The operating system type of Image.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[str]]:
        """
        The platform of Image.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> Optional[pulumi.Input[str]]:
        """
        The platform version of Image.
        """
        return pulumi.get(self, "platform_version")

    @platform_version.setter
    def platform_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform_version", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of the custom image.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="shareStatus")
    def share_status(self) -> Optional[pulumi.Input[str]]:
        """
        The share mode of Image.
        """
        return pulumi.get(self, "share_status")

    @share_status.setter
    def share_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "share_status", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The size(GiB) of Image.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="snapshotGroupId")
    def snapshot_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The snapshot group id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "snapshot_group_id")

    @snapshot_group_id.setter
    def snapshot_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_group_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The snapshot id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of Image.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of Image.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        The visibility of Image.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class Image(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 create_whole_image: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 snapshot_group_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageTagArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage image
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.ecs.Image("foo",
            create_whole_image=False,
            description="acc-test",
            image_name="acc-test-image",
            instance_id="i-ydi2q1s7wgqc6ild****",
            project_name="default",
            tags=[volcengine.ecs.ImageTagArgs(
                key="k1",
                value="v1",
            )])
        ```

        ## Import

        Image can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:ecs/image:Image default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] boot_mode: The boot mode of the custom image. Valid values: `BIOS`, `UEFI`. This field is only effective when modifying the image.
        :param pulumi.Input[bool] create_whole_image: Whether to create whole image. Default is false. This field is only effective when creating a new custom image.
        :param pulumi.Input[str] description: The description of the custom image.
        :param pulumi.Input[str] image_name: The name of the custom image.
        :param pulumi.Input[str] instance_id: The instance id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] project_name: The project name of the custom image.
        :param pulumi.Input[str] snapshot_group_id: The snapshot group id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] snapshot_id: The snapshot id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageTagArgs']]]] tags: Tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage image
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.ecs.Image("foo",
            create_whole_image=False,
            description="acc-test",
            image_name="acc-test-image",
            instance_id="i-ydi2q1s7wgqc6ild****",
            project_name="default",
            tags=[volcengine.ecs.ImageTagArgs(
                key="k1",
                value="v1",
            )])
        ```

        ## Import

        Image can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:ecs/image:Image default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 create_whole_image: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 snapshot_group_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageArgs.__new__(ImageArgs)

            __props__.__dict__["boot_mode"] = boot_mode
            __props__.__dict__["create_whole_image"] = create_whole_image
            __props__.__dict__["description"] = description
            if image_name is None and not opts.urn:
                raise TypeError("Missing required property 'image_name'")
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["snapshot_group_id"] = snapshot_group_id
            __props__.__dict__["snapshot_id"] = snapshot_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["architecture"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["is_support_cloud_init"] = None
            __props__.__dict__["os_name"] = None
            __props__.__dict__["os_type"] = None
            __props__.__dict__["platform"] = None
            __props__.__dict__["platform_version"] = None
            __props__.__dict__["share_status"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["visibility"] = None
        super(Image, __self__).__init__(
            'volcengine:ecs/image:Image',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            architecture: Optional[pulumi.Input[str]] = None,
            boot_mode: Optional[pulumi.Input[str]] = None,
            create_whole_image: Optional[pulumi.Input[bool]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            image_name: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            is_support_cloud_init: Optional[pulumi.Input[bool]] = None,
            os_name: Optional[pulumi.Input[str]] = None,
            os_type: Optional[pulumi.Input[str]] = None,
            platform: Optional[pulumi.Input[str]] = None,
            platform_version: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            share_status: Optional[pulumi.Input[str]] = None,
            size: Optional[pulumi.Input[int]] = None,
            snapshot_group_id: Optional[pulumi.Input[str]] = None,
            snapshot_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageTagArgs']]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None) -> 'Image':
        """
        Get an existing Image resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] architecture: The architecture of Image.
        :param pulumi.Input[str] boot_mode: The boot mode of the custom image. Valid values: `BIOS`, `UEFI`. This field is only effective when modifying the image.
        :param pulumi.Input[bool] create_whole_image: Whether to create whole image. Default is false. This field is only effective when creating a new custom image.
        :param pulumi.Input[str] created_at: The create time of Image.
        :param pulumi.Input[str] description: The description of the custom image.
        :param pulumi.Input[str] image_name: The name of the custom image.
        :param pulumi.Input[str] instance_id: The instance id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[bool] is_support_cloud_init: Whether the Image support cloud-init.
        :param pulumi.Input[str] os_name: The name of Image operating system.
        :param pulumi.Input[str] os_type: The operating system type of Image.
        :param pulumi.Input[str] platform: The platform of Image.
        :param pulumi.Input[str] platform_version: The platform version of Image.
        :param pulumi.Input[str] project_name: The project name of the custom image.
        :param pulumi.Input[str] share_status: The share mode of Image.
        :param pulumi.Input[int] size: The size(GiB) of Image.
        :param pulumi.Input[str] snapshot_group_id: The snapshot group id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] snapshot_id: The snapshot id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] status: The status of Image.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] updated_at: The update time of Image.
        :param pulumi.Input[str] visibility: The visibility of Image.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageState.__new__(_ImageState)

        __props__.__dict__["architecture"] = architecture
        __props__.__dict__["boot_mode"] = boot_mode
        __props__.__dict__["create_whole_image"] = create_whole_image
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_support_cloud_init"] = is_support_cloud_init
        __props__.__dict__["os_name"] = os_name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["platform"] = platform
        __props__.__dict__["platform_version"] = platform_version
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["share_status"] = share_status
        __props__.__dict__["size"] = size
        __props__.__dict__["snapshot_group_id"] = snapshot_group_id
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["visibility"] = visibility
        return Image(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[str]:
        """
        The architecture of Image.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> pulumi.Output[str]:
        """
        The boot mode of the custom image. Valid values: `BIOS`, `UEFI`. This field is only effective when modifying the image.
        """
        return pulumi.get(self, "boot_mode")

    @property
    @pulumi.getter(name="createWholeImage")
    def create_whole_image(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to create whole image. Default is false. This field is only effective when creating a new custom image.
        """
        return pulumi.get(self, "create_whole_image")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The create time of Image.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the custom image.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[str]:
        """
        The name of the custom image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        The instance id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isSupportCloudInit")
    def is_support_cloud_init(self) -> pulumi.Output[bool]:
        """
        Whether the Image support cloud-init.
        """
        return pulumi.get(self, "is_support_cloud_init")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> pulumi.Output[str]:
        """
        The name of Image operating system.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[str]:
        """
        The operating system type of Image.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> pulumi.Output[str]:
        """
        The platform of Image.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> pulumi.Output[str]:
        """
        The platform version of Image.
        """
        return pulumi.get(self, "platform_version")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The project name of the custom image.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="shareStatus")
    def share_status(self) -> pulumi.Output[str]:
        """
        The share mode of Image.
        """
        return pulumi.get(self, "share_status")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[int]:
        """
        The size(GiB) of Image.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotGroupId")
    def snapshot_group_id(self) -> pulumi.Output[Optional[str]]:
        """
        The snapshot group id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "snapshot_group_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[Optional[str]]:
        """
        The snapshot id of the custom image. Only one of `instance_id, snapshot_id, snapshot_group_id` can be specified.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of Image.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.ImageTag']]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The update time of Image.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[str]:
        """
        The visibility of Image.
        """
        return pulumi.get(self, "visibility")

