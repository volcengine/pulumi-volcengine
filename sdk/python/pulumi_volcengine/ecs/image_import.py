# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImageImportArgs', 'ImageImport']

@pulumi.input_type
class ImageImportArgs:
    def __init__(__self__, *,
                 image_name: pulumi.Input[str],
                 platform: pulumi.Input[str],
                 url: pulumi.Input[str],
                 architecture: Optional[pulumi.Input[str]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 platform_version: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ImageImportTagArgs']]]] = None):
        """
        The set of arguments for constructing a ImageImport resource.
        :param pulumi.Input[str] image_name: The name of the custom image.
        :param pulumi.Input[str] platform: The platform of the custom image. Valid values: `CentOS`, `Debian`, `veLinux`, `Windows Server`, `Fedora`, `OpenSUSE`, `Ubuntu`, `Rocky Linux`, `AlmaLinux`.
        :param pulumi.Input[str] url: The url of the custom image in tos bucket.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] architecture: The architecture of the custom image. Valid values: `amd64`, `arm64`.
        :param pulumi.Input[str] boot_mode: The boot mode of the custom image. Valid values: `BIOS`, `UEFI`.
        :param pulumi.Input[str] description: The description of the custom image.
        :param pulumi.Input[str] license_type: The license type of the custom image. Valid values: `VolcanoEngine`.
        :param pulumi.Input[str] os_type: The os type of the custom image. Valid values: `linux`, `Windows`.
        :param pulumi.Input[str] platform_version: The platform version of the custom image.
        :param pulumi.Input[str] project_name: The project name of the custom image.
        :param pulumi.Input[Sequence[pulumi.Input['ImageImportTagArgs']]] tags: Tags.
        """
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "url", url)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if boot_mode is not None:
            pulumi.set(__self__, "boot_mode", boot_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if platform_version is not None:
            pulumi.set(__self__, "platform_version", platform_version)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the custom image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter
    def platform(self) -> pulumi.Input[str]:
        """
        The platform of the custom image. Valid values: `CentOS`, `Debian`, `veLinux`, `Windows Server`, `Fedora`, `OpenSUSE`, `Ubuntu`, `Rocky Linux`, `AlmaLinux`.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: pulumi.Input[str]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The url of the custom image in tos bucket.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[str]]:
        """
        The architecture of the custom image. Valid values: `amd64`, `arm64`.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The boot mode of the custom image. Valid values: `BIOS`, `UEFI`.
        """
        return pulumi.get(self, "boot_mode")

    @boot_mode.setter
    def boot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the custom image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        """
        The license type of the custom image. Valid values: `VolcanoEngine`.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The os type of the custom image. Valid values: `linux`, `Windows`.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> Optional[pulumi.Input[str]]:
        """
        The platform version of the custom image.
        """
        return pulumi.get(self, "platform_version")

    @platform_version.setter
    def platform_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform_version", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of the custom image.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageImportTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageImportTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ImageImportState:
    def __init__(__self__, *,
                 architecture: Optional[pulumi.Input[str]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 is_support_cloud_init: Optional[pulumi.Input[bool]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input[str]] = None,
                 platform_version: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 share_status: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ImageImportTagArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ImageImport resources.
        :param pulumi.Input[str] architecture: The architecture of the custom image. Valid values: `amd64`, `arm64`.
        :param pulumi.Input[str] boot_mode: The boot mode of the custom image. Valid values: `BIOS`, `UEFI`.
        :param pulumi.Input[str] created_at: The create time of Image.
        :param pulumi.Input[str] description: The description of the custom image.
        :param pulumi.Input[str] image_name: The name of the custom image.
        :param pulumi.Input[bool] is_support_cloud_init: Whether the Image support cloud-init.
        :param pulumi.Input[str] license_type: The license type of the custom image. Valid values: `VolcanoEngine`.
        :param pulumi.Input[str] os_name: The name of Image operating system.
        :param pulumi.Input[str] os_type: The os type of the custom image. Valid values: `linux`, `Windows`.
        :param pulumi.Input[str] platform: The platform of the custom image. Valid values: `CentOS`, `Debian`, `veLinux`, `Windows Server`, `Fedora`, `OpenSUSE`, `Ubuntu`, `Rocky Linux`, `AlmaLinux`.
        :param pulumi.Input[str] platform_version: The platform version of the custom image.
        :param pulumi.Input[str] project_name: The project name of the custom image.
        :param pulumi.Input[str] share_status: The share mode of Image.
        :param pulumi.Input[int] size: The size(GiB) of Image.
        :param pulumi.Input[str] status: The status of Image.
        :param pulumi.Input[Sequence[pulumi.Input['ImageImportTagArgs']]] tags: Tags.
        :param pulumi.Input[str] updated_at: The update time of Image.
        :param pulumi.Input[str] url: The url of the custom image in tos bucket.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] visibility: The visibility of Image.
        """
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if boot_mode is not None:
            pulumi.set(__self__, "boot_mode", boot_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if is_support_cloud_init is not None:
            pulumi.set(__self__, "is_support_cloud_init", is_support_cloud_init)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if platform_version is not None:
            pulumi.set(__self__, "platform_version", platform_version)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if share_status is not None:
            pulumi.set(__self__, "share_status", share_status)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[str]]:
        """
        The architecture of the custom image. Valid values: `amd64`, `arm64`.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The boot mode of the custom image. Valid values: `BIOS`, `UEFI`.
        """
        return pulumi.get(self, "boot_mode")

    @boot_mode.setter
    def boot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_mode", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of Image.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the custom image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the custom image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="isSupportCloudInit")
    def is_support_cloud_init(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Image support cloud-init.
        """
        return pulumi.get(self, "is_support_cloud_init")

    @is_support_cloud_init.setter
    def is_support_cloud_init(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_support_cloud_init", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        """
        The license type of the custom image. Valid values: `VolcanoEngine`.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of Image operating system.
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The os type of the custom image. Valid values: `linux`, `Windows`.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[str]]:
        """
        The platform of the custom image. Valid values: `CentOS`, `Debian`, `veLinux`, `Windows Server`, `Fedora`, `OpenSUSE`, `Ubuntu`, `Rocky Linux`, `AlmaLinux`.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> Optional[pulumi.Input[str]]:
        """
        The platform version of the custom image.
        """
        return pulumi.get(self, "platform_version")

    @platform_version.setter
    def platform_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform_version", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of the custom image.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="shareStatus")
    def share_status(self) -> Optional[pulumi.Input[str]]:
        """
        The share mode of Image.
        """
        return pulumi.get(self, "share_status")

    @share_status.setter
    def share_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "share_status", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The size(GiB) of Image.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of Image.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageImportTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageImportTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of Image.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The url of the custom image in tos bucket.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        The visibility of Image.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class ImageImport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[str]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input[str]] = None,
                 platform_version: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageImportTagArgs']]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage image import
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.ecs.ImageImport("foo",
            boot_mode="UEFI",
            description="acc-test",
            image_name="acc-test-image",
            platform="CentOS",
            project_name="default",
            tags=[volcengine.ecs.ImageImportTagArgs(
                key="k1",
                value="v1",
            )],
            url="https://*****_system.qcow2")
        ```

        ## Import

        ImageImport can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:ecs/imageImport:ImageImport default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] architecture: The architecture of the custom image. Valid values: `amd64`, `arm64`.
        :param pulumi.Input[str] boot_mode: The boot mode of the custom image. Valid values: `BIOS`, `UEFI`.
        :param pulumi.Input[str] description: The description of the custom image.
        :param pulumi.Input[str] image_name: The name of the custom image.
        :param pulumi.Input[str] license_type: The license type of the custom image. Valid values: `VolcanoEngine`.
        :param pulumi.Input[str] os_type: The os type of the custom image. Valid values: `linux`, `Windows`.
        :param pulumi.Input[str] platform: The platform of the custom image. Valid values: `CentOS`, `Debian`, `veLinux`, `Windows Server`, `Fedora`, `OpenSUSE`, `Ubuntu`, `Rocky Linux`, `AlmaLinux`.
        :param pulumi.Input[str] platform_version: The platform version of the custom image.
        :param pulumi.Input[str] project_name: The project name of the custom image.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageImportTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] url: The url of the custom image in tos bucket.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageImportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage image import
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.ecs.ImageImport("foo",
            boot_mode="UEFI",
            description="acc-test",
            image_name="acc-test-image",
            platform="CentOS",
            project_name="default",
            tags=[volcengine.ecs.ImageImportTagArgs(
                key="k1",
                value="v1",
            )],
            url="https://*****_system.qcow2")
        ```

        ## Import

        ImageImport can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:ecs/imageImport:ImageImport default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ImageImportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageImportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[str]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input[str]] = None,
                 platform_version: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageImportTagArgs']]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageImportArgs.__new__(ImageImportArgs)

            __props__.__dict__["architecture"] = architecture
            __props__.__dict__["boot_mode"] = boot_mode
            __props__.__dict__["description"] = description
            if image_name is None and not opts.urn:
                raise TypeError("Missing required property 'image_name'")
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["license_type"] = license_type
            __props__.__dict__["os_type"] = os_type
            if platform is None and not opts.urn:
                raise TypeError("Missing required property 'platform'")
            __props__.__dict__["platform"] = platform
            __props__.__dict__["platform_version"] = platform_version
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["tags"] = tags
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["created_at"] = None
            __props__.__dict__["is_support_cloud_init"] = None
            __props__.__dict__["os_name"] = None
            __props__.__dict__["share_status"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["visibility"] = None
        super(ImageImport, __self__).__init__(
            'volcengine:ecs/imageImport:ImageImport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            architecture: Optional[pulumi.Input[str]] = None,
            boot_mode: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            image_name: Optional[pulumi.Input[str]] = None,
            is_support_cloud_init: Optional[pulumi.Input[bool]] = None,
            license_type: Optional[pulumi.Input[str]] = None,
            os_name: Optional[pulumi.Input[str]] = None,
            os_type: Optional[pulumi.Input[str]] = None,
            platform: Optional[pulumi.Input[str]] = None,
            platform_version: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            share_status: Optional[pulumi.Input[str]] = None,
            size: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageImportTagArgs']]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None) -> 'ImageImport':
        """
        Get an existing ImageImport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] architecture: The architecture of the custom image. Valid values: `amd64`, `arm64`.
        :param pulumi.Input[str] boot_mode: The boot mode of the custom image. Valid values: `BIOS`, `UEFI`.
        :param pulumi.Input[str] created_at: The create time of Image.
        :param pulumi.Input[str] description: The description of the custom image.
        :param pulumi.Input[str] image_name: The name of the custom image.
        :param pulumi.Input[bool] is_support_cloud_init: Whether the Image support cloud-init.
        :param pulumi.Input[str] license_type: The license type of the custom image. Valid values: `VolcanoEngine`.
        :param pulumi.Input[str] os_name: The name of Image operating system.
        :param pulumi.Input[str] os_type: The os type of the custom image. Valid values: `linux`, `Windows`.
        :param pulumi.Input[str] platform: The platform of the custom image. Valid values: `CentOS`, `Debian`, `veLinux`, `Windows Server`, `Fedora`, `OpenSUSE`, `Ubuntu`, `Rocky Linux`, `AlmaLinux`.
        :param pulumi.Input[str] platform_version: The platform version of the custom image.
        :param pulumi.Input[str] project_name: The project name of the custom image.
        :param pulumi.Input[str] share_status: The share mode of Image.
        :param pulumi.Input[int] size: The size(GiB) of Image.
        :param pulumi.Input[str] status: The status of Image.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageImportTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] updated_at: The update time of Image.
        :param pulumi.Input[str] url: The url of the custom image in tos bucket.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] visibility: The visibility of Image.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageImportState.__new__(_ImageImportState)

        __props__.__dict__["architecture"] = architecture
        __props__.__dict__["boot_mode"] = boot_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["is_support_cloud_init"] = is_support_cloud_init
        __props__.__dict__["license_type"] = license_type
        __props__.__dict__["os_name"] = os_name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["platform"] = platform
        __props__.__dict__["platform_version"] = platform_version
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["share_status"] = share_status
        __props__.__dict__["size"] = size
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["url"] = url
        __props__.__dict__["visibility"] = visibility
        return ImageImport(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[str]:
        """
        The architecture of the custom image. Valid values: `amd64`, `arm64`.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> pulumi.Output[str]:
        """
        The boot mode of the custom image. Valid values: `BIOS`, `UEFI`.
        """
        return pulumi.get(self, "boot_mode")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The create time of Image.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the custom image.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[str]:
        """
        The name of the custom image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="isSupportCloudInit")
    def is_support_cloud_init(self) -> pulumi.Output[bool]:
        """
        Whether the Image support cloud-init.
        """
        return pulumi.get(self, "is_support_cloud_init")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Output[str]:
        """
        The license type of the custom image. Valid values: `VolcanoEngine`.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> pulumi.Output[str]:
        """
        The name of Image operating system.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[str]:
        """
        The os type of the custom image. Valid values: `linux`, `Windows`.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> pulumi.Output[str]:
        """
        The platform of the custom image. Valid values: `CentOS`, `Debian`, `veLinux`, `Windows Server`, `Fedora`, `OpenSUSE`, `Ubuntu`, `Rocky Linux`, `AlmaLinux`.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> pulumi.Output[str]:
        """
        The platform version of the custom image.
        """
        return pulumi.get(self, "platform_version")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The project name of the custom image.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="shareStatus")
    def share_status(self) -> pulumi.Output[str]:
        """
        The share mode of Image.
        """
        return pulumi.get(self, "share_status")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[int]:
        """
        The size(GiB) of Image.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of Image.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.ImageImportTag']]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The update time of Image.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The url of the custom image in tos bucket.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[str]:
        """
        The visibility of Image.
        """
        return pulumi.get(self, "visibility")

