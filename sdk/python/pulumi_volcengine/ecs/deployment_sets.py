# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DeploymentSetsResult',
    'AwaitableDeploymentSetsResult',
    'deployment_sets',
    'deployment_sets_output',
]

@pulumi.output_type
class DeploymentSetsResult:
    """
    A collection of values returned by DeploymentSets.
    """
    def __init__(__self__, deployment_sets=None, granularity=None, id=None, ids=None, name_regex=None, output_file=None, total_count=None):
        if deployment_sets and not isinstance(deployment_sets, list):
            raise TypeError("Expected argument 'deployment_sets' to be a list")
        pulumi.set(__self__, "deployment_sets", deployment_sets)
        if granularity and not isinstance(granularity, str):
            raise TypeError("Expected argument 'granularity' to be a str")
        pulumi.set(__self__, "granularity", granularity)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="deploymentSets")
    def deployment_sets(self) -> Sequence['outputs.DeploymentSetsDeploymentSetResult']:
        """
        The collection of ECS DeploymentSet query.
        """
        return pulumi.get(self, "deployment_sets")

    @property
    @pulumi.getter
    def granularity(self) -> Optional[str]:
        """
        The granularity of ECS DeploymentSet.
        """
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of ECS DeploymentSet query.
        """
        return pulumi.get(self, "total_count")


class AwaitableDeploymentSetsResult(DeploymentSetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return DeploymentSetsResult(
            deployment_sets=self.deployment_sets,
            granularity=self.granularity,
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count)


def deployment_sets(granularity: Optional[str] = None,
                    ids: Optional[Sequence[str]] = None,
                    name_regex: Optional[str] = None,
                    output_file: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableDeploymentSetsResult:
    """
    Use this data source to query detailed information of ecs deployment sets
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_deployment_set = []
    for range in [{"value": i} for i in range(0, 3)]:
        foo_deployment_set.append(volcengine.ecs.DeploymentSet(f"fooDeploymentSet-{range['value']}",
            deployment_set_name=f"acc-test-ecs-ds-{range['value']}",
            description="acc-test",
            granularity="switch",
            strategy="Availability"))
    foo_deployment_sets = volcengine.ecs.deployment_sets_output(granularity="switch",
        ids=[__item.id for __item in foo_deployment_set])
    ```


    :param str granularity: The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
    :param Sequence[str] ids: A list of ECS DeploymentSet IDs.
    :param str name_regex: A Name Regex of ECS DeploymentSet.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['granularity'] = granularity
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:ecs/deploymentSets:DeploymentSets', __args__, opts=opts, typ=DeploymentSetsResult).value

    return AwaitableDeploymentSetsResult(
        deployment_sets=pulumi.get(__ret__, 'deployment_sets'),
        granularity=pulumi.get(__ret__, 'granularity'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(deployment_sets)
def deployment_sets_output(granularity: Optional[pulumi.Input[Optional[str]]] = None,
                           ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                           output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[DeploymentSetsResult]:
    """
    Use this data source to query detailed information of ecs deployment sets
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_deployment_set = []
    for range in [{"value": i} for i in range(0, 3)]:
        foo_deployment_set.append(volcengine.ecs.DeploymentSet(f"fooDeploymentSet-{range['value']}",
            deployment_set_name=f"acc-test-ecs-ds-{range['value']}",
            description="acc-test",
            granularity="switch",
            strategy="Availability"))
    foo_deployment_sets = volcengine.ecs.deployment_sets_output(granularity="switch",
        ids=[__item.id for __item in foo_deployment_set])
    ```


    :param str granularity: The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
    :param Sequence[str] ids: A list of ECS DeploymentSet IDs.
    :param str name_regex: A Name Regex of ECS DeploymentSet.
    :param str output_file: File name where to save data source results.
    """
    ...
