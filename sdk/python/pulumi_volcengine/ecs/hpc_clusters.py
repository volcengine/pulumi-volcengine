# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'HpcClustersResult',
    'AwaitableHpcClustersResult',
    'hpc_clusters',
    'hpc_clusters_output',
]

@pulumi.output_type
class HpcClustersResult:
    """
    A collection of values returned by HpcClusters.
    """
    def __init__(__self__, hpc_clusters=None, id=None, name_regex=None, output_file=None, total_count=None, zone_id=None):
        if hpc_clusters and not isinstance(hpc_clusters, list):
            raise TypeError("Expected argument 'hpc_clusters' to be a list")
        pulumi.set(__self__, "hpc_clusters", hpc_clusters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="hpcClusters")
    def hpc_clusters(self) -> Sequence['outputs.HpcClustersHpcClusterResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "hpc_clusters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        The zone id of the hpc cluster.
        """
        return pulumi.get(self, "zone_id")


class AwaitableHpcClustersResult(HpcClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return HpcClustersResult(
            hpc_clusters=self.hpc_clusters,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count,
            zone_id=self.zone_id)


def hpc_clusters(name_regex: Optional[str] = None,
                 output_file: Optional[str] = None,
                 zone_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableHpcClustersResult:
    """
    Use this data source to query detailed information of ecs hpc clusters
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.ecs.hpc_clusters(zone_id="cn-beijing-a")
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str zone_id: The zone id of the hpc cluster.
    """
    __args__ = dict()
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:ecs/hpcClusters:HpcClusters', __args__, opts=opts, typ=HpcClustersResult).value

    return AwaitableHpcClustersResult(
        hpc_clusters=pulumi.get(__ret__, 'hpc_clusters'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'),
        zone_id=pulumi.get(__ret__, 'zone_id'))


@_utilities.lift_output_func(hpc_clusters)
def hpc_clusters_output(name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                        output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        zone_id: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[HpcClustersResult]:
    """
    Use this data source to query detailed information of ecs hpc clusters
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.ecs.hpc_clusters(zone_id="cn-beijing-a")
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str zone_id: The zone id of the hpc cluster.
    """
    ...
