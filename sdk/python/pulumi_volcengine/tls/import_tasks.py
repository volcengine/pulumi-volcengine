# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ImportTasksResult',
    'AwaitableImportTasksResult',
    'import_tasks',
    'import_tasks_output',
]

warnings.warn("""volcengine.tls.ImportTasks has been deprecated in favor of volcengine.tls.getImportTasks""", DeprecationWarning)

@pulumi.output_type
class ImportTasksResult:
    """
    A collection of values returned by ImportTasks.
    """
    def __init__(__self__, iam_project_name=None, id=None, name_regex=None, output_file=None, project_id=None, project_name=None, source_type=None, status=None, task_id=None, task_infos=None, task_name=None, topic_id=None, topic_name=None, total_count=None):
        if iam_project_name and not isinstance(iam_project_name, str):
            raise TypeError("Expected argument 'iam_project_name' to be a str")
        pulumi.set(__self__, "iam_project_name", iam_project_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)
        if task_infos and not isinstance(task_infos, list):
            raise TypeError("Expected argument 'task_infos' to be a list")
        pulumi.set(__self__, "task_infos", task_infos)
        if task_name and not isinstance(task_name, str):
            raise TypeError("Expected argument 'task_name' to be a str")
        pulumi.set(__self__, "task_name", task_name)
        if topic_id and not isinstance(topic_id, str):
            raise TypeError("Expected argument 'topic_id' to be a str")
        pulumi.set(__self__, "topic_id", topic_id)
        if topic_name and not isinstance(topic_name, str):
            raise TypeError("Expected argument 'topic_name' to be a str")
        pulumi.set(__self__, "topic_name", topic_name)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="iamProjectName")
    def iam_project_name(self) -> Optional[str]:
        return pulumi.get(self, "iam_project_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Specify the log item ID for querying the data import tasks under the specified log item.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        Specify the name of the log item for querying the data import tasks under the specified log item. Support fuzzy query..
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        """
        Specify the import type for querying the data import tasks related to this import type.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[str]:
        """
        Import the task ID of the data to be queried.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskInfos")
    def task_infos(self) -> Sequence['outputs.ImportTasksTaskInfoResult']:
        """
        Data import task list.
        """
        return pulumi.get(self, "task_infos")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[str]:
        """
        Import the task name of the data to be queried.
        """
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[str]:
        """
        Specify the log topic ID for querying the data import tasks related to this log topic.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        Specify the name of the log topic for querying the data import tasks related to this log topic. Support fuzzy query.
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableImportTasksResult(ImportTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ImportTasksResult(
            iam_project_name=self.iam_project_name,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_id=self.project_id,
            project_name=self.project_name,
            source_type=self.source_type,
            status=self.status,
            task_id=self.task_id,
            task_infos=self.task_infos,
            task_name=self.task_name,
            topic_id=self.topic_id,
            topic_name=self.topic_name,
            total_count=self.total_count)


def import_tasks(iam_project_name: Optional[str] = None,
                 name_regex: Optional[str] = None,
                 output_file: Optional[str] = None,
                 project_id: Optional[str] = None,
                 project_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 status: Optional[str] = None,
                 task_id: Optional[str] = None,
                 task_name: Optional[str] = None,
                 topic_id: Optional[str] = None,
                 topic_name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableImportTasksResult:
    """
    Use this data source to query detailed information of tls import tasks
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.tls.get_import_tasks()
    ```


    :param str iam_project_name: Specify the IAM project name to query the data import tasks under the specified IAM project.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_id: Specify the log item ID for querying the data import tasks under the specified log item.
    :param str project_name: Specify the name of the log item for querying the data import tasks under the specified log item. Support fuzzy query..
    :param str source_type: Specify the import type for querying the data import tasks related to this import type.
    :param str status: Specify the status of the import task.
    :param str task_id: Import the task ID of the data to be queried.
    :param str task_name: Import the task name of the data to be queried.
    :param str topic_id: Specify the log topic ID for querying the data import tasks related to this log topic.
    :param str topic_name: Specify the name of the log topic for querying the data import tasks related to this log topic. Support fuzzy query.
    """
    pulumi.log.warn("""import_tasks is deprecated: volcengine.tls.ImportTasks has been deprecated in favor of volcengine.tls.getImportTasks""")
    __args__ = dict()
    __args__['iamProjectName'] = iam_project_name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectId'] = project_id
    __args__['projectName'] = project_name
    __args__['sourceType'] = source_type
    __args__['status'] = status
    __args__['taskId'] = task_id
    __args__['taskName'] = task_name
    __args__['topicId'] = topic_id
    __args__['topicName'] = topic_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:tls/importTasks:ImportTasks', __args__, opts=opts, typ=ImportTasksResult).value

    return AwaitableImportTasksResult(
        iam_project_name=pulumi.get(__ret__, 'iam_project_name'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_id=pulumi.get(__ret__, 'project_id'),
        project_name=pulumi.get(__ret__, 'project_name'),
        source_type=pulumi.get(__ret__, 'source_type'),
        status=pulumi.get(__ret__, 'status'),
        task_id=pulumi.get(__ret__, 'task_id'),
        task_infos=pulumi.get(__ret__, 'task_infos'),
        task_name=pulumi.get(__ret__, 'task_name'),
        topic_id=pulumi.get(__ret__, 'topic_id'),
        topic_name=pulumi.get(__ret__, 'topic_name'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(import_tasks)
def import_tasks_output(iam_project_name: Optional[pulumi.Input[Optional[str]]] = None,
                        name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                        output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        project_id: Optional[pulumi.Input[Optional[str]]] = None,
                        project_name: Optional[pulumi.Input[Optional[str]]] = None,
                        source_type: Optional[pulumi.Input[Optional[str]]] = None,
                        status: Optional[pulumi.Input[Optional[str]]] = None,
                        task_id: Optional[pulumi.Input[Optional[str]]] = None,
                        task_name: Optional[pulumi.Input[Optional[str]]] = None,
                        topic_id: Optional[pulumi.Input[Optional[str]]] = None,
                        topic_name: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ImportTasksResult]:
    """
    Use this data source to query detailed information of tls import tasks
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.tls.get_import_tasks()
    ```


    :param str iam_project_name: Specify the IAM project name to query the data import tasks under the specified IAM project.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_id: Specify the log item ID for querying the data import tasks under the specified log item.
    :param str project_name: Specify the name of the log item for querying the data import tasks under the specified log item. Support fuzzy query..
    :param str source_type: Specify the import type for querying the data import tasks related to this import type.
    :param str status: Specify the status of the import task.
    :param str task_id: Import the task ID of the data to be queried.
    :param str task_name: Import the task name of the data to be queried.
    :param str topic_id: Specify the log topic ID for querying the data import tasks related to this log topic.
    :param str topic_name: Specify the name of the log topic for querying the data import tasks related to this log topic. Support fuzzy query.
    """
    pulumi.log.warn("""import_tasks is deprecated: volcengine.tls.ImportTasks has been deprecated in favor of volcengine.tls.getImportTasks""")
    ...
