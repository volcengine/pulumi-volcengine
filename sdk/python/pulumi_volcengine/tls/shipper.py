# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ShipperArgs', 'Shipper']

@pulumi.input_type
class ShipperArgs:
    def __init__(__self__, *,
                 content_info: pulumi.Input['ShipperContentInfoArgs'],
                 shipper_name: pulumi.Input[str],
                 topic_id: pulumi.Input[str],
                 kafka_shipper_info: Optional[pulumi.Input['ShipperKafkaShipperInfoArgs']] = None,
                 shipper_end_time: Optional[pulumi.Input[int]] = None,
                 shipper_start_time: Optional[pulumi.Input[int]] = None,
                 shipper_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 tos_shipper_info: Optional[pulumi.Input['ShipperTosShipperInfoArgs']] = None):
        """
        The set of arguments for constructing a Shipper resource.
        :param pulumi.Input['ShipperContentInfoArgs'] content_info: Configuration of the delivery format for log content.
        :param pulumi.Input[str] shipper_name: Delivery configuration name.
        :param pulumi.Input[str] topic_id: The log topic ID where the log to be delivered is located.
        :param pulumi.Input['ShipperKafkaShipperInfoArgs'] kafka_shipper_info: JSON format log content configuration.
        :param pulumi.Input[int] shipper_end_time: Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[int] shipper_start_time: Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] shipper_type: The type of delivery.
        :param pulumi.Input[bool] status: Whether to enable the delivery configuration. The default value is true.
        :param pulumi.Input['ShipperTosShipperInfoArgs'] tos_shipper_info: Deliver the relevant configuration to the object storage (TOS).
        """
        pulumi.set(__self__, "content_info", content_info)
        pulumi.set(__self__, "shipper_name", shipper_name)
        pulumi.set(__self__, "topic_id", topic_id)
        if kafka_shipper_info is not None:
            pulumi.set(__self__, "kafka_shipper_info", kafka_shipper_info)
        if shipper_end_time is not None:
            pulumi.set(__self__, "shipper_end_time", shipper_end_time)
        if shipper_start_time is not None:
            pulumi.set(__self__, "shipper_start_time", shipper_start_time)
        if shipper_type is not None:
            pulumi.set(__self__, "shipper_type", shipper_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos_shipper_info is not None:
            pulumi.set(__self__, "tos_shipper_info", tos_shipper_info)

    @property
    @pulumi.getter(name="contentInfo")
    def content_info(self) -> pulumi.Input['ShipperContentInfoArgs']:
        """
        Configuration of the delivery format for log content.
        """
        return pulumi.get(self, "content_info")

    @content_info.setter
    def content_info(self, value: pulumi.Input['ShipperContentInfoArgs']):
        pulumi.set(self, "content_info", value)

    @property
    @pulumi.getter(name="shipperName")
    def shipper_name(self) -> pulumi.Input[str]:
        """
        Delivery configuration name.
        """
        return pulumi.get(self, "shipper_name")

    @shipper_name.setter
    def shipper_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "shipper_name", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        """
        The log topic ID where the log to be delivered is located.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="kafkaShipperInfo")
    def kafka_shipper_info(self) -> Optional[pulumi.Input['ShipperKafkaShipperInfoArgs']]:
        """
        JSON format log content configuration.
        """
        return pulumi.get(self, "kafka_shipper_info")

    @kafka_shipper_info.setter
    def kafka_shipper_info(self, value: Optional[pulumi.Input['ShipperKafkaShipperInfoArgs']]):
        pulumi.set(self, "kafka_shipper_info", value)

    @property
    @pulumi.getter(name="shipperEndTime")
    def shipper_end_time(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "shipper_end_time")

    @shipper_end_time.setter
    def shipper_end_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shipper_end_time", value)

    @property
    @pulumi.getter(name="shipperStartTime")
    def shipper_start_time(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "shipper_start_time")

    @shipper_start_time.setter
    def shipper_start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shipper_start_time", value)

    @property
    @pulumi.getter(name="shipperType")
    def shipper_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of delivery.
        """
        return pulumi.get(self, "shipper_type")

    @shipper_type.setter
    def shipper_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shipper_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the delivery configuration. The default value is true.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tosShipperInfo")
    def tos_shipper_info(self) -> Optional[pulumi.Input['ShipperTosShipperInfoArgs']]:
        """
        Deliver the relevant configuration to the object storage (TOS).
        """
        return pulumi.get(self, "tos_shipper_info")

    @tos_shipper_info.setter
    def tos_shipper_info(self, value: Optional[pulumi.Input['ShipperTosShipperInfoArgs']]):
        pulumi.set(self, "tos_shipper_info", value)


@pulumi.input_type
class _ShipperState:
    def __init__(__self__, *,
                 content_info: Optional[pulumi.Input['ShipperContentInfoArgs']] = None,
                 kafka_shipper_info: Optional[pulumi.Input['ShipperKafkaShipperInfoArgs']] = None,
                 shipper_end_time: Optional[pulumi.Input[int]] = None,
                 shipper_name: Optional[pulumi.Input[str]] = None,
                 shipper_start_time: Optional[pulumi.Input[int]] = None,
                 shipper_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 tos_shipper_info: Optional[pulumi.Input['ShipperTosShipperInfoArgs']] = None):
        """
        Input properties used for looking up and filtering Shipper resources.
        :param pulumi.Input['ShipperContentInfoArgs'] content_info: Configuration of the delivery format for log content.
        :param pulumi.Input['ShipperKafkaShipperInfoArgs'] kafka_shipper_info: JSON format log content configuration.
        :param pulumi.Input[int] shipper_end_time: Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] shipper_name: Delivery configuration name.
        :param pulumi.Input[int] shipper_start_time: Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] shipper_type: The type of delivery.
        :param pulumi.Input[bool] status: Whether to enable the delivery configuration. The default value is true.
        :param pulumi.Input[str] topic_id: The log topic ID where the log to be delivered is located.
        :param pulumi.Input['ShipperTosShipperInfoArgs'] tos_shipper_info: Deliver the relevant configuration to the object storage (TOS).
        """
        if content_info is not None:
            pulumi.set(__self__, "content_info", content_info)
        if kafka_shipper_info is not None:
            pulumi.set(__self__, "kafka_shipper_info", kafka_shipper_info)
        if shipper_end_time is not None:
            pulumi.set(__self__, "shipper_end_time", shipper_end_time)
        if shipper_name is not None:
            pulumi.set(__self__, "shipper_name", shipper_name)
        if shipper_start_time is not None:
            pulumi.set(__self__, "shipper_start_time", shipper_start_time)
        if shipper_type is not None:
            pulumi.set(__self__, "shipper_type", shipper_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if tos_shipper_info is not None:
            pulumi.set(__self__, "tos_shipper_info", tos_shipper_info)

    @property
    @pulumi.getter(name="contentInfo")
    def content_info(self) -> Optional[pulumi.Input['ShipperContentInfoArgs']]:
        """
        Configuration of the delivery format for log content.
        """
        return pulumi.get(self, "content_info")

    @content_info.setter
    def content_info(self, value: Optional[pulumi.Input['ShipperContentInfoArgs']]):
        pulumi.set(self, "content_info", value)

    @property
    @pulumi.getter(name="kafkaShipperInfo")
    def kafka_shipper_info(self) -> Optional[pulumi.Input['ShipperKafkaShipperInfoArgs']]:
        """
        JSON format log content configuration.
        """
        return pulumi.get(self, "kafka_shipper_info")

    @kafka_shipper_info.setter
    def kafka_shipper_info(self, value: Optional[pulumi.Input['ShipperKafkaShipperInfoArgs']]):
        pulumi.set(self, "kafka_shipper_info", value)

    @property
    @pulumi.getter(name="shipperEndTime")
    def shipper_end_time(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "shipper_end_time")

    @shipper_end_time.setter
    def shipper_end_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shipper_end_time", value)

    @property
    @pulumi.getter(name="shipperName")
    def shipper_name(self) -> Optional[pulumi.Input[str]]:
        """
        Delivery configuration name.
        """
        return pulumi.get(self, "shipper_name")

    @shipper_name.setter
    def shipper_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shipper_name", value)

    @property
    @pulumi.getter(name="shipperStartTime")
    def shipper_start_time(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "shipper_start_time")

    @shipper_start_time.setter
    def shipper_start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shipper_start_time", value)

    @property
    @pulumi.getter(name="shipperType")
    def shipper_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of delivery.
        """
        return pulumi.get(self, "shipper_type")

    @shipper_type.setter
    def shipper_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shipper_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the delivery configuration. The default value is true.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The log topic ID where the log to be delivered is located.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="tosShipperInfo")
    def tos_shipper_info(self) -> Optional[pulumi.Input['ShipperTosShipperInfoArgs']]:
        """
        Deliver the relevant configuration to the object storage (TOS).
        """
        return pulumi.get(self, "tos_shipper_info")

    @tos_shipper_info.setter
    def tos_shipper_info(self, value: Optional[pulumi.Input['ShipperTosShipperInfoArgs']]):
        pulumi.set(self, "tos_shipper_info", value)


class Shipper(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content_info: Optional[pulumi.Input[pulumi.InputType['ShipperContentInfoArgs']]] = None,
                 kafka_shipper_info: Optional[pulumi.Input[pulumi.InputType['ShipperKafkaShipperInfoArgs']]] = None,
                 shipper_end_time: Optional[pulumi.Input[int]] = None,
                 shipper_name: Optional[pulumi.Input[str]] = None,
                 shipper_start_time: Optional[pulumi.Input[int]] = None,
                 shipper_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 tos_shipper_info: Optional[pulumi.Input[pulumi.InputType['ShipperTosShipperInfoArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage tls shipper
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tls.Shipper("foo",
            content_info=volcengine.tls.ShipperContentInfoArgs(
                format="json",
                json_info=volcengine.tls.ShipperContentInfoJsonInfoArgs(
                    enable=True,
                    keys=[
                        "__content",
                        "__pod_name__",
                        "__path__",
                        "__tf-test__",
                    ],
                ),
            ),
            shipper_end_time=1751255700021,
            shipper_name="tf-test",
            shipper_start_time=1750737324521,
            shipper_type="tos",
            topic_id="8ba48bd7-2493-4300-b1d0-cb7xxxxxx",
            tos_shipper_info=volcengine.tls.ShipperTosShipperInfoArgs(
                bucket="tf-test",
                compress="snappy",
                interval=100,
                max_size=100,
                partition_format="%Y/%m/%d/%H/%M",
                prefix="terraform_1.9.4_linux_amd64.zip",
            ))
        ```

        ## Import

        Shipper can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tls/shipper:Shipper default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ShipperContentInfoArgs']] content_info: Configuration of the delivery format for log content.
        :param pulumi.Input[pulumi.InputType['ShipperKafkaShipperInfoArgs']] kafka_shipper_info: JSON format log content configuration.
        :param pulumi.Input[int] shipper_end_time: Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] shipper_name: Delivery configuration name.
        :param pulumi.Input[int] shipper_start_time: Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] shipper_type: The type of delivery.
        :param pulumi.Input[bool] status: Whether to enable the delivery configuration. The default value is true.
        :param pulumi.Input[str] topic_id: The log topic ID where the log to be delivered is located.
        :param pulumi.Input[pulumi.InputType['ShipperTosShipperInfoArgs']] tos_shipper_info: Deliver the relevant configuration to the object storage (TOS).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ShipperArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage tls shipper
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tls.Shipper("foo",
            content_info=volcengine.tls.ShipperContentInfoArgs(
                format="json",
                json_info=volcengine.tls.ShipperContentInfoJsonInfoArgs(
                    enable=True,
                    keys=[
                        "__content",
                        "__pod_name__",
                        "__path__",
                        "__tf-test__",
                    ],
                ),
            ),
            shipper_end_time=1751255700021,
            shipper_name="tf-test",
            shipper_start_time=1750737324521,
            shipper_type="tos",
            topic_id="8ba48bd7-2493-4300-b1d0-cb7xxxxxx",
            tos_shipper_info=volcengine.tls.ShipperTosShipperInfoArgs(
                bucket="tf-test",
                compress="snappy",
                interval=100,
                max_size=100,
                partition_format="%Y/%m/%d/%H/%M",
                prefix="terraform_1.9.4_linux_amd64.zip",
            ))
        ```

        ## Import

        Shipper can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tls/shipper:Shipper default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ShipperArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ShipperArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content_info: Optional[pulumi.Input[pulumi.InputType['ShipperContentInfoArgs']]] = None,
                 kafka_shipper_info: Optional[pulumi.Input[pulumi.InputType['ShipperKafkaShipperInfoArgs']]] = None,
                 shipper_end_time: Optional[pulumi.Input[int]] = None,
                 shipper_name: Optional[pulumi.Input[str]] = None,
                 shipper_start_time: Optional[pulumi.Input[int]] = None,
                 shipper_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 tos_shipper_info: Optional[pulumi.Input[pulumi.InputType['ShipperTosShipperInfoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ShipperArgs.__new__(ShipperArgs)

            if content_info is None and not opts.urn:
                raise TypeError("Missing required property 'content_info'")
            __props__.__dict__["content_info"] = content_info
            __props__.__dict__["kafka_shipper_info"] = kafka_shipper_info
            __props__.__dict__["shipper_end_time"] = shipper_end_time
            if shipper_name is None and not opts.urn:
                raise TypeError("Missing required property 'shipper_name'")
            __props__.__dict__["shipper_name"] = shipper_name
            __props__.__dict__["shipper_start_time"] = shipper_start_time
            __props__.__dict__["shipper_type"] = shipper_type
            __props__.__dict__["status"] = status
            if topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'topic_id'")
            __props__.__dict__["topic_id"] = topic_id
            __props__.__dict__["tos_shipper_info"] = tos_shipper_info
        super(Shipper, __self__).__init__(
            'volcengine:tls/shipper:Shipper',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content_info: Optional[pulumi.Input[pulumi.InputType['ShipperContentInfoArgs']]] = None,
            kafka_shipper_info: Optional[pulumi.Input[pulumi.InputType['ShipperKafkaShipperInfoArgs']]] = None,
            shipper_end_time: Optional[pulumi.Input[int]] = None,
            shipper_name: Optional[pulumi.Input[str]] = None,
            shipper_start_time: Optional[pulumi.Input[int]] = None,
            shipper_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[bool]] = None,
            topic_id: Optional[pulumi.Input[str]] = None,
            tos_shipper_info: Optional[pulumi.Input[pulumi.InputType['ShipperTosShipperInfoArgs']]] = None) -> 'Shipper':
        """
        Get an existing Shipper resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ShipperContentInfoArgs']] content_info: Configuration of the delivery format for log content.
        :param pulumi.Input[pulumi.InputType['ShipperKafkaShipperInfoArgs']] kafka_shipper_info: JSON format log content configuration.
        :param pulumi.Input[int] shipper_end_time: Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] shipper_name: Delivery configuration name.
        :param pulumi.Input[int] shipper_start_time: Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] shipper_type: The type of delivery.
        :param pulumi.Input[bool] status: Whether to enable the delivery configuration. The default value is true.
        :param pulumi.Input[str] topic_id: The log topic ID where the log to be delivered is located.
        :param pulumi.Input[pulumi.InputType['ShipperTosShipperInfoArgs']] tos_shipper_info: Deliver the relevant configuration to the object storage (TOS).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ShipperState.__new__(_ShipperState)

        __props__.__dict__["content_info"] = content_info
        __props__.__dict__["kafka_shipper_info"] = kafka_shipper_info
        __props__.__dict__["shipper_end_time"] = shipper_end_time
        __props__.__dict__["shipper_name"] = shipper_name
        __props__.__dict__["shipper_start_time"] = shipper_start_time
        __props__.__dict__["shipper_type"] = shipper_type
        __props__.__dict__["status"] = status
        __props__.__dict__["topic_id"] = topic_id
        __props__.__dict__["tos_shipper_info"] = tos_shipper_info
        return Shipper(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="contentInfo")
    def content_info(self) -> pulumi.Output['outputs.ShipperContentInfo']:
        """
        Configuration of the delivery format for log content.
        """
        return pulumi.get(self, "content_info")

    @property
    @pulumi.getter(name="kafkaShipperInfo")
    def kafka_shipper_info(self) -> pulumi.Output['outputs.ShipperKafkaShipperInfo']:
        """
        JSON format log content configuration.
        """
        return pulumi.get(self, "kafka_shipper_info")

    @property
    @pulumi.getter(name="shipperEndTime")
    def shipper_end_time(self) -> pulumi.Output[Optional[int]]:
        """
        Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "shipper_end_time")

    @property
    @pulumi.getter(name="shipperName")
    def shipper_name(self) -> pulumi.Output[str]:
        """
        Delivery configuration name.
        """
        return pulumi.get(self, "shipper_name")

    @property
    @pulumi.getter(name="shipperStartTime")
    def shipper_start_time(self) -> pulumi.Output[Optional[int]]:
        """
        Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "shipper_start_time")

    @property
    @pulumi.getter(name="shipperType")
    def shipper_type(self) -> pulumi.Output[str]:
        """
        The type of delivery.
        """
        return pulumi.get(self, "shipper_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[bool]:
        """
        Whether to enable the delivery configuration. The default value is true.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        The log topic ID where the log to be delivered is located.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="tosShipperInfo")
    def tos_shipper_info(self) -> pulumi.Output['outputs.ShipperTosShipperInfo']:
        """
        Deliver the relevant configuration to the object storage (TOS).
        """
        return pulumi.get(self, "tos_shipper_info")

