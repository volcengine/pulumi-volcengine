# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImportTaskArgs', 'ImportTask']

@pulumi.input_type
class ImportTaskArgs:
    def __init__(__self__, *,
                 import_source_info: pulumi.Input['ImportTaskImportSourceInfoArgs'],
                 target_info: pulumi.Input['ImportTaskTargetInfoArgs'],
                 description: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ImportTask resource.
        :param pulumi.Input['ImportTaskImportSourceInfoArgs'] import_source_info: The source information of the data import task.
        :param pulumi.Input['ImportTaskTargetInfoArgs'] target_info: The output information of the data import task.
        :param pulumi.Input[str] description: Data import task description.
        :param pulumi.Input[str] project_id: The log project ID used for storing data.
        :param pulumi.Input[str] source_type: Import the source type.
        :param pulumi.Input[int] status: The status of the data import task.
        :param pulumi.Input[str] task_name: Data import task name.
        :param pulumi.Input[str] topic_id: The log topic ID used for storing data.
        """
        pulumi.set(__self__, "import_source_info", import_source_info)
        pulumi.set(__self__, "target_info", target_info)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="importSourceInfo")
    def import_source_info(self) -> pulumi.Input['ImportTaskImportSourceInfoArgs']:
        """
        The source information of the data import task.
        """
        return pulumi.get(self, "import_source_info")

    @import_source_info.setter
    def import_source_info(self, value: pulumi.Input['ImportTaskImportSourceInfoArgs']):
        pulumi.set(self, "import_source_info", value)

    @property
    @pulumi.getter(name="targetInfo")
    def target_info(self) -> pulumi.Input['ImportTaskTargetInfoArgs']:
        """
        The output information of the data import task.
        """
        return pulumi.get(self, "target_info")

    @target_info.setter
    def target_info(self, value: pulumi.Input['ImportTaskTargetInfoArgs']):
        pulumi.set(self, "target_info", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Data import task description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The log project ID used for storing data.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        Import the source type.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        The status of the data import task.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[str]]:
        """
        Data import task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The log topic ID used for storing data.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class _ImportTaskState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 import_source_info: Optional[pulumi.Input['ImportTaskImportSourceInfoArgs']] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 target_info: Optional[pulumi.Input['ImportTaskTargetInfoArgs']] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ImportTask resources.
        :param pulumi.Input[str] description: Data import task description.
        :param pulumi.Input['ImportTaskImportSourceInfoArgs'] import_source_info: The source information of the data import task.
        :param pulumi.Input[str] project_id: The log project ID used for storing data.
        :param pulumi.Input[str] source_type: Import the source type.
        :param pulumi.Input[int] status: The status of the data import task.
        :param pulumi.Input['ImportTaskTargetInfoArgs'] target_info: The output information of the data import task.
        :param pulumi.Input[str] task_name: Data import task name.
        :param pulumi.Input[str] topic_id: The log topic ID used for storing data.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if import_source_info is not None:
            pulumi.set(__self__, "import_source_info", import_source_info)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target_info is not None:
            pulumi.set(__self__, "target_info", target_info)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Data import task description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="importSourceInfo")
    def import_source_info(self) -> Optional[pulumi.Input['ImportTaskImportSourceInfoArgs']]:
        """
        The source information of the data import task.
        """
        return pulumi.get(self, "import_source_info")

    @import_source_info.setter
    def import_source_info(self, value: Optional[pulumi.Input['ImportTaskImportSourceInfoArgs']]):
        pulumi.set(self, "import_source_info", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The log project ID used for storing data.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        Import the source type.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        The status of the data import task.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="targetInfo")
    def target_info(self) -> Optional[pulumi.Input['ImportTaskTargetInfoArgs']]:
        """
        The output information of the data import task.
        """
        return pulumi.get(self, "target_info")

    @target_info.setter
    def target_info(self, value: Optional[pulumi.Input['ImportTaskTargetInfoArgs']]):
        pulumi.set(self, "target_info", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[str]]:
        """
        Data import task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The log topic ID used for storing data.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


class ImportTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 import_source_info: Optional[pulumi.Input[pulumi.InputType['ImportTaskImportSourceInfoArgs']]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 target_info: Optional[pulumi.Input[pulumi.InputType['ImportTaskTargetInfoArgs']]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage tls import task
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tls.ImportTask("foo",
            description="tf-test",
            import_source_info=volcengine.tls.ImportTaskImportSourceInfoArgs(
                kafka_source_info=volcengine.tls.ImportTaskImportSourceInfoKafkaSourceInfoArgs(
                    encode="UTF-8",
                    host="1.1.1.1",
                    initial_offset=0,
                    time_source_default=1,
                    topic="topic-1,topic-2,topic-3",
                ),
            ),
            source_type="kafka",
            target_info=volcengine.tls.ImportTaskTargetInfoArgs(
                extract_rule=volcengine.tls.ImportTaskTargetInfoExtractRuleArgs(
                    un_match_log_key="key-failed",
                    un_match_up_load_switch=True,
                ),
                log_type="json_log",
                region="cn-beijing",
            ),
            task_name="tf-test-task-name-kafka",
            topic_id="b966e41a-d6a6-4999-bd75-39xxxxxxx")
        ```

        ## Import

        ImportTask can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tls/importTask:ImportTask default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Data import task description.
        :param pulumi.Input[pulumi.InputType['ImportTaskImportSourceInfoArgs']] import_source_info: The source information of the data import task.
        :param pulumi.Input[str] project_id: The log project ID used for storing data.
        :param pulumi.Input[str] source_type: Import the source type.
        :param pulumi.Input[int] status: The status of the data import task.
        :param pulumi.Input[pulumi.InputType['ImportTaskTargetInfoArgs']] target_info: The output information of the data import task.
        :param pulumi.Input[str] task_name: Data import task name.
        :param pulumi.Input[str] topic_id: The log topic ID used for storing data.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImportTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage tls import task
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tls.ImportTask("foo",
            description="tf-test",
            import_source_info=volcengine.tls.ImportTaskImportSourceInfoArgs(
                kafka_source_info=volcengine.tls.ImportTaskImportSourceInfoKafkaSourceInfoArgs(
                    encode="UTF-8",
                    host="1.1.1.1",
                    initial_offset=0,
                    time_source_default=1,
                    topic="topic-1,topic-2,topic-3",
                ),
            ),
            source_type="kafka",
            target_info=volcengine.tls.ImportTaskTargetInfoArgs(
                extract_rule=volcengine.tls.ImportTaskTargetInfoExtractRuleArgs(
                    un_match_log_key="key-failed",
                    un_match_up_load_switch=True,
                ),
                log_type="json_log",
                region="cn-beijing",
            ),
            task_name="tf-test-task-name-kafka",
            topic_id="b966e41a-d6a6-4999-bd75-39xxxxxxx")
        ```

        ## Import

        ImportTask can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tls/importTask:ImportTask default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ImportTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImportTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 import_source_info: Optional[pulumi.Input[pulumi.InputType['ImportTaskImportSourceInfoArgs']]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 target_info: Optional[pulumi.Input[pulumi.InputType['ImportTaskTargetInfoArgs']]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImportTaskArgs.__new__(ImportTaskArgs)

            __props__.__dict__["description"] = description
            if import_source_info is None and not opts.urn:
                raise TypeError("Missing required property 'import_source_info'")
            __props__.__dict__["import_source_info"] = import_source_info
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["status"] = status
            if target_info is None and not opts.urn:
                raise TypeError("Missing required property 'target_info'")
            __props__.__dict__["target_info"] = target_info
            __props__.__dict__["task_name"] = task_name
            __props__.__dict__["topic_id"] = topic_id
        super(ImportTask, __self__).__init__(
            'volcengine:tls/importTask:ImportTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            import_source_info: Optional[pulumi.Input[pulumi.InputType['ImportTaskImportSourceInfoArgs']]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            source_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            target_info: Optional[pulumi.Input[pulumi.InputType['ImportTaskTargetInfoArgs']]] = None,
            task_name: Optional[pulumi.Input[str]] = None,
            topic_id: Optional[pulumi.Input[str]] = None) -> 'ImportTask':
        """
        Get an existing ImportTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Data import task description.
        :param pulumi.Input[pulumi.InputType['ImportTaskImportSourceInfoArgs']] import_source_info: The source information of the data import task.
        :param pulumi.Input[str] project_id: The log project ID used for storing data.
        :param pulumi.Input[str] source_type: Import the source type.
        :param pulumi.Input[int] status: The status of the data import task.
        :param pulumi.Input[pulumi.InputType['ImportTaskTargetInfoArgs']] target_info: The output information of the data import task.
        :param pulumi.Input[str] task_name: Data import task name.
        :param pulumi.Input[str] topic_id: The log topic ID used for storing data.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImportTaskState.__new__(_ImportTaskState)

        __props__.__dict__["description"] = description
        __props__.__dict__["import_source_info"] = import_source_info
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["status"] = status
        __props__.__dict__["target_info"] = target_info
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["topic_id"] = topic_id
        return ImportTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Data import task description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="importSourceInfo")
    def import_source_info(self) -> pulumi.Output['outputs.ImportTaskImportSourceInfo']:
        """
        The source information of the data import task.
        """
        return pulumi.get(self, "import_source_info")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The log project ID used for storing data.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[str]:
        """
        Import the source type.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        The status of the data import task.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetInfo")
    def target_info(self) -> pulumi.Output['outputs.ImportTaskTargetInfo']:
        """
        The output information of the data import task.
        """
        return pulumi.get(self, "target_info")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[str]:
        """
        Data import task name.
        """
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        The log topic ID used for storing data.
        """
        return pulumi.get(self, "topic_id")

