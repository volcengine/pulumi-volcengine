# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetEtlTasksResult',
    'AwaitableGetEtlTasksResult',
    'get_etl_tasks',
    'get_etl_tasks_output',
]

@pulumi.output_type
class GetEtlTasksResult:
    """
    A collection of values returned by getEtlTasks.
    """
    def __init__(__self__, iam_project_name=None, id=None, name_regex=None, output_file=None, project_id=None, project_name=None, source_topic_id=None, source_topic_name=None, status=None, task_id=None, task_name=None, tasks=None, total_count=None):
        if iam_project_name and not isinstance(iam_project_name, str):
            raise TypeError("Expected argument 'iam_project_name' to be a str")
        pulumi.set(__self__, "iam_project_name", iam_project_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if source_topic_id and not isinstance(source_topic_id, str):
            raise TypeError("Expected argument 'source_topic_id' to be a str")
        pulumi.set(__self__, "source_topic_id", source_topic_id)
        if source_topic_name and not isinstance(source_topic_name, str):
            raise TypeError("Expected argument 'source_topic_name' to be a str")
        pulumi.set(__self__, "source_topic_name", source_topic_name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)
        if task_name and not isinstance(task_name, str):
            raise TypeError("Expected argument 'task_name' to be a str")
        pulumi.set(__self__, "task_name", task_name)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="iamProjectName")
    def iam_project_name(self) -> Optional[str]:
        return pulumi.get(self, "iam_project_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        The log item ID used for storing the processed logs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The name of the log item used for storing the processed logs.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="sourceTopicId")
    def source_topic_id(self) -> Optional[str]:
        """
        The log topic ID where the log to be processed is located.
        """
        return pulumi.get(self, "source_topic_id")

    @property
    @pulumi.getter(name="sourceTopicName")
    def source_topic_name(self) -> Optional[str]:
        """
        The name of the log topic where the log to be processed is located.
        """
        return pulumi.get(self, "source_topic_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[str]:
        """
        The ID of the processing task.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[str]:
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetEtlTasksTaskResult']:
        """
        Detailed information of the processing task.
        """
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetEtlTasksResult(GetEtlTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEtlTasksResult(
            iam_project_name=self.iam_project_name,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_id=self.project_id,
            project_name=self.project_name,
            source_topic_id=self.source_topic_id,
            source_topic_name=self.source_topic_name,
            status=self.status,
            task_id=self.task_id,
            task_name=self.task_name,
            tasks=self.tasks,
            total_count=self.total_count)


def get_etl_tasks(iam_project_name: Optional[str] = None,
                  name_regex: Optional[str] = None,
                  output_file: Optional[str] = None,
                  project_id: Optional[str] = None,
                  project_name: Optional[str] = None,
                  source_topic_id: Optional[str] = None,
                  source_topic_name: Optional[str] = None,
                  status: Optional[str] = None,
                  task_id: Optional[str] = None,
                  task_name: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEtlTasksResult:
    """
    Use this data source to query detailed information of tls etl tasks
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.tls.get_etl_tasks()
    ```


    :param str iam_project_name: Specify the IAM project name to query the data processing tasks under the specified IAM project.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_id: Specify the log item ID for querying the data processing tasks under the specified log item.
    :param str project_name: Specify the name of the log item for querying the data processing tasks under the specified log item. Support fuzzy query.
    :param str source_topic_id: Specify the log topic ID for querying the data processing tasks related to this log topic.
    :param str source_topic_name: Specify the name of the log topic for querying the data processing tasks related to this log topic. Support fuzzy matching.
    :param str status: Specify the processing task status for querying data processing tasks in this status.
    :param str task_id: The ID of the processing task.
    :param str task_name: The name of the processing task.
    """
    __args__ = dict()
    __args__['iamProjectName'] = iam_project_name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectId'] = project_id
    __args__['projectName'] = project_name
    __args__['sourceTopicId'] = source_topic_id
    __args__['sourceTopicName'] = source_topic_name
    __args__['status'] = status
    __args__['taskId'] = task_id
    __args__['taskName'] = task_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:tls/getEtlTasks:getEtlTasks', __args__, opts=opts, typ=GetEtlTasksResult).value

    return AwaitableGetEtlTasksResult(
        iam_project_name=pulumi.get(__ret__, 'iam_project_name'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_id=pulumi.get(__ret__, 'project_id'),
        project_name=pulumi.get(__ret__, 'project_name'),
        source_topic_id=pulumi.get(__ret__, 'source_topic_id'),
        source_topic_name=pulumi.get(__ret__, 'source_topic_name'),
        status=pulumi.get(__ret__, 'status'),
        task_id=pulumi.get(__ret__, 'task_id'),
        task_name=pulumi.get(__ret__, 'task_name'),
        tasks=pulumi.get(__ret__, 'tasks'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_etl_tasks)
def get_etl_tasks_output(iam_project_name: Optional[pulumi.Input[Optional[str]]] = None,
                         name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                         output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         project_id: Optional[pulumi.Input[Optional[str]]] = None,
                         project_name: Optional[pulumi.Input[Optional[str]]] = None,
                         source_topic_id: Optional[pulumi.Input[Optional[str]]] = None,
                         source_topic_name: Optional[pulumi.Input[Optional[str]]] = None,
                         status: Optional[pulumi.Input[Optional[str]]] = None,
                         task_id: Optional[pulumi.Input[Optional[str]]] = None,
                         task_name: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEtlTasksResult]:
    """
    Use this data source to query detailed information of tls etl tasks
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.tls.get_etl_tasks()
    ```


    :param str iam_project_name: Specify the IAM project name to query the data processing tasks under the specified IAM project.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_id: Specify the log item ID for querying the data processing tasks under the specified log item.
    :param str project_name: Specify the name of the log item for querying the data processing tasks under the specified log item. Support fuzzy query.
    :param str source_topic_id: Specify the log topic ID for querying the data processing tasks related to this log topic.
    :param str source_topic_name: Specify the name of the log topic for querying the data processing tasks related to this log topic. Support fuzzy matching.
    :param str status: Specify the processing task status for querying data processing tasks in this status.
    :param str task_id: The ID of the processing task.
    :param str task_name: The name of the processing task.
    """
    ...
