# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EtlTaskArgs', 'EtlTask']

@pulumi.input_type
class EtlTaskArgs:
    def __init__(__self__, *,
                 dsl_type: pulumi.Input[str],
                 enable: pulumi.Input[bool],
                 script: pulumi.Input[str],
                 source_topic_id: pulumi.Input[str],
                 target_resources: pulumi.Input[Sequence[pulumi.Input['EtlTaskTargetResourceArgs']]],
                 task_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 from_time: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 to_time: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a EtlTask resource.
        :param pulumi.Input[str] dsl_type: DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[bool] enable: Whether to enable the data processing task.
        :param pulumi.Input[str] script: Processing rules.
        :param pulumi.Input[str] source_topic_id: The log topic where the log to be processed is located.
        :param pulumi.Input[Sequence[pulumi.Input['EtlTaskTargetResourceArgs']]] target_resources: Output the relevant information of the target.
        :param pulumi.Input[str] task_type: The task type is fixed as Resident.
        :param pulumi.Input[str] description: A simple description of the data processing task.
        :param pulumi.Input[int] from_time: The start time of the data to be processed.
        :param pulumi.Input[str] name: The name of the processing task.
        :param pulumi.Input[int] to_time: The end time of the data to be processed.
        """
        pulumi.set(__self__, "dsl_type", dsl_type)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "script", script)
        pulumi.set(__self__, "source_topic_id", source_topic_id)
        pulumi.set(__self__, "target_resources", target_resources)
        pulumi.set(__self__, "task_type", task_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_time is not None:
            pulumi.set(__self__, "from_time", from_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if to_time is not None:
            pulumi.set(__self__, "to_time", to_time)

    @property
    @pulumi.getter(name="dslType")
    def dsl_type(self) -> pulumi.Input[str]:
        """
        DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "dsl_type")

    @dsl_type.setter
    def dsl_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "dsl_type", value)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[bool]:
        """
        Whether to enable the data processing task.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def script(self) -> pulumi.Input[str]:
        """
        Processing rules.
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: pulumi.Input[str]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter(name="sourceTopicId")
    def source_topic_id(self) -> pulumi.Input[str]:
        """
        The log topic where the log to be processed is located.
        """
        return pulumi.get(self, "source_topic_id")

    @source_topic_id.setter
    def source_topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_topic_id", value)

    @property
    @pulumi.getter(name="targetResources")
    def target_resources(self) -> pulumi.Input[Sequence[pulumi.Input['EtlTaskTargetResourceArgs']]]:
        """
        Output the relevant information of the target.
        """
        return pulumi.get(self, "target_resources")

    @target_resources.setter
    def target_resources(self, value: pulumi.Input[Sequence[pulumi.Input['EtlTaskTargetResourceArgs']]]):
        pulumi.set(self, "target_resources", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        The task type is fixed as Resident.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A simple description of the data processing task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fromTime")
    def from_time(self) -> Optional[pulumi.Input[int]]:
        """
        The start time of the data to be processed.
        """
        return pulumi.get(self, "from_time")

    @from_time.setter
    def from_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "from_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the processing task.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="toTime")
    def to_time(self) -> Optional[pulumi.Input[int]]:
        """
        The end time of the data to be processed.
        """
        return pulumi.get(self, "to_time")

    @to_time.setter
    def to_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "to_time", value)


@pulumi.input_type
class _EtlTaskState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dsl_type: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 from_time: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 source_topic_id: Optional[pulumi.Input[str]] = None,
                 target_resources: Optional[pulumi.Input[Sequence[pulumi.Input['EtlTaskTargetResourceArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 to_time: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering EtlTask resources.
        :param pulumi.Input[str] description: A simple description of the data processing task.
        :param pulumi.Input[str] dsl_type: DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[bool] enable: Whether to enable the data processing task.
        :param pulumi.Input[int] from_time: The start time of the data to be processed.
        :param pulumi.Input[str] name: The name of the processing task.
        :param pulumi.Input[str] script: Processing rules.
        :param pulumi.Input[str] source_topic_id: The log topic where the log to be processed is located.
        :param pulumi.Input[Sequence[pulumi.Input['EtlTaskTargetResourceArgs']]] target_resources: Output the relevant information of the target.
        :param pulumi.Input[str] task_type: The task type is fixed as Resident.
        :param pulumi.Input[int] to_time: The end time of the data to be processed.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dsl_type is not None:
            pulumi.set(__self__, "dsl_type", dsl_type)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if from_time is not None:
            pulumi.set(__self__, "from_time", from_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if source_topic_id is not None:
            pulumi.set(__self__, "source_topic_id", source_topic_id)
        if target_resources is not None:
            pulumi.set(__self__, "target_resources", target_resources)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if to_time is not None:
            pulumi.set(__self__, "to_time", to_time)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A simple description of the data processing task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dslType")
    def dsl_type(self) -> Optional[pulumi.Input[str]]:
        """
        DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "dsl_type")

    @dsl_type.setter
    def dsl_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsl_type", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the data processing task.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="fromTime")
    def from_time(self) -> Optional[pulumi.Input[int]]:
        """
        The start time of the data to be processed.
        """
        return pulumi.get(self, "from_time")

    @from_time.setter
    def from_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "from_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the processing task.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        """
        Processing rules.
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter(name="sourceTopicId")
    def source_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The log topic where the log to be processed is located.
        """
        return pulumi.get(self, "source_topic_id")

    @source_topic_id.setter
    def source_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_topic_id", value)

    @property
    @pulumi.getter(name="targetResources")
    def target_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EtlTaskTargetResourceArgs']]]]:
        """
        Output the relevant information of the target.
        """
        return pulumi.get(self, "target_resources")

    @target_resources.setter
    def target_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EtlTaskTargetResourceArgs']]]]):
        pulumi.set(self, "target_resources", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        """
        The task type is fixed as Resident.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="toTime")
    def to_time(self) -> Optional[pulumi.Input[int]]:
        """
        The end time of the data to be processed.
        """
        return pulumi.get(self, "to_time")

    @to_time.setter
    def to_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "to_time", value)


class EtlTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dsl_type: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 from_time: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 source_topic_id: Optional[pulumi.Input[str]] = None,
                 target_resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EtlTaskTargetResourceArgs']]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 to_time: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage tls etl task
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tls.EtlTask("foo",
            description="for-tf-test",
            dsl_type="NORMAL",
            enable=True,
            from_time=1750649545,
            script="",
            source_topic_id="8ba48bd7-2493-4300-b1d0-cb7xxxxxxx",
            target_resources=[
                volcengine.tls.EtlTaskTargetResourceArgs(
                    alias="tf-test-1",
                    topic_id="b966e41a-d6a6-4999-bd75-39962xxxxxx",
                ),
                volcengine.tls.EtlTaskTargetResourceArgs(
                    alias="tf-test-2",
                    topic_id="0ed72ac8-9531-4967-b216-ac3xxxxx",
                ),
            ],
            task_type="Resident",
            to_time=1750735958)
        ```

        ## Import

        EtlTask can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tls/etlTask:EtlTask default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A simple description of the data processing task.
        :param pulumi.Input[str] dsl_type: DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[bool] enable: Whether to enable the data processing task.
        :param pulumi.Input[int] from_time: The start time of the data to be processed.
        :param pulumi.Input[str] name: The name of the processing task.
        :param pulumi.Input[str] script: Processing rules.
        :param pulumi.Input[str] source_topic_id: The log topic where the log to be processed is located.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EtlTaskTargetResourceArgs']]]] target_resources: Output the relevant information of the target.
        :param pulumi.Input[str] task_type: The task type is fixed as Resident.
        :param pulumi.Input[int] to_time: The end time of the data to be processed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EtlTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage tls etl task
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tls.EtlTask("foo",
            description="for-tf-test",
            dsl_type="NORMAL",
            enable=True,
            from_time=1750649545,
            script="",
            source_topic_id="8ba48bd7-2493-4300-b1d0-cb7xxxxxxx",
            target_resources=[
                volcengine.tls.EtlTaskTargetResourceArgs(
                    alias="tf-test-1",
                    topic_id="b966e41a-d6a6-4999-bd75-39962xxxxxx",
                ),
                volcengine.tls.EtlTaskTargetResourceArgs(
                    alias="tf-test-2",
                    topic_id="0ed72ac8-9531-4967-b216-ac3xxxxx",
                ),
            ],
            task_type="Resident",
            to_time=1750735958)
        ```

        ## Import

        EtlTask can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tls/etlTask:EtlTask default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param EtlTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EtlTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dsl_type: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 from_time: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 source_topic_id: Optional[pulumi.Input[str]] = None,
                 target_resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EtlTaskTargetResourceArgs']]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 to_time: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EtlTaskArgs.__new__(EtlTaskArgs)

            __props__.__dict__["description"] = description
            if dsl_type is None and not opts.urn:
                raise TypeError("Missing required property 'dsl_type'")
            __props__.__dict__["dsl_type"] = dsl_type
            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
            __props__.__dict__["from_time"] = from_time
            __props__.__dict__["name"] = name
            if script is None and not opts.urn:
                raise TypeError("Missing required property 'script'")
            __props__.__dict__["script"] = script
            if source_topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_topic_id'")
            __props__.__dict__["source_topic_id"] = source_topic_id
            if target_resources is None and not opts.urn:
                raise TypeError("Missing required property 'target_resources'")
            __props__.__dict__["target_resources"] = target_resources
            if task_type is None and not opts.urn:
                raise TypeError("Missing required property 'task_type'")
            __props__.__dict__["task_type"] = task_type
            __props__.__dict__["to_time"] = to_time
        super(EtlTask, __self__).__init__(
            'volcengine:tls/etlTask:EtlTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            dsl_type: Optional[pulumi.Input[str]] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            from_time: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            script: Optional[pulumi.Input[str]] = None,
            source_topic_id: Optional[pulumi.Input[str]] = None,
            target_resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EtlTaskTargetResourceArgs']]]]] = None,
            task_type: Optional[pulumi.Input[str]] = None,
            to_time: Optional[pulumi.Input[int]] = None) -> 'EtlTask':
        """
        Get an existing EtlTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A simple description of the data processing task.
        :param pulumi.Input[str] dsl_type: DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[bool] enable: Whether to enable the data processing task.
        :param pulumi.Input[int] from_time: The start time of the data to be processed.
        :param pulumi.Input[str] name: The name of the processing task.
        :param pulumi.Input[str] script: Processing rules.
        :param pulumi.Input[str] source_topic_id: The log topic where the log to be processed is located.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EtlTaskTargetResourceArgs']]]] target_resources: Output the relevant information of the target.
        :param pulumi.Input[str] task_type: The task type is fixed as Resident.
        :param pulumi.Input[int] to_time: The end time of the data to be processed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EtlTaskState.__new__(_EtlTaskState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dsl_type"] = dsl_type
        __props__.__dict__["enable"] = enable
        __props__.__dict__["from_time"] = from_time
        __props__.__dict__["name"] = name
        __props__.__dict__["script"] = script
        __props__.__dict__["source_topic_id"] = source_topic_id
        __props__.__dict__["target_resources"] = target_resources
        __props__.__dict__["task_type"] = task_type
        __props__.__dict__["to_time"] = to_time
        return EtlTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A simple description of the data processing task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dslType")
    def dsl_type(self) -> pulumi.Output[str]:
        """
        DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "dsl_type")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[bool]:
        """
        Whether to enable the data processing task.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="fromTime")
    def from_time(self) -> pulumi.Output[Optional[int]]:
        """
        The start time of the data to be processed.
        """
        return pulumi.get(self, "from_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the processing task.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def script(self) -> pulumi.Output[str]:
        """
        Processing rules.
        """
        return pulumi.get(self, "script")

    @property
    @pulumi.getter(name="sourceTopicId")
    def source_topic_id(self) -> pulumi.Output[str]:
        """
        The log topic where the log to be processed is located.
        """
        return pulumi.get(self, "source_topic_id")

    @property
    @pulumi.getter(name="targetResources")
    def target_resources(self) -> pulumi.Output[Sequence['outputs.EtlTaskTargetResource']]:
        """
        Output the relevant information of the target.
        """
        return pulumi.get(self, "target_resources")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Output[str]:
        """
        The task type is fixed as Resident.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="toTime")
    def to_time(self) -> pulumi.Output[Optional[int]]:
        """
        The end time of the data to be processed.
        """
        return pulumi.get(self, "to_time")

