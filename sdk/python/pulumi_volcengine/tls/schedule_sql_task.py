# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScheduleSqlTaskArgs', 'ScheduleSqlTask']

@pulumi.input_type
class ScheduleSqlTaskArgs:
    def __init__(__self__, *,
                 dest_topic_id: pulumi.Input[str],
                 process_sql_delay: pulumi.Input[int],
                 process_start_time: pulumi.Input[int],
                 process_time_window: pulumi.Input[str],
                 query: pulumi.Input[str],
                 request_cycle: pulumi.Input['ScheduleSqlTaskRequestCycleArgs'],
                 status: pulumi.Input[int],
                 task_name: pulumi.Input[str],
                 topic_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 dest_region: Optional[pulumi.Input[str]] = None,
                 process_end_time: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ScheduleSqlTask resource.
        :param pulumi.Input[str] dest_topic_id: The target log topic ID used for storing the result data of timed SQL analysis.
        :param pulumi.Input[int] process_sql_delay: The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        :param pulumi.Input[int] process_start_time: The start time of the scheduled SQL analysis task, that is, the time when the first instance is created. The format is a timestamp at the second level.
        :param pulumi.Input[str] process_time_window: SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        :param pulumi.Input[str] query: The retrieval and analysis statements for the regular execution of timed SQL analysis tasks should conform to the retrieval and analysis syntax of the log service.
        :param pulumi.Input['ScheduleSqlTaskRequestCycleArgs'] request_cycle: The scheduling cycle of timed SQL analysis tasks.
        :param pulumi.Input[int] status: Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
        :param pulumi.Input[str] task_name: The Name of timed SQL analysis task.
        :param pulumi.Input[str] topic_id: The log topic ID where the original log to be analyzed for scheduled SQL is located.
        :param pulumi.Input[str] description: A simple description of the timed SQL analysis task.
        :param pulumi.Input[str] dest_region: The region to which the target log topic belongs. The default is the current region.
        :param pulumi.Input[int] process_end_time: Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        """
        pulumi.set(__self__, "dest_topic_id", dest_topic_id)
        pulumi.set(__self__, "process_sql_delay", process_sql_delay)
        pulumi.set(__self__, "process_start_time", process_start_time)
        pulumi.set(__self__, "process_time_window", process_time_window)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "request_cycle", request_cycle)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "topic_id", topic_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_region is not None:
            pulumi.set(__self__, "dest_region", dest_region)
        if process_end_time is not None:
            pulumi.set(__self__, "process_end_time", process_end_time)

    @property
    @pulumi.getter(name="destTopicId")
    def dest_topic_id(self) -> pulumi.Input[str]:
        """
        The target log topic ID used for storing the result data of timed SQL analysis.
        """
        return pulumi.get(self, "dest_topic_id")

    @dest_topic_id.setter
    def dest_topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_topic_id", value)

    @property
    @pulumi.getter(name="processSqlDelay")
    def process_sql_delay(self) -> pulumi.Input[int]:
        """
        The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        """
        return pulumi.get(self, "process_sql_delay")

    @process_sql_delay.setter
    def process_sql_delay(self, value: pulumi.Input[int]):
        pulumi.set(self, "process_sql_delay", value)

    @property
    @pulumi.getter(name="processStartTime")
    def process_start_time(self) -> pulumi.Input[int]:
        """
        The start time of the scheduled SQL analysis task, that is, the time when the first instance is created. The format is a timestamp at the second level.
        """
        return pulumi.get(self, "process_start_time")

    @process_start_time.setter
    def process_start_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "process_start_time", value)

    @property
    @pulumi.getter(name="processTimeWindow")
    def process_time_window(self) -> pulumi.Input[str]:
        """
        SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        """
        return pulumi.get(self, "process_time_window")

    @process_time_window.setter
    def process_time_window(self, value: pulumi.Input[str]):
        pulumi.set(self, "process_time_window", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        The retrieval and analysis statements for the regular execution of timed SQL analysis tasks should conform to the retrieval and analysis syntax of the log service.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="requestCycle")
    def request_cycle(self) -> pulumi.Input['ScheduleSqlTaskRequestCycleArgs']:
        """
        The scheduling cycle of timed SQL analysis tasks.
        """
        return pulumi.get(self, "request_cycle")

    @request_cycle.setter
    def request_cycle(self, value: pulumi.Input['ScheduleSqlTaskRequestCycleArgs']):
        pulumi.set(self, "request_cycle", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[int]:
        """
        Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[int]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[str]:
        """
        The Name of timed SQL analysis task.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        """
        The log topic ID where the original log to be analyzed for scheduled SQL is located.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A simple description of the timed SQL analysis task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destRegion")
    def dest_region(self) -> Optional[pulumi.Input[str]]:
        """
        The region to which the target log topic belongs. The default is the current region.
        """
        return pulumi.get(self, "dest_region")

    @dest_region.setter
    def dest_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_region", value)

    @property
    @pulumi.getter(name="processEndTime")
    def process_end_time(self) -> Optional[pulumi.Input[int]]:
        """
        Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        """
        return pulumi.get(self, "process_end_time")

    @process_end_time.setter
    def process_end_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_end_time", value)


@pulumi.input_type
class _ScheduleSqlTaskState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_region: Optional[pulumi.Input[str]] = None,
                 dest_topic_id: Optional[pulumi.Input[str]] = None,
                 process_end_time: Optional[pulumi.Input[int]] = None,
                 process_sql_delay: Optional[pulumi.Input[int]] = None,
                 process_start_time: Optional[pulumi.Input[int]] = None,
                 process_time_window: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 request_cycle: Optional[pulumi.Input['ScheduleSqlTaskRequestCycleArgs']] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ScheduleSqlTask resources.
        :param pulumi.Input[str] description: A simple description of the timed SQL analysis task.
        :param pulumi.Input[str] dest_region: The region to which the target log topic belongs. The default is the current region.
        :param pulumi.Input[str] dest_topic_id: The target log topic ID used for storing the result data of timed SQL analysis.
        :param pulumi.Input[int] process_end_time: Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        :param pulumi.Input[int] process_sql_delay: The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        :param pulumi.Input[int] process_start_time: The start time of the scheduled SQL analysis task, that is, the time when the first instance is created. The format is a timestamp at the second level.
        :param pulumi.Input[str] process_time_window: SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        :param pulumi.Input[str] query: The retrieval and analysis statements for the regular execution of timed SQL analysis tasks should conform to the retrieval and analysis syntax of the log service.
        :param pulumi.Input['ScheduleSqlTaskRequestCycleArgs'] request_cycle: The scheduling cycle of timed SQL analysis tasks.
        :param pulumi.Input[int] status: Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
        :param pulumi.Input[str] task_name: The Name of timed SQL analysis task.
        :param pulumi.Input[str] topic_id: The log topic ID where the original log to be analyzed for scheduled SQL is located.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_region is not None:
            pulumi.set(__self__, "dest_region", dest_region)
        if dest_topic_id is not None:
            pulumi.set(__self__, "dest_topic_id", dest_topic_id)
        if process_end_time is not None:
            pulumi.set(__self__, "process_end_time", process_end_time)
        if process_sql_delay is not None:
            pulumi.set(__self__, "process_sql_delay", process_sql_delay)
        if process_start_time is not None:
            pulumi.set(__self__, "process_start_time", process_start_time)
        if process_time_window is not None:
            pulumi.set(__self__, "process_time_window", process_time_window)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if request_cycle is not None:
            pulumi.set(__self__, "request_cycle", request_cycle)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A simple description of the timed SQL analysis task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destRegion")
    def dest_region(self) -> Optional[pulumi.Input[str]]:
        """
        The region to which the target log topic belongs. The default is the current region.
        """
        return pulumi.get(self, "dest_region")

    @dest_region.setter
    def dest_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_region", value)

    @property
    @pulumi.getter(name="destTopicId")
    def dest_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The target log topic ID used for storing the result data of timed SQL analysis.
        """
        return pulumi.get(self, "dest_topic_id")

    @dest_topic_id.setter
    def dest_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_topic_id", value)

    @property
    @pulumi.getter(name="processEndTime")
    def process_end_time(self) -> Optional[pulumi.Input[int]]:
        """
        Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        """
        return pulumi.get(self, "process_end_time")

    @process_end_time.setter
    def process_end_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_end_time", value)

    @property
    @pulumi.getter(name="processSqlDelay")
    def process_sql_delay(self) -> Optional[pulumi.Input[int]]:
        """
        The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        """
        return pulumi.get(self, "process_sql_delay")

    @process_sql_delay.setter
    def process_sql_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_sql_delay", value)

    @property
    @pulumi.getter(name="processStartTime")
    def process_start_time(self) -> Optional[pulumi.Input[int]]:
        """
        The start time of the scheduled SQL analysis task, that is, the time when the first instance is created. The format is a timestamp at the second level.
        """
        return pulumi.get(self, "process_start_time")

    @process_start_time.setter
    def process_start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_start_time", value)

    @property
    @pulumi.getter(name="processTimeWindow")
    def process_time_window(self) -> Optional[pulumi.Input[str]]:
        """
        SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        """
        return pulumi.get(self, "process_time_window")

    @process_time_window.setter
    def process_time_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_time_window", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        The retrieval and analysis statements for the regular execution of timed SQL analysis tasks should conform to the retrieval and analysis syntax of the log service.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="requestCycle")
    def request_cycle(self) -> Optional[pulumi.Input['ScheduleSqlTaskRequestCycleArgs']]:
        """
        The scheduling cycle of timed SQL analysis tasks.
        """
        return pulumi.get(self, "request_cycle")

    @request_cycle.setter
    def request_cycle(self, value: Optional[pulumi.Input['ScheduleSqlTaskRequestCycleArgs']]):
        pulumi.set(self, "request_cycle", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of timed SQL analysis task.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The log topic ID where the original log to be analyzed for scheduled SQL is located.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


class ScheduleSqlTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_region: Optional[pulumi.Input[str]] = None,
                 dest_topic_id: Optional[pulumi.Input[str]] = None,
                 process_end_time: Optional[pulumi.Input[int]] = None,
                 process_sql_delay: Optional[pulumi.Input[int]] = None,
                 process_start_time: Optional[pulumi.Input[int]] = None,
                 process_time_window: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 request_cycle: Optional[pulumi.Input[pulumi.InputType['ScheduleSqlTaskRequestCycleArgs']]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage tls schedule sql task
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tls.ScheduleSqlTask("foo",
            description="tf-test",
            dest_region="cn-beijing",
            dest_topic_id="b966e41a-d6a6-4999-bd75-39962xxxxxx",
            process_end_time=1751295600,
            process_sql_delay=60,
            process_start_time=1751212980,
            process_time_window="@m-15m,@m",
            query="* | SELECT * limit 10000",
            request_cycle=volcengine.tls.ScheduleSqlTaskRequestCycleArgs(
                cron_tab="0 10 * * *",
                cron_time_zone="GMT+08:00",
                time=1,
                type="CronTab",
            ),
            status=1,
            task_name="tf-test",
            topic_id="8ba48bd7-2493-4300-b1d0-cb760bxxxxxx")
        ```

        ## Import

        ScheduleSqlTask can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tls/scheduleSqlTask:ScheduleSqlTask default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A simple description of the timed SQL analysis task.
        :param pulumi.Input[str] dest_region: The region to which the target log topic belongs. The default is the current region.
        :param pulumi.Input[str] dest_topic_id: The target log topic ID used for storing the result data of timed SQL analysis.
        :param pulumi.Input[int] process_end_time: Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        :param pulumi.Input[int] process_sql_delay: The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        :param pulumi.Input[int] process_start_time: The start time of the scheduled SQL analysis task, that is, the time when the first instance is created. The format is a timestamp at the second level.
        :param pulumi.Input[str] process_time_window: SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        :param pulumi.Input[str] query: The retrieval and analysis statements for the regular execution of timed SQL analysis tasks should conform to the retrieval and analysis syntax of the log service.
        :param pulumi.Input[pulumi.InputType['ScheduleSqlTaskRequestCycleArgs']] request_cycle: The scheduling cycle of timed SQL analysis tasks.
        :param pulumi.Input[int] status: Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
        :param pulumi.Input[str] task_name: The Name of timed SQL analysis task.
        :param pulumi.Input[str] topic_id: The log topic ID where the original log to be analyzed for scheduled SQL is located.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScheduleSqlTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage tls schedule sql task
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tls.ScheduleSqlTask("foo",
            description="tf-test",
            dest_region="cn-beijing",
            dest_topic_id="b966e41a-d6a6-4999-bd75-39962xxxxxx",
            process_end_time=1751295600,
            process_sql_delay=60,
            process_start_time=1751212980,
            process_time_window="@m-15m,@m",
            query="* | SELECT * limit 10000",
            request_cycle=volcengine.tls.ScheduleSqlTaskRequestCycleArgs(
                cron_tab="0 10 * * *",
                cron_time_zone="GMT+08:00",
                time=1,
                type="CronTab",
            ),
            status=1,
            task_name="tf-test",
            topic_id="8ba48bd7-2493-4300-b1d0-cb760bxxxxxx")
        ```

        ## Import

        ScheduleSqlTask can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tls/scheduleSqlTask:ScheduleSqlTask default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ScheduleSqlTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScheduleSqlTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_region: Optional[pulumi.Input[str]] = None,
                 dest_topic_id: Optional[pulumi.Input[str]] = None,
                 process_end_time: Optional[pulumi.Input[int]] = None,
                 process_sql_delay: Optional[pulumi.Input[int]] = None,
                 process_start_time: Optional[pulumi.Input[int]] = None,
                 process_time_window: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 request_cycle: Optional[pulumi.Input[pulumi.InputType['ScheduleSqlTaskRequestCycleArgs']]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScheduleSqlTaskArgs.__new__(ScheduleSqlTaskArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dest_region"] = dest_region
            if dest_topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'dest_topic_id'")
            __props__.__dict__["dest_topic_id"] = dest_topic_id
            __props__.__dict__["process_end_time"] = process_end_time
            if process_sql_delay is None and not opts.urn:
                raise TypeError("Missing required property 'process_sql_delay'")
            __props__.__dict__["process_sql_delay"] = process_sql_delay
            if process_start_time is None and not opts.urn:
                raise TypeError("Missing required property 'process_start_time'")
            __props__.__dict__["process_start_time"] = process_start_time
            if process_time_window is None and not opts.urn:
                raise TypeError("Missing required property 'process_time_window'")
            __props__.__dict__["process_time_window"] = process_time_window
            if query is None and not opts.urn:
                raise TypeError("Missing required property 'query'")
            __props__.__dict__["query"] = query
            if request_cycle is None and not opts.urn:
                raise TypeError("Missing required property 'request_cycle'")
            __props__.__dict__["request_cycle"] = request_cycle
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            if topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'topic_id'")
            __props__.__dict__["topic_id"] = topic_id
        super(ScheduleSqlTask, __self__).__init__(
            'volcengine:tls/scheduleSqlTask:ScheduleSqlTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            dest_region: Optional[pulumi.Input[str]] = None,
            dest_topic_id: Optional[pulumi.Input[str]] = None,
            process_end_time: Optional[pulumi.Input[int]] = None,
            process_sql_delay: Optional[pulumi.Input[int]] = None,
            process_start_time: Optional[pulumi.Input[int]] = None,
            process_time_window: Optional[pulumi.Input[str]] = None,
            query: Optional[pulumi.Input[str]] = None,
            request_cycle: Optional[pulumi.Input[pulumi.InputType['ScheduleSqlTaskRequestCycleArgs']]] = None,
            status: Optional[pulumi.Input[int]] = None,
            task_name: Optional[pulumi.Input[str]] = None,
            topic_id: Optional[pulumi.Input[str]] = None) -> 'ScheduleSqlTask':
        """
        Get an existing ScheduleSqlTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A simple description of the timed SQL analysis task.
        :param pulumi.Input[str] dest_region: The region to which the target log topic belongs. The default is the current region.
        :param pulumi.Input[str] dest_topic_id: The target log topic ID used for storing the result data of timed SQL analysis.
        :param pulumi.Input[int] process_end_time: Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        :param pulumi.Input[int] process_sql_delay: The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        :param pulumi.Input[int] process_start_time: The start time of the scheduled SQL analysis task, that is, the time when the first instance is created. The format is a timestamp at the second level.
        :param pulumi.Input[str] process_time_window: SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        :param pulumi.Input[str] query: The retrieval and analysis statements for the regular execution of timed SQL analysis tasks should conform to the retrieval and analysis syntax of the log service.
        :param pulumi.Input[pulumi.InputType['ScheduleSqlTaskRequestCycleArgs']] request_cycle: The scheduling cycle of timed SQL analysis tasks.
        :param pulumi.Input[int] status: Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
        :param pulumi.Input[str] task_name: The Name of timed SQL analysis task.
        :param pulumi.Input[str] topic_id: The log topic ID where the original log to be analyzed for scheduled SQL is located.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScheduleSqlTaskState.__new__(_ScheduleSqlTaskState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dest_region"] = dest_region
        __props__.__dict__["dest_topic_id"] = dest_topic_id
        __props__.__dict__["process_end_time"] = process_end_time
        __props__.__dict__["process_sql_delay"] = process_sql_delay
        __props__.__dict__["process_start_time"] = process_start_time
        __props__.__dict__["process_time_window"] = process_time_window
        __props__.__dict__["query"] = query
        __props__.__dict__["request_cycle"] = request_cycle
        __props__.__dict__["status"] = status
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["topic_id"] = topic_id
        return ScheduleSqlTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A simple description of the timed SQL analysis task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destRegion")
    def dest_region(self) -> pulumi.Output[Optional[str]]:
        """
        The region to which the target log topic belongs. The default is the current region.
        """
        return pulumi.get(self, "dest_region")

    @property
    @pulumi.getter(name="destTopicId")
    def dest_topic_id(self) -> pulumi.Output[str]:
        """
        The target log topic ID used for storing the result data of timed SQL analysis.
        """
        return pulumi.get(self, "dest_topic_id")

    @property
    @pulumi.getter(name="processEndTime")
    def process_end_time(self) -> pulumi.Output[Optional[int]]:
        """
        Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        """
        return pulumi.get(self, "process_end_time")

    @property
    @pulumi.getter(name="processSqlDelay")
    def process_sql_delay(self) -> pulumi.Output[int]:
        """
        The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        """
        return pulumi.get(self, "process_sql_delay")

    @property
    @pulumi.getter(name="processStartTime")
    def process_start_time(self) -> pulumi.Output[int]:
        """
        The start time of the scheduled SQL analysis task, that is, the time when the first instance is created. The format is a timestamp at the second level.
        """
        return pulumi.get(self, "process_start_time")

    @property
    @pulumi.getter(name="processTimeWindow")
    def process_time_window(self) -> pulumi.Output[str]:
        """
        SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        """
        return pulumi.get(self, "process_time_window")

    @property
    @pulumi.getter
    def query(self) -> pulumi.Output[str]:
        """
        The retrieval and analysis statements for the regular execution of timed SQL analysis tasks should conform to the retrieval and analysis syntax of the log service.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="requestCycle")
    def request_cycle(self) -> pulumi.Output['outputs.ScheduleSqlTaskRequestCycle']:
        """
        The scheduling cycle of timed SQL analysis tasks.
        """
        return pulumi.get(self, "request_cycle")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[str]:
        """
        The Name of timed SQL analysis task.
        """
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        The log topic ID where the original log to be analyzed for scheduled SQL is located.
        """
        return pulumi.get(self, "topic_id")

