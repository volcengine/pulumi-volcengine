# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ConsumerGroupArgs', 'ConsumerGroup']

@pulumi.input_type
class ConsumerGroupArgs:
    def __init__(__self__, *,
                 consumer_group_name: pulumi.Input[str],
                 heartbeat_ttl: pulumi.Input[int],
                 ordered_consume: pulumi.Input[bool],
                 project_id: pulumi.Input[str],
                 topic_id_lists: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        The set of arguments for constructing a ConsumerGroup resource.
        :param pulumi.Input[str] consumer_group_name: The name of the consumer group.
        :param pulumi.Input[int] heartbeat_ttl: The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
        :param pulumi.Input[bool] ordered_consume: Whether to consume in sequence.
        :param pulumi.Input[str] project_id: The log project ID to which the consumption group belongs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topic_id_lists: The list of log topic ids to be consumed by the consumer group.
        """
        pulumi.set(__self__, "consumer_group_name", consumer_group_name)
        pulumi.set(__self__, "heartbeat_ttl", heartbeat_ttl)
        pulumi.set(__self__, "ordered_consume", ordered_consume)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "topic_id_lists", topic_id_lists)

    @property
    @pulumi.getter(name="consumerGroupName")
    def consumer_group_name(self) -> pulumi.Input[str]:
        """
        The name of the consumer group.
        """
        return pulumi.get(self, "consumer_group_name")

    @consumer_group_name.setter
    def consumer_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "consumer_group_name", value)

    @property
    @pulumi.getter(name="heartbeatTtl")
    def heartbeat_ttl(self) -> pulumi.Input[int]:
        """
        The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
        """
        return pulumi.get(self, "heartbeat_ttl")

    @heartbeat_ttl.setter
    def heartbeat_ttl(self, value: pulumi.Input[int]):
        pulumi.set(self, "heartbeat_ttl", value)

    @property
    @pulumi.getter(name="orderedConsume")
    def ordered_consume(self) -> pulumi.Input[bool]:
        """
        Whether to consume in sequence.
        """
        return pulumi.get(self, "ordered_consume")

    @ordered_consume.setter
    def ordered_consume(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ordered_consume", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The log project ID to which the consumption group belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="topicIdLists")
    def topic_id_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of log topic ids to be consumed by the consumer group.
        """
        return pulumi.get(self, "topic_id_lists")

    @topic_id_lists.setter
    def topic_id_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "topic_id_lists", value)


@pulumi.input_type
class _ConsumerGroupState:
    def __init__(__self__, *,
                 consumer_group_name: Optional[pulumi.Input[str]] = None,
                 heartbeat_ttl: Optional[pulumi.Input[int]] = None,
                 ordered_consume: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 topic_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ConsumerGroup resources.
        :param pulumi.Input[str] consumer_group_name: The name of the consumer group.
        :param pulumi.Input[int] heartbeat_ttl: The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
        :param pulumi.Input[bool] ordered_consume: Whether to consume in sequence.
        :param pulumi.Input[str] project_id: The log project ID to which the consumption group belongs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topic_id_lists: The list of log topic ids to be consumed by the consumer group.
        """
        if consumer_group_name is not None:
            pulumi.set(__self__, "consumer_group_name", consumer_group_name)
        if heartbeat_ttl is not None:
            pulumi.set(__self__, "heartbeat_ttl", heartbeat_ttl)
        if ordered_consume is not None:
            pulumi.set(__self__, "ordered_consume", ordered_consume)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if topic_id_lists is not None:
            pulumi.set(__self__, "topic_id_lists", topic_id_lists)

    @property
    @pulumi.getter(name="consumerGroupName")
    def consumer_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the consumer group.
        """
        return pulumi.get(self, "consumer_group_name")

    @consumer_group_name.setter
    def consumer_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_group_name", value)

    @property
    @pulumi.getter(name="heartbeatTtl")
    def heartbeat_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
        """
        return pulumi.get(self, "heartbeat_ttl")

    @heartbeat_ttl.setter
    def heartbeat_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "heartbeat_ttl", value)

    @property
    @pulumi.getter(name="orderedConsume")
    def ordered_consume(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to consume in sequence.
        """
        return pulumi.get(self, "ordered_consume")

    @ordered_consume.setter
    def ordered_consume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ordered_consume", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The log project ID to which the consumption group belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="topicIdLists")
    def topic_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of log topic ids to be consumed by the consumer group.
        """
        return pulumi.get(self, "topic_id_lists")

    @topic_id_lists.setter
    def topic_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topic_id_lists", value)


class ConsumerGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consumer_group_name: Optional[pulumi.Input[str]] = None,
                 heartbeat_ttl: Optional[pulumi.Input[int]] = None,
                 ordered_consume: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 topic_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage tls consumer group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tls.ConsumerGroup("foo",
            consumer_group_name="tf-test-consumer-group",
            heartbeat_ttl=120,
            ordered_consume=False,
            project_id="17ba378d-de43-495e-8906-03aexxxxxx",
            topic_id_lists=["0ed72ac8-9531-4967-b216-ac30xxxxxx"])
        ```

        ## Import

        ConsumerGroup can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tls/consumerGroup:ConsumerGroup default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] consumer_group_name: The name of the consumer group.
        :param pulumi.Input[int] heartbeat_ttl: The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
        :param pulumi.Input[bool] ordered_consume: Whether to consume in sequence.
        :param pulumi.Input[str] project_id: The log project ID to which the consumption group belongs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topic_id_lists: The list of log topic ids to be consumed by the consumer group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConsumerGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage tls consumer group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.tls.ConsumerGroup("foo",
            consumer_group_name="tf-test-consumer-group",
            heartbeat_ttl=120,
            ordered_consume=False,
            project_id="17ba378d-de43-495e-8906-03aexxxxxx",
            topic_id_lists=["0ed72ac8-9531-4967-b216-ac30xxxxxx"])
        ```

        ## Import

        ConsumerGroup can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:tls/consumerGroup:ConsumerGroup default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ConsumerGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConsumerGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consumer_group_name: Optional[pulumi.Input[str]] = None,
                 heartbeat_ttl: Optional[pulumi.Input[int]] = None,
                 ordered_consume: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 topic_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConsumerGroupArgs.__new__(ConsumerGroupArgs)

            if consumer_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'consumer_group_name'")
            __props__.__dict__["consumer_group_name"] = consumer_group_name
            if heartbeat_ttl is None and not opts.urn:
                raise TypeError("Missing required property 'heartbeat_ttl'")
            __props__.__dict__["heartbeat_ttl"] = heartbeat_ttl
            if ordered_consume is None and not opts.urn:
                raise TypeError("Missing required property 'ordered_consume'")
            __props__.__dict__["ordered_consume"] = ordered_consume
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if topic_id_lists is None and not opts.urn:
                raise TypeError("Missing required property 'topic_id_lists'")
            __props__.__dict__["topic_id_lists"] = topic_id_lists
        super(ConsumerGroup, __self__).__init__(
            'volcengine:tls/consumerGroup:ConsumerGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            consumer_group_name: Optional[pulumi.Input[str]] = None,
            heartbeat_ttl: Optional[pulumi.Input[int]] = None,
            ordered_consume: Optional[pulumi.Input[bool]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            topic_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'ConsumerGroup':
        """
        Get an existing ConsumerGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] consumer_group_name: The name of the consumer group.
        :param pulumi.Input[int] heartbeat_ttl: The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
        :param pulumi.Input[bool] ordered_consume: Whether to consume in sequence.
        :param pulumi.Input[str] project_id: The log project ID to which the consumption group belongs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topic_id_lists: The list of log topic ids to be consumed by the consumer group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConsumerGroupState.__new__(_ConsumerGroupState)

        __props__.__dict__["consumer_group_name"] = consumer_group_name
        __props__.__dict__["heartbeat_ttl"] = heartbeat_ttl
        __props__.__dict__["ordered_consume"] = ordered_consume
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["topic_id_lists"] = topic_id_lists
        return ConsumerGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="consumerGroupName")
    def consumer_group_name(self) -> pulumi.Output[str]:
        """
        The name of the consumer group.
        """
        return pulumi.get(self, "consumer_group_name")

    @property
    @pulumi.getter(name="heartbeatTtl")
    def heartbeat_ttl(self) -> pulumi.Output[int]:
        """
        The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
        """
        return pulumi.get(self, "heartbeat_ttl")

    @property
    @pulumi.getter(name="orderedConsume")
    def ordered_consume(self) -> pulumi.Output[bool]:
        """
        Whether to consume in sequence.
        """
        return pulumi.get(self, "ordered_consume")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The log project ID to which the consumption group belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="topicIdLists")
    def topic_id_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of log topic ids to be consumed by the consumer group.
        """
        return pulumi.get(self, "topic_id_lists")

