# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApigUpstreamVersionArgs', 'ApigUpstreamVersion']

@pulumi.input_type
class ApigUpstreamVersionArgs:
    def __init__(__self__, *,
                 upstream_id: pulumi.Input[str],
                 upstream_version: pulumi.Input['ApigUpstreamVersionUpstreamVersionArgs']):
        """
        The set of arguments for constructing a ApigUpstreamVersion resource.
        :param pulumi.Input[str] upstream_id: The id of the apig upstream.
        :param pulumi.Input['ApigUpstreamVersionUpstreamVersionArgs'] upstream_version: The version of the apig upstream.
        """
        pulumi.set(__self__, "upstream_id", upstream_id)
        pulumi.set(__self__, "upstream_version", upstream_version)

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> pulumi.Input[str]:
        """
        The id of the apig upstream.
        """
        return pulumi.get(self, "upstream_id")

    @upstream_id.setter
    def upstream_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "upstream_id", value)

    @property
    @pulumi.getter(name="upstreamVersion")
    def upstream_version(self) -> pulumi.Input['ApigUpstreamVersionUpstreamVersionArgs']:
        """
        The version of the apig upstream.
        """
        return pulumi.get(self, "upstream_version")

    @upstream_version.setter
    def upstream_version(self, value: pulumi.Input['ApigUpstreamVersionUpstreamVersionArgs']):
        pulumi.set(self, "upstream_version", value)


@pulumi.input_type
class _ApigUpstreamVersionState:
    def __init__(__self__, *,
                 upstream_id: Optional[pulumi.Input[str]] = None,
                 upstream_version: Optional[pulumi.Input['ApigUpstreamVersionUpstreamVersionArgs']] = None):
        """
        Input properties used for looking up and filtering ApigUpstreamVersion resources.
        :param pulumi.Input[str] upstream_id: The id of the apig upstream.
        :param pulumi.Input['ApigUpstreamVersionUpstreamVersionArgs'] upstream_version: The version of the apig upstream.
        """
        if upstream_id is not None:
            pulumi.set(__self__, "upstream_id", upstream_id)
        if upstream_version is not None:
            pulumi.set(__self__, "upstream_version", upstream_version)

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the apig upstream.
        """
        return pulumi.get(self, "upstream_id")

    @upstream_id.setter
    def upstream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_id", value)

    @property
    @pulumi.getter(name="upstreamVersion")
    def upstream_version(self) -> Optional[pulumi.Input['ApigUpstreamVersionUpstreamVersionArgs']]:
        """
        The version of the apig upstream.
        """
        return pulumi.get(self, "upstream_version")

    @upstream_version.setter
    def upstream_version(self, value: Optional[pulumi.Input['ApigUpstreamVersionUpstreamVersionArgs']]):
        pulumi.set(self, "upstream_version", value)


class ApigUpstreamVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 upstream_id: Optional[pulumi.Input[str]] = None,
                 upstream_version: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamVersionUpstreamVersionArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage apig upstream version
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        foo_k8s_apig_upstream_source = volcengine.apig.ApigUpstreamSource("foo-k8sApigUpstreamSource",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test-k8s",
            source_type="K8S",
            source_spec=volcengine.apig.ApigUpstreamSourceSourceSpecArgs(
                k8s_source=volcengine.apig.ApigUpstreamSourceSourceSpecK8sSourceArgs(
                    cluster_id="cd197sac4mpmnruh7um80",
                ),
            ),
            ingress_settings=[volcengine.apig.ApigUpstreamSourceIngressSettingArgs(
                enable_ingress=True,
                update_status=True,
                ingress_classes=["test"],
                watch_namespaces=["default"],
            )])
        foo_k8s_apig_upstream = volcengine.apig.ApigUpstream("foo-k8sApigUpstream",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test",
            resource_type="Console",
            protocol="HTTP",
            load_balancer_settings=volcengine.apig.ApigUpstreamLoadBalancerSettingsArgs(
                lb_policy="ConsistentHashLB",
                consistent_hash_lb=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs(
                    hash_key="HTTPCookie",
                    http_cookie=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs(
                        name="test",
                        path="/",
                        ttl=300,
                    ),
                ),
            ),
            tls_settings=volcengine.apig.ApigUpstreamTlsSettingsArgs(
                tls_mode="SIMPLE",
                sni="test",
            ),
            circuit_breaking_settings=volcengine.apig.ApigUpstreamCircuitBreakingSettingsArgs(
                enable=False,
                consecutive_errors=5,
                interval=10000,
                base_ejection_time=30000,
                max_ejection_percent=20,
                min_health_percent=60,
            ),
            source_type="K8S",
            upstream_spec=volcengine.apig.ApigUpstreamUpstreamSpecArgs(
                k8s_service=volcengine.apig.ApigUpstreamUpstreamSpecK8sServiceArgs(
                    namespace="default",
                    name="kubernetes",
                    port=443,
                ),
            ),
            opts=pulumi.ResourceOptions(depends_on=[foo_k8s_apig_upstream_source]))
        foo_apig_upstream_version = volcengine.apig.ApigUpstreamVersion("fooApigUpstreamVersion",
            upstream_id=foo_k8s_apig_upstream.id,
            upstream_version=volcengine.apig.ApigUpstreamVersionUpstreamVersionArgs(
                name="acc-test-version",
                labels=[volcengine.apig.ApigUpstreamVersionUpstreamVersionLabelArgs(
                    key="k1",
                    value="v2",
                )],
            ))
        ```

        ## Import

        ApigUpstreamVersion can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigUpstreamVersion:ApigUpstreamVersion default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] upstream_id: The id of the apig upstream.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamVersionUpstreamVersionArgs']] upstream_version: The version of the apig upstream.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApigUpstreamVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage apig upstream version
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        foo_k8s_apig_upstream_source = volcengine.apig.ApigUpstreamSource("foo-k8sApigUpstreamSource",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test-k8s",
            source_type="K8S",
            source_spec=volcengine.apig.ApigUpstreamSourceSourceSpecArgs(
                k8s_source=volcengine.apig.ApigUpstreamSourceSourceSpecK8sSourceArgs(
                    cluster_id="cd197sac4mpmnruh7um80",
                ),
            ),
            ingress_settings=[volcengine.apig.ApigUpstreamSourceIngressSettingArgs(
                enable_ingress=True,
                update_status=True,
                ingress_classes=["test"],
                watch_namespaces=["default"],
            )])
        foo_k8s_apig_upstream = volcengine.apig.ApigUpstream("foo-k8sApigUpstream",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test",
            resource_type="Console",
            protocol="HTTP",
            load_balancer_settings=volcengine.apig.ApigUpstreamLoadBalancerSettingsArgs(
                lb_policy="ConsistentHashLB",
                consistent_hash_lb=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs(
                    hash_key="HTTPCookie",
                    http_cookie=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs(
                        name="test",
                        path="/",
                        ttl=300,
                    ),
                ),
            ),
            tls_settings=volcengine.apig.ApigUpstreamTlsSettingsArgs(
                tls_mode="SIMPLE",
                sni="test",
            ),
            circuit_breaking_settings=volcengine.apig.ApigUpstreamCircuitBreakingSettingsArgs(
                enable=False,
                consecutive_errors=5,
                interval=10000,
                base_ejection_time=30000,
                max_ejection_percent=20,
                min_health_percent=60,
            ),
            source_type="K8S",
            upstream_spec=volcengine.apig.ApigUpstreamUpstreamSpecArgs(
                k8s_service=volcengine.apig.ApigUpstreamUpstreamSpecK8sServiceArgs(
                    namespace="default",
                    name="kubernetes",
                    port=443,
                ),
            ),
            opts=pulumi.ResourceOptions(depends_on=[foo_k8s_apig_upstream_source]))
        foo_apig_upstream_version = volcengine.apig.ApigUpstreamVersion("fooApigUpstreamVersion",
            upstream_id=foo_k8s_apig_upstream.id,
            upstream_version=volcengine.apig.ApigUpstreamVersionUpstreamVersionArgs(
                name="acc-test-version",
                labels=[volcengine.apig.ApigUpstreamVersionUpstreamVersionLabelArgs(
                    key="k1",
                    value="v2",
                )],
            ))
        ```

        ## Import

        ApigUpstreamVersion can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigUpstreamVersion:ApigUpstreamVersion default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ApigUpstreamVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApigUpstreamVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 upstream_id: Optional[pulumi.Input[str]] = None,
                 upstream_version: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamVersionUpstreamVersionArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApigUpstreamVersionArgs.__new__(ApigUpstreamVersionArgs)

            if upstream_id is None and not opts.urn:
                raise TypeError("Missing required property 'upstream_id'")
            __props__.__dict__["upstream_id"] = upstream_id
            if upstream_version is None and not opts.urn:
                raise TypeError("Missing required property 'upstream_version'")
            __props__.__dict__["upstream_version"] = upstream_version
        super(ApigUpstreamVersion, __self__).__init__(
            'volcengine:apig/apigUpstreamVersion:ApigUpstreamVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            upstream_id: Optional[pulumi.Input[str]] = None,
            upstream_version: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamVersionUpstreamVersionArgs']]] = None) -> 'ApigUpstreamVersion':
        """
        Get an existing ApigUpstreamVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] upstream_id: The id of the apig upstream.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamVersionUpstreamVersionArgs']] upstream_version: The version of the apig upstream.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApigUpstreamVersionState.__new__(_ApigUpstreamVersionState)

        __props__.__dict__["upstream_id"] = upstream_id
        __props__.__dict__["upstream_version"] = upstream_version
        return ApigUpstreamVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> pulumi.Output[str]:
        """
        The id of the apig upstream.
        """
        return pulumi.get(self, "upstream_id")

    @property
    @pulumi.getter(name="upstreamVersion")
    def upstream_version(self) -> pulumi.Output['outputs.ApigUpstreamVersionUpstreamVersion']:
        """
        The version of the apig upstream.
        """
        return pulumi.get(self, "upstream_version")

