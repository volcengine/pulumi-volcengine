# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApigUpstreamArgs', 'ApigUpstream']

@pulumi.input_type
class ApigUpstreamArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 upstream_spec: pulumi.Input['ApigUpstreamUpstreamSpecArgs'],
                 circuit_breaking_settings: Optional[pulumi.Input['ApigUpstreamCircuitBreakingSettingsArgs']] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 load_balancer_settings: Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 tls_settings: Optional[pulumi.Input['ApigUpstreamTlsSettingsArgs']] = None):
        """
        The set of arguments for constructing a ApigUpstream resource.
        :param pulumi.Input[str] gateway_id: The gateway id of the apig upstream.
        :param pulumi.Input[str] protocol: The protocol of the apig upstream. Valid values: `HTTP`, `HTTP2`, `GRPC`.
        :param pulumi.Input[str] source_type: The source type of the apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        :param pulumi.Input['ApigUpstreamUpstreamSpecArgs'] upstream_spec: The upstream spec of apig upstream.
        :param pulumi.Input['ApigUpstreamCircuitBreakingSettingsArgs'] circuit_breaking_settings: The circuit breaking settings of apig upstream.
        :param pulumi.Input[str] comments: The comments of the apig upstream.
        :param pulumi.Input['ApigUpstreamLoadBalancerSettingsArgs'] load_balancer_settings: The load balancer settings of apig upstream.
        :param pulumi.Input[str] name: The name of the apig upstream.
        :param pulumi.Input[str] resource_type: The resource type of the apig upstream. Valid values: `Console`, `Ingress`.
        :param pulumi.Input['ApigUpstreamTlsSettingsArgs'] tls_settings: The tls settings of apig upstream.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "upstream_spec", upstream_spec)
        if circuit_breaking_settings is not None:
            pulumi.set(__self__, "circuit_breaking_settings", circuit_breaking_settings)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if load_balancer_settings is not None:
            pulumi.set(__self__, "load_balancer_settings", load_balancer_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tls_settings is not None:
            pulumi.set(__self__, "tls_settings", tls_settings)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        The gateway id of the apig upstream.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        The protocol of the apig upstream. Valid values: `HTTP`, `HTTP2`, `GRPC`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        The source type of the apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="upstreamSpec")
    def upstream_spec(self) -> pulumi.Input['ApigUpstreamUpstreamSpecArgs']:
        """
        The upstream spec of apig upstream.
        """
        return pulumi.get(self, "upstream_spec")

    @upstream_spec.setter
    def upstream_spec(self, value: pulumi.Input['ApigUpstreamUpstreamSpecArgs']):
        pulumi.set(self, "upstream_spec", value)

    @property
    @pulumi.getter(name="circuitBreakingSettings")
    def circuit_breaking_settings(self) -> Optional[pulumi.Input['ApigUpstreamCircuitBreakingSettingsArgs']]:
        """
        The circuit breaking settings of apig upstream.
        """
        return pulumi.get(self, "circuit_breaking_settings")

    @circuit_breaking_settings.setter
    def circuit_breaking_settings(self, value: Optional[pulumi.Input['ApigUpstreamCircuitBreakingSettingsArgs']]):
        pulumi.set(self, "circuit_breaking_settings", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        The comments of the apig upstream.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="loadBalancerSettings")
    def load_balancer_settings(self) -> Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsArgs']]:
        """
        The load balancer settings of apig upstream.
        """
        return pulumi.get(self, "load_balancer_settings")

    @load_balancer_settings.setter
    def load_balancer_settings(self, value: Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsArgs']]):
        pulumi.set(self, "load_balancer_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the apig upstream.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The resource type of the apig upstream. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Optional[pulumi.Input['ApigUpstreamTlsSettingsArgs']]:
        """
        The tls settings of apig upstream.
        """
        return pulumi.get(self, "tls_settings")

    @tls_settings.setter
    def tls_settings(self, value: Optional[pulumi.Input['ApigUpstreamTlsSettingsArgs']]):
        pulumi.set(self, "tls_settings", value)


@pulumi.input_type
class _ApigUpstreamState:
    def __init__(__self__, *,
                 circuit_breaking_settings: Optional[pulumi.Input['ApigUpstreamCircuitBreakingSettingsArgs']] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_settings: Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 tls_settings: Optional[pulumi.Input['ApigUpstreamTlsSettingsArgs']] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 upstream_spec: Optional[pulumi.Input['ApigUpstreamUpstreamSpecArgs']] = None,
                 version_details: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionDetailArgs']]]] = None):
        """
        Input properties used for looking up and filtering ApigUpstream resources.
        :param pulumi.Input['ApigUpstreamCircuitBreakingSettingsArgs'] circuit_breaking_settings: The circuit breaking settings of apig upstream.
        :param pulumi.Input[str] comments: The comments of the apig upstream.
        :param pulumi.Input[str] create_time: The create time of apig upstream.
        :param pulumi.Input[str] gateway_id: The gateway id of the apig upstream.
        :param pulumi.Input['ApigUpstreamLoadBalancerSettingsArgs'] load_balancer_settings: The load balancer settings of apig upstream.
        :param pulumi.Input[str] name: The name of the apig upstream.
        :param pulumi.Input[str] protocol: The protocol of the apig upstream. Valid values: `HTTP`, `HTTP2`, `GRPC`.
        :param pulumi.Input[str] resource_type: The resource type of the apig upstream. Valid values: `Console`, `Ingress`.
        :param pulumi.Input[str] source_type: The source type of the apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        :param pulumi.Input['ApigUpstreamTlsSettingsArgs'] tls_settings: The tls settings of apig upstream.
        :param pulumi.Input[str] update_time: The update time of apig upstream version.
        :param pulumi.Input['ApigUpstreamUpstreamSpecArgs'] upstream_spec: The upstream spec of apig upstream.
        :param pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionDetailArgs']]] version_details: The version details of apig upstream.
        """
        if circuit_breaking_settings is not None:
            pulumi.set(__self__, "circuit_breaking_settings", circuit_breaking_settings)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if load_balancer_settings is not None:
            pulumi.set(__self__, "load_balancer_settings", load_balancer_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if tls_settings is not None:
            pulumi.set(__self__, "tls_settings", tls_settings)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if upstream_spec is not None:
            pulumi.set(__self__, "upstream_spec", upstream_spec)
        if version_details is not None:
            pulumi.set(__self__, "version_details", version_details)

    @property
    @pulumi.getter(name="circuitBreakingSettings")
    def circuit_breaking_settings(self) -> Optional[pulumi.Input['ApigUpstreamCircuitBreakingSettingsArgs']]:
        """
        The circuit breaking settings of apig upstream.
        """
        return pulumi.get(self, "circuit_breaking_settings")

    @circuit_breaking_settings.setter
    def circuit_breaking_settings(self, value: Optional[pulumi.Input['ApigUpstreamCircuitBreakingSettingsArgs']]):
        pulumi.set(self, "circuit_breaking_settings", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        The comments of the apig upstream.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of apig upstream.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        The gateway id of the apig upstream.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="loadBalancerSettings")
    def load_balancer_settings(self) -> Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsArgs']]:
        """
        The load balancer settings of apig upstream.
        """
        return pulumi.get(self, "load_balancer_settings")

    @load_balancer_settings.setter
    def load_balancer_settings(self, value: Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsArgs']]):
        pulumi.set(self, "load_balancer_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the apig upstream.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol of the apig upstream. Valid values: `HTTP`, `HTTP2`, `GRPC`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The resource type of the apig upstream. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        The source type of the apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Optional[pulumi.Input['ApigUpstreamTlsSettingsArgs']]:
        """
        The tls settings of apig upstream.
        """
        return pulumi.get(self, "tls_settings")

    @tls_settings.setter
    def tls_settings(self, value: Optional[pulumi.Input['ApigUpstreamTlsSettingsArgs']]):
        pulumi.set(self, "tls_settings", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="upstreamSpec")
    def upstream_spec(self) -> Optional[pulumi.Input['ApigUpstreamUpstreamSpecArgs']]:
        """
        The upstream spec of apig upstream.
        """
        return pulumi.get(self, "upstream_spec")

    @upstream_spec.setter
    def upstream_spec(self, value: Optional[pulumi.Input['ApigUpstreamUpstreamSpecArgs']]):
        pulumi.set(self, "upstream_spec", value)

    @property
    @pulumi.getter(name="versionDetails")
    def version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionDetailArgs']]]]:
        """
        The version details of apig upstream.
        """
        return pulumi.get(self, "version_details")

    @version_details.setter
    def version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionDetailArgs']]]]):
        pulumi.set(self, "version_details", value)


class ApigUpstream(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 circuit_breaking_settings: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamCircuitBreakingSettingsArgs']]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_settings: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamLoadBalancerSettingsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 tls_settings: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamTlsSettingsArgs']]] = None,
                 upstream_spec: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamUpstreamSpecArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage apig upstream
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        foo_fixed_ip = volcengine.apig.ApigUpstream("foo-fixed-ip",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test",
            resource_type="Console",
            protocol="HTTP",
            load_balancer_settings=volcengine.apig.ApigUpstreamLoadBalancerSettingsArgs(
                lb_policy="ConsistentHashLB",
                consistent_hash_lb=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs(
                    hash_key="HTTPCookie",
                    http_cookie=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs(
                        name="test",
                        path="/",
                        ttl=300,
                    ),
                ),
            ),
            tls_settings=volcengine.apig.ApigUpstreamTlsSettingsArgs(
                tls_mode="SIMPLE",
                sni="test",
            ),
            circuit_breaking_settings=volcengine.apig.ApigUpstreamCircuitBreakingSettingsArgs(
                enable=False,
                consecutive_errors=5,
                interval=10000,
                base_ejection_time=30000,
                max_ejection_percent=20,
                min_health_percent=60,
            ),
            source_type="FixedIP",
            upstream_spec=volcengine.apig.ApigUpstreamUpstreamSpecArgs(
                fixed_ip_lists=[
                    volcengine.apig.ApigUpstreamUpstreamSpecFixedIpListArgs(
                        ip="172.16.0.10",
                        port=8080,
                    ),
                    volcengine.apig.ApigUpstreamUpstreamSpecFixedIpListArgs(
                        ip="172.16.0.20",
                        port=8090,
                    ),
                ],
            ))
        foo_vefaas = volcengine.apig.ApigUpstream("foo-vefaas",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test",
            resource_type="Console",
            protocol="HTTP",
            source_type="VeFaas",
            upstream_spec=volcengine.apig.ApigUpstreamUpstreamSpecArgs(
                ve_faas=volcengine.apig.ApigUpstreamUpstreamSpecVeFaasArgs(
                    function_id="crnrfajj",
                ),
            ))
        foo_k8s_apig_upstream_source = volcengine.apig.ApigUpstreamSource("foo-k8sApigUpstreamSource",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test-k8s",
            source_type="K8S",
            source_spec=volcengine.apig.ApigUpstreamSourceSourceSpecArgs(
                k8s_source=volcengine.apig.ApigUpstreamSourceSourceSpecK8sSourceArgs(
                    cluster_id="cd197sac4mpmnruh7um80",
                ),
            ),
            ingress_settings=[volcengine.apig.ApigUpstreamSourceIngressSettingArgs(
                enable_ingress=True,
                update_status=True,
                ingress_classes=["test"],
                watch_namespaces=["default"],
            )])
        foo_k8s_apig_upstream = volcengine.apig.ApigUpstream("foo-k8sApigUpstream",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test",
            resource_type="Console",
            protocol="HTTP",
            load_balancer_settings=volcengine.apig.ApigUpstreamLoadBalancerSettingsArgs(
                lb_policy="ConsistentHashLB",
                consistent_hash_lb=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs(
                    hash_key="HTTPCookie",
                    http_cookie=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs(
                        name="test",
                        path="/",
                        ttl=300,
                    ),
                ),
            ),
            tls_settings=volcengine.apig.ApigUpstreamTlsSettingsArgs(
                tls_mode="SIMPLE",
                sni="test",
            ),
            circuit_breaking_settings=volcengine.apig.ApigUpstreamCircuitBreakingSettingsArgs(
                enable=False,
                consecutive_errors=5,
                interval=10000,
                base_ejection_time=30000,
                max_ejection_percent=20,
                min_health_percent=60,
            ),
            source_type="K8S",
            upstream_spec=volcengine.apig.ApigUpstreamUpstreamSpecArgs(
                k8s_service=volcengine.apig.ApigUpstreamUpstreamSpecK8sServiceArgs(
                    namespace="default",
                    name="kubernetes",
                    port=443,
                ),
            ),
            opts=pulumi.ResourceOptions(depends_on=[foo_k8s_apig_upstream_source]))
        ```

        ## Import

        ApigUpstream can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigUpstream:ApigUpstream default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamCircuitBreakingSettingsArgs']] circuit_breaking_settings: The circuit breaking settings of apig upstream.
        :param pulumi.Input[str] comments: The comments of the apig upstream.
        :param pulumi.Input[str] gateway_id: The gateway id of the apig upstream.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamLoadBalancerSettingsArgs']] load_balancer_settings: The load balancer settings of apig upstream.
        :param pulumi.Input[str] name: The name of the apig upstream.
        :param pulumi.Input[str] protocol: The protocol of the apig upstream. Valid values: `HTTP`, `HTTP2`, `GRPC`.
        :param pulumi.Input[str] resource_type: The resource type of the apig upstream. Valid values: `Console`, `Ingress`.
        :param pulumi.Input[str] source_type: The source type of the apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamTlsSettingsArgs']] tls_settings: The tls settings of apig upstream.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamUpstreamSpecArgs']] upstream_spec: The upstream spec of apig upstream.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApigUpstreamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage apig upstream
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        foo_fixed_ip = volcengine.apig.ApigUpstream("foo-fixed-ip",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test",
            resource_type="Console",
            protocol="HTTP",
            load_balancer_settings=volcengine.apig.ApigUpstreamLoadBalancerSettingsArgs(
                lb_policy="ConsistentHashLB",
                consistent_hash_lb=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs(
                    hash_key="HTTPCookie",
                    http_cookie=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs(
                        name="test",
                        path="/",
                        ttl=300,
                    ),
                ),
            ),
            tls_settings=volcengine.apig.ApigUpstreamTlsSettingsArgs(
                tls_mode="SIMPLE",
                sni="test",
            ),
            circuit_breaking_settings=volcengine.apig.ApigUpstreamCircuitBreakingSettingsArgs(
                enable=False,
                consecutive_errors=5,
                interval=10000,
                base_ejection_time=30000,
                max_ejection_percent=20,
                min_health_percent=60,
            ),
            source_type="FixedIP",
            upstream_spec=volcengine.apig.ApigUpstreamUpstreamSpecArgs(
                fixed_ip_lists=[
                    volcengine.apig.ApigUpstreamUpstreamSpecFixedIpListArgs(
                        ip="172.16.0.10",
                        port=8080,
                    ),
                    volcengine.apig.ApigUpstreamUpstreamSpecFixedIpListArgs(
                        ip="172.16.0.20",
                        port=8090,
                    ),
                ],
            ))
        foo_vefaas = volcengine.apig.ApigUpstream("foo-vefaas",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test",
            resource_type="Console",
            protocol="HTTP",
            source_type="VeFaas",
            upstream_spec=volcengine.apig.ApigUpstreamUpstreamSpecArgs(
                ve_faas=volcengine.apig.ApigUpstreamUpstreamSpecVeFaasArgs(
                    function_id="crnrfajj",
                ),
            ))
        foo_k8s_apig_upstream_source = volcengine.apig.ApigUpstreamSource("foo-k8sApigUpstreamSource",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test-k8s",
            source_type="K8S",
            source_spec=volcengine.apig.ApigUpstreamSourceSourceSpecArgs(
                k8s_source=volcengine.apig.ApigUpstreamSourceSourceSpecK8sSourceArgs(
                    cluster_id="cd197sac4mpmnruh7um80",
                ),
            ),
            ingress_settings=[volcengine.apig.ApigUpstreamSourceIngressSettingArgs(
                enable_ingress=True,
                update_status=True,
                ingress_classes=["test"],
                watch_namespaces=["default"],
            )])
        foo_k8s_apig_upstream = volcengine.apig.ApigUpstream("foo-k8sApigUpstream",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test",
            resource_type="Console",
            protocol="HTTP",
            load_balancer_settings=volcengine.apig.ApigUpstreamLoadBalancerSettingsArgs(
                lb_policy="ConsistentHashLB",
                consistent_hash_lb=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs(
                    hash_key="HTTPCookie",
                    http_cookie=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs(
                        name="test",
                        path="/",
                        ttl=300,
                    ),
                ),
            ),
            tls_settings=volcengine.apig.ApigUpstreamTlsSettingsArgs(
                tls_mode="SIMPLE",
                sni="test",
            ),
            circuit_breaking_settings=volcengine.apig.ApigUpstreamCircuitBreakingSettingsArgs(
                enable=False,
                consecutive_errors=5,
                interval=10000,
                base_ejection_time=30000,
                max_ejection_percent=20,
                min_health_percent=60,
            ),
            source_type="K8S",
            upstream_spec=volcengine.apig.ApigUpstreamUpstreamSpecArgs(
                k8s_service=volcengine.apig.ApigUpstreamUpstreamSpecK8sServiceArgs(
                    namespace="default",
                    name="kubernetes",
                    port=443,
                ),
            ),
            opts=pulumi.ResourceOptions(depends_on=[foo_k8s_apig_upstream_source]))
        ```

        ## Import

        ApigUpstream can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigUpstream:ApigUpstream default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ApigUpstreamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApigUpstreamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 circuit_breaking_settings: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamCircuitBreakingSettingsArgs']]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_settings: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamLoadBalancerSettingsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 tls_settings: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamTlsSettingsArgs']]] = None,
                 upstream_spec: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamUpstreamSpecArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApigUpstreamArgs.__new__(ApigUpstreamArgs)

            __props__.__dict__["circuit_breaking_settings"] = circuit_breaking_settings
            __props__.__dict__["comments"] = comments
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["load_balancer_settings"] = load_balancer_settings
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["resource_type"] = resource_type
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["tls_settings"] = tls_settings
            if upstream_spec is None and not opts.urn:
                raise TypeError("Missing required property 'upstream_spec'")
            __props__.__dict__["upstream_spec"] = upstream_spec
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["version_details"] = None
        super(ApigUpstream, __self__).__init__(
            'volcengine:apig/apigUpstream:ApigUpstream',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            circuit_breaking_settings: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamCircuitBreakingSettingsArgs']]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            load_balancer_settings: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamLoadBalancerSettingsArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            source_type: Optional[pulumi.Input[str]] = None,
            tls_settings: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamTlsSettingsArgs']]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            upstream_spec: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamUpstreamSpecArgs']]] = None,
            version_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigUpstreamVersionDetailArgs']]]]] = None) -> 'ApigUpstream':
        """
        Get an existing ApigUpstream resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamCircuitBreakingSettingsArgs']] circuit_breaking_settings: The circuit breaking settings of apig upstream.
        :param pulumi.Input[str] comments: The comments of the apig upstream.
        :param pulumi.Input[str] create_time: The create time of apig upstream.
        :param pulumi.Input[str] gateway_id: The gateway id of the apig upstream.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamLoadBalancerSettingsArgs']] load_balancer_settings: The load balancer settings of apig upstream.
        :param pulumi.Input[str] name: The name of the apig upstream.
        :param pulumi.Input[str] protocol: The protocol of the apig upstream. Valid values: `HTTP`, `HTTP2`, `GRPC`.
        :param pulumi.Input[str] resource_type: The resource type of the apig upstream. Valid values: `Console`, `Ingress`.
        :param pulumi.Input[str] source_type: The source type of the apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamTlsSettingsArgs']] tls_settings: The tls settings of apig upstream.
        :param pulumi.Input[str] update_time: The update time of apig upstream version.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamUpstreamSpecArgs']] upstream_spec: The upstream spec of apig upstream.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigUpstreamVersionDetailArgs']]]] version_details: The version details of apig upstream.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApigUpstreamState.__new__(_ApigUpstreamState)

        __props__.__dict__["circuit_breaking_settings"] = circuit_breaking_settings
        __props__.__dict__["comments"] = comments
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["load_balancer_settings"] = load_balancer_settings
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["tls_settings"] = tls_settings
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["upstream_spec"] = upstream_spec
        __props__.__dict__["version_details"] = version_details
        return ApigUpstream(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="circuitBreakingSettings")
    def circuit_breaking_settings(self) -> pulumi.Output['outputs.ApigUpstreamCircuitBreakingSettings']:
        """
        The circuit breaking settings of apig upstream.
        """
        return pulumi.get(self, "circuit_breaking_settings")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        The comments of the apig upstream.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of apig upstream.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        The gateway id of the apig upstream.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="loadBalancerSettings")
    def load_balancer_settings(self) -> pulumi.Output['outputs.ApigUpstreamLoadBalancerSettings']:
        """
        The load balancer settings of apig upstream.
        """
        return pulumi.get(self, "load_balancer_settings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the apig upstream.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        The protocol of the apig upstream. Valid values: `HTTP`, `HTTP2`, `GRPC`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[Optional[str]]:
        """
        The resource type of the apig upstream. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[str]:
        """
        The source type of the apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> pulumi.Output['outputs.ApigUpstreamTlsSettings']:
        """
        The tls settings of apig upstream.
        """
        return pulumi.get(self, "tls_settings")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="upstreamSpec")
    def upstream_spec(self) -> pulumi.Output['outputs.ApigUpstreamUpstreamSpec']:
        """
        The upstream spec of apig upstream.
        """
        return pulumi.get(self, "upstream_spec")

    @property
    @pulumi.getter(name="versionDetails")
    def version_details(self) -> pulumi.Output[Sequence['outputs.ApigUpstreamVersionDetail']]:
        """
        The version details of apig upstream.
        """
        return pulumi.get(self, "version_details")

