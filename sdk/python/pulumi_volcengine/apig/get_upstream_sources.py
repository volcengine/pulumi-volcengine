# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetUpstreamSourcesResult',
    'AwaitableGetUpstreamSourcesResult',
    'get_upstream_sources',
    'get_upstream_sources_output',
]

@pulumi.output_type
class GetUpstreamSourcesResult:
    """
    A collection of values returned by getUpstreamSources.
    """
    def __init__(__self__, enable_ingress=None, gateway_id=None, id=None, name=None, output_file=None, source_type=None, status=None, total_count=None, upstream_sources=None):
        if enable_ingress and not isinstance(enable_ingress, bool):
            raise TypeError("Expected argument 'enable_ingress' to be a bool")
        pulumi.set(__self__, "enable_ingress", enable_ingress)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if upstream_sources and not isinstance(upstream_sources, list):
            raise TypeError("Expected argument 'upstream_sources' to be a list")
        pulumi.set(__self__, "upstream_sources", upstream_sources)

    @property
    @pulumi.getter(name="enableIngress")
    def enable_ingress(self) -> Optional[bool]:
        """
        Whether to enable ingress.
        """
        return pulumi.get(self, "enable_ingress")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[str]:
        """
        The id of api gateway.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        """
        The source type of apig upstream source.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of apig upstream source.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="upstreamSources")
    def upstream_sources(self) -> Sequence['outputs.GetUpstreamSourcesUpstreamSourceResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "upstream_sources")


class AwaitableGetUpstreamSourcesResult(GetUpstreamSourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUpstreamSourcesResult(
            enable_ingress=self.enable_ingress,
            gateway_id=self.gateway_id,
            id=self.id,
            name=self.name,
            output_file=self.output_file,
            source_type=self.source_type,
            status=self.status,
            total_count=self.total_count,
            upstream_sources=self.upstream_sources)


def get_upstream_sources(enable_ingress: Optional[bool] = None,
                         gateway_id: Optional[str] = None,
                         name: Optional[str] = None,
                         output_file: Optional[str] = None,
                         source_type: Optional[str] = None,
                         status: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUpstreamSourcesResult:
    """
    Use this data source to query detailed information of apig upstream sources
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.apig.get_upstream_sources(gateway_id="gd13d8c6eq1emkiunq6p0")
    ```


    :param bool enable_ingress: The enable ingress of apig upstream source.
    :param str gateway_id: The id of api gateway.
    :param str name: The name of nacos source.
    :param str output_file: File name where to save data source results.
    :param str source_type: The source type of apig upstream source. Valid values: `K8S`, `Nacos`.
    :param str status: The status of apig upstream source. Valid values: `Syncing`, `SyncedSucceed`, `SyncedFailed`.
    """
    __args__ = dict()
    __args__['enableIngress'] = enable_ingress
    __args__['gatewayId'] = gateway_id
    __args__['name'] = name
    __args__['outputFile'] = output_file
    __args__['sourceType'] = source_type
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:apig/getUpstreamSources:getUpstreamSources', __args__, opts=opts, typ=GetUpstreamSourcesResult).value

    return AwaitableGetUpstreamSourcesResult(
        enable_ingress=pulumi.get(__ret__, 'enable_ingress'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        output_file=pulumi.get(__ret__, 'output_file'),
        source_type=pulumi.get(__ret__, 'source_type'),
        status=pulumi.get(__ret__, 'status'),
        total_count=pulumi.get(__ret__, 'total_count'),
        upstream_sources=pulumi.get(__ret__, 'upstream_sources'))


@_utilities.lift_output_func(get_upstream_sources)
def get_upstream_sources_output(enable_ingress: Optional[pulumi.Input[Optional[bool]]] = None,
                                gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                source_type: Optional[pulumi.Input[Optional[str]]] = None,
                                status: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUpstreamSourcesResult]:
    """
    Use this data source to query detailed information of apig upstream sources
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.apig.get_upstream_sources(gateway_id="gd13d8c6eq1emkiunq6p0")
    ```


    :param bool enable_ingress: The enable ingress of apig upstream source.
    :param str gateway_id: The id of api gateway.
    :param str name: The name of nacos source.
    :param str output_file: File name where to save data source results.
    :param str source_type: The source type of apig upstream source. Valid values: `K8S`, `Nacos`.
    :param str status: The status of apig upstream source. Valid values: `Syncing`, `SyncedSucceed`, `SyncedFailed`.
    """
    ...
