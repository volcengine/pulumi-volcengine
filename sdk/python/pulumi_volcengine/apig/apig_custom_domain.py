# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ApigCustomDomainArgs', 'ApigCustomDomain']

@pulumi.input_type
class ApigCustomDomainArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 service_id: pulumi.Input[str],
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 ssl_redirect: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ApigCustomDomain resource.
        :param pulumi.Input[str] domain: The custom domain of the api gateway service.
        :param pulumi.Input[str] service_id: The id of the api gateway service.
        :param pulumi.Input[str] certificate_id: The id of the certificate.
        :param pulumi.Input[str] comments: The comments of the custom domain.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol of the custom domain.
        :param pulumi.Input[str] resource_type: The resource type of domain. Valid values: `Console`, `Ingress`.
        :param pulumi.Input[bool] ssl_redirect: Whether to redirect https.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "service_id", service_id)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if ssl_redirect is not None:
            pulumi.set(__self__, "ssl_redirect", ssl_redirect)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        The custom domain of the api gateway service.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        The id of the api gateway service.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the certificate.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        The comments of the custom domain.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The protocol of the custom domain.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The resource type of domain. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="sslRedirect")
    def ssl_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to redirect https.
        """
        return pulumi.get(self, "ssl_redirect")

    @ssl_redirect.setter
    def ssl_redirect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_redirect", value)


@pulumi.input_type
class _ApigCustomDomainState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 ssl_redirect: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApigCustomDomain resources.
        :param pulumi.Input[str] certificate_id: The id of the certificate.
        :param pulumi.Input[str] comments: The comments of the custom domain.
        :param pulumi.Input[str] create_time: The create time of the custom domain.
        :param pulumi.Input[str] domain: The custom domain of the api gateway service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol of the custom domain.
        :param pulumi.Input[str] resource_type: The resource type of domain. Valid values: `Console`, `Ingress`.
        :param pulumi.Input[str] service_id: The id of the api gateway service.
        :param pulumi.Input[bool] ssl_redirect: Whether to redirect https.
        :param pulumi.Input[str] status: The status of the custom domain.
        :param pulumi.Input[str] type: The type of the domain.
        :param pulumi.Input[str] update_time: The update time of the custom domain.
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if ssl_redirect is not None:
            pulumi.set(__self__, "ssl_redirect", ssl_redirect)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the certificate.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        The comments of the custom domain.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of the custom domain.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The custom domain of the api gateway service.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The protocol of the custom domain.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The resource type of domain. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the api gateway service.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="sslRedirect")
    def ssl_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to redirect https.
        """
        return pulumi.get(self, "ssl_redirect")

    @ssl_redirect.setter
    def ssl_redirect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_redirect", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the custom domain.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of the custom domain.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class ApigCustomDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 ssl_redirect: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to manage apig custom domain
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        foo_apig_custom_domain = volcengine.apig.ApigCustomDomain("fooApigCustomDomain",
            service_id=foo_apig_gateway_service.id,
            domain="test.com",
            protocols=["HTTP"],
            comments="acc-test-new",
            ssl_redirect=False,
            resource_type="Console")
        ```

        ## Import

        ApigCustomDomain can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigCustomDomain:ApigCustomDomain default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: The id of the certificate.
        :param pulumi.Input[str] comments: The comments of the custom domain.
        :param pulumi.Input[str] domain: The custom domain of the api gateway service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol of the custom domain.
        :param pulumi.Input[str] resource_type: The resource type of domain. Valid values: `Console`, `Ingress`.
        :param pulumi.Input[str] service_id: The id of the api gateway service.
        :param pulumi.Input[bool] ssl_redirect: Whether to redirect https.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApigCustomDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage apig custom domain
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        foo_apig_custom_domain = volcengine.apig.ApigCustomDomain("fooApigCustomDomain",
            service_id=foo_apig_gateway_service.id,
            domain="test.com",
            protocols=["HTTP"],
            comments="acc-test-new",
            ssl_redirect=False,
            resource_type="Console")
        ```

        ## Import

        ApigCustomDomain can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigCustomDomain:ApigCustomDomain default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ApigCustomDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApigCustomDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 ssl_redirect: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApigCustomDomainArgs.__new__(ApigCustomDomainArgs)

            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["comments"] = comments
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["resource_type"] = resource_type
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["ssl_redirect"] = ssl_redirect
            __props__.__dict__["create_time"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["update_time"] = None
        super(ApigCustomDomain, __self__).__init__(
            'volcengine:apig/apigCustomDomain:ApigCustomDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            ssl_redirect: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'ApigCustomDomain':
        """
        Get an existing ApigCustomDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: The id of the certificate.
        :param pulumi.Input[str] comments: The comments of the custom domain.
        :param pulumi.Input[str] create_time: The create time of the custom domain.
        :param pulumi.Input[str] domain: The custom domain of the api gateway service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol of the custom domain.
        :param pulumi.Input[str] resource_type: The resource type of domain. Valid values: `Console`, `Ingress`.
        :param pulumi.Input[str] service_id: The id of the api gateway service.
        :param pulumi.Input[bool] ssl_redirect: Whether to redirect https.
        :param pulumi.Input[str] status: The status of the custom domain.
        :param pulumi.Input[str] type: The type of the domain.
        :param pulumi.Input[str] update_time: The update time of the custom domain.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApigCustomDomainState.__new__(_ApigCustomDomainState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["comments"] = comments
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["domain"] = domain
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["ssl_redirect"] = ssl_redirect
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["update_time"] = update_time
        return ApigCustomDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        The id of the certificate.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        The comments of the custom domain.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of the custom domain.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        The custom domain of the api gateway service.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The protocol of the custom domain.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[Optional[str]]:
        """
        The resource type of domain. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        The id of the api gateway service.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="sslRedirect")
    def ssl_redirect(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to redirect https.
        """
        return pulumi.get(self, "ssl_redirect")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the custom domain.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The update time of the custom domain.
        """
        return pulumi.get(self, "update_time")

