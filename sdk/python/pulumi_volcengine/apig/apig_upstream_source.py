# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApigUpstreamSourceArgs', 'ApigUpstreamSource']

@pulumi.input_type
class ApigUpstreamSourceArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[str],
                 source_spec: pulumi.Input['ApigUpstreamSourceSourceSpecArgs'],
                 source_type: pulumi.Input[str],
                 comments: Optional[pulumi.Input[str]] = None,
                 ingress_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamSourceIngressSettingArgs']]]] = None):
        """
        The set of arguments for constructing a ApigUpstreamSource resource.
        :param pulumi.Input[str] gateway_id: The gateway id of the apig upstream source.
        :param pulumi.Input['ApigUpstreamSourceSourceSpecArgs'] source_spec: The source spec of apig upstream source.
        :param pulumi.Input[str] source_type: The source type of the apig upstream. Valid values: `K8S`, `Nacos`.
        :param pulumi.Input[str] comments: The comments of the apig upstream source.
        :param pulumi.Input[Sequence[pulumi.Input['ApigUpstreamSourceIngressSettingArgs']]] ingress_settings: The ingress settings of apig upstream source.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "source_spec", source_spec)
        pulumi.set(__self__, "source_type", source_type)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if ingress_settings is not None:
            pulumi.set(__self__, "ingress_settings", ingress_settings)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        The gateway id of the apig upstream source.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="sourceSpec")
    def source_spec(self) -> pulumi.Input['ApigUpstreamSourceSourceSpecArgs']:
        """
        The source spec of apig upstream source.
        """
        return pulumi.get(self, "source_spec")

    @source_spec.setter
    def source_spec(self, value: pulumi.Input['ApigUpstreamSourceSourceSpecArgs']):
        pulumi.set(self, "source_spec", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        The source type of the apig upstream. Valid values: `K8S`, `Nacos`.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        The comments of the apig upstream source.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="ingressSettings")
    def ingress_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamSourceIngressSettingArgs']]]]:
        """
        The ingress settings of apig upstream source.
        """
        return pulumi.get(self, "ingress_settings")

    @ingress_settings.setter
    def ingress_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamSourceIngressSettingArgs']]]]):
        pulumi.set(self, "ingress_settings", value)


@pulumi.input_type
class _ApigUpstreamSourceState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 ingress_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamSourceIngressSettingArgs']]]] = None,
                 source_spec: Optional[pulumi.Input['ApigUpstreamSourceSourceSpecArgs']] = None,
                 source_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApigUpstreamSource resources.
        :param pulumi.Input[str] comments: The comments of the apig upstream source.
        :param pulumi.Input[str] gateway_id: The gateway id of the apig upstream source.
        :param pulumi.Input[Sequence[pulumi.Input['ApigUpstreamSourceIngressSettingArgs']]] ingress_settings: The ingress settings of apig upstream source.
        :param pulumi.Input['ApigUpstreamSourceSourceSpecArgs'] source_spec: The source spec of apig upstream source.
        :param pulumi.Input[str] source_type: The source type of the apig upstream. Valid values: `K8S`, `Nacos`.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if ingress_settings is not None:
            pulumi.set(__self__, "ingress_settings", ingress_settings)
        if source_spec is not None:
            pulumi.set(__self__, "source_spec", source_spec)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        The comments of the apig upstream source.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        The gateway id of the apig upstream source.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="ingressSettings")
    def ingress_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamSourceIngressSettingArgs']]]]:
        """
        The ingress settings of apig upstream source.
        """
        return pulumi.get(self, "ingress_settings")

    @ingress_settings.setter
    def ingress_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamSourceIngressSettingArgs']]]]):
        pulumi.set(self, "ingress_settings", value)

    @property
    @pulumi.getter(name="sourceSpec")
    def source_spec(self) -> Optional[pulumi.Input['ApigUpstreamSourceSourceSpecArgs']]:
        """
        The source spec of apig upstream source.
        """
        return pulumi.get(self, "source_spec")

    @source_spec.setter
    def source_spec(self, value: Optional[pulumi.Input['ApigUpstreamSourceSourceSpecArgs']]):
        pulumi.set(self, "source_spec", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        The source type of the apig upstream. Valid values: `K8S`, `Nacos`.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)


class ApigUpstreamSource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 ingress_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigUpstreamSourceIngressSettingArgs']]]]] = None,
                 source_spec: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamSourceSourceSpecArgs']]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage apig upstream source
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        foo_nacos = volcengine.apig.ApigUpstreamSource("foo-nacos",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test-nacos",
            source_type="Nacos",
            source_spec=volcengine.apig.ApigUpstreamSourceSourceSpecArgs(
                nacos_source=volcengine.apig.ApigUpstreamSourceSourceSpecNacosSourceArgs(
                    nacos_id="nd197ls631meck48imm7g",
                    auth_config=volcengine.apig.ApigUpstreamSourceSourceSpecNacosSourceAuthConfigArgs(
                        basic=volcengine.apig.ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs(
                            username="nacos",
                            password="******",
                        ),
                    ),
                ),
            ))
        foo_k8s = volcengine.apig.ApigUpstreamSource("foo-k8s",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test-k8s",
            source_type="K8S",
            source_spec=volcengine.apig.ApigUpstreamSourceSourceSpecArgs(
                k8s_source=volcengine.apig.ApigUpstreamSourceSourceSpecK8sSourceArgs(
                    cluster_id="cd197sac4mpmnruh7um80",
                ),
            ),
            ingress_settings=[volcengine.apig.ApigUpstreamSourceIngressSettingArgs(
                enable_ingress=True,
                update_status=True,
                ingress_classes=["test"],
                watch_namespaces=["default"],
            )])
        ```

        ## Import

        ApigUpstreamSource can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigUpstreamSource:ApigUpstreamSource default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: The comments of the apig upstream source.
        :param pulumi.Input[str] gateway_id: The gateway id of the apig upstream source.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigUpstreamSourceIngressSettingArgs']]]] ingress_settings: The ingress settings of apig upstream source.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamSourceSourceSpecArgs']] source_spec: The source spec of apig upstream source.
        :param pulumi.Input[str] source_type: The source type of the apig upstream. Valid values: `K8S`, `Nacos`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApigUpstreamSourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage apig upstream source
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        foo_nacos = volcengine.apig.ApigUpstreamSource("foo-nacos",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test-nacos",
            source_type="Nacos",
            source_spec=volcengine.apig.ApigUpstreamSourceSourceSpecArgs(
                nacos_source=volcengine.apig.ApigUpstreamSourceSourceSpecNacosSourceArgs(
                    nacos_id="nd197ls631meck48imm7g",
                    auth_config=volcengine.apig.ApigUpstreamSourceSourceSpecNacosSourceAuthConfigArgs(
                        basic=volcengine.apig.ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs(
                            username="nacos",
                            password="******",
                        ),
                    ),
                ),
            ))
        foo_k8s = volcengine.apig.ApigUpstreamSource("foo-k8s",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test-k8s",
            source_type="K8S",
            source_spec=volcengine.apig.ApigUpstreamSourceSourceSpecArgs(
                k8s_source=volcengine.apig.ApigUpstreamSourceSourceSpecK8sSourceArgs(
                    cluster_id="cd197sac4mpmnruh7um80",
                ),
            ),
            ingress_settings=[volcengine.apig.ApigUpstreamSourceIngressSettingArgs(
                enable_ingress=True,
                update_status=True,
                ingress_classes=["test"],
                watch_namespaces=["default"],
            )])
        ```

        ## Import

        ApigUpstreamSource can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigUpstreamSource:ApigUpstreamSource default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ApigUpstreamSourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApigUpstreamSourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 ingress_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigUpstreamSourceIngressSettingArgs']]]]] = None,
                 source_spec: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamSourceSourceSpecArgs']]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApigUpstreamSourceArgs.__new__(ApigUpstreamSourceArgs)

            __props__.__dict__["comments"] = comments
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["ingress_settings"] = ingress_settings
            if source_spec is None and not opts.urn:
                raise TypeError("Missing required property 'source_spec'")
            __props__.__dict__["source_spec"] = source_spec
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
        super(ApigUpstreamSource, __self__).__init__(
            'volcengine:apig/apigUpstreamSource:ApigUpstreamSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[str]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            ingress_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigUpstreamSourceIngressSettingArgs']]]]] = None,
            source_spec: Optional[pulumi.Input[pulumi.InputType['ApigUpstreamSourceSourceSpecArgs']]] = None,
            source_type: Optional[pulumi.Input[str]] = None) -> 'ApigUpstreamSource':
        """
        Get an existing ApigUpstreamSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: The comments of the apig upstream source.
        :param pulumi.Input[str] gateway_id: The gateway id of the apig upstream source.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigUpstreamSourceIngressSettingArgs']]]] ingress_settings: The ingress settings of apig upstream source.
        :param pulumi.Input[pulumi.InputType['ApigUpstreamSourceSourceSpecArgs']] source_spec: The source spec of apig upstream source.
        :param pulumi.Input[str] source_type: The source type of the apig upstream. Valid values: `K8S`, `Nacos`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApigUpstreamSourceState.__new__(_ApigUpstreamSourceState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["ingress_settings"] = ingress_settings
        __props__.__dict__["source_spec"] = source_spec
        __props__.__dict__["source_type"] = source_type
        return ApigUpstreamSource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        The comments of the apig upstream source.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        The gateway id of the apig upstream source.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="ingressSettings")
    def ingress_settings(self) -> pulumi.Output[Sequence['outputs.ApigUpstreamSourceIngressSetting']]:
        """
        The ingress settings of apig upstream source.
        """
        return pulumi.get(self, "ingress_settings")

    @property
    @pulumi.getter(name="sourceSpec")
    def source_spec(self) -> pulumi.Output['outputs.ApigUpstreamSourceSourceSpec']:
        """
        The source spec of apig upstream source.
        """
        return pulumi.get(self, "source_spec")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[str]:
        """
        The source type of the apig upstream. Valid values: `K8S`, `Nacos`.
        """
        return pulumi.get(self, "source_type")

