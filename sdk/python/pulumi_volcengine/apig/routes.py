# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RoutesResult',
    'AwaitableRoutesResult',
    'routes',
    'routes_output',
]

warnings.warn("""volcengine.apig.Routes has been deprecated in favor of volcengine.apig.getRoutes""", DeprecationWarning)

@pulumi.output_type
class RoutesResult:
    """
    A collection of values returned by Routes.
    """
    def __init__(__self__, gateway_id=None, id=None, name=None, name_regex=None, output_file=None, path=None, resource_type=None, routes=None, service_id=None, total_count=None, upstream_id=None, upstream_version=None):
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        pulumi.set(__self__, "routes", routes)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if upstream_id and not isinstance(upstream_id, str):
            raise TypeError("Expected argument 'upstream_id' to be a str")
        pulumi.set(__self__, "upstream_id", upstream_id)
        if upstream_version and not isinstance(upstream_version, str):
            raise TypeError("Expected argument 'upstream_version' to be a str")
        pulumi.set(__self__, "upstream_version", upstream_version)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the api gateway route.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The resource type of route. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.RoutesRouteResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[str]:
        """
        The id of the api gateway service.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> Optional[str]:
        """
        The id of the api gateway upstream.
        """
        return pulumi.get(self, "upstream_id")

    @property
    @pulumi.getter(name="upstreamVersion")
    def upstream_version(self) -> Optional[str]:
        return pulumi.get(self, "upstream_version")


class AwaitableRoutesResult(RoutesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return RoutesResult(
            gateway_id=self.gateway_id,
            id=self.id,
            name=self.name,
            name_regex=self.name_regex,
            output_file=self.output_file,
            path=self.path,
            resource_type=self.resource_type,
            routes=self.routes,
            service_id=self.service_id,
            total_count=self.total_count,
            upstream_id=self.upstream_id,
            upstream_version=self.upstream_version)


def routes(gateway_id: Optional[str] = None,
           name: Optional[str] = None,
           name_regex: Optional[str] = None,
           output_file: Optional[str] = None,
           path: Optional[str] = None,
           resource_type: Optional[str] = None,
           service_id: Optional[str] = None,
           upstream_id: Optional[str] = None,
           upstream_version: Optional[str] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableRoutesResult:
    """
    Use this data source to query detailed information of apig routes
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.apig.get_routes(gateway_id="gd1ek1ki9optek6ooabh0")
    ```


    :param str gateway_id: The id of api gateway.
    :param str name: The name of api gateway route. This field support fuzzy query.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str path: The path of api gateway route.
    :param str resource_type: The resource type of route. Valid values: `Console`, `Ingress`.
    :param str service_id: The id of api gateway service.
    :param str upstream_id: The id of api gateway upstream.
    :param str upstream_version: The version of api gateway upstream.
    """
    pulumi.log.warn("""routes is deprecated: volcengine.apig.Routes has been deprecated in favor of volcengine.apig.getRoutes""")
    __args__ = dict()
    __args__['gatewayId'] = gateway_id
    __args__['name'] = name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['path'] = path
    __args__['resourceType'] = resource_type
    __args__['serviceId'] = service_id
    __args__['upstreamId'] = upstream_id
    __args__['upstreamVersion'] = upstream_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:apig/routes:Routes', __args__, opts=opts, typ=RoutesResult).value

    return AwaitableRoutesResult(
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        path=pulumi.get(__ret__, 'path'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        routes=pulumi.get(__ret__, 'routes'),
        service_id=pulumi.get(__ret__, 'service_id'),
        total_count=pulumi.get(__ret__, 'total_count'),
        upstream_id=pulumi.get(__ret__, 'upstream_id'),
        upstream_version=pulumi.get(__ret__, 'upstream_version'))


@_utilities.lift_output_func(routes)
def routes_output(gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                  name: Optional[pulumi.Input[Optional[str]]] = None,
                  name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                  output_file: Optional[pulumi.Input[Optional[str]]] = None,
                  path: Optional[pulumi.Input[Optional[str]]] = None,
                  resource_type: Optional[pulumi.Input[Optional[str]]] = None,
                  service_id: Optional[pulumi.Input[Optional[str]]] = None,
                  upstream_id: Optional[pulumi.Input[Optional[str]]] = None,
                  upstream_version: Optional[pulumi.Input[Optional[str]]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[RoutesResult]:
    """
    Use this data source to query detailed information of apig routes
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.apig.get_routes(gateway_id="gd1ek1ki9optek6ooabh0")
    ```


    :param str gateway_id: The id of api gateway.
    :param str name: The name of api gateway route. This field support fuzzy query.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str path: The path of api gateway route.
    :param str resource_type: The resource type of route. Valid values: `Console`, `Ingress`.
    :param str service_id: The id of api gateway service.
    :param str upstream_id: The id of api gateway upstream.
    :param str upstream_version: The version of api gateway upstream.
    """
    pulumi.log.warn("""routes is deprecated: volcengine.apig.Routes has been deprecated in favor of volcengine.apig.getRoutes""")
    ...
