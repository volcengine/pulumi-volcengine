# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApigGatewayBackendSpec',
    'ApigGatewayLogSpec',
    'ApigGatewayMonitorSpec',
    'ApigGatewayNetworkSpec',
    'ApigGatewayResourceSpec',
    'ApigGatewayResourceSpecNetworkType',
    'ApigGatewayServiceAuthSpec',
    'ApigGatewayTag',
    'ApigRouteAdvancedSetting',
    'ApigRouteAdvancedSettingCorsPolicySetting',
    'ApigRouteAdvancedSettingHeaderOperation',
    'ApigRouteAdvancedSettingMirrorPolicy',
    'ApigRouteAdvancedSettingMirrorPolicyPercent',
    'ApigRouteAdvancedSettingMirrorPolicyUpstream',
    'ApigRouteAdvancedSettingRetryPolicySetting',
    'ApigRouteAdvancedSettingTimeoutSetting',
    'ApigRouteAdvancedSettingUrlRewriteSetting',
    'ApigRouteCustomDomain',
    'ApigRouteDomain',
    'ApigRouteMatchRule',
    'ApigRouteMatchRuleHeader',
    'ApigRouteMatchRuleHeaderValue',
    'ApigRouteMatchRulePath',
    'ApigRouteMatchRuleQueryString',
    'ApigRouteMatchRuleQueryStringValue',
    'ApigRouteUpstreamList',
    'ApigRouteUpstreamListAiProviderSettings',
    'ApigUpstreamCircuitBreakingSettings',
    'ApigUpstreamLoadBalancerSettings',
    'ApigUpstreamLoadBalancerSettingsConsistentHashLb',
    'ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookie',
    'ApigUpstreamSourceIngressSetting',
    'ApigUpstreamSourceSourceSpec',
    'ApigUpstreamSourceSourceSpecK8sSource',
    'ApigUpstreamSourceSourceSpecNacosSource',
    'ApigUpstreamSourceSourceSpecNacosSourceAuthConfig',
    'ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasic',
    'ApigUpstreamTlsSettings',
    'ApigUpstreamUpstreamSpec',
    'ApigUpstreamUpstreamSpecAiProvider',
    'ApigUpstreamUpstreamSpecAiProviderCustomModelService',
    'ApigUpstreamUpstreamSpecDomain',
    'ApigUpstreamUpstreamSpecDomainDomainList',
    'ApigUpstreamUpstreamSpecEcsList',
    'ApigUpstreamUpstreamSpecFixedIpList',
    'ApigUpstreamUpstreamSpecK8sService',
    'ApigUpstreamUpstreamSpecNacosService',
    'ApigUpstreamUpstreamSpecVeFaas',
    'ApigUpstreamUpstreamSpecVeMlp',
    'ApigUpstreamUpstreamSpecVeMlpK8sService',
    'ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfo',
    'ApigUpstreamVersionDetail',
    'ApigUpstreamVersionDetailLabel',
    'ApigUpstreamVersionUpstreamVersion',
    'ApigUpstreamVersionUpstreamVersionLabel',
    'CustomDomainsCustomDomainResult',
    'GatewayServicesGatewayServiceResult',
    'GatewayServicesGatewayServiceAuthSpecResult',
    'GatewayServicesGatewayServiceCustomDomainResult',
    'GatewayServicesGatewayServiceDomainResult',
    'GatewaysGatewayResult',
    'GatewaysGatewayBackendSpecResult',
    'GatewaysGatewayLogSpecResult',
    'GatewaysGatewayMonitorSpecResult',
    'GatewaysGatewayNetworkSpecResult',
    'GatewaysGatewayResourceSpecResult',
    'GatewaysGatewayResourceSpecNetworkTypeResult',
    'GatewaysGatewayTagResult',
    'GatewaysTagResult',
    'RoutesRouteResult',
    'RoutesRouteAdvancedSettingResult',
    'RoutesRouteAdvancedSettingCorsPolicySettingResult',
    'RoutesRouteAdvancedSettingHeaderOperationResult',
    'RoutesRouteAdvancedSettingMirrorPolicyResult',
    'RoutesRouteAdvancedSettingMirrorPolicyPercentResult',
    'RoutesRouteAdvancedSettingMirrorPolicyUpstreamResult',
    'RoutesRouteAdvancedSettingRetryPolicySettingResult',
    'RoutesRouteAdvancedSettingTimeoutSettingResult',
    'RoutesRouteAdvancedSettingUrlRewriteSettingResult',
    'RoutesRouteCustomDomainResult',
    'RoutesRouteDomainResult',
    'RoutesRouteMatchRuleResult',
    'RoutesRouteMatchRuleHeaderResult',
    'RoutesRouteMatchRuleHeaderValueResult',
    'RoutesRouteMatchRulePathResult',
    'RoutesRouteMatchRuleQueryStringResult',
    'RoutesRouteMatchRuleQueryStringValueResult',
    'RoutesRouteUpstreamListResult',
    'RoutesRouteUpstreamListAiProviderSettingResult',
    'UpstreamSourcesUpstreamSourceResult',
    'UpstreamSourcesUpstreamSourceIngressSettingResult',
    'UpstreamSourcesUpstreamSourceSourceSpecResult',
    'UpstreamSourcesUpstreamSourceSourceSpecK8sSourceResult',
    'UpstreamSourcesUpstreamSourceSourceSpecNacosSourceResult',
    'UpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigResult',
    'UpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult',
    'UpstreamVersionsVersionResult',
    'UpstreamVersionsVersionLabelResult',
    'UpstreamsUpstreamResult',
    'UpstreamsUpstreamBackendTargetListResult',
    'UpstreamsUpstreamCircuitBreakingSettingResult',
    'UpstreamsUpstreamLoadBalancerSettingResult',
    'UpstreamsUpstreamLoadBalancerSettingConsistentHashLbResult',
    'UpstreamsUpstreamLoadBalancerSettingConsistentHashLbHttpCookyResult',
    'UpstreamsUpstreamTlsSettingResult',
    'UpstreamsUpstreamUpstreamSpecResult',
    'UpstreamsUpstreamUpstreamSpecAiProviderResult',
    'UpstreamsUpstreamUpstreamSpecAiProviderCustomModelServiceResult',
    'UpstreamsUpstreamUpstreamSpecDomainResult',
    'UpstreamsUpstreamUpstreamSpecDomainDomainListResult',
    'UpstreamsUpstreamUpstreamSpecEcsListResult',
    'UpstreamsUpstreamUpstreamSpecFixedIpListResult',
    'UpstreamsUpstreamUpstreamSpecK8sServiceResult',
    'UpstreamsUpstreamUpstreamSpecNacosServiceResult',
    'UpstreamsUpstreamUpstreamSpecVeFaaResult',
    'UpstreamsUpstreamUpstreamSpecVeMlpResult',
    'UpstreamsUpstreamUpstreamSpecVeMlpK8sServiceResult',
    'UpstreamsUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoResult',
    'UpstreamsUpstreamVersionDetailResult',
    'UpstreamsUpstreamVersionDetailLabelResult',
    'GetCustomDomainsCustomDomainResult',
    'GetGatewayServicesGatewayServiceResult',
    'GetGatewayServicesGatewayServiceAuthSpecResult',
    'GetGatewayServicesGatewayServiceCustomDomainResult',
    'GetGatewayServicesGatewayServiceDomainResult',
    'GetGatewaysGatewayResult',
    'GetGatewaysGatewayBackendSpecResult',
    'GetGatewaysGatewayLogSpecResult',
    'GetGatewaysGatewayMonitorSpecResult',
    'GetGatewaysGatewayNetworkSpecResult',
    'GetGatewaysGatewayResourceSpecResult',
    'GetGatewaysGatewayResourceSpecNetworkTypeResult',
    'GetGatewaysGatewayTagResult',
    'GetGatewaysTagResult',
    'GetRoutesRouteResult',
    'GetRoutesRouteAdvancedSettingResult',
    'GetRoutesRouteAdvancedSettingCorsPolicySettingResult',
    'GetRoutesRouteAdvancedSettingHeaderOperationResult',
    'GetRoutesRouteAdvancedSettingMirrorPolicyResult',
    'GetRoutesRouteAdvancedSettingMirrorPolicyPercentResult',
    'GetRoutesRouteAdvancedSettingMirrorPolicyUpstreamResult',
    'GetRoutesRouteAdvancedSettingRetryPolicySettingResult',
    'GetRoutesRouteAdvancedSettingTimeoutSettingResult',
    'GetRoutesRouteAdvancedSettingUrlRewriteSettingResult',
    'GetRoutesRouteCustomDomainResult',
    'GetRoutesRouteDomainResult',
    'GetRoutesRouteMatchRuleResult',
    'GetRoutesRouteMatchRuleHeaderResult',
    'GetRoutesRouteMatchRuleHeaderValueResult',
    'GetRoutesRouteMatchRulePathResult',
    'GetRoutesRouteMatchRuleQueryStringResult',
    'GetRoutesRouteMatchRuleQueryStringValueResult',
    'GetRoutesRouteUpstreamListResult',
    'GetRoutesRouteUpstreamListAiProviderSettingResult',
    'GetUpstreamSourcesUpstreamSourceResult',
    'GetUpstreamSourcesUpstreamSourceIngressSettingResult',
    'GetUpstreamSourcesUpstreamSourceSourceSpecResult',
    'GetUpstreamSourcesUpstreamSourceSourceSpecK8sSourceResult',
    'GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceResult',
    'GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigResult',
    'GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult',
    'GetUpstreamVersionsVersionResult',
    'GetUpstreamVersionsVersionLabelResult',
    'GetUpstreamsUpstreamResult',
    'GetUpstreamsUpstreamBackendTargetListResult',
    'GetUpstreamsUpstreamCircuitBreakingSettingResult',
    'GetUpstreamsUpstreamLoadBalancerSettingResult',
    'GetUpstreamsUpstreamLoadBalancerSettingConsistentHashLbResult',
    'GetUpstreamsUpstreamLoadBalancerSettingConsistentHashLbHttpCookyResult',
    'GetUpstreamsUpstreamTlsSettingResult',
    'GetUpstreamsUpstreamUpstreamSpecResult',
    'GetUpstreamsUpstreamUpstreamSpecAiProviderResult',
    'GetUpstreamsUpstreamUpstreamSpecAiProviderCustomModelServiceResult',
    'GetUpstreamsUpstreamUpstreamSpecDomainResult',
    'GetUpstreamsUpstreamUpstreamSpecDomainDomainListResult',
    'GetUpstreamsUpstreamUpstreamSpecEcsListResult',
    'GetUpstreamsUpstreamUpstreamSpecFixedIpListResult',
    'GetUpstreamsUpstreamUpstreamSpecK8sServiceResult',
    'GetUpstreamsUpstreamUpstreamSpecNacosServiceResult',
    'GetUpstreamsUpstreamUpstreamSpecVeFaaResult',
    'GetUpstreamsUpstreamUpstreamSpecVeMlpResult',
    'GetUpstreamsUpstreamUpstreamSpecVeMlpK8sServiceResult',
    'GetUpstreamsUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoResult',
    'GetUpstreamsUpstreamVersionDetailResult',
    'GetUpstreamsUpstreamVersionDetailLabelResult',
]

@pulumi.output_type
class ApigGatewayBackendSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isVkeWithFlannelCniSupported":
            suggest = "is_vke_with_flannel_cni_supported"
        elif key == "vkePodCidr":
            suggest = "vke_pod_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigGatewayBackendSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigGatewayBackendSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigGatewayBackendSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_vke_with_flannel_cni_supported: bool,
                 vke_pod_cidr: str):
        """
        :param bool is_vke_with_flannel_cni_supported: Whether the api gateway support vke flannel cni.
        :param str vke_pod_cidr: The vke pod cidr of the api gateway.
        """
        pulumi.set(__self__, "is_vke_with_flannel_cni_supported", is_vke_with_flannel_cni_supported)
        pulumi.set(__self__, "vke_pod_cidr", vke_pod_cidr)

    @property
    @pulumi.getter(name="isVkeWithFlannelCniSupported")
    def is_vke_with_flannel_cni_supported(self) -> bool:
        """
        Whether the api gateway support vke flannel cni.
        """
        return pulumi.get(self, "is_vke_with_flannel_cni_supported")

    @property
    @pulumi.getter(name="vkePodCidr")
    def vke_pod_cidr(self) -> str:
        """
        The vke pod cidr of the api gateway.
        """
        return pulumi.get(self, "vke_pod_cidr")


@pulumi.output_type
class ApigGatewayLogSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"
        elif key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigGatewayLogSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigGatewayLogSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigGatewayLogSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: bool,
                 project_id: Optional[str] = None,
                 topic_id: Optional[str] = None):
        """
        :param bool enable: Whether the api gateway enable tls log.
        :param str project_id: The project id of the tls. This field is required when `enable` is true.
        :param str topic_id: The topic id of the tls.
        """
        pulumi.set(__self__, "enable", enable)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway enable tls log.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        The project id of the tls. This field is required when `enable` is true.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[str]:
        """
        The topic id of the tls.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class ApigGatewayMonitorSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigGatewayMonitorSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigGatewayMonitorSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigGatewayMonitorSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: bool,
                 workspace_id: Optional[str] = None):
        """
        :param bool enable: Whether the api gateway enable monitor.
        :param str workspace_id: The workspace id of the monitor. This field is required when `enable` is true.
        """
        pulumi.set(__self__, "enable", enable)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway enable monitor.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[str]:
        """
        The workspace id of the monitor. This field is required when `enable` is true.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class ApigGatewayNetworkSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigGatewayNetworkSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigGatewayNetworkSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigGatewayNetworkSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param Sequence[str] subnet_ids: The subnet ids of the network spec.
        :param str vpc_id: The vpc id of the network spec.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The subnet ids of the network spec.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The vpc id of the network spec.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ApigGatewayResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceSpecCode":
            suggest = "instance_spec_code"
        elif key == "clbSpecCode":
            suggest = "clb_spec_code"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "publicNetworkBandwidth":
            suggest = "public_network_bandwidth"
        elif key == "publicNetworkBillingType":
            suggest = "public_network_billing_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigGatewayResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigGatewayResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigGatewayResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_spec_code: str,
                 replicas: int,
                 clb_spec_code: Optional[str] = None,
                 network_type: Optional['outputs.ApigGatewayResourceSpecNetworkType'] = None,
                 public_network_bandwidth: Optional[int] = None,
                 public_network_billing_type: Optional[str] = None):
        """
        :param str instance_spec_code: The instance spec code of the resource spec. Valid values: `1c2g`, `2c4g`, `4c8g`, `8c16g`.
        :param int replicas: The replicas of the resource spec.
        :param str clb_spec_code: The clb spec code of the resource spec. Valid values: `small_1`, `small_2`, `medium_1`, `medium_2`, `large_1`, `large_2`.
        :param 'ApigGatewayResourceSpecNetworkTypeArgs' network_type: The network type of the resource spec. The default values for both `enable_public_network` and `enable_private_network` are true.
        :param int public_network_bandwidth: The public network bandwidth of the resource spec.
        :param str public_network_billing_type: The public network billing type of the resource spec. Valid values: `traffic`, `bandwidth`.
        """
        pulumi.set(__self__, "instance_spec_code", instance_spec_code)
        pulumi.set(__self__, "replicas", replicas)
        if clb_spec_code is not None:
            pulumi.set(__self__, "clb_spec_code", clb_spec_code)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if public_network_bandwidth is not None:
            pulumi.set(__self__, "public_network_bandwidth", public_network_bandwidth)
        if public_network_billing_type is not None:
            pulumi.set(__self__, "public_network_billing_type", public_network_billing_type)

    @property
    @pulumi.getter(name="instanceSpecCode")
    def instance_spec_code(self) -> str:
        """
        The instance spec code of the resource spec. Valid values: `1c2g`, `2c4g`, `4c8g`, `8c16g`.
        """
        return pulumi.get(self, "instance_spec_code")

    @property
    @pulumi.getter
    def replicas(self) -> int:
        """
        The replicas of the resource spec.
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="clbSpecCode")
    def clb_spec_code(self) -> Optional[str]:
        """
        The clb spec code of the resource spec. Valid values: `small_1`, `small_2`, `medium_1`, `medium_2`, `large_1`, `large_2`.
        """
        return pulumi.get(self, "clb_spec_code")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional['outputs.ApigGatewayResourceSpecNetworkType']:
        """
        The network type of the resource spec. The default values for both `enable_public_network` and `enable_private_network` are true.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="publicNetworkBandwidth")
    def public_network_bandwidth(self) -> Optional[int]:
        """
        The public network bandwidth of the resource spec.
        """
        return pulumi.get(self, "public_network_bandwidth")

    @property
    @pulumi.getter(name="publicNetworkBillingType")
    def public_network_billing_type(self) -> Optional[str]:
        """
        The public network billing type of the resource spec. Valid values: `traffic`, `bandwidth`.
        """
        return pulumi.get(self, "public_network_billing_type")


@pulumi.output_type
class ApigGatewayResourceSpecNetworkType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enablePrivateNetwork":
            suggest = "enable_private_network"
        elif key == "enablePublicNetwork":
            suggest = "enable_public_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigGatewayResourceSpecNetworkType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigGatewayResourceSpecNetworkType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigGatewayResourceSpecNetworkType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_private_network: bool,
                 enable_public_network: bool):
        """
        :param bool enable_private_network: Whether the api gateway enable private network.
        :param bool enable_public_network: Whether the api gateway enable public network.
        """
        pulumi.set(__self__, "enable_private_network", enable_private_network)
        pulumi.set(__self__, "enable_public_network", enable_public_network)

    @property
    @pulumi.getter(name="enablePrivateNetwork")
    def enable_private_network(self) -> bool:
        """
        Whether the api gateway enable private network.
        """
        return pulumi.get(self, "enable_private_network")

    @property
    @pulumi.getter(name="enablePublicNetwork")
    def enable_public_network(self) -> bool:
        """
        Whether the api gateway enable public network.
        """
        return pulumi.get(self, "enable_public_network")


@pulumi.output_type
class ApigGatewayServiceAuthSpec(dict):
    def __init__(__self__, *,
                 enable: bool):
        """
        :param bool enable: Whether the api gateway service enable auth.
        """
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway service enable auth.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class ApigGatewayTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApigRouteAdvancedSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "corsPolicySetting":
            suggest = "cors_policy_setting"
        elif key == "headerOperations":
            suggest = "header_operations"
        elif key == "mirrorPolicies":
            suggest = "mirror_policies"
        elif key == "retryPolicySetting":
            suggest = "retry_policy_setting"
        elif key == "timeoutSetting":
            suggest = "timeout_setting"
        elif key == "urlRewriteSetting":
            suggest = "url_rewrite_setting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteAdvancedSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteAdvancedSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteAdvancedSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cors_policy_setting: Optional['outputs.ApigRouteAdvancedSettingCorsPolicySetting'] = None,
                 header_operations: Optional[Sequence['outputs.ApigRouteAdvancedSettingHeaderOperation']] = None,
                 mirror_policies: Optional[Sequence['outputs.ApigRouteAdvancedSettingMirrorPolicy']] = None,
                 retry_policy_setting: Optional['outputs.ApigRouteAdvancedSettingRetryPolicySetting'] = None,
                 timeout_setting: Optional['outputs.ApigRouteAdvancedSettingTimeoutSetting'] = None,
                 url_rewrite_setting: Optional['outputs.ApigRouteAdvancedSettingUrlRewriteSetting'] = None):
        """
        :param 'ApigRouteAdvancedSettingCorsPolicySettingArgs' cors_policy_setting: The cors policy setting of the api gateway route.
        :param Sequence['ApigRouteAdvancedSettingHeaderOperationArgs'] header_operations: The header operations of the api gateway route.
        :param Sequence['ApigRouteAdvancedSettingMirrorPolicyArgs'] mirror_policies: The mirror policies of the api gateway route.
        :param 'ApigRouteAdvancedSettingRetryPolicySettingArgs' retry_policy_setting: The retry policy setting of the api gateway route.
        :param 'ApigRouteAdvancedSettingTimeoutSettingArgs' timeout_setting: The timeout setting of the api gateway route.
        :param 'ApigRouteAdvancedSettingUrlRewriteSettingArgs' url_rewrite_setting: The url rewrite setting of the api gateway route.
        """
        if cors_policy_setting is not None:
            pulumi.set(__self__, "cors_policy_setting", cors_policy_setting)
        if header_operations is not None:
            pulumi.set(__self__, "header_operations", header_operations)
        if mirror_policies is not None:
            pulumi.set(__self__, "mirror_policies", mirror_policies)
        if retry_policy_setting is not None:
            pulumi.set(__self__, "retry_policy_setting", retry_policy_setting)
        if timeout_setting is not None:
            pulumi.set(__self__, "timeout_setting", timeout_setting)
        if url_rewrite_setting is not None:
            pulumi.set(__self__, "url_rewrite_setting", url_rewrite_setting)

    @property
    @pulumi.getter(name="corsPolicySetting")
    def cors_policy_setting(self) -> Optional['outputs.ApigRouteAdvancedSettingCorsPolicySetting']:
        """
        The cors policy setting of the api gateway route.
        """
        return pulumi.get(self, "cors_policy_setting")

    @property
    @pulumi.getter(name="headerOperations")
    def header_operations(self) -> Optional[Sequence['outputs.ApigRouteAdvancedSettingHeaderOperation']]:
        """
        The header operations of the api gateway route.
        """
        return pulumi.get(self, "header_operations")

    @property
    @pulumi.getter(name="mirrorPolicies")
    def mirror_policies(self) -> Optional[Sequence['outputs.ApigRouteAdvancedSettingMirrorPolicy']]:
        """
        The mirror policies of the api gateway route.
        """
        return pulumi.get(self, "mirror_policies")

    @property
    @pulumi.getter(name="retryPolicySetting")
    def retry_policy_setting(self) -> Optional['outputs.ApigRouteAdvancedSettingRetryPolicySetting']:
        """
        The retry policy setting of the api gateway route.
        """
        return pulumi.get(self, "retry_policy_setting")

    @property
    @pulumi.getter(name="timeoutSetting")
    def timeout_setting(self) -> Optional['outputs.ApigRouteAdvancedSettingTimeoutSetting']:
        """
        The timeout setting of the api gateway route.
        """
        return pulumi.get(self, "timeout_setting")

    @property
    @pulumi.getter(name="urlRewriteSetting")
    def url_rewrite_setting(self) -> Optional['outputs.ApigRouteAdvancedSettingUrlRewriteSetting']:
        """
        The url rewrite setting of the api gateway route.
        """
        return pulumi.get(self, "url_rewrite_setting")


@pulumi.output_type
class ApigRouteAdvancedSettingCorsPolicySetting(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None):
        """
        :param bool enable: Whether the cors policy setting is enabled.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Whether the cors policy setting is enabled.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class ApigRouteAdvancedSettingHeaderOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directionType":
            suggest = "direction_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteAdvancedSettingHeaderOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteAdvancedSettingHeaderOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteAdvancedSettingHeaderOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 operation: str,
                 direction_type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The key of the header.
        :param str operation: The operation of the header. Valid values: `set`, `add`, `remove`.
        :param str direction_type: The direction type of the header. Valid values: `request`, `response`.
        :param str value: The value of the header.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operation", operation)
        if direction_type is not None:
            pulumi.set(__self__, "direction_type", direction_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the header.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The operation of the header. Valid values: `set`, `add`, `remove`.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="directionType")
    def direction_type(self) -> Optional[str]:
        """
        The direction type of the header. Valid values: `request`, `response`.
        """
        return pulumi.get(self, "direction_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApigRouteAdvancedSettingMirrorPolicy(dict):
    def __init__(__self__, *,
                 upstream: 'outputs.ApigRouteAdvancedSettingMirrorPolicyUpstream',
                 percent: Optional['outputs.ApigRouteAdvancedSettingMirrorPolicyPercent'] = None):
        """
        :param 'ApigRouteAdvancedSettingMirrorPolicyUpstreamArgs' upstream: The upstream of the mirror policy.
        :param 'ApigRouteAdvancedSettingMirrorPolicyPercentArgs' percent: The percent of the mirror policy.
        """
        pulumi.set(__self__, "upstream", upstream)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def upstream(self) -> 'outputs.ApigRouteAdvancedSettingMirrorPolicyUpstream':
        """
        The upstream of the mirror policy.
        """
        return pulumi.get(self, "upstream")

    @property
    @pulumi.getter
    def percent(self) -> Optional['outputs.ApigRouteAdvancedSettingMirrorPolicyPercent']:
        """
        The percent of the mirror policy.
        """
        return pulumi.get(self, "percent")


@pulumi.output_type
class ApigRouteAdvancedSettingMirrorPolicyPercent(dict):
    def __init__(__self__, *,
                 value: int):
        """
        :param int value: The percent value of the mirror policy.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        The percent value of the mirror policy.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApigRouteAdvancedSettingMirrorPolicyUpstream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upstreamId":
            suggest = "upstream_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteAdvancedSettingMirrorPolicyUpstream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteAdvancedSettingMirrorPolicyUpstream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteAdvancedSettingMirrorPolicyUpstream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 upstream_id: str,
                 version: Optional[str] = None):
        """
        :param str type: The type of the api gateway upstream.
        :param str upstream_id: The id of the api gateway upstream.
        :param str version: The version of the api gateway upstream.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "upstream_id", upstream_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the api gateway upstream.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> str:
        """
        The id of the api gateway upstream.
        """
        return pulumi.get(self, "upstream_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the api gateway upstream.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApigRouteAdvancedSettingRetryPolicySetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpCodes":
            suggest = "http_codes"
        elif key == "perTryTimeout":
            suggest = "per_try_timeout"
        elif key == "retryOns":
            suggest = "retry_ons"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteAdvancedSettingRetryPolicySetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteAdvancedSettingRetryPolicySetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteAdvancedSettingRetryPolicySetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attempts: Optional[int] = None,
                 enable: Optional[bool] = None,
                 http_codes: Optional[Sequence[str]] = None,
                 per_try_timeout: Optional[int] = None,
                 retry_ons: Optional[Sequence[str]] = None):
        """
        :param int attempts: The attempts of the api gateway route.
        :param bool enable: Whether the retry policy setting is enabled.
        :param Sequence[str] http_codes: The http codes of the api gateway route.
        :param int per_try_timeout: The per try timeout of the api gateway route.
        :param Sequence[str] retry_ons: The retry on of the api gateway route. Valid values: `5xx`, `reset`, `connect-failure`, `refused-stream`, `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
        """
        if attempts is not None:
            pulumi.set(__self__, "attempts", attempts)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if http_codes is not None:
            pulumi.set(__self__, "http_codes", http_codes)
        if per_try_timeout is not None:
            pulumi.set(__self__, "per_try_timeout", per_try_timeout)
        if retry_ons is not None:
            pulumi.set(__self__, "retry_ons", retry_ons)

    @property
    @pulumi.getter
    def attempts(self) -> Optional[int]:
        """
        The attempts of the api gateway route.
        """
        return pulumi.get(self, "attempts")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Whether the retry policy setting is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="httpCodes")
    def http_codes(self) -> Optional[Sequence[str]]:
        """
        The http codes of the api gateway route.
        """
        return pulumi.get(self, "http_codes")

    @property
    @pulumi.getter(name="perTryTimeout")
    def per_try_timeout(self) -> Optional[int]:
        """
        The per try timeout of the api gateway route.
        """
        return pulumi.get(self, "per_try_timeout")

    @property
    @pulumi.getter(name="retryOns")
    def retry_ons(self) -> Optional[Sequence[str]]:
        """
        The retry on of the api gateway route. Valid values: `5xx`, `reset`, `connect-failure`, `refused-stream`, `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
        """
        return pulumi.get(self, "retry_ons")


@pulumi.output_type
class ApigRouteAdvancedSettingTimeoutSetting(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 timeout: Optional[int] = None):
        """
        :param bool enable: Whether the timeout setting is enabled.
        :param int timeout: The timeout of the api gateway route. Unit: s.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Whether the timeout setting is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        The timeout of the api gateway route. Unit: s.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ApigRouteAdvancedSettingUrlRewriteSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "urlRewrite":
            suggest = "url_rewrite"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteAdvancedSettingUrlRewriteSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteAdvancedSettingUrlRewriteSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteAdvancedSettingUrlRewriteSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 url_rewrite: Optional[str] = None):
        """
        :param bool enable: Whether the url rewrite setting is enabled.
        :param str url_rewrite: The url rewrite path of the api gateway route.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if url_rewrite is not None:
            pulumi.set(__self__, "url_rewrite", url_rewrite)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Whether the url rewrite setting is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> Optional[str]:
        """
        The url rewrite path of the api gateway route.
        """
        return pulumi.get(self, "url_rewrite")


@pulumi.output_type
class ApigRouteCustomDomain(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str domain: The domain of the api gateway route.
        :param str id: The id of the custom domain.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        The domain of the api gateway route.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The id of the custom domain.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ApigRouteDomain(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str domain: The domain of the api gateway route.
        :param str type: The type of the domain.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        The domain of the api gateway route.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApigRouteMatchRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryStrings":
            suggest = "query_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteMatchRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteMatchRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteMatchRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: 'outputs.ApigRouteMatchRulePath',
                 headers: Optional[Sequence['outputs.ApigRouteMatchRuleHeader']] = None,
                 methods: Optional[Sequence[str]] = None,
                 query_strings: Optional[Sequence['outputs.ApigRouteMatchRuleQueryString']] = None):
        """
        :param 'ApigRouteMatchRulePathArgs' path: The path of the api gateway route.
        :param Sequence['ApigRouteMatchRuleHeaderArgs'] headers: The header of the api gateway route.
        :param Sequence[str] methods: The method of the api gateway route. Valid values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `CONNECT`.
        :param Sequence['ApigRouteMatchRuleQueryStringArgs'] query_strings: The query string of the api gateway route.
        """
        pulumi.set(__self__, "path", path)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if query_strings is not None:
            pulumi.set(__self__, "query_strings", query_strings)

    @property
    @pulumi.getter
    def path(self) -> 'outputs.ApigRouteMatchRulePath':
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.ApigRouteMatchRuleHeader']]:
        """
        The header of the api gateway route.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        """
        The method of the api gateway route. Valid values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `CONNECT`.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Optional[Sequence['outputs.ApigRouteMatchRuleQueryString']]:
        """
        The query string of the api gateway route.
        """
        return pulumi.get(self, "query_strings")


@pulumi.output_type
class ApigRouteMatchRuleHeader(dict):
    def __init__(__self__, *,
                 key: str,
                 value: 'outputs.ApigRouteMatchRuleHeaderValue'):
        """
        :param str key: The key of the header.
        :param 'ApigRouteMatchRuleHeaderValueArgs' value: The path of the api gateway route.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the header.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ApigRouteMatchRuleHeaderValue':
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApigRouteMatchRuleHeaderValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchContent":
            suggest = "match_content"
        elif key == "matchType":
            suggest = "match_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteMatchRuleHeaderValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteMatchRuleHeaderValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteMatchRuleHeaderValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_content: str,
                 match_type: str):
        """
        :param str match_content: The match content of the api gateway route.
        :param str match_type: The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        """
        The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class ApigRouteMatchRulePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchContent":
            suggest = "match_content"
        elif key == "matchType":
            suggest = "match_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteMatchRulePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteMatchRulePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteMatchRulePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_content: str,
                 match_type: str):
        """
        :param str match_content: The match content of the api gateway route.
        :param str match_type: The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        """
        The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class ApigRouteMatchRuleQueryString(dict):
    def __init__(__self__, *,
                 key: str,
                 value: 'outputs.ApigRouteMatchRuleQueryStringValue'):
        """
        :param str key: The key of the query string.
        :param 'ApigRouteMatchRuleQueryStringValueArgs' value: The path of the api gateway route.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the query string.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ApigRouteMatchRuleQueryStringValue':
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApigRouteMatchRuleQueryStringValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchContent":
            suggest = "match_content"
        elif key == "matchType":
            suggest = "match_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteMatchRuleQueryStringValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteMatchRuleQueryStringValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteMatchRuleQueryStringValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_content: str,
                 match_type: str):
        """
        :param str match_content: The match content of the api gateway route.
        :param str match_type: The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        """
        The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class ApigRouteUpstreamList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upstreamId":
            suggest = "upstream_id"
        elif key == "aiProviderSettings":
            suggest = "ai_provider_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteUpstreamList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteUpstreamList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteUpstreamList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upstream_id: str,
                 weight: int,
                 ai_provider_settings: Optional['outputs.ApigRouteUpstreamListAiProviderSettings'] = None,
                 version: Optional[str] = None):
        """
        :param str upstream_id: The id of the api gateway upstream.
        :param int weight: The weight of the api gateway upstream. Valid values: 0~10000.
        :param 'ApigRouteUpstreamListAiProviderSettingsArgs' ai_provider_settings: The ai provider settings of the api gateway route.
        :param str version: The version of the api gateway upstream.
        """
        pulumi.set(__self__, "upstream_id", upstream_id)
        pulumi.set(__self__, "weight", weight)
        if ai_provider_settings is not None:
            pulumi.set(__self__, "ai_provider_settings", ai_provider_settings)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> str:
        """
        The id of the api gateway upstream.
        """
        return pulumi.get(self, "upstream_id")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        The weight of the api gateway upstream. Valid values: 0~10000.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="aiProviderSettings")
    def ai_provider_settings(self) -> Optional['outputs.ApigRouteUpstreamListAiProviderSettings']:
        """
        The ai provider settings of the api gateway route.
        """
        return pulumi.get(self, "ai_provider_settings")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the api gateway upstream.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApigRouteUpstreamListAiProviderSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetPath":
            suggest = "target_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigRouteUpstreamListAiProviderSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigRouteUpstreamListAiProviderSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigRouteUpstreamListAiProviderSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model: str,
                 target_path: str):
        """
        :param str model: The model of the ai provider.
        :param str target_path: The target path of the ai provider.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "target_path", target_path)

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The model of the ai provider.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="targetPath")
    def target_path(self) -> str:
        """
        The target path of the ai provider.
        """
        return pulumi.get(self, "target_path")


@pulumi.output_type
class ApigUpstreamCircuitBreakingSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseEjectionTime":
            suggest = "base_ejection_time"
        elif key == "consecutiveErrors":
            suggest = "consecutive_errors"
        elif key == "maxEjectionPercent":
            suggest = "max_ejection_percent"
        elif key == "minHealthPercent":
            suggest = "min_health_percent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamCircuitBreakingSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamCircuitBreakingSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamCircuitBreakingSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: bool,
                 base_ejection_time: Optional[int] = None,
                 consecutive_errors: Optional[int] = None,
                 interval: Optional[int] = None,
                 max_ejection_percent: Optional[int] = None,
                 min_health_percent: Optional[int] = None):
        """
        :param bool enable: Whether the circuit breaking is enabled.
        :param int base_ejection_time: The base ejection time of circuit breaking. Unit: ms. Default is 10s.
        :param int consecutive_errors: The consecutive errors of circuit breaking. Default is 5.
        :param int interval: The interval of circuit breaking. Unit: ms. Default is 10s.
        :param int max_ejection_percent: The max ejection percent of circuit breaking. Default is 20%.
        :param int min_health_percent: The min health percent of circuit breaking. Default is 60%.
        """
        pulumi.set(__self__, "enable", enable)
        if base_ejection_time is not None:
            pulumi.set(__self__, "base_ejection_time", base_ejection_time)
        if consecutive_errors is not None:
            pulumi.set(__self__, "consecutive_errors", consecutive_errors)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if max_ejection_percent is not None:
            pulumi.set(__self__, "max_ejection_percent", max_ejection_percent)
        if min_health_percent is not None:
            pulumi.set(__self__, "min_health_percent", min_health_percent)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the circuit breaking is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="baseEjectionTime")
    def base_ejection_time(self) -> Optional[int]:
        """
        The base ejection time of circuit breaking. Unit: ms. Default is 10s.
        """
        return pulumi.get(self, "base_ejection_time")

    @property
    @pulumi.getter(name="consecutiveErrors")
    def consecutive_errors(self) -> Optional[int]:
        """
        The consecutive errors of circuit breaking. Default is 5.
        """
        return pulumi.get(self, "consecutive_errors")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        The interval of circuit breaking. Unit: ms. Default is 10s.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxEjectionPercent")
    def max_ejection_percent(self) -> Optional[int]:
        """
        The max ejection percent of circuit breaking. Default is 20%.
        """
        return pulumi.get(self, "max_ejection_percent")

    @property
    @pulumi.getter(name="minHealthPercent")
    def min_health_percent(self) -> Optional[int]:
        """
        The min health percent of circuit breaking. Default is 60%.
        """
        return pulumi.get(self, "min_health_percent")


@pulumi.output_type
class ApigUpstreamLoadBalancerSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lbPolicy":
            suggest = "lb_policy"
        elif key == "consistentHashLb":
            suggest = "consistent_hash_lb"
        elif key == "simpleLb":
            suggest = "simple_lb"
        elif key == "warmupDuration":
            suggest = "warmup_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamLoadBalancerSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamLoadBalancerSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamLoadBalancerSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lb_policy: str,
                 consistent_hash_lb: Optional['outputs.ApigUpstreamLoadBalancerSettingsConsistentHashLb'] = None,
                 simple_lb: Optional[str] = None,
                 warmup_duration: Optional[int] = None):
        """
        :param str lb_policy: The load balancer policy of apig upstream. Valid values: `SimpleLB`, `ConsistentHashLB`.
        :param 'ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs' consistent_hash_lb: The consistent hash lb of apig upstream.
        :param str simple_lb: The simple load balancer of apig upstream. Valid values: `ROUND_ROBIN`, `LEAST_CONN`, `RANDOM`.
        :param int warmup_duration: The warmup duration of apig upstream lb. This field is valid when the simple_lb is `ROUND_ROBIN` or `LEAST_CONN`.
        """
        pulumi.set(__self__, "lb_policy", lb_policy)
        if consistent_hash_lb is not None:
            pulumi.set(__self__, "consistent_hash_lb", consistent_hash_lb)
        if simple_lb is not None:
            pulumi.set(__self__, "simple_lb", simple_lb)
        if warmup_duration is not None:
            pulumi.set(__self__, "warmup_duration", warmup_duration)

    @property
    @pulumi.getter(name="lbPolicy")
    def lb_policy(self) -> str:
        """
        The load balancer policy of apig upstream. Valid values: `SimpleLB`, `ConsistentHashLB`.
        """
        return pulumi.get(self, "lb_policy")

    @property
    @pulumi.getter(name="consistentHashLb")
    def consistent_hash_lb(self) -> Optional['outputs.ApigUpstreamLoadBalancerSettingsConsistentHashLb']:
        """
        The consistent hash lb of apig upstream.
        """
        return pulumi.get(self, "consistent_hash_lb")

    @property
    @pulumi.getter(name="simpleLb")
    def simple_lb(self) -> Optional[str]:
        """
        The simple load balancer of apig upstream. Valid values: `ROUND_ROBIN`, `LEAST_CONN`, `RANDOM`.
        """
        return pulumi.get(self, "simple_lb")

    @property
    @pulumi.getter(name="warmupDuration")
    def warmup_duration(self) -> Optional[int]:
        """
        The warmup duration of apig upstream lb. This field is valid when the simple_lb is `ROUND_ROBIN` or `LEAST_CONN`.
        """
        return pulumi.get(self, "warmup_duration")


@pulumi.output_type
class ApigUpstreamLoadBalancerSettingsConsistentHashLb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hashKey":
            suggest = "hash_key"
        elif key == "httpCookie":
            suggest = "http_cookie"
        elif key == "httpHeaderName":
            suggest = "http_header_name"
        elif key == "httpQueryParameterName":
            suggest = "http_query_parameter_name"
        elif key == "useSourceIp":
            suggest = "use_source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamLoadBalancerSettingsConsistentHashLb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamLoadBalancerSettingsConsistentHashLb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamLoadBalancerSettingsConsistentHashLb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hash_key: str,
                 http_cookie: Optional['outputs.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookie'] = None,
                 http_header_name: Optional[str] = None,
                 http_query_parameter_name: Optional[str] = None,
                 use_source_ip: Optional[bool] = None):
        """
        :param str hash_key: The hash key of apig upstream consistent hash lb. Valid values: `HTTPCookie`, `HttpHeaderName`, `HttpQueryParameterName`, `UseSourceIp`.
        :param 'ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs' http_cookie: The http cookie of apig upstream consistent hash lb.
        :param str http_header_name: The http header name of apig upstream consistent hash lb.
        :param str http_query_parameter_name: The http query parameter name of apig upstream consistent hash lb.
        :param bool use_source_ip: The use source ip of apig upstream consistent hash lb.
        """
        pulumi.set(__self__, "hash_key", hash_key)
        if http_cookie is not None:
            pulumi.set(__self__, "http_cookie", http_cookie)
        if http_header_name is not None:
            pulumi.set(__self__, "http_header_name", http_header_name)
        if http_query_parameter_name is not None:
            pulumi.set(__self__, "http_query_parameter_name", http_query_parameter_name)
        if use_source_ip is not None:
            pulumi.set(__self__, "use_source_ip", use_source_ip)

    @property
    @pulumi.getter(name="hashKey")
    def hash_key(self) -> str:
        """
        The hash key of apig upstream consistent hash lb. Valid values: `HTTPCookie`, `HttpHeaderName`, `HttpQueryParameterName`, `UseSourceIp`.
        """
        return pulumi.get(self, "hash_key")

    @property
    @pulumi.getter(name="httpCookie")
    def http_cookie(self) -> Optional['outputs.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookie']:
        """
        The http cookie of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_cookie")

    @property
    @pulumi.getter(name="httpHeaderName")
    def http_header_name(self) -> Optional[str]:
        """
        The http header name of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_header_name")

    @property
    @pulumi.getter(name="httpQueryParameterName")
    def http_query_parameter_name(self) -> Optional[str]:
        """
        The http query parameter name of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_query_parameter_name")

    @property
    @pulumi.getter(name="useSourceIp")
    def use_source_ip(self) -> Optional[bool]:
        """
        The use source ip of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "use_source_ip")


@pulumi.output_type
class ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookie(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 ttl: int):
        """
        :param str name: The name of apig upstream consistent hash lb http cookie.
        :param str path: The path of apig upstream consistent hash lb http cookie.
        :param int ttl: The ttl of apig upstream consistent hash lb http cookie.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream consistent hash lb http cookie.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of apig upstream consistent hash lb http cookie.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        The ttl of apig upstream consistent hash lb http cookie.
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class ApigUpstreamSourceIngressSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAllIngressClasses":
            suggest = "enable_all_ingress_classes"
        elif key == "enableAllNamespaces":
            suggest = "enable_all_namespaces"
        elif key == "enableIngress":
            suggest = "enable_ingress"
        elif key == "enableIngressWithoutIngressClass":
            suggest = "enable_ingress_without_ingress_class"
        elif key == "ingressClasses":
            suggest = "ingress_classes"
        elif key == "updateStatus":
            suggest = "update_status"
        elif key == "watchNamespaces":
            suggest = "watch_namespaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamSourceIngressSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamSourceIngressSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamSourceIngressSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_all_ingress_classes: Optional[bool] = None,
                 enable_all_namespaces: Optional[bool] = None,
                 enable_ingress: Optional[bool] = None,
                 enable_ingress_without_ingress_class: Optional[bool] = None,
                 ingress_classes: Optional[Sequence[str]] = None,
                 update_status: Optional[bool] = None,
                 watch_namespaces: Optional[Sequence[str]] = None):
        """
        :param bool enable_all_ingress_classes: Whether to enable all ingress classes.
        :param bool enable_all_namespaces: Whether to enable all namespaces.
        :param bool enable_ingress: Whether to enable ingress.
        :param bool enable_ingress_without_ingress_class: Whether to enable ingress without ingress class.
        :param Sequence[str] ingress_classes: The ingress classes of ingress settings.
        :param bool update_status: The update status of ingress settings.
        :param Sequence[str] watch_namespaces: The watch namespaces of ingress settings.
        """
        if enable_all_ingress_classes is not None:
            pulumi.set(__self__, "enable_all_ingress_classes", enable_all_ingress_classes)
        if enable_all_namespaces is not None:
            pulumi.set(__self__, "enable_all_namespaces", enable_all_namespaces)
        if enable_ingress is not None:
            pulumi.set(__self__, "enable_ingress", enable_ingress)
        if enable_ingress_without_ingress_class is not None:
            pulumi.set(__self__, "enable_ingress_without_ingress_class", enable_ingress_without_ingress_class)
        if ingress_classes is not None:
            pulumi.set(__self__, "ingress_classes", ingress_classes)
        if update_status is not None:
            pulumi.set(__self__, "update_status", update_status)
        if watch_namespaces is not None:
            pulumi.set(__self__, "watch_namespaces", watch_namespaces)

    @property
    @pulumi.getter(name="enableAllIngressClasses")
    def enable_all_ingress_classes(self) -> Optional[bool]:
        """
        Whether to enable all ingress classes.
        """
        return pulumi.get(self, "enable_all_ingress_classes")

    @property
    @pulumi.getter(name="enableAllNamespaces")
    def enable_all_namespaces(self) -> Optional[bool]:
        """
        Whether to enable all namespaces.
        """
        return pulumi.get(self, "enable_all_namespaces")

    @property
    @pulumi.getter(name="enableIngress")
    def enable_ingress(self) -> Optional[bool]:
        """
        Whether to enable ingress.
        """
        return pulumi.get(self, "enable_ingress")

    @property
    @pulumi.getter(name="enableIngressWithoutIngressClass")
    def enable_ingress_without_ingress_class(self) -> Optional[bool]:
        """
        Whether to enable ingress without ingress class.
        """
        return pulumi.get(self, "enable_ingress_without_ingress_class")

    @property
    @pulumi.getter(name="ingressClasses")
    def ingress_classes(self) -> Optional[Sequence[str]]:
        """
        The ingress classes of ingress settings.
        """
        return pulumi.get(self, "ingress_classes")

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> Optional[bool]:
        """
        The update status of ingress settings.
        """
        return pulumi.get(self, "update_status")

    @property
    @pulumi.getter(name="watchNamespaces")
    def watch_namespaces(self) -> Optional[Sequence[str]]:
        """
        The watch namespaces of ingress settings.
        """
        return pulumi.get(self, "watch_namespaces")


@pulumi.output_type
class ApigUpstreamSourceSourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "k8sSource":
            suggest = "k8s_source"
        elif key == "nacosSource":
            suggest = "nacos_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamSourceSourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamSourceSourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamSourceSourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 k8s_source: Optional['outputs.ApigUpstreamSourceSourceSpecK8sSource'] = None,
                 nacos_source: Optional['outputs.ApigUpstreamSourceSourceSpecNacosSource'] = None):
        """
        :param 'ApigUpstreamSourceSourceSpecK8sSourceArgs' k8s_source: The k8s source of apig upstream source.
        :param 'ApigUpstreamSourceSourceSpecNacosSourceArgs' nacos_source: The nacos source of apig upstream source.
        """
        if k8s_source is not None:
            pulumi.set(__self__, "k8s_source", k8s_source)
        if nacos_source is not None:
            pulumi.set(__self__, "nacos_source", nacos_source)

    @property
    @pulumi.getter(name="k8sSource")
    def k8s_source(self) -> Optional['outputs.ApigUpstreamSourceSourceSpecK8sSource']:
        """
        The k8s source of apig upstream source.
        """
        return pulumi.get(self, "k8s_source")

    @property
    @pulumi.getter(name="nacosSource")
    def nacos_source(self) -> Optional['outputs.ApigUpstreamSourceSourceSpecNacosSource']:
        """
        The nacos source of apig upstream source.
        """
        return pulumi.get(self, "nacos_source")


@pulumi.output_type
class ApigUpstreamSourceSourceSpecK8sSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterType":
            suggest = "cluster_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamSourceSourceSpecK8sSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamSourceSourceSpecK8sSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamSourceSourceSpecK8sSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_type: Optional[str] = None):
        """
        :param str cluster_id: The cluster id of k8s source.
        :param str cluster_type: The cluster type of k8s source.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The cluster id of k8s source.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        """
        The cluster type of k8s source.
        """
        return pulumi.get(self, "cluster_type")


@pulumi.output_type
class ApigUpstreamSourceSourceSpecNacosSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nacosId":
            suggest = "nacos_id"
        elif key == "authConfig":
            suggest = "auth_config"
        elif key == "contextPath":
            suggest = "context_path"
        elif key == "grpcPort":
            suggest = "grpc_port"
        elif key == "httpPort":
            suggest = "http_port"
        elif key == "nacosName":
            suggest = "nacos_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamSourceSourceSpecNacosSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamSourceSourceSpecNacosSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamSourceSourceSpecNacosSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nacos_id: str,
                 address: Optional[str] = None,
                 auth_config: Optional['outputs.ApigUpstreamSourceSourceSpecNacosSourceAuthConfig'] = None,
                 context_path: Optional[str] = None,
                 grpc_port: Optional[int] = None,
                 http_port: Optional[int] = None,
                 nacos_name: Optional[str] = None):
        """
        :param str nacos_id: The nacos id of nacos source.
        :param str address: The address of nacos source.
        :param 'ApigUpstreamSourceSourceSpecNacosSourceAuthConfigArgs' auth_config: The auth config of nacos source.
        :param str context_path: The context path of nacos source.
        :param int grpc_port: The grpc port of nacos source.
        :param int http_port: The http port of nacos source.
        :param str nacos_name: The nacos name of nacos source.
        """
        pulumi.set(__self__, "nacos_id", nacos_id)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if auth_config is not None:
            pulumi.set(__self__, "auth_config", auth_config)
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if grpc_port is not None:
            pulumi.set(__self__, "grpc_port", grpc_port)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if nacos_name is not None:
            pulumi.set(__self__, "nacos_name", nacos_name)

    @property
    @pulumi.getter(name="nacosId")
    def nacos_id(self) -> str:
        """
        The nacos id of nacos source.
        """
        return pulumi.get(self, "nacos_id")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        The address of nacos source.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> Optional['outputs.ApigUpstreamSourceSourceSpecNacosSourceAuthConfig']:
        """
        The auth config of nacos source.
        """
        return pulumi.get(self, "auth_config")

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[str]:
        """
        The context path of nacos source.
        """
        return pulumi.get(self, "context_path")

    @property
    @pulumi.getter(name="grpcPort")
    def grpc_port(self) -> Optional[int]:
        """
        The grpc port of nacos source.
        """
        return pulumi.get(self, "grpc_port")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        """
        The http port of nacos source.
        """
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="nacosName")
    def nacos_name(self) -> Optional[str]:
        """
        The nacos name of nacos source.
        """
        return pulumi.get(self, "nacos_name")


@pulumi.output_type
class ApigUpstreamSourceSourceSpecNacosSourceAuthConfig(dict):
    def __init__(__self__, *,
                 basic: Optional['outputs.ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasic'] = None):
        """
        :param 'ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs' basic: The basic auth config of nacos source.
        """
        if basic is not None:
            pulumi.set(__self__, "basic", basic)

    @property
    @pulumi.getter
    def basic(self) -> Optional['outputs.ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasic']:
        """
        The basic auth config of nacos source.
        """
        return pulumi.get(self, "basic")


@pulumi.output_type
class ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasic(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The password of basic auth config of nacos source.
        :param str username: The username of basic auth config of nacos source.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of basic auth config of nacos source.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username of basic auth config of nacos source.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApigUpstreamTlsSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamTlsSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamTlsSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamTlsSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tls_mode: str,
                 sni: Optional[str] = None):
        """
        :param str tls_mode: The tls mode of apig upstream tls setting. Valid values: `DISABLE`, `SIMPLE`.
        :param str sni: The sni of apig upstream tls setting.
        """
        pulumi.set(__self__, "tls_mode", tls_mode)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> str:
        """
        The tls mode of apig upstream tls setting. Valid values: `DISABLE`, `SIMPLE`.
        """
        return pulumi.get(self, "tls_mode")

    @property
    @pulumi.getter
    def sni(self) -> Optional[str]:
        """
        The sni of apig upstream tls setting.
        """
        return pulumi.get(self, "sni")


@pulumi.output_type
class ApigUpstreamUpstreamSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aiProvider":
            suggest = "ai_provider"
        elif key == "ecsLists":
            suggest = "ecs_lists"
        elif key == "fixedIpLists":
            suggest = "fixed_ip_lists"
        elif key == "k8sService":
            suggest = "k8s_service"
        elif key == "nacosService":
            suggest = "nacos_service"
        elif key == "veFaas":
            suggest = "ve_faas"
        elif key == "veMlp":
            suggest = "ve_mlp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamUpstreamSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamUpstreamSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamUpstreamSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ai_provider: Optional['outputs.ApigUpstreamUpstreamSpecAiProvider'] = None,
                 domain: Optional['outputs.ApigUpstreamUpstreamSpecDomain'] = None,
                 ecs_lists: Optional[Sequence['outputs.ApigUpstreamUpstreamSpecEcsList']] = None,
                 fixed_ip_lists: Optional[Sequence['outputs.ApigUpstreamUpstreamSpecFixedIpList']] = None,
                 k8s_service: Optional['outputs.ApigUpstreamUpstreamSpecK8sService'] = None,
                 nacos_service: Optional['outputs.ApigUpstreamUpstreamSpecNacosService'] = None,
                 ve_faas: Optional['outputs.ApigUpstreamUpstreamSpecVeFaas'] = None,
                 ve_mlp: Optional['outputs.ApigUpstreamUpstreamSpecVeMlp'] = None):
        """
        :param 'ApigUpstreamUpstreamSpecAiProviderArgs' ai_provider: The ai provider of apig upstream.
        :param 'ApigUpstreamUpstreamSpecDomainArgs' domain: The domain of apig upstream.
        :param Sequence['ApigUpstreamUpstreamSpecEcsListArgs'] ecs_lists: The ecs list of apig upstream.
        :param Sequence['ApigUpstreamUpstreamSpecFixedIpListArgs'] fixed_ip_lists: The fixed ip list of apig upstream.
        :param 'ApigUpstreamUpstreamSpecK8sServiceArgs' k8s_service: The k8s service of apig upstream.
        :param 'ApigUpstreamUpstreamSpecNacosServiceArgs' nacos_service: The nacos service of apig upstream.
        :param 'ApigUpstreamUpstreamSpecVeFaasArgs' ve_faas: The vefaas of apig upstream.
        :param 'ApigUpstreamUpstreamSpecVeMlpArgs' ve_mlp: The mlp of apig upstream.
        """
        if ai_provider is not None:
            pulumi.set(__self__, "ai_provider", ai_provider)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if ecs_lists is not None:
            pulumi.set(__self__, "ecs_lists", ecs_lists)
        if fixed_ip_lists is not None:
            pulumi.set(__self__, "fixed_ip_lists", fixed_ip_lists)
        if k8s_service is not None:
            pulumi.set(__self__, "k8s_service", k8s_service)
        if nacos_service is not None:
            pulumi.set(__self__, "nacos_service", nacos_service)
        if ve_faas is not None:
            pulumi.set(__self__, "ve_faas", ve_faas)
        if ve_mlp is not None:
            pulumi.set(__self__, "ve_mlp", ve_mlp)

    @property
    @pulumi.getter(name="aiProvider")
    def ai_provider(self) -> Optional['outputs.ApigUpstreamUpstreamSpecAiProvider']:
        """
        The ai provider of apig upstream.
        """
        return pulumi.get(self, "ai_provider")

    @property
    @pulumi.getter
    def domain(self) -> Optional['outputs.ApigUpstreamUpstreamSpecDomain']:
        """
        The domain of apig upstream.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="ecsLists")
    def ecs_lists(self) -> Optional[Sequence['outputs.ApigUpstreamUpstreamSpecEcsList']]:
        """
        The ecs list of apig upstream.
        """
        return pulumi.get(self, "ecs_lists")

    @property
    @pulumi.getter(name="fixedIpLists")
    def fixed_ip_lists(self) -> Optional[Sequence['outputs.ApigUpstreamUpstreamSpecFixedIpList']]:
        """
        The fixed ip list of apig upstream.
        """
        return pulumi.get(self, "fixed_ip_lists")

    @property
    @pulumi.getter(name="k8sService")
    def k8s_service(self) -> Optional['outputs.ApigUpstreamUpstreamSpecK8sService']:
        """
        The k8s service of apig upstream.
        """
        return pulumi.get(self, "k8s_service")

    @property
    @pulumi.getter(name="nacosService")
    def nacos_service(self) -> Optional['outputs.ApigUpstreamUpstreamSpecNacosService']:
        """
        The nacos service of apig upstream.
        """
        return pulumi.get(self, "nacos_service")

    @property
    @pulumi.getter(name="veFaas")
    def ve_faas(self) -> Optional['outputs.ApigUpstreamUpstreamSpecVeFaas']:
        """
        The vefaas of apig upstream.
        """
        return pulumi.get(self, "ve_faas")

    @property
    @pulumi.getter(name="veMlp")
    def ve_mlp(self) -> Optional['outputs.ApigUpstreamUpstreamSpecVeMlp']:
        """
        The mlp of apig upstream.
        """
        return pulumi.get(self, "ve_mlp")


@pulumi.output_type
class ApigUpstreamUpstreamSpecAiProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseUrl":
            suggest = "base_url"
        elif key == "customBodyParams":
            suggest = "custom_body_params"
        elif key == "customHeaderParams":
            suggest = "custom_header_params"
        elif key == "customModelService":
            suggest = "custom_model_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamUpstreamSpecAiProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamUpstreamSpecAiProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamUpstreamSpecAiProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_url: str,
                 name: str,
                 token: str,
                 custom_body_params: Optional[Mapping[str, str]] = None,
                 custom_header_params: Optional[Mapping[str, str]] = None,
                 custom_model_service: Optional['outputs.ApigUpstreamUpstreamSpecAiProviderCustomModelService'] = None):
        """
        :param str base_url: The base url of ai provider.
        :param str name: The name of ai provider.
        :param str token: The token of ai provider.
        :param Mapping[str, str] custom_body_params: The custom body params of ai provider.
        :param Mapping[str, str] custom_header_params: The custom header params of ai provider.
        :param 'ApigUpstreamUpstreamSpecAiProviderCustomModelServiceArgs' custom_model_service: The custom model service of ai provider.
        """
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "token", token)
        if custom_body_params is not None:
            pulumi.set(__self__, "custom_body_params", custom_body_params)
        if custom_header_params is not None:
            pulumi.set(__self__, "custom_header_params", custom_header_params)
        if custom_model_service is not None:
            pulumi.set(__self__, "custom_model_service", custom_model_service)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        The base url of ai provider.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of ai provider.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The token of ai provider.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="customBodyParams")
    def custom_body_params(self) -> Optional[Mapping[str, str]]:
        """
        The custom body params of ai provider.
        """
        return pulumi.get(self, "custom_body_params")

    @property
    @pulumi.getter(name="customHeaderParams")
    def custom_header_params(self) -> Optional[Mapping[str, str]]:
        """
        The custom header params of ai provider.
        """
        return pulumi.get(self, "custom_header_params")

    @property
    @pulumi.getter(name="customModelService")
    def custom_model_service(self) -> Optional['outputs.ApigUpstreamUpstreamSpecAiProviderCustomModelService']:
        """
        The custom model service of ai provider.
        """
        return pulumi.get(self, "custom_model_service")


@pulumi.output_type
class ApigUpstreamUpstreamSpecAiProviderCustomModelService(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 port: int):
        """
        :param str name: The name of custom model service.
        :param str namespace: The namespace of custom model service.
        :param int port: The port of custom model service.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of custom model service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of custom model service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of custom model service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ApigUpstreamUpstreamSpecDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainList":
            suggest = "domain_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamUpstreamSpecDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamUpstreamSpecDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamUpstreamSpecDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_list: 'outputs.ApigUpstreamUpstreamSpecDomainDomainList',
                 protocol: Optional[str] = None):
        """
        :param 'ApigUpstreamUpstreamSpecDomainDomainListArgs' domain_list: The domain list of apig upstream.
        :param str protocol: The protocol of apig upstream. Valid values: `HTTP`, `HTTPS`.
        """
        pulumi.set(__self__, "domain_list", domain_list)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="domainList")
    def domain_list(self) -> 'outputs.ApigUpstreamUpstreamSpecDomainDomainList':
        """
        The domain list of apig upstream.
        """
        return pulumi.get(self, "domain_list")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol of apig upstream. Valid values: `HTTP`, `HTTPS`.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class ApigUpstreamUpstreamSpecDomainDomainList(dict):
    def __init__(__self__, *,
                 domain: str,
                 port: Optional[int] = None):
        """
        :param str domain: The domain of apig upstream.
        :param int port: The port of domain. Default is 80 for HTTP, 443 for HTTPS.
        """
        pulumi.set(__self__, "domain", domain)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of apig upstream.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port of domain. Default is 80 for HTTP, 443 for HTTPS.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ApigUpstreamUpstreamSpecEcsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ecsId":
            suggest = "ecs_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamUpstreamSpecEcsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamUpstreamSpecEcsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamUpstreamSpecEcsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ecs_id: str,
                 ip: str,
                 port: int):
        """
        :param str ecs_id: The instance id of ecs.
        :param str ip: The ip of ecs.
        :param int port: The port of ecs.
        """
        pulumi.set(__self__, "ecs_id", ecs_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="ecsId")
    def ecs_id(self) -> str:
        """
        The instance id of ecs.
        """
        return pulumi.get(self, "ecs_id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The ip of ecs.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of ecs.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ApigUpstreamUpstreamSpecFixedIpList(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: The ip of apig upstream.
        :param int port: The port of apig upstream.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The ip of apig upstream.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of apig upstream.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ApigUpstreamUpstreamSpecK8sService(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 port: int):
        """
        :param str name: The name of k8s service.
        :param str namespace: The namespace of k8s service.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of k8s service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ApigUpstreamUpstreamSpecNacosService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upstreamSourceId":
            suggest = "upstream_source_id"
        elif key == "namespaceId":
            suggest = "namespace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamUpstreamSpecNacosService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamUpstreamSpecNacosService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamUpstreamSpecNacosService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 namespace: str,
                 service: str,
                 upstream_source_id: str,
                 namespace_id: Optional[str] = None):
        """
        :param str group: The group of nacos service.
        :param str namespace: The namespace of nacos service.
        :param str service: The service of nacos service.
        :param str upstream_source_id: The upstream source id.
        :param str namespace_id: The namespace id of nacos service.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "upstream_source_id", upstream_source_id)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The group of nacos service.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of nacos service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        The service of nacos service.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="upstreamSourceId")
    def upstream_source_id(self) -> str:
        """
        The upstream source id.
        """
        return pulumi.get(self, "upstream_source_id")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        """
        The namespace id of nacos service.
        """
        return pulumi.get(self, "namespace_id")


@pulumi.output_type
class ApigUpstreamUpstreamSpecVeFaas(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionId":
            suggest = "function_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamUpstreamSpecVeFaas. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamUpstreamSpecVeFaas.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamUpstreamSpecVeFaas.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_id: str):
        """
        :param str function_id: The function id of vefaas.
        """
        pulumi.set(__self__, "function_id", function_id)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The function id of vefaas.
        """
        return pulumi.get(self, "function_id")


@pulumi.output_type
class ApigUpstreamUpstreamSpecVeMlp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "k8sService":
            suggest = "k8s_service"
        elif key == "serviceDiscoverType":
            suggest = "service_discover_type"
        elif key == "serviceId":
            suggest = "service_id"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "serviceUrl":
            suggest = "service_url"
        elif key == "upstreamSourceId":
            suggest = "upstream_source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamUpstreamSpecVeMlp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamUpstreamSpecVeMlp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamUpstreamSpecVeMlp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 k8s_service: 'outputs.ApigUpstreamUpstreamSpecVeMlpK8sService',
                 service_discover_type: str,
                 service_id: str,
                 service_name: Optional[str] = None,
                 service_url: Optional[str] = None,
                 upstream_source_id: Optional[str] = None):
        """
        :param 'ApigUpstreamUpstreamSpecVeMlpK8sServiceArgs' k8s_service: The k8s service of mlp.
        :param str service_discover_type: The service discover type of mlp.
        :param str service_id: The service id of mlp.
        :param str service_name: The service name of mlp.
        :param str service_url: The service url of mlp.
        :param str upstream_source_id: The upstream source id.
        """
        pulumi.set(__self__, "k8s_service", k8s_service)
        pulumi.set(__self__, "service_discover_type", service_discover_type)
        pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if service_url is not None:
            pulumi.set(__self__, "service_url", service_url)
        if upstream_source_id is not None:
            pulumi.set(__self__, "upstream_source_id", upstream_source_id)

    @property
    @pulumi.getter(name="k8sService")
    def k8s_service(self) -> 'outputs.ApigUpstreamUpstreamSpecVeMlpK8sService':
        """
        The k8s service of mlp.
        """
        return pulumi.get(self, "k8s_service")

    @property
    @pulumi.getter(name="serviceDiscoverType")
    def service_discover_type(self) -> str:
        """
        The service discover type of mlp.
        """
        return pulumi.get(self, "service_discover_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The service id of mlp.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        The service name of mlp.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceUrl")
    def service_url(self) -> Optional[str]:
        """
        The service url of mlp.
        """
        return pulumi.get(self, "service_url")

    @property
    @pulumi.getter(name="upstreamSourceId")
    def upstream_source_id(self) -> Optional[str]:
        """
        The upstream source id.
        """
        return pulumi.get(self, "upstream_source_id")


@pulumi.output_type
class ApigUpstreamUpstreamSpecVeMlpK8sService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterInfo":
            suggest = "cluster_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamUpstreamSpecVeMlpK8sService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamUpstreamSpecVeMlpK8sService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamUpstreamSpecVeMlpK8sService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_info: 'outputs.ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfo',
                 name: str,
                 namespace: str,
                 port: int):
        """
        :param 'ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoArgs' cluster_info: The cluster info of k8s service.
        :param str name: The name of k8s service.
        :param str namespace: The namespace of k8s service.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "cluster_info", cluster_info)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="clusterInfo")
    def cluster_info(self) -> 'outputs.ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfo':
        """
        The cluster info of k8s service.
        """
        return pulumi.get(self, "cluster_info")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of k8s service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "clusterName":
            suggest = "cluster_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: int,
                 cluster_name: str):
        """
        :param int account_id: The account id of k8s service.
        :param str cluster_name: The cluster name of k8s service.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> int:
        """
        The account id of k8s service.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The cluster name of k8s service.
        """
        return pulumi.get(self, "cluster_name")


@pulumi.output_type
class ApigUpstreamVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 labels: Optional[Sequence['outputs.ApigUpstreamVersionDetailLabel']] = None,
                 name: Optional[str] = None,
                 update_time: Optional[str] = None):
        """
        :param Sequence['ApigUpstreamVersionDetailLabelArgs'] labels: The labels of apig upstream version.
        :param str name: The name of the apig upstream.
        :param str update_time: The update time of apig upstream version.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.ApigUpstreamVersionDetailLabel']]:
        """
        The labels of apig upstream version.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the apig upstream.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class ApigUpstreamVersionDetailLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The key of apig upstream version label.
        :param str value: The value of apig upstream version label.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of apig upstream version label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of apig upstream version label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApigUpstreamVersionUpstreamVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigUpstreamVersionUpstreamVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigUpstreamVersionUpstreamVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigUpstreamVersionUpstreamVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 labels: Optional[Sequence['outputs.ApigUpstreamVersionUpstreamVersionLabel']] = None,
                 update_time: Optional[str] = None):
        """
        :param str name: The name of apig upstream version.
        :param Sequence['ApigUpstreamVersionUpstreamVersionLabelArgs'] labels: The labels of apig upstream version.
        :param str update_time: The update time of apig upstream version.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream version.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.ApigUpstreamVersionUpstreamVersionLabel']]:
        """
        The labels of apig upstream version.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class ApigUpstreamVersionUpstreamVersionLabel(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of apig upstream version label.
        :param str value: The value of apig upstream version label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of apig upstream version label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of apig upstream version label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CustomDomainsCustomDomainResult(dict):
    def __init__(__self__, *,
                 certificate_id: str,
                 comments: str,
                 create_time: str,
                 domain: str,
                 id: str,
                 protocols: Sequence[str],
                 resource_type: str,
                 service_id: str,
                 ssl_redirect: bool,
                 status: str,
                 type: str,
                 update_time: str):
        """
        :param str certificate_id: The id of the certificate.
        :param str comments: The comments of the custom domain.
        :param str create_time: The create time of the custom domain.
        :param str domain: The custom domain of the api gateway service.
        :param str id: The id of the custom domain.
        :param Sequence[str] protocols: The protocol of the custom domain.
        :param str resource_type: The resource type of domain. Valid values: `Console`, `Ingress`.
        :param str service_id: The id of api gateway service.
        :param bool ssl_redirect: Whether to redirect https.
        :param str status: The status of the custom domain.
        :param str type: The type of the domain.
        :param str update_time: The update time of the custom domain.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "ssl_redirect", ssl_redirect)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        The id of the certificate.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        The comments of the custom domain.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the custom domain.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The custom domain of the api gateway service.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the custom domain.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocols(self) -> Sequence[str]:
        """
        The protocol of the custom domain.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type of domain. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The id of api gateway service.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="sslRedirect")
    def ssl_redirect(self) -> bool:
        """
        Whether to redirect https.
        """
        return pulumi.get(self, "ssl_redirect")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the custom domain.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of the custom domain.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GatewayServicesGatewayServiceResult(dict):
    def __init__(__self__, *,
                 auth_specs: Sequence['outputs.GatewayServicesGatewayServiceAuthSpecResult'],
                 comments: str,
                 create_time: str,
                 custom_domains: Sequence['outputs.GatewayServicesGatewayServiceCustomDomainResult'],
                 domains: Sequence['outputs.GatewayServicesGatewayServiceDomainResult'],
                 gateway_id: str,
                 gateway_name: str,
                 id: str,
                 message: str,
                 name: str,
                 protocols: Sequence[str],
                 status: str):
        """
        :param Sequence['GatewayServicesGatewayServiceAuthSpecArgs'] auth_specs: The auth spec of the api gateway service.
        :param str comments: The comments of the api gateway service.
        :param str create_time: The create time of the api gateway service.
        :param Sequence['GatewayServicesGatewayServiceCustomDomainArgs'] custom_domains: The custom domains of the api gateway service.
        :param Sequence['GatewayServicesGatewayServiceDomainArgs'] domains: The domains of the api gateway service.
        :param str gateway_id: The gateway id of api gateway service.
        :param str gateway_name: The gateway name of the api gateway service.
        :param str id: The Id of the api gateway service.
        :param str message: The error message of the api gateway service.
        :param str name: The name of api gateway service. This field support fuzzy query.
        :param Sequence[str] protocols: The protocol of the api gateway service.
        :param str status: The status of api gateway service.
        """
        pulumi.set(__self__, "auth_specs", auth_specs)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_domains", custom_domains)
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "gateway_name", gateway_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authSpecs")
    def auth_specs(self) -> Sequence['outputs.GatewayServicesGatewayServiceAuthSpecResult']:
        """
        The auth spec of the api gateway service.
        """
        return pulumi.get(self, "auth_specs")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        The comments of the api gateway service.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the api gateway service.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customDomains")
    def custom_domains(self) -> Sequence['outputs.GatewayServicesGatewayServiceCustomDomainResult']:
        """
        The custom domains of the api gateway service.
        """
        return pulumi.get(self, "custom_domains")

    @property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.GatewayServicesGatewayServiceDomainResult']:
        """
        The domains of the api gateway service.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        The gateway id of api gateway service.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="gatewayName")
    def gateway_name(self) -> str:
        """
        The gateway name of the api gateway service.
        """
        return pulumi.get(self, "gateway_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of the api gateway service.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The error message of the api gateway service.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of api gateway service. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocols(self) -> Sequence[str]:
        """
        The protocol of the api gateway service.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of api gateway service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GatewayServicesGatewayServiceAuthSpecResult(dict):
    def __init__(__self__, *,
                 enable: bool):
        """
        :param bool enable: Whether the api gateway service enable auth.
        """
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway service enable auth.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class GatewayServicesGatewayServiceCustomDomainResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 id: str):
        """
        :param str domain: The domain of the api gateway service.
        :param str id: The Id of the api gateway service.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the api gateway service.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of the api gateway service.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GatewayServicesGatewayServiceDomainResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 type: str):
        """
        :param str domain: The domain of the api gateway service.
        :param str type: The type of the domain.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the api gateway service.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 backend_specs: Sequence['outputs.GatewaysGatewayBackendSpecResult'],
                 comments: str,
                 create_time: str,
                 id: str,
                 log_specs: Sequence['outputs.GatewaysGatewayLogSpecResult'],
                 message: str,
                 monitor_specs: Sequence['outputs.GatewaysGatewayMonitorSpecResult'],
                 name: str,
                 network_specs: Sequence['outputs.GatewaysGatewayNetworkSpecResult'],
                 project_name: str,
                 region: str,
                 resource_specs: Sequence['outputs.GatewaysGatewayResourceSpecResult'],
                 status: str,
                 tags: Sequence['outputs.GatewaysGatewayTagResult'],
                 type: str,
                 version: str):
        """
        :param Sequence['GatewaysGatewayBackendSpecArgs'] backend_specs: The backend spec of the api gateway.
        :param str comments: The comments of the api gateway.
        :param str create_time: The create time of the api gateway.
        :param str id: The Id of the api gateway.
        :param Sequence['GatewaysGatewayLogSpecArgs'] log_specs: The log spec of the api gateway.
        :param str message: The error message of the api gateway.
        :param Sequence['GatewaysGatewayMonitorSpecArgs'] monitor_specs: The monitor spec of the api gateway.
        :param str name: The name of api gateway. This field support fuzzy query.
        :param Sequence['GatewaysGatewayNetworkSpecArgs'] network_specs: The network spec of the api gateway.
        :param str project_name: The project name of api gateway.
        :param str region: The region of the api gateway.
        :param Sequence['GatewaysGatewayResourceSpecArgs'] resource_specs: The resource spec of the api gateway.
        :param str status: The status of api gateway.
        :param Sequence['GatewaysGatewayTagArgs'] tags: Tags.
        :param str type: The type of api gateway.
        :param str version: The version of the api gateway.
        """
        pulumi.set(__self__, "backend_specs", backend_specs)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "log_specs", log_specs)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "monitor_specs", monitor_specs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_specs", network_specs)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_specs", resource_specs)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="backendSpecs")
    def backend_specs(self) -> Sequence['outputs.GatewaysGatewayBackendSpecResult']:
        """
        The backend spec of the api gateway.
        """
        return pulumi.get(self, "backend_specs")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        The comments of the api gateway.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the api gateway.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of the api gateway.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logSpecs")
    def log_specs(self) -> Sequence['outputs.GatewaysGatewayLogSpecResult']:
        """
        The log spec of the api gateway.
        """
        return pulumi.get(self, "log_specs")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The error message of the api gateway.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="monitorSpecs")
    def monitor_specs(self) -> Sequence['outputs.GatewaysGatewayMonitorSpecResult']:
        """
        The monitor spec of the api gateway.
        """
        return pulumi.get(self, "monitor_specs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of api gateway. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkSpecs")
    def network_specs(self) -> Sequence['outputs.GatewaysGatewayNetworkSpecResult']:
        """
        The network spec of the api gateway.
        """
        return pulumi.get(self, "network_specs")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The project name of api gateway.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the api gateway.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceSpecs")
    def resource_specs(self) -> Sequence['outputs.GatewaysGatewayResourceSpecResult']:
        """
        The resource spec of the api gateway.
        """
        return pulumi.get(self, "resource_specs")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of api gateway.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GatewaysGatewayTagResult']:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of api gateway.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the api gateway.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GatewaysGatewayBackendSpecResult(dict):
    def __init__(__self__, *,
                 is_vke_with_flannel_cni_supported: bool,
                 vke_pod_cidr: str):
        """
        :param bool is_vke_with_flannel_cni_supported: Whether the api gateway support vke flannel cni.
        :param str vke_pod_cidr: The vke pod cidr of the api gateway.
        """
        pulumi.set(__self__, "is_vke_with_flannel_cni_supported", is_vke_with_flannel_cni_supported)
        pulumi.set(__self__, "vke_pod_cidr", vke_pod_cidr)

    @property
    @pulumi.getter(name="isVkeWithFlannelCniSupported")
    def is_vke_with_flannel_cni_supported(self) -> bool:
        """
        Whether the api gateway support vke flannel cni.
        """
        return pulumi.get(self, "is_vke_with_flannel_cni_supported")

    @property
    @pulumi.getter(name="vkePodCidr")
    def vke_pod_cidr(self) -> str:
        """
        The vke pod cidr of the api gateway.
        """
        return pulumi.get(self, "vke_pod_cidr")


@pulumi.output_type
class GatewaysGatewayLogSpecResult(dict):
    def __init__(__self__, *,
                 enable: bool,
                 project_id: str,
                 topic_id: str):
        """
        :param bool enable: Whether the api gateway enable monitor.
        :param str project_id: The project id of the tls.
        :param str topic_id: The topic id of the tls.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway enable monitor.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The project id of the tls.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        The topic id of the tls.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GatewaysGatewayMonitorSpecResult(dict):
    def __init__(__self__, *,
                 enable: bool,
                 workspace_id: str):
        """
        :param bool enable: Whether the api gateway enable monitor.
        :param str workspace_id: The workspace id of the monitor.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway enable monitor.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace id of the monitor.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GatewaysGatewayNetworkSpecResult(dict):
    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param Sequence[str] subnet_ids: The subnet ids of the api gateway.
        :param str vpc_id: The vpc id of the api gateway.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The subnet ids of the api gateway.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The vpc id of the api gateway.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GatewaysGatewayResourceSpecResult(dict):
    def __init__(__self__, *,
                 clb_spec_code: str,
                 instance_spec_code: str,
                 network_types: Sequence['outputs.GatewaysGatewayResourceSpecNetworkTypeResult'],
                 public_network_bandwidth: int,
                 public_network_billing_type: str,
                 replicas: int):
        """
        :param str clb_spec_code: The clb spec code of the resource spec.
        :param str instance_spec_code: The instance spec code of the resource spec.
        :param Sequence['GatewaysGatewayResourceSpecNetworkTypeArgs'] network_types: The network type of the api gateway.
        :param int public_network_bandwidth: The public network bandwidth of the resource spec.
        :param str public_network_billing_type: The public network billing type of the resource spec.
        :param int replicas: The replicas of the resource spec.
        """
        pulumi.set(__self__, "clb_spec_code", clb_spec_code)
        pulumi.set(__self__, "instance_spec_code", instance_spec_code)
        pulumi.set(__self__, "network_types", network_types)
        pulumi.set(__self__, "public_network_bandwidth", public_network_bandwidth)
        pulumi.set(__self__, "public_network_billing_type", public_network_billing_type)
        pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter(name="clbSpecCode")
    def clb_spec_code(self) -> str:
        """
        The clb spec code of the resource spec.
        """
        return pulumi.get(self, "clb_spec_code")

    @property
    @pulumi.getter(name="instanceSpecCode")
    def instance_spec_code(self) -> str:
        """
        The instance spec code of the resource spec.
        """
        return pulumi.get(self, "instance_spec_code")

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence['outputs.GatewaysGatewayResourceSpecNetworkTypeResult']:
        """
        The network type of the api gateway.
        """
        return pulumi.get(self, "network_types")

    @property
    @pulumi.getter(name="publicNetworkBandwidth")
    def public_network_bandwidth(self) -> int:
        """
        The public network bandwidth of the resource spec.
        """
        return pulumi.get(self, "public_network_bandwidth")

    @property
    @pulumi.getter(name="publicNetworkBillingType")
    def public_network_billing_type(self) -> str:
        """
        The public network billing type of the resource spec.
        """
        return pulumi.get(self, "public_network_billing_type")

    @property
    @pulumi.getter
    def replicas(self) -> int:
        """
        The replicas of the resource spec.
        """
        return pulumi.get(self, "replicas")


@pulumi.output_type
class GatewaysGatewayResourceSpecNetworkTypeResult(dict):
    def __init__(__self__, *,
                 enable_private_network: bool,
                 enable_public_network: bool):
        """
        :param bool enable_private_network: Whether the api gateway enable private network.
        :param bool enable_public_network: Whether the api gateway enable public network.
        """
        pulumi.set(__self__, "enable_private_network", enable_private_network)
        pulumi.set(__self__, "enable_public_network", enable_public_network)

    @property
    @pulumi.getter(name="enablePrivateNetwork")
    def enable_private_network(self) -> bool:
        """
        Whether the api gateway enable private network.
        """
        return pulumi.get(self, "enable_private_network")

    @property
    @pulumi.getter(name="enablePublicNetwork")
    def enable_public_network(self) -> bool:
        """
        Whether the api gateway enable public network.
        """
        return pulumi.get(self, "enable_public_network")


@pulumi.output_type
class GatewaysGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GatewaysTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RoutesRouteResult(dict):
    def __init__(__self__, *,
                 advanced_settings: Sequence['outputs.RoutesRouteAdvancedSettingResult'],
                 create_time: str,
                 custom_domains: Sequence['outputs.RoutesRouteCustomDomainResult'],
                 domains: Sequence['outputs.RoutesRouteDomainResult'],
                 enable: bool,
                 id: str,
                 match_rules: Sequence['outputs.RoutesRouteMatchRuleResult'],
                 name: str,
                 priority: int,
                 reason: str,
                 resource_type: str,
                 service_id: str,
                 service_name: str,
                 status: str,
                 update_time: str,
                 upstream_lists: Sequence['outputs.RoutesRouteUpstreamListResult']):
        """
        :param Sequence['RoutesRouteAdvancedSettingArgs'] advanced_settings: The advanced setting of the api gateway route.
        :param str create_time: The create time of the api gateway route.
        :param Sequence['RoutesRouteCustomDomainArgs'] custom_domains: The custom domains of the api gateway route.
        :param Sequence['RoutesRouteDomainArgs'] domains: The domains of the api gateway route.
        :param bool enable: Whether the api gateway route is enabled.
        :param str id: The id of the api gateway route.
        :param Sequence['RoutesRouteMatchRuleArgs'] match_rules: The match rule of the api gateway route.
        :param str name: The name of api gateway route. This field support fuzzy query.
        :param int priority: The priority of the api gateway route.
        :param str reason: The reason of the api gateway route.
        :param str resource_type: The resource type of route. Valid values: `Console`, `Ingress`.
        :param str service_id: The id of api gateway service.
        :param str service_name: The name of the api gateway service.
        :param str status: The status of the api gateway route.
        :param str update_time: The update time of the api gateway route.
        :param Sequence['RoutesRouteUpstreamListArgs'] upstream_lists: The upstream list of the api gateway route.
        """
        pulumi.set(__self__, "advanced_settings", advanced_settings)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_domains", custom_domains)
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match_rules", match_rules)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "upstream_lists", upstream_lists)

    @property
    @pulumi.getter(name="advancedSettings")
    def advanced_settings(self) -> Sequence['outputs.RoutesRouteAdvancedSettingResult']:
        """
        The advanced setting of the api gateway route.
        """
        return pulumi.get(self, "advanced_settings")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the api gateway route.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customDomains")
    def custom_domains(self) -> Sequence['outputs.RoutesRouteCustomDomainResult']:
        """
        The custom domains of the api gateway route.
        """
        return pulumi.get(self, "custom_domains")

    @property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.RoutesRouteDomainResult']:
        """
        The domains of the api gateway route.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway route is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the api gateway route.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> Sequence['outputs.RoutesRouteMatchRuleResult']:
        """
        The match rule of the api gateway route.
        """
        return pulumi.get(self, "match_rules")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of api gateway route. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The priority of the api gateway route.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        The reason of the api gateway route.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type of route. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The id of api gateway service.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the api gateway service.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the api gateway route.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of the api gateway route.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="upstreamLists")
    def upstream_lists(self) -> Sequence['outputs.RoutesRouteUpstreamListResult']:
        """
        The upstream list of the api gateway route.
        """
        return pulumi.get(self, "upstream_lists")


@pulumi.output_type
class RoutesRouteAdvancedSettingResult(dict):
    def __init__(__self__, *,
                 cors_policy_settings: Sequence['outputs.RoutesRouteAdvancedSettingCorsPolicySettingResult'],
                 header_operations: Sequence['outputs.RoutesRouteAdvancedSettingHeaderOperationResult'],
                 mirror_policies: Sequence['outputs.RoutesRouteAdvancedSettingMirrorPolicyResult'],
                 retry_policy_settings: Sequence['outputs.RoutesRouteAdvancedSettingRetryPolicySettingResult'],
                 timeout_settings: Sequence['outputs.RoutesRouteAdvancedSettingTimeoutSettingResult'],
                 url_rewrite_settings: Sequence['outputs.RoutesRouteAdvancedSettingUrlRewriteSettingResult']):
        """
        :param Sequence['RoutesRouteAdvancedSettingCorsPolicySettingArgs'] cors_policy_settings: The cors policy setting of the api gateway route.
        :param Sequence['RoutesRouteAdvancedSettingHeaderOperationArgs'] header_operations: The header operations of the api gateway route.
        :param Sequence['RoutesRouteAdvancedSettingMirrorPolicyArgs'] mirror_policies: The mirror policies of the api gateway route.
        :param Sequence['RoutesRouteAdvancedSettingRetryPolicySettingArgs'] retry_policy_settings: The retry policy setting of the api gateway route.
        :param Sequence['RoutesRouteAdvancedSettingTimeoutSettingArgs'] timeout_settings: The timeout setting of the api gateway route.
        :param Sequence['RoutesRouteAdvancedSettingUrlRewriteSettingArgs'] url_rewrite_settings: The url rewrite setting of the api gateway route.
        """
        pulumi.set(__self__, "cors_policy_settings", cors_policy_settings)
        pulumi.set(__self__, "header_operations", header_operations)
        pulumi.set(__self__, "mirror_policies", mirror_policies)
        pulumi.set(__self__, "retry_policy_settings", retry_policy_settings)
        pulumi.set(__self__, "timeout_settings", timeout_settings)
        pulumi.set(__self__, "url_rewrite_settings", url_rewrite_settings)

    @property
    @pulumi.getter(name="corsPolicySettings")
    def cors_policy_settings(self) -> Sequence['outputs.RoutesRouteAdvancedSettingCorsPolicySettingResult']:
        """
        The cors policy setting of the api gateway route.
        """
        return pulumi.get(self, "cors_policy_settings")

    @property
    @pulumi.getter(name="headerOperations")
    def header_operations(self) -> Sequence['outputs.RoutesRouteAdvancedSettingHeaderOperationResult']:
        """
        The header operations of the api gateway route.
        """
        return pulumi.get(self, "header_operations")

    @property
    @pulumi.getter(name="mirrorPolicies")
    def mirror_policies(self) -> Sequence['outputs.RoutesRouteAdvancedSettingMirrorPolicyResult']:
        """
        The mirror policies of the api gateway route.
        """
        return pulumi.get(self, "mirror_policies")

    @property
    @pulumi.getter(name="retryPolicySettings")
    def retry_policy_settings(self) -> Sequence['outputs.RoutesRouteAdvancedSettingRetryPolicySettingResult']:
        """
        The retry policy setting of the api gateway route.
        """
        return pulumi.get(self, "retry_policy_settings")

    @property
    @pulumi.getter(name="timeoutSettings")
    def timeout_settings(self) -> Sequence['outputs.RoutesRouteAdvancedSettingTimeoutSettingResult']:
        """
        The timeout setting of the api gateway route.
        """
        return pulumi.get(self, "timeout_settings")

    @property
    @pulumi.getter(name="urlRewriteSettings")
    def url_rewrite_settings(self) -> Sequence['outputs.RoutesRouteAdvancedSettingUrlRewriteSettingResult']:
        """
        The url rewrite setting of the api gateway route.
        """
        return pulumi.get(self, "url_rewrite_settings")


@pulumi.output_type
class RoutesRouteAdvancedSettingCorsPolicySettingResult(dict):
    def __init__(__self__, *,
                 enable: bool):
        """
        :param bool enable: Whether the api gateway route is enabled.
        """
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway route is enabled.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class RoutesRouteAdvancedSettingHeaderOperationResult(dict):
    def __init__(__self__, *,
                 direction_type: str,
                 key: str,
                 operation: str,
                 value: str):
        """
        :param str direction_type: The direction type of the header.
        :param str key: The key of the query string.
        :param str operation: The operation of the header.
        :param str value: The path of the api gateway route.
        """
        pulumi.set(__self__, "direction_type", direction_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="directionType")
    def direction_type(self) -> str:
        """
        The direction type of the header.
        """
        return pulumi.get(self, "direction_type")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the query string.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The operation of the header.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RoutesRouteAdvancedSettingMirrorPolicyResult(dict):
    def __init__(__self__, *,
                 percents: Sequence['outputs.RoutesRouteAdvancedSettingMirrorPolicyPercentResult'],
                 upstreams: Sequence['outputs.RoutesRouteAdvancedSettingMirrorPolicyUpstreamResult']):
        """
        :param Sequence['RoutesRouteAdvancedSettingMirrorPolicyPercentArgs'] percents: The percent of the mirror policy.
        :param Sequence['RoutesRouteAdvancedSettingMirrorPolicyUpstreamArgs'] upstreams: The upstream of the mirror policy.
        """
        pulumi.set(__self__, "percents", percents)
        pulumi.set(__self__, "upstreams", upstreams)

    @property
    @pulumi.getter
    def percents(self) -> Sequence['outputs.RoutesRouteAdvancedSettingMirrorPolicyPercentResult']:
        """
        The percent of the mirror policy.
        """
        return pulumi.get(self, "percents")

    @property
    @pulumi.getter
    def upstreams(self) -> Sequence['outputs.RoutesRouteAdvancedSettingMirrorPolicyUpstreamResult']:
        """
        The upstream of the mirror policy.
        """
        return pulumi.get(self, "upstreams")


@pulumi.output_type
class RoutesRouteAdvancedSettingMirrorPolicyPercentResult(dict):
    def __init__(__self__, *,
                 value: int):
        """
        :param int value: The path of the api gateway route.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RoutesRouteAdvancedSettingMirrorPolicyUpstreamResult(dict):
    def __init__(__self__, *,
                 type: str,
                 upstream_id: str,
                 version: str):
        """
        :param str type: The type of the domain.
        :param str upstream_id: The id of api gateway upstream.
        :param str version: The version of the api gateway upstream.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "upstream_id", upstream_id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> str:
        """
        The id of api gateway upstream.
        """
        return pulumi.get(self, "upstream_id")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the api gateway upstream.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class RoutesRouteAdvancedSettingRetryPolicySettingResult(dict):
    def __init__(__self__, *,
                 attempts: int,
                 enable: bool,
                 http_codes: Sequence[str],
                 per_try_timeout: int,
                 retry_ons: Sequence[str]):
        """
        :param int attempts: The attempts of the api gateway route.
        :param bool enable: Whether the api gateway route is enabled.
        :param Sequence[str] http_codes: The http codes of the api gateway route.
        :param int per_try_timeout: The per try timeout of the api gateway route.
        :param Sequence[str] retry_ons: The retry on of the api gateway route.
        """
        pulumi.set(__self__, "attempts", attempts)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "http_codes", http_codes)
        pulumi.set(__self__, "per_try_timeout", per_try_timeout)
        pulumi.set(__self__, "retry_ons", retry_ons)

    @property
    @pulumi.getter
    def attempts(self) -> int:
        """
        The attempts of the api gateway route.
        """
        return pulumi.get(self, "attempts")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway route is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="httpCodes")
    def http_codes(self) -> Sequence[str]:
        """
        The http codes of the api gateway route.
        """
        return pulumi.get(self, "http_codes")

    @property
    @pulumi.getter(name="perTryTimeout")
    def per_try_timeout(self) -> int:
        """
        The per try timeout of the api gateway route.
        """
        return pulumi.get(self, "per_try_timeout")

    @property
    @pulumi.getter(name="retryOns")
    def retry_ons(self) -> Sequence[str]:
        """
        The retry on of the api gateway route.
        """
        return pulumi.get(self, "retry_ons")


@pulumi.output_type
class RoutesRouteAdvancedSettingTimeoutSettingResult(dict):
    def __init__(__self__, *,
                 enable: bool,
                 timeout: int):
        """
        :param bool enable: Whether the api gateway route is enabled.
        :param int timeout: The timeout of the api gateway route.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway route is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        The timeout of the api gateway route.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class RoutesRouteAdvancedSettingUrlRewriteSettingResult(dict):
    def __init__(__self__, *,
                 enable: bool,
                 url_rewrite: str):
        """
        :param bool enable: Whether the api gateway route is enabled.
        :param str url_rewrite: The url rewrite path of the api gateway route.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "url_rewrite", url_rewrite)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway route is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> str:
        """
        The url rewrite path of the api gateway route.
        """
        return pulumi.get(self, "url_rewrite")


@pulumi.output_type
class RoutesRouteCustomDomainResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 id: str):
        """
        :param str domain: The domain of the api gateway route.
        :param str id: The id of the api gateway route.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the api gateway route.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the api gateway route.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class RoutesRouteDomainResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 type: str):
        """
        :param str domain: The domain of the api gateway route.
        :param str type: The type of the domain.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the api gateway route.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RoutesRouteMatchRuleResult(dict):
    def __init__(__self__, *,
                 headers: Sequence['outputs.RoutesRouteMatchRuleHeaderResult'],
                 methods: Sequence[str],
                 paths: Sequence['outputs.RoutesRouteMatchRulePathResult'],
                 query_strings: Sequence['outputs.RoutesRouteMatchRuleQueryStringResult']):
        """
        :param Sequence['RoutesRouteMatchRuleHeaderArgs'] headers: The header of the api gateway route.
        :param Sequence[str] methods: The method of the api gateway route.
        :param Sequence['RoutesRouteMatchRulePathArgs'] paths: The path of api gateway route.
        :param Sequence['RoutesRouteMatchRuleQueryStringArgs'] query_strings: The query string of the api gateway route.
        """
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "methods", methods)
        pulumi.set(__self__, "paths", paths)
        pulumi.set(__self__, "query_strings", query_strings)

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.RoutesRouteMatchRuleHeaderResult']:
        """
        The header of the api gateway route.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def methods(self) -> Sequence[str]:
        """
        The method of the api gateway route.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def paths(self) -> Sequence['outputs.RoutesRouteMatchRulePathResult']:
        """
        The path of api gateway route.
        """
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Sequence['outputs.RoutesRouteMatchRuleQueryStringResult']:
        """
        The query string of the api gateway route.
        """
        return pulumi.get(self, "query_strings")


@pulumi.output_type
class RoutesRouteMatchRuleHeaderResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence['outputs.RoutesRouteMatchRuleHeaderValueResult']):
        """
        :param str key: The key of the query string.
        :param Sequence['RoutesRouteMatchRuleHeaderValueArgs'] values: The path of the api gateway route.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the query string.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.RoutesRouteMatchRuleHeaderValueResult']:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RoutesRouteMatchRuleHeaderValueResult(dict):
    def __init__(__self__, *,
                 match_content: str,
                 match_type: str):
        """
        :param str match_content: The match content of the api gateway route.
        :param str match_type: The match type of the api gateway route.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        """
        The match type of the api gateway route.
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class RoutesRouteMatchRulePathResult(dict):
    def __init__(__self__, *,
                 match_content: str,
                 match_type: str):
        """
        :param str match_content: The match content of the api gateway route.
        :param str match_type: The match type of the api gateway route.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        """
        The match type of the api gateway route.
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class RoutesRouteMatchRuleQueryStringResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence['outputs.RoutesRouteMatchRuleQueryStringValueResult']):
        """
        :param str key: The key of the query string.
        :param Sequence['RoutesRouteMatchRuleQueryStringValueArgs'] values: The path of the api gateway route.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the query string.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.RoutesRouteMatchRuleQueryStringValueResult']:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RoutesRouteMatchRuleQueryStringValueResult(dict):
    def __init__(__self__, *,
                 match_content: str,
                 match_type: str):
        """
        :param str match_content: The match content of the api gateway route.
        :param str match_type: The match type of the api gateway route.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        """
        The match type of the api gateway route.
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class RoutesRouteUpstreamListResult(dict):
    def __init__(__self__, *,
                 ai_provider_settings: Sequence['outputs.RoutesRouteUpstreamListAiProviderSettingResult'],
                 upstream_id: str,
                 version: str,
                 weight: int):
        """
        :param Sequence['RoutesRouteUpstreamListAiProviderSettingArgs'] ai_provider_settings: The ai provider settings of the api gateway route.
        :param str upstream_id: The id of api gateway upstream.
        :param str version: The version of the api gateway upstream.
        :param int weight: The weight of the api gateway upstream.
        """
        pulumi.set(__self__, "ai_provider_settings", ai_provider_settings)
        pulumi.set(__self__, "upstream_id", upstream_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="aiProviderSettings")
    def ai_provider_settings(self) -> Sequence['outputs.RoutesRouteUpstreamListAiProviderSettingResult']:
        """
        The ai provider settings of the api gateway route.
        """
        return pulumi.get(self, "ai_provider_settings")

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> str:
        """
        The id of api gateway upstream.
        """
        return pulumi.get(self, "upstream_id")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the api gateway upstream.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        The weight of the api gateway upstream.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class RoutesRouteUpstreamListAiProviderSettingResult(dict):
    def __init__(__self__, *,
                 model: str,
                 target_path: str):
        """
        :param str model: The model of the ai provider.
        :param str target_path: The target path of the ai provider.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "target_path", target_path)

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The model of the ai provider.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="targetPath")
    def target_path(self) -> str:
        """
        The target path of the ai provider.
        """
        return pulumi.get(self, "target_path")


@pulumi.output_type
class UpstreamSourcesUpstreamSourceResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 create_time: str,
                 gateway_id: str,
                 id: str,
                 ingress_settings: Sequence['outputs.UpstreamSourcesUpstreamSourceIngressSettingResult'],
                 source_specs: Sequence['outputs.UpstreamSourcesUpstreamSourceSourceSpecResult'],
                 source_type: str,
                 status: str,
                 status_message: str,
                 update_time: str):
        """
        :param str comments: The comments of apig upstream source.
        :param str create_time: The create time of apig upstream source.
        :param str gateway_id: The id of api gateway.
        :param str id: The id of apig upstream source.
        :param Sequence['UpstreamSourcesUpstreamSourceIngressSettingArgs'] ingress_settings: The ingress settings of apig upstream source.
        :param Sequence['UpstreamSourcesUpstreamSourceSourceSpecArgs'] source_specs: The source spec of apig upstream source.
        :param str source_type: The source type of apig upstream source. Valid values: `K8S`, `Nacos`.
        :param str status: The status of apig upstream source. Valid values: `Syncing`, `SyncedSucceed`, `SyncedFailed`.
        :param str status_message: The status message of apig upstream source.
        :param str update_time: The update time of apig upstream source.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingress_settings", ingress_settings)
        pulumi.set(__self__, "source_specs", source_specs)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        The comments of apig upstream source.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of apig upstream source.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        The id of api gateway.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of apig upstream source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressSettings")
    def ingress_settings(self) -> Sequence['outputs.UpstreamSourcesUpstreamSourceIngressSettingResult']:
        """
        The ingress settings of apig upstream source.
        """
        return pulumi.get(self, "ingress_settings")

    @property
    @pulumi.getter(name="sourceSpecs")
    def source_specs(self) -> Sequence['outputs.UpstreamSourcesUpstreamSourceSourceSpecResult']:
        """
        The source spec of apig upstream source.
        """
        return pulumi.get(self, "source_specs")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        The source type of apig upstream source. Valid values: `K8S`, `Nacos`.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of apig upstream source. Valid values: `Syncing`, `SyncedSucceed`, `SyncedFailed`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        The status message of apig upstream source.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of apig upstream source.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class UpstreamSourcesUpstreamSourceIngressSettingResult(dict):
    def __init__(__self__, *,
                 enable_all_ingress_classes: bool,
                 enable_all_namespaces: bool,
                 enable_ingress: bool,
                 enable_ingress_without_ingress_class: bool,
                 ingress_classes: Sequence[str],
                 update_status: bool,
                 watch_namespaces: Sequence[str]):
        """
        :param bool enable_all_ingress_classes: Whether to enable all ingress classes.
        :param bool enable_all_namespaces: Whether to enable all namespaces.
        :param bool enable_ingress: The enable ingress of apig upstream source.
        :param bool enable_ingress_without_ingress_class: Whether to enable ingress without ingress class.
        :param Sequence[str] ingress_classes: The ingress classes of ingress settings.
        :param bool update_status: The update status of ingress settings.
        :param Sequence[str] watch_namespaces: The watch namespaces of ingress settings.
        """
        pulumi.set(__self__, "enable_all_ingress_classes", enable_all_ingress_classes)
        pulumi.set(__self__, "enable_all_namespaces", enable_all_namespaces)
        pulumi.set(__self__, "enable_ingress", enable_ingress)
        pulumi.set(__self__, "enable_ingress_without_ingress_class", enable_ingress_without_ingress_class)
        pulumi.set(__self__, "ingress_classes", ingress_classes)
        pulumi.set(__self__, "update_status", update_status)
        pulumi.set(__self__, "watch_namespaces", watch_namespaces)

    @property
    @pulumi.getter(name="enableAllIngressClasses")
    def enable_all_ingress_classes(self) -> bool:
        """
        Whether to enable all ingress classes.
        """
        return pulumi.get(self, "enable_all_ingress_classes")

    @property
    @pulumi.getter(name="enableAllNamespaces")
    def enable_all_namespaces(self) -> bool:
        """
        Whether to enable all namespaces.
        """
        return pulumi.get(self, "enable_all_namespaces")

    @property
    @pulumi.getter(name="enableIngress")
    def enable_ingress(self) -> bool:
        """
        The enable ingress of apig upstream source.
        """
        return pulumi.get(self, "enable_ingress")

    @property
    @pulumi.getter(name="enableIngressWithoutIngressClass")
    def enable_ingress_without_ingress_class(self) -> bool:
        """
        Whether to enable ingress without ingress class.
        """
        return pulumi.get(self, "enable_ingress_without_ingress_class")

    @property
    @pulumi.getter(name="ingressClasses")
    def ingress_classes(self) -> Sequence[str]:
        """
        The ingress classes of ingress settings.
        """
        return pulumi.get(self, "ingress_classes")

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> bool:
        """
        The update status of ingress settings.
        """
        return pulumi.get(self, "update_status")

    @property
    @pulumi.getter(name="watchNamespaces")
    def watch_namespaces(self) -> Sequence[str]:
        """
        The watch namespaces of ingress settings.
        """
        return pulumi.get(self, "watch_namespaces")


@pulumi.output_type
class UpstreamSourcesUpstreamSourceSourceSpecResult(dict):
    def __init__(__self__, *,
                 k8s_sources: Sequence['outputs.UpstreamSourcesUpstreamSourceSourceSpecK8sSourceResult'],
                 nacos_sources: Sequence['outputs.UpstreamSourcesUpstreamSourceSourceSpecNacosSourceResult']):
        """
        :param Sequence['UpstreamSourcesUpstreamSourceSourceSpecK8sSourceArgs'] k8s_sources: The k8s source of apig upstream source.
        :param Sequence['UpstreamSourcesUpstreamSourceSourceSpecNacosSourceArgs'] nacos_sources: The nacos source of apig upstream source.
        """
        pulumi.set(__self__, "k8s_sources", k8s_sources)
        pulumi.set(__self__, "nacos_sources", nacos_sources)

    @property
    @pulumi.getter(name="k8sSources")
    def k8s_sources(self) -> Sequence['outputs.UpstreamSourcesUpstreamSourceSourceSpecK8sSourceResult']:
        """
        The k8s source of apig upstream source.
        """
        return pulumi.get(self, "k8s_sources")

    @property
    @pulumi.getter(name="nacosSources")
    def nacos_sources(self) -> Sequence['outputs.UpstreamSourcesUpstreamSourceSourceSpecNacosSourceResult']:
        """
        The nacos source of apig upstream source.
        """
        return pulumi.get(self, "nacos_sources")


@pulumi.output_type
class UpstreamSourcesUpstreamSourceSourceSpecK8sSourceResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_type: str):
        """
        :param str cluster_id: The cluster id of k8s source.
        :param str cluster_type: The cluster type of k8s source.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The cluster id of k8s source.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        The cluster type of k8s source.
        """
        return pulumi.get(self, "cluster_type")


@pulumi.output_type
class UpstreamSourcesUpstreamSourceSourceSpecNacosSourceResult(dict):
    def __init__(__self__, *,
                 address: str,
                 auth_configs: Sequence['outputs.UpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigResult'],
                 context_path: str,
                 grpc_port: int,
                 http_port: int,
                 nacos_id: str,
                 nacos_name: str):
        """
        :param str address: The address of nacos source.
        :param Sequence['UpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigArgs'] auth_configs: The auth config of nacos source.
        :param str context_path: The context path of nacos source.
        :param int grpc_port: The grpc port of nacos source.
        :param int http_port: The http port of nacos source.
        :param str nacos_id: The nacos id of nacos source.
        :param str nacos_name: The nacos name of nacos source.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "auth_configs", auth_configs)
        pulumi.set(__self__, "context_path", context_path)
        pulumi.set(__self__, "grpc_port", grpc_port)
        pulumi.set(__self__, "http_port", http_port)
        pulumi.set(__self__, "nacos_id", nacos_id)
        pulumi.set(__self__, "nacos_name", nacos_name)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of nacos source.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="authConfigs")
    def auth_configs(self) -> Sequence['outputs.UpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigResult']:
        """
        The auth config of nacos source.
        """
        return pulumi.get(self, "auth_configs")

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> str:
        """
        The context path of nacos source.
        """
        return pulumi.get(self, "context_path")

    @property
    @pulumi.getter(name="grpcPort")
    def grpc_port(self) -> int:
        """
        The grpc port of nacos source.
        """
        return pulumi.get(self, "grpc_port")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> int:
        """
        The http port of nacos source.
        """
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="nacosId")
    def nacos_id(self) -> str:
        """
        The nacos id of nacos source.
        """
        return pulumi.get(self, "nacos_id")

    @property
    @pulumi.getter(name="nacosName")
    def nacos_name(self) -> str:
        """
        The nacos name of nacos source.
        """
        return pulumi.get(self, "nacos_name")


@pulumi.output_type
class UpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigResult(dict):
    def __init__(__self__, *,
                 basics: Sequence['outputs.UpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult']):
        """
        :param Sequence['UpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs'] basics: The basic auth config of nacos source.
        """
        pulumi.set(__self__, "basics", basics)

    @property
    @pulumi.getter
    def basics(self) -> Sequence['outputs.UpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult']:
        """
        The basic auth config of nacos source.
        """
        return pulumi.get(self, "basics")


@pulumi.output_type
class UpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The password of basic auth config.
        :param str username: The username of basic auth config.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of basic auth config.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username of basic auth config.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class UpstreamVersionsVersionResult(dict):
    def __init__(__self__, *,
                 labels: Sequence['outputs.UpstreamVersionsVersionLabelResult'],
                 name: str,
                 update_time: str):
        """
        :param Sequence['UpstreamVersionsVersionLabelArgs'] labels: The labels of apig upstream version.
        :param str name: The name of apig upstream version.
        :param str update_time: The update time of apig upstream version.
        """
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.UpstreamVersionsVersionLabelResult']:
        """
        The labels of apig upstream version.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream version.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class UpstreamVersionsVersionLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of apig upstream version label.
        :param str value: The value of apig upstream version label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of apig upstream version label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of apig upstream version label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UpstreamsUpstreamResult(dict):
    def __init__(__self__, *,
                 backend_target_lists: Sequence['outputs.UpstreamsUpstreamBackendTargetListResult'],
                 circuit_breaking_settings: Sequence['outputs.UpstreamsUpstreamCircuitBreakingSettingResult'],
                 comments: str,
                 create_time: str,
                 gateway_id: str,
                 id: str,
                 load_balancer_settings: Sequence['outputs.UpstreamsUpstreamLoadBalancerSettingResult'],
                 name: str,
                 protocol: str,
                 resource_type: str,
                 source_type: str,
                 tls_settings: Sequence['outputs.UpstreamsUpstreamTlsSettingResult'],
                 update_time: str,
                 upstream_specs: Sequence['outputs.UpstreamsUpstreamUpstreamSpecResult'],
                 version_details: Sequence['outputs.UpstreamsUpstreamVersionDetailResult']):
        """
        :param Sequence['UpstreamsUpstreamBackendTargetListArgs'] backend_target_lists: The backend target list of apig upstream.
        :param Sequence['UpstreamsUpstreamCircuitBreakingSettingArgs'] circuit_breaking_settings: The circuit breaking settings of apig upstream.
        :param str comments: The comments of apig upstream.
        :param str create_time: The create time of apig upstream.
        :param str gateway_id: The id of api gateway.
        :param str id: The id of apig upstream.
        :param Sequence['UpstreamsUpstreamLoadBalancerSettingArgs'] load_balancer_settings: The load balancer settings of apig upstream.
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str protocol: The protocol of apig upstream.
        :param str resource_type: The resource type of apig upstream. Valid values: `Console`, `Ingress`.
        :param str source_type: The source type of apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        :param Sequence['UpstreamsUpstreamTlsSettingArgs'] tls_settings: The tls settings of apig upstream.
        :param str update_time: The update time of apig upstream version.
        :param Sequence['UpstreamsUpstreamUpstreamSpecArgs'] upstream_specs: The upstream spec of apig upstream.
        :param Sequence['UpstreamsUpstreamVersionDetailArgs'] version_details: The version details of apig upstream.
        """
        pulumi.set(__self__, "backend_target_lists", backend_target_lists)
        pulumi.set(__self__, "circuit_breaking_settings", circuit_breaking_settings)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "load_balancer_settings", load_balancer_settings)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "tls_settings", tls_settings)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "upstream_specs", upstream_specs)
        pulumi.set(__self__, "version_details", version_details)

    @property
    @pulumi.getter(name="backendTargetLists")
    def backend_target_lists(self) -> Sequence['outputs.UpstreamsUpstreamBackendTargetListResult']:
        """
        The backend target list of apig upstream.
        """
        return pulumi.get(self, "backend_target_lists")

    @property
    @pulumi.getter(name="circuitBreakingSettings")
    def circuit_breaking_settings(self) -> Sequence['outputs.UpstreamsUpstreamCircuitBreakingSettingResult']:
        """
        The circuit breaking settings of apig upstream.
        """
        return pulumi.get(self, "circuit_breaking_settings")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        The comments of apig upstream.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of apig upstream.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        The id of api gateway.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of apig upstream.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loadBalancerSettings")
    def load_balancer_settings(self) -> Sequence['outputs.UpstreamsUpstreamLoadBalancerSettingResult']:
        """
        The load balancer settings of apig upstream.
        """
        return pulumi.get(self, "load_balancer_settings")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol of apig upstream.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type of apig upstream. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        The source type of apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Sequence['outputs.UpstreamsUpstreamTlsSettingResult']:
        """
        The tls settings of apig upstream.
        """
        return pulumi.get(self, "tls_settings")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="upstreamSpecs")
    def upstream_specs(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecResult']:
        """
        The upstream spec of apig upstream.
        """
        return pulumi.get(self, "upstream_specs")

    @property
    @pulumi.getter(name="versionDetails")
    def version_details(self) -> Sequence['outputs.UpstreamsUpstreamVersionDetailResult']:
        """
        The version details of apig upstream.
        """
        return pulumi.get(self, "version_details")


@pulumi.output_type
class UpstreamsUpstreamBackendTargetListResult(dict):
    def __init__(__self__, *,
                 health_status: str,
                 ip: str,
                 port: int):
        """
        :param str health_status: The health status of apig upstream backend.
        :param str ip: The ip of apig upstream.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        The health status of apig upstream backend.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The ip of apig upstream.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class UpstreamsUpstreamCircuitBreakingSettingResult(dict):
    def __init__(__self__, *,
                 base_ejection_time: int,
                 consecutive_errors: int,
                 enable: bool,
                 interval: int,
                 max_ejection_percent: int,
                 min_health_percent: int):
        """
        :param int base_ejection_time: The base ejection time of circuit breaking. Unit: ms.
        :param int consecutive_errors: The consecutive errors of circuit breaking.
        :param bool enable: Whether the circuit breaking is enabled.
        :param int interval: The interval of circuit breaking. Unit: ms.
        :param int max_ejection_percent: The max ejection percent of circuit breaking.
        :param int min_health_percent: The min health percent of circuit breaking.
        """
        pulumi.set(__self__, "base_ejection_time", base_ejection_time)
        pulumi.set(__self__, "consecutive_errors", consecutive_errors)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "max_ejection_percent", max_ejection_percent)
        pulumi.set(__self__, "min_health_percent", min_health_percent)

    @property
    @pulumi.getter(name="baseEjectionTime")
    def base_ejection_time(self) -> int:
        """
        The base ejection time of circuit breaking. Unit: ms.
        """
        return pulumi.get(self, "base_ejection_time")

    @property
    @pulumi.getter(name="consecutiveErrors")
    def consecutive_errors(self) -> int:
        """
        The consecutive errors of circuit breaking.
        """
        return pulumi.get(self, "consecutive_errors")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the circuit breaking is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def interval(self) -> int:
        """
        The interval of circuit breaking. Unit: ms.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxEjectionPercent")
    def max_ejection_percent(self) -> int:
        """
        The max ejection percent of circuit breaking.
        """
        return pulumi.get(self, "max_ejection_percent")

    @property
    @pulumi.getter(name="minHealthPercent")
    def min_health_percent(self) -> int:
        """
        The min health percent of circuit breaking.
        """
        return pulumi.get(self, "min_health_percent")


@pulumi.output_type
class UpstreamsUpstreamLoadBalancerSettingResult(dict):
    def __init__(__self__, *,
                 consistent_hash_lbs: Sequence['outputs.UpstreamsUpstreamLoadBalancerSettingConsistentHashLbResult'],
                 lb_policy: str,
                 simple_lb: str,
                 warmup_duration: int):
        """
        :param Sequence['UpstreamsUpstreamLoadBalancerSettingConsistentHashLbArgs'] consistent_hash_lbs: The consistent hash lb of apig upstream.
        :param str lb_policy: The load balancer policy of apig upstream.
        :param str simple_lb: The simple load balancer of apig upstream.
        :param int warmup_duration: The warmup duration of apig upstream lb.
        """
        pulumi.set(__self__, "consistent_hash_lbs", consistent_hash_lbs)
        pulumi.set(__self__, "lb_policy", lb_policy)
        pulumi.set(__self__, "simple_lb", simple_lb)
        pulumi.set(__self__, "warmup_duration", warmup_duration)

    @property
    @pulumi.getter(name="consistentHashLbs")
    def consistent_hash_lbs(self) -> Sequence['outputs.UpstreamsUpstreamLoadBalancerSettingConsistentHashLbResult']:
        """
        The consistent hash lb of apig upstream.
        """
        return pulumi.get(self, "consistent_hash_lbs")

    @property
    @pulumi.getter(name="lbPolicy")
    def lb_policy(self) -> str:
        """
        The load balancer policy of apig upstream.
        """
        return pulumi.get(self, "lb_policy")

    @property
    @pulumi.getter(name="simpleLb")
    def simple_lb(self) -> str:
        """
        The simple load balancer of apig upstream.
        """
        return pulumi.get(self, "simple_lb")

    @property
    @pulumi.getter(name="warmupDuration")
    def warmup_duration(self) -> int:
        """
        The warmup duration of apig upstream lb.
        """
        return pulumi.get(self, "warmup_duration")


@pulumi.output_type
class UpstreamsUpstreamLoadBalancerSettingConsistentHashLbResult(dict):
    def __init__(__self__, *,
                 hash_key: str,
                 http_cookies: Sequence['outputs.UpstreamsUpstreamLoadBalancerSettingConsistentHashLbHttpCookyResult'],
                 http_header_name: str,
                 http_query_parameter_name: str,
                 use_source_ip: bool):
        """
        :param str hash_key: The hash key of apig upstream consistent hash lb.
        :param Sequence['UpstreamsUpstreamLoadBalancerSettingConsistentHashLbHttpCookyArgs'] http_cookies: The http cookie of apig upstream consistent hash lb.
        :param str http_header_name: The http header name of apig upstream consistent hash lb.
        :param str http_query_parameter_name: The http query parameter name of apig upstream consistent hash lb.
        :param bool use_source_ip: The use source ip of apig upstream consistent hash lb.
        """
        pulumi.set(__self__, "hash_key", hash_key)
        pulumi.set(__self__, "http_cookies", http_cookies)
        pulumi.set(__self__, "http_header_name", http_header_name)
        pulumi.set(__self__, "http_query_parameter_name", http_query_parameter_name)
        pulumi.set(__self__, "use_source_ip", use_source_ip)

    @property
    @pulumi.getter(name="hashKey")
    def hash_key(self) -> str:
        """
        The hash key of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "hash_key")

    @property
    @pulumi.getter(name="httpCookies")
    def http_cookies(self) -> Sequence['outputs.UpstreamsUpstreamLoadBalancerSettingConsistentHashLbHttpCookyResult']:
        """
        The http cookie of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_cookies")

    @property
    @pulumi.getter(name="httpHeaderName")
    def http_header_name(self) -> str:
        """
        The http header name of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_header_name")

    @property
    @pulumi.getter(name="httpQueryParameterName")
    def http_query_parameter_name(self) -> str:
        """
        The http query parameter name of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_query_parameter_name")

    @property
    @pulumi.getter(name="useSourceIp")
    def use_source_ip(self) -> bool:
        """
        The use source ip of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "use_source_ip")


@pulumi.output_type
class UpstreamsUpstreamLoadBalancerSettingConsistentHashLbHttpCookyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 ttl: int):
        """
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str path: The path of apig upstream consistent hash lb http cookie.
        :param int ttl: The ttl of apig upstream consistent hash lb http cookie.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of apig upstream consistent hash lb http cookie.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        The ttl of apig upstream consistent hash lb http cookie.
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class UpstreamsUpstreamTlsSettingResult(dict):
    def __init__(__self__, *,
                 sni: str,
                 tls_mode: str):
        """
        :param str sni: The sni of apig upstream tls setting.
        :param str tls_mode: The tls mode of apig upstream tls setting.
        """
        pulumi.set(__self__, "sni", sni)
        pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter
    def sni(self) -> str:
        """
        The sni of apig upstream tls setting.
        """
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> str:
        """
        The tls mode of apig upstream tls setting.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecResult(dict):
    def __init__(__self__, *,
                 ai_providers: Sequence['outputs.UpstreamsUpstreamUpstreamSpecAiProviderResult'],
                 domains: Sequence['outputs.UpstreamsUpstreamUpstreamSpecDomainResult'],
                 ecs_lists: Sequence['outputs.UpstreamsUpstreamUpstreamSpecEcsListResult'],
                 fixed_ip_lists: Sequence['outputs.UpstreamsUpstreamUpstreamSpecFixedIpListResult'],
                 k8s_services: Sequence['outputs.UpstreamsUpstreamUpstreamSpecK8sServiceResult'],
                 nacos_services: Sequence['outputs.UpstreamsUpstreamUpstreamSpecNacosServiceResult'],
                 ve_faas: Sequence['outputs.UpstreamsUpstreamUpstreamSpecVeFaaResult'],
                 ve_mlps: Sequence['outputs.UpstreamsUpstreamUpstreamSpecVeMlpResult']):
        """
        :param Sequence['UpstreamsUpstreamUpstreamSpecAiProviderArgs'] ai_providers: The ai provider of apig upstream.
        :param Sequence['UpstreamsUpstreamUpstreamSpecDomainArgs'] domains: The domain of apig upstream.
        :param Sequence['UpstreamsUpstreamUpstreamSpecEcsListArgs'] ecs_lists: The ecs list of apig upstream.
        :param Sequence['UpstreamsUpstreamUpstreamSpecFixedIpListArgs'] fixed_ip_lists: The fixed ip list of apig upstream.
        :param Sequence['UpstreamsUpstreamUpstreamSpecK8sServiceArgs'] k8s_services: The k8s service of mlp.
        :param Sequence['UpstreamsUpstreamUpstreamSpecNacosServiceArgs'] nacos_services: The nacos service of apig upstream.
        :param Sequence['UpstreamsUpstreamUpstreamSpecVeFaaArgs'] ve_faas: The vefaas of apig upstream.
        :param Sequence['UpstreamsUpstreamUpstreamSpecVeMlpArgs'] ve_mlps: The mlp of apig upstream.
        """
        pulumi.set(__self__, "ai_providers", ai_providers)
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "ecs_lists", ecs_lists)
        pulumi.set(__self__, "fixed_ip_lists", fixed_ip_lists)
        pulumi.set(__self__, "k8s_services", k8s_services)
        pulumi.set(__self__, "nacos_services", nacos_services)
        pulumi.set(__self__, "ve_faas", ve_faas)
        pulumi.set(__self__, "ve_mlps", ve_mlps)

    @property
    @pulumi.getter(name="aiProviders")
    def ai_providers(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecAiProviderResult']:
        """
        The ai provider of apig upstream.
        """
        return pulumi.get(self, "ai_providers")

    @property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecDomainResult']:
        """
        The domain of apig upstream.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="ecsLists")
    def ecs_lists(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecEcsListResult']:
        """
        The ecs list of apig upstream.
        """
        return pulumi.get(self, "ecs_lists")

    @property
    @pulumi.getter(name="fixedIpLists")
    def fixed_ip_lists(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecFixedIpListResult']:
        """
        The fixed ip list of apig upstream.
        """
        return pulumi.get(self, "fixed_ip_lists")

    @property
    @pulumi.getter(name="k8sServices")
    def k8s_services(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecK8sServiceResult']:
        """
        The k8s service of mlp.
        """
        return pulumi.get(self, "k8s_services")

    @property
    @pulumi.getter(name="nacosServices")
    def nacos_services(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecNacosServiceResult']:
        """
        The nacos service of apig upstream.
        """
        return pulumi.get(self, "nacos_services")

    @property
    @pulumi.getter(name="veFaas")
    def ve_faas(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecVeFaaResult']:
        """
        The vefaas of apig upstream.
        """
        return pulumi.get(self, "ve_faas")

    @property
    @pulumi.getter(name="veMlps")
    def ve_mlps(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecVeMlpResult']:
        """
        The mlp of apig upstream.
        """
        return pulumi.get(self, "ve_mlps")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecAiProviderResult(dict):
    def __init__(__self__, *,
                 base_url: str,
                 custom_body_params: Mapping[str, Any],
                 custom_header_params: Mapping[str, Any],
                 custom_model_services: Sequence['outputs.UpstreamsUpstreamUpstreamSpecAiProviderCustomModelServiceResult'],
                 name: str,
                 token: str):
        """
        :param str base_url: The base url of ai provider.
        :param Mapping[str, Any] custom_body_params: The custom body params of ai provider.
        :param Mapping[str, Any] custom_header_params: The custom header params of ai provider.
        :param Sequence['UpstreamsUpstreamUpstreamSpecAiProviderCustomModelServiceArgs'] custom_model_services: The custom model service of ai provider.
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str token: The token of ai provider.
        """
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "custom_body_params", custom_body_params)
        pulumi.set(__self__, "custom_header_params", custom_header_params)
        pulumi.set(__self__, "custom_model_services", custom_model_services)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        The base url of ai provider.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="customBodyParams")
    def custom_body_params(self) -> Mapping[str, Any]:
        """
        The custom body params of ai provider.
        """
        return pulumi.get(self, "custom_body_params")

    @property
    @pulumi.getter(name="customHeaderParams")
    def custom_header_params(self) -> Mapping[str, Any]:
        """
        The custom header params of ai provider.
        """
        return pulumi.get(self, "custom_header_params")

    @property
    @pulumi.getter(name="customModelServices")
    def custom_model_services(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecAiProviderCustomModelServiceResult']:
        """
        The custom model service of ai provider.
        """
        return pulumi.get(self, "custom_model_services")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The token of ai provider.
        """
        return pulumi.get(self, "token")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecAiProviderCustomModelServiceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 port: int):
        """
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str namespace: The namespace of k8s service.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecDomainResult(dict):
    def __init__(__self__, *,
                 domain_lists: Sequence['outputs.UpstreamsUpstreamUpstreamSpecDomainDomainListResult'],
                 protocol: str):
        """
        :param Sequence['UpstreamsUpstreamUpstreamSpecDomainDomainListArgs'] domain_lists: The domain list of apig upstream.
        :param str protocol: The protocol of apig upstream.
        """
        pulumi.set(__self__, "domain_lists", domain_lists)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="domainLists")
    def domain_lists(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecDomainDomainListResult']:
        """
        The domain list of apig upstream.
        """
        return pulumi.get(self, "domain_lists")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol of apig upstream.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecDomainDomainListResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 port: int):
        """
        :param str domain: The domain of apig upstream.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of apig upstream.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecEcsListResult(dict):
    def __init__(__self__, *,
                 ecs_id: str,
                 ip: str,
                 port: int):
        """
        :param str ecs_id: The instance id of ecs.
        :param str ip: The ip of apig upstream.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "ecs_id", ecs_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="ecsId")
    def ecs_id(self) -> str:
        """
        The instance id of ecs.
        """
        return pulumi.get(self, "ecs_id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The ip of apig upstream.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecFixedIpListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: The ip of apig upstream.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The ip of apig upstream.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecK8sServiceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 port: int):
        """
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str namespace: The namespace of k8s service.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecNacosServiceResult(dict):
    def __init__(__self__, *,
                 group: str,
                 namespace: str,
                 namespace_id: str,
                 service: str,
                 upstream_source_id: str):
        """
        :param str group: The group of nacos service.
        :param str namespace: The namespace of k8s service.
        :param str namespace_id: The namespace id of nacos service.
        :param str service: The service of nacos service.
        :param str upstream_source_id: The upstream source id.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "upstream_source_id", upstream_source_id)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The group of nacos service.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        """
        The namespace id of nacos service.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        The service of nacos service.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="upstreamSourceId")
    def upstream_source_id(self) -> str:
        """
        The upstream source id.
        """
        return pulumi.get(self, "upstream_source_id")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecVeFaaResult(dict):
    def __init__(__self__, *,
                 function_id: str):
        """
        :param str function_id: The function id of vefaas.
        """
        pulumi.set(__self__, "function_id", function_id)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The function id of vefaas.
        """
        return pulumi.get(self, "function_id")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecVeMlpResult(dict):
    def __init__(__self__, *,
                 k8s_services: Sequence['outputs.UpstreamsUpstreamUpstreamSpecVeMlpK8sServiceResult'],
                 service_discover_type: str,
                 service_id: str,
                 service_name: str,
                 service_url: str,
                 upstream_source_id: str):
        """
        :param Sequence['UpstreamsUpstreamUpstreamSpecVeMlpK8sServiceArgs'] k8s_services: The k8s service of mlp.
        :param str service_discover_type: The service discover type of mlp.
        :param str service_id: The service id of mlp.
        :param str service_name: The service name of mlp.
        :param str service_url: The service url of mlp.
        :param str upstream_source_id: The upstream source id.
        """
        pulumi.set(__self__, "k8s_services", k8s_services)
        pulumi.set(__self__, "service_discover_type", service_discover_type)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_url", service_url)
        pulumi.set(__self__, "upstream_source_id", upstream_source_id)

    @property
    @pulumi.getter(name="k8sServices")
    def k8s_services(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecVeMlpK8sServiceResult']:
        """
        The k8s service of mlp.
        """
        return pulumi.get(self, "k8s_services")

    @property
    @pulumi.getter(name="serviceDiscoverType")
    def service_discover_type(self) -> str:
        """
        The service discover type of mlp.
        """
        return pulumi.get(self, "service_discover_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The service id of mlp.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The service name of mlp.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceUrl")
    def service_url(self) -> str:
        """
        The service url of mlp.
        """
        return pulumi.get(self, "service_url")

    @property
    @pulumi.getter(name="upstreamSourceId")
    def upstream_source_id(self) -> str:
        """
        The upstream source id.
        """
        return pulumi.get(self, "upstream_source_id")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecVeMlpK8sServiceResult(dict):
    def __init__(__self__, *,
                 cluster_infos: Sequence['outputs.UpstreamsUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoResult'],
                 name: str,
                 namespace: str,
                 port: int):
        """
        :param Sequence['UpstreamsUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoArgs'] cluster_infos: The cluster info of k8s service.
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str namespace: The namespace of k8s service.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "cluster_infos", cluster_infos)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="clusterInfos")
    def cluster_infos(self) -> Sequence['outputs.UpstreamsUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoResult']:
        """
        The cluster info of k8s service.
        """
        return pulumi.get(self, "cluster_infos")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class UpstreamsUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoResult(dict):
    def __init__(__self__, *,
                 account_id: int,
                 cluster_name: str):
        """
        :param int account_id: The account id of k8s service.
        :param str cluster_name: The cluster name of k8s service.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> int:
        """
        The account id of k8s service.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The cluster name of k8s service.
        """
        return pulumi.get(self, "cluster_name")


@pulumi.output_type
class UpstreamsUpstreamVersionDetailResult(dict):
    def __init__(__self__, *,
                 labels: Sequence['outputs.UpstreamsUpstreamVersionDetailLabelResult'],
                 name: str,
                 update_time: str):
        """
        :param Sequence['UpstreamsUpstreamVersionDetailLabelArgs'] labels: The labels of apig upstream version.
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str update_time: The update time of apig upstream version.
        """
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.UpstreamsUpstreamVersionDetailLabelResult']:
        """
        The labels of apig upstream version.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class UpstreamsUpstreamVersionDetailLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of apig upstream version label.
        :param str value: The value of apig upstream version label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of apig upstream version label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of apig upstream version label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCustomDomainsCustomDomainResult(dict):
    def __init__(__self__, *,
                 certificate_id: str,
                 comments: str,
                 create_time: str,
                 domain: str,
                 id: str,
                 protocols: Sequence[str],
                 resource_type: str,
                 service_id: str,
                 ssl_redirect: bool,
                 status: str,
                 type: str,
                 update_time: str):
        """
        :param str certificate_id: The id of the certificate.
        :param str comments: The comments of the custom domain.
        :param str create_time: The create time of the custom domain.
        :param str domain: The custom domain of the api gateway service.
        :param str id: The id of the custom domain.
        :param Sequence[str] protocols: The protocol of the custom domain.
        :param str resource_type: The resource type of domain. Valid values: `Console`, `Ingress`.
        :param str service_id: The id of api gateway service.
        :param bool ssl_redirect: Whether to redirect https.
        :param str status: The status of the custom domain.
        :param str type: The type of the domain.
        :param str update_time: The update time of the custom domain.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "ssl_redirect", ssl_redirect)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        The id of the certificate.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        The comments of the custom domain.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the custom domain.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The custom domain of the api gateway service.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the custom domain.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocols(self) -> Sequence[str]:
        """
        The protocol of the custom domain.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type of domain. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The id of api gateway service.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="sslRedirect")
    def ssl_redirect(self) -> bool:
        """
        Whether to redirect https.
        """
        return pulumi.get(self, "ssl_redirect")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the custom domain.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of the custom domain.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetGatewayServicesGatewayServiceResult(dict):
    def __init__(__self__, *,
                 auth_specs: Sequence['outputs.GetGatewayServicesGatewayServiceAuthSpecResult'],
                 comments: str,
                 create_time: str,
                 custom_domains: Sequence['outputs.GetGatewayServicesGatewayServiceCustomDomainResult'],
                 domains: Sequence['outputs.GetGatewayServicesGatewayServiceDomainResult'],
                 gateway_id: str,
                 gateway_name: str,
                 id: str,
                 message: str,
                 name: str,
                 protocols: Sequence[str],
                 status: str):
        """
        :param Sequence['GetGatewayServicesGatewayServiceAuthSpecArgs'] auth_specs: The auth spec of the api gateway service.
        :param str comments: The comments of the api gateway service.
        :param str create_time: The create time of the api gateway service.
        :param Sequence['GetGatewayServicesGatewayServiceCustomDomainArgs'] custom_domains: The custom domains of the api gateway service.
        :param Sequence['GetGatewayServicesGatewayServiceDomainArgs'] domains: The domains of the api gateway service.
        :param str gateway_id: The gateway id of api gateway service.
        :param str gateway_name: The gateway name of the api gateway service.
        :param str id: The Id of the api gateway service.
        :param str message: The error message of the api gateway service.
        :param str name: The name of api gateway service. This field support fuzzy query.
        :param Sequence[str] protocols: The protocol of the api gateway service.
        :param str status: The status of api gateway service.
        """
        pulumi.set(__self__, "auth_specs", auth_specs)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_domains", custom_domains)
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "gateway_name", gateway_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authSpecs")
    def auth_specs(self) -> Sequence['outputs.GetGatewayServicesGatewayServiceAuthSpecResult']:
        """
        The auth spec of the api gateway service.
        """
        return pulumi.get(self, "auth_specs")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        The comments of the api gateway service.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the api gateway service.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customDomains")
    def custom_domains(self) -> Sequence['outputs.GetGatewayServicesGatewayServiceCustomDomainResult']:
        """
        The custom domains of the api gateway service.
        """
        return pulumi.get(self, "custom_domains")

    @property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.GetGatewayServicesGatewayServiceDomainResult']:
        """
        The domains of the api gateway service.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        The gateway id of api gateway service.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="gatewayName")
    def gateway_name(self) -> str:
        """
        The gateway name of the api gateway service.
        """
        return pulumi.get(self, "gateway_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of the api gateway service.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The error message of the api gateway service.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of api gateway service. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocols(self) -> Sequence[str]:
        """
        The protocol of the api gateway service.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of api gateway service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayServicesGatewayServiceAuthSpecResult(dict):
    def __init__(__self__, *,
                 enable: bool):
        """
        :param bool enable: Whether the api gateway service enable auth.
        """
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway service enable auth.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class GetGatewayServicesGatewayServiceCustomDomainResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 id: str):
        """
        :param str domain: The domain of the api gateway service.
        :param str id: The Id of the api gateway service.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the api gateway service.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of the api gateway service.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetGatewayServicesGatewayServiceDomainResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 type: str):
        """
        :param str domain: The domain of the api gateway service.
        :param str type: The type of the domain.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the api gateway service.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 backend_specs: Sequence['outputs.GetGatewaysGatewayBackendSpecResult'],
                 comments: str,
                 create_time: str,
                 id: str,
                 log_specs: Sequence['outputs.GetGatewaysGatewayLogSpecResult'],
                 message: str,
                 monitor_specs: Sequence['outputs.GetGatewaysGatewayMonitorSpecResult'],
                 name: str,
                 network_specs: Sequence['outputs.GetGatewaysGatewayNetworkSpecResult'],
                 project_name: str,
                 region: str,
                 resource_specs: Sequence['outputs.GetGatewaysGatewayResourceSpecResult'],
                 status: str,
                 tags: Sequence['outputs.GetGatewaysGatewayTagResult'],
                 type: str,
                 version: str):
        """
        :param Sequence['GetGatewaysGatewayBackendSpecArgs'] backend_specs: The backend spec of the api gateway.
        :param str comments: The comments of the api gateway.
        :param str create_time: The create time of the api gateway.
        :param str id: The Id of the api gateway.
        :param Sequence['GetGatewaysGatewayLogSpecArgs'] log_specs: The log spec of the api gateway.
        :param str message: The error message of the api gateway.
        :param Sequence['GetGatewaysGatewayMonitorSpecArgs'] monitor_specs: The monitor spec of the api gateway.
        :param str name: The name of api gateway. This field support fuzzy query.
        :param Sequence['GetGatewaysGatewayNetworkSpecArgs'] network_specs: The network spec of the api gateway.
        :param str project_name: The project name of api gateway.
        :param str region: The region of the api gateway.
        :param Sequence['GetGatewaysGatewayResourceSpecArgs'] resource_specs: The resource spec of the api gateway.
        :param str status: The status of api gateway.
        :param Sequence['GetGatewaysGatewayTagArgs'] tags: Tags.
        :param str type: The type of api gateway.
        :param str version: The version of the api gateway.
        """
        pulumi.set(__self__, "backend_specs", backend_specs)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "log_specs", log_specs)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "monitor_specs", monitor_specs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_specs", network_specs)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_specs", resource_specs)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="backendSpecs")
    def backend_specs(self) -> Sequence['outputs.GetGatewaysGatewayBackendSpecResult']:
        """
        The backend spec of the api gateway.
        """
        return pulumi.get(self, "backend_specs")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        The comments of the api gateway.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the api gateway.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of the api gateway.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logSpecs")
    def log_specs(self) -> Sequence['outputs.GetGatewaysGatewayLogSpecResult']:
        """
        The log spec of the api gateway.
        """
        return pulumi.get(self, "log_specs")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The error message of the api gateway.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="monitorSpecs")
    def monitor_specs(self) -> Sequence['outputs.GetGatewaysGatewayMonitorSpecResult']:
        """
        The monitor spec of the api gateway.
        """
        return pulumi.get(self, "monitor_specs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of api gateway. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkSpecs")
    def network_specs(self) -> Sequence['outputs.GetGatewaysGatewayNetworkSpecResult']:
        """
        The network spec of the api gateway.
        """
        return pulumi.get(self, "network_specs")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The project name of api gateway.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the api gateway.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceSpecs")
    def resource_specs(self) -> Sequence['outputs.GetGatewaysGatewayResourceSpecResult']:
        """
        The resource spec of the api gateway.
        """
        return pulumi.get(self, "resource_specs")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of api gateway.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetGatewaysGatewayTagResult']:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of api gateway.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the api gateway.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetGatewaysGatewayBackendSpecResult(dict):
    def __init__(__self__, *,
                 is_vke_with_flannel_cni_supported: bool,
                 vke_pod_cidr: str):
        """
        :param bool is_vke_with_flannel_cni_supported: Whether the api gateway support vke flannel cni.
        :param str vke_pod_cidr: The vke pod cidr of the api gateway.
        """
        pulumi.set(__self__, "is_vke_with_flannel_cni_supported", is_vke_with_flannel_cni_supported)
        pulumi.set(__self__, "vke_pod_cidr", vke_pod_cidr)

    @property
    @pulumi.getter(name="isVkeWithFlannelCniSupported")
    def is_vke_with_flannel_cni_supported(self) -> bool:
        """
        Whether the api gateway support vke flannel cni.
        """
        return pulumi.get(self, "is_vke_with_flannel_cni_supported")

    @property
    @pulumi.getter(name="vkePodCidr")
    def vke_pod_cidr(self) -> str:
        """
        The vke pod cidr of the api gateway.
        """
        return pulumi.get(self, "vke_pod_cidr")


@pulumi.output_type
class GetGatewaysGatewayLogSpecResult(dict):
    def __init__(__self__, *,
                 enable: bool,
                 project_id: str,
                 topic_id: str):
        """
        :param bool enable: Whether the api gateway enable monitor.
        :param str project_id: The project id of the tls.
        :param str topic_id: The topic id of the tls.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway enable monitor.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The project id of the tls.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        The topic id of the tls.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetGatewaysGatewayMonitorSpecResult(dict):
    def __init__(__self__, *,
                 enable: bool,
                 workspace_id: str):
        """
        :param bool enable: Whether the api gateway enable monitor.
        :param str workspace_id: The workspace id of the monitor.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway enable monitor.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace id of the monitor.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetGatewaysGatewayNetworkSpecResult(dict):
    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param Sequence[str] subnet_ids: The subnet ids of the api gateway.
        :param str vpc_id: The vpc id of the api gateway.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The subnet ids of the api gateway.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The vpc id of the api gateway.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetGatewaysGatewayResourceSpecResult(dict):
    def __init__(__self__, *,
                 clb_spec_code: str,
                 instance_spec_code: str,
                 network_types: Sequence['outputs.GetGatewaysGatewayResourceSpecNetworkTypeResult'],
                 public_network_bandwidth: int,
                 public_network_billing_type: str,
                 replicas: int):
        """
        :param str clb_spec_code: The clb spec code of the resource spec.
        :param str instance_spec_code: The instance spec code of the resource spec.
        :param Sequence['GetGatewaysGatewayResourceSpecNetworkTypeArgs'] network_types: The network type of the api gateway.
        :param int public_network_bandwidth: The public network bandwidth of the resource spec.
        :param str public_network_billing_type: The public network billing type of the resource spec.
        :param int replicas: The replicas of the resource spec.
        """
        pulumi.set(__self__, "clb_spec_code", clb_spec_code)
        pulumi.set(__self__, "instance_spec_code", instance_spec_code)
        pulumi.set(__self__, "network_types", network_types)
        pulumi.set(__self__, "public_network_bandwidth", public_network_bandwidth)
        pulumi.set(__self__, "public_network_billing_type", public_network_billing_type)
        pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter(name="clbSpecCode")
    def clb_spec_code(self) -> str:
        """
        The clb spec code of the resource spec.
        """
        return pulumi.get(self, "clb_spec_code")

    @property
    @pulumi.getter(name="instanceSpecCode")
    def instance_spec_code(self) -> str:
        """
        The instance spec code of the resource spec.
        """
        return pulumi.get(self, "instance_spec_code")

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence['outputs.GetGatewaysGatewayResourceSpecNetworkTypeResult']:
        """
        The network type of the api gateway.
        """
        return pulumi.get(self, "network_types")

    @property
    @pulumi.getter(name="publicNetworkBandwidth")
    def public_network_bandwidth(self) -> int:
        """
        The public network bandwidth of the resource spec.
        """
        return pulumi.get(self, "public_network_bandwidth")

    @property
    @pulumi.getter(name="publicNetworkBillingType")
    def public_network_billing_type(self) -> str:
        """
        The public network billing type of the resource spec.
        """
        return pulumi.get(self, "public_network_billing_type")

    @property
    @pulumi.getter
    def replicas(self) -> int:
        """
        The replicas of the resource spec.
        """
        return pulumi.get(self, "replicas")


@pulumi.output_type
class GetGatewaysGatewayResourceSpecNetworkTypeResult(dict):
    def __init__(__self__, *,
                 enable_private_network: bool,
                 enable_public_network: bool):
        """
        :param bool enable_private_network: Whether the api gateway enable private network.
        :param bool enable_public_network: Whether the api gateway enable public network.
        """
        pulumi.set(__self__, "enable_private_network", enable_private_network)
        pulumi.set(__self__, "enable_public_network", enable_public_network)

    @property
    @pulumi.getter(name="enablePrivateNetwork")
    def enable_private_network(self) -> bool:
        """
        Whether the api gateway enable private network.
        """
        return pulumi.get(self, "enable_private_network")

    @property
    @pulumi.getter(name="enablePublicNetwork")
    def enable_public_network(self) -> bool:
        """
        Whether the api gateway enable public network.
        """
        return pulumi.get(self, "enable_public_network")


@pulumi.output_type
class GetGatewaysGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGatewaysTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRoutesRouteResult(dict):
    def __init__(__self__, *,
                 advanced_settings: Sequence['outputs.GetRoutesRouteAdvancedSettingResult'],
                 create_time: str,
                 custom_domains: Sequence['outputs.GetRoutesRouteCustomDomainResult'],
                 domains: Sequence['outputs.GetRoutesRouteDomainResult'],
                 enable: bool,
                 id: str,
                 match_rules: Sequence['outputs.GetRoutesRouteMatchRuleResult'],
                 name: str,
                 priority: int,
                 reason: str,
                 resource_type: str,
                 service_id: str,
                 service_name: str,
                 status: str,
                 update_time: str,
                 upstream_lists: Sequence['outputs.GetRoutesRouteUpstreamListResult']):
        """
        :param Sequence['GetRoutesRouteAdvancedSettingArgs'] advanced_settings: The advanced setting of the api gateway route.
        :param str create_time: The create time of the api gateway route.
        :param Sequence['GetRoutesRouteCustomDomainArgs'] custom_domains: The custom domains of the api gateway route.
        :param Sequence['GetRoutesRouteDomainArgs'] domains: The domains of the api gateway route.
        :param bool enable: Whether the api gateway route is enabled.
        :param str id: The id of the api gateway route.
        :param Sequence['GetRoutesRouteMatchRuleArgs'] match_rules: The match rule of the api gateway route.
        :param str name: The name of api gateway route. This field support fuzzy query.
        :param int priority: The priority of the api gateway route.
        :param str reason: The reason of the api gateway route.
        :param str resource_type: The resource type of route. Valid values: `Console`, `Ingress`.
        :param str service_id: The id of api gateway service.
        :param str service_name: The name of the api gateway service.
        :param str status: The status of the api gateway route.
        :param str update_time: The update time of the api gateway route.
        :param Sequence['GetRoutesRouteUpstreamListArgs'] upstream_lists: The upstream list of the api gateway route.
        """
        pulumi.set(__self__, "advanced_settings", advanced_settings)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_domains", custom_domains)
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match_rules", match_rules)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "upstream_lists", upstream_lists)

    @property
    @pulumi.getter(name="advancedSettings")
    def advanced_settings(self) -> Sequence['outputs.GetRoutesRouteAdvancedSettingResult']:
        """
        The advanced setting of the api gateway route.
        """
        return pulumi.get(self, "advanced_settings")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the api gateway route.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customDomains")
    def custom_domains(self) -> Sequence['outputs.GetRoutesRouteCustomDomainResult']:
        """
        The custom domains of the api gateway route.
        """
        return pulumi.get(self, "custom_domains")

    @property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.GetRoutesRouteDomainResult']:
        """
        The domains of the api gateway route.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway route is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the api gateway route.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> Sequence['outputs.GetRoutesRouteMatchRuleResult']:
        """
        The match rule of the api gateway route.
        """
        return pulumi.get(self, "match_rules")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of api gateway route. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The priority of the api gateway route.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        The reason of the api gateway route.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type of route. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The id of api gateway service.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the api gateway service.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the api gateway route.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of the api gateway route.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="upstreamLists")
    def upstream_lists(self) -> Sequence['outputs.GetRoutesRouteUpstreamListResult']:
        """
        The upstream list of the api gateway route.
        """
        return pulumi.get(self, "upstream_lists")


@pulumi.output_type
class GetRoutesRouteAdvancedSettingResult(dict):
    def __init__(__self__, *,
                 cors_policy_settings: Sequence['outputs.GetRoutesRouteAdvancedSettingCorsPolicySettingResult'],
                 header_operations: Sequence['outputs.GetRoutesRouteAdvancedSettingHeaderOperationResult'],
                 mirror_policies: Sequence['outputs.GetRoutesRouteAdvancedSettingMirrorPolicyResult'],
                 retry_policy_settings: Sequence['outputs.GetRoutesRouteAdvancedSettingRetryPolicySettingResult'],
                 timeout_settings: Sequence['outputs.GetRoutesRouteAdvancedSettingTimeoutSettingResult'],
                 url_rewrite_settings: Sequence['outputs.GetRoutesRouteAdvancedSettingUrlRewriteSettingResult']):
        """
        :param Sequence['GetRoutesRouteAdvancedSettingCorsPolicySettingArgs'] cors_policy_settings: The cors policy setting of the api gateway route.
        :param Sequence['GetRoutesRouteAdvancedSettingHeaderOperationArgs'] header_operations: The header operations of the api gateway route.
        :param Sequence['GetRoutesRouteAdvancedSettingMirrorPolicyArgs'] mirror_policies: The mirror policies of the api gateway route.
        :param Sequence['GetRoutesRouteAdvancedSettingRetryPolicySettingArgs'] retry_policy_settings: The retry policy setting of the api gateway route.
        :param Sequence['GetRoutesRouteAdvancedSettingTimeoutSettingArgs'] timeout_settings: The timeout setting of the api gateway route.
        :param Sequence['GetRoutesRouteAdvancedSettingUrlRewriteSettingArgs'] url_rewrite_settings: The url rewrite setting of the api gateway route.
        """
        pulumi.set(__self__, "cors_policy_settings", cors_policy_settings)
        pulumi.set(__self__, "header_operations", header_operations)
        pulumi.set(__self__, "mirror_policies", mirror_policies)
        pulumi.set(__self__, "retry_policy_settings", retry_policy_settings)
        pulumi.set(__self__, "timeout_settings", timeout_settings)
        pulumi.set(__self__, "url_rewrite_settings", url_rewrite_settings)

    @property
    @pulumi.getter(name="corsPolicySettings")
    def cors_policy_settings(self) -> Sequence['outputs.GetRoutesRouteAdvancedSettingCorsPolicySettingResult']:
        """
        The cors policy setting of the api gateway route.
        """
        return pulumi.get(self, "cors_policy_settings")

    @property
    @pulumi.getter(name="headerOperations")
    def header_operations(self) -> Sequence['outputs.GetRoutesRouteAdvancedSettingHeaderOperationResult']:
        """
        The header operations of the api gateway route.
        """
        return pulumi.get(self, "header_operations")

    @property
    @pulumi.getter(name="mirrorPolicies")
    def mirror_policies(self) -> Sequence['outputs.GetRoutesRouteAdvancedSettingMirrorPolicyResult']:
        """
        The mirror policies of the api gateway route.
        """
        return pulumi.get(self, "mirror_policies")

    @property
    @pulumi.getter(name="retryPolicySettings")
    def retry_policy_settings(self) -> Sequence['outputs.GetRoutesRouteAdvancedSettingRetryPolicySettingResult']:
        """
        The retry policy setting of the api gateway route.
        """
        return pulumi.get(self, "retry_policy_settings")

    @property
    @pulumi.getter(name="timeoutSettings")
    def timeout_settings(self) -> Sequence['outputs.GetRoutesRouteAdvancedSettingTimeoutSettingResult']:
        """
        The timeout setting of the api gateway route.
        """
        return pulumi.get(self, "timeout_settings")

    @property
    @pulumi.getter(name="urlRewriteSettings")
    def url_rewrite_settings(self) -> Sequence['outputs.GetRoutesRouteAdvancedSettingUrlRewriteSettingResult']:
        """
        The url rewrite setting of the api gateway route.
        """
        return pulumi.get(self, "url_rewrite_settings")


@pulumi.output_type
class GetRoutesRouteAdvancedSettingCorsPolicySettingResult(dict):
    def __init__(__self__, *,
                 enable: bool):
        """
        :param bool enable: Whether the api gateway route is enabled.
        """
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway route is enabled.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class GetRoutesRouteAdvancedSettingHeaderOperationResult(dict):
    def __init__(__self__, *,
                 direction_type: str,
                 key: str,
                 operation: str,
                 value: str):
        """
        :param str direction_type: The direction type of the header.
        :param str key: The key of the query string.
        :param str operation: The operation of the header.
        :param str value: The path of the api gateway route.
        """
        pulumi.set(__self__, "direction_type", direction_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="directionType")
    def direction_type(self) -> str:
        """
        The direction type of the header.
        """
        return pulumi.get(self, "direction_type")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the query string.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The operation of the header.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRoutesRouteAdvancedSettingMirrorPolicyResult(dict):
    def __init__(__self__, *,
                 percents: Sequence['outputs.GetRoutesRouteAdvancedSettingMirrorPolicyPercentResult'],
                 upstreams: Sequence['outputs.GetRoutesRouteAdvancedSettingMirrorPolicyUpstreamResult']):
        """
        :param Sequence['GetRoutesRouteAdvancedSettingMirrorPolicyPercentArgs'] percents: The percent of the mirror policy.
        :param Sequence['GetRoutesRouteAdvancedSettingMirrorPolicyUpstreamArgs'] upstreams: The upstream of the mirror policy.
        """
        pulumi.set(__self__, "percents", percents)
        pulumi.set(__self__, "upstreams", upstreams)

    @property
    @pulumi.getter
    def percents(self) -> Sequence['outputs.GetRoutesRouteAdvancedSettingMirrorPolicyPercentResult']:
        """
        The percent of the mirror policy.
        """
        return pulumi.get(self, "percents")

    @property
    @pulumi.getter
    def upstreams(self) -> Sequence['outputs.GetRoutesRouteAdvancedSettingMirrorPolicyUpstreamResult']:
        """
        The upstream of the mirror policy.
        """
        return pulumi.get(self, "upstreams")


@pulumi.output_type
class GetRoutesRouteAdvancedSettingMirrorPolicyPercentResult(dict):
    def __init__(__self__, *,
                 value: int):
        """
        :param int value: The path of the api gateway route.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRoutesRouteAdvancedSettingMirrorPolicyUpstreamResult(dict):
    def __init__(__self__, *,
                 type: str,
                 upstream_id: str,
                 version: str):
        """
        :param str type: The type of the domain.
        :param str upstream_id: The id of api gateway upstream.
        :param str version: The version of the api gateway upstream.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "upstream_id", upstream_id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> str:
        """
        The id of api gateway upstream.
        """
        return pulumi.get(self, "upstream_id")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the api gateway upstream.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetRoutesRouteAdvancedSettingRetryPolicySettingResult(dict):
    def __init__(__self__, *,
                 attempts: int,
                 enable: bool,
                 http_codes: Sequence[str],
                 per_try_timeout: int,
                 retry_ons: Sequence[str]):
        """
        :param int attempts: The attempts of the api gateway route.
        :param bool enable: Whether the api gateway route is enabled.
        :param Sequence[str] http_codes: The http codes of the api gateway route.
        :param int per_try_timeout: The per try timeout of the api gateway route.
        :param Sequence[str] retry_ons: The retry on of the api gateway route.
        """
        pulumi.set(__self__, "attempts", attempts)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "http_codes", http_codes)
        pulumi.set(__self__, "per_try_timeout", per_try_timeout)
        pulumi.set(__self__, "retry_ons", retry_ons)

    @property
    @pulumi.getter
    def attempts(self) -> int:
        """
        The attempts of the api gateway route.
        """
        return pulumi.get(self, "attempts")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway route is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="httpCodes")
    def http_codes(self) -> Sequence[str]:
        """
        The http codes of the api gateway route.
        """
        return pulumi.get(self, "http_codes")

    @property
    @pulumi.getter(name="perTryTimeout")
    def per_try_timeout(self) -> int:
        """
        The per try timeout of the api gateway route.
        """
        return pulumi.get(self, "per_try_timeout")

    @property
    @pulumi.getter(name="retryOns")
    def retry_ons(self) -> Sequence[str]:
        """
        The retry on of the api gateway route.
        """
        return pulumi.get(self, "retry_ons")


@pulumi.output_type
class GetRoutesRouteAdvancedSettingTimeoutSettingResult(dict):
    def __init__(__self__, *,
                 enable: bool,
                 timeout: int):
        """
        :param bool enable: Whether the api gateway route is enabled.
        :param int timeout: The timeout of the api gateway route.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway route is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        The timeout of the api gateway route.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetRoutesRouteAdvancedSettingUrlRewriteSettingResult(dict):
    def __init__(__self__, *,
                 enable: bool,
                 url_rewrite: str):
        """
        :param bool enable: Whether the api gateway route is enabled.
        :param str url_rewrite: The url rewrite path of the api gateway route.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "url_rewrite", url_rewrite)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the api gateway route is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> str:
        """
        The url rewrite path of the api gateway route.
        """
        return pulumi.get(self, "url_rewrite")


@pulumi.output_type
class GetRoutesRouteCustomDomainResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 id: str):
        """
        :param str domain: The domain of the api gateway route.
        :param str id: The id of the api gateway route.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the api gateway route.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the api gateway route.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetRoutesRouteDomainResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 type: str):
        """
        :param str domain: The domain of the api gateway route.
        :param str type: The type of the domain.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the api gateway route.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRoutesRouteMatchRuleResult(dict):
    def __init__(__self__, *,
                 headers: Sequence['outputs.GetRoutesRouteMatchRuleHeaderResult'],
                 methods: Sequence[str],
                 paths: Sequence['outputs.GetRoutesRouteMatchRulePathResult'],
                 query_strings: Sequence['outputs.GetRoutesRouteMatchRuleQueryStringResult']):
        """
        :param Sequence['GetRoutesRouteMatchRuleHeaderArgs'] headers: The header of the api gateway route.
        :param Sequence[str] methods: The method of the api gateway route.
        :param Sequence['GetRoutesRouteMatchRulePathArgs'] paths: The path of api gateway route.
        :param Sequence['GetRoutesRouteMatchRuleQueryStringArgs'] query_strings: The query string of the api gateway route.
        """
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "methods", methods)
        pulumi.set(__self__, "paths", paths)
        pulumi.set(__self__, "query_strings", query_strings)

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetRoutesRouteMatchRuleHeaderResult']:
        """
        The header of the api gateway route.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def methods(self) -> Sequence[str]:
        """
        The method of the api gateway route.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def paths(self) -> Sequence['outputs.GetRoutesRouteMatchRulePathResult']:
        """
        The path of api gateway route.
        """
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Sequence['outputs.GetRoutesRouteMatchRuleQueryStringResult']:
        """
        The query string of the api gateway route.
        """
        return pulumi.get(self, "query_strings")


@pulumi.output_type
class GetRoutesRouteMatchRuleHeaderResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence['outputs.GetRoutesRouteMatchRuleHeaderValueResult']):
        """
        :param str key: The key of the query string.
        :param Sequence['GetRoutesRouteMatchRuleHeaderValueArgs'] values: The path of the api gateway route.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the query string.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetRoutesRouteMatchRuleHeaderValueResult']:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRoutesRouteMatchRuleHeaderValueResult(dict):
    def __init__(__self__, *,
                 match_content: str,
                 match_type: str):
        """
        :param str match_content: The match content of the api gateway route.
        :param str match_type: The match type of the api gateway route.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        """
        The match type of the api gateway route.
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class GetRoutesRouteMatchRulePathResult(dict):
    def __init__(__self__, *,
                 match_content: str,
                 match_type: str):
        """
        :param str match_content: The match content of the api gateway route.
        :param str match_type: The match type of the api gateway route.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        """
        The match type of the api gateway route.
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class GetRoutesRouteMatchRuleQueryStringResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence['outputs.GetRoutesRouteMatchRuleQueryStringValueResult']):
        """
        :param str key: The key of the query string.
        :param Sequence['GetRoutesRouteMatchRuleQueryStringValueArgs'] values: The path of the api gateway route.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the query string.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetRoutesRouteMatchRuleQueryStringValueResult']:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRoutesRouteMatchRuleQueryStringValueResult(dict):
    def __init__(__self__, *,
                 match_content: str,
                 match_type: str):
        """
        :param str match_content: The match content of the api gateway route.
        :param str match_type: The match type of the api gateway route.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        """
        The match type of the api gateway route.
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class GetRoutesRouteUpstreamListResult(dict):
    def __init__(__self__, *,
                 ai_provider_settings: Sequence['outputs.GetRoutesRouteUpstreamListAiProviderSettingResult'],
                 upstream_id: str,
                 version: str,
                 weight: int):
        """
        :param Sequence['GetRoutesRouteUpstreamListAiProviderSettingArgs'] ai_provider_settings: The ai provider settings of the api gateway route.
        :param str upstream_id: The id of api gateway upstream.
        :param str version: The version of the api gateway upstream.
        :param int weight: The weight of the api gateway upstream.
        """
        pulumi.set(__self__, "ai_provider_settings", ai_provider_settings)
        pulumi.set(__self__, "upstream_id", upstream_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="aiProviderSettings")
    def ai_provider_settings(self) -> Sequence['outputs.GetRoutesRouteUpstreamListAiProviderSettingResult']:
        """
        The ai provider settings of the api gateway route.
        """
        return pulumi.get(self, "ai_provider_settings")

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> str:
        """
        The id of api gateway upstream.
        """
        return pulumi.get(self, "upstream_id")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the api gateway upstream.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        The weight of the api gateway upstream.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetRoutesRouteUpstreamListAiProviderSettingResult(dict):
    def __init__(__self__, *,
                 model: str,
                 target_path: str):
        """
        :param str model: The model of the ai provider.
        :param str target_path: The target path of the ai provider.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "target_path", target_path)

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The model of the ai provider.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="targetPath")
    def target_path(self) -> str:
        """
        The target path of the ai provider.
        """
        return pulumi.get(self, "target_path")


@pulumi.output_type
class GetUpstreamSourcesUpstreamSourceResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 create_time: str,
                 gateway_id: str,
                 id: str,
                 ingress_settings: Sequence['outputs.GetUpstreamSourcesUpstreamSourceIngressSettingResult'],
                 source_specs: Sequence['outputs.GetUpstreamSourcesUpstreamSourceSourceSpecResult'],
                 source_type: str,
                 status: str,
                 status_message: str,
                 update_time: str):
        """
        :param str comments: The comments of apig upstream source.
        :param str create_time: The create time of apig upstream source.
        :param str gateway_id: The id of api gateway.
        :param str id: The id of apig upstream source.
        :param Sequence['GetUpstreamSourcesUpstreamSourceIngressSettingArgs'] ingress_settings: The ingress settings of apig upstream source.
        :param Sequence['GetUpstreamSourcesUpstreamSourceSourceSpecArgs'] source_specs: The source spec of apig upstream source.
        :param str source_type: The source type of apig upstream source. Valid values: `K8S`, `Nacos`.
        :param str status: The status of apig upstream source. Valid values: `Syncing`, `SyncedSucceed`, `SyncedFailed`.
        :param str status_message: The status message of apig upstream source.
        :param str update_time: The update time of apig upstream source.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingress_settings", ingress_settings)
        pulumi.set(__self__, "source_specs", source_specs)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        The comments of apig upstream source.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of apig upstream source.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        The id of api gateway.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of apig upstream source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressSettings")
    def ingress_settings(self) -> Sequence['outputs.GetUpstreamSourcesUpstreamSourceIngressSettingResult']:
        """
        The ingress settings of apig upstream source.
        """
        return pulumi.get(self, "ingress_settings")

    @property
    @pulumi.getter(name="sourceSpecs")
    def source_specs(self) -> Sequence['outputs.GetUpstreamSourcesUpstreamSourceSourceSpecResult']:
        """
        The source spec of apig upstream source.
        """
        return pulumi.get(self, "source_specs")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        The source type of apig upstream source. Valid values: `K8S`, `Nacos`.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of apig upstream source. Valid values: `Syncing`, `SyncedSucceed`, `SyncedFailed`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        The status message of apig upstream source.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of apig upstream source.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetUpstreamSourcesUpstreamSourceIngressSettingResult(dict):
    def __init__(__self__, *,
                 enable_all_ingress_classes: bool,
                 enable_all_namespaces: bool,
                 enable_ingress: bool,
                 enable_ingress_without_ingress_class: bool,
                 ingress_classes: Sequence[str],
                 update_status: bool,
                 watch_namespaces: Sequence[str]):
        """
        :param bool enable_all_ingress_classes: Whether to enable all ingress classes.
        :param bool enable_all_namespaces: Whether to enable all namespaces.
        :param bool enable_ingress: The enable ingress of apig upstream source.
        :param bool enable_ingress_without_ingress_class: Whether to enable ingress without ingress class.
        :param Sequence[str] ingress_classes: The ingress classes of ingress settings.
        :param bool update_status: The update status of ingress settings.
        :param Sequence[str] watch_namespaces: The watch namespaces of ingress settings.
        """
        pulumi.set(__self__, "enable_all_ingress_classes", enable_all_ingress_classes)
        pulumi.set(__self__, "enable_all_namespaces", enable_all_namespaces)
        pulumi.set(__self__, "enable_ingress", enable_ingress)
        pulumi.set(__self__, "enable_ingress_without_ingress_class", enable_ingress_without_ingress_class)
        pulumi.set(__self__, "ingress_classes", ingress_classes)
        pulumi.set(__self__, "update_status", update_status)
        pulumi.set(__self__, "watch_namespaces", watch_namespaces)

    @property
    @pulumi.getter(name="enableAllIngressClasses")
    def enable_all_ingress_classes(self) -> bool:
        """
        Whether to enable all ingress classes.
        """
        return pulumi.get(self, "enable_all_ingress_classes")

    @property
    @pulumi.getter(name="enableAllNamespaces")
    def enable_all_namespaces(self) -> bool:
        """
        Whether to enable all namespaces.
        """
        return pulumi.get(self, "enable_all_namespaces")

    @property
    @pulumi.getter(name="enableIngress")
    def enable_ingress(self) -> bool:
        """
        The enable ingress of apig upstream source.
        """
        return pulumi.get(self, "enable_ingress")

    @property
    @pulumi.getter(name="enableIngressWithoutIngressClass")
    def enable_ingress_without_ingress_class(self) -> bool:
        """
        Whether to enable ingress without ingress class.
        """
        return pulumi.get(self, "enable_ingress_without_ingress_class")

    @property
    @pulumi.getter(name="ingressClasses")
    def ingress_classes(self) -> Sequence[str]:
        """
        The ingress classes of ingress settings.
        """
        return pulumi.get(self, "ingress_classes")

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> bool:
        """
        The update status of ingress settings.
        """
        return pulumi.get(self, "update_status")

    @property
    @pulumi.getter(name="watchNamespaces")
    def watch_namespaces(self) -> Sequence[str]:
        """
        The watch namespaces of ingress settings.
        """
        return pulumi.get(self, "watch_namespaces")


@pulumi.output_type
class GetUpstreamSourcesUpstreamSourceSourceSpecResult(dict):
    def __init__(__self__, *,
                 k8s_sources: Sequence['outputs.GetUpstreamSourcesUpstreamSourceSourceSpecK8sSourceResult'],
                 nacos_sources: Sequence['outputs.GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceResult']):
        """
        :param Sequence['GetUpstreamSourcesUpstreamSourceSourceSpecK8sSourceArgs'] k8s_sources: The k8s source of apig upstream source.
        :param Sequence['GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceArgs'] nacos_sources: The nacos source of apig upstream source.
        """
        pulumi.set(__self__, "k8s_sources", k8s_sources)
        pulumi.set(__self__, "nacos_sources", nacos_sources)

    @property
    @pulumi.getter(name="k8sSources")
    def k8s_sources(self) -> Sequence['outputs.GetUpstreamSourcesUpstreamSourceSourceSpecK8sSourceResult']:
        """
        The k8s source of apig upstream source.
        """
        return pulumi.get(self, "k8s_sources")

    @property
    @pulumi.getter(name="nacosSources")
    def nacos_sources(self) -> Sequence['outputs.GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceResult']:
        """
        The nacos source of apig upstream source.
        """
        return pulumi.get(self, "nacos_sources")


@pulumi.output_type
class GetUpstreamSourcesUpstreamSourceSourceSpecK8sSourceResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_type: str):
        """
        :param str cluster_id: The cluster id of k8s source.
        :param str cluster_type: The cluster type of k8s source.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The cluster id of k8s source.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        The cluster type of k8s source.
        """
        return pulumi.get(self, "cluster_type")


@pulumi.output_type
class GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceResult(dict):
    def __init__(__self__, *,
                 address: str,
                 auth_configs: Sequence['outputs.GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigResult'],
                 context_path: str,
                 grpc_port: int,
                 http_port: int,
                 nacos_id: str,
                 nacos_name: str):
        """
        :param str address: The address of nacos source.
        :param Sequence['GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigArgs'] auth_configs: The auth config of nacos source.
        :param str context_path: The context path of nacos source.
        :param int grpc_port: The grpc port of nacos source.
        :param int http_port: The http port of nacos source.
        :param str nacos_id: The nacos id of nacos source.
        :param str nacos_name: The nacos name of nacos source.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "auth_configs", auth_configs)
        pulumi.set(__self__, "context_path", context_path)
        pulumi.set(__self__, "grpc_port", grpc_port)
        pulumi.set(__self__, "http_port", http_port)
        pulumi.set(__self__, "nacos_id", nacos_id)
        pulumi.set(__self__, "nacos_name", nacos_name)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address of nacos source.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="authConfigs")
    def auth_configs(self) -> Sequence['outputs.GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigResult']:
        """
        The auth config of nacos source.
        """
        return pulumi.get(self, "auth_configs")

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> str:
        """
        The context path of nacos source.
        """
        return pulumi.get(self, "context_path")

    @property
    @pulumi.getter(name="grpcPort")
    def grpc_port(self) -> int:
        """
        The grpc port of nacos source.
        """
        return pulumi.get(self, "grpc_port")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> int:
        """
        The http port of nacos source.
        """
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="nacosId")
    def nacos_id(self) -> str:
        """
        The nacos id of nacos source.
        """
        return pulumi.get(self, "nacos_id")

    @property
    @pulumi.getter(name="nacosName")
    def nacos_name(self) -> str:
        """
        The nacos name of nacos source.
        """
        return pulumi.get(self, "nacos_name")


@pulumi.output_type
class GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigResult(dict):
    def __init__(__self__, *,
                 basics: Sequence['outputs.GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult']):
        """
        :param Sequence['GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs'] basics: The basic auth config of nacos source.
        """
        pulumi.set(__self__, "basics", basics)

    @property
    @pulumi.getter
    def basics(self) -> Sequence['outputs.GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult']:
        """
        The basic auth config of nacos source.
        """
        return pulumi.get(self, "basics")


@pulumi.output_type
class GetUpstreamSourcesUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The password of basic auth config.
        :param str username: The username of basic auth config.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of basic auth config.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username of basic auth config.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUpstreamVersionsVersionResult(dict):
    def __init__(__self__, *,
                 labels: Sequence['outputs.GetUpstreamVersionsVersionLabelResult'],
                 name: str,
                 update_time: str):
        """
        :param Sequence['GetUpstreamVersionsVersionLabelArgs'] labels: The labels of apig upstream version.
        :param str name: The name of apig upstream version.
        :param str update_time: The update time of apig upstream version.
        """
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetUpstreamVersionsVersionLabelResult']:
        """
        The labels of apig upstream version.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream version.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetUpstreamVersionsVersionLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of apig upstream version label.
        :param str value: The value of apig upstream version label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of apig upstream version label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of apig upstream version label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUpstreamsUpstreamResult(dict):
    def __init__(__self__, *,
                 backend_target_lists: Sequence['outputs.GetUpstreamsUpstreamBackendTargetListResult'],
                 circuit_breaking_settings: Sequence['outputs.GetUpstreamsUpstreamCircuitBreakingSettingResult'],
                 comments: str,
                 create_time: str,
                 gateway_id: str,
                 id: str,
                 load_balancer_settings: Sequence['outputs.GetUpstreamsUpstreamLoadBalancerSettingResult'],
                 name: str,
                 protocol: str,
                 resource_type: str,
                 source_type: str,
                 tls_settings: Sequence['outputs.GetUpstreamsUpstreamTlsSettingResult'],
                 update_time: str,
                 upstream_specs: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecResult'],
                 version_details: Sequence['outputs.GetUpstreamsUpstreamVersionDetailResult']):
        """
        :param Sequence['GetUpstreamsUpstreamBackendTargetListArgs'] backend_target_lists: The backend target list of apig upstream.
        :param Sequence['GetUpstreamsUpstreamCircuitBreakingSettingArgs'] circuit_breaking_settings: The circuit breaking settings of apig upstream.
        :param str comments: The comments of apig upstream.
        :param str create_time: The create time of apig upstream.
        :param str gateway_id: The id of api gateway.
        :param str id: The id of apig upstream.
        :param Sequence['GetUpstreamsUpstreamLoadBalancerSettingArgs'] load_balancer_settings: The load balancer settings of apig upstream.
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str protocol: The protocol of apig upstream.
        :param str resource_type: The resource type of apig upstream. Valid values: `Console`, `Ingress`.
        :param str source_type: The source type of apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        :param Sequence['GetUpstreamsUpstreamTlsSettingArgs'] tls_settings: The tls settings of apig upstream.
        :param str update_time: The update time of apig upstream version.
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecArgs'] upstream_specs: The upstream spec of apig upstream.
        :param Sequence['GetUpstreamsUpstreamVersionDetailArgs'] version_details: The version details of apig upstream.
        """
        pulumi.set(__self__, "backend_target_lists", backend_target_lists)
        pulumi.set(__self__, "circuit_breaking_settings", circuit_breaking_settings)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "load_balancer_settings", load_balancer_settings)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "tls_settings", tls_settings)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "upstream_specs", upstream_specs)
        pulumi.set(__self__, "version_details", version_details)

    @property
    @pulumi.getter(name="backendTargetLists")
    def backend_target_lists(self) -> Sequence['outputs.GetUpstreamsUpstreamBackendTargetListResult']:
        """
        The backend target list of apig upstream.
        """
        return pulumi.get(self, "backend_target_lists")

    @property
    @pulumi.getter(name="circuitBreakingSettings")
    def circuit_breaking_settings(self) -> Sequence['outputs.GetUpstreamsUpstreamCircuitBreakingSettingResult']:
        """
        The circuit breaking settings of apig upstream.
        """
        return pulumi.get(self, "circuit_breaking_settings")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        The comments of apig upstream.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of apig upstream.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        The id of api gateway.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of apig upstream.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loadBalancerSettings")
    def load_balancer_settings(self) -> Sequence['outputs.GetUpstreamsUpstreamLoadBalancerSettingResult']:
        """
        The load balancer settings of apig upstream.
        """
        return pulumi.get(self, "load_balancer_settings")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol of apig upstream.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource type of apig upstream. Valid values: `Console`, `Ingress`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        The source type of apig upstream. Valid values: `VeFaas`, `ECS`, `FixedIP`, `K8S`, `Nacos`, `Domain`, `AIProvider`, `VeMLP`.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="tlsSettings")
    def tls_settings(self) -> Sequence['outputs.GetUpstreamsUpstreamTlsSettingResult']:
        """
        The tls settings of apig upstream.
        """
        return pulumi.get(self, "tls_settings")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="upstreamSpecs")
    def upstream_specs(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecResult']:
        """
        The upstream spec of apig upstream.
        """
        return pulumi.get(self, "upstream_specs")

    @property
    @pulumi.getter(name="versionDetails")
    def version_details(self) -> Sequence['outputs.GetUpstreamsUpstreamVersionDetailResult']:
        """
        The version details of apig upstream.
        """
        return pulumi.get(self, "version_details")


@pulumi.output_type
class GetUpstreamsUpstreamBackendTargetListResult(dict):
    def __init__(__self__, *,
                 health_status: str,
                 ip: str,
                 port: int):
        """
        :param str health_status: The health status of apig upstream backend.
        :param str ip: The ip of apig upstream.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        The health status of apig upstream backend.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The ip of apig upstream.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetUpstreamsUpstreamCircuitBreakingSettingResult(dict):
    def __init__(__self__, *,
                 base_ejection_time: int,
                 consecutive_errors: int,
                 enable: bool,
                 interval: int,
                 max_ejection_percent: int,
                 min_health_percent: int):
        """
        :param int base_ejection_time: The base ejection time of circuit breaking. Unit: ms.
        :param int consecutive_errors: The consecutive errors of circuit breaking.
        :param bool enable: Whether the circuit breaking is enabled.
        :param int interval: The interval of circuit breaking. Unit: ms.
        :param int max_ejection_percent: The max ejection percent of circuit breaking.
        :param int min_health_percent: The min health percent of circuit breaking.
        """
        pulumi.set(__self__, "base_ejection_time", base_ejection_time)
        pulumi.set(__self__, "consecutive_errors", consecutive_errors)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "max_ejection_percent", max_ejection_percent)
        pulumi.set(__self__, "min_health_percent", min_health_percent)

    @property
    @pulumi.getter(name="baseEjectionTime")
    def base_ejection_time(self) -> int:
        """
        The base ejection time of circuit breaking. Unit: ms.
        """
        return pulumi.get(self, "base_ejection_time")

    @property
    @pulumi.getter(name="consecutiveErrors")
    def consecutive_errors(self) -> int:
        """
        The consecutive errors of circuit breaking.
        """
        return pulumi.get(self, "consecutive_errors")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether the circuit breaking is enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def interval(self) -> int:
        """
        The interval of circuit breaking. Unit: ms.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxEjectionPercent")
    def max_ejection_percent(self) -> int:
        """
        The max ejection percent of circuit breaking.
        """
        return pulumi.get(self, "max_ejection_percent")

    @property
    @pulumi.getter(name="minHealthPercent")
    def min_health_percent(self) -> int:
        """
        The min health percent of circuit breaking.
        """
        return pulumi.get(self, "min_health_percent")


@pulumi.output_type
class GetUpstreamsUpstreamLoadBalancerSettingResult(dict):
    def __init__(__self__, *,
                 consistent_hash_lbs: Sequence['outputs.GetUpstreamsUpstreamLoadBalancerSettingConsistentHashLbResult'],
                 lb_policy: str,
                 simple_lb: str,
                 warmup_duration: int):
        """
        :param Sequence['GetUpstreamsUpstreamLoadBalancerSettingConsistentHashLbArgs'] consistent_hash_lbs: The consistent hash lb of apig upstream.
        :param str lb_policy: The load balancer policy of apig upstream.
        :param str simple_lb: The simple load balancer of apig upstream.
        :param int warmup_duration: The warmup duration of apig upstream lb.
        """
        pulumi.set(__self__, "consistent_hash_lbs", consistent_hash_lbs)
        pulumi.set(__self__, "lb_policy", lb_policy)
        pulumi.set(__self__, "simple_lb", simple_lb)
        pulumi.set(__self__, "warmup_duration", warmup_duration)

    @property
    @pulumi.getter(name="consistentHashLbs")
    def consistent_hash_lbs(self) -> Sequence['outputs.GetUpstreamsUpstreamLoadBalancerSettingConsistentHashLbResult']:
        """
        The consistent hash lb of apig upstream.
        """
        return pulumi.get(self, "consistent_hash_lbs")

    @property
    @pulumi.getter(name="lbPolicy")
    def lb_policy(self) -> str:
        """
        The load balancer policy of apig upstream.
        """
        return pulumi.get(self, "lb_policy")

    @property
    @pulumi.getter(name="simpleLb")
    def simple_lb(self) -> str:
        """
        The simple load balancer of apig upstream.
        """
        return pulumi.get(self, "simple_lb")

    @property
    @pulumi.getter(name="warmupDuration")
    def warmup_duration(self) -> int:
        """
        The warmup duration of apig upstream lb.
        """
        return pulumi.get(self, "warmup_duration")


@pulumi.output_type
class GetUpstreamsUpstreamLoadBalancerSettingConsistentHashLbResult(dict):
    def __init__(__self__, *,
                 hash_key: str,
                 http_cookies: Sequence['outputs.GetUpstreamsUpstreamLoadBalancerSettingConsistentHashLbHttpCookyResult'],
                 http_header_name: str,
                 http_query_parameter_name: str,
                 use_source_ip: bool):
        """
        :param str hash_key: The hash key of apig upstream consistent hash lb.
        :param Sequence['GetUpstreamsUpstreamLoadBalancerSettingConsistentHashLbHttpCookyArgs'] http_cookies: The http cookie of apig upstream consistent hash lb.
        :param str http_header_name: The http header name of apig upstream consistent hash lb.
        :param str http_query_parameter_name: The http query parameter name of apig upstream consistent hash lb.
        :param bool use_source_ip: The use source ip of apig upstream consistent hash lb.
        """
        pulumi.set(__self__, "hash_key", hash_key)
        pulumi.set(__self__, "http_cookies", http_cookies)
        pulumi.set(__self__, "http_header_name", http_header_name)
        pulumi.set(__self__, "http_query_parameter_name", http_query_parameter_name)
        pulumi.set(__self__, "use_source_ip", use_source_ip)

    @property
    @pulumi.getter(name="hashKey")
    def hash_key(self) -> str:
        """
        The hash key of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "hash_key")

    @property
    @pulumi.getter(name="httpCookies")
    def http_cookies(self) -> Sequence['outputs.GetUpstreamsUpstreamLoadBalancerSettingConsistentHashLbHttpCookyResult']:
        """
        The http cookie of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_cookies")

    @property
    @pulumi.getter(name="httpHeaderName")
    def http_header_name(self) -> str:
        """
        The http header name of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_header_name")

    @property
    @pulumi.getter(name="httpQueryParameterName")
    def http_query_parameter_name(self) -> str:
        """
        The http query parameter name of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_query_parameter_name")

    @property
    @pulumi.getter(name="useSourceIp")
    def use_source_ip(self) -> bool:
        """
        The use source ip of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "use_source_ip")


@pulumi.output_type
class GetUpstreamsUpstreamLoadBalancerSettingConsistentHashLbHttpCookyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 ttl: int):
        """
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str path: The path of apig upstream consistent hash lb http cookie.
        :param int ttl: The ttl of apig upstream consistent hash lb http cookie.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of apig upstream consistent hash lb http cookie.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        The ttl of apig upstream consistent hash lb http cookie.
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetUpstreamsUpstreamTlsSettingResult(dict):
    def __init__(__self__, *,
                 sni: str,
                 tls_mode: str):
        """
        :param str sni: The sni of apig upstream tls setting.
        :param str tls_mode: The tls mode of apig upstream tls setting.
        """
        pulumi.set(__self__, "sni", sni)
        pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter
    def sni(self) -> str:
        """
        The sni of apig upstream tls setting.
        """
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> str:
        """
        The tls mode of apig upstream tls setting.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecResult(dict):
    def __init__(__self__, *,
                 ai_providers: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecAiProviderResult'],
                 domains: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecDomainResult'],
                 ecs_lists: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecEcsListResult'],
                 fixed_ip_lists: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecFixedIpListResult'],
                 k8s_services: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecK8sServiceResult'],
                 nacos_services: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecNacosServiceResult'],
                 ve_faas: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecVeFaaResult'],
                 ve_mlps: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecVeMlpResult']):
        """
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecAiProviderArgs'] ai_providers: The ai provider of apig upstream.
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecDomainArgs'] domains: The domain of apig upstream.
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecEcsListArgs'] ecs_lists: The ecs list of apig upstream.
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecFixedIpListArgs'] fixed_ip_lists: The fixed ip list of apig upstream.
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecK8sServiceArgs'] k8s_services: The k8s service of mlp.
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecNacosServiceArgs'] nacos_services: The nacos service of apig upstream.
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecVeFaaArgs'] ve_faas: The vefaas of apig upstream.
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecVeMlpArgs'] ve_mlps: The mlp of apig upstream.
        """
        pulumi.set(__self__, "ai_providers", ai_providers)
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "ecs_lists", ecs_lists)
        pulumi.set(__self__, "fixed_ip_lists", fixed_ip_lists)
        pulumi.set(__self__, "k8s_services", k8s_services)
        pulumi.set(__self__, "nacos_services", nacos_services)
        pulumi.set(__self__, "ve_faas", ve_faas)
        pulumi.set(__self__, "ve_mlps", ve_mlps)

    @property
    @pulumi.getter(name="aiProviders")
    def ai_providers(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecAiProviderResult']:
        """
        The ai provider of apig upstream.
        """
        return pulumi.get(self, "ai_providers")

    @property
    @pulumi.getter
    def domains(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecDomainResult']:
        """
        The domain of apig upstream.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="ecsLists")
    def ecs_lists(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecEcsListResult']:
        """
        The ecs list of apig upstream.
        """
        return pulumi.get(self, "ecs_lists")

    @property
    @pulumi.getter(name="fixedIpLists")
    def fixed_ip_lists(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecFixedIpListResult']:
        """
        The fixed ip list of apig upstream.
        """
        return pulumi.get(self, "fixed_ip_lists")

    @property
    @pulumi.getter(name="k8sServices")
    def k8s_services(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecK8sServiceResult']:
        """
        The k8s service of mlp.
        """
        return pulumi.get(self, "k8s_services")

    @property
    @pulumi.getter(name="nacosServices")
    def nacos_services(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecNacosServiceResult']:
        """
        The nacos service of apig upstream.
        """
        return pulumi.get(self, "nacos_services")

    @property
    @pulumi.getter(name="veFaas")
    def ve_faas(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecVeFaaResult']:
        """
        The vefaas of apig upstream.
        """
        return pulumi.get(self, "ve_faas")

    @property
    @pulumi.getter(name="veMlps")
    def ve_mlps(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecVeMlpResult']:
        """
        The mlp of apig upstream.
        """
        return pulumi.get(self, "ve_mlps")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecAiProviderResult(dict):
    def __init__(__self__, *,
                 base_url: str,
                 custom_body_params: Mapping[str, Any],
                 custom_header_params: Mapping[str, Any],
                 custom_model_services: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecAiProviderCustomModelServiceResult'],
                 name: str,
                 token: str):
        """
        :param str base_url: The base url of ai provider.
        :param Mapping[str, Any] custom_body_params: The custom body params of ai provider.
        :param Mapping[str, Any] custom_header_params: The custom header params of ai provider.
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecAiProviderCustomModelServiceArgs'] custom_model_services: The custom model service of ai provider.
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str token: The token of ai provider.
        """
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "custom_body_params", custom_body_params)
        pulumi.set(__self__, "custom_header_params", custom_header_params)
        pulumi.set(__self__, "custom_model_services", custom_model_services)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        The base url of ai provider.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="customBodyParams")
    def custom_body_params(self) -> Mapping[str, Any]:
        """
        The custom body params of ai provider.
        """
        return pulumi.get(self, "custom_body_params")

    @property
    @pulumi.getter(name="customHeaderParams")
    def custom_header_params(self) -> Mapping[str, Any]:
        """
        The custom header params of ai provider.
        """
        return pulumi.get(self, "custom_header_params")

    @property
    @pulumi.getter(name="customModelServices")
    def custom_model_services(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecAiProviderCustomModelServiceResult']:
        """
        The custom model service of ai provider.
        """
        return pulumi.get(self, "custom_model_services")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The token of ai provider.
        """
        return pulumi.get(self, "token")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecAiProviderCustomModelServiceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 port: int):
        """
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str namespace: The namespace of k8s service.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecDomainResult(dict):
    def __init__(__self__, *,
                 domain_lists: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecDomainDomainListResult'],
                 protocol: str):
        """
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecDomainDomainListArgs'] domain_lists: The domain list of apig upstream.
        :param str protocol: The protocol of apig upstream.
        """
        pulumi.set(__self__, "domain_lists", domain_lists)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="domainLists")
    def domain_lists(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecDomainDomainListResult']:
        """
        The domain list of apig upstream.
        """
        return pulumi.get(self, "domain_lists")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol of apig upstream.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecDomainDomainListResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 port: int):
        """
        :param str domain: The domain of apig upstream.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of apig upstream.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecEcsListResult(dict):
    def __init__(__self__, *,
                 ecs_id: str,
                 ip: str,
                 port: int):
        """
        :param str ecs_id: The instance id of ecs.
        :param str ip: The ip of apig upstream.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "ecs_id", ecs_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="ecsId")
    def ecs_id(self) -> str:
        """
        The instance id of ecs.
        """
        return pulumi.get(self, "ecs_id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The ip of apig upstream.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecFixedIpListResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: The ip of apig upstream.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The ip of apig upstream.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecK8sServiceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 port: int):
        """
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str namespace: The namespace of k8s service.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecNacosServiceResult(dict):
    def __init__(__self__, *,
                 group: str,
                 namespace: str,
                 namespace_id: str,
                 service: str,
                 upstream_source_id: str):
        """
        :param str group: The group of nacos service.
        :param str namespace: The namespace of k8s service.
        :param str namespace_id: The namespace id of nacos service.
        :param str service: The service of nacos service.
        :param str upstream_source_id: The upstream source id.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "upstream_source_id", upstream_source_id)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The group of nacos service.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        """
        The namespace id of nacos service.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        The service of nacos service.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="upstreamSourceId")
    def upstream_source_id(self) -> str:
        """
        The upstream source id.
        """
        return pulumi.get(self, "upstream_source_id")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecVeFaaResult(dict):
    def __init__(__self__, *,
                 function_id: str):
        """
        :param str function_id: The function id of vefaas.
        """
        pulumi.set(__self__, "function_id", function_id)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The function id of vefaas.
        """
        return pulumi.get(self, "function_id")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecVeMlpResult(dict):
    def __init__(__self__, *,
                 k8s_services: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecVeMlpK8sServiceResult'],
                 service_discover_type: str,
                 service_id: str,
                 service_name: str,
                 service_url: str,
                 upstream_source_id: str):
        """
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecVeMlpK8sServiceArgs'] k8s_services: The k8s service of mlp.
        :param str service_discover_type: The service discover type of mlp.
        :param str service_id: The service id of mlp.
        :param str service_name: The service name of mlp.
        :param str service_url: The service url of mlp.
        :param str upstream_source_id: The upstream source id.
        """
        pulumi.set(__self__, "k8s_services", k8s_services)
        pulumi.set(__self__, "service_discover_type", service_discover_type)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_url", service_url)
        pulumi.set(__self__, "upstream_source_id", upstream_source_id)

    @property
    @pulumi.getter(name="k8sServices")
    def k8s_services(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecVeMlpK8sServiceResult']:
        """
        The k8s service of mlp.
        """
        return pulumi.get(self, "k8s_services")

    @property
    @pulumi.getter(name="serviceDiscoverType")
    def service_discover_type(self) -> str:
        """
        The service discover type of mlp.
        """
        return pulumi.get(self, "service_discover_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The service id of mlp.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The service name of mlp.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceUrl")
    def service_url(self) -> str:
        """
        The service url of mlp.
        """
        return pulumi.get(self, "service_url")

    @property
    @pulumi.getter(name="upstreamSourceId")
    def upstream_source_id(self) -> str:
        """
        The upstream source id.
        """
        return pulumi.get(self, "upstream_source_id")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecVeMlpK8sServiceResult(dict):
    def __init__(__self__, *,
                 cluster_infos: Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoResult'],
                 name: str,
                 namespace: str,
                 port: int):
        """
        :param Sequence['GetUpstreamsUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoArgs'] cluster_infos: The cluster info of k8s service.
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str namespace: The namespace of k8s service.
        :param int port: The port of k8s service.
        """
        pulumi.set(__self__, "cluster_infos", cluster_infos)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="clusterInfos")
    def cluster_infos(self) -> Sequence['outputs.GetUpstreamsUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoResult']:
        """
        The cluster info of k8s service.
        """
        return pulumi.get(self, "cluster_infos")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetUpstreamsUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoResult(dict):
    def __init__(__self__, *,
                 account_id: int,
                 cluster_name: str):
        """
        :param int account_id: The account id of k8s service.
        :param str cluster_name: The cluster name of k8s service.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> int:
        """
        The account id of k8s service.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The cluster name of k8s service.
        """
        return pulumi.get(self, "cluster_name")


@pulumi.output_type
class GetUpstreamsUpstreamVersionDetailResult(dict):
    def __init__(__self__, *,
                 labels: Sequence['outputs.GetUpstreamsUpstreamVersionDetailLabelResult'],
                 name: str,
                 update_time: str):
        """
        :param Sequence['GetUpstreamsUpstreamVersionDetailLabelArgs'] labels: The labels of apig upstream version.
        :param str name: The name of apig upstream. This field support fuzzy query.
        :param str update_time: The update time of apig upstream version.
        """
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetUpstreamsUpstreamVersionDetailLabelResult']:
        """
        The labels of apig upstream version.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of apig upstream. This field support fuzzy query.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetUpstreamsUpstreamVersionDetailLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of apig upstream version label.
        :param str value: The value of apig upstream version label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of apig upstream version label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of apig upstream version label.
        """
        return pulumi.get(self, "value")


