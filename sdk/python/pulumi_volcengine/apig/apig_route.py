# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApigRouteArgs', 'ApigRoute']

@pulumi.input_type
class ApigRouteArgs:
    def __init__(__self__, *,
                 match_rule: pulumi.Input['ApigRouteMatchRuleArgs'],
                 service_id: pulumi.Input[str],
                 upstream_lists: pulumi.Input[Sequence[pulumi.Input['ApigRouteUpstreamListArgs']]],
                 advanced_setting: Optional[pulumi.Input['ApigRouteAdvancedSettingArgs']] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ApigRoute resource.
        :param pulumi.Input['ApigRouteMatchRuleArgs'] match_rule: The match rule of the api gateway route.
        :param pulumi.Input[str] service_id: The service id of the apig route.
        :param pulumi.Input[Sequence[pulumi.Input['ApigRouteUpstreamListArgs']]] upstream_lists: The upstream list of the api gateway route.
        :param pulumi.Input['ApigRouteAdvancedSettingArgs'] advanced_setting: The advanced setting of the api gateway route.
        :param pulumi.Input[bool] enable: Whether the apig route is enabled. Default is `false`.
        :param pulumi.Input[str] name: The name of the apig route.
        :param pulumi.Input[int] priority: The priority of the apig route. Valid values: 0~100.
        :param pulumi.Input[str] resource_type: The resource type of the apig route. Valid values: `Console`, `Ingress` Default is `Console`.
        """
        pulumi.set(__self__, "match_rule", match_rule)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "upstream_lists", upstream_lists)
        if advanced_setting is not None:
            pulumi.set(__self__, "advanced_setting", advanced_setting)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="matchRule")
    def match_rule(self) -> pulumi.Input['ApigRouteMatchRuleArgs']:
        """
        The match rule of the api gateway route.
        """
        return pulumi.get(self, "match_rule")

    @match_rule.setter
    def match_rule(self, value: pulumi.Input['ApigRouteMatchRuleArgs']):
        pulumi.set(self, "match_rule", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        The service id of the apig route.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="upstreamLists")
    def upstream_lists(self) -> pulumi.Input[Sequence[pulumi.Input['ApigRouteUpstreamListArgs']]]:
        """
        The upstream list of the api gateway route.
        """
        return pulumi.get(self, "upstream_lists")

    @upstream_lists.setter
    def upstream_lists(self, value: pulumi.Input[Sequence[pulumi.Input['ApigRouteUpstreamListArgs']]]):
        pulumi.set(self, "upstream_lists", value)

    @property
    @pulumi.getter(name="advancedSetting")
    def advanced_setting(self) -> Optional[pulumi.Input['ApigRouteAdvancedSettingArgs']]:
        """
        The advanced setting of the api gateway route.
        """
        return pulumi.get(self, "advanced_setting")

    @advanced_setting.setter
    def advanced_setting(self, value: Optional[pulumi.Input['ApigRouteAdvancedSettingArgs']]):
        pulumi.set(self, "advanced_setting", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the apig route is enabled. Default is `false`.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the apig route.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the apig route. Valid values: 0~100.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The resource type of the apig route. Valid values: `Console`, `Ingress` Default is `Console`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class _ApigRouteState:
    def __init__(__self__, *,
                 advanced_setting: Optional[pulumi.Input['ApigRouteAdvancedSettingArgs']] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 custom_domains: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteCustomDomainArgs']]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteDomainArgs']]]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 match_rule: Optional[pulumi.Input['ApigRouteMatchRuleArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 upstream_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteUpstreamListArgs']]]] = None):
        """
        Input properties used for looking up and filtering ApigRoute resources.
        :param pulumi.Input['ApigRouteAdvancedSettingArgs'] advanced_setting: The advanced setting of the api gateway route.
        :param pulumi.Input[str] create_time: The create time of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input['ApigRouteCustomDomainArgs']]] custom_domains: The custom domains of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input['ApigRouteDomainArgs']]] domains: The domains of the api gateway route.
        :param pulumi.Input[bool] enable: Whether the apig route is enabled. Default is `false`.
        :param pulumi.Input['ApigRouteMatchRuleArgs'] match_rule: The match rule of the api gateway route.
        :param pulumi.Input[str] name: The name of the apig route.
        :param pulumi.Input[int] priority: The priority of the apig route. Valid values: 0~100.
        :param pulumi.Input[str] reason: The reason of the api gateway route.
        :param pulumi.Input[str] resource_type: The resource type of the apig route. Valid values: `Console`, `Ingress` Default is `Console`.
        :param pulumi.Input[str] service_id: The service id of the apig route.
        :param pulumi.Input[str] status: The status of the api gateway route.
        :param pulumi.Input[str] update_time: The update time of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input['ApigRouteUpstreamListArgs']]] upstream_lists: The upstream list of the api gateway route.
        """
        if advanced_setting is not None:
            pulumi.set(__self__, "advanced_setting", advanced_setting)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if custom_domains is not None:
            pulumi.set(__self__, "custom_domains", custom_domains)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if match_rule is not None:
            pulumi.set(__self__, "match_rule", match_rule)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if upstream_lists is not None:
            pulumi.set(__self__, "upstream_lists", upstream_lists)

    @property
    @pulumi.getter(name="advancedSetting")
    def advanced_setting(self) -> Optional[pulumi.Input['ApigRouteAdvancedSettingArgs']]:
        """
        The advanced setting of the api gateway route.
        """
        return pulumi.get(self, "advanced_setting")

    @advanced_setting.setter
    def advanced_setting(self, value: Optional[pulumi.Input['ApigRouteAdvancedSettingArgs']]):
        pulumi.set(self, "advanced_setting", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of the api gateway route.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="customDomains")
    def custom_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteCustomDomainArgs']]]]:
        """
        The custom domains of the api gateway route.
        """
        return pulumi.get(self, "custom_domains")

    @custom_domains.setter
    def custom_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteCustomDomainArgs']]]]):
        pulumi.set(self, "custom_domains", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteDomainArgs']]]]:
        """
        The domains of the api gateway route.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteDomainArgs']]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the apig route is enabled. Default is `false`.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="matchRule")
    def match_rule(self) -> Optional[pulumi.Input['ApigRouteMatchRuleArgs']]:
        """
        The match rule of the api gateway route.
        """
        return pulumi.get(self, "match_rule")

    @match_rule.setter
    def match_rule(self, value: Optional[pulumi.Input['ApigRouteMatchRuleArgs']]):
        pulumi.set(self, "match_rule", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the apig route.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the apig route. Valid values: 0~100.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason of the api gateway route.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The resource type of the apig route. Valid values: `Console`, `Ingress` Default is `Console`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The service id of the apig route.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the api gateway route.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of the api gateway route.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="upstreamLists")
    def upstream_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteUpstreamListArgs']]]]:
        """
        The upstream list of the api gateway route.
        """
        return pulumi.get(self, "upstream_lists")

    @upstream_lists.setter
    def upstream_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteUpstreamListArgs']]]]):
        pulumi.set(self, "upstream_lists", value)


class ApigRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced_setting: Optional[pulumi.Input[pulumi.InputType['ApigRouteAdvancedSettingArgs']]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 match_rule: Optional[pulumi.Input[pulumi.InputType['ApigRouteMatchRuleArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 upstream_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigRouteUpstreamListArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage apig route
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        foo_fixed_ip = volcengine.apig.ApigUpstream("foo-fixed-ip",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test",
            resource_type="Console",
            protocol="HTTP",
            load_balancer_settings=volcengine.apig.ApigUpstreamLoadBalancerSettingsArgs(
                lb_policy="ConsistentHashLB",
                consistent_hash_lb=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs(
                    hash_key="HTTPCookie",
                    http_cookie=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs(
                        name="test",
                        path="/",
                        ttl=300,
                    ),
                ),
            ),
            tls_settings=volcengine.apig.ApigUpstreamTlsSettingsArgs(
                tls_mode="SIMPLE",
                sni="test",
            ),
            circuit_breaking_settings=volcengine.apig.ApigUpstreamCircuitBreakingSettingsArgs(
                enable=False,
                consecutive_errors=5,
                interval=10000,
                base_ejection_time=30000,
                max_ejection_percent=20,
                min_health_percent=60,
            ),
            source_type="FixedIP",
            upstream_spec=volcengine.apig.ApigUpstreamUpstreamSpecArgs(
                fixed_ip_lists=[
                    volcengine.apig.ApigUpstreamUpstreamSpecFixedIpListArgs(
                        ip="172.16.0.10",
                        port=8080,
                    ),
                    volcengine.apig.ApigUpstreamUpstreamSpecFixedIpListArgs(
                        ip="172.16.0.20",
                        port=8090,
                    ),
                    volcengine.apig.ApigUpstreamUpstreamSpecFixedIpListArgs(
                        ip="172.16.0.30",
                        port=8099,
                    ),
                ],
            ))
        foo_apig_route = volcengine.apig.ApigRoute("fooApigRoute",
            service_id=foo_apig_gateway_service.id,
            resource_type="Console",
            priority=2,
            enable=True,
            upstream_lists=[volcengine.apig.ApigRouteUpstreamListArgs(
                upstream_id=foo_fixed_ip.id,
                weight=100,
            )],
            match_rule=volcengine.apig.ApigRouteMatchRuleArgs(
                path=volcengine.apig.ApigRouteMatchRulePathArgs(
                    match_type="Prefix",
                    match_content="/test",
                ),
                methods=[
                    "GET",
                    "POST",
                ],
                query_strings=[volcengine.apig.ApigRouteMatchRuleQueryStringArgs(
                    key="test-key",
                    value=volcengine.apig.ApigRouteMatchRuleQueryStringValueArgs(
                        match_type="Exact",
                        match_content="test-value",
                    ),
                )],
                headers=[volcengine.apig.ApigRouteMatchRuleHeaderArgs(
                    key="test-header",
                    value=volcengine.apig.ApigRouteMatchRuleHeaderValueArgs(
                        match_type="Regex",
                        match_content="test-value",
                    ),
                )],
            ),
            advanced_setting=volcengine.apig.ApigRouteAdvancedSettingArgs(
                timeout_setting=volcengine.apig.ApigRouteAdvancedSettingTimeoutSettingArgs(
                    enable=False,
                    timeout=10,
                ),
                cors_policy_setting=volcengine.apig.ApigRouteAdvancedSettingCorsPolicySettingArgs(
                    enable=False,
                ),
                url_rewrite_setting=volcengine.apig.ApigRouteAdvancedSettingUrlRewriteSettingArgs(
                    enable=True,
                    url_rewrite="/test",
                ),
                retry_policy_setting=volcengine.apig.ApigRouteAdvancedSettingRetryPolicySettingArgs(
                    enable=True,
                    attempts=5,
                    per_try_timeout=1000,
                    retry_ons=[
                        "5xx",
                        "reset",
                    ],
                    http_codes=[
                        "500",
                        "502",
                        "503",
                        "504",
                    ],
                ),
                header_operations=[
                    volcengine.apig.ApigRouteAdvancedSettingHeaderOperationArgs(
                        operation="add",
                        key="test-header-req",
                        value="test-value",
                        direction_type="request",
                    ),
                    volcengine.apig.ApigRouteAdvancedSettingHeaderOperationArgs(
                        operation="set",
                        key="test-header-resp",
                        value="test-value",
                        direction_type="response",
                    ),
                ],
                mirror_policies=[volcengine.apig.ApigRouteAdvancedSettingMirrorPolicyArgs(
                    upstream=volcengine.apig.ApigRouteAdvancedSettingMirrorPolicyUpstreamArgs(
                        upstream_id=foo_fixed_ip.id,
                        type="fixed_ip",
                    ),
                    percent=volcengine.apig.ApigRouteAdvancedSettingMirrorPolicyPercentArgs(
                        value=50,
                    ),
                )],
            ))
        ```

        ## Import

        ApigRoute can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigRoute:ApigRoute default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ApigRouteAdvancedSettingArgs']] advanced_setting: The advanced setting of the api gateway route.
        :param pulumi.Input[bool] enable: Whether the apig route is enabled. Default is `false`.
        :param pulumi.Input[pulumi.InputType['ApigRouteMatchRuleArgs']] match_rule: The match rule of the api gateway route.
        :param pulumi.Input[str] name: The name of the apig route.
        :param pulumi.Input[int] priority: The priority of the apig route. Valid values: 0~100.
        :param pulumi.Input[str] resource_type: The resource type of the apig route. Valid values: `Console`, `Ingress` Default is `Console`.
        :param pulumi.Input[str] service_id: The service id of the apig route.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigRouteUpstreamListArgs']]]] upstream_lists: The upstream list of the api gateway route.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApigRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage apig route
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        foo_fixed_ip = volcengine.apig.ApigUpstream("foo-fixed-ip",
            gateway_id=foo_apig_gateway.id,
            comments="acc-test",
            resource_type="Console",
            protocol="HTTP",
            load_balancer_settings=volcengine.apig.ApigUpstreamLoadBalancerSettingsArgs(
                lb_policy="ConsistentHashLB",
                consistent_hash_lb=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs(
                    hash_key="HTTPCookie",
                    http_cookie=volcengine.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs(
                        name="test",
                        path="/",
                        ttl=300,
                    ),
                ),
            ),
            tls_settings=volcengine.apig.ApigUpstreamTlsSettingsArgs(
                tls_mode="SIMPLE",
                sni="test",
            ),
            circuit_breaking_settings=volcengine.apig.ApigUpstreamCircuitBreakingSettingsArgs(
                enable=False,
                consecutive_errors=5,
                interval=10000,
                base_ejection_time=30000,
                max_ejection_percent=20,
                min_health_percent=60,
            ),
            source_type="FixedIP",
            upstream_spec=volcengine.apig.ApigUpstreamUpstreamSpecArgs(
                fixed_ip_lists=[
                    volcengine.apig.ApigUpstreamUpstreamSpecFixedIpListArgs(
                        ip="172.16.0.10",
                        port=8080,
                    ),
                    volcengine.apig.ApigUpstreamUpstreamSpecFixedIpListArgs(
                        ip="172.16.0.20",
                        port=8090,
                    ),
                    volcengine.apig.ApigUpstreamUpstreamSpecFixedIpListArgs(
                        ip="172.16.0.30",
                        port=8099,
                    ),
                ],
            ))
        foo_apig_route = volcengine.apig.ApigRoute("fooApigRoute",
            service_id=foo_apig_gateway_service.id,
            resource_type="Console",
            priority=2,
            enable=True,
            upstream_lists=[volcengine.apig.ApigRouteUpstreamListArgs(
                upstream_id=foo_fixed_ip.id,
                weight=100,
            )],
            match_rule=volcengine.apig.ApigRouteMatchRuleArgs(
                path=volcengine.apig.ApigRouteMatchRulePathArgs(
                    match_type="Prefix",
                    match_content="/test",
                ),
                methods=[
                    "GET",
                    "POST",
                ],
                query_strings=[volcengine.apig.ApigRouteMatchRuleQueryStringArgs(
                    key="test-key",
                    value=volcengine.apig.ApigRouteMatchRuleQueryStringValueArgs(
                        match_type="Exact",
                        match_content="test-value",
                    ),
                )],
                headers=[volcengine.apig.ApigRouteMatchRuleHeaderArgs(
                    key="test-header",
                    value=volcengine.apig.ApigRouteMatchRuleHeaderValueArgs(
                        match_type="Regex",
                        match_content="test-value",
                    ),
                )],
            ),
            advanced_setting=volcengine.apig.ApigRouteAdvancedSettingArgs(
                timeout_setting=volcengine.apig.ApigRouteAdvancedSettingTimeoutSettingArgs(
                    enable=False,
                    timeout=10,
                ),
                cors_policy_setting=volcengine.apig.ApigRouteAdvancedSettingCorsPolicySettingArgs(
                    enable=False,
                ),
                url_rewrite_setting=volcengine.apig.ApigRouteAdvancedSettingUrlRewriteSettingArgs(
                    enable=True,
                    url_rewrite="/test",
                ),
                retry_policy_setting=volcengine.apig.ApigRouteAdvancedSettingRetryPolicySettingArgs(
                    enable=True,
                    attempts=5,
                    per_try_timeout=1000,
                    retry_ons=[
                        "5xx",
                        "reset",
                    ],
                    http_codes=[
                        "500",
                        "502",
                        "503",
                        "504",
                    ],
                ),
                header_operations=[
                    volcengine.apig.ApigRouteAdvancedSettingHeaderOperationArgs(
                        operation="add",
                        key="test-header-req",
                        value="test-value",
                        direction_type="request",
                    ),
                    volcengine.apig.ApigRouteAdvancedSettingHeaderOperationArgs(
                        operation="set",
                        key="test-header-resp",
                        value="test-value",
                        direction_type="response",
                    ),
                ],
                mirror_policies=[volcengine.apig.ApigRouteAdvancedSettingMirrorPolicyArgs(
                    upstream=volcengine.apig.ApigRouteAdvancedSettingMirrorPolicyUpstreamArgs(
                        upstream_id=foo_fixed_ip.id,
                        type="fixed_ip",
                    ),
                    percent=volcengine.apig.ApigRouteAdvancedSettingMirrorPolicyPercentArgs(
                        value=50,
                    ),
                )],
            ))
        ```

        ## Import

        ApigRoute can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigRoute:ApigRoute default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ApigRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApigRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced_setting: Optional[pulumi.Input[pulumi.InputType['ApigRouteAdvancedSettingArgs']]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 match_rule: Optional[pulumi.Input[pulumi.InputType['ApigRouteMatchRuleArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 upstream_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigRouteUpstreamListArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApigRouteArgs.__new__(ApigRouteArgs)

            __props__.__dict__["advanced_setting"] = advanced_setting
            __props__.__dict__["enable"] = enable
            if match_rule is None and not opts.urn:
                raise TypeError("Missing required property 'match_rule'")
            __props__.__dict__["match_rule"] = match_rule
            __props__.__dict__["name"] = name
            __props__.__dict__["priority"] = priority
            __props__.__dict__["resource_type"] = resource_type
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            if upstream_lists is None and not opts.urn:
                raise TypeError("Missing required property 'upstream_lists'")
            __props__.__dict__["upstream_lists"] = upstream_lists
            __props__.__dict__["create_time"] = None
            __props__.__dict__["custom_domains"] = None
            __props__.__dict__["domains"] = None
            __props__.__dict__["reason"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_time"] = None
        super(ApigRoute, __self__).__init__(
            'volcengine:apig/apigRoute:ApigRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            advanced_setting: Optional[pulumi.Input[pulumi.InputType['ApigRouteAdvancedSettingArgs']]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            custom_domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigRouteCustomDomainArgs']]]]] = None,
            domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigRouteDomainArgs']]]]] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            match_rule: Optional[pulumi.Input[pulumi.InputType['ApigRouteMatchRuleArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            reason: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            upstream_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigRouteUpstreamListArgs']]]]] = None) -> 'ApigRoute':
        """
        Get an existing ApigRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ApigRouteAdvancedSettingArgs']] advanced_setting: The advanced setting of the api gateway route.
        :param pulumi.Input[str] create_time: The create time of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigRouteCustomDomainArgs']]]] custom_domains: The custom domains of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigRouteDomainArgs']]]] domains: The domains of the api gateway route.
        :param pulumi.Input[bool] enable: Whether the apig route is enabled. Default is `false`.
        :param pulumi.Input[pulumi.InputType['ApigRouteMatchRuleArgs']] match_rule: The match rule of the api gateway route.
        :param pulumi.Input[str] name: The name of the apig route.
        :param pulumi.Input[int] priority: The priority of the apig route. Valid values: 0~100.
        :param pulumi.Input[str] reason: The reason of the api gateway route.
        :param pulumi.Input[str] resource_type: The resource type of the apig route. Valid values: `Console`, `Ingress` Default is `Console`.
        :param pulumi.Input[str] service_id: The service id of the apig route.
        :param pulumi.Input[str] status: The status of the api gateway route.
        :param pulumi.Input[str] update_time: The update time of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApigRouteUpstreamListArgs']]]] upstream_lists: The upstream list of the api gateway route.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApigRouteState.__new__(_ApigRouteState)

        __props__.__dict__["advanced_setting"] = advanced_setting
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["custom_domains"] = custom_domains
        __props__.__dict__["domains"] = domains
        __props__.__dict__["enable"] = enable
        __props__.__dict__["match_rule"] = match_rule
        __props__.__dict__["name"] = name
        __props__.__dict__["priority"] = priority
        __props__.__dict__["reason"] = reason
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["status"] = status
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["upstream_lists"] = upstream_lists
        return ApigRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="advancedSetting")
    def advanced_setting(self) -> pulumi.Output['outputs.ApigRouteAdvancedSetting']:
        """
        The advanced setting of the api gateway route.
        """
        return pulumi.get(self, "advanced_setting")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of the api gateway route.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customDomains")
    def custom_domains(self) -> pulumi.Output[Sequence['outputs.ApigRouteCustomDomain']]:
        """
        The custom domains of the api gateway route.
        """
        return pulumi.get(self, "custom_domains")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Sequence['outputs.ApigRouteDomain']]:
        """
        The domains of the api gateway route.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[bool]:
        """
        Whether the apig route is enabled. Default is `false`.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="matchRule")
    def match_rule(self) -> pulumi.Output['outputs.ApigRouteMatchRule']:
        """
        The match rule of the api gateway route.
        """
        return pulumi.get(self, "match_rule")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the apig route.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        The priority of the apig route. Valid values: 0~100.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Output[str]:
        """
        The reason of the api gateway route.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        The resource type of the apig route. Valid values: `Console`, `Ingress` Default is `Console`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        The service id of the apig route.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the api gateway route.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The update time of the api gateway route.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="upstreamLists")
    def upstream_lists(self) -> pulumi.Output[Sequence['outputs.ApigRouteUpstreamList']]:
        """
        The upstream list of the api gateway route.
        """
        return pulumi.get(self, "upstream_lists")

