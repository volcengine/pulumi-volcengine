# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApigGatewayServiceArgs', 'ApigGatewayService']

@pulumi.input_type
class ApigGatewayServiceArgs:
    def __init__(__self__, *,
                 auth_spec: pulumi.Input['ApigGatewayServiceAuthSpecArgs'],
                 gateway_id: pulumi.Input[str],
                 protocols: pulumi.Input[Sequence[pulumi.Input[str]]],
                 service_name: pulumi.Input[str],
                 comments: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ApigGatewayService resource.
        :param pulumi.Input['ApigGatewayServiceAuthSpecArgs'] auth_spec: The auth spec of the api gateway service.
        :param pulumi.Input[str] gateway_id: The gateway id of api gateway service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol of api gateway service.
        :param pulumi.Input[str] service_name: The name of api gateway service.
        :param pulumi.Input[str] comments: The comments of api gateway service.
        """
        pulumi.set(__self__, "auth_spec", auth_spec)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "service_name", service_name)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)

    @property
    @pulumi.getter(name="authSpec")
    def auth_spec(self) -> pulumi.Input['ApigGatewayServiceAuthSpecArgs']:
        """
        The auth spec of the api gateway service.
        """
        return pulumi.get(self, "auth_spec")

    @auth_spec.setter
    def auth_spec(self, value: pulumi.Input['ApigGatewayServiceAuthSpecArgs']):
        pulumi.set(self, "auth_spec", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        The gateway id of api gateway service.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The protocol of api gateway service.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of api gateway service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        The comments of api gateway service.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)


@pulumi.input_type
class _ApigGatewayServiceState:
    def __init__(__self__, *,
                 auth_spec: Optional[pulumi.Input['ApigGatewayServiceAuthSpecArgs']] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApigGatewayService resources.
        :param pulumi.Input['ApigGatewayServiceAuthSpecArgs'] auth_spec: The auth spec of the api gateway service.
        :param pulumi.Input[str] comments: The comments of api gateway service.
        :param pulumi.Input[str] create_time: The create time of the api gateway service.
        :param pulumi.Input[str] gateway_id: The gateway id of api gateway service.
        :param pulumi.Input[str] message: The error message of the api gateway service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol of api gateway service.
        :param pulumi.Input[str] service_name: The name of api gateway service.
        :param pulumi.Input[str] status: The status of the api gateway service.
        """
        if auth_spec is not None:
            pulumi.set(__self__, "auth_spec", auth_spec)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authSpec")
    def auth_spec(self) -> Optional[pulumi.Input['ApigGatewayServiceAuthSpecArgs']]:
        """
        The auth spec of the api gateway service.
        """
        return pulumi.get(self, "auth_spec")

    @auth_spec.setter
    def auth_spec(self, value: Optional[pulumi.Input['ApigGatewayServiceAuthSpecArgs']]):
        pulumi.set(self, "auth_spec", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        The comments of api gateway service.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of the api gateway service.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        The gateway id of api gateway service.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        The error message of the api gateway service.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The protocol of api gateway service.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of api gateway service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the api gateway service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class ApigGatewayService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_spec: Optional[pulumi.Input[pulumi.InputType['ApigGatewayServiceAuthSpecArgs']]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage apig gateway service
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        ```

        ## Import

        ApigGatewayService can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigGatewayService:ApigGatewayService default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ApigGatewayServiceAuthSpecArgs']] auth_spec: The auth spec of the api gateway service.
        :param pulumi.Input[str] comments: The comments of api gateway service.
        :param pulumi.Input[str] gateway_id: The gateway id of api gateway service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol of api gateway service.
        :param pulumi.Input[str] service_name: The name of api gateway service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApigGatewayServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage apig gateway service
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.get_zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo1 = volcengine.vpc.Subnet("foo1",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo2 = volcengine.vpc.Subnet("foo2",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.1.0/24",
            zone_id=foo_zones.zones[1].id,
            vpc_id=foo_vpc.id)
        foo_apig_gateway = volcengine.apig.ApigGateway("fooApigGateway",
            type="standard",
            comments="acc-test",
            project_name="default",
            tags=[volcengine.apig.ApigGatewayTagArgs(
                key="k1",
                value="v1",
            )],
            network_spec=volcengine.apig.ApigGatewayNetworkSpecArgs(
                vpc_id=foo_vpc.id,
                subnet_ids=[
                    foo1.id,
                    foo2.id,
                ],
            ),
            resource_spec=volcengine.apig.ApigGatewayResourceSpecArgs(
                replicas=2,
                instance_spec_code="1c2g",
                clb_spec_code="small_1",
                public_network_billing_type="bandwidth",
                public_network_bandwidth=1,
                network_type=volcengine.apig.ApigGatewayResourceSpecNetworkTypeArgs(
                    enable_public_network=True,
                    enable_private_network=True,
                ),
            ),
            log_spec=volcengine.apig.ApigGatewayLogSpecArgs(
                enable=True,
                project_id="d3cb87c0-faeb-4074-b1ee-9bd747865a76",
                topic_id="d339482e-d86d-4bd8-a9bb-f270417f00a1",
            ),
            monitor_spec=volcengine.apig.ApigGatewayMonitorSpecArgs(
                enable=True,
                workspace_id="4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
            ))
        foo_apig_gateway_service = volcengine.apig.ApigGatewayService("fooApigGatewayService",
            gateway_id=foo_apig_gateway.id,
            service_name="acc-test-apig-service",
            comments="acc-test",
            protocols=[
                "HTTP",
                "HTTPS",
            ],
            auth_spec=volcengine.apig.ApigGatewayServiceAuthSpecArgs(
                enable=False,
            ))
        ```

        ## Import

        ApigGatewayService can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:apig/apigGatewayService:ApigGatewayService default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ApigGatewayServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApigGatewayServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_spec: Optional[pulumi.Input[pulumi.InputType['ApigGatewayServiceAuthSpecArgs']]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApigGatewayServiceArgs.__new__(ApigGatewayServiceArgs)

            if auth_spec is None and not opts.urn:
                raise TypeError("Missing required property 'auth_spec'")
            __props__.__dict__["auth_spec"] = auth_spec
            __props__.__dict__["comments"] = comments
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            if protocols is None and not opts.urn:
                raise TypeError("Missing required property 'protocols'")
            __props__.__dict__["protocols"] = protocols
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["create_time"] = None
            __props__.__dict__["message"] = None
            __props__.__dict__["status"] = None
        super(ApigGatewayService, __self__).__init__(
            'volcengine:apig/apigGatewayService:ApigGatewayService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_spec: Optional[pulumi.Input[pulumi.InputType['ApigGatewayServiceAuthSpecArgs']]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            message: Optional[pulumi.Input[str]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            service_name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'ApigGatewayService':
        """
        Get an existing ApigGatewayService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ApigGatewayServiceAuthSpecArgs']] auth_spec: The auth spec of the api gateway service.
        :param pulumi.Input[str] comments: The comments of api gateway service.
        :param pulumi.Input[str] create_time: The create time of the api gateway service.
        :param pulumi.Input[str] gateway_id: The gateway id of api gateway service.
        :param pulumi.Input[str] message: The error message of the api gateway service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol of api gateway service.
        :param pulumi.Input[str] service_name: The name of api gateway service.
        :param pulumi.Input[str] status: The status of the api gateway service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApigGatewayServiceState.__new__(_ApigGatewayServiceState)

        __props__.__dict__["auth_spec"] = auth_spec
        __props__.__dict__["comments"] = comments
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["message"] = message
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["status"] = status
        return ApigGatewayService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authSpec")
    def auth_spec(self) -> pulumi.Output['outputs.ApigGatewayServiceAuthSpec']:
        """
        The auth spec of the api gateway service.
        """
        return pulumi.get(self, "auth_spec")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        The comments of api gateway service.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of the api gateway service.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        The gateway id of api gateway service.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        """
        The error message of the api gateway service.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Sequence[str]]:
        """
        The protocol of api gateway service.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        """
        The name of api gateway service.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the api gateway service.
        """
        return pulumi.get(self, "status")

