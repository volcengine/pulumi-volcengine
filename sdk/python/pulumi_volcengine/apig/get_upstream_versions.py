# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetUpstreamVersionsResult',
    'AwaitableGetUpstreamVersionsResult',
    'get_upstream_versions',
    'get_upstream_versions_output',
]

@pulumi.output_type
class GetUpstreamVersionsResult:
    """
    A collection of values returned by getUpstreamVersions.
    """
    def __init__(__self__, id=None, name_regex=None, output_file=None, total_count=None, upstream_id=None, versions=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if upstream_id and not isinstance(upstream_id, str):
            raise TypeError("Expected argument 'upstream_id' to be a str")
        pulumi.set(__self__, "upstream_id", upstream_id)
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> str:
        return pulumi.get(self, "upstream_id")

    @property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.GetUpstreamVersionsVersionResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "versions")


class AwaitableGetUpstreamVersionsResult(GetUpstreamVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUpstreamVersionsResult(
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count,
            upstream_id=self.upstream_id,
            versions=self.versions)


def get_upstream_versions(name_regex: Optional[str] = None,
                          output_file: Optional[str] = None,
                          upstream_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUpstreamVersionsResult:
    """
    Use this data source to query detailed information of apig upstream versions
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.apig.get_upstream_versions(upstream_id="ud18p5krj5ce3htvrd0v0")
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str upstream_id: The id of the apig upstream.
    """
    __args__ = dict()
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['upstreamId'] = upstream_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:apig/getUpstreamVersions:getUpstreamVersions', __args__, opts=opts, typ=GetUpstreamVersionsResult).value

    return AwaitableGetUpstreamVersionsResult(
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'),
        upstream_id=pulumi.get(__ret__, 'upstream_id'),
        versions=pulumi.get(__ret__, 'versions'))


@_utilities.lift_output_func(get_upstream_versions)
def get_upstream_versions_output(name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                                 output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                 upstream_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUpstreamVersionsResult]:
    """
    Use this data source to query detailed information of apig upstream versions
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.apig.get_upstream_versions(upstream_id="ud18p5krj5ce3htvrd0v0")
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str upstream_id: The id of the apig upstream.
    """
    ...
