# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CustomDomainsResult',
    'AwaitableCustomDomainsResult',
    'custom_domains',
    'custom_domains_output',
]

warnings.warn("""volcengine.apig.CustomDomains has been deprecated in favor of volcengine.apig.getCustomDomains""", DeprecationWarning)

@pulumi.output_type
class CustomDomainsResult:
    """
    A collection of values returned by CustomDomains.
    """
    def __init__(__self__, custom_domains=None, gateway_id=None, id=None, name_regex=None, output_file=None, resource_type=None, service_id=None, total_count=None):
        if custom_domains and not isinstance(custom_domains, list):
            raise TypeError("Expected argument 'custom_domains' to be a list")
        pulumi.set(__self__, "custom_domains", custom_domains)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="customDomains")
    def custom_domains(self) -> Sequence['outputs.CustomDomainsCustomDomainResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "custom_domains")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The resource type of domain.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[str]:
        """
        The id of the api gateway service.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableCustomDomainsResult(CustomDomainsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return CustomDomainsResult(
            custom_domains=self.custom_domains,
            gateway_id=self.gateway_id,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            resource_type=self.resource_type,
            service_id=self.service_id,
            total_count=self.total_count)


def custom_domains(gateway_id: Optional[str] = None,
                   name_regex: Optional[str] = None,
                   output_file: Optional[str] = None,
                   resource_type: Optional[str] = None,
                   service_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableCustomDomainsResult:
    """
    Use this data source to query detailed information of apig custom domains
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.apig.get_custom_domains(gateway_id="gd13d8c6eq1emkiunq6p0",
        service_id="sd142lm6kiaj519k4l640")
    ```


    :param str gateway_id: The id of api gateway.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str resource_type: The resource type of domain. Valid values: `Console`, `Ingress`.
    :param str service_id: The id of api gateway service.
    """
    pulumi.log.warn("""custom_domains is deprecated: volcengine.apig.CustomDomains has been deprecated in favor of volcengine.apig.getCustomDomains""")
    __args__ = dict()
    __args__['gatewayId'] = gateway_id
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['resourceType'] = resource_type
    __args__['serviceId'] = service_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:apig/customDomains:CustomDomains', __args__, opts=opts, typ=CustomDomainsResult).value

    return AwaitableCustomDomainsResult(
        custom_domains=pulumi.get(__ret__, 'custom_domains'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        service_id=pulumi.get(__ret__, 'service_id'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(custom_domains)
def custom_domains_output(gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                          name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                          output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          resource_type: Optional[pulumi.Input[Optional[str]]] = None,
                          service_id: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[CustomDomainsResult]:
    """
    Use this data source to query detailed information of apig custom domains
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.apig.get_custom_domains(gateway_id="gd13d8c6eq1emkiunq6p0",
        service_id="sd142lm6kiaj519k4l640")
    ```


    :param str gateway_id: The id of api gateway.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str resource_type: The resource type of domain. Valid values: `Console`, `Ingress`.
    :param str service_id: The id of api gateway service.
    """
    pulumi.log.warn("""custom_domains is deprecated: volcengine.apig.CustomDomains has been deprecated in favor of volcengine.apig.getCustomDomains""")
    ...
