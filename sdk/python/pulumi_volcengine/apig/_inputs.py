# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApigGatewayBackendSpecArgs',
    'ApigGatewayLogSpecArgs',
    'ApigGatewayMonitorSpecArgs',
    'ApigGatewayNetworkSpecArgs',
    'ApigGatewayResourceSpecArgs',
    'ApigGatewayResourceSpecNetworkTypeArgs',
    'ApigGatewayServiceAuthSpecArgs',
    'ApigGatewayTagArgs',
    'ApigRouteAdvancedSettingArgs',
    'ApigRouteAdvancedSettingCorsPolicySettingArgs',
    'ApigRouteAdvancedSettingHeaderOperationArgs',
    'ApigRouteAdvancedSettingMirrorPolicyArgs',
    'ApigRouteAdvancedSettingMirrorPolicyPercentArgs',
    'ApigRouteAdvancedSettingMirrorPolicyUpstreamArgs',
    'ApigRouteAdvancedSettingRetryPolicySettingArgs',
    'ApigRouteAdvancedSettingTimeoutSettingArgs',
    'ApigRouteAdvancedSettingUrlRewriteSettingArgs',
    'ApigRouteCustomDomainArgs',
    'ApigRouteDomainArgs',
    'ApigRouteMatchRuleArgs',
    'ApigRouteMatchRuleHeaderArgs',
    'ApigRouteMatchRuleHeaderValueArgs',
    'ApigRouteMatchRulePathArgs',
    'ApigRouteMatchRuleQueryStringArgs',
    'ApigRouteMatchRuleQueryStringValueArgs',
    'ApigRouteUpstreamListArgs',
    'ApigRouteUpstreamListAiProviderSettingsArgs',
    'ApigUpstreamCircuitBreakingSettingsArgs',
    'ApigUpstreamLoadBalancerSettingsArgs',
    'ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs',
    'ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs',
    'ApigUpstreamSourceIngressSettingArgs',
    'ApigUpstreamSourceSourceSpecArgs',
    'ApigUpstreamSourceSourceSpecK8sSourceArgs',
    'ApigUpstreamSourceSourceSpecNacosSourceArgs',
    'ApigUpstreamSourceSourceSpecNacosSourceAuthConfigArgs',
    'ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs',
    'ApigUpstreamTlsSettingsArgs',
    'ApigUpstreamUpstreamSpecArgs',
    'ApigUpstreamUpstreamSpecAiProviderArgs',
    'ApigUpstreamUpstreamSpecAiProviderCustomModelServiceArgs',
    'ApigUpstreamUpstreamSpecDomainArgs',
    'ApigUpstreamUpstreamSpecDomainDomainListArgs',
    'ApigUpstreamUpstreamSpecEcsListArgs',
    'ApigUpstreamUpstreamSpecFixedIpListArgs',
    'ApigUpstreamUpstreamSpecK8sServiceArgs',
    'ApigUpstreamUpstreamSpecNacosServiceArgs',
    'ApigUpstreamUpstreamSpecVeFaasArgs',
    'ApigUpstreamUpstreamSpecVeMlpArgs',
    'ApigUpstreamUpstreamSpecVeMlpK8sServiceArgs',
    'ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoArgs',
    'ApigUpstreamVersionDetailArgs',
    'ApigUpstreamVersionDetailLabelArgs',
    'ApigUpstreamVersionUpstreamVersionArgs',
    'ApigUpstreamVersionUpstreamVersionLabelArgs',
    'GatewaysTagArgs',
    'GetGatewaysTagArgs',
]

@pulumi.input_type
class ApigGatewayBackendSpecArgs:
    def __init__(__self__, *,
                 is_vke_with_flannel_cni_supported: pulumi.Input[bool],
                 vke_pod_cidr: pulumi.Input[str]):
        """
        :param pulumi.Input[bool] is_vke_with_flannel_cni_supported: Whether the api gateway support vke flannel cni.
        :param pulumi.Input[str] vke_pod_cidr: The vke pod cidr of the api gateway.
        """
        pulumi.set(__self__, "is_vke_with_flannel_cni_supported", is_vke_with_flannel_cni_supported)
        pulumi.set(__self__, "vke_pod_cidr", vke_pod_cidr)

    @property
    @pulumi.getter(name="isVkeWithFlannelCniSupported")
    def is_vke_with_flannel_cni_supported(self) -> pulumi.Input[bool]:
        """
        Whether the api gateway support vke flannel cni.
        """
        return pulumi.get(self, "is_vke_with_flannel_cni_supported")

    @is_vke_with_flannel_cni_supported.setter
    def is_vke_with_flannel_cni_supported(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_vke_with_flannel_cni_supported", value)

    @property
    @pulumi.getter(name="vkePodCidr")
    def vke_pod_cidr(self) -> pulumi.Input[str]:
        """
        The vke pod cidr of the api gateway.
        """
        return pulumi.get(self, "vke_pod_cidr")

    @vke_pod_cidr.setter
    def vke_pod_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "vke_pod_cidr", value)


@pulumi.input_type
class ApigGatewayLogSpecArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[bool],
                 project_id: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable: Whether the api gateway enable tls log.
        :param pulumi.Input[str] project_id: The project id of the tls. This field is required when `enable` is true.
        :param pulumi.Input[str] topic_id: The topic id of the tls.
        """
        pulumi.set(__self__, "enable", enable)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[bool]:
        """
        Whether the api gateway enable tls log.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The project id of the tls. This field is required when `enable` is true.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The topic id of the tls.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class ApigGatewayMonitorSpecArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[bool],
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable: Whether the api gateway enable monitor.
        :param pulumi.Input[str] workspace_id: The workspace id of the monitor. This field is required when `enable` is true.
        """
        pulumi.set(__self__, "enable", enable)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[bool]:
        """
        Whether the api gateway enable monitor.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workspace id of the monitor. This field is required when `enable` is true.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class ApigGatewayNetworkSpecArgs:
    def __init__(__self__, *,
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 vpc_id: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The subnet ids of the network spec.
        :param pulumi.Input[str] vpc_id: The vpc id of the network spec.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The subnet ids of the network spec.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The vpc id of the network spec.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class ApigGatewayResourceSpecArgs:
    def __init__(__self__, *,
                 instance_spec_code: pulumi.Input[str],
                 replicas: pulumi.Input[int],
                 clb_spec_code: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input['ApigGatewayResourceSpecNetworkTypeArgs']] = None,
                 public_network_bandwidth: Optional[pulumi.Input[int]] = None,
                 public_network_billing_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_spec_code: The instance spec code of the resource spec. Valid values: `1c2g`, `2c4g`, `4c8g`, `8c16g`.
        :param pulumi.Input[int] replicas: The replicas of the resource spec.
        :param pulumi.Input[str] clb_spec_code: The clb spec code of the resource spec. Valid values: `small_1`, `small_2`, `medium_1`, `medium_2`, `large_1`, `large_2`.
        :param pulumi.Input['ApigGatewayResourceSpecNetworkTypeArgs'] network_type: The network type of the resource spec. The default values for both `enable_public_network` and `enable_private_network` are true.
        :param pulumi.Input[int] public_network_bandwidth: The public network bandwidth of the resource spec.
        :param pulumi.Input[str] public_network_billing_type: The public network billing type of the resource spec. Valid values: `traffic`, `bandwidth`.
        """
        pulumi.set(__self__, "instance_spec_code", instance_spec_code)
        pulumi.set(__self__, "replicas", replicas)
        if clb_spec_code is not None:
            pulumi.set(__self__, "clb_spec_code", clb_spec_code)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if public_network_bandwidth is not None:
            pulumi.set(__self__, "public_network_bandwidth", public_network_bandwidth)
        if public_network_billing_type is not None:
            pulumi.set(__self__, "public_network_billing_type", public_network_billing_type)

    @property
    @pulumi.getter(name="instanceSpecCode")
    def instance_spec_code(self) -> pulumi.Input[str]:
        """
        The instance spec code of the resource spec. Valid values: `1c2g`, `2c4g`, `4c8g`, `8c16g`.
        """
        return pulumi.get(self, "instance_spec_code")

    @instance_spec_code.setter
    def instance_spec_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_spec_code", value)

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Input[int]:
        """
        The replicas of the resource spec.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter(name="clbSpecCode")
    def clb_spec_code(self) -> Optional[pulumi.Input[str]]:
        """
        The clb spec code of the resource spec. Valid values: `small_1`, `small_2`, `medium_1`, `medium_2`, `large_1`, `large_2`.
        """
        return pulumi.get(self, "clb_spec_code")

    @clb_spec_code.setter
    def clb_spec_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clb_spec_code", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input['ApigGatewayResourceSpecNetworkTypeArgs']]:
        """
        The network type of the resource spec. The default values for both `enable_public_network` and `enable_private_network` are true.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input['ApigGatewayResourceSpecNetworkTypeArgs']]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="publicNetworkBandwidth")
    def public_network_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The public network bandwidth of the resource spec.
        """
        return pulumi.get(self, "public_network_bandwidth")

    @public_network_bandwidth.setter
    def public_network_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "public_network_bandwidth", value)

    @property
    @pulumi.getter(name="publicNetworkBillingType")
    def public_network_billing_type(self) -> Optional[pulumi.Input[str]]:
        """
        The public network billing type of the resource spec. Valid values: `traffic`, `bandwidth`.
        """
        return pulumi.get(self, "public_network_billing_type")

    @public_network_billing_type.setter
    def public_network_billing_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_network_billing_type", value)


@pulumi.input_type
class ApigGatewayResourceSpecNetworkTypeArgs:
    def __init__(__self__, *,
                 enable_private_network: pulumi.Input[bool],
                 enable_public_network: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enable_private_network: Whether the api gateway enable private network.
        :param pulumi.Input[bool] enable_public_network: Whether the api gateway enable public network.
        """
        pulumi.set(__self__, "enable_private_network", enable_private_network)
        pulumi.set(__self__, "enable_public_network", enable_public_network)

    @property
    @pulumi.getter(name="enablePrivateNetwork")
    def enable_private_network(self) -> pulumi.Input[bool]:
        """
        Whether the api gateway enable private network.
        """
        return pulumi.get(self, "enable_private_network")

    @enable_private_network.setter
    def enable_private_network(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_private_network", value)

    @property
    @pulumi.getter(name="enablePublicNetwork")
    def enable_public_network(self) -> pulumi.Input[bool]:
        """
        Whether the api gateway enable public network.
        """
        return pulumi.get(self, "enable_public_network")

    @enable_public_network.setter
    def enable_public_network(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_public_network", value)


@pulumi.input_type
class ApigGatewayServiceAuthSpecArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enable: Whether the api gateway service enable auth.
        """
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[bool]:
        """
        Whether the api gateway service enable auth.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class ApigGatewayTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The Key of Tags.
        :param pulumi.Input[str] value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApigRouteAdvancedSettingArgs:
    def __init__(__self__, *,
                 cors_policy_setting: Optional[pulumi.Input['ApigRouteAdvancedSettingCorsPolicySettingArgs']] = None,
                 header_operations: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteAdvancedSettingHeaderOperationArgs']]]] = None,
                 mirror_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyArgs']]]] = None,
                 retry_policy_setting: Optional[pulumi.Input['ApigRouteAdvancedSettingRetryPolicySettingArgs']] = None,
                 timeout_setting: Optional[pulumi.Input['ApigRouteAdvancedSettingTimeoutSettingArgs']] = None,
                 url_rewrite_setting: Optional[pulumi.Input['ApigRouteAdvancedSettingUrlRewriteSettingArgs']] = None):
        """
        :param pulumi.Input['ApigRouteAdvancedSettingCorsPolicySettingArgs'] cors_policy_setting: The cors policy setting of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input['ApigRouteAdvancedSettingHeaderOperationArgs']]] header_operations: The header operations of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyArgs']]] mirror_policies: The mirror policies of the api gateway route.
        :param pulumi.Input['ApigRouteAdvancedSettingRetryPolicySettingArgs'] retry_policy_setting: The retry policy setting of the api gateway route.
        :param pulumi.Input['ApigRouteAdvancedSettingTimeoutSettingArgs'] timeout_setting: The timeout setting of the api gateway route.
        :param pulumi.Input['ApigRouteAdvancedSettingUrlRewriteSettingArgs'] url_rewrite_setting: The url rewrite setting of the api gateway route.
        """
        if cors_policy_setting is not None:
            pulumi.set(__self__, "cors_policy_setting", cors_policy_setting)
        if header_operations is not None:
            pulumi.set(__self__, "header_operations", header_operations)
        if mirror_policies is not None:
            pulumi.set(__self__, "mirror_policies", mirror_policies)
        if retry_policy_setting is not None:
            pulumi.set(__self__, "retry_policy_setting", retry_policy_setting)
        if timeout_setting is not None:
            pulumi.set(__self__, "timeout_setting", timeout_setting)
        if url_rewrite_setting is not None:
            pulumi.set(__self__, "url_rewrite_setting", url_rewrite_setting)

    @property
    @pulumi.getter(name="corsPolicySetting")
    def cors_policy_setting(self) -> Optional[pulumi.Input['ApigRouteAdvancedSettingCorsPolicySettingArgs']]:
        """
        The cors policy setting of the api gateway route.
        """
        return pulumi.get(self, "cors_policy_setting")

    @cors_policy_setting.setter
    def cors_policy_setting(self, value: Optional[pulumi.Input['ApigRouteAdvancedSettingCorsPolicySettingArgs']]):
        pulumi.set(self, "cors_policy_setting", value)

    @property
    @pulumi.getter(name="headerOperations")
    def header_operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteAdvancedSettingHeaderOperationArgs']]]]:
        """
        The header operations of the api gateway route.
        """
        return pulumi.get(self, "header_operations")

    @header_operations.setter
    def header_operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteAdvancedSettingHeaderOperationArgs']]]]):
        pulumi.set(self, "header_operations", value)

    @property
    @pulumi.getter(name="mirrorPolicies")
    def mirror_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyArgs']]]]:
        """
        The mirror policies of the api gateway route.
        """
        return pulumi.get(self, "mirror_policies")

    @mirror_policies.setter
    def mirror_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyArgs']]]]):
        pulumi.set(self, "mirror_policies", value)

    @property
    @pulumi.getter(name="retryPolicySetting")
    def retry_policy_setting(self) -> Optional[pulumi.Input['ApigRouteAdvancedSettingRetryPolicySettingArgs']]:
        """
        The retry policy setting of the api gateway route.
        """
        return pulumi.get(self, "retry_policy_setting")

    @retry_policy_setting.setter
    def retry_policy_setting(self, value: Optional[pulumi.Input['ApigRouteAdvancedSettingRetryPolicySettingArgs']]):
        pulumi.set(self, "retry_policy_setting", value)

    @property
    @pulumi.getter(name="timeoutSetting")
    def timeout_setting(self) -> Optional[pulumi.Input['ApigRouteAdvancedSettingTimeoutSettingArgs']]:
        """
        The timeout setting of the api gateway route.
        """
        return pulumi.get(self, "timeout_setting")

    @timeout_setting.setter
    def timeout_setting(self, value: Optional[pulumi.Input['ApigRouteAdvancedSettingTimeoutSettingArgs']]):
        pulumi.set(self, "timeout_setting", value)

    @property
    @pulumi.getter(name="urlRewriteSetting")
    def url_rewrite_setting(self) -> Optional[pulumi.Input['ApigRouteAdvancedSettingUrlRewriteSettingArgs']]:
        """
        The url rewrite setting of the api gateway route.
        """
        return pulumi.get(self, "url_rewrite_setting")

    @url_rewrite_setting.setter
    def url_rewrite_setting(self, value: Optional[pulumi.Input['ApigRouteAdvancedSettingUrlRewriteSettingArgs']]):
        pulumi.set(self, "url_rewrite_setting", value)


@pulumi.input_type
class ApigRouteAdvancedSettingCorsPolicySettingArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable: Whether the cors policy setting is enabled.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the cors policy setting is enabled.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class ApigRouteAdvancedSettingHeaderOperationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 direction_type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key of the header.
        :param pulumi.Input[str] operation: The operation of the header. Valid values: `set`, `add`, `remove`.
        :param pulumi.Input[str] direction_type: The direction type of the header. Valid values: `request`, `response`.
        :param pulumi.Input[str] value: The value of the header.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operation", operation)
        if direction_type is not None:
            pulumi.set(__self__, "direction_type", direction_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the header.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        """
        The operation of the header. Valid values: `set`, `add`, `remove`.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="directionType")
    def direction_type(self) -> Optional[pulumi.Input[str]]:
        """
        The direction type of the header. Valid values: `request`, `response`.
        """
        return pulumi.get(self, "direction_type")

    @direction_type.setter
    def direction_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction_type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the header.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApigRouteAdvancedSettingMirrorPolicyArgs:
    def __init__(__self__, *,
                 upstream: pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyUpstreamArgs'],
                 percent: Optional[pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyPercentArgs']] = None):
        """
        :param pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyUpstreamArgs'] upstream: The upstream of the mirror policy.
        :param pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyPercentArgs'] percent: The percent of the mirror policy.
        """
        pulumi.set(__self__, "upstream", upstream)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def upstream(self) -> pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyUpstreamArgs']:
        """
        The upstream of the mirror policy.
        """
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyUpstreamArgs']):
        pulumi.set(self, "upstream", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyPercentArgs']]:
        """
        The percent of the mirror policy.
        """
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input['ApigRouteAdvancedSettingMirrorPolicyPercentArgs']]):
        pulumi.set(self, "percent", value)


@pulumi.input_type
class ApigRouteAdvancedSettingMirrorPolicyPercentArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[int] value: The percent value of the mirror policy.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        The percent value of the mirror policy.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApigRouteAdvancedSettingMirrorPolicyUpstreamArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 upstream_id: pulumi.Input[str],
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The type of the api gateway upstream.
        :param pulumi.Input[str] upstream_id: The id of the api gateway upstream.
        :param pulumi.Input[str] version: The version of the api gateway upstream.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "upstream_id", upstream_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the api gateway upstream.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> pulumi.Input[str]:
        """
        The id of the api gateway upstream.
        """
        return pulumi.get(self, "upstream_id")

    @upstream_id.setter
    def upstream_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "upstream_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the api gateway upstream.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ApigRouteAdvancedSettingRetryPolicySettingArgs:
    def __init__(__self__, *,
                 attempts: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 http_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 per_try_timeout: Optional[pulumi.Input[int]] = None,
                 retry_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] attempts: The attempts of the api gateway route.
        :param pulumi.Input[bool] enable: Whether the retry policy setting is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] http_codes: The http codes of the api gateway route.
        :param pulumi.Input[int] per_try_timeout: The per try timeout of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] retry_ons: The retry on of the api gateway route. Valid values: `5xx`, `reset`, `connect-failure`, `refused-stream`, `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
        """
        if attempts is not None:
            pulumi.set(__self__, "attempts", attempts)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if http_codes is not None:
            pulumi.set(__self__, "http_codes", http_codes)
        if per_try_timeout is not None:
            pulumi.set(__self__, "per_try_timeout", per_try_timeout)
        if retry_ons is not None:
            pulumi.set(__self__, "retry_ons", retry_ons)

    @property
    @pulumi.getter
    def attempts(self) -> Optional[pulumi.Input[int]]:
        """
        The attempts of the api gateway route.
        """
        return pulumi.get(self, "attempts")

    @attempts.setter
    def attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "attempts", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the retry policy setting is enabled.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="httpCodes")
    def http_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The http codes of the api gateway route.
        """
        return pulumi.get(self, "http_codes")

    @http_codes.setter
    def http_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "http_codes", value)

    @property
    @pulumi.getter(name="perTryTimeout")
    def per_try_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The per try timeout of the api gateway route.
        """
        return pulumi.get(self, "per_try_timeout")

    @per_try_timeout.setter
    def per_try_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "per_try_timeout", value)

    @property
    @pulumi.getter(name="retryOns")
    def retry_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The retry on of the api gateway route. Valid values: `5xx`, `reset`, `connect-failure`, `refused-stream`, `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
        """
        return pulumi.get(self, "retry_ons")

    @retry_ons.setter
    def retry_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "retry_ons", value)


@pulumi.input_type
class ApigRouteAdvancedSettingTimeoutSettingArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enable: Whether the timeout setting is enabled.
        :param pulumi.Input[int] timeout: The timeout of the api gateway route. Unit: s.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the timeout setting is enabled.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout of the api gateway route. Unit: s.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ApigRouteAdvancedSettingUrlRewriteSettingArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 url_rewrite: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable: Whether the url rewrite setting is enabled.
        :param pulumi.Input[str] url_rewrite: The url rewrite path of the api gateway route.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if url_rewrite is not None:
            pulumi.set(__self__, "url_rewrite", url_rewrite)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the url rewrite setting is enabled.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> Optional[pulumi.Input[str]]:
        """
        The url rewrite path of the api gateway route.
        """
        return pulumi.get(self, "url_rewrite")

    @url_rewrite.setter
    def url_rewrite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_rewrite", value)


@pulumi.input_type
class ApigRouteCustomDomainArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: The domain of the api gateway route.
        :param pulumi.Input[str] id: The id of the custom domain.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain of the api gateway route.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the custom domain.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApigRouteDomainArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: The domain of the api gateway route.
        :param pulumi.Input[str] type: The type of the domain.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain of the api gateway route.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the domain.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ApigRouteMatchRuleArgs:
    def __init__(__self__, *,
                 path: pulumi.Input['ApigRouteMatchRulePathArgs'],
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteMatchRuleHeaderArgs']]]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 query_strings: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteMatchRuleQueryStringArgs']]]] = None):
        """
        :param pulumi.Input['ApigRouteMatchRulePathArgs'] path: The path of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input['ApigRouteMatchRuleHeaderArgs']]] headers: The header of the api gateway route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: The method of the api gateway route. Valid values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `CONNECT`.
        :param pulumi.Input[Sequence[pulumi.Input['ApigRouteMatchRuleQueryStringArgs']]] query_strings: The query string of the api gateway route.
        """
        pulumi.set(__self__, "path", path)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if query_strings is not None:
            pulumi.set(__self__, "query_strings", query_strings)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input['ApigRouteMatchRulePathArgs']:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input['ApigRouteMatchRulePathArgs']):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteMatchRuleHeaderArgs']]]]:
        """
        The header of the api gateway route.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteMatchRuleHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The method of the api gateway route. Valid values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `CONNECT`.
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteMatchRuleQueryStringArgs']]]]:
        """
        The query string of the api gateway route.
        """
        return pulumi.get(self, "query_strings")

    @query_strings.setter
    def query_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigRouteMatchRuleQueryStringArgs']]]]):
        pulumi.set(self, "query_strings", value)


@pulumi.input_type
class ApigRouteMatchRuleHeaderArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input['ApigRouteMatchRuleHeaderValueArgs']):
        """
        :param pulumi.Input[str] key: The key of the header.
        :param pulumi.Input['ApigRouteMatchRuleHeaderValueArgs'] value: The path of the api gateway route.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the header.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['ApigRouteMatchRuleHeaderValueArgs']:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['ApigRouteMatchRuleHeaderValueArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApigRouteMatchRuleHeaderValueArgs:
    def __init__(__self__, *,
                 match_content: pulumi.Input[str],
                 match_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] match_content: The match content of the api gateway route.
        :param pulumi.Input[str] match_type: The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> pulumi.Input[str]:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @match_content.setter
    def match_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_content", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> pulumi.Input[str]:
        """
        The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_type", value)


@pulumi.input_type
class ApigRouteMatchRulePathArgs:
    def __init__(__self__, *,
                 match_content: pulumi.Input[str],
                 match_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] match_content: The match content of the api gateway route.
        :param pulumi.Input[str] match_type: The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> pulumi.Input[str]:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @match_content.setter
    def match_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_content", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> pulumi.Input[str]:
        """
        The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_type", value)


@pulumi.input_type
class ApigRouteMatchRuleQueryStringArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input['ApigRouteMatchRuleQueryStringValueArgs']):
        """
        :param pulumi.Input[str] key: The key of the query string.
        :param pulumi.Input['ApigRouteMatchRuleQueryStringValueArgs'] value: The path of the api gateway route.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the query string.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['ApigRouteMatchRuleQueryStringValueArgs']:
        """
        The path of the api gateway route.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['ApigRouteMatchRuleQueryStringValueArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApigRouteMatchRuleQueryStringValueArgs:
    def __init__(__self__, *,
                 match_content: pulumi.Input[str],
                 match_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] match_content: The match content of the api gateway route.
        :param pulumi.Input[str] match_type: The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> pulumi.Input[str]:
        """
        The match content of the api gateway route.
        """
        return pulumi.get(self, "match_content")

    @match_content.setter
    def match_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_content", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> pulumi.Input[str]:
        """
        The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_type", value)


@pulumi.input_type
class ApigRouteUpstreamListArgs:
    def __init__(__self__, *,
                 upstream_id: pulumi.Input[str],
                 weight: pulumi.Input[int],
                 ai_provider_settings: Optional[pulumi.Input['ApigRouteUpstreamListAiProviderSettingsArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] upstream_id: The id of the api gateway upstream.
        :param pulumi.Input[int] weight: The weight of the api gateway upstream. Valid values: 0~10000.
        :param pulumi.Input['ApigRouteUpstreamListAiProviderSettingsArgs'] ai_provider_settings: The ai provider settings of the api gateway route.
        :param pulumi.Input[str] version: The version of the api gateway upstream.
        """
        pulumi.set(__self__, "upstream_id", upstream_id)
        pulumi.set(__self__, "weight", weight)
        if ai_provider_settings is not None:
            pulumi.set(__self__, "ai_provider_settings", ai_provider_settings)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> pulumi.Input[str]:
        """
        The id of the api gateway upstream.
        """
        return pulumi.get(self, "upstream_id")

    @upstream_id.setter
    def upstream_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "upstream_id", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        The weight of the api gateway upstream. Valid values: 0~10000.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="aiProviderSettings")
    def ai_provider_settings(self) -> Optional[pulumi.Input['ApigRouteUpstreamListAiProviderSettingsArgs']]:
        """
        The ai provider settings of the api gateway route.
        """
        return pulumi.get(self, "ai_provider_settings")

    @ai_provider_settings.setter
    def ai_provider_settings(self, value: Optional[pulumi.Input['ApigRouteUpstreamListAiProviderSettingsArgs']]):
        pulumi.set(self, "ai_provider_settings", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the api gateway upstream.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ApigRouteUpstreamListAiProviderSettingsArgs:
    def __init__(__self__, *,
                 model: pulumi.Input[str],
                 target_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] model: The model of the ai provider.
        :param pulumi.Input[str] target_path: The target path of the ai provider.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "target_path", target_path)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input[str]:
        """
        The model of the ai provider.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input[str]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="targetPath")
    def target_path(self) -> pulumi.Input[str]:
        """
        The target path of the ai provider.
        """
        return pulumi.get(self, "target_path")

    @target_path.setter
    def target_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_path", value)


@pulumi.input_type
class ApigUpstreamCircuitBreakingSettingsArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[bool],
                 base_ejection_time: Optional[pulumi.Input[int]] = None,
                 consecutive_errors: Optional[pulumi.Input[int]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 max_ejection_percent: Optional[pulumi.Input[int]] = None,
                 min_health_percent: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enable: Whether the circuit breaking is enabled.
        :param pulumi.Input[int] base_ejection_time: The base ejection time of circuit breaking. Unit: ms. Default is 10s.
        :param pulumi.Input[int] consecutive_errors: The consecutive errors of circuit breaking. Default is 5.
        :param pulumi.Input[int] interval: The interval of circuit breaking. Unit: ms. Default is 10s.
        :param pulumi.Input[int] max_ejection_percent: The max ejection percent of circuit breaking. Default is 20%.
        :param pulumi.Input[int] min_health_percent: The min health percent of circuit breaking. Default is 60%.
        """
        pulumi.set(__self__, "enable", enable)
        if base_ejection_time is not None:
            pulumi.set(__self__, "base_ejection_time", base_ejection_time)
        if consecutive_errors is not None:
            pulumi.set(__self__, "consecutive_errors", consecutive_errors)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if max_ejection_percent is not None:
            pulumi.set(__self__, "max_ejection_percent", max_ejection_percent)
        if min_health_percent is not None:
            pulumi.set(__self__, "min_health_percent", min_health_percent)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[bool]:
        """
        Whether the circuit breaking is enabled.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="baseEjectionTime")
    def base_ejection_time(self) -> Optional[pulumi.Input[int]]:
        """
        The base ejection time of circuit breaking. Unit: ms. Default is 10s.
        """
        return pulumi.get(self, "base_ejection_time")

    @base_ejection_time.setter
    def base_ejection_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_ejection_time", value)

    @property
    @pulumi.getter(name="consecutiveErrors")
    def consecutive_errors(self) -> Optional[pulumi.Input[int]]:
        """
        The consecutive errors of circuit breaking. Default is 5.
        """
        return pulumi.get(self, "consecutive_errors")

    @consecutive_errors.setter
    def consecutive_errors(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "consecutive_errors", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        The interval of circuit breaking. Unit: ms. Default is 10s.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="maxEjectionPercent")
    def max_ejection_percent(self) -> Optional[pulumi.Input[int]]:
        """
        The max ejection percent of circuit breaking. Default is 20%.
        """
        return pulumi.get(self, "max_ejection_percent")

    @max_ejection_percent.setter
    def max_ejection_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ejection_percent", value)

    @property
    @pulumi.getter(name="minHealthPercent")
    def min_health_percent(self) -> Optional[pulumi.Input[int]]:
        """
        The min health percent of circuit breaking. Default is 60%.
        """
        return pulumi.get(self, "min_health_percent")

    @min_health_percent.setter
    def min_health_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_health_percent", value)


@pulumi.input_type
class ApigUpstreamLoadBalancerSettingsArgs:
    def __init__(__self__, *,
                 lb_policy: pulumi.Input[str],
                 consistent_hash_lb: Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs']] = None,
                 simple_lb: Optional[pulumi.Input[str]] = None,
                 warmup_duration: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] lb_policy: The load balancer policy of apig upstream. Valid values: `SimpleLB`, `ConsistentHashLB`.
        :param pulumi.Input['ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs'] consistent_hash_lb: The consistent hash lb of apig upstream.
        :param pulumi.Input[str] simple_lb: The simple load balancer of apig upstream. Valid values: `ROUND_ROBIN`, `LEAST_CONN`, `RANDOM`.
        :param pulumi.Input[int] warmup_duration: The warmup duration of apig upstream lb. This field is valid when the simple_lb is `ROUND_ROBIN` or `LEAST_CONN`.
        """
        pulumi.set(__self__, "lb_policy", lb_policy)
        if consistent_hash_lb is not None:
            pulumi.set(__self__, "consistent_hash_lb", consistent_hash_lb)
        if simple_lb is not None:
            pulumi.set(__self__, "simple_lb", simple_lb)
        if warmup_duration is not None:
            pulumi.set(__self__, "warmup_duration", warmup_duration)

    @property
    @pulumi.getter(name="lbPolicy")
    def lb_policy(self) -> pulumi.Input[str]:
        """
        The load balancer policy of apig upstream. Valid values: `SimpleLB`, `ConsistentHashLB`.
        """
        return pulumi.get(self, "lb_policy")

    @lb_policy.setter
    def lb_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "lb_policy", value)

    @property
    @pulumi.getter(name="consistentHashLb")
    def consistent_hash_lb(self) -> Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs']]:
        """
        The consistent hash lb of apig upstream.
        """
        return pulumi.get(self, "consistent_hash_lb")

    @consistent_hash_lb.setter
    def consistent_hash_lb(self, value: Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs']]):
        pulumi.set(self, "consistent_hash_lb", value)

    @property
    @pulumi.getter(name="simpleLb")
    def simple_lb(self) -> Optional[pulumi.Input[str]]:
        """
        The simple load balancer of apig upstream. Valid values: `ROUND_ROBIN`, `LEAST_CONN`, `RANDOM`.
        """
        return pulumi.get(self, "simple_lb")

    @simple_lb.setter
    def simple_lb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simple_lb", value)

    @property
    @pulumi.getter(name="warmupDuration")
    def warmup_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The warmup duration of apig upstream lb. This field is valid when the simple_lb is `ROUND_ROBIN` or `LEAST_CONN`.
        """
        return pulumi.get(self, "warmup_duration")

    @warmup_duration.setter
    def warmup_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "warmup_duration", value)


@pulumi.input_type
class ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs:
    def __init__(__self__, *,
                 hash_key: pulumi.Input[str],
                 http_cookie: Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs']] = None,
                 http_header_name: Optional[pulumi.Input[str]] = None,
                 http_query_parameter_name: Optional[pulumi.Input[str]] = None,
                 use_source_ip: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] hash_key: The hash key of apig upstream consistent hash lb. Valid values: `HTTPCookie`, `HttpHeaderName`, `HttpQueryParameterName`, `UseSourceIp`.
        :param pulumi.Input['ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs'] http_cookie: The http cookie of apig upstream consistent hash lb.
        :param pulumi.Input[str] http_header_name: The http header name of apig upstream consistent hash lb.
        :param pulumi.Input[str] http_query_parameter_name: The http query parameter name of apig upstream consistent hash lb.
        :param pulumi.Input[bool] use_source_ip: The use source ip of apig upstream consistent hash lb.
        """
        pulumi.set(__self__, "hash_key", hash_key)
        if http_cookie is not None:
            pulumi.set(__self__, "http_cookie", http_cookie)
        if http_header_name is not None:
            pulumi.set(__self__, "http_header_name", http_header_name)
        if http_query_parameter_name is not None:
            pulumi.set(__self__, "http_query_parameter_name", http_query_parameter_name)
        if use_source_ip is not None:
            pulumi.set(__self__, "use_source_ip", use_source_ip)

    @property
    @pulumi.getter(name="hashKey")
    def hash_key(self) -> pulumi.Input[str]:
        """
        The hash key of apig upstream consistent hash lb. Valid values: `HTTPCookie`, `HttpHeaderName`, `HttpQueryParameterName`, `UseSourceIp`.
        """
        return pulumi.get(self, "hash_key")

    @hash_key.setter
    def hash_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "hash_key", value)

    @property
    @pulumi.getter(name="httpCookie")
    def http_cookie(self) -> Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs']]:
        """
        The http cookie of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_cookie")

    @http_cookie.setter
    def http_cookie(self, value: Optional[pulumi.Input['ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs']]):
        pulumi.set(self, "http_cookie", value)

    @property
    @pulumi.getter(name="httpHeaderName")
    def http_header_name(self) -> Optional[pulumi.Input[str]]:
        """
        The http header name of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_header_name")

    @http_header_name.setter
    def http_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_header_name", value)

    @property
    @pulumi.getter(name="httpQueryParameterName")
    def http_query_parameter_name(self) -> Optional[pulumi.Input[str]]:
        """
        The http query parameter name of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "http_query_parameter_name")

    @http_query_parameter_name.setter
    def http_query_parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_query_parameter_name", value)

    @property
    @pulumi.getter(name="useSourceIp")
    def use_source_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        The use source ip of apig upstream consistent hash lb.
        """
        return pulumi.get(self, "use_source_ip")

    @use_source_ip.setter
    def use_source_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_source_ip", value)


@pulumi.input_type
class ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 ttl: pulumi.Input[int]):
        """
        :param pulumi.Input[str] name: The name of apig upstream consistent hash lb http cookie.
        :param pulumi.Input[str] path: The path of apig upstream consistent hash lb http cookie.
        :param pulumi.Input[int] ttl: The ttl of apig upstream consistent hash lb http cookie.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of apig upstream consistent hash lb http cookie.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path of apig upstream consistent hash lb http cookie.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Input[int]:
        """
        The ttl of apig upstream consistent hash lb http cookie.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: pulumi.Input[int]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class ApigUpstreamSourceIngressSettingArgs:
    def __init__(__self__, *,
                 enable_all_ingress_classes: Optional[pulumi.Input[bool]] = None,
                 enable_all_namespaces: Optional[pulumi.Input[bool]] = None,
                 enable_ingress: Optional[pulumi.Input[bool]] = None,
                 enable_ingress_without_ingress_class: Optional[pulumi.Input[bool]] = None,
                 ingress_classes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_status: Optional[pulumi.Input[bool]] = None,
                 watch_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enable_all_ingress_classes: Whether to enable all ingress classes.
        :param pulumi.Input[bool] enable_all_namespaces: Whether to enable all namespaces.
        :param pulumi.Input[bool] enable_ingress: Whether to enable ingress.
        :param pulumi.Input[bool] enable_ingress_without_ingress_class: Whether to enable ingress without ingress class.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ingress_classes: The ingress classes of ingress settings.
        :param pulumi.Input[bool] update_status: The update status of ingress settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] watch_namespaces: The watch namespaces of ingress settings.
        """
        if enable_all_ingress_classes is not None:
            pulumi.set(__self__, "enable_all_ingress_classes", enable_all_ingress_classes)
        if enable_all_namespaces is not None:
            pulumi.set(__self__, "enable_all_namespaces", enable_all_namespaces)
        if enable_ingress is not None:
            pulumi.set(__self__, "enable_ingress", enable_ingress)
        if enable_ingress_without_ingress_class is not None:
            pulumi.set(__self__, "enable_ingress_without_ingress_class", enable_ingress_without_ingress_class)
        if ingress_classes is not None:
            pulumi.set(__self__, "ingress_classes", ingress_classes)
        if update_status is not None:
            pulumi.set(__self__, "update_status", update_status)
        if watch_namespaces is not None:
            pulumi.set(__self__, "watch_namespaces", watch_namespaces)

    @property
    @pulumi.getter(name="enableAllIngressClasses")
    def enable_all_ingress_classes(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable all ingress classes.
        """
        return pulumi.get(self, "enable_all_ingress_classes")

    @enable_all_ingress_classes.setter
    def enable_all_ingress_classes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_all_ingress_classes", value)

    @property
    @pulumi.getter(name="enableAllNamespaces")
    def enable_all_namespaces(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable all namespaces.
        """
        return pulumi.get(self, "enable_all_namespaces")

    @enable_all_namespaces.setter
    def enable_all_namespaces(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_all_namespaces", value)

    @property
    @pulumi.getter(name="enableIngress")
    def enable_ingress(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable ingress.
        """
        return pulumi.get(self, "enable_ingress")

    @enable_ingress.setter
    def enable_ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ingress", value)

    @property
    @pulumi.getter(name="enableIngressWithoutIngressClass")
    def enable_ingress_without_ingress_class(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable ingress without ingress class.
        """
        return pulumi.get(self, "enable_ingress_without_ingress_class")

    @enable_ingress_without_ingress_class.setter
    def enable_ingress_without_ingress_class(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ingress_without_ingress_class", value)

    @property
    @pulumi.getter(name="ingressClasses")
    def ingress_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ingress classes of ingress settings.
        """
        return pulumi.get(self, "ingress_classes")

    @ingress_classes.setter
    def ingress_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ingress_classes", value)

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> Optional[pulumi.Input[bool]]:
        """
        The update status of ingress settings.
        """
        return pulumi.get(self, "update_status")

    @update_status.setter
    def update_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_status", value)

    @property
    @pulumi.getter(name="watchNamespaces")
    def watch_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The watch namespaces of ingress settings.
        """
        return pulumi.get(self, "watch_namespaces")

    @watch_namespaces.setter
    def watch_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "watch_namespaces", value)


@pulumi.input_type
class ApigUpstreamSourceSourceSpecArgs:
    def __init__(__self__, *,
                 k8s_source: Optional[pulumi.Input['ApigUpstreamSourceSourceSpecK8sSourceArgs']] = None,
                 nacos_source: Optional[pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceArgs']] = None):
        """
        :param pulumi.Input['ApigUpstreamSourceSourceSpecK8sSourceArgs'] k8s_source: The k8s source of apig upstream source.
        :param pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceArgs'] nacos_source: The nacos source of apig upstream source.
        """
        if k8s_source is not None:
            pulumi.set(__self__, "k8s_source", k8s_source)
        if nacos_source is not None:
            pulumi.set(__self__, "nacos_source", nacos_source)

    @property
    @pulumi.getter(name="k8sSource")
    def k8s_source(self) -> Optional[pulumi.Input['ApigUpstreamSourceSourceSpecK8sSourceArgs']]:
        """
        The k8s source of apig upstream source.
        """
        return pulumi.get(self, "k8s_source")

    @k8s_source.setter
    def k8s_source(self, value: Optional[pulumi.Input['ApigUpstreamSourceSourceSpecK8sSourceArgs']]):
        pulumi.set(self, "k8s_source", value)

    @property
    @pulumi.getter(name="nacosSource")
    def nacos_source(self) -> Optional[pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceArgs']]:
        """
        The nacos source of apig upstream source.
        """
        return pulumi.get(self, "nacos_source")

    @nacos_source.setter
    def nacos_source(self, value: Optional[pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceArgs']]):
        pulumi.set(self, "nacos_source", value)


@pulumi.input_type
class ApigUpstreamSourceSourceSpecK8sSourceArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 cluster_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_id: The cluster id of k8s source.
        :param pulumi.Input[str] cluster_type: The cluster type of k8s source.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The cluster id of k8s source.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster type of k8s source.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)


@pulumi.input_type
class ApigUpstreamSourceSourceSpecNacosSourceArgs:
    def __init__(__self__, *,
                 nacos_id: pulumi.Input[str],
                 address: Optional[pulumi.Input[str]] = None,
                 auth_config: Optional[pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceAuthConfigArgs']] = None,
                 context_path: Optional[pulumi.Input[str]] = None,
                 grpc_port: Optional[pulumi.Input[int]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 nacos_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] nacos_id: The nacos id of nacos source.
        :param pulumi.Input[str] address: The address of nacos source.
        :param pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceAuthConfigArgs'] auth_config: The auth config of nacos source.
        :param pulumi.Input[str] context_path: The context path of nacos source.
        :param pulumi.Input[int] grpc_port: The grpc port of nacos source.
        :param pulumi.Input[int] http_port: The http port of nacos source.
        :param pulumi.Input[str] nacos_name: The nacos name of nacos source.
        """
        pulumi.set(__self__, "nacos_id", nacos_id)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if auth_config is not None:
            pulumi.set(__self__, "auth_config", auth_config)
        if context_path is not None:
            pulumi.set(__self__, "context_path", context_path)
        if grpc_port is not None:
            pulumi.set(__self__, "grpc_port", grpc_port)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if nacos_name is not None:
            pulumi.set(__self__, "nacos_name", nacos_name)

    @property
    @pulumi.getter(name="nacosId")
    def nacos_id(self) -> pulumi.Input[str]:
        """
        The nacos id of nacos source.
        """
        return pulumi.get(self, "nacos_id")

    @nacos_id.setter
    def nacos_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nacos_id", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        The address of nacos source.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> Optional[pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceAuthConfigArgs']]:
        """
        The auth config of nacos source.
        """
        return pulumi.get(self, "auth_config")

    @auth_config.setter
    def auth_config(self, value: Optional[pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceAuthConfigArgs']]):
        pulumi.set(self, "auth_config", value)

    @property
    @pulumi.getter(name="contextPath")
    def context_path(self) -> Optional[pulumi.Input[str]]:
        """
        The context path of nacos source.
        """
        return pulumi.get(self, "context_path")

    @context_path.setter
    def context_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_path", value)

    @property
    @pulumi.getter(name="grpcPort")
    def grpc_port(self) -> Optional[pulumi.Input[int]]:
        """
        The grpc port of nacos source.
        """
        return pulumi.get(self, "grpc_port")

    @grpc_port.setter
    def grpc_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "grpc_port", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        The http port of nacos source.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="nacosName")
    def nacos_name(self) -> Optional[pulumi.Input[str]]:
        """
        The nacos name of nacos source.
        """
        return pulumi.get(self, "nacos_name")

    @nacos_name.setter
    def nacos_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nacos_name", value)


@pulumi.input_type
class ApigUpstreamSourceSourceSpecNacosSourceAuthConfigArgs:
    def __init__(__self__, *,
                 basic: Optional[pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs']] = None):
        """
        :param pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs'] basic: The basic auth config of nacos source.
        """
        if basic is not None:
            pulumi.set(__self__, "basic", basic)

    @property
    @pulumi.getter
    def basic(self) -> Optional[pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs']]:
        """
        The basic auth config of nacos source.
        """
        return pulumi.get(self, "basic")

    @basic.setter
    def basic(self, value: Optional[pulumi.Input['ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs']]):
        pulumi.set(self, "basic", value)


@pulumi.input_type
class ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password of basic auth config of nacos source.
        :param pulumi.Input[str] username: The username of basic auth config of nacos source.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password of basic auth config of nacos source.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username of basic auth config of nacos source.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ApigUpstreamTlsSettingsArgs:
    def __init__(__self__, *,
                 tls_mode: pulumi.Input[str],
                 sni: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tls_mode: The tls mode of apig upstream tls setting. Valid values: `DISABLE`, `SIMPLE`.
        :param pulumi.Input[str] sni: The sni of apig upstream tls setting.
        """
        pulumi.set(__self__, "tls_mode", tls_mode)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> pulumi.Input[str]:
        """
        The tls mode of apig upstream tls setting. Valid values: `DISABLE`, `SIMPLE`.
        """
        return pulumi.get(self, "tls_mode")

    @tls_mode.setter
    def tls_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "tls_mode", value)

    @property
    @pulumi.getter
    def sni(self) -> Optional[pulumi.Input[str]]:
        """
        The sni of apig upstream tls setting.
        """
        return pulumi.get(self, "sni")

    @sni.setter
    def sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecArgs:
    def __init__(__self__, *,
                 ai_provider: Optional[pulumi.Input['ApigUpstreamUpstreamSpecAiProviderArgs']] = None,
                 domain: Optional[pulumi.Input['ApigUpstreamUpstreamSpecDomainArgs']] = None,
                 ecs_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamUpstreamSpecEcsListArgs']]]] = None,
                 fixed_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamUpstreamSpecFixedIpListArgs']]]] = None,
                 k8s_service: Optional[pulumi.Input['ApigUpstreamUpstreamSpecK8sServiceArgs']] = None,
                 nacos_service: Optional[pulumi.Input['ApigUpstreamUpstreamSpecNacosServiceArgs']] = None,
                 ve_faas: Optional[pulumi.Input['ApigUpstreamUpstreamSpecVeFaasArgs']] = None,
                 ve_mlp: Optional[pulumi.Input['ApigUpstreamUpstreamSpecVeMlpArgs']] = None):
        """
        :param pulumi.Input['ApigUpstreamUpstreamSpecAiProviderArgs'] ai_provider: The ai provider of apig upstream.
        :param pulumi.Input['ApigUpstreamUpstreamSpecDomainArgs'] domain: The domain of apig upstream.
        :param pulumi.Input[Sequence[pulumi.Input['ApigUpstreamUpstreamSpecEcsListArgs']]] ecs_lists: The ecs list of apig upstream.
        :param pulumi.Input[Sequence[pulumi.Input['ApigUpstreamUpstreamSpecFixedIpListArgs']]] fixed_ip_lists: The fixed ip list of apig upstream.
        :param pulumi.Input['ApigUpstreamUpstreamSpecK8sServiceArgs'] k8s_service: The k8s service of apig upstream.
        :param pulumi.Input['ApigUpstreamUpstreamSpecNacosServiceArgs'] nacos_service: The nacos service of apig upstream.
        :param pulumi.Input['ApigUpstreamUpstreamSpecVeFaasArgs'] ve_faas: The vefaas of apig upstream.
        :param pulumi.Input['ApigUpstreamUpstreamSpecVeMlpArgs'] ve_mlp: The mlp of apig upstream.
        """
        if ai_provider is not None:
            pulumi.set(__self__, "ai_provider", ai_provider)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if ecs_lists is not None:
            pulumi.set(__self__, "ecs_lists", ecs_lists)
        if fixed_ip_lists is not None:
            pulumi.set(__self__, "fixed_ip_lists", fixed_ip_lists)
        if k8s_service is not None:
            pulumi.set(__self__, "k8s_service", k8s_service)
        if nacos_service is not None:
            pulumi.set(__self__, "nacos_service", nacos_service)
        if ve_faas is not None:
            pulumi.set(__self__, "ve_faas", ve_faas)
        if ve_mlp is not None:
            pulumi.set(__self__, "ve_mlp", ve_mlp)

    @property
    @pulumi.getter(name="aiProvider")
    def ai_provider(self) -> Optional[pulumi.Input['ApigUpstreamUpstreamSpecAiProviderArgs']]:
        """
        The ai provider of apig upstream.
        """
        return pulumi.get(self, "ai_provider")

    @ai_provider.setter
    def ai_provider(self, value: Optional[pulumi.Input['ApigUpstreamUpstreamSpecAiProviderArgs']]):
        pulumi.set(self, "ai_provider", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input['ApigUpstreamUpstreamSpecDomainArgs']]:
        """
        The domain of apig upstream.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input['ApigUpstreamUpstreamSpecDomainArgs']]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="ecsLists")
    def ecs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamUpstreamSpecEcsListArgs']]]]:
        """
        The ecs list of apig upstream.
        """
        return pulumi.get(self, "ecs_lists")

    @ecs_lists.setter
    def ecs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamUpstreamSpecEcsListArgs']]]]):
        pulumi.set(self, "ecs_lists", value)

    @property
    @pulumi.getter(name="fixedIpLists")
    def fixed_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamUpstreamSpecFixedIpListArgs']]]]:
        """
        The fixed ip list of apig upstream.
        """
        return pulumi.get(self, "fixed_ip_lists")

    @fixed_ip_lists.setter
    def fixed_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamUpstreamSpecFixedIpListArgs']]]]):
        pulumi.set(self, "fixed_ip_lists", value)

    @property
    @pulumi.getter(name="k8sService")
    def k8s_service(self) -> Optional[pulumi.Input['ApigUpstreamUpstreamSpecK8sServiceArgs']]:
        """
        The k8s service of apig upstream.
        """
        return pulumi.get(self, "k8s_service")

    @k8s_service.setter
    def k8s_service(self, value: Optional[pulumi.Input['ApigUpstreamUpstreamSpecK8sServiceArgs']]):
        pulumi.set(self, "k8s_service", value)

    @property
    @pulumi.getter(name="nacosService")
    def nacos_service(self) -> Optional[pulumi.Input['ApigUpstreamUpstreamSpecNacosServiceArgs']]:
        """
        The nacos service of apig upstream.
        """
        return pulumi.get(self, "nacos_service")

    @nacos_service.setter
    def nacos_service(self, value: Optional[pulumi.Input['ApigUpstreamUpstreamSpecNacosServiceArgs']]):
        pulumi.set(self, "nacos_service", value)

    @property
    @pulumi.getter(name="veFaas")
    def ve_faas(self) -> Optional[pulumi.Input['ApigUpstreamUpstreamSpecVeFaasArgs']]:
        """
        The vefaas of apig upstream.
        """
        return pulumi.get(self, "ve_faas")

    @ve_faas.setter
    def ve_faas(self, value: Optional[pulumi.Input['ApigUpstreamUpstreamSpecVeFaasArgs']]):
        pulumi.set(self, "ve_faas", value)

    @property
    @pulumi.getter(name="veMlp")
    def ve_mlp(self) -> Optional[pulumi.Input['ApigUpstreamUpstreamSpecVeMlpArgs']]:
        """
        The mlp of apig upstream.
        """
        return pulumi.get(self, "ve_mlp")

    @ve_mlp.setter
    def ve_mlp(self, value: Optional[pulumi.Input['ApigUpstreamUpstreamSpecVeMlpArgs']]):
        pulumi.set(self, "ve_mlp", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecAiProviderArgs:
    def __init__(__self__, *,
                 base_url: pulumi.Input[str],
                 name: pulumi.Input[str],
                 token: pulumi.Input[str],
                 custom_body_params: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 custom_header_params: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 custom_model_service: Optional[pulumi.Input['ApigUpstreamUpstreamSpecAiProviderCustomModelServiceArgs']] = None):
        """
        :param pulumi.Input[str] base_url: The base url of ai provider.
        :param pulumi.Input[str] name: The name of ai provider.
        :param pulumi.Input[str] token: The token of ai provider.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] custom_body_params: The custom body params of ai provider.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] custom_header_params: The custom header params of ai provider.
        :param pulumi.Input['ApigUpstreamUpstreamSpecAiProviderCustomModelServiceArgs'] custom_model_service: The custom model service of ai provider.
        """
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "token", token)
        if custom_body_params is not None:
            pulumi.set(__self__, "custom_body_params", custom_body_params)
        if custom_header_params is not None:
            pulumi.set(__self__, "custom_header_params", custom_header_params)
        if custom_model_service is not None:
            pulumi.set(__self__, "custom_model_service", custom_model_service)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> pulumi.Input[str]:
        """
        The base url of ai provider.
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of ai provider.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        The token of ai provider.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="customBodyParams")
    def custom_body_params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The custom body params of ai provider.
        """
        return pulumi.get(self, "custom_body_params")

    @custom_body_params.setter
    def custom_body_params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_body_params", value)

    @property
    @pulumi.getter(name="customHeaderParams")
    def custom_header_params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The custom header params of ai provider.
        """
        return pulumi.get(self, "custom_header_params")

    @custom_header_params.setter
    def custom_header_params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_header_params", value)

    @property
    @pulumi.getter(name="customModelService")
    def custom_model_service(self) -> Optional[pulumi.Input['ApigUpstreamUpstreamSpecAiProviderCustomModelServiceArgs']]:
        """
        The custom model service of ai provider.
        """
        return pulumi.get(self, "custom_model_service")

    @custom_model_service.setter
    def custom_model_service(self, value: Optional[pulumi.Input['ApigUpstreamUpstreamSpecAiProviderCustomModelServiceArgs']]):
        pulumi.set(self, "custom_model_service", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecAiProviderCustomModelServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] name: The name of custom model service.
        :param pulumi.Input[str] namespace: The namespace of custom model service.
        :param pulumi.Input[int] port: The port of custom model service.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of custom model service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The namespace of custom model service.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port of custom model service.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecDomainArgs:
    def __init__(__self__, *,
                 domain_list: pulumi.Input['ApigUpstreamUpstreamSpecDomainDomainListArgs'],
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ApigUpstreamUpstreamSpecDomainDomainListArgs'] domain_list: The domain list of apig upstream.
        :param pulumi.Input[str] protocol: The protocol of apig upstream. Valid values: `HTTP`, `HTTPS`.
        """
        pulumi.set(__self__, "domain_list", domain_list)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="domainList")
    def domain_list(self) -> pulumi.Input['ApigUpstreamUpstreamSpecDomainDomainListArgs']:
        """
        The domain list of apig upstream.
        """
        return pulumi.get(self, "domain_list")

    @domain_list.setter
    def domain_list(self, value: pulumi.Input['ApigUpstreamUpstreamSpecDomainDomainListArgs']):
        pulumi.set(self, "domain_list", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol of apig upstream. Valid values: `HTTP`, `HTTPS`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecDomainDomainListArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] domain: The domain of apig upstream.
        :param pulumi.Input[int] port: The port of domain. Default is 80 for HTTP, 443 for HTTPS.
        """
        pulumi.set(__self__, "domain", domain)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        The domain of apig upstream.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port of domain. Default is 80 for HTTP, 443 for HTTPS.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecEcsListArgs:
    def __init__(__self__, *,
                 ecs_id: pulumi.Input[str],
                 ip: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] ecs_id: The instance id of ecs.
        :param pulumi.Input[str] ip: The ip of ecs.
        :param pulumi.Input[int] port: The port of ecs.
        """
        pulumi.set(__self__, "ecs_id", ecs_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="ecsId")
    def ecs_id(self) -> pulumi.Input[str]:
        """
        The instance id of ecs.
        """
        return pulumi.get(self, "ecs_id")

    @ecs_id.setter
    def ecs_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ecs_id", value)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        The ip of ecs.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port of ecs.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecFixedIpListArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] ip: The ip of apig upstream.
        :param pulumi.Input[int] port: The port of apig upstream.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        The ip of apig upstream.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port of apig upstream.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecK8sServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] name: The name of k8s service.
        :param pulumi.Input[str] namespace: The namespace of k8s service.
        :param pulumi.Input[int] port: The port of k8s service.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of k8s service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecNacosServiceArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 service: pulumi.Input[str],
                 upstream_source_id: pulumi.Input[str],
                 namespace_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group: The group of nacos service.
        :param pulumi.Input[str] namespace: The namespace of nacos service.
        :param pulumi.Input[str] service: The service of nacos service.
        :param pulumi.Input[str] upstream_source_id: The upstream source id.
        :param pulumi.Input[str] namespace_id: The namespace id of nacos service.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "upstream_source_id", upstream_source_id)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        The group of nacos service.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The namespace of nacos service.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        The service of nacos service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="upstreamSourceId")
    def upstream_source_id(self) -> pulumi.Input[str]:
        """
        The upstream source id.
        """
        return pulumi.get(self, "upstream_source_id")

    @upstream_source_id.setter
    def upstream_source_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "upstream_source_id", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace id of nacos service.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecVeFaasArgs:
    def __init__(__self__, *,
                 function_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] function_id: The function id of vefaas.
        """
        pulumi.set(__self__, "function_id", function_id)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Input[str]:
        """
        The function id of vefaas.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_id", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecVeMlpArgs:
    def __init__(__self__, *,
                 k8s_service: pulumi.Input['ApigUpstreamUpstreamSpecVeMlpK8sServiceArgs'],
                 service_discover_type: pulumi.Input[str],
                 service_id: pulumi.Input[str],
                 service_name: Optional[pulumi.Input[str]] = None,
                 service_url: Optional[pulumi.Input[str]] = None,
                 upstream_source_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ApigUpstreamUpstreamSpecVeMlpK8sServiceArgs'] k8s_service: The k8s service of mlp.
        :param pulumi.Input[str] service_discover_type: The service discover type of mlp.
        :param pulumi.Input[str] service_id: The service id of mlp.
        :param pulumi.Input[str] service_name: The service name of mlp.
        :param pulumi.Input[str] service_url: The service url of mlp.
        :param pulumi.Input[str] upstream_source_id: The upstream source id.
        """
        pulumi.set(__self__, "k8s_service", k8s_service)
        pulumi.set(__self__, "service_discover_type", service_discover_type)
        pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if service_url is not None:
            pulumi.set(__self__, "service_url", service_url)
        if upstream_source_id is not None:
            pulumi.set(__self__, "upstream_source_id", upstream_source_id)

    @property
    @pulumi.getter(name="k8sService")
    def k8s_service(self) -> pulumi.Input['ApigUpstreamUpstreamSpecVeMlpK8sServiceArgs']:
        """
        The k8s service of mlp.
        """
        return pulumi.get(self, "k8s_service")

    @k8s_service.setter
    def k8s_service(self, value: pulumi.Input['ApigUpstreamUpstreamSpecVeMlpK8sServiceArgs']):
        pulumi.set(self, "k8s_service", value)

    @property
    @pulumi.getter(name="serviceDiscoverType")
    def service_discover_type(self) -> pulumi.Input[str]:
        """
        The service discover type of mlp.
        """
        return pulumi.get(self, "service_discover_type")

    @service_discover_type.setter
    def service_discover_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_discover_type", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        The service id of mlp.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The service name of mlp.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="serviceUrl")
    def service_url(self) -> Optional[pulumi.Input[str]]:
        """
        The service url of mlp.
        """
        return pulumi.get(self, "service_url")

    @service_url.setter
    def service_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_url", value)

    @property
    @pulumi.getter(name="upstreamSourceId")
    def upstream_source_id(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream source id.
        """
        return pulumi.get(self, "upstream_source_id")

    @upstream_source_id.setter
    def upstream_source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_source_id", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecVeMlpK8sServiceArgs:
    def __init__(__self__, *,
                 cluster_info: pulumi.Input['ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoArgs'],
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input['ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoArgs'] cluster_info: The cluster info of k8s service.
        :param pulumi.Input[str] name: The name of k8s service.
        :param pulumi.Input[str] namespace: The namespace of k8s service.
        :param pulumi.Input[int] port: The port of k8s service.
        """
        pulumi.set(__self__, "cluster_info", cluster_info)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="clusterInfo")
    def cluster_info(self) -> pulumi.Input['ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoArgs']:
        """
        The cluster info of k8s service.
        """
        return pulumi.get(self, "cluster_info")

    @cluster_info.setter
    def cluster_info(self, value: pulumi.Input['ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoArgs']):
        pulumi.set(self, "cluster_info", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of k8s service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The namespace of k8s service.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port of k8s service.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfoArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[int],
                 cluster_name: pulumi.Input[str]):
        """
        :param pulumi.Input[int] account_id: The account id of k8s service.
        :param pulumi.Input[str] cluster_name: The cluster name of k8s service.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[int]:
        """
        The account id of k8s service.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The cluster name of k8s service.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)


@pulumi.input_type
class ApigUpstreamVersionDetailArgs:
    def __init__(__self__, *,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionDetailLabelArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionDetailLabelArgs']]] labels: The labels of apig upstream version.
        :param pulumi.Input[str] name: The name of the apig upstream.
        :param pulumi.Input[str] update_time: The update time of apig upstream version.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionDetailLabelArgs']]]]:
        """
        The labels of apig upstream version.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionDetailLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the apig upstream.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class ApigUpstreamVersionDetailLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key of apig upstream version label.
        :param pulumi.Input[str] value: The value of apig upstream version label.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of apig upstream version label.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of apig upstream version label.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApigUpstreamVersionUpstreamVersionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionUpstreamVersionLabelArgs']]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of apig upstream version.
        :param pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionUpstreamVersionLabelArgs']]] labels: The labels of apig upstream version.
        :param pulumi.Input[str] update_time: The update time of apig upstream version.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of apig upstream version.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionUpstreamVersionLabelArgs']]]]:
        """
        The labels of apig upstream version.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApigUpstreamVersionUpstreamVersionLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of apig upstream version.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class ApigUpstreamVersionUpstreamVersionLabelArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The key of apig upstream version label.
        :param pulumi.Input[str] value: The value of apig upstream version label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of apig upstream version label.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of apig upstream version label.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GatewaysTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGatewaysTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


