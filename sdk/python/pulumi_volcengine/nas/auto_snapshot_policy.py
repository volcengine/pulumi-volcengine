# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AutoSnapshotPolicyArgs', 'AutoSnapshotPolicy']

@pulumi.input_type
class AutoSnapshotPolicyArgs:
    def __init__(__self__, *,
                 auto_snapshot_policy_name: pulumi.Input[str],
                 repeat_weekdays: pulumi.Input[str],
                 time_points: pulumi.Input[str],
                 retention_days: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a AutoSnapshotPolicy resource.
        :param pulumi.Input[str] auto_snapshot_policy_name: The name of the auto snapshot policy.
        :param pulumi.Input[str] repeat_weekdays: The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
        :param pulumi.Input[str] time_points: The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
        :param pulumi.Input[int] retention_days: The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
        """
        pulumi.set(__self__, "auto_snapshot_policy_name", auto_snapshot_policy_name)
        pulumi.set(__self__, "repeat_weekdays", repeat_weekdays)
        pulumi.set(__self__, "time_points", time_points)
        if retention_days is not None:
            pulumi.set(__self__, "retention_days", retention_days)

    @property
    @pulumi.getter(name="autoSnapshotPolicyName")
    def auto_snapshot_policy_name(self) -> pulumi.Input[str]:
        """
        The name of the auto snapshot policy.
        """
        return pulumi.get(self, "auto_snapshot_policy_name")

    @auto_snapshot_policy_name.setter
    def auto_snapshot_policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "auto_snapshot_policy_name", value)

    @property
    @pulumi.getter(name="repeatWeekdays")
    def repeat_weekdays(self) -> pulumi.Input[str]:
        """
        The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
        """
        return pulumi.get(self, "repeat_weekdays")

    @repeat_weekdays.setter
    def repeat_weekdays(self, value: pulumi.Input[str]):
        pulumi.set(self, "repeat_weekdays", value)

    @property
    @pulumi.getter(name="timePoints")
    def time_points(self) -> pulumi.Input[str]:
        """
        The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
        """
        return pulumi.get(self, "time_points")

    @time_points.setter
    def time_points(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_points", value)

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[pulumi.Input[int]]:
        """
        The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
        """
        return pulumi.get(self, "retention_days")

    @retention_days.setter
    def retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_days", value)


@pulumi.input_type
class _AutoSnapshotPolicyState:
    def __init__(__self__, *,
                 auto_snapshot_policy_name: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 file_system_count: Optional[pulumi.Input[int]] = None,
                 repeat_weekdays: Optional[pulumi.Input[str]] = None,
                 retention_days: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 time_points: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AutoSnapshotPolicy resources.
        :param pulumi.Input[str] auto_snapshot_policy_name: The name of the auto snapshot policy.
        :param pulumi.Input[str] create_time: The create time of auto snapshot policy.
        :param pulumi.Input[int] file_system_count: The count of file system which auto snapshot policy bind.
        :param pulumi.Input[str] repeat_weekdays: The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
        :param pulumi.Input[int] retention_days: The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
        :param pulumi.Input[str] status: The status of auto snapshot policy.
        :param pulumi.Input[str] time_points: The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
        """
        if auto_snapshot_policy_name is not None:
            pulumi.set(__self__, "auto_snapshot_policy_name", auto_snapshot_policy_name)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if file_system_count is not None:
            pulumi.set(__self__, "file_system_count", file_system_count)
        if repeat_weekdays is not None:
            pulumi.set(__self__, "repeat_weekdays", repeat_weekdays)
        if retention_days is not None:
            pulumi.set(__self__, "retention_days", retention_days)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_points is not None:
            pulumi.set(__self__, "time_points", time_points)

    @property
    @pulumi.getter(name="autoSnapshotPolicyName")
    def auto_snapshot_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the auto snapshot policy.
        """
        return pulumi.get(self, "auto_snapshot_policy_name")

    @auto_snapshot_policy_name.setter
    def auto_snapshot_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_snapshot_policy_name", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of auto snapshot policy.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="fileSystemCount")
    def file_system_count(self) -> Optional[pulumi.Input[int]]:
        """
        The count of file system which auto snapshot policy bind.
        """
        return pulumi.get(self, "file_system_count")

    @file_system_count.setter
    def file_system_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_system_count", value)

    @property
    @pulumi.getter(name="repeatWeekdays")
    def repeat_weekdays(self) -> Optional[pulumi.Input[str]]:
        """
        The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
        """
        return pulumi.get(self, "repeat_weekdays")

    @repeat_weekdays.setter
    def repeat_weekdays(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_weekdays", value)

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[pulumi.Input[int]]:
        """
        The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
        """
        return pulumi.get(self, "retention_days")

    @retention_days.setter
    def retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_days", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of auto snapshot policy.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="timePoints")
    def time_points(self) -> Optional[pulumi.Input[str]]:
        """
        The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
        """
        return pulumi.get(self, "time_points")

    @time_points.setter
    def time_points(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_points", value)


class AutoSnapshotPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_snapshot_policy_name: Optional[pulumi.Input[str]] = None,
                 repeat_weekdays: Optional[pulumi.Input[str]] = None,
                 retention_days: Optional[pulumi.Input[int]] = None,
                 time_points: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage nas auto snapshot policy
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.nas.AutoSnapshotPolicy("foo",
            auto_snapshot_policy_name="acc-test-auto_snapshot_policy",
            repeat_weekdays="1,3,5,7",
            retention_days=20,
            time_points="0,7,17")
        ```

        ## Import

        NasAutoSnapshotPolicy can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:nas/autoSnapshotPolicy:AutoSnapshotPolicy default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_snapshot_policy_name: The name of the auto snapshot policy.
        :param pulumi.Input[str] repeat_weekdays: The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
        :param pulumi.Input[int] retention_days: The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
        :param pulumi.Input[str] time_points: The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutoSnapshotPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage nas auto snapshot policy
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.nas.AutoSnapshotPolicy("foo",
            auto_snapshot_policy_name="acc-test-auto_snapshot_policy",
            repeat_weekdays="1,3,5,7",
            retention_days=20,
            time_points="0,7,17")
        ```

        ## Import

        NasAutoSnapshotPolicy can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:nas/autoSnapshotPolicy:AutoSnapshotPolicy default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param AutoSnapshotPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutoSnapshotPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_snapshot_policy_name: Optional[pulumi.Input[str]] = None,
                 repeat_weekdays: Optional[pulumi.Input[str]] = None,
                 retention_days: Optional[pulumi.Input[int]] = None,
                 time_points: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutoSnapshotPolicyArgs.__new__(AutoSnapshotPolicyArgs)

            if auto_snapshot_policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'auto_snapshot_policy_name'")
            __props__.__dict__["auto_snapshot_policy_name"] = auto_snapshot_policy_name
            if repeat_weekdays is None and not opts.urn:
                raise TypeError("Missing required property 'repeat_weekdays'")
            __props__.__dict__["repeat_weekdays"] = repeat_weekdays
            __props__.__dict__["retention_days"] = retention_days
            if time_points is None and not opts.urn:
                raise TypeError("Missing required property 'time_points'")
            __props__.__dict__["time_points"] = time_points
            __props__.__dict__["create_time"] = None
            __props__.__dict__["file_system_count"] = None
            __props__.__dict__["status"] = None
        super(AutoSnapshotPolicy, __self__).__init__(
            'volcengine:nas/autoSnapshotPolicy:AutoSnapshotPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_snapshot_policy_name: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            file_system_count: Optional[pulumi.Input[int]] = None,
            repeat_weekdays: Optional[pulumi.Input[str]] = None,
            retention_days: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            time_points: Optional[pulumi.Input[str]] = None) -> 'AutoSnapshotPolicy':
        """
        Get an existing AutoSnapshotPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_snapshot_policy_name: The name of the auto snapshot policy.
        :param pulumi.Input[str] create_time: The create time of auto snapshot policy.
        :param pulumi.Input[int] file_system_count: The count of file system which auto snapshot policy bind.
        :param pulumi.Input[str] repeat_weekdays: The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
        :param pulumi.Input[int] retention_days: The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
        :param pulumi.Input[str] status: The status of auto snapshot policy.
        :param pulumi.Input[str] time_points: The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutoSnapshotPolicyState.__new__(_AutoSnapshotPolicyState)

        __props__.__dict__["auto_snapshot_policy_name"] = auto_snapshot_policy_name
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["file_system_count"] = file_system_count
        __props__.__dict__["repeat_weekdays"] = repeat_weekdays
        __props__.__dict__["retention_days"] = retention_days
        __props__.__dict__["status"] = status
        __props__.__dict__["time_points"] = time_points
        return AutoSnapshotPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoSnapshotPolicyName")
    def auto_snapshot_policy_name(self) -> pulumi.Output[str]:
        """
        The name of the auto snapshot policy.
        """
        return pulumi.get(self, "auto_snapshot_policy_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of auto snapshot policy.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="fileSystemCount")
    def file_system_count(self) -> pulumi.Output[int]:
        """
        The count of file system which auto snapshot policy bind.
        """
        return pulumi.get(self, "file_system_count")

    @property
    @pulumi.getter(name="repeatWeekdays")
    def repeat_weekdays(self) -> pulumi.Output[str]:
        """
        The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
        """
        return pulumi.get(self, "repeat_weekdays")

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> pulumi.Output[int]:
        """
        The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
        """
        return pulumi.get(self, "retention_days")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of auto snapshot policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timePoints")
    def time_points(self) -> pulumi.Output[str]:
        """
        The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
        """
        return pulumi.get(self, "time_points")

