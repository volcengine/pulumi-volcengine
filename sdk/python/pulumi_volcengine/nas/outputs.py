# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FileSystemTag',
    'FileSystemsFileSystemResult',
    'FileSystemsFileSystemCapacityResult',
    'FileSystemsFileSystemTagResult',
    'FileSystemsTagResult',
    'MountPointsMountPointResult',
    'MountPointsMountPointPermissionGroupResult',
    'MountPointsMountPointPermissionGroupMountPointResult',
    'PermissionGroupPermissionRule',
    'PermissionGroupsFilterResult',
    'PermissionGroupsPermissionGroupResult',
    'PermissionGroupsPermissionGroupMountPointResult',
    'PermissionGroupsPermissionGroupPermissionRuleResult',
    'RegionsRegionResult',
    'SnapshotsSnapshotResult',
    'ZonesZoneResult',
    'ZonesZoneSaleResult',
]

@pulumi.output_type
class FileSystemTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FileSystemsFileSystemResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence['outputs.FileSystemsFileSystemCapacityResult'],
                 charge_type: str,
                 create_time: str,
                 description: str,
                 file_system_id: str,
                 file_system_name: str,
                 file_system_type: str,
                 id: str,
                 project_name: str,
                 protocol_type: str,
                 region_id: str,
                 snapshot_count: int,
                 status: str,
                 storage_type: str,
                 tags: Sequence['outputs.FileSystemsFileSystemTagResult'],
                 update_time: str,
                 version: str,
                 zone_id: str,
                 zone_name: str):
        """
        :param Sequence['FileSystemsFileSystemCapacityArgs'] capacities: The capacity of the nas file system.
        :param str charge_type: The charge type of nas file system.
        :param str create_time: The create time of the nas file system.
        :param str description: The description of the nas file system.
        :param str file_system_id: The id of the nas file system.
        :param str file_system_name: The name of nas file system. This field supports fuzzy queries.
        :param str file_system_type: The type of the nas file system.
        :param str id: The id of the nas file system.
        :param str project_name: The project name of nas file system.
        :param str protocol_type: The protocol type of nas file system.
        :param str region_id: The region id of the nas file system.
        :param int snapshot_count: The snapshot count of the nas file system.
        :param str status: The status of nas file system.
        :param str storage_type: The storage type of nas file system.
        :param Sequence['FileSystemsFileSystemTagArgs'] tags: Tags.
        :param str update_time: The update time of the nas file system.
        :param str version: The version of the nas file system.
        :param str zone_id: The zone id of nas file system.
        :param str zone_name: The zone name of the nas file system.
        """
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "file_system_name", file_system_name)
        pulumi.set(__self__, "file_system_type", file_system_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "snapshot_count", snapshot_count)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter
    def capacities(self) -> Sequence['outputs.FileSystemsFileSystemCapacityResult']:
        """
        The capacity of the nas file system.
        """
        return pulumi.get(self, "capacities")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of nas file system.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the nas file system.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the nas file system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The id of the nas file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemName")
    def file_system_name(self) -> str:
        """
        The name of nas file system. This field supports fuzzy queries.
        """
        return pulumi.get(self, "file_system_name")

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> str:
        """
        The type of the nas file system.
        """
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the nas file system.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The project name of nas file system.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        The protocol type of nas file system.
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The region id of the nas file system.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> int:
        """
        The snapshot count of the nas file system.
        """
        return pulumi.get(self, "snapshot_count")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of nas file system.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The storage type of nas file system.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.FileSystemsFileSystemTagResult']:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of the nas file system.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the nas file system.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone id of nas file system.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        The zone name of the nas file system.
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class FileSystemsFileSystemCapacityResult(dict):
    def __init__(__self__, *,
                 total: int,
                 used: int):
        """
        :param int total: The total capacity of the nas file system. Unit: GiB.
        :param int used: The used capacity of the nas file system. Unit: MiB.
        """
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        The total capacity of the nas file system. Unit: GiB.
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def used(self) -> int:
        """
        The used capacity of the nas file system. Unit: MiB.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class FileSystemsFileSystemTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 type: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str type: The Type of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of Tags.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FileSystemsTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MountPointsMountPointResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 domain: str,
                 ip: str,
                 mount_point_id: str,
                 mount_point_name: str,
                 permission_groups: Sequence['outputs.MountPointsMountPointPermissionGroupResult'],
                 status: str,
                 subnet_id: str,
                 subnet_name: str,
                 update_time: str,
                 vpc_id: str,
                 vpc_name: str):
        """
        :param str create_time: The creation time of the permission group.
        :param str domain: The dns address.
        :param str ip: The address of the mount point.
        :param str mount_point_id: The id of the mount point.
        :param str mount_point_name: The name of the mount point.
        :param Sequence['MountPointsMountPointPermissionGroupArgs'] permission_groups: The struct of the permission group.
        :param str status: The status of the mount point.
        :param str subnet_id: The id of the subnet.
        :param str subnet_name: The name of the subnet.
        :param str update_time: The update time of the mount point.
        :param str vpc_id: The id of the vpc.
        :param str vpc_name: The name of the vpc.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "mount_point_id", mount_point_id)
        pulumi.set(__self__, "mount_point_name", mount_point_name)
        pulumi.set(__self__, "permission_groups", permission_groups)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time of the permission group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The dns address.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The address of the mount point.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="mountPointId")
    def mount_point_id(self) -> str:
        """
        The id of the mount point.
        """
        return pulumi.get(self, "mount_point_id")

    @property
    @pulumi.getter(name="mountPointName")
    def mount_point_name(self) -> str:
        """
        The name of the mount point.
        """
        return pulumi.get(self, "mount_point_name")

    @property
    @pulumi.getter(name="permissionGroups")
    def permission_groups(self) -> Sequence['outputs.MountPointsMountPointPermissionGroupResult']:
        """
        The struct of the permission group.
        """
        return pulumi.get(self, "permission_groups")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the mount point.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The id of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        """
        The name of the subnet.
        """
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of the mount point.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The id of the vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> str:
        """
        The name of the vpc.
        """
        return pulumi.get(self, "vpc_name")


@pulumi.output_type
class MountPointsMountPointPermissionGroupResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 file_system_count: int,
                 file_system_type: str,
                 mount_points: Sequence['outputs.MountPointsMountPointPermissionGroupMountPointResult'],
                 permission_group_id: str,
                 permission_group_name: str,
                 permission_rule_count: int):
        """
        :param str create_time: The creation time of the permission group.
        :param str description: The description of the permission group.
        :param int file_system_count: The number of the file system.
        :param str file_system_type: The file system type of the permission group.
        :param Sequence['MountPointsMountPointPermissionGroupMountPointArgs'] mount_points: The list of the mount point.
        :param str permission_group_id: The id of the permission group.
        :param str permission_group_name: The name of the permission group.
        :param int permission_rule_count: The number of the permission rule.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "file_system_count", file_system_count)
        pulumi.set(__self__, "file_system_type", file_system_type)
        pulumi.set(__self__, "mount_points", mount_points)
        pulumi.set(__self__, "permission_group_id", permission_group_id)
        pulumi.set(__self__, "permission_group_name", permission_group_name)
        pulumi.set(__self__, "permission_rule_count", permission_rule_count)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time of the permission group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the permission group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileSystemCount")
    def file_system_count(self) -> int:
        """
        The number of the file system.
        """
        return pulumi.get(self, "file_system_count")

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> str:
        """
        The file system type of the permission group.
        """
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter(name="mountPoints")
    def mount_points(self) -> Sequence['outputs.MountPointsMountPointPermissionGroupMountPointResult']:
        """
        The list of the mount point.
        """
        return pulumi.get(self, "mount_points")

    @property
    @pulumi.getter(name="permissionGroupId")
    def permission_group_id(self) -> str:
        """
        The id of the permission group.
        """
        return pulumi.get(self, "permission_group_id")

    @property
    @pulumi.getter(name="permissionGroupName")
    def permission_group_name(self) -> str:
        """
        The name of the permission group.
        """
        return pulumi.get(self, "permission_group_name")

    @property
    @pulumi.getter(name="permissionRuleCount")
    def permission_rule_count(self) -> int:
        """
        The number of the permission rule.
        """
        return pulumi.get(self, "permission_rule_count")


@pulumi.output_type
class MountPointsMountPointPermissionGroupMountPointResult(dict):
    def __init__(__self__, *,
                 file_system_id: str,
                 mount_point_id: str,
                 mount_point_name: str):
        """
        :param str file_system_id: The id of the file system.
        :param str mount_point_id: The id of the mount point.
        :param str mount_point_name: The name of the mount point.
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "mount_point_id", mount_point_id)
        pulumi.set(__self__, "mount_point_name", mount_point_name)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The id of the file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="mountPointId")
    def mount_point_id(self) -> str:
        """
        The id of the mount point.
        """
        return pulumi.get(self, "mount_point_id")

    @property
    @pulumi.getter(name="mountPointName")
    def mount_point_name(self) -> str:
        """
        The name of the mount point.
        """
        return pulumi.get(self, "mount_point_name")


@pulumi.output_type
class PermissionGroupPermissionRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrIp":
            suggest = "cidr_ip"
        elif key == "rwMode":
            suggest = "rw_mode"
        elif key == "useMode":
            suggest = "use_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PermissionGroupPermissionRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PermissionGroupPermissionRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PermissionGroupPermissionRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_ip: str,
                 rw_mode: str,
                 use_mode: str):
        """
        :param str cidr_ip: Client IP addresses that are allowed access.
        :param str rw_mode: Permission group read and write rules. The value description is as follows:
               `RW`: Allows reading and writing.
               `RO`: read-only mode.
        :param str use_mode: Permission group user permissions. The value description is as follows:
               `All_squash`: All access users are mapped to anonymous users or user groups.
               `No_all_squash`: The access user is first matched with the local user, and then mapped to an anonymous user or user group after the match fails.
               `Root_squash`: Map the Root user as an anonymous user or user group.
               `No_root_squash`: The Root user maintains the Root account authority.
        """
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "rw_mode", rw_mode)
        pulumi.set(__self__, "use_mode", use_mode)

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Client IP addresses that are allowed access.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="rwMode")
    def rw_mode(self) -> str:
        """
        Permission group read and write rules. The value description is as follows:
        `RW`: Allows reading and writing.
        `RO`: read-only mode.
        """
        return pulumi.get(self, "rw_mode")

    @property
    @pulumi.getter(name="useMode")
    def use_mode(self) -> str:
        """
        Permission group user permissions. The value description is as follows:
        `All_squash`: All access users are mapped to anonymous users or user groups.
        `No_all_squash`: The access user is first matched with the local user, and then mapped to an anonymous user or user group after the match fails.
        `Root_squash`: Map the Root user as an anonymous user or user group.
        `No_root_squash`: The Root user maintains the Root account authority.
        """
        return pulumi.get(self, "use_mode")


@pulumi.output_type
class PermissionGroupsFilterResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Filters permission groups for specified characteristics based on attributes. The parameters that support filtering are as follows: `PermissionGroupName`, `PermissionGroupId`.
        :param str value: The value of the filter item.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Filters permission groups for specified characteristics based on attributes. The parameters that support filtering are as follows: `PermissionGroupName`, `PermissionGroupId`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the filter item.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PermissionGroupsPermissionGroupResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 file_system_count: int,
                 file_system_type: str,
                 mount_points: Sequence['outputs.PermissionGroupsPermissionGroupMountPointResult'],
                 permission_group_id: str,
                 permission_group_name: str,
                 permission_rule_count: int,
                 permission_rules: Sequence['outputs.PermissionGroupsPermissionGroupPermissionRuleResult']):
        """
        :param str create_time: The creation time of the permission group.
        :param str description: The description of the permission group.
        :param int file_system_count: The number of the file system.
        :param str file_system_type: The file system type of the permission group.
        :param Sequence['PermissionGroupsPermissionGroupMountPointArgs'] mount_points: The list of the mount point.
        :param str permission_group_id: The id of the permission group.
        :param str permission_group_name: The name of the permission group.
        :param int permission_rule_count: The number of the permission rule.
        :param Sequence['PermissionGroupsPermissionGroupPermissionRuleArgs'] permission_rules: The list of permissions rules.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "file_system_count", file_system_count)
        pulumi.set(__self__, "file_system_type", file_system_type)
        pulumi.set(__self__, "mount_points", mount_points)
        pulumi.set(__self__, "permission_group_id", permission_group_id)
        pulumi.set(__self__, "permission_group_name", permission_group_name)
        pulumi.set(__self__, "permission_rule_count", permission_rule_count)
        pulumi.set(__self__, "permission_rules", permission_rules)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time of the permission group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the permission group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileSystemCount")
    def file_system_count(self) -> int:
        """
        The number of the file system.
        """
        return pulumi.get(self, "file_system_count")

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> str:
        """
        The file system type of the permission group.
        """
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter(name="mountPoints")
    def mount_points(self) -> Sequence['outputs.PermissionGroupsPermissionGroupMountPointResult']:
        """
        The list of the mount point.
        """
        return pulumi.get(self, "mount_points")

    @property
    @pulumi.getter(name="permissionGroupId")
    def permission_group_id(self) -> str:
        """
        The id of the permission group.
        """
        return pulumi.get(self, "permission_group_id")

    @property
    @pulumi.getter(name="permissionGroupName")
    def permission_group_name(self) -> str:
        """
        The name of the permission group.
        """
        return pulumi.get(self, "permission_group_name")

    @property
    @pulumi.getter(name="permissionRuleCount")
    def permission_rule_count(self) -> int:
        """
        The number of the permission rule.
        """
        return pulumi.get(self, "permission_rule_count")

    @property
    @pulumi.getter(name="permissionRules")
    def permission_rules(self) -> Sequence['outputs.PermissionGroupsPermissionGroupPermissionRuleResult']:
        """
        The list of permissions rules.
        """
        return pulumi.get(self, "permission_rules")


@pulumi.output_type
class PermissionGroupsPermissionGroupMountPointResult(dict):
    def __init__(__self__, *,
                 file_system_id: str,
                 mount_point_id: str,
                 mount_point_name: str):
        """
        :param str file_system_id: The id of the file system.
        :param str mount_point_id: The id of the mount point.
        :param str mount_point_name: The name of the mount point.
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "mount_point_id", mount_point_id)
        pulumi.set(__self__, "mount_point_name", mount_point_name)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The id of the file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="mountPointId")
    def mount_point_id(self) -> str:
        """
        The id of the mount point.
        """
        return pulumi.get(self, "mount_point_id")

    @property
    @pulumi.getter(name="mountPointName")
    def mount_point_name(self) -> str:
        """
        The name of the mount point.
        """
        return pulumi.get(self, "mount_point_name")


@pulumi.output_type
class PermissionGroupsPermissionGroupPermissionRuleResult(dict):
    def __init__(__self__, *,
                 cidr_ip: str,
                 permission_rule_id: str,
                 rw_mode: str,
                 user_mode: str):
        """
        :param str cidr_ip: Client IP addresses that are allowed access.
        :param str permission_rule_id: The id of the permission rule.
        :param str rw_mode: Permission group read and write rules.
        :param str user_mode: Permission group user permissions.
        """
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "permission_rule_id", permission_rule_id)
        pulumi.set(__self__, "rw_mode", rw_mode)
        pulumi.set(__self__, "user_mode", user_mode)

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Client IP addresses that are allowed access.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="permissionRuleId")
    def permission_rule_id(self) -> str:
        """
        The id of the permission rule.
        """
        return pulumi.get(self, "permission_rule_id")

    @property
    @pulumi.getter(name="rwMode")
    def rw_mode(self) -> str:
        """
        Permission group read and write rules.
        """
        return pulumi.get(self, "rw_mode")

    @property
    @pulumi.getter(name="userMode")
    def user_mode(self) -> str:
        """
        Permission group user permissions.
        """
        return pulumi.get(self, "user_mode")


@pulumi.output_type
class RegionsRegionResult(dict):
    def __init__(__self__, *,
                 region_id: str,
                 region_name: str,
                 status: str):
        """
        :param str region_id: The id of the region.
        :param str region_name: The name of region.
        :param str status: The status info of region.
        """
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The id of the region.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        The name of region.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status info of region.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 file_system_id: str,
                 file_system_name: str,
                 id: str,
                 is_encrypt: bool,
                 progress: str,
                 retention_days: int,
                 snapshot_id: str,
                 snapshot_name: str,
                 snapshot_type: str,
                 source_size: int,
                 source_version: str,
                 status: str,
                 zone_id: str):
        """
        :param str create_time: The create time of snapshot.
        :param str description: The description of snapshot.
        :param str file_system_id: The ID of file system.
        :param str file_system_name: The name of file system.
        :param str id: The ID of snapshot.
        :param bool is_encrypt: Whether is encrypt.
        :param str progress: The progress of snapshot.
        :param int retention_days: The retention days of snapshot.
        :param str snapshot_id: The ID of snapshot.
        :param str snapshot_name: The name of snapshot.
        :param str snapshot_type: The type of snapshot.
        :param int source_size: The size of source.
        :param str source_version: The source version info.
        :param str status: The status of snapshot.
        :param str zone_id: The ID of zone.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "file_system_name", file_system_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_encrypt", is_encrypt)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "retention_days", retention_days)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "snapshot_name", snapshot_name)
        pulumi.set(__self__, "snapshot_type", snapshot_type)
        pulumi.set(__self__, "source_size", source_size)
        pulumi.set(__self__, "source_version", source_version)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of snapshot.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of snapshot.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The ID of file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemName")
    def file_system_name(self) -> str:
        """
        The name of file system.
        """
        return pulumi.get(self, "file_system_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of snapshot.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEncrypt")
    def is_encrypt(self) -> bool:
        """
        Whether is encrypt.
        """
        return pulumi.get(self, "is_encrypt")

    @property
    @pulumi.getter
    def progress(self) -> str:
        """
        The progress of snapshot.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> int:
        """
        The retention days of snapshot.
        """
        return pulumi.get(self, "retention_days")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        """
        The ID of snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> str:
        """
        The name of snapshot.
        """
        return pulumi.get(self, "snapshot_name")

    @property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> str:
        """
        The type of snapshot.
        """
        return pulumi.get(self, "snapshot_type")

    @property
    @pulumi.getter(name="sourceSize")
    def source_size(self) -> int:
        """
        The size of source.
        """
        return pulumi.get(self, "source_size")

    @property
    @pulumi.getter(name="sourceVersion")
    def source_version(self) -> str:
        """
        The source version info.
        """
        return pulumi.get(self, "source_version")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of snapshot.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The ID of zone.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class ZonesZoneResult(dict):
    def __init__(__self__, *,
                 id: str,
                 sales: Sequence['outputs.ZonesZoneSaleResult'],
                 status: str,
                 zone_id: str,
                 zone_name: str):
        """
        :param str id: The id of the zone.
        :param Sequence['ZonesZoneSaleArgs'] sales: The collection of sales info.
        :param str status: The status info.
        :param str zone_id: The id of the zone.
        :param str zone_name: The name of the zone.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "sales", sales)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def sales(self) -> Sequence['outputs.ZonesZoneSaleResult']:
        """
        The collection of sales info.
        """
        return pulumi.get(self, "sales")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status info.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        The name of the zone.
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class ZonesZoneSaleResult(dict):
    def __init__(__self__, *,
                 file_system_type: str,
                 protocol_type: str,
                 status: str,
                 storage_type: str):
        """
        :param str file_system_type: The type of file system.
        :param str protocol_type: The type of protocol.
        :param str status: The status info.
        :param str storage_type: The type of storage.
        """
        pulumi.set(__self__, "file_system_type", file_system_type)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> str:
        """
        The type of file system.
        """
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        """
        The type of protocol.
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status info.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


