# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutoSnapshotPoliciesResult',
    'AwaitableGetAutoSnapshotPoliciesResult',
    'get_auto_snapshot_policies',
    'get_auto_snapshot_policies_output',
]

@pulumi.output_type
class GetAutoSnapshotPoliciesResult:
    """
    A collection of values returned by getAutoSnapshotPolicies.
    """
    def __init__(__self__, auto_snapshot_polices=None, auto_snapshot_policy_id=None, auto_snapshot_policy_name=None, id=None, name_regex=None, output_file=None, total_count=None):
        if auto_snapshot_polices and not isinstance(auto_snapshot_polices, list):
            raise TypeError("Expected argument 'auto_snapshot_polices' to be a list")
        pulumi.set(__self__, "auto_snapshot_polices", auto_snapshot_polices)
        if auto_snapshot_policy_id and not isinstance(auto_snapshot_policy_id, str):
            raise TypeError("Expected argument 'auto_snapshot_policy_id' to be a str")
        pulumi.set(__self__, "auto_snapshot_policy_id", auto_snapshot_policy_id)
        if auto_snapshot_policy_name and not isinstance(auto_snapshot_policy_name, str):
            raise TypeError("Expected argument 'auto_snapshot_policy_name' to be a str")
        pulumi.set(__self__, "auto_snapshot_policy_name", auto_snapshot_policy_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="autoSnapshotPolices")
    def auto_snapshot_polices(self) -> Sequence['outputs.GetAutoSnapshotPoliciesAutoSnapshotPoliceResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "auto_snapshot_polices")

    @property
    @pulumi.getter(name="autoSnapshotPolicyId")
    def auto_snapshot_policy_id(self) -> Optional[str]:
        """
        The ID of auto snapshot policy.
        """
        return pulumi.get(self, "auto_snapshot_policy_id")

    @property
    @pulumi.getter(name="autoSnapshotPolicyName")
    def auto_snapshot_policy_name(self) -> Optional[str]:
        """
        The name of auto snapshot policy.
        """
        return pulumi.get(self, "auto_snapshot_policy_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetAutoSnapshotPoliciesResult(GetAutoSnapshotPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoSnapshotPoliciesResult(
            auto_snapshot_polices=self.auto_snapshot_polices,
            auto_snapshot_policy_id=self.auto_snapshot_policy_id,
            auto_snapshot_policy_name=self.auto_snapshot_policy_name,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count)


def get_auto_snapshot_policies(auto_snapshot_policy_id: Optional[str] = None,
                               auto_snapshot_policy_name: Optional[str] = None,
                               name_regex: Optional[str] = None,
                               output_file: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoSnapshotPoliciesResult:
    """
    Use this data source to query detailed information of nas auto snapshot policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_auto_snapshot_policy = volcengine.nas.AutoSnapshotPolicy("fooAutoSnapshotPolicy",
        auto_snapshot_policy_name="acc-test-auto_snapshot_policy",
        repeat_weekdays="1,3,5,7",
        time_points="0,7,17",
        retention_days=20)
    foo_auto_snapshot_policies = volcengine.nas.get_auto_snapshot_policies_output(auto_snapshot_policy_id=foo_auto_snapshot_policy.id)
    ```


    :param str auto_snapshot_policy_id: The id of auto snapshot policy.
    :param str auto_snapshot_policy_name: The name of auto snapshot policy.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['autoSnapshotPolicyId'] = auto_snapshot_policy_id
    __args__['autoSnapshotPolicyName'] = auto_snapshot_policy_name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:nas/getAutoSnapshotPolicies:getAutoSnapshotPolicies', __args__, opts=opts, typ=GetAutoSnapshotPoliciesResult).value

    return AwaitableGetAutoSnapshotPoliciesResult(
        auto_snapshot_polices=pulumi.get(__ret__, 'auto_snapshot_polices'),
        auto_snapshot_policy_id=pulumi.get(__ret__, 'auto_snapshot_policy_id'),
        auto_snapshot_policy_name=pulumi.get(__ret__, 'auto_snapshot_policy_name'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_auto_snapshot_policies)
def get_auto_snapshot_policies_output(auto_snapshot_policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      auto_snapshot_policy_name: Optional[pulumi.Input[Optional[str]]] = None,
                                      name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                                      output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAutoSnapshotPoliciesResult]:
    """
    Use this data source to query detailed information of nas auto snapshot policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_auto_snapshot_policy = volcengine.nas.AutoSnapshotPolicy("fooAutoSnapshotPolicy",
        auto_snapshot_policy_name="acc-test-auto_snapshot_policy",
        repeat_weekdays="1,3,5,7",
        time_points="0,7,17",
        retention_days=20)
    foo_auto_snapshot_policies = volcengine.nas.get_auto_snapshot_policies_output(auto_snapshot_policy_id=foo_auto_snapshot_policy.id)
    ```


    :param str auto_snapshot_policy_id: The id of auto snapshot policy.
    :param str auto_snapshot_policy_name: The name of auto snapshot policy.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    ...
