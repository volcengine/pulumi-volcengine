# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ContactGroupArgs', 'ContactGroup']

@pulumi.input_type
class ContactGroupArgs:
    def __init__(__self__, *,
                 contacts_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ContactGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contacts_id_lists: When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
        :param pulumi.Input[str] description: The description of the contact group.
        :param pulumi.Input[str] name: The name of the contact group.
        """
        if contacts_id_lists is not None:
            pulumi.set(__self__, "contacts_id_lists", contacts_id_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="contactsIdLists")
    def contacts_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
        """
        return pulumi.get(self, "contacts_id_lists")

    @contacts_id_lists.setter
    def contacts_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contacts_id_lists", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the contact group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the contact group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ContactGroupState:
    def __init__(__self__, *,
                 contacts_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ContactGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contacts_id_lists: When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
        :param pulumi.Input[str] description: The description of the contact group.
        :param pulumi.Input[str] name: The name of the contact group.
        """
        if contacts_id_lists is not None:
            pulumi.set(__self__, "contacts_id_lists", contacts_id_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="contactsIdLists")
    def contacts_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
        """
        return pulumi.get(self, "contacts_id_lists")

    @contacts_id_lists.setter
    def contacts_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contacts_id_lists", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the contact group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the contact group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class ContactGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contacts_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage cloud monitor contact group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cloud_monitor.ContactGroup("foo",
            contacts_id_lists=[
                "1737376113733353472",
                "1737375997680111616",
            ],
            description="tftest")
        ```

        ## Import

        CloudMonitorContactGroup can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_monitor/contactGroup:ContactGroup default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contacts_id_lists: When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
        :param pulumi.Input[str] description: The description of the contact group.
        :param pulumi.Input[str] name: The name of the contact group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ContactGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cloud monitor contact group
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cloud_monitor.ContactGroup("foo",
            contacts_id_lists=[
                "1737376113733353472",
                "1737375997680111616",
            ],
            description="tftest")
        ```

        ## Import

        CloudMonitorContactGroup can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_monitor/contactGroup:ContactGroup default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ContactGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContactGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contacts_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContactGroupArgs.__new__(ContactGroupArgs)

            __props__.__dict__["contacts_id_lists"] = contacts_id_lists
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
        super(ContactGroup, __self__).__init__(
            'volcengine:cloud_monitor/contactGroup:ContactGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            contacts_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'ContactGroup':
        """
        Get an existing ContactGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contacts_id_lists: When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
        :param pulumi.Input[str] description: The description of the contact group.
        :param pulumi.Input[str] name: The name of the contact group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContactGroupState.__new__(_ContactGroupState)

        __props__.__dict__["contacts_id_lists"] = contacts_id_lists
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        return ContactGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="contactsIdLists")
    def contacts_id_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
        """
        return pulumi.get(self, "contacts_id_lists")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the contact group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the contact group.
        """
        return pulumi.get(self, "name")

