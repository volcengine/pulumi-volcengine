# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventRuleArgs', 'EventRule']

@pulumi.input_type
class EventRuleArgs:
    def __init__(__self__, *,
                 contact_methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 effective_time: pulumi.Input['EventRuleEffectiveTimeArgs'],
                 event_source: pulumi.Input[str],
                 filter_pattern: pulumi.Input['EventRuleFilterPatternArgs'],
                 level: pulumi.Input[str],
                 rule_name: pulumi.Input[str],
                 contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 event_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 message_queues: Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleMessageQueueArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tls_targets: Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleTlsTargetArgs']]]] = None):
        """
        The set of arguments for constructing a EventRule resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_methods: Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
        :param pulumi.Input['EventRuleEffectiveTimeArgs'] effective_time: The rule takes effect at a certain time and will only be effective during this period.
        :param pulumi.Input[str] event_source: Event source.
        :param pulumi.Input['EventRuleFilterPatternArgs'] filter_pattern: Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        :param pulumi.Input[str] level: Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
        :param pulumi.Input[str] rule_name: The name of the rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        :param pulumi.Input[str] description: The description of the rule.
        :param pulumi.Input[str] endpoint: When the alarm notification method is alarm callback, it triggers the callback address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_types: Event type.
        :param pulumi.Input[Sequence[pulumi.Input['EventRuleMessageQueueArgs']]] message_queues: The triggered message queue when the alarm notification method is Kafka message queue.
        :param pulumi.Input[str] status: Rule status. `enable`: enable rule(default), `disable`: disable rule.
        :param pulumi.Input[Sequence[pulumi.Input['EventRuleTlsTargetArgs']]] tls_targets: The alarm method for log service triggers the configuration of the log service.
        """
        pulumi.set(__self__, "contact_methods", contact_methods)
        pulumi.set(__self__, "effective_time", effective_time)
        pulumi.set(__self__, "event_source", event_source)
        pulumi.set(__self__, "filter_pattern", filter_pattern)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "rule_name", rule_name)
        if contact_group_ids is not None:
            pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if event_types is not None:
            pulumi.set(__self__, "event_types", event_types)
        if message_queues is not None:
            pulumi.set(__self__, "message_queues", message_queues)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tls_targets is not None:
            pulumi.set(__self__, "tls_targets", tls_targets)

    @property
    @pulumi.getter(name="contactMethods")
    def contact_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
        """
        return pulumi.get(self, "contact_methods")

    @contact_methods.setter
    def contact_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "contact_methods", value)

    @property
    @pulumi.getter(name="effectiveTime")
    def effective_time(self) -> pulumi.Input['EventRuleEffectiveTimeArgs']:
        """
        The rule takes effect at a certain time and will only be effective during this period.
        """
        return pulumi.get(self, "effective_time")

    @effective_time.setter
    def effective_time(self, value: pulumi.Input['EventRuleEffectiveTimeArgs']):
        pulumi.set(self, "effective_time", value)

    @property
    @pulumi.getter(name="eventSource")
    def event_source(self) -> pulumi.Input[str]:
        """
        Event source.
        """
        return pulumi.get(self, "event_source")

    @event_source.setter
    def event_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_source", value)

    @property
    @pulumi.getter(name="filterPattern")
    def filter_pattern(self) -> pulumi.Input['EventRuleFilterPatternArgs']:
        """
        Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        """
        return pulumi.get(self, "filter_pattern")

    @filter_pattern.setter
    def filter_pattern(self, value: pulumi.Input['EventRuleFilterPatternArgs']):
        pulumi.set(self, "filter_pattern", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        """
        Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        """
        return pulumi.get(self, "contact_group_ids")

    @contact_group_ids.setter
    def contact_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contact_group_ids", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        When the alarm notification method is alarm callback, it triggers the callback address.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Event type.
        """
        return pulumi.get(self, "event_types")

    @event_types.setter
    def event_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "event_types", value)

    @property
    @pulumi.getter(name="messageQueues")
    def message_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleMessageQueueArgs']]]]:
        """
        The triggered message queue when the alarm notification method is Kafka message queue.
        """
        return pulumi.get(self, "message_queues")

    @message_queues.setter
    def message_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleMessageQueueArgs']]]]):
        pulumi.set(self, "message_queues", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Rule status. `enable`: enable rule(default), `disable`: disable rule.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tlsTargets")
    def tls_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleTlsTargetArgs']]]]:
        """
        The alarm method for log service triggers the configuration of the log service.
        """
        return pulumi.get(self, "tls_targets")

    @tls_targets.setter
    def tls_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleTlsTargetArgs']]]]):
        pulumi.set(self, "tls_targets", value)


@pulumi.input_type
class _EventRuleState:
    def __init__(__self__, *,
                 contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 contact_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 effective_time: Optional[pulumi.Input['EventRuleEffectiveTimeArgs']] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 event_source: Optional[pulumi.Input[str]] = None,
                 event_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter_pattern: Optional[pulumi.Input['EventRuleFilterPatternArgs']] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 message_queues: Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleMessageQueueArgs']]]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tls_targets: Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleTlsTargetArgs']]]] = None):
        """
        Input properties used for looking up and filtering EventRule resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_methods: Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
        :param pulumi.Input[str] description: The description of the rule.
        :param pulumi.Input['EventRuleEffectiveTimeArgs'] effective_time: The rule takes effect at a certain time and will only be effective during this period.
        :param pulumi.Input[str] endpoint: When the alarm notification method is alarm callback, it triggers the callback address.
        :param pulumi.Input[str] event_source: Event source.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_types: Event type.
        :param pulumi.Input['EventRuleFilterPatternArgs'] filter_pattern: Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        :param pulumi.Input[str] level: Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input['EventRuleMessageQueueArgs']]] message_queues: The triggered message queue when the alarm notification method is Kafka message queue.
        :param pulumi.Input[str] rule_name: The name of the rule.
        :param pulumi.Input[str] status: Rule status. `enable`: enable rule(default), `disable`: disable rule.
        :param pulumi.Input[Sequence[pulumi.Input['EventRuleTlsTargetArgs']]] tls_targets: The alarm method for log service triggers the configuration of the log service.
        """
        if contact_group_ids is not None:
            pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        if contact_methods is not None:
            pulumi.set(__self__, "contact_methods", contact_methods)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if effective_time is not None:
            pulumi.set(__self__, "effective_time", effective_time)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if event_source is not None:
            pulumi.set(__self__, "event_source", event_source)
        if event_types is not None:
            pulumi.set(__self__, "event_types", event_types)
        if filter_pattern is not None:
            pulumi.set(__self__, "filter_pattern", filter_pattern)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if message_queues is not None:
            pulumi.set(__self__, "message_queues", message_queues)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tls_targets is not None:
            pulumi.set(__self__, "tls_targets", tls_targets)

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        """
        return pulumi.get(self, "contact_group_ids")

    @contact_group_ids.setter
    def contact_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contact_group_ids", value)

    @property
    @pulumi.getter(name="contactMethods")
    def contact_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
        """
        return pulumi.get(self, "contact_methods")

    @contact_methods.setter
    def contact_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contact_methods", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="effectiveTime")
    def effective_time(self) -> Optional[pulumi.Input['EventRuleEffectiveTimeArgs']]:
        """
        The rule takes effect at a certain time and will only be effective during this period.
        """
        return pulumi.get(self, "effective_time")

    @effective_time.setter
    def effective_time(self, value: Optional[pulumi.Input['EventRuleEffectiveTimeArgs']]):
        pulumi.set(self, "effective_time", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        When the alarm notification method is alarm callback, it triggers the callback address.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="eventSource")
    def event_source(self) -> Optional[pulumi.Input[str]]:
        """
        Event source.
        """
        return pulumi.get(self, "event_source")

    @event_source.setter
    def event_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_source", value)

    @property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Event type.
        """
        return pulumi.get(self, "event_types")

    @event_types.setter
    def event_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "event_types", value)

    @property
    @pulumi.getter(name="filterPattern")
    def filter_pattern(self) -> Optional[pulumi.Input['EventRuleFilterPatternArgs']]:
        """
        Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        """
        return pulumi.get(self, "filter_pattern")

    @filter_pattern.setter
    def filter_pattern(self, value: Optional[pulumi.Input['EventRuleFilterPatternArgs']]):
        pulumi.set(self, "filter_pattern", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter(name="messageQueues")
    def message_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleMessageQueueArgs']]]]:
        """
        The triggered message queue when the alarm notification method is Kafka message queue.
        """
        return pulumi.get(self, "message_queues")

    @message_queues.setter
    def message_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleMessageQueueArgs']]]]):
        pulumi.set(self, "message_queues", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Rule status. `enable`: enable rule(default), `disable`: disable rule.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tlsTargets")
    def tls_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleTlsTargetArgs']]]]:
        """
        The alarm method for log service triggers the configuration of the log service.
        """
        return pulumi.get(self, "tls_targets")

    @tls_targets.setter
    def tls_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventRuleTlsTargetArgs']]]]):
        pulumi.set(self, "tls_targets", value)


class EventRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 contact_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 effective_time: Optional[pulumi.Input[pulumi.InputType['EventRuleEffectiveTimeArgs']]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 event_source: Optional[pulumi.Input[str]] = None,
                 event_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter_pattern: Optional[pulumi.Input[pulumi.InputType['EventRuleFilterPatternArgs']]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 message_queues: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventRuleMessageQueueArgs']]]]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tls_targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventRuleTlsTargetArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage cloud monitor event rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cloud_monitor.EventRule("foo",
            contact_group_ids=[
                "1737941730782699520",
                "1737940985502777344",
            ],
            contact_methods=[
                "Phone",
                "TLS",
                "MQ",
            ],
            effective_time=volcengine.cloud_monitor.EventRuleEffectiveTimeArgs(
                end_time="22:00",
                start_time="01:00",
            ),
            event_source="ecs",
            event_types=["ecs:Disk:DiskError.Redeploy.Canceled"],
            filter_pattern=volcengine.cloud_monitor.EventRuleFilterPatternArgs(
                source="ecs",
                types=["ecs:Disk:DiskError.Redeploy.Canceled"],
            ),
            level="notice",
            message_queues=[volcengine.cloud_monitor.EventRuleMessageQueueArgs(
                instance_id="kafka-cnoe4rfrsqfb1d64",
                region="*****",
                topic="tftest",
                type="kafka",
                vpc_id="vpc-2d68hz41j7qio58ozfd6jxgtb",
            )],
            rule_name="tftest1",
            status="enable",
            tls_targets=[volcengine.cloud_monitor.EventRuleTlsTargetArgs(
                project_id="17ba378d-de43-495e-8906-03ae6567b376",
                project_name="tf-test",
                region_name_cn="*****",
                region_name_en="*****",
                topic_id="7ce12237-6670-44a7-9d79-2e36961586e6",
            )])
        ```

        ## Import

        CloudMonitorEventRule can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_monitor/eventRule:EventRule default rule_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_methods: Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
        :param pulumi.Input[str] description: The description of the rule.
        :param pulumi.Input[pulumi.InputType['EventRuleEffectiveTimeArgs']] effective_time: The rule takes effect at a certain time and will only be effective during this period.
        :param pulumi.Input[str] endpoint: When the alarm notification method is alarm callback, it triggers the callback address.
        :param pulumi.Input[str] event_source: Event source.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_types: Event type.
        :param pulumi.Input[pulumi.InputType['EventRuleFilterPatternArgs']] filter_pattern: Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        :param pulumi.Input[str] level: Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventRuleMessageQueueArgs']]]] message_queues: The triggered message queue when the alarm notification method is Kafka message queue.
        :param pulumi.Input[str] rule_name: The name of the rule.
        :param pulumi.Input[str] status: Rule status. `enable`: enable rule(default), `disable`: disable rule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventRuleTlsTargetArgs']]]] tls_targets: The alarm method for log service triggers the configuration of the log service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cloud monitor event rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cloud_monitor.EventRule("foo",
            contact_group_ids=[
                "1737941730782699520",
                "1737940985502777344",
            ],
            contact_methods=[
                "Phone",
                "TLS",
                "MQ",
            ],
            effective_time=volcengine.cloud_monitor.EventRuleEffectiveTimeArgs(
                end_time="22:00",
                start_time="01:00",
            ),
            event_source="ecs",
            event_types=["ecs:Disk:DiskError.Redeploy.Canceled"],
            filter_pattern=volcengine.cloud_monitor.EventRuleFilterPatternArgs(
                source="ecs",
                types=["ecs:Disk:DiskError.Redeploy.Canceled"],
            ),
            level="notice",
            message_queues=[volcengine.cloud_monitor.EventRuleMessageQueueArgs(
                instance_id="kafka-cnoe4rfrsqfb1d64",
                region="*****",
                topic="tftest",
                type="kafka",
                vpc_id="vpc-2d68hz41j7qio58ozfd6jxgtb",
            )],
            rule_name="tftest1",
            status="enable",
            tls_targets=[volcengine.cloud_monitor.EventRuleTlsTargetArgs(
                project_id="17ba378d-de43-495e-8906-03ae6567b376",
                project_name="tf-test",
                region_name_cn="*****",
                region_name_en="*****",
                topic_id="7ce12237-6670-44a7-9d79-2e36961586e6",
            )])
        ```

        ## Import

        CloudMonitorEventRule can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_monitor/eventRule:EventRule default rule_id
        ```

        :param str resource_name: The name of the resource.
        :param EventRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 contact_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 effective_time: Optional[pulumi.Input[pulumi.InputType['EventRuleEffectiveTimeArgs']]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 event_source: Optional[pulumi.Input[str]] = None,
                 event_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter_pattern: Optional[pulumi.Input[pulumi.InputType['EventRuleFilterPatternArgs']]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 message_queues: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventRuleMessageQueueArgs']]]]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tls_targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventRuleTlsTargetArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventRuleArgs.__new__(EventRuleArgs)

            __props__.__dict__["contact_group_ids"] = contact_group_ids
            if contact_methods is None and not opts.urn:
                raise TypeError("Missing required property 'contact_methods'")
            __props__.__dict__["contact_methods"] = contact_methods
            __props__.__dict__["description"] = description
            if effective_time is None and not opts.urn:
                raise TypeError("Missing required property 'effective_time'")
            __props__.__dict__["effective_time"] = effective_time
            __props__.__dict__["endpoint"] = endpoint
            if event_source is None and not opts.urn:
                raise TypeError("Missing required property 'event_source'")
            __props__.__dict__["event_source"] = event_source
            __props__.__dict__["event_types"] = event_types
            if filter_pattern is None and not opts.urn:
                raise TypeError("Missing required property 'filter_pattern'")
            __props__.__dict__["filter_pattern"] = filter_pattern
            if level is None and not opts.urn:
                raise TypeError("Missing required property 'level'")
            __props__.__dict__["level"] = level
            __props__.__dict__["message_queues"] = message_queues
            if rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_name'")
            __props__.__dict__["rule_name"] = rule_name
            __props__.__dict__["status"] = status
            __props__.__dict__["tls_targets"] = tls_targets
        super(EventRule, __self__).__init__(
            'volcengine:cloud_monitor/eventRule:EventRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            contact_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            effective_time: Optional[pulumi.Input[pulumi.InputType['EventRuleEffectiveTimeArgs']]] = None,
            endpoint: Optional[pulumi.Input[str]] = None,
            event_source: Optional[pulumi.Input[str]] = None,
            event_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            filter_pattern: Optional[pulumi.Input[pulumi.InputType['EventRuleFilterPatternArgs']]] = None,
            level: Optional[pulumi.Input[str]] = None,
            message_queues: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventRuleMessageQueueArgs']]]]] = None,
            rule_name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tls_targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventRuleTlsTargetArgs']]]]] = None) -> 'EventRule':
        """
        Get an existing EventRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_methods: Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
        :param pulumi.Input[str] description: The description of the rule.
        :param pulumi.Input[pulumi.InputType['EventRuleEffectiveTimeArgs']] effective_time: The rule takes effect at a certain time and will only be effective during this period.
        :param pulumi.Input[str] endpoint: When the alarm notification method is alarm callback, it triggers the callback address.
        :param pulumi.Input[str] event_source: Event source.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_types: Event type.
        :param pulumi.Input[pulumi.InputType['EventRuleFilterPatternArgs']] filter_pattern: Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        :param pulumi.Input[str] level: Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventRuleMessageQueueArgs']]]] message_queues: The triggered message queue when the alarm notification method is Kafka message queue.
        :param pulumi.Input[str] rule_name: The name of the rule.
        :param pulumi.Input[str] status: Rule status. `enable`: enable rule(default), `disable`: disable rule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventRuleTlsTargetArgs']]]] tls_targets: The alarm method for log service triggers the configuration of the log service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventRuleState.__new__(_EventRuleState)

        __props__.__dict__["contact_group_ids"] = contact_group_ids
        __props__.__dict__["contact_methods"] = contact_methods
        __props__.__dict__["description"] = description
        __props__.__dict__["effective_time"] = effective_time
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["event_source"] = event_source
        __props__.__dict__["event_types"] = event_types
        __props__.__dict__["filter_pattern"] = filter_pattern
        __props__.__dict__["level"] = level
        __props__.__dict__["message_queues"] = message_queues
        __props__.__dict__["rule_name"] = rule_name
        __props__.__dict__["status"] = status
        __props__.__dict__["tls_targets"] = tls_targets
        return EventRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter(name="contactMethods")
    def contact_methods(self) -> pulumi.Output[Sequence[str]]:
        """
        Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
        """
        return pulumi.get(self, "contact_methods")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectiveTime")
    def effective_time(self) -> pulumi.Output['outputs.EventRuleEffectiveTime']:
        """
        The rule takes effect at a certain time and will only be effective during this period.
        """
        return pulumi.get(self, "effective_time")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[Optional[str]]:
        """
        When the alarm notification method is alarm callback, it triggers the callback address.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="eventSource")
    def event_source(self) -> pulumi.Output[str]:
        """
        Event source.
        """
        return pulumi.get(self, "event_source")

    @property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Event type.
        """
        return pulumi.get(self, "event_types")

    @property
    @pulumi.getter(name="filterPattern")
    def filter_pattern(self) -> pulumi.Output['outputs.EventRuleFilterPattern']:
        """
        Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        """
        return pulumi.get(self, "filter_pattern")

    @property
    @pulumi.getter
    def level(self) -> pulumi.Output[str]:
        """
        Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="messageQueues")
    def message_queues(self) -> pulumi.Output[Optional[Sequence['outputs.EventRuleMessageQueue']]]:
        """
        The triggered message queue when the alarm notification method is Kafka message queue.
        """
        return pulumi.get(self, "message_queues")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[str]:
        """
        The name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        Rule status. `enable`: enable rule(default), `disable`: disable rule.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tlsTargets")
    def tls_targets(self) -> pulumi.Output[Optional[Sequence['outputs.EventRuleTlsTarget']]]:
        """
        The alarm method for log service triggers the configuration of the log service.
        """
        return pulumi.get(self, "tls_targets")

