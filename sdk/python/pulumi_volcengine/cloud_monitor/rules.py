# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RulesResult',
    'AwaitableRulesResult',
    'rules',
    'rules_output',
]

@pulumi.output_type
class RulesResult:
    """
    A collection of values returned by Rules.
    """
    def __init__(__self__, alert_states=None, enable_states=None, id=None, ids=None, levels=None, name_regex=None, namespaces=None, output_file=None, rule_name=None, rules=None, total_count=None):
        if alert_states and not isinstance(alert_states, list):
            raise TypeError("Expected argument 'alert_states' to be a list")
        pulumi.set(__self__, "alert_states", alert_states)
        if enable_states and not isinstance(enable_states, list):
            raise TypeError("Expected argument 'enable_states' to be a list")
        pulumi.set(__self__, "enable_states", enable_states)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if levels and not isinstance(levels, list):
            raise TypeError("Expected argument 'levels' to be a list")
        pulumi.set(__self__, "levels", levels)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if namespaces and not isinstance(namespaces, list):
            raise TypeError("Expected argument 'namespaces' to be a list")
        pulumi.set(__self__, "namespaces", namespaces)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if rule_name and not isinstance(rule_name, str):
            raise TypeError("Expected argument 'rule_name' to be a str")
        pulumi.set(__self__, "rule_name", rule_name)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="alertStates")
    def alert_states(self) -> Optional[Sequence[str]]:
        """
        The alert state of the cloud monitor rule.
        """
        return pulumi.get(self, "alert_states")

    @property
    @pulumi.getter(name="enableStates")
    def enable_states(self) -> Optional[Sequence[str]]:
        """
        The enable state of the cloud monitor rule.
        """
        return pulumi.get(self, "enable_states")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def levels(self) -> Optional[Sequence[str]]:
        """
        The level of the cloud monitor rule.
        """
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        The namespace of the cloud monitor rule.
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        """
        The name of the cloud monitor rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.RulesRuleResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableRulesResult(RulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return RulesResult(
            alert_states=self.alert_states,
            enable_states=self.enable_states,
            id=self.id,
            ids=self.ids,
            levels=self.levels,
            name_regex=self.name_regex,
            namespaces=self.namespaces,
            output_file=self.output_file,
            rule_name=self.rule_name,
            rules=self.rules,
            total_count=self.total_count)


def rules(alert_states: Optional[Sequence[str]] = None,
          enable_states: Optional[Sequence[str]] = None,
          ids: Optional[Sequence[str]] = None,
          levels: Optional[Sequence[str]] = None,
          name_regex: Optional[str] = None,
          namespaces: Optional[Sequence[str]] = None,
          output_file: Optional[str] = None,
          rule_name: Optional[str] = None,
          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableRulesResult:
    """
    Use this data source to query detailed information of cloud monitor rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cloud_monitor.rules(ids=["174402785374661****"])
    ```


    :param Sequence[str] alert_states: The alert state of the cloud monitor rule. Valid values: `altering`, `normal`.
    :param Sequence[str] enable_states: The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
    :param Sequence[str] ids: A list of cloud monitor ids.
    :param Sequence[str] levels: The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
    :param str name_regex: A Name Regex of Resource.
    :param Sequence[str] namespaces: The namespace of the cloud monitor rule.
    :param str output_file: File name where to save data source results.
    :param str rule_name: The name of the cloud monitor rule. This field support fuzzy query.
    """
    __args__ = dict()
    __args__['alertStates'] = alert_states
    __args__['enableStates'] = enable_states
    __args__['ids'] = ids
    __args__['levels'] = levels
    __args__['nameRegex'] = name_regex
    __args__['namespaces'] = namespaces
    __args__['outputFile'] = output_file
    __args__['ruleName'] = rule_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cloud_monitor/rules:Rules', __args__, opts=opts, typ=RulesResult).value

    return AwaitableRulesResult(
        alert_states=pulumi.get(__ret__, 'alert_states'),
        enable_states=pulumi.get(__ret__, 'enable_states'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        levels=pulumi.get(__ret__, 'levels'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        namespaces=pulumi.get(__ret__, 'namespaces'),
        output_file=pulumi.get(__ret__, 'output_file'),
        rule_name=pulumi.get(__ret__, 'rule_name'),
        rules=pulumi.get(__ret__, 'rules'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(rules)
def rules_output(alert_states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                 enable_states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                 ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                 levels: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                 name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                 namespaces: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                 output_file: Optional[pulumi.Input[Optional[str]]] = None,
                 rule_name: Optional[pulumi.Input[Optional[str]]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[RulesResult]:
    """
    Use this data source to query detailed information of cloud monitor rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cloud_monitor.rules(ids=["174402785374661****"])
    ```


    :param Sequence[str] alert_states: The alert state of the cloud monitor rule. Valid values: `altering`, `normal`.
    :param Sequence[str] enable_states: The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
    :param Sequence[str] ids: A list of cloud monitor ids.
    :param Sequence[str] levels: The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
    :param str name_regex: A Name Regex of Resource.
    :param Sequence[str] namespaces: The namespace of the cloud monitor rule.
    :param str output_file: File name where to save data source results.
    :param str rule_name: The name of the cloud monitor rule. This field support fuzzy query.
    """
    ...
