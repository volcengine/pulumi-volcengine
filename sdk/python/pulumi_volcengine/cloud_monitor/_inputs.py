# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'EventRuleEffectiveTimeArgs',
    'EventRuleFilterPatternArgs',
    'EventRuleMessageQueueArgs',
    'EventRuleTlsTargetArgs',
    'RuleConditionArgs',
    'RuleOriginalDimensionArgs',
    'RuleRecoveryNotifyArgs',
]

@pulumi.input_type
class EventRuleEffectiveTimeArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] end_time: End time for rule activation.
        :param pulumi.Input[str] start_time: Start time for rule activation.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        """
        End time for rule activation.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Start time for rule activation.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class EventRuleFilterPatternArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 types: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] source: Event source corresponding to pattern matching.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] types: The list of corresponding event types in pattern matching, currently set to match any.
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        Event source corresponding to pattern matching.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of corresponding event types in pattern matching, currently set to match any.
        """
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "types", value)


@pulumi.input_type
class EventRuleMessageQueueArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 region: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 type: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_id: The kafka instance id.
        :param pulumi.Input[str] region: The region.
        :param pulumi.Input[str] topic: The topic name.
        :param pulumi.Input[str] type: The message queue type, only support kafka now.
        :param pulumi.Input[str] vpc_id: The vpc id.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The kafka instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        The region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        """
        The topic name.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The message queue type, only support kafka now.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class EventRuleTlsTargetArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 project_name: pulumi.Input[str],
                 region_name_cn: pulumi.Input[str],
                 region_name_en: pulumi.Input[str],
                 topic_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] project_id: The project id.
        :param pulumi.Input[str] project_name: The project name.
        :param pulumi.Input[str] region_name_cn: The Chinese region name.
        :param pulumi.Input[str] region_name_en: The English region name.
        :param pulumi.Input[str] topic_id: The topic id.
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region_name_cn", region_name_cn)
        pulumi.set(__self__, "region_name_en", region_name_en)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Input[str]:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="regionNameCn")
    def region_name_cn(self) -> pulumi.Input[str]:
        """
        The Chinese region name.
        """
        return pulumi.get(self, "region_name_cn")

    @region_name_cn.setter
    def region_name_cn(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_name_cn", value)

    @property
    @pulumi.getter(name="regionNameEn")
    def region_name_en(self) -> pulumi.Input[str]:
        """
        The English region name.
        """
        return pulumi.get(self, "region_name_en")

    @region_name_en.setter
    def region_name_en(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_name_en", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        """
        The topic id.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class RuleConditionArgs:
    def __init__(__self__, *,
                 comparison_operator: pulumi.Input[str],
                 metric_name: pulumi.Input[str],
                 metric_unit: pulumi.Input[str],
                 statistics: pulumi.Input[str],
                 threshold: pulumi.Input[str],
                 period: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparison_operator: The comparison operation of the cloud monitor rule. Valid values: `>`, `>=`, `<`, `<=`, `!=`, `=`.
        :param pulumi.Input[str] metric_name: The metric name of the cloud monitor rule.
        :param pulumi.Input[str] metric_unit: The metric unit of the cloud monitor rule.
        :param pulumi.Input[str] statistics: The statistics of the cloud monitor rule. Valid values: `avg`, `max`, `min`.
        :param pulumi.Input[str] threshold: The threshold of the cloud monitor rule.
        """
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "metric_unit", metric_unit)
        pulumi.set(__self__, "statistics", statistics)
        pulumi.set(__self__, "threshold", threshold)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> pulumi.Input[str]:
        """
        The comparison operation of the cloud monitor rule. Valid values: `>`, `>=`, `<`, `<=`, `!=`, `=`.
        """
        return pulumi.get(self, "comparison_operator")

    @comparison_operator.setter
    def comparison_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison_operator", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        """
        The metric name of the cloud monitor rule.
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> pulumi.Input[str]:
        """
        The metric unit of the cloud monitor rule.
        """
        return pulumi.get(self, "metric_unit")

    @metric_unit.setter
    def metric_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_unit", value)

    @property
    @pulumi.getter
    def statistics(self) -> pulumi.Input[str]:
        """
        The statistics of the cloud monitor rule. Valid values: `avg`, `max`, `min`.
        """
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: pulumi.Input[str]):
        pulumi.set(self, "statistics", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[str]:
        """
        The threshold of the cloud monitor rule.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[str]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)


@pulumi.input_type
class RuleOriginalDimensionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] key: The key of the dimension.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The value of the dimension.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the dimension.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The value of the dimension.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleRecoveryNotifyArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable: Whether to enable the recovery notify function.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the recovery notify function.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)


