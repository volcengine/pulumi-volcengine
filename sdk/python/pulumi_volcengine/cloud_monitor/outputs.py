# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ContactGroupsGroupResult',
    'ContactGroupsGroupContactResult',
    'ContactsContactResult',
    'EventRuleEffectiveTime',
    'EventRuleFilterPattern',
    'EventRuleMessageQueue',
    'EventRuleTlsTarget',
    'EventRulesRuleResult',
    'EventRulesRuleFilterPatternResult',
    'EventRulesRuleMessageQueueResult',
    'EventRulesRuleTlsTargetResult',
    'RuleCondition',
    'RuleOriginalDimension',
    'RuleRecoveryNotify',
    'RulesRuleResult',
    'RulesRuleConditionResult',
    'RulesRuleOriginalDimensionResult',
]

@pulumi.output_type
class ContactGroupsGroupResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 contacts: Sequence['outputs.ContactGroupsGroupContactResult'],
                 created_at: str,
                 description: str,
                 id: str,
                 name: str,
                 updated_at: str):
        """
        :param str account_id: The id of the account.
        :param Sequence['ContactGroupsGroupContactArgs'] contacts: Contact information in the contact group.
        :param str created_at: The create time.
        :param str description: The description of the contact group.
        :param str id: The id of the contact group.
        :param str name: Search for keywords in contact group names, supports fuzzy search.
        :param str updated_at: The update time.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "contacts", contacts)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The id of the account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def contacts(self) -> Sequence['outputs.ContactGroupsGroupContactResult']:
        """
        Contact information in the contact group.
        """
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the contact group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the contact group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Search for keywords in contact group names, supports fuzzy search.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ContactGroupsGroupContactResult(dict):
    def __init__(__self__, *,
                 email: str,
                 id: str,
                 name: str,
                 phone: str):
        """
        :param str email: The email of contact.
        :param str id: The id of the contact group.
        :param str name: Search for keywords in contact group names, supports fuzzy search.
        :param str phone: The phone of contact.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone", phone)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email of contact.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the contact group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Search for keywords in contact group names, supports fuzzy search.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        """
        The phone of contact.
        """
        return pulumi.get(self, "phone")


@pulumi.output_type
class ContactsContactResult(dict):
    def __init__(__self__, *,
                 email: str,
                 id: str,
                 name: str,
                 phone: str):
        """
        :param str email: The email of contact.
        :param str id: The ID of contact.
        :param str name: The name of contact.
        :param str phone: The phone of contact.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone", phone)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email of contact.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of contact.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of contact.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        """
        The phone of contact.
        """
        return pulumi.get(self, "phone")


@pulumi.output_type
class EventRuleEffectiveTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventRuleEffectiveTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventRuleEffectiveTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventRuleEffectiveTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: str,
                 start_time: str):
        """
        :param str end_time: End time for rule activation.
        :param str start_time: Start time for rule activation.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        End time for rule activation.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Start time for rule activation.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class EventRuleFilterPattern(dict):
    def __init__(__self__, *,
                 source: str,
                 types: Sequence[str]):
        """
        :param str source: Event source corresponding to pattern matching.
        :param Sequence[str] types: The list of corresponding event types in pattern matching, currently set to match any.
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Event source corresponding to pattern matching.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def types(self) -> Sequence[str]:
        """
        The list of corresponding event types in pattern matching, currently set to match any.
        """
        return pulumi.get(self, "types")


@pulumi.output_type
class EventRuleMessageQueue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventRuleMessageQueue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventRuleMessageQueue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventRuleMessageQueue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 region: str,
                 topic: str,
                 type: str,
                 vpc_id: str):
        """
        :param str instance_id: The kafka instance id.
        :param str region: The region.
        :param str topic: The topic name.
        :param str type: The message queue type, only support kafka now.
        :param str vpc_id: The vpc id.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The kafka instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def topic(self) -> str:
        """
        The topic name.
        """
        return pulumi.get(self, "topic")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The message queue type, only support kafka now.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The vpc id.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class EventRuleTlsTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"
        elif key == "projectName":
            suggest = "project_name"
        elif key == "regionNameCn":
            suggest = "region_name_cn"
        elif key == "regionNameEn":
            suggest = "region_name_en"
        elif key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventRuleTlsTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventRuleTlsTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventRuleTlsTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: str,
                 project_name: str,
                 region_name_cn: str,
                 region_name_en: str,
                 topic_id: str):
        """
        :param str project_id: The project id.
        :param str project_name: The project name.
        :param str region_name_cn: The Chinese region name.
        :param str region_name_en: The English region name.
        :param str topic_id: The topic id.
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region_name_cn", region_name_cn)
        pulumi.set(__self__, "region_name_en", region_name_en)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="regionNameCn")
    def region_name_cn(self) -> str:
        """
        The Chinese region name.
        """
        return pulumi.get(self, "region_name_cn")

    @property
    @pulumi.getter(name="regionNameEn")
    def region_name_en(self) -> str:
        """
        The English region name.
        """
        return pulumi.get(self, "region_name_en")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        The topic id.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class EventRulesRuleResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 contact_group_ids: Sequence[str],
                 contact_methods: Sequence[str],
                 created_at: int,
                 description: str,
                 effect_end_at: str,
                 effect_start_at: str,
                 endpoint: str,
                 event_bus_name: str,
                 event_source: str,
                 event_types: Sequence[str],
                 filter_patterns: Sequence['outputs.EventRulesRuleFilterPatternResult'],
                 id: str,
                 level: str,
                 message_queues: Sequence['outputs.EventRulesRuleMessageQueueResult'],
                 region: str,
                 rule_id: str,
                 rule_name: str,
                 status: str,
                 tls_targets: Sequence['outputs.EventRulesRuleTlsTargetResult'],
                 updated_at: int):
        """
        :param str account_id: The id of the account.
        :param Sequence[str] contact_group_ids: When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        :param Sequence[str] contact_methods: List of contact methods.
        :param int created_at: The create time.
        :param str description: The description of the rule.
        :param str effect_end_at: The end time of the rule.
        :param str effect_start_at: The start time of the rule.
        :param str endpoint: When the alarm notification method is alarm callback, it triggers the callback address.
        :param str event_bus_name: The name of the event bus.
        :param str event_source: The source of the event.
        :param Sequence[str] event_types: The event type.
        :param Sequence['EventRulesRuleFilterPatternArgs'] filter_patterns: Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        :param str id: The id of the rule.
        :param str level: The level of the rule.
        :param Sequence['EventRulesRuleMessageQueueArgs'] message_queues: The triggered message queue when the alarm notification method is Kafka message queue.
        :param str region: The name of the region.
        :param str rule_id: The id of the rule.
        :param str rule_name: Rule name, search rules by name using fuzzy search.
        :param str status: Enable the state of the rule.
        :param Sequence['EventRulesRuleTlsTargetArgs'] tls_targets: The alarm method for log service triggers the configuration of the log service.
        :param int updated_at: The updated time.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        pulumi.set(__self__, "contact_methods", contact_methods)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "effect_end_at", effect_end_at)
        pulumi.set(__self__, "effect_start_at", effect_start_at)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "event_bus_name", event_bus_name)
        pulumi.set(__self__, "event_source", event_source)
        pulumi.set(__self__, "event_types", event_types)
        pulumi.set(__self__, "filter_patterns", filter_patterns)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "message_queues", message_queues)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tls_targets", tls_targets)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The id of the account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Sequence[str]:
        """
        When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter(name="contactMethods")
    def contact_methods(self) -> Sequence[str]:
        """
        List of contact methods.
        """
        return pulumi.get(self, "contact_methods")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> int:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectEndAt")
    def effect_end_at(self) -> str:
        """
        The end time of the rule.
        """
        return pulumi.get(self, "effect_end_at")

    @property
    @pulumi.getter(name="effectStartAt")
    def effect_start_at(self) -> str:
        """
        The start time of the rule.
        """
        return pulumi.get(self, "effect_start_at")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        When the alarm notification method is alarm callback, it triggers the callback address.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="eventBusName")
    def event_bus_name(self) -> str:
        """
        The name of the event bus.
        """
        return pulumi.get(self, "event_bus_name")

    @property
    @pulumi.getter(name="eventSource")
    def event_source(self) -> str:
        """
        The source of the event.
        """
        return pulumi.get(self, "event_source")

    @property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> Sequence[str]:
        """
        The event type.
        """
        return pulumi.get(self, "event_types")

    @property
    @pulumi.getter(name="filterPatterns")
    def filter_patterns(self) -> Sequence['outputs.EventRulesRuleFilterPatternResult']:
        """
        Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        """
        return pulumi.get(self, "filter_patterns")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the rule.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="messageQueues")
    def message_queues(self) -> Sequence['outputs.EventRulesRuleMessageQueueResult']:
        """
        The triggered message queue when the alarm notification method is Kafka message queue.
        """
        return pulumi.get(self, "message_queues")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The name of the region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        """
        The id of the rule.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Rule name, search rules by name using fuzzy search.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable the state of the rule.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tlsTargets")
    def tls_targets(self) -> Sequence['outputs.EventRulesRuleTlsTargetResult']:
        """
        The alarm method for log service triggers the configuration of the log service.
        """
        return pulumi.get(self, "tls_targets")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> int:
        """
        The updated time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class EventRulesRuleFilterPatternResult(dict):
    def __init__(__self__, *,
                 source: str,
                 types: Sequence[str]):
        """
        :param str source: Event source.
        :param Sequence[str] types: The message queue type, only support kafka now.
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Event source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def types(self) -> Sequence[str]:
        """
        The message queue type, only support kafka now.
        """
        return pulumi.get(self, "types")


@pulumi.output_type
class EventRulesRuleMessageQueueResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 region: str,
                 topic: str,
                 type: str,
                 vpc_id: str):
        """
        :param str instance_id: The kafka instance id.
        :param str region: The name of the region.
        :param str topic: The topic name.
        :param str type: The message queue type, only support kafka now.
        :param str vpc_id: The vpc id.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The kafka instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The name of the region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def topic(self) -> str:
        """
        The topic name.
        """
        return pulumi.get(self, "topic")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The message queue type, only support kafka now.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The vpc id.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class EventRulesRuleTlsTargetResult(dict):
    def __init__(__self__, *,
                 project_id: str,
                 project_name: str,
                 region_name_cn: str,
                 region_name_en: str,
                 topic_id: str,
                 topic_name: str):
        """
        :param str project_id: The project id.
        :param str project_name: The project name.
        :param str region_name_cn: The Chinese region name.
        :param str region_name_en: The English region name.
        :param str topic_id: The topic id.
        :param str topic_name: The topic name.
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region_name_cn", region_name_cn)
        pulumi.set(__self__, "region_name_en", region_name_en)
        pulumi.set(__self__, "topic_id", topic_id)
        pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The project name.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="regionNameCn")
    def region_name_cn(self) -> str:
        """
        The Chinese region name.
        """
        return pulumi.get(self, "region_name_cn")

    @property
    @pulumi.getter(name="regionNameEn")
    def region_name_en(self) -> str:
        """
        The English region name.
        """
        return pulumi.get(self, "region_name_en")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        The topic id.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        """
        The topic name.
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class RuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonOperator":
            suggest = "comparison_operator"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "metricUnit":
            suggest = "metric_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison_operator: str,
                 metric_name: str,
                 metric_unit: str,
                 statistics: str,
                 threshold: str,
                 period: Optional[str] = None):
        """
        :param str comparison_operator: The comparison operation of the cloud monitor rule. Valid values: `>`, `>=`, `<`, `<=`, `!=`, `=`.
        :param str metric_name: The metric name of the cloud monitor rule.
        :param str metric_unit: The metric unit of the cloud monitor rule.
        :param str statistics: The statistics of the cloud monitor rule. Valid values: `avg`, `max`, `min`.
        :param str threshold: The threshold of the cloud monitor rule.
        """
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "metric_unit", metric_unit)
        pulumi.set(__self__, "statistics", statistics)
        pulumi.set(__self__, "threshold", threshold)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> str:
        """
        The comparison operation of the cloud monitor rule. Valid values: `>`, `>=`, `<`, `<=`, `!=`, `=`.
        """
        return pulumi.get(self, "comparison_operator")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        The metric name of the cloud monitor rule.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> str:
        """
        The metric unit of the cloud monitor rule.
        """
        return pulumi.get(self, "metric_unit")

    @property
    @pulumi.getter
    def statistics(self) -> str:
        """
        The statistics of the cloud monitor rule. Valid values: `avg`, `max`, `min`.
        """
        return pulumi.get(self, "statistics")

    @property
    @pulumi.getter
    def threshold(self) -> str:
        """
        The threshold of the cloud monitor rule.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def period(self) -> Optional[str]:
        return pulumi.get(self, "period")


@pulumi.output_type
class RuleOriginalDimension(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The key of the dimension.
        :param Sequence[str] values: The value of the dimension.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the dimension.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The value of the dimension.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleRecoveryNotify(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None):
        """
        :param bool enable: Whether to enable the recovery notify function.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Whether to enable the recovery notify function.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class RulesRuleResult(dict):
    def __init__(__self__, *,
                 alert_methods: Sequence[str],
                 alert_state: str,
                 condition_operator: str,
                 conditions: Sequence['outputs.RulesRuleConditionResult'],
                 contact_group_ids: Sequence[str],
                 created_at: str,
                 description: str,
                 effect_end_at: str,
                 effect_start_at: str,
                 enable_state: str,
                 evaluation_count: int,
                 id: str,
                 level: str,
                 multiple_conditions: bool,
                 namespace: str,
                 original_dimensions: Sequence['outputs.RulesRuleOriginalDimensionResult'],
                 regions: Sequence[str],
                 rule_name: str,
                 silence_time: int,
                 sub_namespace: str,
                 updated_at: str,
                 web_hook: str):
        """
        :param Sequence[str] alert_methods: The alert methods of the cloud monitor rule.
        :param str alert_state: The alert state of the cloud monitor rule. Valid values: `altering`, `normal`.
        :param str condition_operator: The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
        :param Sequence['RulesRuleConditionArgs'] conditions: The conditions of the cloud monitor rule.
        :param Sequence[str] contact_group_ids: The contact group ids of the cloud monitor rule.
        :param str created_at: The created time of the cloud monitor rule.
        :param str description: The description of the cloud monitor rule.
        :param str effect_end_at: The effect end time of the cloud monitor rule.
        :param str effect_start_at: The effect start time of the cloud monitor rule.
        :param str enable_state: The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
        :param int evaluation_count: The evaluation count of the cloud monitor rule.
        :param str id: The id of the cloud monitor rule.
        :param str level: The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
        :param bool multiple_conditions: Whether to enable the multiple conditions function of the cloud monitor rule.
        :param str namespace: The namespace of the cloud monitor rule.
        :param Sequence['RulesRuleOriginalDimensionArgs'] original_dimensions: The original dimensions of the cloud monitor rule.
        :param Sequence[str] regions: The region id of the cloud monitor rule.
        :param str rule_name: The name of the cloud monitor rule. This field support fuzzy query.
        :param int silence_time: The silence time of the cloud monitor rule. Unit in minutes.
        :param str sub_namespace: The sub namespace of the cloud monitor rule.
        :param str updated_at: The updated time of the cloud monitor rule.
        :param str web_hook: The web hook of the cloud monitor rule.
        """
        pulumi.set(__self__, "alert_methods", alert_methods)
        pulumi.set(__self__, "alert_state", alert_state)
        pulumi.set(__self__, "condition_operator", condition_operator)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "effect_end_at", effect_end_at)
        pulumi.set(__self__, "effect_start_at", effect_start_at)
        pulumi.set(__self__, "enable_state", enable_state)
        pulumi.set(__self__, "evaluation_count", evaluation_count)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "multiple_conditions", multiple_conditions)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "original_dimensions", original_dimensions)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "silence_time", silence_time)
        pulumi.set(__self__, "sub_namespace", sub_namespace)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "web_hook", web_hook)

    @property
    @pulumi.getter(name="alertMethods")
    def alert_methods(self) -> Sequence[str]:
        """
        The alert methods of the cloud monitor rule.
        """
        return pulumi.get(self, "alert_methods")

    @property
    @pulumi.getter(name="alertState")
    def alert_state(self) -> str:
        """
        The alert state of the cloud monitor rule. Valid values: `altering`, `normal`.
        """
        return pulumi.get(self, "alert_state")

    @property
    @pulumi.getter(name="conditionOperator")
    def condition_operator(self) -> str:
        """
        The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
        """
        return pulumi.get(self, "condition_operator")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.RulesRuleConditionResult']:
        """
        The conditions of the cloud monitor rule.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Sequence[str]:
        """
        The contact group ids of the cloud monitor rule.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The created time of the cloud monitor rule.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the cloud monitor rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectEndAt")
    def effect_end_at(self) -> str:
        """
        The effect end time of the cloud monitor rule.
        """
        return pulumi.get(self, "effect_end_at")

    @property
    @pulumi.getter(name="effectStartAt")
    def effect_start_at(self) -> str:
        """
        The effect start time of the cloud monitor rule.
        """
        return pulumi.get(self, "effect_start_at")

    @property
    @pulumi.getter(name="enableState")
    def enable_state(self) -> str:
        """
        The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enable_state")

    @property
    @pulumi.getter(name="evaluationCount")
    def evaluation_count(self) -> int:
        """
        The evaluation count of the cloud monitor rule.
        """
        return pulumi.get(self, "evaluation_count")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the cloud monitor rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="multipleConditions")
    def multiple_conditions(self) -> bool:
        """
        Whether to enable the multiple conditions function of the cloud monitor rule.
        """
        return pulumi.get(self, "multiple_conditions")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace of the cloud monitor rule.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="originalDimensions")
    def original_dimensions(self) -> Sequence['outputs.RulesRuleOriginalDimensionResult']:
        """
        The original dimensions of the cloud monitor rule.
        """
        return pulumi.get(self, "original_dimensions")

    @property
    @pulumi.getter
    def regions(self) -> Sequence[str]:
        """
        The region id of the cloud monitor rule.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        The name of the cloud monitor rule. This field support fuzzy query.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="silenceTime")
    def silence_time(self) -> int:
        """
        The silence time of the cloud monitor rule. Unit in minutes.
        """
        return pulumi.get(self, "silence_time")

    @property
    @pulumi.getter(name="subNamespace")
    def sub_namespace(self) -> str:
        """
        The sub namespace of the cloud monitor rule.
        """
        return pulumi.get(self, "sub_namespace")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The updated time of the cloud monitor rule.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> str:
        """
        The web hook of the cloud monitor rule.
        """
        return pulumi.get(self, "web_hook")


@pulumi.output_type
class RulesRuleConditionResult(dict):
    def __init__(__self__, *,
                 comparison_operator: str,
                 metric_name: str,
                 metric_unit: str,
                 period: str,
                 statistics: str,
                 threshold: str):
        """
        :param str comparison_operator: The comparison operation of the cloud monitor rule.
        :param str metric_name: The metric name of the cloud monitor rule.
        :param str metric_unit: The metric unit of the cloud monitor rule.
        :param str period: The period of the cloud monitor rule.
        :param str statistics: The statistics of the cloud monitor rule.
        :param str threshold: The threshold of the cloud monitor rule.
        """
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "metric_unit", metric_unit)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "statistics", statistics)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> str:
        """
        The comparison operation of the cloud monitor rule.
        """
        return pulumi.get(self, "comparison_operator")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        The metric name of the cloud monitor rule.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> str:
        """
        The metric unit of the cloud monitor rule.
        """
        return pulumi.get(self, "metric_unit")

    @property
    @pulumi.getter
    def period(self) -> str:
        """
        The period of the cloud monitor rule.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def statistics(self) -> str:
        """
        The statistics of the cloud monitor rule.
        """
        return pulumi.get(self, "statistics")

    @property
    @pulumi.getter
    def threshold(self) -> str:
        """
        The threshold of the cloud monitor rule.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class RulesRuleOriginalDimensionResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The key of the dimension.
        :param Sequence[str] values: The value of the dimension.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the dimension.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The value of the dimension.
        """
        return pulumi.get(self, "values")


