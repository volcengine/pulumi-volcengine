# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RuleArgs', 'Rule']

@pulumi.input_type
class RuleArgs:
    def __init__(__self__, *,
                 alert_methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 conditions: pulumi.Input[Sequence[pulumi.Input['RuleConditionArgs']]],
                 effect_end_at: pulumi.Input[str],
                 effect_start_at: pulumi.Input[str],
                 enable_state: pulumi.Input[str],
                 evaluation_count: pulumi.Input[int],
                 level: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 original_dimensions: pulumi.Input[Sequence[pulumi.Input['RuleOriginalDimensionArgs']]],
                 regions: pulumi.Input[str],
                 rule_name: pulumi.Input[str],
                 silence_time: pulumi.Input[int],
                 sub_namespace: pulumi.Input[str],
                 condition_operator: Optional[pulumi.Input[str]] = None,
                 contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 multiple_conditions: Optional[pulumi.Input[bool]] = None,
                 recovery_notify: Optional[pulumi.Input['RuleRecoveryNotifyArgs']] = None,
                 web_hook: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Rule resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alert_methods: The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
        :param pulumi.Input[Sequence[pulumi.Input['RuleConditionArgs']]] conditions: The conditions of the cloud monitor rule.
        :param pulumi.Input[str] effect_end_at: The effect end time of the cloud monitor rule. The expression is `HH:MM`.
        :param pulumi.Input[str] effect_start_at: The effect start time of the cloud monitor rule. The expression is `HH:MM`.
        :param pulumi.Input[str] enable_state: The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] evaluation_count: The evaluation count of the cloud monitor rule.
        :param pulumi.Input[str] level: The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
        :param pulumi.Input[str] namespace: The namespace of the cloud monitor rule.
        :param pulumi.Input[Sequence[pulumi.Input['RuleOriginalDimensionArgs']]] original_dimensions: The original dimensions of the cloud monitor rule.
        :param pulumi.Input[str] regions: The region ids of the cloud monitor rule. Only one region id can be specified currently.
        :param pulumi.Input[str] rule_name: The name of the cloud monitor rule.
        :param pulumi.Input[int] silence_time: The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
        :param pulumi.Input[str] sub_namespace: The sub namespace of the cloud monitor rule.
        :param pulumi.Input[str] condition_operator: The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
        :param pulumi.Input[str] description: The description of the cloud monitor rule.
        :param pulumi.Input[bool] multiple_conditions: Whether to enable the multiple conditions function of the cloud monitor rule.
        :param pulumi.Input['RuleRecoveryNotifyArgs'] recovery_notify: The recovery notify of the cloud monitor rule.
        :param pulumi.Input[str] web_hook: The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
        """
        pulumi.set(__self__, "alert_methods", alert_methods)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "effect_end_at", effect_end_at)
        pulumi.set(__self__, "effect_start_at", effect_start_at)
        pulumi.set(__self__, "enable_state", enable_state)
        pulumi.set(__self__, "evaluation_count", evaluation_count)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "original_dimensions", original_dimensions)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "silence_time", silence_time)
        pulumi.set(__self__, "sub_namespace", sub_namespace)
        if condition_operator is not None:
            pulumi.set(__self__, "condition_operator", condition_operator)
        if contact_group_ids is not None:
            pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple_conditions is not None:
            pulumi.set(__self__, "multiple_conditions", multiple_conditions)
        if recovery_notify is not None:
            pulumi.set(__self__, "recovery_notify", recovery_notify)
        if web_hook is not None:
            pulumi.set(__self__, "web_hook", web_hook)

    @property
    @pulumi.getter(name="alertMethods")
    def alert_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
        """
        return pulumi.get(self, "alert_methods")

    @alert_methods.setter
    def alert_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "alert_methods", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['RuleConditionArgs']]]:
        """
        The conditions of the cloud monitor rule.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['RuleConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="effectEndAt")
    def effect_end_at(self) -> pulumi.Input[str]:
        """
        The effect end time of the cloud monitor rule. The expression is `HH:MM`.
        """
        return pulumi.get(self, "effect_end_at")

    @effect_end_at.setter
    def effect_end_at(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect_end_at", value)

    @property
    @pulumi.getter(name="effectStartAt")
    def effect_start_at(self) -> pulumi.Input[str]:
        """
        The effect start time of the cloud monitor rule. The expression is `HH:MM`.
        """
        return pulumi.get(self, "effect_start_at")

    @effect_start_at.setter
    def effect_start_at(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect_start_at", value)

    @property
    @pulumi.getter(name="enableState")
    def enable_state(self) -> pulumi.Input[str]:
        """
        The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enable_state")

    @enable_state.setter
    def enable_state(self, value: pulumi.Input[str]):
        pulumi.set(self, "enable_state", value)

    @property
    @pulumi.getter(name="evaluationCount")
    def evaluation_count(self) -> pulumi.Input[int]:
        """
        The evaluation count of the cloud monitor rule.
        """
        return pulumi.get(self, "evaluation_count")

    @evaluation_count.setter
    def evaluation_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "evaluation_count", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        """
        The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The namespace of the cloud monitor rule.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="originalDimensions")
    def original_dimensions(self) -> pulumi.Input[Sequence[pulumi.Input['RuleOriginalDimensionArgs']]]:
        """
        The original dimensions of the cloud monitor rule.
        """
        return pulumi.get(self, "original_dimensions")

    @original_dimensions.setter
    def original_dimensions(self, value: pulumi.Input[Sequence[pulumi.Input['RuleOriginalDimensionArgs']]]):
        pulumi.set(self, "original_dimensions", value)

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Input[str]:
        """
        The region ids of the cloud monitor rule. Only one region id can be specified currently.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: pulumi.Input[str]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        The name of the cloud monitor rule.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="silenceTime")
    def silence_time(self) -> pulumi.Input[int]:
        """
        The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
        """
        return pulumi.get(self, "silence_time")

    @silence_time.setter
    def silence_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "silence_time", value)

    @property
    @pulumi.getter(name="subNamespace")
    def sub_namespace(self) -> pulumi.Input[str]:
        """
        The sub namespace of the cloud monitor rule.
        """
        return pulumi.get(self, "sub_namespace")

    @sub_namespace.setter
    def sub_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "sub_namespace", value)

    @property
    @pulumi.getter(name="conditionOperator")
    def condition_operator(self) -> Optional[pulumi.Input[str]]:
        """
        The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
        """
        return pulumi.get(self, "condition_operator")

    @condition_operator.setter
    def condition_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_operator", value)

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
        """
        return pulumi.get(self, "contact_group_ids")

    @contact_group_ids.setter
    def contact_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contact_group_ids", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the cloud monitor rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="multipleConditions")
    def multiple_conditions(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the multiple conditions function of the cloud monitor rule.
        """
        return pulumi.get(self, "multiple_conditions")

    @multiple_conditions.setter
    def multiple_conditions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple_conditions", value)

    @property
    @pulumi.getter(name="recoveryNotify")
    def recovery_notify(self) -> Optional[pulumi.Input['RuleRecoveryNotifyArgs']]:
        """
        The recovery notify of the cloud monitor rule.
        """
        return pulumi.get(self, "recovery_notify")

    @recovery_notify.setter
    def recovery_notify(self, value: Optional[pulumi.Input['RuleRecoveryNotifyArgs']]):
        pulumi.set(self, "recovery_notify", value)

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> Optional[pulumi.Input[str]]:
        """
        The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
        """
        return pulumi.get(self, "web_hook")

    @web_hook.setter
    def web_hook(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_hook", value)


@pulumi.input_type
class _RuleState:
    def __init__(__self__, *,
                 alert_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alert_state: Optional[pulumi.Input[str]] = None,
                 condition_operator: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleConditionArgs']]]] = None,
                 contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 effect_end_at: Optional[pulumi.Input[str]] = None,
                 effect_start_at: Optional[pulumi.Input[str]] = None,
                 enable_state: Optional[pulumi.Input[str]] = None,
                 evaluation_count: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 multiple_conditions: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 original_dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleOriginalDimensionArgs']]]] = None,
                 recovery_notify: Optional[pulumi.Input['RuleRecoveryNotifyArgs']] = None,
                 regions: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 silence_time: Optional[pulumi.Input[int]] = None,
                 sub_namespace: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 web_hook: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Rule resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alert_methods: The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
        :param pulumi.Input[str] alert_state: The alert state of the cloud monitor rule.
        :param pulumi.Input[str] condition_operator: The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
        :param pulumi.Input[Sequence[pulumi.Input['RuleConditionArgs']]] conditions: The conditions of the cloud monitor rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
        :param pulumi.Input[str] created_at: The created time of the cloud monitor rule.
        :param pulumi.Input[str] description: The description of the cloud monitor rule.
        :param pulumi.Input[str] effect_end_at: The effect end time of the cloud monitor rule. The expression is `HH:MM`.
        :param pulumi.Input[str] effect_start_at: The effect start time of the cloud monitor rule. The expression is `HH:MM`.
        :param pulumi.Input[str] enable_state: The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] evaluation_count: The evaluation count of the cloud monitor rule.
        :param pulumi.Input[str] level: The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
        :param pulumi.Input[bool] multiple_conditions: Whether to enable the multiple conditions function of the cloud monitor rule.
        :param pulumi.Input[str] namespace: The namespace of the cloud monitor rule.
        :param pulumi.Input[Sequence[pulumi.Input['RuleOriginalDimensionArgs']]] original_dimensions: The original dimensions of the cloud monitor rule.
        :param pulumi.Input['RuleRecoveryNotifyArgs'] recovery_notify: The recovery notify of the cloud monitor rule.
        :param pulumi.Input[str] regions: The region ids of the cloud monitor rule. Only one region id can be specified currently.
        :param pulumi.Input[str] rule_name: The name of the cloud monitor rule.
        :param pulumi.Input[int] silence_time: The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
        :param pulumi.Input[str] sub_namespace: The sub namespace of the cloud monitor rule.
        :param pulumi.Input[str] updated_at: The updated time of the cloud monitor rule.
        :param pulumi.Input[str] web_hook: The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
        """
        if alert_methods is not None:
            pulumi.set(__self__, "alert_methods", alert_methods)
        if alert_state is not None:
            pulumi.set(__self__, "alert_state", alert_state)
        if condition_operator is not None:
            pulumi.set(__self__, "condition_operator", condition_operator)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if contact_group_ids is not None:
            pulumi.set(__self__, "contact_group_ids", contact_group_ids)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if effect_end_at is not None:
            pulumi.set(__self__, "effect_end_at", effect_end_at)
        if effect_start_at is not None:
            pulumi.set(__self__, "effect_start_at", effect_start_at)
        if enable_state is not None:
            pulumi.set(__self__, "enable_state", enable_state)
        if evaluation_count is not None:
            pulumi.set(__self__, "evaluation_count", evaluation_count)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if multiple_conditions is not None:
            pulumi.set(__self__, "multiple_conditions", multiple_conditions)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if original_dimensions is not None:
            pulumi.set(__self__, "original_dimensions", original_dimensions)
        if recovery_notify is not None:
            pulumi.set(__self__, "recovery_notify", recovery_notify)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if silence_time is not None:
            pulumi.set(__self__, "silence_time", silence_time)
        if sub_namespace is not None:
            pulumi.set(__self__, "sub_namespace", sub_namespace)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if web_hook is not None:
            pulumi.set(__self__, "web_hook", web_hook)

    @property
    @pulumi.getter(name="alertMethods")
    def alert_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
        """
        return pulumi.get(self, "alert_methods")

    @alert_methods.setter
    def alert_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alert_methods", value)

    @property
    @pulumi.getter(name="alertState")
    def alert_state(self) -> Optional[pulumi.Input[str]]:
        """
        The alert state of the cloud monitor rule.
        """
        return pulumi.get(self, "alert_state")

    @alert_state.setter
    def alert_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_state", value)

    @property
    @pulumi.getter(name="conditionOperator")
    def condition_operator(self) -> Optional[pulumi.Input[str]]:
        """
        The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
        """
        return pulumi.get(self, "condition_operator")

    @condition_operator.setter
    def condition_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_operator", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleConditionArgs']]]]:
        """
        The conditions of the cloud monitor rule.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
        """
        return pulumi.get(self, "contact_group_ids")

    @contact_group_ids.setter
    def contact_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contact_group_ids", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The created time of the cloud monitor rule.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the cloud monitor rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="effectEndAt")
    def effect_end_at(self) -> Optional[pulumi.Input[str]]:
        """
        The effect end time of the cloud monitor rule. The expression is `HH:MM`.
        """
        return pulumi.get(self, "effect_end_at")

    @effect_end_at.setter
    def effect_end_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect_end_at", value)

    @property
    @pulumi.getter(name="effectStartAt")
    def effect_start_at(self) -> Optional[pulumi.Input[str]]:
        """
        The effect start time of the cloud monitor rule. The expression is `HH:MM`.
        """
        return pulumi.get(self, "effect_start_at")

    @effect_start_at.setter
    def effect_start_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect_start_at", value)

    @property
    @pulumi.getter(name="enableState")
    def enable_state(self) -> Optional[pulumi.Input[str]]:
        """
        The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enable_state")

    @enable_state.setter
    def enable_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_state", value)

    @property
    @pulumi.getter(name="evaluationCount")
    def evaluation_count(self) -> Optional[pulumi.Input[int]]:
        """
        The evaluation count of the cloud monitor rule.
        """
        return pulumi.get(self, "evaluation_count")

    @evaluation_count.setter
    def evaluation_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evaluation_count", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter(name="multipleConditions")
    def multiple_conditions(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the multiple conditions function of the cloud monitor rule.
        """
        return pulumi.get(self, "multiple_conditions")

    @multiple_conditions.setter
    def multiple_conditions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple_conditions", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace of the cloud monitor rule.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="originalDimensions")
    def original_dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleOriginalDimensionArgs']]]]:
        """
        The original dimensions of the cloud monitor rule.
        """
        return pulumi.get(self, "original_dimensions")

    @original_dimensions.setter
    def original_dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleOriginalDimensionArgs']]]]):
        pulumi.set(self, "original_dimensions", value)

    @property
    @pulumi.getter(name="recoveryNotify")
    def recovery_notify(self) -> Optional[pulumi.Input['RuleRecoveryNotifyArgs']]:
        """
        The recovery notify of the cloud monitor rule.
        """
        return pulumi.get(self, "recovery_notify")

    @recovery_notify.setter
    def recovery_notify(self, value: Optional[pulumi.Input['RuleRecoveryNotifyArgs']]):
        pulumi.set(self, "recovery_notify", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[str]]:
        """
        The region ids of the cloud monitor rule. Only one region id can be specified currently.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cloud monitor rule.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="silenceTime")
    def silence_time(self) -> Optional[pulumi.Input[int]]:
        """
        The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
        """
        return pulumi.get(self, "silence_time")

    @silence_time.setter
    def silence_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "silence_time", value)

    @property
    @pulumi.getter(name="subNamespace")
    def sub_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The sub namespace of the cloud monitor rule.
        """
        return pulumi.get(self, "sub_namespace")

    @sub_namespace.setter
    def sub_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_namespace", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The updated time of the cloud monitor rule.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> Optional[pulumi.Input[str]]:
        """
        The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
        """
        return pulumi.get(self, "web_hook")

    @web_hook.setter
    def web_hook(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_hook", value)


class Rule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition_operator: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RuleConditionArgs']]]]] = None,
                 contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 effect_end_at: Optional[pulumi.Input[str]] = None,
                 effect_start_at: Optional[pulumi.Input[str]] = None,
                 enable_state: Optional[pulumi.Input[str]] = None,
                 evaluation_count: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 multiple_conditions: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 original_dimensions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RuleOriginalDimensionArgs']]]]] = None,
                 recovery_notify: Optional[pulumi.Input[pulumi.InputType['RuleRecoveryNotifyArgs']]] = None,
                 regions: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 silence_time: Optional[pulumi.Input[int]] = None,
                 sub_namespace: Optional[pulumi.Input[str]] = None,
                 web_hook: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage cloud monitor rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cloud_monitor.Rule("foo",
            alert_methods=[
                "Email",
                "Webhook",
            ],
            condition_operator="||",
            conditions=[
                volcengine.cloud_monitor.RuleConditionArgs(
                    comparison_operator=">",
                    metric_name="DiskUsageAvail",
                    metric_unit="Megabytes",
                    statistics="avg",
                    threshold="100",
                ),
                volcengine.cloud_monitor.RuleConditionArgs(
                    comparison_operator=">",
                    metric_name="DiskUsageUtilization",
                    metric_unit="Percent",
                    statistics="avg",
                    threshold="90",
                ),
            ],
            contact_group_ids=["174284616403161****"],
            description="acc-test",
            effect_end_at="22:55",
            effect_start_at="00:15",
            enable_state="disable",
            evaluation_count=5,
            level="warning",
            multiple_conditions=True,
            namespace="VCM_ECS",
            original_dimensions=[
                volcengine.cloud_monitor.RuleOriginalDimensionArgs(
                    key="ResourceID",
                    values=["*"],
                ),
                volcengine.cloud_monitor.RuleOriginalDimensionArgs(
                    key="DiskName",
                    values=[
                        "vda",
                        "vda1",
                    ],
                ),
            ],
            recovery_notify=volcengine.cloud_monitor.RuleRecoveryNotifyArgs(
                enable=True,
            ),
            regions="cn-beijing",
            rule_name="acc-test-rule",
            silence_time=5,
            sub_namespace="Storage",
            web_hook="http://alert.volc.com/callback")
        ```

        ## Import

        CloudMonitorRule can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_monitor/rule:Rule default 174284623567451****
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alert_methods: The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
        :param pulumi.Input[str] condition_operator: The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RuleConditionArgs']]]] conditions: The conditions of the cloud monitor rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
        :param pulumi.Input[str] description: The description of the cloud monitor rule.
        :param pulumi.Input[str] effect_end_at: The effect end time of the cloud monitor rule. The expression is `HH:MM`.
        :param pulumi.Input[str] effect_start_at: The effect start time of the cloud monitor rule. The expression is `HH:MM`.
        :param pulumi.Input[str] enable_state: The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] evaluation_count: The evaluation count of the cloud monitor rule.
        :param pulumi.Input[str] level: The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
        :param pulumi.Input[bool] multiple_conditions: Whether to enable the multiple conditions function of the cloud monitor rule.
        :param pulumi.Input[str] namespace: The namespace of the cloud monitor rule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RuleOriginalDimensionArgs']]]] original_dimensions: The original dimensions of the cloud monitor rule.
        :param pulumi.Input[pulumi.InputType['RuleRecoveryNotifyArgs']] recovery_notify: The recovery notify of the cloud monitor rule.
        :param pulumi.Input[str] regions: The region ids of the cloud monitor rule. Only one region id can be specified currently.
        :param pulumi.Input[str] rule_name: The name of the cloud monitor rule.
        :param pulumi.Input[int] silence_time: The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
        :param pulumi.Input[str] sub_namespace: The sub namespace of the cloud monitor rule.
        :param pulumi.Input[str] web_hook: The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cloud monitor rule
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cloud_monitor.Rule("foo",
            alert_methods=[
                "Email",
                "Webhook",
            ],
            condition_operator="||",
            conditions=[
                volcengine.cloud_monitor.RuleConditionArgs(
                    comparison_operator=">",
                    metric_name="DiskUsageAvail",
                    metric_unit="Megabytes",
                    statistics="avg",
                    threshold="100",
                ),
                volcengine.cloud_monitor.RuleConditionArgs(
                    comparison_operator=">",
                    metric_name="DiskUsageUtilization",
                    metric_unit="Percent",
                    statistics="avg",
                    threshold="90",
                ),
            ],
            contact_group_ids=["174284616403161****"],
            description="acc-test",
            effect_end_at="22:55",
            effect_start_at="00:15",
            enable_state="disable",
            evaluation_count=5,
            level="warning",
            multiple_conditions=True,
            namespace="VCM_ECS",
            original_dimensions=[
                volcengine.cloud_monitor.RuleOriginalDimensionArgs(
                    key="ResourceID",
                    values=["*"],
                ),
                volcengine.cloud_monitor.RuleOriginalDimensionArgs(
                    key="DiskName",
                    values=[
                        "vda",
                        "vda1",
                    ],
                ),
            ],
            recovery_notify=volcengine.cloud_monitor.RuleRecoveryNotifyArgs(
                enable=True,
            ),
            regions="cn-beijing",
            rule_name="acc-test-rule",
            silence_time=5,
            sub_namespace="Storage",
            web_hook="http://alert.volc.com/callback")
        ```

        ## Import

        CloudMonitorRule can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:cloud_monitor/rule:Rule default 174284623567451****
        ```

        :param str resource_name: The name of the resource.
        :param RuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition_operator: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RuleConditionArgs']]]]] = None,
                 contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 effect_end_at: Optional[pulumi.Input[str]] = None,
                 effect_start_at: Optional[pulumi.Input[str]] = None,
                 enable_state: Optional[pulumi.Input[str]] = None,
                 evaluation_count: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 multiple_conditions: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 original_dimensions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RuleOriginalDimensionArgs']]]]] = None,
                 recovery_notify: Optional[pulumi.Input[pulumi.InputType['RuleRecoveryNotifyArgs']]] = None,
                 regions: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 silence_time: Optional[pulumi.Input[int]] = None,
                 sub_namespace: Optional[pulumi.Input[str]] = None,
                 web_hook: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuleArgs.__new__(RuleArgs)

            if alert_methods is None and not opts.urn:
                raise TypeError("Missing required property 'alert_methods'")
            __props__.__dict__["alert_methods"] = alert_methods
            __props__.__dict__["condition_operator"] = condition_operator
            if conditions is None and not opts.urn:
                raise TypeError("Missing required property 'conditions'")
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["contact_group_ids"] = contact_group_ids
            __props__.__dict__["description"] = description
            if effect_end_at is None and not opts.urn:
                raise TypeError("Missing required property 'effect_end_at'")
            __props__.__dict__["effect_end_at"] = effect_end_at
            if effect_start_at is None and not opts.urn:
                raise TypeError("Missing required property 'effect_start_at'")
            __props__.__dict__["effect_start_at"] = effect_start_at
            if enable_state is None and not opts.urn:
                raise TypeError("Missing required property 'enable_state'")
            __props__.__dict__["enable_state"] = enable_state
            if evaluation_count is None and not opts.urn:
                raise TypeError("Missing required property 'evaluation_count'")
            __props__.__dict__["evaluation_count"] = evaluation_count
            if level is None and not opts.urn:
                raise TypeError("Missing required property 'level'")
            __props__.__dict__["level"] = level
            __props__.__dict__["multiple_conditions"] = multiple_conditions
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            if original_dimensions is None and not opts.urn:
                raise TypeError("Missing required property 'original_dimensions'")
            __props__.__dict__["original_dimensions"] = original_dimensions
            __props__.__dict__["recovery_notify"] = recovery_notify
            if regions is None and not opts.urn:
                raise TypeError("Missing required property 'regions'")
            __props__.__dict__["regions"] = regions
            if rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_name'")
            __props__.__dict__["rule_name"] = rule_name
            if silence_time is None and not opts.urn:
                raise TypeError("Missing required property 'silence_time'")
            __props__.__dict__["silence_time"] = silence_time
            if sub_namespace is None and not opts.urn:
                raise TypeError("Missing required property 'sub_namespace'")
            __props__.__dict__["sub_namespace"] = sub_namespace
            __props__.__dict__["web_hook"] = web_hook
            __props__.__dict__["alert_state"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(Rule, __self__).__init__(
            'volcengine:cloud_monitor/rule:Rule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            alert_state: Optional[pulumi.Input[str]] = None,
            condition_operator: Optional[pulumi.Input[str]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RuleConditionArgs']]]]] = None,
            contact_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            effect_end_at: Optional[pulumi.Input[str]] = None,
            effect_start_at: Optional[pulumi.Input[str]] = None,
            enable_state: Optional[pulumi.Input[str]] = None,
            evaluation_count: Optional[pulumi.Input[int]] = None,
            level: Optional[pulumi.Input[str]] = None,
            multiple_conditions: Optional[pulumi.Input[bool]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            original_dimensions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RuleOriginalDimensionArgs']]]]] = None,
            recovery_notify: Optional[pulumi.Input[pulumi.InputType['RuleRecoveryNotifyArgs']]] = None,
            regions: Optional[pulumi.Input[str]] = None,
            rule_name: Optional[pulumi.Input[str]] = None,
            silence_time: Optional[pulumi.Input[int]] = None,
            sub_namespace: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            web_hook: Optional[pulumi.Input[str]] = None) -> 'Rule':
        """
        Get an existing Rule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alert_methods: The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
        :param pulumi.Input[str] alert_state: The alert state of the cloud monitor rule.
        :param pulumi.Input[str] condition_operator: The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RuleConditionArgs']]]] conditions: The conditions of the cloud monitor rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contact_group_ids: The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
        :param pulumi.Input[str] created_at: The created time of the cloud monitor rule.
        :param pulumi.Input[str] description: The description of the cloud monitor rule.
        :param pulumi.Input[str] effect_end_at: The effect end time of the cloud monitor rule. The expression is `HH:MM`.
        :param pulumi.Input[str] effect_start_at: The effect start time of the cloud monitor rule. The expression is `HH:MM`.
        :param pulumi.Input[str] enable_state: The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] evaluation_count: The evaluation count of the cloud monitor rule.
        :param pulumi.Input[str] level: The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
        :param pulumi.Input[bool] multiple_conditions: Whether to enable the multiple conditions function of the cloud monitor rule.
        :param pulumi.Input[str] namespace: The namespace of the cloud monitor rule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RuleOriginalDimensionArgs']]]] original_dimensions: The original dimensions of the cloud monitor rule.
        :param pulumi.Input[pulumi.InputType['RuleRecoveryNotifyArgs']] recovery_notify: The recovery notify of the cloud monitor rule.
        :param pulumi.Input[str] regions: The region ids of the cloud monitor rule. Only one region id can be specified currently.
        :param pulumi.Input[str] rule_name: The name of the cloud monitor rule.
        :param pulumi.Input[int] silence_time: The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
        :param pulumi.Input[str] sub_namespace: The sub namespace of the cloud monitor rule.
        :param pulumi.Input[str] updated_at: The updated time of the cloud monitor rule.
        :param pulumi.Input[str] web_hook: The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RuleState.__new__(_RuleState)

        __props__.__dict__["alert_methods"] = alert_methods
        __props__.__dict__["alert_state"] = alert_state
        __props__.__dict__["condition_operator"] = condition_operator
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["contact_group_ids"] = contact_group_ids
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["effect_end_at"] = effect_end_at
        __props__.__dict__["effect_start_at"] = effect_start_at
        __props__.__dict__["enable_state"] = enable_state
        __props__.__dict__["evaluation_count"] = evaluation_count
        __props__.__dict__["level"] = level
        __props__.__dict__["multiple_conditions"] = multiple_conditions
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["original_dimensions"] = original_dimensions
        __props__.__dict__["recovery_notify"] = recovery_notify
        __props__.__dict__["regions"] = regions
        __props__.__dict__["rule_name"] = rule_name
        __props__.__dict__["silence_time"] = silence_time
        __props__.__dict__["sub_namespace"] = sub_namespace
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["web_hook"] = web_hook
        return Rule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertMethods")
    def alert_methods(self) -> pulumi.Output[Sequence[str]]:
        """
        The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
        """
        return pulumi.get(self, "alert_methods")

    @property
    @pulumi.getter(name="alertState")
    def alert_state(self) -> pulumi.Output[str]:
        """
        The alert state of the cloud monitor rule.
        """
        return pulumi.get(self, "alert_state")

    @property
    @pulumi.getter(name="conditionOperator")
    def condition_operator(self) -> pulumi.Output[str]:
        """
        The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
        """
        return pulumi.get(self, "condition_operator")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.RuleCondition']]:
        """
        The conditions of the cloud monitor rule.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="contactGroupIds")
    def contact_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
        """
        return pulumi.get(self, "contact_group_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The created time of the cloud monitor rule.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the cloud monitor rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectEndAt")
    def effect_end_at(self) -> pulumi.Output[str]:
        """
        The effect end time of the cloud monitor rule. The expression is `HH:MM`.
        """
        return pulumi.get(self, "effect_end_at")

    @property
    @pulumi.getter(name="effectStartAt")
    def effect_start_at(self) -> pulumi.Output[str]:
        """
        The effect start time of the cloud monitor rule. The expression is `HH:MM`.
        """
        return pulumi.get(self, "effect_start_at")

    @property
    @pulumi.getter(name="enableState")
    def enable_state(self) -> pulumi.Output[str]:
        """
        The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enable_state")

    @property
    @pulumi.getter(name="evaluationCount")
    def evaluation_count(self) -> pulumi.Output[int]:
        """
        The evaluation count of the cloud monitor rule.
        """
        return pulumi.get(self, "evaluation_count")

    @property
    @pulumi.getter
    def level(self) -> pulumi.Output[str]:
        """
        The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="multipleConditions")
    def multiple_conditions(self) -> pulumi.Output[bool]:
        """
        Whether to enable the multiple conditions function of the cloud monitor rule.
        """
        return pulumi.get(self, "multiple_conditions")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        The namespace of the cloud monitor rule.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="originalDimensions")
    def original_dimensions(self) -> pulumi.Output[Sequence['outputs.RuleOriginalDimension']]:
        """
        The original dimensions of the cloud monitor rule.
        """
        return pulumi.get(self, "original_dimensions")

    @property
    @pulumi.getter(name="recoveryNotify")
    def recovery_notify(self) -> pulumi.Output['outputs.RuleRecoveryNotify']:
        """
        The recovery notify of the cloud monitor rule.
        """
        return pulumi.get(self, "recovery_notify")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[str]:
        """
        The region ids of the cloud monitor rule. Only one region id can be specified currently.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[str]:
        """
        The name of the cloud monitor rule.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="silenceTime")
    def silence_time(self) -> pulumi.Output[int]:
        """
        The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
        """
        return pulumi.get(self, "silence_time")

    @property
    @pulumi.getter(name="subNamespace")
    def sub_namespace(self) -> pulumi.Output[str]:
        """
        The sub namespace of the cloud monitor rule.
        """
        return pulumi.get(self, "sub_namespace")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The updated time of the cloud monitor rule.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> pulumi.Output[Optional[str]]:
        """
        The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
        """
        return pulumi.get(self, "web_hook")

