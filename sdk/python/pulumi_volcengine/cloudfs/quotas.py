# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'QuotasResult',
    'AwaitableQuotasResult',
    'quotas',
    'quotas_output',
]

@pulumi.output_type
class QuotasResult:
    """
    A collection of values returned by Quotas.
    """
    def __init__(__self__, id=None, output_file=None, quotas=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if quotas and not isinstance(quotas, list):
            raise TypeError("Expected argument 'quotas' to be a list")
        pulumi.set(__self__, "quotas", quotas)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def quotas(self) -> Sequence['outputs.QuotasQuotaResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "quotas")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of cloud fs quota query.
        """
        return pulumi.get(self, "total_count")


class AwaitableQuotasResult(QuotasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return QuotasResult(
            id=self.id,
            output_file=self.output_file,
            quotas=self.quotas,
            total_count=self.total_count)


def quotas(output_file: Optional[str] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableQuotasResult:
    """
    Use this data source to query detailed information of cloudfs quotas
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.cloudfs.quotas()
    ```


    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cloudfs/quotas:Quotas', __args__, opts=opts, typ=QuotasResult).value

    return AwaitableQuotasResult(
        id=pulumi.get(__ret__, 'id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        quotas=pulumi.get(__ret__, 'quotas'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(quotas)
def quotas_output(output_file: Optional[pulumi.Input[Optional[str]]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[QuotasResult]:
    """
    Use this data source to query detailed information of cloudfs quotas
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.cloudfs.quotas()
    ```


    :param str output_file: File name where to save data source results.
    """
    ...
