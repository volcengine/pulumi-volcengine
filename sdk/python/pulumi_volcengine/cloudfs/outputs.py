# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccessesAccessResult',
    'FileSystemsFileSystemResult',
    'NamespacesNamespaceResult',
    'NsQuotasQuotaResult',
    'QuotasQuotaResult',
]

@pulumi.output_type
class AccessesAccessResult(dict):
    def __init__(__self__, *,
                 access_account_id: int,
                 access_id: str,
                 access_service_name: str,
                 created_time: str,
                 fs_name: str,
                 is_default: bool,
                 security_group_id: str,
                 status: str,
                 subnet_id: str,
                 vpc_id: str,
                 vpc_route_enabled: bool):
        """
        :param int access_account_id: The account id of access.
        :param str access_id: The id of access.
        :param str access_service_name: The service name of access.
        :param str created_time: The creation time.
        :param str fs_name: The name of file system.
        :param bool is_default: Whether is default access.
        :param str security_group_id: The id of security group.
        :param str status: The status of access.
        :param str subnet_id: The id of subnet.
        :param str vpc_id: The id of vpc.
        :param bool vpc_route_enabled: Whether to enable all vpc route.
        """
        pulumi.set(__self__, "access_account_id", access_account_id)
        pulumi.set(__self__, "access_id", access_id)
        pulumi.set(__self__, "access_service_name", access_service_name)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "fs_name", fs_name)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_route_enabled", vpc_route_enabled)

    @property
    @pulumi.getter(name="accessAccountId")
    def access_account_id(self) -> int:
        """
        The account id of access.
        """
        return pulumi.get(self, "access_account_id")

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> str:
        """
        The id of access.
        """
        return pulumi.get(self, "access_id")

    @property
    @pulumi.getter(name="accessServiceName")
    def access_service_name(self) -> str:
        """
        The service name of access.
        """
        return pulumi.get(self, "access_service_name")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="fsName")
    def fs_name(self) -> str:
        """
        The name of file system.
        """
        return pulumi.get(self, "fs_name")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Whether is default access.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        The id of security group.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of access.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The id of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The id of vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcRouteEnabled")
    def vpc_route_enabled(self) -> bool:
        """
        Whether to enable all vpc route.
        """
        return pulumi.get(self, "vpc_route_enabled")


@pulumi.output_type
class FileSystemsFileSystemResult(dict):
    def __init__(__self__, *,
                 cache_capacity_tib: int,
                 cache_plan: str,
                 created_time: str,
                 id: str,
                 mode: str,
                 mount_point: str,
                 name: str,
                 region_id: str,
                 security_group_id: str,
                 status: str,
                 subnet_id: str,
                 tos_bucket: str,
                 tos_prefix: str,
                 vpc_id: str,
                 zone_id: str):
        """
        :param int cache_capacity_tib: The capacity of cache.
        :param str cache_plan: The plan of cache.
        :param str created_time: The creation time.
        :param str id: The ID of file system.
        :param str mode: The mode of file system.
        :param str mount_point: The point mount.
        :param str name: The name of file system.
        :param str region_id: The id of region.
        :param str security_group_id: The id of security group.
        :param str status: The status of file system.
        :param str subnet_id: The id of subnet.
        :param str tos_bucket: The tos bucket.
        :param str tos_prefix: The tos prefix.
        :param str vpc_id: The id of vpc.
        :param str zone_id: The id of zone.
        """
        pulumi.set(__self__, "cache_capacity_tib", cache_capacity_tib)
        pulumi.set(__self__, "cache_plan", cache_plan)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "mount_point", mount_point)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tos_bucket", tos_bucket)
        pulumi.set(__self__, "tos_prefix", tos_prefix)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="cacheCapacityTib")
    def cache_capacity_tib(self) -> int:
        """
        The capacity of cache.
        """
        return pulumi.get(self, "cache_capacity_tib")

    @property
    @pulumi.getter(name="cachePlan")
    def cache_plan(self) -> str:
        """
        The plan of cache.
        """
        return pulumi.get(self, "cache_plan")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        The creation time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of file system.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        The mode of file system.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> str:
        """
        The point mount.
        """
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of file system.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The id of region.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        The id of security group.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of file system.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The id of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tosBucket")
    def tos_bucket(self) -> str:
        """
        The tos bucket.
        """
        return pulumi.get(self, "tos_bucket")

    @property
    @pulumi.getter(name="tosPrefix")
    def tos_prefix(self) -> str:
        """
        The tos prefix.
        """
        return pulumi.get(self, "tos_prefix")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The id of vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The id of zone.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class NamespacesNamespaceResult(dict):
    def __init__(__self__, *,
                 created_time: str,
                 id: str,
                 is_my_bucket: bool,
                 read_only: bool,
                 service_managed: bool,
                 status: str,
                 tos_bucket: str,
                 tos_prefix: str):
        """
        :param str created_time: The creation time of the namespace.
        :param str id: The ID of the namespace.
        :param bool is_my_bucket: Whether the tos bucket is your own bucket.
        :param bool read_only: Whether the namespace is read-only.
        :param bool service_managed: Whether the namespace is the official service for volcengine.
        :param str status: The status of the namespace.
        :param str tos_bucket: The name of tos bucket.
        :param str tos_prefix: The tos prefix.
        """
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_my_bucket", is_my_bucket)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "service_managed", service_managed)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tos_bucket", tos_bucket)
        pulumi.set(__self__, "tos_prefix", tos_prefix)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        The creation time of the namespace.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the namespace.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMyBucket")
    def is_my_bucket(self) -> bool:
        """
        Whether the tos bucket is your own bucket.
        """
        return pulumi.get(self, "is_my_bucket")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Whether the namespace is read-only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="serviceManaged")
    def service_managed(self) -> bool:
        """
        Whether the namespace is the official service for volcengine.
        """
        return pulumi.get(self, "service_managed")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the namespace.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tosBucket")
    def tos_bucket(self) -> str:
        """
        The name of tos bucket.
        """
        return pulumi.get(self, "tos_bucket")

    @property
    @pulumi.getter(name="tosPrefix")
    def tos_prefix(self) -> str:
        """
        The tos prefix.
        """
        return pulumi.get(self, "tos_prefix")


@pulumi.output_type
class NsQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 account_id: int,
                 fs_name: str,
                 ns_count: int,
                 ns_count_per_fs: int,
                 ns_quota: int,
                 ns_quota_per_fs: int,
                 quota_enough: bool):
        """
        :param int account_id: The ID of account.
        :param str fs_name: The name of fs.
        :param int ns_count: The count of cloud fs namespace.
        :param int ns_count_per_fs: This file stores the number of namespaces under the instance.
        :param int ns_quota: The quota of cloud fs namespace.
        :param int ns_quota_per_fs: This file stores the total namespace quota under the instance.
        :param bool quota_enough: Whether is enough of cloud fs namespace.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "fs_name", fs_name)
        pulumi.set(__self__, "ns_count", ns_count)
        pulumi.set(__self__, "ns_count_per_fs", ns_count_per_fs)
        pulumi.set(__self__, "ns_quota", ns_quota)
        pulumi.set(__self__, "ns_quota_per_fs", ns_quota_per_fs)
        pulumi.set(__self__, "quota_enough", quota_enough)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> int:
        """
        The ID of account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="fsName")
    def fs_name(self) -> str:
        """
        The name of fs.
        """
        return pulumi.get(self, "fs_name")

    @property
    @pulumi.getter(name="nsCount")
    def ns_count(self) -> int:
        """
        The count of cloud fs namespace.
        """
        return pulumi.get(self, "ns_count")

    @property
    @pulumi.getter(name="nsCountPerFs")
    def ns_count_per_fs(self) -> int:
        """
        This file stores the number of namespaces under the instance.
        """
        return pulumi.get(self, "ns_count_per_fs")

    @property
    @pulumi.getter(name="nsQuota")
    def ns_quota(self) -> int:
        """
        The quota of cloud fs namespace.
        """
        return pulumi.get(self, "ns_quota")

    @property
    @pulumi.getter(name="nsQuotaPerFs")
    def ns_quota_per_fs(self) -> int:
        """
        This file stores the total namespace quota under the instance.
        """
        return pulumi.get(self, "ns_quota_per_fs")

    @property
    @pulumi.getter(name="quotaEnough")
    def quota_enough(self) -> bool:
        """
        Whether is enough of cloud fs namespace.
        """
        return pulumi.get(self, "quota_enough")


@pulumi.output_type
class QuotasQuotaResult(dict):
    def __init__(__self__, *,
                 account_id: int,
                 fs_count: int,
                 fs_quota: int,
                 quota_enough: bool):
        """
        :param int account_id: The ID of account.
        :param int fs_count: The count of cloud fs.
        :param int fs_quota: The quota of cloud fs.
        :param bool quota_enough: Whether is enough of cloud fs.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "fs_count", fs_count)
        pulumi.set(__self__, "fs_quota", fs_quota)
        pulumi.set(__self__, "quota_enough", quota_enough)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> int:
        """
        The ID of account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="fsCount")
    def fs_count(self) -> int:
        """
        The count of cloud fs.
        """
        return pulumi.get(self, "fs_count")

    @property
    @pulumi.getter(name="fsQuota")
    def fs_quota(self) -> int:
        """
        The quota of cloud fs.
        """
        return pulumi.get(self, "fs_quota")

    @property
    @pulumi.getter(name="quotaEnough")
    def quota_enough(self) -> bool:
        """
        Whether is enough of cloud fs.
        """
        return pulumi.get(self, "quota_enough")


