# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ReleaseArgs', 'Release']

@pulumi.input_type
class ReleaseArgs:
    def __init__(__self__, *,
                 function_id: pulumi.Input[str],
                 revision_number: pulumi.Input[int],
                 description: Optional[pulumi.Input[str]] = None,
                 max_instance: Optional[pulumi.Input[int]] = None,
                 rolling_step: Optional[pulumi.Input[str]] = None,
                 target_traffic_weight: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Release resource.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input[int] revision_number: When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] description: The description of released this time.
        :param pulumi.Input[int] max_instance: Upper limit of the number of function instances.
        :param pulumi.Input[str] rolling_step: Percentage of grayscale step size.
        :param pulumi.Input[int] target_traffic_weight: Target percentage of published traffic.
        """
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "revision_number", revision_number)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if max_instance is not None:
            pulumi.set(__self__, "max_instance", max_instance)
        if rolling_step is not None:
            pulumi.set(__self__, "rolling_step", rolling_step)
        if target_traffic_weight is not None:
            pulumi.set(__self__, "target_traffic_weight", target_traffic_weight)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Input[str]:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="revisionNumber")
    def revision_number(self) -> pulumi.Input[int]:
        """
        When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "revision_number")

    @revision_number.setter
    def revision_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "revision_number", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of released this time.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="maxInstance")
    def max_instance(self) -> Optional[pulumi.Input[int]]:
        """
        Upper limit of the number of function instances.
        """
        return pulumi.get(self, "max_instance")

    @max_instance.setter
    def max_instance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_instance", value)

    @property
    @pulumi.getter(name="rollingStep")
    def rolling_step(self) -> Optional[pulumi.Input[str]]:
        """
        Percentage of grayscale step size.
        """
        return pulumi.get(self, "rolling_step")

    @rolling_step.setter
    def rolling_step(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rolling_step", value)

    @property
    @pulumi.getter(name="targetTrafficWeight")
    def target_traffic_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Target percentage of published traffic.
        """
        return pulumi.get(self, "target_traffic_weight")

    @target_traffic_weight.setter
    def target_traffic_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_traffic_weight", value)


@pulumi.input_type
class _ReleaseState:
    def __init__(__self__, *,
                 current_traffic_weight: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 error_code: Optional[pulumi.Input[str]] = None,
                 failed_instance_logs: Optional[pulumi.Input[str]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 max_instance: Optional[pulumi.Input[int]] = None,
                 new_revision_number: Optional[pulumi.Input[int]] = None,
                 old_revision_number: Optional[pulumi.Input[int]] = None,
                 release_record_id: Optional[pulumi.Input[str]] = None,
                 revision_number: Optional[pulumi.Input[int]] = None,
                 rolling_step: Optional[pulumi.Input[str]] = None,
                 stable_revision_number: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_message: Optional[pulumi.Input[str]] = None,
                 target_traffic_weight: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Release resources.
        :param pulumi.Input[int] current_traffic_weight: The current percentage of current published traffic.
        :param pulumi.Input[str] description: The description of released this time.
        :param pulumi.Input[str] error_code: Error code when the release fails.
        :param pulumi.Input[str] failed_instance_logs: Download link for the failed instance log.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input[int] max_instance: Upper limit of the number of function instances.
        :param pulumi.Input[int] new_revision_number: The version number of the newly released version.
        :param pulumi.Input[int] old_revision_number: The version number of the old version.
        :param pulumi.Input[str] release_record_id: The ID of Release record.
        :param pulumi.Input[int] revision_number: When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] rolling_step: Percentage of grayscale step size.
        :param pulumi.Input[int] stable_revision_number: The current version number that is stably running online.
        :param pulumi.Input[str] start_time: The current release start time.
        :param pulumi.Input[str] status: The status of function release.
        :param pulumi.Input[str] status_message: Detailed information of the function release status.
        :param pulumi.Input[int] target_traffic_weight: Target percentage of published traffic.
        """
        if current_traffic_weight is not None:
            pulumi.set(__self__, "current_traffic_weight", current_traffic_weight)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if failed_instance_logs is not None:
            pulumi.set(__self__, "failed_instance_logs", failed_instance_logs)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if max_instance is not None:
            pulumi.set(__self__, "max_instance", max_instance)
        if new_revision_number is not None:
            pulumi.set(__self__, "new_revision_number", new_revision_number)
        if old_revision_number is not None:
            pulumi.set(__self__, "old_revision_number", old_revision_number)
        if release_record_id is not None:
            pulumi.set(__self__, "release_record_id", release_record_id)
        if revision_number is not None:
            pulumi.set(__self__, "revision_number", revision_number)
        if rolling_step is not None:
            pulumi.set(__self__, "rolling_step", rolling_step)
        if stable_revision_number is not None:
            pulumi.set(__self__, "stable_revision_number", stable_revision_number)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if target_traffic_weight is not None:
            pulumi.set(__self__, "target_traffic_weight", target_traffic_weight)

    @property
    @pulumi.getter(name="currentTrafficWeight")
    def current_traffic_weight(self) -> Optional[pulumi.Input[int]]:
        """
        The current percentage of current published traffic.
        """
        return pulumi.get(self, "current_traffic_weight")

    @current_traffic_weight.setter
    def current_traffic_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "current_traffic_weight", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of released this time.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[pulumi.Input[str]]:
        """
        Error code when the release fails.
        """
        return pulumi.get(self, "error_code")

    @error_code.setter
    def error_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_code", value)

    @property
    @pulumi.getter(name="failedInstanceLogs")
    def failed_instance_logs(self) -> Optional[pulumi.Input[str]]:
        """
        Download link for the failed instance log.
        """
        return pulumi.get(self, "failed_instance_logs")

    @failed_instance_logs.setter
    def failed_instance_logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_instance_logs", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="maxInstance")
    def max_instance(self) -> Optional[pulumi.Input[int]]:
        """
        Upper limit of the number of function instances.
        """
        return pulumi.get(self, "max_instance")

    @max_instance.setter
    def max_instance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_instance", value)

    @property
    @pulumi.getter(name="newRevisionNumber")
    def new_revision_number(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the newly released version.
        """
        return pulumi.get(self, "new_revision_number")

    @new_revision_number.setter
    def new_revision_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "new_revision_number", value)

    @property
    @pulumi.getter(name="oldRevisionNumber")
    def old_revision_number(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the old version.
        """
        return pulumi.get(self, "old_revision_number")

    @old_revision_number.setter
    def old_revision_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "old_revision_number", value)

    @property
    @pulumi.getter(name="releaseRecordId")
    def release_record_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of Release record.
        """
        return pulumi.get(self, "release_record_id")

    @release_record_id.setter
    def release_record_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_record_id", value)

    @property
    @pulumi.getter(name="revisionNumber")
    def revision_number(self) -> Optional[pulumi.Input[int]]:
        """
        When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "revision_number")

    @revision_number.setter
    def revision_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision_number", value)

    @property
    @pulumi.getter(name="rollingStep")
    def rolling_step(self) -> Optional[pulumi.Input[str]]:
        """
        Percentage of grayscale step size.
        """
        return pulumi.get(self, "rolling_step")

    @rolling_step.setter
    def rolling_step(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rolling_step", value)

    @property
    @pulumi.getter(name="stableRevisionNumber")
    def stable_revision_number(self) -> Optional[pulumi.Input[int]]:
        """
        The current version number that is stably running online.
        """
        return pulumi.get(self, "stable_revision_number")

    @stable_revision_number.setter
    def stable_revision_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stable_revision_number", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The current release start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of function release.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[pulumi.Input[str]]:
        """
        Detailed information of the function release status.
        """
        return pulumi.get(self, "status_message")

    @status_message.setter
    def status_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_message", value)

    @property
    @pulumi.getter(name="targetTrafficWeight")
    def target_traffic_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Target percentage of published traffic.
        """
        return pulumi.get(self, "target_traffic_weight")

    @target_traffic_weight.setter
    def target_traffic_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_traffic_weight", value)


class Release(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 max_instance: Optional[pulumi.Input[int]] = None,
                 revision_number: Optional[pulumi.Input[int]] = None,
                 rolling_step: Optional[pulumi.Input[str]] = None,
                 target_traffic_weight: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage vefaas release
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vefaas.Release("foo",
            function_id="9p5emxxxx",
            revision_number=0,
            target_traffic_weight=30)
        ```

        ## Import

        VefaasRelease can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vefaas/release:Release default FunctionId:ReleaseRecordId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of released this time.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input[int] max_instance: Upper limit of the number of function instances.
        :param pulumi.Input[int] revision_number: When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] rolling_step: Percentage of grayscale step size.
        :param pulumi.Input[int] target_traffic_weight: Target percentage of published traffic.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReleaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vefaas release
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vefaas.Release("foo",
            function_id="9p5emxxxx",
            revision_number=0,
            target_traffic_weight=30)
        ```

        ## Import

        VefaasRelease can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vefaas/release:Release default FunctionId:ReleaseRecordId
        ```

        :param str resource_name: The name of the resource.
        :param ReleaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReleaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 max_instance: Optional[pulumi.Input[int]] = None,
                 revision_number: Optional[pulumi.Input[int]] = None,
                 rolling_step: Optional[pulumi.Input[str]] = None,
                 target_traffic_weight: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReleaseArgs.__new__(ReleaseArgs)

            __props__.__dict__["description"] = description
            if function_id is None and not opts.urn:
                raise TypeError("Missing required property 'function_id'")
            __props__.__dict__["function_id"] = function_id
            __props__.__dict__["max_instance"] = max_instance
            if revision_number is None and not opts.urn:
                raise TypeError("Missing required property 'revision_number'")
            __props__.__dict__["revision_number"] = revision_number
            __props__.__dict__["rolling_step"] = rolling_step
            __props__.__dict__["target_traffic_weight"] = target_traffic_weight
            __props__.__dict__["current_traffic_weight"] = None
            __props__.__dict__["error_code"] = None
            __props__.__dict__["failed_instance_logs"] = None
            __props__.__dict__["new_revision_number"] = None
            __props__.__dict__["old_revision_number"] = None
            __props__.__dict__["release_record_id"] = None
            __props__.__dict__["stable_revision_number"] = None
            __props__.__dict__["start_time"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_message"] = None
        super(Release, __self__).__init__(
            'volcengine:vefaas/release:Release',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            current_traffic_weight: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            error_code: Optional[pulumi.Input[str]] = None,
            failed_instance_logs: Optional[pulumi.Input[str]] = None,
            function_id: Optional[pulumi.Input[str]] = None,
            max_instance: Optional[pulumi.Input[int]] = None,
            new_revision_number: Optional[pulumi.Input[int]] = None,
            old_revision_number: Optional[pulumi.Input[int]] = None,
            release_record_id: Optional[pulumi.Input[str]] = None,
            revision_number: Optional[pulumi.Input[int]] = None,
            rolling_step: Optional[pulumi.Input[str]] = None,
            stable_revision_number: Optional[pulumi.Input[int]] = None,
            start_time: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            status_message: Optional[pulumi.Input[str]] = None,
            target_traffic_weight: Optional[pulumi.Input[int]] = None) -> 'Release':
        """
        Get an existing Release resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] current_traffic_weight: The current percentage of current published traffic.
        :param pulumi.Input[str] description: The description of released this time.
        :param pulumi.Input[str] error_code: Error code when the release fails.
        :param pulumi.Input[str] failed_instance_logs: Download link for the failed instance log.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input[int] max_instance: Upper limit of the number of function instances.
        :param pulumi.Input[int] new_revision_number: The version number of the newly released version.
        :param pulumi.Input[int] old_revision_number: The version number of the old version.
        :param pulumi.Input[str] release_record_id: The ID of Release record.
        :param pulumi.Input[int] revision_number: When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] rolling_step: Percentage of grayscale step size.
        :param pulumi.Input[int] stable_revision_number: The current version number that is stably running online.
        :param pulumi.Input[str] start_time: The current release start time.
        :param pulumi.Input[str] status: The status of function release.
        :param pulumi.Input[str] status_message: Detailed information of the function release status.
        :param pulumi.Input[int] target_traffic_weight: Target percentage of published traffic.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReleaseState.__new__(_ReleaseState)

        __props__.__dict__["current_traffic_weight"] = current_traffic_weight
        __props__.__dict__["description"] = description
        __props__.__dict__["error_code"] = error_code
        __props__.__dict__["failed_instance_logs"] = failed_instance_logs
        __props__.__dict__["function_id"] = function_id
        __props__.__dict__["max_instance"] = max_instance
        __props__.__dict__["new_revision_number"] = new_revision_number
        __props__.__dict__["old_revision_number"] = old_revision_number
        __props__.__dict__["release_record_id"] = release_record_id
        __props__.__dict__["revision_number"] = revision_number
        __props__.__dict__["rolling_step"] = rolling_step
        __props__.__dict__["stable_revision_number"] = stable_revision_number
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        __props__.__dict__["status_message"] = status_message
        __props__.__dict__["target_traffic_weight"] = target_traffic_weight
        return Release(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="currentTrafficWeight")
    def current_traffic_weight(self) -> pulumi.Output[int]:
        """
        The current percentage of current published traffic.
        """
        return pulumi.get(self, "current_traffic_weight")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of released this time.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> pulumi.Output[str]:
        """
        Error code when the release fails.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="failedInstanceLogs")
    def failed_instance_logs(self) -> pulumi.Output[str]:
        """
        Download link for the failed instance log.
        """
        return pulumi.get(self, "failed_instance_logs")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Output[str]:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="maxInstance")
    def max_instance(self) -> pulumi.Output[Optional[int]]:
        """
        Upper limit of the number of function instances.
        """
        return pulumi.get(self, "max_instance")

    @property
    @pulumi.getter(name="newRevisionNumber")
    def new_revision_number(self) -> pulumi.Output[int]:
        """
        The version number of the newly released version.
        """
        return pulumi.get(self, "new_revision_number")

    @property
    @pulumi.getter(name="oldRevisionNumber")
    def old_revision_number(self) -> pulumi.Output[int]:
        """
        The version number of the old version.
        """
        return pulumi.get(self, "old_revision_number")

    @property
    @pulumi.getter(name="releaseRecordId")
    def release_record_id(self) -> pulumi.Output[str]:
        """
        The ID of Release record.
        """
        return pulumi.get(self, "release_record_id")

    @property
    @pulumi.getter(name="revisionNumber")
    def revision_number(self) -> pulumi.Output[int]:
        """
        When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "revision_number")

    @property
    @pulumi.getter(name="rollingStep")
    def rolling_step(self) -> pulumi.Output[Optional[str]]:
        """
        Percentage of grayscale step size.
        """
        return pulumi.get(self, "rolling_step")

    @property
    @pulumi.getter(name="stableRevisionNumber")
    def stable_revision_number(self) -> pulumi.Output[int]:
        """
        The current version number that is stably running online.
        """
        return pulumi.get(self, "stable_revision_number")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        The current release start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of function release.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> pulumi.Output[str]:
        """
        Detailed information of the function release status.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="targetTrafficWeight")
    def target_traffic_weight(self) -> pulumi.Output[int]:
        """
        Target percentage of published traffic.
        """
        return pulumi.get(self, "target_traffic_weight")

