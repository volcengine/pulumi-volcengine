# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FunctionArgs', 'Function']

@pulumi.input_type
class FunctionArgs:
    def __init__(__self__, *,
                 runtime: pulumi.Input[str],
                 command: Optional[pulumi.Input[str]] = None,
                 cpu_strategy: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionEnvArgs']]]] = None,
                 exclusive_mode: Optional[pulumi.Input[bool]] = None,
                 initializer_sec: Optional[pulumi.Input[int]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 memory_mb: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nas_storage: Optional[pulumi.Input['FunctionNasStorageArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 request_timeout: Optional[pulumi.Input[int]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_access_config: Optional[pulumi.Input['FunctionSourceAccessConfigArgs']] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 tls_config: Optional[pulumi.Input['FunctionTlsConfigArgs']] = None,
                 tos_mount_config: Optional[pulumi.Input['FunctionTosMountConfigArgs']] = None,
                 vpc_config: Optional[pulumi.Input['FunctionVpcConfigArgs']] = None):
        """
        The set of arguments for constructing a Function resource.
        :param pulumi.Input[str] runtime: The runtime of Function.
        :param pulumi.Input[str] command: The custom startup command for the instance.
        :param pulumi.Input[str] cpu_strategy: Function CPU charging policy.
        :param pulumi.Input[str] description: The description of Function.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionEnvArgs']]] envs: Function environment variable.
        :param pulumi.Input[bool] exclusive_mode: Exclusive mode switch.
        :param pulumi.Input[int] initializer_sec: Function to initialize timeout configuration.
        :param pulumi.Input[int] max_concurrency: Maximum concurrency of a single instance.
        :param pulumi.Input[int] memory_mb: Maximum memory for a single instance.
        :param pulumi.Input[str] name: The name of Function.
        :param pulumi.Input['FunctionNasStorageArgs'] nas_storage: The configuration of file storage NAS mount.
        :param pulumi.Input[int] port: Custom listening port for the instance.
        :param pulumi.Input[int] request_timeout: Request timeout (in seconds).
        :param pulumi.Input[str] source: Code source.
        :param pulumi.Input['FunctionSourceAccessConfigArgs'] source_access_config: Access configuration for the image repository.
        :param pulumi.Input[str] source_type: Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        :param pulumi.Input['FunctionTlsConfigArgs'] tls_config: Function log configuration.
        :param pulumi.Input['FunctionTosMountConfigArgs'] tos_mount_config: The configuration of Object Storage TOS mount.
        :param pulumi.Input['FunctionVpcConfigArgs'] vpc_config: The configuration of VPC.
        """
        pulumi.set(__self__, "runtime", runtime)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if cpu_strategy is not None:
            pulumi.set(__self__, "cpu_strategy", cpu_strategy)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if exclusive_mode is not None:
            pulumi.set(__self__, "exclusive_mode", exclusive_mode)
        if initializer_sec is not None:
            pulumi.set(__self__, "initializer_sec", initializer_sec)
        if max_concurrency is not None:
            pulumi.set(__self__, "max_concurrency", max_concurrency)
        if memory_mb is not None:
            pulumi.set(__self__, "memory_mb", memory_mb)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nas_storage is not None:
            pulumi.set(__self__, "nas_storage", nas_storage)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if request_timeout is not None:
            pulumi.set(__self__, "request_timeout", request_timeout)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_access_config is not None:
            pulumi.set(__self__, "source_access_config", source_access_config)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if tls_config is not None:
            pulumi.set(__self__, "tls_config", tls_config)
        if tos_mount_config is not None:
            pulumi.set(__self__, "tos_mount_config", tos_mount_config)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter
    def runtime(self) -> pulumi.Input[str]:
        """
        The runtime of Function.
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: pulumi.Input[str]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        """
        The custom startup command for the instance.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter(name="cpuStrategy")
    def cpu_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Function CPU charging policy.
        """
        return pulumi.get(self, "cpu_strategy")

    @cpu_strategy.setter
    def cpu_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_strategy", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of Function.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionEnvArgs']]]]:
        """
        Function environment variable.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="exclusiveMode")
    def exclusive_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Exclusive mode switch.
        """
        return pulumi.get(self, "exclusive_mode")

    @exclusive_mode.setter
    def exclusive_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclusive_mode", value)

    @property
    @pulumi.getter(name="initializerSec")
    def initializer_sec(self) -> Optional[pulumi.Input[int]]:
        """
        Function to initialize timeout configuration.
        """
        return pulumi.get(self, "initializer_sec")

    @initializer_sec.setter
    def initializer_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initializer_sec", value)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum concurrency of a single instance.
        """
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum memory for a single instance.
        """
        return pulumi.get(self, "memory_mb")

    @memory_mb.setter
    def memory_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_mb", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of Function.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nasStorage")
    def nas_storage(self) -> Optional[pulumi.Input['FunctionNasStorageArgs']]:
        """
        The configuration of file storage NAS mount.
        """
        return pulumi.get(self, "nas_storage")

    @nas_storage.setter
    def nas_storage(self, value: Optional[pulumi.Input['FunctionNasStorageArgs']]):
        pulumi.set(self, "nas_storage", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Custom listening port for the instance.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Request timeout (in seconds).
        """
        return pulumi.get(self, "request_timeout")

    @request_timeout.setter
    def request_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_timeout", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Code source.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceAccessConfig")
    def source_access_config(self) -> Optional[pulumi.Input['FunctionSourceAccessConfigArgs']]:
        """
        Access configuration for the image repository.
        """
        return pulumi.get(self, "source_access_config")

    @source_access_config.setter
    def source_access_config(self, value: Optional[pulumi.Input['FunctionSourceAccessConfigArgs']]):
        pulumi.set(self, "source_access_config", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> Optional[pulumi.Input['FunctionTlsConfigArgs']]:
        """
        Function log configuration.
        """
        return pulumi.get(self, "tls_config")

    @tls_config.setter
    def tls_config(self, value: Optional[pulumi.Input['FunctionTlsConfigArgs']]):
        pulumi.set(self, "tls_config", value)

    @property
    @pulumi.getter(name="tosMountConfig")
    def tos_mount_config(self) -> Optional[pulumi.Input['FunctionTosMountConfigArgs']]:
        """
        The configuration of Object Storage TOS mount.
        """
        return pulumi.get(self, "tos_mount_config")

    @tos_mount_config.setter
    def tos_mount_config(self, value: Optional[pulumi.Input['FunctionTosMountConfigArgs']]):
        pulumi.set(self, "tos_mount_config", value)

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional[pulumi.Input['FunctionVpcConfigArgs']]:
        """
        The configuration of VPC.
        """
        return pulumi.get(self, "vpc_config")

    @vpc_config.setter
    def vpc_config(self, value: Optional[pulumi.Input['FunctionVpcConfigArgs']]):
        pulumi.set(self, "vpc_config", value)


@pulumi.input_type
class _FunctionState:
    def __init__(__self__, *,
                 code_size: Optional[pulumi.Input[int]] = None,
                 code_size_limit: Optional[pulumi.Input[int]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 cpu_strategy: Optional[pulumi.Input[str]] = None,
                 creation_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionEnvArgs']]]] = None,
                 exclusive_mode: Optional[pulumi.Input[bool]] = None,
                 initializer_sec: Optional[pulumi.Input[int]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 memory_mb: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nas_storage: Optional[pulumi.Input['FunctionNasStorageArgs']] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 request_timeout: Optional[pulumi.Input[int]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_access_config: Optional[pulumi.Input['FunctionSourceAccessConfigArgs']] = None,
                 source_location: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 tls_config: Optional[pulumi.Input['FunctionTlsConfigArgs']] = None,
                 tos_mount_config: Optional[pulumi.Input['FunctionTosMountConfigArgs']] = None,
                 triggers_count: Optional[pulumi.Input[int]] = None,
                 vpc_config: Optional[pulumi.Input['FunctionVpcConfigArgs']] = None):
        """
        Input properties used for looking up and filtering Function resources.
        :param pulumi.Input[int] code_size: The size of code package.
        :param pulumi.Input[int] code_size_limit: Maximum code package size.
        :param pulumi.Input[str] command: The custom startup command for the instance.
        :param pulumi.Input[str] cpu_strategy: Function CPU charging policy.
        :param pulumi.Input[str] creation_time: The creation time of the function.
        :param pulumi.Input[str] description: The description of Function.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionEnvArgs']]] envs: Function environment variable.
        :param pulumi.Input[bool] exclusive_mode: Exclusive mode switch.
        :param pulumi.Input[int] initializer_sec: Function to initialize timeout configuration.
        :param pulumi.Input[str] last_update_time: The last update time of the function.
        :param pulumi.Input[int] max_concurrency: Maximum concurrency of a single instance.
        :param pulumi.Input[int] memory_mb: Maximum memory for a single instance.
        :param pulumi.Input[str] name: The name of Function.
        :param pulumi.Input['FunctionNasStorageArgs'] nas_storage: The configuration of file storage NAS mount.
        :param pulumi.Input[str] owner: The owner of Function.
        :param pulumi.Input[int] port: Custom listening port for the instance.
        :param pulumi.Input[int] request_timeout: Request timeout (in seconds).
        :param pulumi.Input[str] runtime: The runtime of Function.
        :param pulumi.Input[str] source: Code source.
        :param pulumi.Input['FunctionSourceAccessConfigArgs'] source_access_config: Access configuration for the image repository.
        :param pulumi.Input[str] source_location: Maximum code package size.
        :param pulumi.Input[str] source_type: Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        :param pulumi.Input['FunctionTlsConfigArgs'] tls_config: Function log configuration.
        :param pulumi.Input['FunctionTosMountConfigArgs'] tos_mount_config: The configuration of Object Storage TOS mount.
        :param pulumi.Input[int] triggers_count: The number of triggers for this Function.
        :param pulumi.Input['FunctionVpcConfigArgs'] vpc_config: The configuration of VPC.
        """
        if code_size is not None:
            pulumi.set(__self__, "code_size", code_size)
        if code_size_limit is not None:
            pulumi.set(__self__, "code_size_limit", code_size_limit)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if cpu_strategy is not None:
            pulumi.set(__self__, "cpu_strategy", cpu_strategy)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if exclusive_mode is not None:
            pulumi.set(__self__, "exclusive_mode", exclusive_mode)
        if initializer_sec is not None:
            pulumi.set(__self__, "initializer_sec", initializer_sec)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if max_concurrency is not None:
            pulumi.set(__self__, "max_concurrency", max_concurrency)
        if memory_mb is not None:
            pulumi.set(__self__, "memory_mb", memory_mb)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nas_storage is not None:
            pulumi.set(__self__, "nas_storage", nas_storage)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if request_timeout is not None:
            pulumi.set(__self__, "request_timeout", request_timeout)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_access_config is not None:
            pulumi.set(__self__, "source_access_config", source_access_config)
        if source_location is not None:
            pulumi.set(__self__, "source_location", source_location)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if tls_config is not None:
            pulumi.set(__self__, "tls_config", tls_config)
        if tos_mount_config is not None:
            pulumi.set(__self__, "tos_mount_config", tos_mount_config)
        if triggers_count is not None:
            pulumi.set(__self__, "triggers_count", triggers_count)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="codeSize")
    def code_size(self) -> Optional[pulumi.Input[int]]:
        """
        The size of code package.
        """
        return pulumi.get(self, "code_size")

    @code_size.setter
    def code_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code_size", value)

    @property
    @pulumi.getter(name="codeSizeLimit")
    def code_size_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum code package size.
        """
        return pulumi.get(self, "code_size_limit")

    @code_size_limit.setter
    def code_size_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code_size_limit", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        """
        The custom startup command for the instance.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter(name="cpuStrategy")
    def cpu_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Function CPU charging policy.
        """
        return pulumi.get(self, "cpu_strategy")

    @cpu_strategy.setter
    def cpu_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_strategy", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of the function.
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of Function.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionEnvArgs']]]]:
        """
        Function environment variable.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="exclusiveMode")
    def exclusive_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Exclusive mode switch.
        """
        return pulumi.get(self, "exclusive_mode")

    @exclusive_mode.setter
    def exclusive_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclusive_mode", value)

    @property
    @pulumi.getter(name="initializerSec")
    def initializer_sec(self) -> Optional[pulumi.Input[int]]:
        """
        Function to initialize timeout configuration.
        """
        return pulumi.get(self, "initializer_sec")

    @initializer_sec.setter
    def initializer_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initializer_sec", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last update time of the function.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum concurrency of a single instance.
        """
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum memory for a single instance.
        """
        return pulumi.get(self, "memory_mb")

    @memory_mb.setter
    def memory_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_mb", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of Function.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nasStorage")
    def nas_storage(self) -> Optional[pulumi.Input['FunctionNasStorageArgs']]:
        """
        The configuration of file storage NAS mount.
        """
        return pulumi.get(self, "nas_storage")

    @nas_storage.setter
    def nas_storage(self, value: Optional[pulumi.Input['FunctionNasStorageArgs']]):
        pulumi.set(self, "nas_storage", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        The owner of Function.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Custom listening port for the instance.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Request timeout (in seconds).
        """
        return pulumi.get(self, "request_timeout")

    @request_timeout.setter
    def request_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_timeout", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[str]]:
        """
        The runtime of Function.
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Code source.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceAccessConfig")
    def source_access_config(self) -> Optional[pulumi.Input['FunctionSourceAccessConfigArgs']]:
        """
        Access configuration for the image repository.
        """
        return pulumi.get(self, "source_access_config")

    @source_access_config.setter
    def source_access_config(self, value: Optional[pulumi.Input['FunctionSourceAccessConfigArgs']]):
        pulumi.set(self, "source_access_config", value)

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum code package size.
        """
        return pulumi.get(self, "source_location")

    @source_location.setter
    def source_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_location", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> Optional[pulumi.Input['FunctionTlsConfigArgs']]:
        """
        Function log configuration.
        """
        return pulumi.get(self, "tls_config")

    @tls_config.setter
    def tls_config(self, value: Optional[pulumi.Input['FunctionTlsConfigArgs']]):
        pulumi.set(self, "tls_config", value)

    @property
    @pulumi.getter(name="tosMountConfig")
    def tos_mount_config(self) -> Optional[pulumi.Input['FunctionTosMountConfigArgs']]:
        """
        The configuration of Object Storage TOS mount.
        """
        return pulumi.get(self, "tos_mount_config")

    @tos_mount_config.setter
    def tos_mount_config(self, value: Optional[pulumi.Input['FunctionTosMountConfigArgs']]):
        pulumi.set(self, "tos_mount_config", value)

    @property
    @pulumi.getter(name="triggersCount")
    def triggers_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of triggers for this Function.
        """
        return pulumi.get(self, "triggers_count")

    @triggers_count.setter
    def triggers_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "triggers_count", value)

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional[pulumi.Input['FunctionVpcConfigArgs']]:
        """
        The configuration of VPC.
        """
        return pulumi.get(self, "vpc_config")

    @vpc_config.setter
    def vpc_config(self, value: Optional[pulumi.Input['FunctionVpcConfigArgs']]):
        pulumi.set(self, "vpc_config", value)


class Function(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 cpu_strategy: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionEnvArgs']]]]] = None,
                 exclusive_mode: Optional[pulumi.Input[bool]] = None,
                 initializer_sec: Optional[pulumi.Input[int]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 memory_mb: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nas_storage: Optional[pulumi.Input[pulumi.InputType['FunctionNasStorageArgs']]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 request_timeout: Optional[pulumi.Input[int]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_access_config: Optional[pulumi.Input[pulumi.InputType['FunctionSourceAccessConfigArgs']]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 tls_config: Optional[pulumi.Input[pulumi.InputType['FunctionTlsConfigArgs']]] = None,
                 tos_mount_config: Optional[pulumi.Input[pulumi.InputType['FunctionTosMountConfigArgs']]] = None,
                 vpc_config: Optional[pulumi.Input[pulumi.InputType['FunctionVpcConfigArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to manage vefaas function
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vefaas.Function("foo",
            description="123131231",
            exclusive_mode=False,
            request_timeout=30,
            runtime="golang/v1")
        ```

        ## Import

        VefaasFunction can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vefaas/function:Function default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command: The custom startup command for the instance.
        :param pulumi.Input[str] cpu_strategy: Function CPU charging policy.
        :param pulumi.Input[str] description: The description of Function.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionEnvArgs']]]] envs: Function environment variable.
        :param pulumi.Input[bool] exclusive_mode: Exclusive mode switch.
        :param pulumi.Input[int] initializer_sec: Function to initialize timeout configuration.
        :param pulumi.Input[int] max_concurrency: Maximum concurrency of a single instance.
        :param pulumi.Input[int] memory_mb: Maximum memory for a single instance.
        :param pulumi.Input[str] name: The name of Function.
        :param pulumi.Input[pulumi.InputType['FunctionNasStorageArgs']] nas_storage: The configuration of file storage NAS mount.
        :param pulumi.Input[int] port: Custom listening port for the instance.
        :param pulumi.Input[int] request_timeout: Request timeout (in seconds).
        :param pulumi.Input[str] runtime: The runtime of Function.
        :param pulumi.Input[str] source: Code source.
        :param pulumi.Input[pulumi.InputType['FunctionSourceAccessConfigArgs']] source_access_config: Access configuration for the image repository.
        :param pulumi.Input[str] source_type: Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        :param pulumi.Input[pulumi.InputType['FunctionTlsConfigArgs']] tls_config: Function log configuration.
        :param pulumi.Input[pulumi.InputType['FunctionTosMountConfigArgs']] tos_mount_config: The configuration of Object Storage TOS mount.
        :param pulumi.Input[pulumi.InputType['FunctionVpcConfigArgs']] vpc_config: The configuration of VPC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FunctionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vefaas function
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vefaas.Function("foo",
            description="123131231",
            exclusive_mode=False,
            request_timeout=30,
            runtime="golang/v1")
        ```

        ## Import

        VefaasFunction can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vefaas/function:Function default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param FunctionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 cpu_strategy: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionEnvArgs']]]]] = None,
                 exclusive_mode: Optional[pulumi.Input[bool]] = None,
                 initializer_sec: Optional[pulumi.Input[int]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 memory_mb: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nas_storage: Optional[pulumi.Input[pulumi.InputType['FunctionNasStorageArgs']]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 request_timeout: Optional[pulumi.Input[int]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_access_config: Optional[pulumi.Input[pulumi.InputType['FunctionSourceAccessConfigArgs']]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 tls_config: Optional[pulumi.Input[pulumi.InputType['FunctionTlsConfigArgs']]] = None,
                 tos_mount_config: Optional[pulumi.Input[pulumi.InputType['FunctionTosMountConfigArgs']]] = None,
                 vpc_config: Optional[pulumi.Input[pulumi.InputType['FunctionVpcConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionArgs.__new__(FunctionArgs)

            __props__.__dict__["command"] = command
            __props__.__dict__["cpu_strategy"] = cpu_strategy
            __props__.__dict__["description"] = description
            __props__.__dict__["envs"] = envs
            __props__.__dict__["exclusive_mode"] = exclusive_mode
            __props__.__dict__["initializer_sec"] = initializer_sec
            __props__.__dict__["max_concurrency"] = max_concurrency
            __props__.__dict__["memory_mb"] = memory_mb
            __props__.__dict__["name"] = name
            __props__.__dict__["nas_storage"] = nas_storage
            __props__.__dict__["port"] = port
            __props__.__dict__["request_timeout"] = request_timeout
            if runtime is None and not opts.urn:
                raise TypeError("Missing required property 'runtime'")
            __props__.__dict__["runtime"] = runtime
            __props__.__dict__["source"] = source
            __props__.__dict__["source_access_config"] = source_access_config
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["tls_config"] = tls_config
            __props__.__dict__["tos_mount_config"] = tos_mount_config
            __props__.__dict__["vpc_config"] = vpc_config
            __props__.__dict__["code_size"] = None
            __props__.__dict__["code_size_limit"] = None
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["last_update_time"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["source_location"] = None
            __props__.__dict__["triggers_count"] = None
        super(Function, __self__).__init__(
            'volcengine:vefaas/function:Function',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            code_size: Optional[pulumi.Input[int]] = None,
            code_size_limit: Optional[pulumi.Input[int]] = None,
            command: Optional[pulumi.Input[str]] = None,
            cpu_strategy: Optional[pulumi.Input[str]] = None,
            creation_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            envs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionEnvArgs']]]]] = None,
            exclusive_mode: Optional[pulumi.Input[bool]] = None,
            initializer_sec: Optional[pulumi.Input[int]] = None,
            last_update_time: Optional[pulumi.Input[str]] = None,
            max_concurrency: Optional[pulumi.Input[int]] = None,
            memory_mb: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nas_storage: Optional[pulumi.Input[pulumi.InputType['FunctionNasStorageArgs']]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            request_timeout: Optional[pulumi.Input[int]] = None,
            runtime: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[str]] = None,
            source_access_config: Optional[pulumi.Input[pulumi.InputType['FunctionSourceAccessConfigArgs']]] = None,
            source_location: Optional[pulumi.Input[str]] = None,
            source_type: Optional[pulumi.Input[str]] = None,
            tls_config: Optional[pulumi.Input[pulumi.InputType['FunctionTlsConfigArgs']]] = None,
            tos_mount_config: Optional[pulumi.Input[pulumi.InputType['FunctionTosMountConfigArgs']]] = None,
            triggers_count: Optional[pulumi.Input[int]] = None,
            vpc_config: Optional[pulumi.Input[pulumi.InputType['FunctionVpcConfigArgs']]] = None) -> 'Function':
        """
        Get an existing Function resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] code_size: The size of code package.
        :param pulumi.Input[int] code_size_limit: Maximum code package size.
        :param pulumi.Input[str] command: The custom startup command for the instance.
        :param pulumi.Input[str] cpu_strategy: Function CPU charging policy.
        :param pulumi.Input[str] creation_time: The creation time of the function.
        :param pulumi.Input[str] description: The description of Function.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionEnvArgs']]]] envs: Function environment variable.
        :param pulumi.Input[bool] exclusive_mode: Exclusive mode switch.
        :param pulumi.Input[int] initializer_sec: Function to initialize timeout configuration.
        :param pulumi.Input[str] last_update_time: The last update time of the function.
        :param pulumi.Input[int] max_concurrency: Maximum concurrency of a single instance.
        :param pulumi.Input[int] memory_mb: Maximum memory for a single instance.
        :param pulumi.Input[str] name: The name of Function.
        :param pulumi.Input[pulumi.InputType['FunctionNasStorageArgs']] nas_storage: The configuration of file storage NAS mount.
        :param pulumi.Input[str] owner: The owner of Function.
        :param pulumi.Input[int] port: Custom listening port for the instance.
        :param pulumi.Input[int] request_timeout: Request timeout (in seconds).
        :param pulumi.Input[str] runtime: The runtime of Function.
        :param pulumi.Input[str] source: Code source.
        :param pulumi.Input[pulumi.InputType['FunctionSourceAccessConfigArgs']] source_access_config: Access configuration for the image repository.
        :param pulumi.Input[str] source_location: Maximum code package size.
        :param pulumi.Input[str] source_type: Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        :param pulumi.Input[pulumi.InputType['FunctionTlsConfigArgs']] tls_config: Function log configuration.
        :param pulumi.Input[pulumi.InputType['FunctionTosMountConfigArgs']] tos_mount_config: The configuration of Object Storage TOS mount.
        :param pulumi.Input[int] triggers_count: The number of triggers for this Function.
        :param pulumi.Input[pulumi.InputType['FunctionVpcConfigArgs']] vpc_config: The configuration of VPC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FunctionState.__new__(_FunctionState)

        __props__.__dict__["code_size"] = code_size
        __props__.__dict__["code_size_limit"] = code_size_limit
        __props__.__dict__["command"] = command
        __props__.__dict__["cpu_strategy"] = cpu_strategy
        __props__.__dict__["creation_time"] = creation_time
        __props__.__dict__["description"] = description
        __props__.__dict__["envs"] = envs
        __props__.__dict__["exclusive_mode"] = exclusive_mode
        __props__.__dict__["initializer_sec"] = initializer_sec
        __props__.__dict__["last_update_time"] = last_update_time
        __props__.__dict__["max_concurrency"] = max_concurrency
        __props__.__dict__["memory_mb"] = memory_mb
        __props__.__dict__["name"] = name
        __props__.__dict__["nas_storage"] = nas_storage
        __props__.__dict__["owner"] = owner
        __props__.__dict__["port"] = port
        __props__.__dict__["request_timeout"] = request_timeout
        __props__.__dict__["runtime"] = runtime
        __props__.__dict__["source"] = source
        __props__.__dict__["source_access_config"] = source_access_config
        __props__.__dict__["source_location"] = source_location
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["tls_config"] = tls_config
        __props__.__dict__["tos_mount_config"] = tos_mount_config
        __props__.__dict__["triggers_count"] = triggers_count
        __props__.__dict__["vpc_config"] = vpc_config
        return Function(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="codeSize")
    def code_size(self) -> pulumi.Output[int]:
        """
        The size of code package.
        """
        return pulumi.get(self, "code_size")

    @property
    @pulumi.getter(name="codeSizeLimit")
    def code_size_limit(self) -> pulumi.Output[int]:
        """
        Maximum code package size.
        """
        return pulumi.get(self, "code_size_limit")

    @property
    @pulumi.getter
    def command(self) -> pulumi.Output[Optional[str]]:
        """
        The custom startup command for the instance.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="cpuStrategy")
    def cpu_strategy(self) -> pulumi.Output[Optional[str]]:
        """
        Function CPU charging policy.
        """
        return pulumi.get(self, "cpu_strategy")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[str]:
        """
        The creation time of the function.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of Function.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def envs(self) -> pulumi.Output[Sequence['outputs.FunctionEnv']]:
        """
        Function environment variable.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="exclusiveMode")
    def exclusive_mode(self) -> pulumi.Output[bool]:
        """
        Exclusive mode switch.
        """
        return pulumi.get(self, "exclusive_mode")

    @property
    @pulumi.getter(name="initializerSec")
    def initializer_sec(self) -> pulumi.Output[int]:
        """
        Function to initialize timeout configuration.
        """
        return pulumi.get(self, "initializer_sec")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> pulumi.Output[str]:
        """
        The last update time of the function.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> pulumi.Output[int]:
        """
        Maximum concurrency of a single instance.
        """
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> pulumi.Output[int]:
        """
        Maximum memory for a single instance.
        """
        return pulumi.get(self, "memory_mb")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of Function.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nasStorage")
    def nas_storage(self) -> pulumi.Output['outputs.FunctionNasStorage']:
        """
        The configuration of file storage NAS mount.
        """
        return pulumi.get(self, "nas_storage")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        The owner of Function.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Custom listening port for the instance.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> pulumi.Output[int]:
        """
        Request timeout (in seconds).
        """
        return pulumi.get(self, "request_timeout")

    @property
    @pulumi.getter
    def runtime(self) -> pulumi.Output[str]:
        """
        The runtime of Function.
        """
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[Optional[str]]:
        """
        Code source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceAccessConfig")
    def source_access_config(self) -> pulumi.Output[Optional['outputs.FunctionSourceAccessConfig']]:
        """
        Access configuration for the image repository.
        """
        return pulumi.get(self, "source_access_config")

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> pulumi.Output[str]:
        """
        Maximum code package size.
        """
        return pulumi.get(self, "source_location")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[str]:
        """
        Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> pulumi.Output['outputs.FunctionTlsConfig']:
        """
        Function log configuration.
        """
        return pulumi.get(self, "tls_config")

    @property
    @pulumi.getter(name="tosMountConfig")
    def tos_mount_config(self) -> pulumi.Output['outputs.FunctionTosMountConfig']:
        """
        The configuration of Object Storage TOS mount.
        """
        return pulumi.get(self, "tos_mount_config")

    @property
    @pulumi.getter(name="triggersCount")
    def triggers_count(self) -> pulumi.Output[int]:
        """
        The number of triggers for this Function.
        """
        return pulumi.get(self, "triggers_count")

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> pulumi.Output['outputs.FunctionVpcConfig']:
        """
        The configuration of VPC.
        """
        return pulumi.get(self, "vpc_config")

