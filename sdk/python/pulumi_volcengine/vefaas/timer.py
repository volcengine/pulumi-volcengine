# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TimerArgs', 'Timer']

@pulumi.input_type
class TimerArgs:
    def __init__(__self__, *,
                 crontab: pulumi.Input[str],
                 function_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enable_concurrency: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Timer resource.
        :param pulumi.Input[str] crontab: Set the timing trigger time of the Timer trigger.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input[str] description: The description of the Timer trigger.
        :param pulumi.Input[bool] enable_concurrency: Whether the Timer trigger allows concurrency.
        :param pulumi.Input[bool] enabled: Whether the Timer trigger is enabled.
        :param pulumi.Input[str] name: The name of the Timer trigger.
        :param pulumi.Input[str] payload: The Timer trigger sends the content payload of the request.
        :param pulumi.Input[int] retries: The retry count of the Timer trigger.
        """
        pulumi.set(__self__, "crontab", crontab)
        pulumi.set(__self__, "function_id", function_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_concurrency is not None:
            pulumi.set(__self__, "enable_concurrency", enable_concurrency)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)

    @property
    @pulumi.getter
    def crontab(self) -> pulumi.Input[str]:
        """
        Set the timing trigger time of the Timer trigger.
        """
        return pulumi.get(self, "crontab")

    @crontab.setter
    def crontab(self, value: pulumi.Input[str]):
        pulumi.set(self, "crontab", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Input[str]:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Timer trigger.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableConcurrency")
    def enable_concurrency(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Timer trigger allows concurrency.
        """
        return pulumi.get(self, "enable_concurrency")

    @enable_concurrency.setter
    def enable_concurrency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_concurrency", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Timer trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Timer trigger.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[str]]:
        """
        The Timer trigger sends the content payload of the request.
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        The retry count of the Timer trigger.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)


@pulumi.input_type
class _TimerState:
    def __init__(__self__, *,
                 creation_time: Optional[pulumi.Input[str]] = None,
                 crontab: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_concurrency: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Timer resources.
        :param pulumi.Input[str] creation_time: The creation time of the Timer trigger.
        :param pulumi.Input[str] crontab: Set the timing trigger time of the Timer trigger.
        :param pulumi.Input[str] description: The description of the Timer trigger.
        :param pulumi.Input[bool] enable_concurrency: Whether the Timer trigger allows concurrency.
        :param pulumi.Input[bool] enabled: Whether the Timer trigger is enabled.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input[str] last_update_time: The last update time of the Timer trigger.
        :param pulumi.Input[str] name: The name of the Timer trigger.
        :param pulumi.Input[str] payload: The Timer trigger sends the content payload of the request.
        :param pulumi.Input[int] retries: The retry count of the Timer trigger.
        """
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if crontab is not None:
            pulumi.set(__self__, "crontab", crontab)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_concurrency is not None:
            pulumi.set(__self__, "enable_concurrency", enable_concurrency)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of the Timer trigger.
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter
    def crontab(self) -> Optional[pulumi.Input[str]]:
        """
        Set the timing trigger time of the Timer trigger.
        """
        return pulumi.get(self, "crontab")

    @crontab.setter
    def crontab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crontab", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Timer trigger.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableConcurrency")
    def enable_concurrency(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Timer trigger allows concurrency.
        """
        return pulumi.get(self, "enable_concurrency")

    @enable_concurrency.setter
    def enable_concurrency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_concurrency", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Timer trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last update time of the Timer trigger.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Timer trigger.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[str]]:
        """
        The Timer trigger sends the content payload of the request.
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        The retry count of the Timer trigger.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)


class Timer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 crontab: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_concurrency: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage vefaas timer
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vefaas.Timer("foo",
            crontab="*/10 * * * *",
            function_id="35ybaxxx")
        ```

        ## Import

        VefaasTimer can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vefaas/timer:Timer default FunctionId:Id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] crontab: Set the timing trigger time of the Timer trigger.
        :param pulumi.Input[str] description: The description of the Timer trigger.
        :param pulumi.Input[bool] enable_concurrency: Whether the Timer trigger allows concurrency.
        :param pulumi.Input[bool] enabled: Whether the Timer trigger is enabled.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input[str] name: The name of the Timer trigger.
        :param pulumi.Input[str] payload: The Timer trigger sends the content payload of the request.
        :param pulumi.Input[int] retries: The retry count of the Timer trigger.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TimerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vefaas timer
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vefaas.Timer("foo",
            crontab="*/10 * * * *",
            function_id="35ybaxxx")
        ```

        ## Import

        VefaasTimer can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vefaas/timer:Timer default FunctionId:Id
        ```

        :param str resource_name: The name of the resource.
        :param TimerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TimerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 crontab: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_concurrency: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TimerArgs.__new__(TimerArgs)

            if crontab is None and not opts.urn:
                raise TypeError("Missing required property 'crontab'")
            __props__.__dict__["crontab"] = crontab
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_concurrency"] = enable_concurrency
            __props__.__dict__["enabled"] = enabled
            if function_id is None and not opts.urn:
                raise TypeError("Missing required property 'function_id'")
            __props__.__dict__["function_id"] = function_id
            __props__.__dict__["name"] = name
            __props__.__dict__["payload"] = payload
            __props__.__dict__["retries"] = retries
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["last_update_time"] = None
        super(Timer, __self__).__init__(
            'volcengine:vefaas/timer:Timer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_time: Optional[pulumi.Input[str]] = None,
            crontab: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enable_concurrency: Optional[pulumi.Input[bool]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            function_id: Optional[pulumi.Input[str]] = None,
            last_update_time: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            payload: Optional[pulumi.Input[str]] = None,
            retries: Optional[pulumi.Input[int]] = None) -> 'Timer':
        """
        Get an existing Timer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] creation_time: The creation time of the Timer trigger.
        :param pulumi.Input[str] crontab: Set the timing trigger time of the Timer trigger.
        :param pulumi.Input[str] description: The description of the Timer trigger.
        :param pulumi.Input[bool] enable_concurrency: Whether the Timer trigger allows concurrency.
        :param pulumi.Input[bool] enabled: Whether the Timer trigger is enabled.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input[str] last_update_time: The last update time of the Timer trigger.
        :param pulumi.Input[str] name: The name of the Timer trigger.
        :param pulumi.Input[str] payload: The Timer trigger sends the content payload of the request.
        :param pulumi.Input[int] retries: The retry count of the Timer trigger.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TimerState.__new__(_TimerState)

        __props__.__dict__["creation_time"] = creation_time
        __props__.__dict__["crontab"] = crontab
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_concurrency"] = enable_concurrency
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["function_id"] = function_id
        __props__.__dict__["last_update_time"] = last_update_time
        __props__.__dict__["name"] = name
        __props__.__dict__["payload"] = payload
        __props__.__dict__["retries"] = retries
        return Timer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[str]:
        """
        The creation time of the Timer trigger.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def crontab(self) -> pulumi.Output[str]:
        """
        Set the timing trigger time of the Timer trigger.
        """
        return pulumi.get(self, "crontab")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the Timer trigger.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableConcurrency")
    def enable_concurrency(self) -> pulumi.Output[bool]:
        """
        Whether the Timer trigger allows concurrency.
        """
        return pulumi.get(self, "enable_concurrency")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the Timer trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Output[str]:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> pulumi.Output[str]:
        """
        The last update time of the Timer trigger.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Timer trigger.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def payload(self) -> pulumi.Output[str]:
        """
        The Timer trigger sends the content payload of the request.
        """
        return pulumi.get(self, "payload")

    @property
    @pulumi.getter
    def retries(self) -> pulumi.Output[int]:
        """
        The retry count of the Timer trigger.
        """
        return pulumi.get(self, "retries")

