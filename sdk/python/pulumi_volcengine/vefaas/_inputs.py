# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'FunctionEnvArgs',
    'FunctionNasStorageArgs',
    'FunctionNasStorageNasConfigArgs',
    'FunctionSourceAccessConfigArgs',
    'FunctionTlsConfigArgs',
    'FunctionTosMountConfigArgs',
    'FunctionTosMountConfigCredentialsArgs',
    'FunctionTosMountConfigMountPointArgs',
    'FunctionVpcConfigArgs',
    'KafkaTriggerKafkaCredentialsArgs',
    'ReleasesFilterArgs',
    'ReleasesOrderByArgs',
    'GetReleasesFilterArgs',
    'GetReleasesOrderByArgs',
]

@pulumi.input_type
class FunctionEnvArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The Key of the environment variable.
        :param pulumi.Input[str] value: The Value of the environment variable.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Key of the environment variable.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The Value of the environment variable.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FunctionNasStorageArgs:
    def __init__(__self__, *,
                 enable_nas: pulumi.Input[bool],
                 nas_configs: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionNasStorageNasConfigArgs']]]] = None):
        """
        :param pulumi.Input[bool] enable_nas: Whether to enable NAS storage mounting.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionNasStorageNasConfigArgs']]] nas_configs: The configuration of NAS.
        """
        pulumi.set(__self__, "enable_nas", enable_nas)
        if nas_configs is not None:
            pulumi.set(__self__, "nas_configs", nas_configs)

    @property
    @pulumi.getter(name="enableNas")
    def enable_nas(self) -> pulumi.Input[bool]:
        """
        Whether to enable NAS storage mounting.
        """
        return pulumi.get(self, "enable_nas")

    @enable_nas.setter
    def enable_nas(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_nas", value)

    @property
    @pulumi.getter(name="nasConfigs")
    def nas_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionNasStorageNasConfigArgs']]]]:
        """
        The configuration of NAS.
        """
        return pulumi.get(self, "nas_configs")

    @nas_configs.setter
    def nas_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionNasStorageNasConfigArgs']]]]):
        pulumi.set(self, "nas_configs", value)


@pulumi.input_type
class FunctionNasStorageNasConfigArgs:
    def __init__(__self__, *,
                 file_system_id: pulumi.Input[str],
                 local_mount_path: pulumi.Input[str],
                 mount_point_id: pulumi.Input[str],
                 remote_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] file_system_id: The ID of NAS file system.
        :param pulumi.Input[str] local_mount_path: The directory of Function local mount.
        :param pulumi.Input[str] mount_point_id: The ID of NAS mount point.
        :param pulumi.Input[str] remote_path: Remote directory of the file system.
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        pulumi.set(__self__, "mount_point_id", mount_point_id)
        pulumi.set(__self__, "remote_path", remote_path)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Input[str]:
        """
        The ID of NAS file system.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> pulumi.Input[str]:
        """
        The directory of Function local mount.
        """
        return pulumi.get(self, "local_mount_path")

    @local_mount_path.setter
    def local_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_mount_path", value)

    @property
    @pulumi.getter(name="mountPointId")
    def mount_point_id(self) -> pulumi.Input[str]:
        """
        The ID of NAS mount point.
        """
        return pulumi.get(self, "mount_point_id")

    @mount_point_id.setter
    def mount_point_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_point_id", value)

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> pulumi.Input[str]:
        """
        Remote directory of the file system.
        """
        return pulumi.get(self, "remote_path")

    @remote_path.setter
    def remote_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_path", value)


@pulumi.input_type
class FunctionSourceAccessConfigArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[bool],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[bool] password: The image repository password.
        :param pulumi.Input[str] username: Mirror repository username.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[bool]:
        """
        The image repository password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[bool]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Mirror repository username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class FunctionTlsConfigArgs:
    def __init__(__self__, *,
                 enable_log: pulumi.Input[bool],
                 tls_project_id: Optional[pulumi.Input[str]] = None,
                 tls_topic_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable_log: TLS log function switch.
        :param pulumi.Input[str] tls_project_id: The project ID of TLS log topic.
        :param pulumi.Input[str] tls_topic_id: The topic ID of TLS log topic.
        """
        pulumi.set(__self__, "enable_log", enable_log)
        if tls_project_id is not None:
            pulumi.set(__self__, "tls_project_id", tls_project_id)
        if tls_topic_id is not None:
            pulumi.set(__self__, "tls_topic_id", tls_topic_id)

    @property
    @pulumi.getter(name="enableLog")
    def enable_log(self) -> pulumi.Input[bool]:
        """
        TLS log function switch.
        """
        return pulumi.get(self, "enable_log")

    @enable_log.setter
    def enable_log(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_log", value)

    @property
    @pulumi.getter(name="tlsProjectId")
    def tls_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The project ID of TLS log topic.
        """
        return pulumi.get(self, "tls_project_id")

    @tls_project_id.setter
    def tls_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_project_id", value)

    @property
    @pulumi.getter(name="tlsTopicId")
    def tls_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The topic ID of TLS log topic.
        """
        return pulumi.get(self, "tls_topic_id")

    @tls_topic_id.setter
    def tls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_topic_id", value)


@pulumi.input_type
class FunctionTosMountConfigArgs:
    def __init__(__self__, *,
                 enable_tos: pulumi.Input[bool],
                 credentials: Optional[pulumi.Input['FunctionTosMountConfigCredentialsArgs']] = None,
                 mount_points: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTosMountConfigMountPointArgs']]]] = None):
        """
        :param pulumi.Input[bool] enable_tos: Whether to enable TOS storage mounting.
        :param pulumi.Input['FunctionTosMountConfigCredentialsArgs'] credentials: After enabling TOS, you need to provide an AKSK with access rights to the TOS domain name. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionTosMountConfigMountPointArgs']]] mount_points: After enabling TOS, you need to provide a TOS storage configuration list, with a maximum of 5 items.
        """
        pulumi.set(__self__, "enable_tos", enable_tos)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if mount_points is not None:
            pulumi.set(__self__, "mount_points", mount_points)

    @property
    @pulumi.getter(name="enableTos")
    def enable_tos(self) -> pulumi.Input[bool]:
        """
        Whether to enable TOS storage mounting.
        """
        return pulumi.get(self, "enable_tos")

    @enable_tos.setter
    def enable_tos(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_tos", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['FunctionTosMountConfigCredentialsArgs']]:
        """
        After enabling TOS, you need to provide an AKSK with access rights to the TOS domain name. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['FunctionTosMountConfigCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="mountPoints")
    def mount_points(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTosMountConfigMountPointArgs']]]]:
        """
        After enabling TOS, you need to provide a TOS storage configuration list, with a maximum of 5 items.
        """
        return pulumi.get(self, "mount_points")

    @mount_points.setter
    def mount_points(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTosMountConfigMountPointArgs']]]]):
        pulumi.set(self, "mount_points", value)


@pulumi.input_type
class FunctionTosMountConfigCredentialsArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] access_key_id: The AccessKey ID (AK) of the Volcano Engine account.
        :param pulumi.Input[str] secret_access_key: The Secret Access Key (SK) of the Volcano Engine account.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        """
        The AccessKey ID (AK) of the Volcano Engine account.
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        """
        The Secret Access Key (SK) of the Volcano Engine account.
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)


@pulumi.input_type
class FunctionTosMountConfigMountPointArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 bucket_path: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 local_mount_path: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: TOS bucket.
        :param pulumi.Input[str] bucket_path: The mounted TOS Bucket path.
        :param pulumi.Input[str] endpoint: TOS Access domain name.
        :param pulumi.Input[str] local_mount_path: Function local mount directory.
        :param pulumi.Input[bool] read_only: Function local directory access permissions. After mounting the TOS Bucket, whether the function local mount directory has read-only permissions.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_path", bucket_path)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        TOS bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPath")
    def bucket_path(self) -> pulumi.Input[str]:
        """
        The mounted TOS Bucket path.
        """
        return pulumi.get(self, "bucket_path")

    @bucket_path.setter
    def bucket_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_path", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        TOS Access domain name.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> pulumi.Input[str]:
        """
        Function local mount directory.
        """
        return pulumi.get(self, "local_mount_path")

    @local_mount_path.setter
    def local_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_mount_path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Function local directory access permissions. After mounting the TOS Bucket, whether the function local mount directory has read-only permissions.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class FunctionVpcConfigArgs:
    def __init__(__self__, *,
                 enable_vpc: pulumi.Input[bool],
                 enable_shared_internet_access: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable_vpc: Whether the function enables private network access.
        :param pulumi.Input[bool] enable_shared_internet_access: Function access to the public network switch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The ID of security group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The ID of subnet.
        :param pulumi.Input[str] vpc_id: The ID of VPC.
        """
        pulumi.set(__self__, "enable_vpc", enable_vpc)
        if enable_shared_internet_access is not None:
            pulumi.set(__self__, "enable_shared_internet_access", enable_shared_internet_access)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="enableVpc")
    def enable_vpc(self) -> pulumi.Input[bool]:
        """
        Whether the function enables private network access.
        """
        return pulumi.get(self, "enable_vpc")

    @enable_vpc.setter
    def enable_vpc(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_vpc", value)

    @property
    @pulumi.getter(name="enableSharedInternetAccess")
    def enable_shared_internet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Function access to the public network switch.
        """
        return pulumi.get(self, "enable_shared_internet_access")

    @enable_shared_internet_access.setter
    def enable_shared_internet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_shared_internet_access", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ID of security group.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ID of subnet.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class KafkaTriggerKafkaCredentialsArgs:
    def __init__(__self__, *,
                 mechanism: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] mechanism: Kafka authentication mechanism.
        :param pulumi.Input[str] password: The SASL/PLAIN user password set when creating a Kafka instance.
        :param pulumi.Input[str] username: The SASL/PLAIN user name set when creating a Kafka instance.
        """
        pulumi.set(__self__, "mechanism", mechanism)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def mechanism(self) -> pulumi.Input[str]:
        """
        Kafka authentication mechanism.
        """
        return pulumi.get(self, "mechanism")

    @mechanism.setter
    def mechanism(self, value: pulumi.Input[str]):
        pulumi.set(self, "mechanism", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The SASL/PLAIN user password set when creating a Kafka instance.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The SASL/PLAIN user name set when creating a Kafka instance.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ReleasesFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter key enumeration.
        :param Sequence[str] values: The filtering value of the query.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter key enumeration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        The filtering value of the query.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ReleasesOrderByArgs:
    def __init__(__self__, *,
                 ascend: Optional[bool] = None,
                 key: Optional[str] = None):
        """
        :param bool ascend: Whether the sorting result is sorted in ascending order.
        :param str key: Key names used for sorting.
        """
        if ascend is not None:
            pulumi.set(__self__, "ascend", ascend)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def ascend(self) -> Optional[bool]:
        """
        Whether the sorting result is sorted in ascending order.
        """
        return pulumi.get(self, "ascend")

    @ascend.setter
    def ascend(self, value: Optional[bool]):
        pulumi.set(self, "ascend", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key names used for sorting.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class GetReleasesFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter key enumeration.
        :param Sequence[str] values: The filtering value of the query.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter key enumeration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        The filtering value of the query.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetReleasesOrderByArgs:
    def __init__(__self__, *,
                 ascend: Optional[bool] = None,
                 key: Optional[str] = None):
        """
        :param bool ascend: Whether the sorting result is sorted in ascending order.
        :param str key: Key names used for sorting.
        """
        if ascend is not None:
            pulumi.set(__self__, "ascend", ascend)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def ascend(self) -> Optional[bool]:
        """
        Whether the sorting result is sorted in ascending order.
        """
        return pulumi.get(self, "ascend")

    @ascend.setter
    def ascend(self, value: Optional[bool]):
        pulumi.set(self, "ascend", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key names used for sorting.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)


