# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KafkaTriggerArgs', 'KafkaTrigger']

@pulumi.input_type
class KafkaTriggerArgs:
    def __init__(__self__, *,
                 function_id: pulumi.Input[str],
                 kafka_credentials: pulumi.Input['KafkaTriggerKafkaCredentialsArgs'],
                 mq_instance_id: pulumi.Input[str],
                 topic_name: pulumi.Input[str],
                 batch_flush_duration_milliseconds: Optional[pulumi.Input[int]] = None,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 maximum_retry_attempts: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 starting_position: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KafkaTrigger resource.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input['KafkaTriggerKafkaCredentialsArgs'] kafka_credentials: Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] mq_instance_id: The instance ID of Message queue Kafka.
        :param pulumi.Input[str] topic_name: The Topic name of the message queue Kafka instance.
        :param pulumi.Input[int] batch_flush_duration_milliseconds: The maximum waiting time for batch consumption of triggers.
        :param pulumi.Input[int] batch_size: The number of messages per batch consumed by the trigger in bulk.
        :param pulumi.Input[str] description: The description of the Kafka trigger.
        :param pulumi.Input[bool] enabled: Whether to enable triggers at the same time as creating them.
        :param pulumi.Input[int] maximum_retry_attempts: The maximum number of retries when a function has a runtime error.
        :param pulumi.Input[str] name: The name of the Kafka trigger.
        :param pulumi.Input[str] starting_position: Specify the location where the messages in the Topic start to be consumed.
        """
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "kafka_credentials", kafka_credentials)
        pulumi.set(__self__, "mq_instance_id", mq_instance_id)
        pulumi.set(__self__, "topic_name", topic_name)
        if batch_flush_duration_milliseconds is not None:
            pulumi.set(__self__, "batch_flush_duration_milliseconds", batch_flush_duration_milliseconds)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if maximum_retry_attempts is not None:
            pulumi.set(__self__, "maximum_retry_attempts", maximum_retry_attempts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if starting_position is not None:
            pulumi.set(__self__, "starting_position", starting_position)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Input[str]:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="kafkaCredentials")
    def kafka_credentials(self) -> pulumi.Input['KafkaTriggerKafkaCredentialsArgs']:
        """
        Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "kafka_credentials")

    @kafka_credentials.setter
    def kafka_credentials(self, value: pulumi.Input['KafkaTriggerKafkaCredentialsArgs']):
        pulumi.set(self, "kafka_credentials", value)

    @property
    @pulumi.getter(name="mqInstanceId")
    def mq_instance_id(self) -> pulumi.Input[str]:
        """
        The instance ID of Message queue Kafka.
        """
        return pulumi.get(self, "mq_instance_id")

    @mq_instance_id.setter
    def mq_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "mq_instance_id", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        The Topic name of the message queue Kafka instance.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="batchFlushDurationMilliseconds")
    def batch_flush_duration_milliseconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum waiting time for batch consumption of triggers.
        """
        return pulumi.get(self, "batch_flush_duration_milliseconds")

    @batch_flush_duration_milliseconds.setter
    def batch_flush_duration_milliseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_flush_duration_milliseconds", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        """
        The number of messages per batch consumed by the trigger in bulk.
        """
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Kafka trigger.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable triggers at the same time as creating them.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maximumRetryAttempts")
    def maximum_retry_attempts(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of retries when a function has a runtime error.
        """
        return pulumi.get(self, "maximum_retry_attempts")

    @maximum_retry_attempts.setter
    def maximum_retry_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_retry_attempts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Kafka trigger.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="startingPosition")
    def starting_position(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the location where the messages in the Topic start to be consumed.
        """
        return pulumi.get(self, "starting_position")

    @starting_position.setter
    def starting_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_position", value)


@pulumi.input_type
class _KafkaTriggerState:
    def __init__(__self__, *,
                 batch_flush_duration_milliseconds: Optional[pulumi.Input[int]] = None,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 consumer_group: Optional[pulumi.Input[str]] = None,
                 creation_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 kafka_credentials: Optional[pulumi.Input['KafkaTriggerKafkaCredentialsArgs']] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 maximum_retry_attempts: Optional[pulumi.Input[int]] = None,
                 mq_instance_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 starting_position: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering KafkaTrigger resources.
        :param pulumi.Input[int] batch_flush_duration_milliseconds: The maximum waiting time for batch consumption of triggers.
        :param pulumi.Input[int] batch_size: The number of messages per batch consumed by the trigger in bulk.
        :param pulumi.Input[str] consumer_group: The consumer group name of the message queue Kafka instance.
        :param pulumi.Input[str] creation_time: The creation time of the Kafka trigger.
        :param pulumi.Input[str] description: The description of the Kafka trigger.
        :param pulumi.Input[bool] enabled: Whether to enable triggers at the same time as creating them.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input['KafkaTriggerKafkaCredentialsArgs'] kafka_credentials: Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] last_update_time: The last update time of the Kafka trigger.
        :param pulumi.Input[int] maximum_retry_attempts: The maximum number of retries when a function has a runtime error.
        :param pulumi.Input[str] mq_instance_id: The instance ID of Message queue Kafka.
        :param pulumi.Input[str] name: The name of the Kafka trigger.
        :param pulumi.Input[str] starting_position: Specify the location where the messages in the Topic start to be consumed.
        :param pulumi.Input[str] status: The status of Kafka trigger.
        :param pulumi.Input[str] topic_name: The Topic name of the message queue Kafka instance.
        """
        if batch_flush_duration_milliseconds is not None:
            pulumi.set(__self__, "batch_flush_duration_milliseconds", batch_flush_duration_milliseconds)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if consumer_group is not None:
            pulumi.set(__self__, "consumer_group", consumer_group)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if kafka_credentials is not None:
            pulumi.set(__self__, "kafka_credentials", kafka_credentials)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if maximum_retry_attempts is not None:
            pulumi.set(__self__, "maximum_retry_attempts", maximum_retry_attempts)
        if mq_instance_id is not None:
            pulumi.set(__self__, "mq_instance_id", mq_instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if starting_position is not None:
            pulumi.set(__self__, "starting_position", starting_position)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="batchFlushDurationMilliseconds")
    def batch_flush_duration_milliseconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum waiting time for batch consumption of triggers.
        """
        return pulumi.get(self, "batch_flush_duration_milliseconds")

    @batch_flush_duration_milliseconds.setter
    def batch_flush_duration_milliseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_flush_duration_milliseconds", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        """
        The number of messages per batch consumed by the trigger in bulk.
        """
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> Optional[pulumi.Input[str]]:
        """
        The consumer group name of the message queue Kafka instance.
        """
        return pulumi.get(self, "consumer_group")

    @consumer_group.setter
    def consumer_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_group", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of the Kafka trigger.
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the Kafka trigger.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable triggers at the same time as creating them.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="kafkaCredentials")
    def kafka_credentials(self) -> Optional[pulumi.Input['KafkaTriggerKafkaCredentialsArgs']]:
        """
        Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "kafka_credentials")

    @kafka_credentials.setter
    def kafka_credentials(self, value: Optional[pulumi.Input['KafkaTriggerKafkaCredentialsArgs']]):
        pulumi.set(self, "kafka_credentials", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last update time of the Kafka trigger.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter(name="maximumRetryAttempts")
    def maximum_retry_attempts(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of retries when a function has a runtime error.
        """
        return pulumi.get(self, "maximum_retry_attempts")

    @maximum_retry_attempts.setter
    def maximum_retry_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_retry_attempts", value)

    @property
    @pulumi.getter(name="mqInstanceId")
    def mq_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The instance ID of Message queue Kafka.
        """
        return pulumi.get(self, "mq_instance_id")

    @mq_instance_id.setter
    def mq_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mq_instance_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Kafka trigger.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="startingPosition")
    def starting_position(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the location where the messages in the Topic start to be consumed.
        """
        return pulumi.get(self, "starting_position")

    @starting_position.setter
    def starting_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_position", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of Kafka trigger.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Topic name of the message queue Kafka instance.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


class KafkaTrigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 batch_flush_duration_milliseconds: Optional[pulumi.Input[int]] = None,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 kafka_credentials: Optional[pulumi.Input[pulumi.InputType['KafkaTriggerKafkaCredentialsArgs']]] = None,
                 maximum_retry_attempts: Optional[pulumi.Input[int]] = None,
                 mq_instance_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 starting_position: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage vefaas kafka trigger
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vefaas.KafkaTrigger("foo",
            function_id="35ybaxxx",
            mq_instance_id="kafka-cnngmbeq10mcxxxx",
            topic_name="topic",
            kafka_credentials=volcengine.vefaas.KafkaTriggerKafkaCredentialsArgs(
                password="Waxxxxxx",
                username="test-1",
                mechanism="PLAIN",
            ),
            batch_size=100,
            description="modify")
        ```

        ## Import

        VefaasKafkaTrigger can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vefaas/kafkaTrigger:KafkaTrigger default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] batch_flush_duration_milliseconds: The maximum waiting time for batch consumption of triggers.
        :param pulumi.Input[int] batch_size: The number of messages per batch consumed by the trigger in bulk.
        :param pulumi.Input[str] description: The description of the Kafka trigger.
        :param pulumi.Input[bool] enabled: Whether to enable triggers at the same time as creating them.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input[pulumi.InputType['KafkaTriggerKafkaCredentialsArgs']] kafka_credentials: Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[int] maximum_retry_attempts: The maximum number of retries when a function has a runtime error.
        :param pulumi.Input[str] mq_instance_id: The instance ID of Message queue Kafka.
        :param pulumi.Input[str] name: The name of the Kafka trigger.
        :param pulumi.Input[str] starting_position: Specify the location where the messages in the Topic start to be consumed.
        :param pulumi.Input[str] topic_name: The Topic name of the message queue Kafka instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KafkaTriggerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vefaas kafka trigger
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vefaas.KafkaTrigger("foo",
            function_id="35ybaxxx",
            mq_instance_id="kafka-cnngmbeq10mcxxxx",
            topic_name="topic",
            kafka_credentials=volcengine.vefaas.KafkaTriggerKafkaCredentialsArgs(
                password="Waxxxxxx",
                username="test-1",
                mechanism="PLAIN",
            ),
            batch_size=100,
            description="modify")
        ```

        ## Import

        VefaasKafkaTrigger can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:vefaas/kafkaTrigger:KafkaTrigger default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param KafkaTriggerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KafkaTriggerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 batch_flush_duration_milliseconds: Optional[pulumi.Input[int]] = None,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 kafka_credentials: Optional[pulumi.Input[pulumi.InputType['KafkaTriggerKafkaCredentialsArgs']]] = None,
                 maximum_retry_attempts: Optional[pulumi.Input[int]] = None,
                 mq_instance_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 starting_position: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KafkaTriggerArgs.__new__(KafkaTriggerArgs)

            __props__.__dict__["batch_flush_duration_milliseconds"] = batch_flush_duration_milliseconds
            __props__.__dict__["batch_size"] = batch_size
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            if function_id is None and not opts.urn:
                raise TypeError("Missing required property 'function_id'")
            __props__.__dict__["function_id"] = function_id
            if kafka_credentials is None and not opts.urn:
                raise TypeError("Missing required property 'kafka_credentials'")
            __props__.__dict__["kafka_credentials"] = kafka_credentials
            __props__.__dict__["maximum_retry_attempts"] = maximum_retry_attempts
            if mq_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'mq_instance_id'")
            __props__.__dict__["mq_instance_id"] = mq_instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["starting_position"] = starting_position
            if topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'topic_name'")
            __props__.__dict__["topic_name"] = topic_name
            __props__.__dict__["consumer_group"] = None
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["last_update_time"] = None
            __props__.__dict__["status"] = None
        super(KafkaTrigger, __self__).__init__(
            'volcengine:vefaas/kafkaTrigger:KafkaTrigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            batch_flush_duration_milliseconds: Optional[pulumi.Input[int]] = None,
            batch_size: Optional[pulumi.Input[int]] = None,
            consumer_group: Optional[pulumi.Input[str]] = None,
            creation_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            function_id: Optional[pulumi.Input[str]] = None,
            kafka_credentials: Optional[pulumi.Input[pulumi.InputType['KafkaTriggerKafkaCredentialsArgs']]] = None,
            last_update_time: Optional[pulumi.Input[str]] = None,
            maximum_retry_attempts: Optional[pulumi.Input[int]] = None,
            mq_instance_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            starting_position: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            topic_name: Optional[pulumi.Input[str]] = None) -> 'KafkaTrigger':
        """
        Get an existing KafkaTrigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] batch_flush_duration_milliseconds: The maximum waiting time for batch consumption of triggers.
        :param pulumi.Input[int] batch_size: The number of messages per batch consumed by the trigger in bulk.
        :param pulumi.Input[str] consumer_group: The consumer group name of the message queue Kafka instance.
        :param pulumi.Input[str] creation_time: The creation time of the Kafka trigger.
        :param pulumi.Input[str] description: The description of the Kafka trigger.
        :param pulumi.Input[bool] enabled: Whether to enable triggers at the same time as creating them.
        :param pulumi.Input[str] function_id: The ID of Function.
        :param pulumi.Input[pulumi.InputType['KafkaTriggerKafkaCredentialsArgs']] kafka_credentials: Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] last_update_time: The last update time of the Kafka trigger.
        :param pulumi.Input[int] maximum_retry_attempts: The maximum number of retries when a function has a runtime error.
        :param pulumi.Input[str] mq_instance_id: The instance ID of Message queue Kafka.
        :param pulumi.Input[str] name: The name of the Kafka trigger.
        :param pulumi.Input[str] starting_position: Specify the location where the messages in the Topic start to be consumed.
        :param pulumi.Input[str] status: The status of Kafka trigger.
        :param pulumi.Input[str] topic_name: The Topic name of the message queue Kafka instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KafkaTriggerState.__new__(_KafkaTriggerState)

        __props__.__dict__["batch_flush_duration_milliseconds"] = batch_flush_duration_milliseconds
        __props__.__dict__["batch_size"] = batch_size
        __props__.__dict__["consumer_group"] = consumer_group
        __props__.__dict__["creation_time"] = creation_time
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["function_id"] = function_id
        __props__.__dict__["kafka_credentials"] = kafka_credentials
        __props__.__dict__["last_update_time"] = last_update_time
        __props__.__dict__["maximum_retry_attempts"] = maximum_retry_attempts
        __props__.__dict__["mq_instance_id"] = mq_instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["starting_position"] = starting_position
        __props__.__dict__["status"] = status
        __props__.__dict__["topic_name"] = topic_name
        return KafkaTrigger(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="batchFlushDurationMilliseconds")
    def batch_flush_duration_milliseconds(self) -> pulumi.Output[int]:
        """
        The maximum waiting time for batch consumption of triggers.
        """
        return pulumi.get(self, "batch_flush_duration_milliseconds")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> pulumi.Output[int]:
        """
        The number of messages per batch consumed by the trigger in bulk.
        """
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> pulumi.Output[str]:
        """
        The consumer group name of the message queue Kafka instance.
        """
        return pulumi.get(self, "consumer_group")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[str]:
        """
        The creation time of the Kafka trigger.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the Kafka trigger.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether to enable triggers at the same time as creating them.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Output[str]:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="kafkaCredentials")
    def kafka_credentials(self) -> pulumi.Output['outputs.KafkaTriggerKafkaCredentials']:
        """
        Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "kafka_credentials")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> pulumi.Output[str]:
        """
        The last update time of the Kafka trigger.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter(name="maximumRetryAttempts")
    def maximum_retry_attempts(self) -> pulumi.Output[int]:
        """
        The maximum number of retries when a function has a runtime error.
        """
        return pulumi.get(self, "maximum_retry_attempts")

    @property
    @pulumi.getter(name="mqInstanceId")
    def mq_instance_id(self) -> pulumi.Output[str]:
        """
        The instance ID of Message queue Kafka.
        """
        return pulumi.get(self, "mq_instance_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Kafka trigger.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startingPosition")
    def starting_position(self) -> pulumi.Output[str]:
        """
        Specify the location where the messages in the Topic start to be consumed.
        """
        return pulumi.get(self, "starting_position")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of Kafka trigger.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[str]:
        """
        The Topic name of the message queue Kafka instance.
        """
        return pulumi.get(self, "topic_name")

