# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FunctionEnv',
    'FunctionNasStorage',
    'FunctionNasStorageNasConfig',
    'FunctionSourceAccessConfig',
    'FunctionTlsConfig',
    'FunctionTosMountConfig',
    'FunctionTosMountConfigCredentials',
    'FunctionTosMountConfigMountPoint',
    'FunctionVpcConfig',
    'FunctionsItemResult',
    'FunctionsItemEnvResult',
    'FunctionsItemNasStorageResult',
    'FunctionsItemNasStorageNasConfigResult',
    'FunctionsItemTagResult',
    'FunctionsItemTlsConfigResult',
    'FunctionsItemTosMountConfigResult',
    'FunctionsItemTosMountConfigCredentialResult',
    'FunctionsItemTosMountConfigMountPointResult',
    'FunctionsItemVpcConfigResult',
    'KafkaTriggerKafkaCredentials',
    'KafkaTriggersItemResult',
    'ReleasesFilterResult',
    'ReleasesItemResult',
    'ReleasesOrderByResult',
    'TimersItemResult',
    'GetFunctionsItemResult',
    'GetFunctionsItemEnvResult',
    'GetFunctionsItemNasStorageResult',
    'GetFunctionsItemNasStorageNasConfigResult',
    'GetFunctionsItemTagResult',
    'GetFunctionsItemTlsConfigResult',
    'GetFunctionsItemTosMountConfigResult',
    'GetFunctionsItemTosMountConfigCredentialResult',
    'GetFunctionsItemTosMountConfigMountPointResult',
    'GetFunctionsItemVpcConfigResult',
    'GetKafkaTriggersItemResult',
    'GetReleasesFilterResult',
    'GetReleasesItemResult',
    'GetReleasesOrderByResult',
    'GetTimersItemResult',
]

@pulumi.output_type
class FunctionEnv(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of the environment variable.
        :param str value: The Value of the environment variable.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of the environment variable.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of the environment variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FunctionNasStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableNas":
            suggest = "enable_nas"
        elif key == "nasConfigs":
            suggest = "nas_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionNasStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionNasStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionNasStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_nas: bool,
                 nas_configs: Optional[Sequence['outputs.FunctionNasStorageNasConfig']] = None):
        """
        :param bool enable_nas: Whether to enable NAS storage mounting.
        :param Sequence['FunctionNasStorageNasConfigArgs'] nas_configs: The configuration of NAS.
        """
        pulumi.set(__self__, "enable_nas", enable_nas)
        if nas_configs is not None:
            pulumi.set(__self__, "nas_configs", nas_configs)

    @property
    @pulumi.getter(name="enableNas")
    def enable_nas(self) -> bool:
        """
        Whether to enable NAS storage mounting.
        """
        return pulumi.get(self, "enable_nas")

    @property
    @pulumi.getter(name="nasConfigs")
    def nas_configs(self) -> Optional[Sequence['outputs.FunctionNasStorageNasConfig']]:
        """
        The configuration of NAS.
        """
        return pulumi.get(self, "nas_configs")


@pulumi.output_type
class FunctionNasStorageNasConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileSystemId":
            suggest = "file_system_id"
        elif key == "localMountPath":
            suggest = "local_mount_path"
        elif key == "mountPointId":
            suggest = "mount_point_id"
        elif key == "remotePath":
            suggest = "remote_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionNasStorageNasConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionNasStorageNasConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionNasStorageNasConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_system_id: str,
                 local_mount_path: str,
                 mount_point_id: str,
                 remote_path: str):
        """
        :param str file_system_id: The ID of NAS file system.
        :param str local_mount_path: The directory of Function local mount.
        :param str mount_point_id: The ID of NAS mount point.
        :param str remote_path: Remote directory of the file system.
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        pulumi.set(__self__, "mount_point_id", mount_point_id)
        pulumi.set(__self__, "remote_path", remote_path)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The ID of NAS file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> str:
        """
        The directory of Function local mount.
        """
        return pulumi.get(self, "local_mount_path")

    @property
    @pulumi.getter(name="mountPointId")
    def mount_point_id(self) -> str:
        """
        The ID of NAS mount point.
        """
        return pulumi.get(self, "mount_point_id")

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> str:
        """
        Remote directory of the file system.
        """
        return pulumi.get(self, "remote_path")


@pulumi.output_type
class FunctionSourceAccessConfig(dict):
    def __init__(__self__, *,
                 password: bool,
                 username: str):
        """
        :param bool password: The image repository password.
        :param str username: Mirror repository username.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> bool:
        """
        The image repository password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Mirror repository username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class FunctionTlsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableLog":
            suggest = "enable_log"
        elif key == "tlsProjectId":
            suggest = "tls_project_id"
        elif key == "tlsTopicId":
            suggest = "tls_topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTlsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTlsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTlsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_log: bool,
                 tls_project_id: Optional[str] = None,
                 tls_topic_id: Optional[str] = None):
        """
        :param bool enable_log: TLS log function switch.
        :param str tls_project_id: The project ID of TLS log topic.
        :param str tls_topic_id: The topic ID of TLS log topic.
        """
        pulumi.set(__self__, "enable_log", enable_log)
        if tls_project_id is not None:
            pulumi.set(__self__, "tls_project_id", tls_project_id)
        if tls_topic_id is not None:
            pulumi.set(__self__, "tls_topic_id", tls_topic_id)

    @property
    @pulumi.getter(name="enableLog")
    def enable_log(self) -> bool:
        """
        TLS log function switch.
        """
        return pulumi.get(self, "enable_log")

    @property
    @pulumi.getter(name="tlsProjectId")
    def tls_project_id(self) -> Optional[str]:
        """
        The project ID of TLS log topic.
        """
        return pulumi.get(self, "tls_project_id")

    @property
    @pulumi.getter(name="tlsTopicId")
    def tls_topic_id(self) -> Optional[str]:
        """
        The topic ID of TLS log topic.
        """
        return pulumi.get(self, "tls_topic_id")


@pulumi.output_type
class FunctionTosMountConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableTos":
            suggest = "enable_tos"
        elif key == "mountPoints":
            suggest = "mount_points"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTosMountConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTosMountConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTosMountConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_tos: bool,
                 credentials: Optional['outputs.FunctionTosMountConfigCredentials'] = None,
                 mount_points: Optional[Sequence['outputs.FunctionTosMountConfigMountPoint']] = None):
        """
        :param bool enable_tos: Whether to enable TOS storage mounting.
        :param 'FunctionTosMountConfigCredentialsArgs' credentials: After enabling TOS, you need to provide an AKSK with access rights to the TOS domain name. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param Sequence['FunctionTosMountConfigMountPointArgs'] mount_points: After enabling TOS, you need to provide a TOS storage configuration list, with a maximum of 5 items.
        """
        pulumi.set(__self__, "enable_tos", enable_tos)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if mount_points is not None:
            pulumi.set(__self__, "mount_points", mount_points)

    @property
    @pulumi.getter(name="enableTos")
    def enable_tos(self) -> bool:
        """
        Whether to enable TOS storage mounting.
        """
        return pulumi.get(self, "enable_tos")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.FunctionTosMountConfigCredentials']:
        """
        After enabling TOS, you need to provide an AKSK with access rights to the TOS domain name. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="mountPoints")
    def mount_points(self) -> Optional[Sequence['outputs.FunctionTosMountConfigMountPoint']]:
        """
        After enabling TOS, you need to provide a TOS storage configuration list, with a maximum of 5 items.
        """
        return pulumi.get(self, "mount_points")


@pulumi.output_type
class FunctionTosMountConfigCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTosMountConfigCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTosMountConfigCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTosMountConfigCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: str,
                 secret_access_key: str):
        """
        :param str access_key_id: The AccessKey ID (AK) of the Volcano Engine account.
        :param str secret_access_key: The Secret Access Key (SK) of the Volcano Engine account.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        """
        The AccessKey ID (AK) of the Volcano Engine account.
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        """
        The Secret Access Key (SK) of the Volcano Engine account.
        """
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class FunctionTosMountConfigMountPoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "bucketPath":
            suggest = "bucket_path"
        elif key == "localMountPath":
            suggest = "local_mount_path"
        elif key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTosMountConfigMountPoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTosMountConfigMountPoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTosMountConfigMountPoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 bucket_path: str,
                 endpoint: str,
                 local_mount_path: str,
                 read_only: Optional[bool] = None):
        """
        :param str bucket_name: TOS bucket.
        :param str bucket_path: The mounted TOS Bucket path.
        :param str endpoint: TOS Access domain name.
        :param str local_mount_path: Function local mount directory.
        :param bool read_only: Function local directory access permissions. After mounting the TOS Bucket, whether the function local mount directory has read-only permissions.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_path", bucket_path)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        TOS bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketPath")
    def bucket_path(self) -> str:
        """
        The mounted TOS Bucket path.
        """
        return pulumi.get(self, "bucket_path")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        TOS Access domain name.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> str:
        """
        Function local mount directory.
        """
        return pulumi.get(self, "local_mount_path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Function local directory access permissions. After mounting the TOS Bucket, whether the function local mount directory has read-only permissions.
        """
        return pulumi.get(self, "read_only")


@pulumi.output_type
class FunctionVpcConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableVpc":
            suggest = "enable_vpc"
        elif key == "enableSharedInternetAccess":
            suggest = "enable_shared_internet_access"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_vpc: bool,
                 enable_shared_internet_access: Optional[bool] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 subnet_ids: Optional[Sequence[str]] = None,
                 vpc_id: Optional[str] = None):
        """
        :param bool enable_vpc: Whether the function enables private network access.
        :param bool enable_shared_internet_access: Function access to the public network switch.
        :param Sequence[str] security_group_ids: The ID of security group.
        :param Sequence[str] subnet_ids: The ID of subnet.
        :param str vpc_id: The ID of VPC.
        """
        pulumi.set(__self__, "enable_vpc", enable_vpc)
        if enable_shared_internet_access is not None:
            pulumi.set(__self__, "enable_shared_internet_access", enable_shared_internet_access)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="enableVpc")
    def enable_vpc(self) -> bool:
        """
        Whether the function enables private network access.
        """
        return pulumi.get(self, "enable_vpc")

    @property
    @pulumi.getter(name="enableSharedInternetAccess")
    def enable_shared_internet_access(self) -> Optional[bool]:
        """
        Function access to the public network switch.
        """
        return pulumi.get(self, "enable_shared_internet_access")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        The ID of security group.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[str]]:
        """
        The ID of subnet.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        The ID of VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class FunctionsItemResult(dict):
    def __init__(__self__, *,
                 code_size: int,
                 code_size_limit: int,
                 command: str,
                 cpu_strategy: str,
                 creation_time: str,
                 description: str,
                 envs: Sequence['outputs.FunctionsItemEnvResult'],
                 exclusive_mode: bool,
                 id: str,
                 initializer_sec: int,
                 instance_type: str,
                 last_update_time: str,
                 max_concurrency: int,
                 memory_mb: int,
                 name: str,
                 nas_storages: Sequence['outputs.FunctionsItemNasStorageResult'],
                 owner: str,
                 port: int,
                 request_timeout: int,
                 runtime: str,
                 source_location: str,
                 source_type: str,
                 tags: Sequence['outputs.FunctionsItemTagResult'],
                 tls_configs: Sequence['outputs.FunctionsItemTlsConfigResult'],
                 tos_mount_configs: Sequence['outputs.FunctionsItemTosMountConfigResult'],
                 triggers_count: int,
                 vpc_configs: Sequence['outputs.FunctionsItemVpcConfigResult']):
        """
        :param int code_size: The size of code package.
        :param int code_size_limit: Maximum code package size.
        :param str command: The custom startup command for the instance.
        :param str cpu_strategy: Function CPU charging policy.
        :param str creation_time: Creation time.
        :param str description: The description of Function.
        :param Sequence['FunctionsItemEnvArgs'] envs: Function environment variable.
        :param bool exclusive_mode: Exclusive mode switch.
        :param str id: The ID of Function.
        :param int initializer_sec: Function to initialize timeout configuration.
        :param str instance_type: The instance type of the function instance.
        :param str last_update_time: Update time.
        :param int max_concurrency: Maximum concurrency of a single instance.
        :param int memory_mb: Maximum memory for a single instance.
        :param str name: The name of Function.
        :param Sequence['FunctionsItemNasStorageArgs'] nas_storages: The configuration of file storage NAS mount.
        :param str owner: The owner of Function.
        :param int port: Custom listening port for the instance.
        :param int request_timeout: Request timeout (in seconds).
        :param str runtime: The runtime of Function.
        :param str source_location: The source address of the code/image.
        :param str source_type: Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        :param Sequence['FunctionsItemTagArgs'] tags: Tags.
        :param Sequence['FunctionsItemTlsConfigArgs'] tls_configs: Function log configuration.
        :param Sequence['FunctionsItemTosMountConfigArgs'] tos_mount_configs: The configuration of Object Storage TOS mount.
        :param int triggers_count: The number of triggers for this Function.
        :param Sequence['FunctionsItemVpcConfigArgs'] vpc_configs: The configuration of VPC.
        """
        pulumi.set(__self__, "code_size", code_size)
        pulumi.set(__self__, "code_size_limit", code_size_limit)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "cpu_strategy", cpu_strategy)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "envs", envs)
        pulumi.set(__self__, "exclusive_mode", exclusive_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "initializer_sec", initializer_sec)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "memory_mb", memory_mb)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nas_storages", nas_storages)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "request_timeout", request_timeout)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "source_location", source_location)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tls_configs", tls_configs)
        pulumi.set(__self__, "tos_mount_configs", tos_mount_configs)
        pulumi.set(__self__, "triggers_count", triggers_count)
        pulumi.set(__self__, "vpc_configs", vpc_configs)

    @property
    @pulumi.getter(name="codeSize")
    def code_size(self) -> int:
        """
        The size of code package.
        """
        return pulumi.get(self, "code_size")

    @property
    @pulumi.getter(name="codeSizeLimit")
    def code_size_limit(self) -> int:
        """
        Maximum code package size.
        """
        return pulumi.get(self, "code_size_limit")

    @property
    @pulumi.getter
    def command(self) -> str:
        """
        The custom startup command for the instance.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="cpuStrategy")
    def cpu_strategy(self) -> str:
        """
        Function CPU charging policy.
        """
        return pulumi.get(self, "cpu_strategy")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of Function.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def envs(self) -> Sequence['outputs.FunctionsItemEnvResult']:
        """
        Function environment variable.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="exclusiveMode")
    def exclusive_mode(self) -> bool:
        """
        Exclusive mode switch.
        """
        return pulumi.get(self, "exclusive_mode")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Function.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initializerSec")
    def initializer_sec(self) -> int:
        """
        Function to initialize timeout configuration.
        """
        return pulumi.get(self, "initializer_sec")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The instance type of the function instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        Update time.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> int:
        """
        Maximum concurrency of a single instance.
        """
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> int:
        """
        Maximum memory for a single instance.
        """
        return pulumi.get(self, "memory_mb")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of Function.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nasStorages")
    def nas_storages(self) -> Sequence['outputs.FunctionsItemNasStorageResult']:
        """
        The configuration of file storage NAS mount.
        """
        return pulumi.get(self, "nas_storages")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        The owner of Function.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Custom listening port for the instance.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> int:
        """
        Request timeout (in seconds).
        """
        return pulumi.get(self, "request_timeout")

    @property
    @pulumi.getter
    def runtime(self) -> str:
        """
        The runtime of Function.
        """
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> str:
        """
        The source address of the code/image.
        """
        return pulumi.get(self, "source_location")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.FunctionsItemTagResult']:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tlsConfigs")
    def tls_configs(self) -> Sequence['outputs.FunctionsItemTlsConfigResult']:
        """
        Function log configuration.
        """
        return pulumi.get(self, "tls_configs")

    @property
    @pulumi.getter(name="tosMountConfigs")
    def tos_mount_configs(self) -> Sequence['outputs.FunctionsItemTosMountConfigResult']:
        """
        The configuration of Object Storage TOS mount.
        """
        return pulumi.get(self, "tos_mount_configs")

    @property
    @pulumi.getter(name="triggersCount")
    def triggers_count(self) -> int:
        """
        The number of triggers for this Function.
        """
        return pulumi.get(self, "triggers_count")

    @property
    @pulumi.getter(name="vpcConfigs")
    def vpc_configs(self) -> Sequence['outputs.FunctionsItemVpcConfigResult']:
        """
        The configuration of VPC.
        """
        return pulumi.get(self, "vpc_configs")


@pulumi.output_type
class FunctionsItemEnvResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FunctionsItemNasStorageResult(dict):
    def __init__(__self__, *,
                 enable_nas: bool,
                 nas_configs: Sequence['outputs.FunctionsItemNasStorageNasConfigResult']):
        """
        :param bool enable_nas: Whether to enable NAS storage mounting.
        :param Sequence['FunctionsItemNasStorageNasConfigArgs'] nas_configs: The configuration of NAS.
        """
        pulumi.set(__self__, "enable_nas", enable_nas)
        pulumi.set(__self__, "nas_configs", nas_configs)

    @property
    @pulumi.getter(name="enableNas")
    def enable_nas(self) -> bool:
        """
        Whether to enable NAS storage mounting.
        """
        return pulumi.get(self, "enable_nas")

    @property
    @pulumi.getter(name="nasConfigs")
    def nas_configs(self) -> Sequence['outputs.FunctionsItemNasStorageNasConfigResult']:
        """
        The configuration of NAS.
        """
        return pulumi.get(self, "nas_configs")


@pulumi.output_type
class FunctionsItemNasStorageNasConfigResult(dict):
    def __init__(__self__, *,
                 file_system_id: str,
                 gid: int,
                 local_mount_path: str,
                 mount_point_id: str,
                 remote_path: str,
                 uid: int):
        """
        :param str file_system_id: The ID of NAS file system.
        :param int gid: User groups in the file system. Customization is not supported yet. If this parameter is provided, the parameter value is 1000 (consistent with the function run user gid).
        :param str local_mount_path: Function local mount directory.
        :param str mount_point_id: The ID of NAS mount point.
        :param str remote_path: Remote directory of the file system.
        :param int uid: Users in the file system do not support customization yet. If this parameter is provided, its value can only be 1000 (consistent with the function run user uid).
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "gid", gid)
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        pulumi.set(__self__, "mount_point_id", mount_point_id)
        pulumi.set(__self__, "remote_path", remote_path)
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The ID of NAS file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter
    def gid(self) -> int:
        """
        User groups in the file system. Customization is not supported yet. If this parameter is provided, the parameter value is 1000 (consistent with the function run user gid).
        """
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> str:
        """
        Function local mount directory.
        """
        return pulumi.get(self, "local_mount_path")

    @property
    @pulumi.getter(name="mountPointId")
    def mount_point_id(self) -> str:
        """
        The ID of NAS mount point.
        """
        return pulumi.get(self, "mount_point_id")

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> str:
        """
        Remote directory of the file system.
        """
        return pulumi.get(self, "remote_path")

    @property
    @pulumi.getter
    def uid(self) -> int:
        """
        Users in the file system do not support customization yet. If this parameter is provided, its value can only be 1000 (consistent with the function run user uid).
        """
        return pulumi.get(self, "uid")


@pulumi.output_type
class FunctionsItemTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FunctionsItemTlsConfigResult(dict):
    def __init__(__self__, *,
                 enable_log: bool,
                 tls_project_id: str,
                 tls_topic_id: str):
        """
        :param bool enable_log: TLS log function switch.
        :param str tls_project_id: The project ID of TLS log topic.
        :param str tls_topic_id: The topic ID of TLS log topic.
        """
        pulumi.set(__self__, "enable_log", enable_log)
        pulumi.set(__self__, "tls_project_id", tls_project_id)
        pulumi.set(__self__, "tls_topic_id", tls_topic_id)

    @property
    @pulumi.getter(name="enableLog")
    def enable_log(self) -> bool:
        """
        TLS log function switch.
        """
        return pulumi.get(self, "enable_log")

    @property
    @pulumi.getter(name="tlsProjectId")
    def tls_project_id(self) -> str:
        """
        The project ID of TLS log topic.
        """
        return pulumi.get(self, "tls_project_id")

    @property
    @pulumi.getter(name="tlsTopicId")
    def tls_topic_id(self) -> str:
        """
        The topic ID of TLS log topic.
        """
        return pulumi.get(self, "tls_topic_id")


@pulumi.output_type
class FunctionsItemTosMountConfigResult(dict):
    def __init__(__self__, *,
                 credentials: Sequence['outputs.FunctionsItemTosMountConfigCredentialResult'],
                 enable_tos: bool,
                 mount_points: Sequence['outputs.FunctionsItemTosMountConfigMountPointResult']):
        """
        :param Sequence['FunctionsItemTosMountConfigCredentialArgs'] credentials: After enabling TOS, you need to provide an AKSK with access rights to the TOS domain name.
        :param bool enable_tos: Whether to enable TOS storage mounting.
        :param Sequence['FunctionsItemTosMountConfigMountPointArgs'] mount_points: After enabling TOS, you need to provide a TOS storage configuration list, with a maximum of 5 items.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "enable_tos", enable_tos)
        pulumi.set(__self__, "mount_points", mount_points)

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.FunctionsItemTosMountConfigCredentialResult']:
        """
        After enabling TOS, you need to provide an AKSK with access rights to the TOS domain name.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="enableTos")
    def enable_tos(self) -> bool:
        """
        Whether to enable TOS storage mounting.
        """
        return pulumi.get(self, "enable_tos")

    @property
    @pulumi.getter(name="mountPoints")
    def mount_points(self) -> Sequence['outputs.FunctionsItemTosMountConfigMountPointResult']:
        """
        After enabling TOS, you need to provide a TOS storage configuration list, with a maximum of 5 items.
        """
        return pulumi.get(self, "mount_points")


@pulumi.output_type
class FunctionsItemTosMountConfigCredentialResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 secret_access_key: str):
        """
        :param str access_key_id: The AccessKey ID (AK) of the Volcano Engine account.
        :param str secret_access_key: The Secret Access Key (SK) of the Volcano Engine account.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        """
        The AccessKey ID (AK) of the Volcano Engine account.
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        """
        The Secret Access Key (SK) of the Volcano Engine account.
        """
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class FunctionsItemTosMountConfigMountPointResult(dict):
    def __init__(__self__, *,
                 bucket_name: str,
                 bucket_path: str,
                 endpoint: str,
                 local_mount_path: str,
                 read_only: bool):
        """
        :param str bucket_name: TOS bucket.
        :param str bucket_path: The mounted TOS Bucket path.
        :param str endpoint: TOS Access domain name.
        :param str local_mount_path: Function local mount directory.
        :param bool read_only: Function local directory access permissions. After mounting the TOS Bucket, whether the function local mount directory has read-only permissions.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_path", bucket_path)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        TOS bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketPath")
    def bucket_path(self) -> str:
        """
        The mounted TOS Bucket path.
        """
        return pulumi.get(self, "bucket_path")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        TOS Access domain name.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> str:
        """
        Function local mount directory.
        """
        return pulumi.get(self, "local_mount_path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Function local directory access permissions. After mounting the TOS Bucket, whether the function local mount directory has read-only permissions.
        """
        return pulumi.get(self, "read_only")


@pulumi.output_type
class FunctionsItemVpcConfigResult(dict):
    def __init__(__self__, *,
                 enable_shared_internet_access: bool,
                 enable_vpc: bool,
                 security_group_ids: Sequence[str],
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param bool enable_shared_internet_access: Function access to the public network switch.
        :param bool enable_vpc: Whether the function enables private network access.
        :param Sequence[str] security_group_ids: The ID of security group.
        :param Sequence[str] subnet_ids: The ID of subnet.
        :param str vpc_id: The ID of VPC.
        """
        pulumi.set(__self__, "enable_shared_internet_access", enable_shared_internet_access)
        pulumi.set(__self__, "enable_vpc", enable_vpc)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="enableSharedInternetAccess")
    def enable_shared_internet_access(self) -> bool:
        """
        Function access to the public network switch.
        """
        return pulumi.get(self, "enable_shared_internet_access")

    @property
    @pulumi.getter(name="enableVpc")
    def enable_vpc(self) -> bool:
        """
        Whether the function enables private network access.
        """
        return pulumi.get(self, "enable_vpc")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The ID of security group.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The ID of subnet.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class KafkaTriggerKafkaCredentials(dict):
    def __init__(__self__, *,
                 mechanism: str,
                 password: str,
                 username: str):
        """
        :param str mechanism: Kafka authentication mechanism.
        :param str password: The SASL/PLAIN user password set when creating a Kafka instance.
        :param str username: The SASL/PLAIN user name set when creating a Kafka instance.
        """
        pulumi.set(__self__, "mechanism", mechanism)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def mechanism(self) -> str:
        """
        Kafka authentication mechanism.
        """
        return pulumi.get(self, "mechanism")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The SASL/PLAIN user password set when creating a Kafka instance.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The SASL/PLAIN user name set when creating a Kafka instance.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class KafkaTriggersItemResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 creation_time: str,
                 description: str,
                 detailed_config: str,
                 enabled: bool,
                 function_id: str,
                 id: str,
                 image_version: str,
                 last_update_time: str,
                 name: str,
                 type: str):
        """
        :param str account_id: The ID of account.
        :param str creation_time: The creation time of the Timer trigger.
        :param str description: The description of the Timer trigger.
        :param str detailed_config: The details of trigger configuration.
        :param bool enabled: Whether the Timer trigger is enabled.
        :param str function_id: The ID of Function.
        :param str id: The ID of the Timer trigger.
        :param str image_version: The image version of the Timer trigger.
        :param str last_update_time: The last update time of the Timer trigger.
        :param str name: The name of the Timer trigger.
        :param str type: The category of the Timer trigger.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "detailed_config", detailed_config)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The ID of account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The creation time of the Timer trigger.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Timer trigger.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detailedConfig")
    def detailed_config(self) -> str:
        """
        The details of trigger configuration.
        """
        return pulumi.get(self, "detailed_config")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether the Timer trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Timer trigger.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        """
        The image version of the Timer trigger.
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        The last update time of the Timer trigger.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Timer trigger.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The category of the Timer trigger.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ReleasesFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter key enumeration.
        :param Sequence[str] values: The filtering value of the query.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter key enumeration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        The filtering value of the query.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ReleasesItemResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 description: str,
                 finish_time: str,
                 function_id: str,
                 id: str,
                 last_update_time: str,
                 source_revision_number: int,
                 status: str,
                 target_revision_number: int):
        """
        :param str creation_time: The create time of the published information.
        :param str description: The description of the published information.
        :param str finish_time: Finish time.
        :param str function_id: The ID of Function.
        :param str id: The ID of function release.
        :param str last_update_time: The last update time of the published information.
        :param int source_revision_number: The historical version numbers released.
        :param str status: The status of function release.
        :param int target_revision_number: The target version number released.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "source_revision_number", source_revision_number)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_revision_number", target_revision_number)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The create time of the published information.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the published information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        """
        Finish time.
        """
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of function release.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        The last update time of the published information.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter(name="sourceRevisionNumber")
    def source_revision_number(self) -> int:
        """
        The historical version numbers released.
        """
        return pulumi.get(self, "source_revision_number")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of function release.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetRevisionNumber")
    def target_revision_number(self) -> int:
        """
        The target version number released.
        """
        return pulumi.get(self, "target_revision_number")


@pulumi.output_type
class ReleasesOrderByResult(dict):
    def __init__(__self__, *,
                 ascend: Optional[bool] = None,
                 key: Optional[str] = None):
        """
        :param bool ascend: Whether the sorting result is sorted in ascending order.
        :param str key: Key names used for sorting.
        """
        if ascend is not None:
            pulumi.set(__self__, "ascend", ascend)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def ascend(self) -> Optional[bool]:
        """
        Whether the sorting result is sorted in ascending order.
        """
        return pulumi.get(self, "ascend")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key names used for sorting.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class TimersItemResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 creation_time: str,
                 description: str,
                 detailed_config: str,
                 enabled: bool,
                 function_id: str,
                 id: str,
                 image_version: str,
                 last_update_time: str,
                 name: str,
                 type: str):
        """
        :param str account_id: The ID of account.
        :param str creation_time: The creation time of the Timer trigger.
        :param str description: The description of the Timer trigger.
        :param str detailed_config: The details of trigger configuration.
        :param bool enabled: Whether the Timer trigger is enabled.
        :param str function_id: The ID of Function.
        :param str id: The ID of the Timer trigger.
        :param str image_version: The image version of the Timer trigger.
        :param str last_update_time: The last update time of the Timer trigger.
        :param str name: The name of the Timer trigger.
        :param str type: The category of the Timer trigger.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "detailed_config", detailed_config)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The ID of account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The creation time of the Timer trigger.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Timer trigger.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detailedConfig")
    def detailed_config(self) -> str:
        """
        The details of trigger configuration.
        """
        return pulumi.get(self, "detailed_config")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether the Timer trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Timer trigger.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        """
        The image version of the Timer trigger.
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        The last update time of the Timer trigger.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Timer trigger.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The category of the Timer trigger.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFunctionsItemResult(dict):
    def __init__(__self__, *,
                 code_size: int,
                 code_size_limit: int,
                 command: str,
                 cpu_strategy: str,
                 creation_time: str,
                 description: str,
                 envs: Sequence['outputs.GetFunctionsItemEnvResult'],
                 exclusive_mode: bool,
                 id: str,
                 initializer_sec: int,
                 instance_type: str,
                 last_update_time: str,
                 max_concurrency: int,
                 memory_mb: int,
                 name: str,
                 nas_storages: Sequence['outputs.GetFunctionsItemNasStorageResult'],
                 owner: str,
                 port: int,
                 request_timeout: int,
                 runtime: str,
                 source_location: str,
                 source_type: str,
                 tags: Sequence['outputs.GetFunctionsItemTagResult'],
                 tls_configs: Sequence['outputs.GetFunctionsItemTlsConfigResult'],
                 tos_mount_configs: Sequence['outputs.GetFunctionsItemTosMountConfigResult'],
                 triggers_count: int,
                 vpc_configs: Sequence['outputs.GetFunctionsItemVpcConfigResult']):
        """
        :param int code_size: The size of code package.
        :param int code_size_limit: Maximum code package size.
        :param str command: The custom startup command for the instance.
        :param str cpu_strategy: Function CPU charging policy.
        :param str creation_time: Creation time.
        :param str description: The description of Function.
        :param Sequence['GetFunctionsItemEnvArgs'] envs: Function environment variable.
        :param bool exclusive_mode: Exclusive mode switch.
        :param str id: The ID of Function.
        :param int initializer_sec: Function to initialize timeout configuration.
        :param str instance_type: The instance type of the function instance.
        :param str last_update_time: Update time.
        :param int max_concurrency: Maximum concurrency of a single instance.
        :param int memory_mb: Maximum memory for a single instance.
        :param str name: The name of Function.
        :param Sequence['GetFunctionsItemNasStorageArgs'] nas_storages: The configuration of file storage NAS mount.
        :param str owner: The owner of Function.
        :param int port: Custom listening port for the instance.
        :param int request_timeout: Request timeout (in seconds).
        :param str runtime: The runtime of Function.
        :param str source_location: The source address of the code/image.
        :param str source_type: Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        :param Sequence['GetFunctionsItemTagArgs'] tags: Tags.
        :param Sequence['GetFunctionsItemTlsConfigArgs'] tls_configs: Function log configuration.
        :param Sequence['GetFunctionsItemTosMountConfigArgs'] tos_mount_configs: The configuration of Object Storage TOS mount.
        :param int triggers_count: The number of triggers for this Function.
        :param Sequence['GetFunctionsItemVpcConfigArgs'] vpc_configs: The configuration of VPC.
        """
        pulumi.set(__self__, "code_size", code_size)
        pulumi.set(__self__, "code_size_limit", code_size_limit)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "cpu_strategy", cpu_strategy)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "envs", envs)
        pulumi.set(__self__, "exclusive_mode", exclusive_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "initializer_sec", initializer_sec)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "memory_mb", memory_mb)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nas_storages", nas_storages)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "request_timeout", request_timeout)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "source_location", source_location)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tls_configs", tls_configs)
        pulumi.set(__self__, "tos_mount_configs", tos_mount_configs)
        pulumi.set(__self__, "triggers_count", triggers_count)
        pulumi.set(__self__, "vpc_configs", vpc_configs)

    @property
    @pulumi.getter(name="codeSize")
    def code_size(self) -> int:
        """
        The size of code package.
        """
        return pulumi.get(self, "code_size")

    @property
    @pulumi.getter(name="codeSizeLimit")
    def code_size_limit(self) -> int:
        """
        Maximum code package size.
        """
        return pulumi.get(self, "code_size_limit")

    @property
    @pulumi.getter
    def command(self) -> str:
        """
        The custom startup command for the instance.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="cpuStrategy")
    def cpu_strategy(self) -> str:
        """
        Function CPU charging policy.
        """
        return pulumi.get(self, "cpu_strategy")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of Function.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def envs(self) -> Sequence['outputs.GetFunctionsItemEnvResult']:
        """
        Function environment variable.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="exclusiveMode")
    def exclusive_mode(self) -> bool:
        """
        Exclusive mode switch.
        """
        return pulumi.get(self, "exclusive_mode")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Function.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initializerSec")
    def initializer_sec(self) -> int:
        """
        Function to initialize timeout configuration.
        """
        return pulumi.get(self, "initializer_sec")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The instance type of the function instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        Update time.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> int:
        """
        Maximum concurrency of a single instance.
        """
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> int:
        """
        Maximum memory for a single instance.
        """
        return pulumi.get(self, "memory_mb")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of Function.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nasStorages")
    def nas_storages(self) -> Sequence['outputs.GetFunctionsItemNasStorageResult']:
        """
        The configuration of file storage NAS mount.
        """
        return pulumi.get(self, "nas_storages")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        The owner of Function.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Custom listening port for the instance.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> int:
        """
        Request timeout (in seconds).
        """
        return pulumi.get(self, "request_timeout")

    @property
    @pulumi.getter
    def runtime(self) -> str:
        """
        The runtime of Function.
        """
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> str:
        """
        The source address of the code/image.
        """
        return pulumi.get(self, "source_location")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFunctionsItemTagResult']:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tlsConfigs")
    def tls_configs(self) -> Sequence['outputs.GetFunctionsItemTlsConfigResult']:
        """
        Function log configuration.
        """
        return pulumi.get(self, "tls_configs")

    @property
    @pulumi.getter(name="tosMountConfigs")
    def tos_mount_configs(self) -> Sequence['outputs.GetFunctionsItemTosMountConfigResult']:
        """
        The configuration of Object Storage TOS mount.
        """
        return pulumi.get(self, "tos_mount_configs")

    @property
    @pulumi.getter(name="triggersCount")
    def triggers_count(self) -> int:
        """
        The number of triggers for this Function.
        """
        return pulumi.get(self, "triggers_count")

    @property
    @pulumi.getter(name="vpcConfigs")
    def vpc_configs(self) -> Sequence['outputs.GetFunctionsItemVpcConfigResult']:
        """
        The configuration of VPC.
        """
        return pulumi.get(self, "vpc_configs")


@pulumi.output_type
class GetFunctionsItemEnvResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFunctionsItemNasStorageResult(dict):
    def __init__(__self__, *,
                 enable_nas: bool,
                 nas_configs: Sequence['outputs.GetFunctionsItemNasStorageNasConfigResult']):
        """
        :param bool enable_nas: Whether to enable NAS storage mounting.
        :param Sequence['GetFunctionsItemNasStorageNasConfigArgs'] nas_configs: The configuration of NAS.
        """
        pulumi.set(__self__, "enable_nas", enable_nas)
        pulumi.set(__self__, "nas_configs", nas_configs)

    @property
    @pulumi.getter(name="enableNas")
    def enable_nas(self) -> bool:
        """
        Whether to enable NAS storage mounting.
        """
        return pulumi.get(self, "enable_nas")

    @property
    @pulumi.getter(name="nasConfigs")
    def nas_configs(self) -> Sequence['outputs.GetFunctionsItemNasStorageNasConfigResult']:
        """
        The configuration of NAS.
        """
        return pulumi.get(self, "nas_configs")


@pulumi.output_type
class GetFunctionsItemNasStorageNasConfigResult(dict):
    def __init__(__self__, *,
                 file_system_id: str,
                 gid: int,
                 local_mount_path: str,
                 mount_point_id: str,
                 remote_path: str,
                 uid: int):
        """
        :param str file_system_id: The ID of NAS file system.
        :param int gid: User groups in the file system. Customization is not supported yet. If this parameter is provided, the parameter value is 1000 (consistent with the function run user gid).
        :param str local_mount_path: Function local mount directory.
        :param str mount_point_id: The ID of NAS mount point.
        :param str remote_path: Remote directory of the file system.
        :param int uid: Users in the file system do not support customization yet. If this parameter is provided, its value can only be 1000 (consistent with the function run user uid).
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "gid", gid)
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        pulumi.set(__self__, "mount_point_id", mount_point_id)
        pulumi.set(__self__, "remote_path", remote_path)
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The ID of NAS file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter
    def gid(self) -> int:
        """
        User groups in the file system. Customization is not supported yet. If this parameter is provided, the parameter value is 1000 (consistent with the function run user gid).
        """
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> str:
        """
        Function local mount directory.
        """
        return pulumi.get(self, "local_mount_path")

    @property
    @pulumi.getter(name="mountPointId")
    def mount_point_id(self) -> str:
        """
        The ID of NAS mount point.
        """
        return pulumi.get(self, "mount_point_id")

    @property
    @pulumi.getter(name="remotePath")
    def remote_path(self) -> str:
        """
        Remote directory of the file system.
        """
        return pulumi.get(self, "remote_path")

    @property
    @pulumi.getter
    def uid(self) -> int:
        """
        Users in the file system do not support customization yet. If this parameter is provided, its value can only be 1000 (consistent with the function run user uid).
        """
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetFunctionsItemTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFunctionsItemTlsConfigResult(dict):
    def __init__(__self__, *,
                 enable_log: bool,
                 tls_project_id: str,
                 tls_topic_id: str):
        """
        :param bool enable_log: TLS log function switch.
        :param str tls_project_id: The project ID of TLS log topic.
        :param str tls_topic_id: The topic ID of TLS log topic.
        """
        pulumi.set(__self__, "enable_log", enable_log)
        pulumi.set(__self__, "tls_project_id", tls_project_id)
        pulumi.set(__self__, "tls_topic_id", tls_topic_id)

    @property
    @pulumi.getter(name="enableLog")
    def enable_log(self) -> bool:
        """
        TLS log function switch.
        """
        return pulumi.get(self, "enable_log")

    @property
    @pulumi.getter(name="tlsProjectId")
    def tls_project_id(self) -> str:
        """
        The project ID of TLS log topic.
        """
        return pulumi.get(self, "tls_project_id")

    @property
    @pulumi.getter(name="tlsTopicId")
    def tls_topic_id(self) -> str:
        """
        The topic ID of TLS log topic.
        """
        return pulumi.get(self, "tls_topic_id")


@pulumi.output_type
class GetFunctionsItemTosMountConfigResult(dict):
    def __init__(__self__, *,
                 credentials: Sequence['outputs.GetFunctionsItemTosMountConfigCredentialResult'],
                 enable_tos: bool,
                 mount_points: Sequence['outputs.GetFunctionsItemTosMountConfigMountPointResult']):
        """
        :param Sequence['GetFunctionsItemTosMountConfigCredentialArgs'] credentials: After enabling TOS, you need to provide an AKSK with access rights to the TOS domain name.
        :param bool enable_tos: Whether to enable TOS storage mounting.
        :param Sequence['GetFunctionsItemTosMountConfigMountPointArgs'] mount_points: After enabling TOS, you need to provide a TOS storage configuration list, with a maximum of 5 items.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "enable_tos", enable_tos)
        pulumi.set(__self__, "mount_points", mount_points)

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetFunctionsItemTosMountConfigCredentialResult']:
        """
        After enabling TOS, you need to provide an AKSK with access rights to the TOS domain name.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="enableTos")
    def enable_tos(self) -> bool:
        """
        Whether to enable TOS storage mounting.
        """
        return pulumi.get(self, "enable_tos")

    @property
    @pulumi.getter(name="mountPoints")
    def mount_points(self) -> Sequence['outputs.GetFunctionsItemTosMountConfigMountPointResult']:
        """
        After enabling TOS, you need to provide a TOS storage configuration list, with a maximum of 5 items.
        """
        return pulumi.get(self, "mount_points")


@pulumi.output_type
class GetFunctionsItemTosMountConfigCredentialResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 secret_access_key: str):
        """
        :param str access_key_id: The AccessKey ID (AK) of the Volcano Engine account.
        :param str secret_access_key: The Secret Access Key (SK) of the Volcano Engine account.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        """
        The AccessKey ID (AK) of the Volcano Engine account.
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        """
        The Secret Access Key (SK) of the Volcano Engine account.
        """
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class GetFunctionsItemTosMountConfigMountPointResult(dict):
    def __init__(__self__, *,
                 bucket_name: str,
                 bucket_path: str,
                 endpoint: str,
                 local_mount_path: str,
                 read_only: bool):
        """
        :param str bucket_name: TOS bucket.
        :param str bucket_path: The mounted TOS Bucket path.
        :param str endpoint: TOS Access domain name.
        :param str local_mount_path: Function local mount directory.
        :param bool read_only: Function local directory access permissions. After mounting the TOS Bucket, whether the function local mount directory has read-only permissions.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_path", bucket_path)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        TOS bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketPath")
    def bucket_path(self) -> str:
        """
        The mounted TOS Bucket path.
        """
        return pulumi.get(self, "bucket_path")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        TOS Access domain name.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> str:
        """
        Function local mount directory.
        """
        return pulumi.get(self, "local_mount_path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Function local directory access permissions. After mounting the TOS Bucket, whether the function local mount directory has read-only permissions.
        """
        return pulumi.get(self, "read_only")


@pulumi.output_type
class GetFunctionsItemVpcConfigResult(dict):
    def __init__(__self__, *,
                 enable_shared_internet_access: bool,
                 enable_vpc: bool,
                 security_group_ids: Sequence[str],
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param bool enable_shared_internet_access: Function access to the public network switch.
        :param bool enable_vpc: Whether the function enables private network access.
        :param Sequence[str] security_group_ids: The ID of security group.
        :param Sequence[str] subnet_ids: The ID of subnet.
        :param str vpc_id: The ID of VPC.
        """
        pulumi.set(__self__, "enable_shared_internet_access", enable_shared_internet_access)
        pulumi.set(__self__, "enable_vpc", enable_vpc)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="enableSharedInternetAccess")
    def enable_shared_internet_access(self) -> bool:
        """
        Function access to the public network switch.
        """
        return pulumi.get(self, "enable_shared_internet_access")

    @property
    @pulumi.getter(name="enableVpc")
    def enable_vpc(self) -> bool:
        """
        Whether the function enables private network access.
        """
        return pulumi.get(self, "enable_vpc")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The ID of security group.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The ID of subnet.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetKafkaTriggersItemResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 creation_time: str,
                 description: str,
                 detailed_config: str,
                 enabled: bool,
                 function_id: str,
                 id: str,
                 image_version: str,
                 last_update_time: str,
                 name: str,
                 type: str):
        """
        :param str account_id: The ID of account.
        :param str creation_time: The creation time of the Timer trigger.
        :param str description: The description of the Timer trigger.
        :param str detailed_config: The details of trigger configuration.
        :param bool enabled: Whether the Timer trigger is enabled.
        :param str function_id: The ID of Function.
        :param str id: The ID of the Timer trigger.
        :param str image_version: The image version of the Timer trigger.
        :param str last_update_time: The last update time of the Timer trigger.
        :param str name: The name of the Timer trigger.
        :param str type: The category of the Timer trigger.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "detailed_config", detailed_config)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The ID of account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The creation time of the Timer trigger.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Timer trigger.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detailedConfig")
    def detailed_config(self) -> str:
        """
        The details of trigger configuration.
        """
        return pulumi.get(self, "detailed_config")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether the Timer trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Timer trigger.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        """
        The image version of the Timer trigger.
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        The last update time of the Timer trigger.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Timer trigger.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The category of the Timer trigger.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetReleasesFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter key enumeration.
        :param Sequence[str] values: The filtering value of the query.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter key enumeration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        The filtering value of the query.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetReleasesItemResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 description: str,
                 finish_time: str,
                 function_id: str,
                 id: str,
                 last_update_time: str,
                 source_revision_number: int,
                 status: str,
                 target_revision_number: int):
        """
        :param str creation_time: The create time of the published information.
        :param str description: The description of the published information.
        :param str finish_time: Finish time.
        :param str function_id: The ID of Function.
        :param str id: The ID of function release.
        :param str last_update_time: The last update time of the published information.
        :param int source_revision_number: The historical version numbers released.
        :param str status: The status of function release.
        :param int target_revision_number: The target version number released.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "source_revision_number", source_revision_number)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_revision_number", target_revision_number)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The create time of the published information.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the published information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        """
        Finish time.
        """
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of function release.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        The last update time of the published information.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter(name="sourceRevisionNumber")
    def source_revision_number(self) -> int:
        """
        The historical version numbers released.
        """
        return pulumi.get(self, "source_revision_number")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of function release.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetRevisionNumber")
    def target_revision_number(self) -> int:
        """
        The target version number released.
        """
        return pulumi.get(self, "target_revision_number")


@pulumi.output_type
class GetReleasesOrderByResult(dict):
    def __init__(__self__, *,
                 ascend: Optional[bool] = None,
                 key: Optional[str] = None):
        """
        :param bool ascend: Whether the sorting result is sorted in ascending order.
        :param str key: Key names used for sorting.
        """
        if ascend is not None:
            pulumi.set(__self__, "ascend", ascend)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def ascend(self) -> Optional[bool]:
        """
        Whether the sorting result is sorted in ascending order.
        """
        return pulumi.get(self, "ascend")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key names used for sorting.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetTimersItemResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 creation_time: str,
                 description: str,
                 detailed_config: str,
                 enabled: bool,
                 function_id: str,
                 id: str,
                 image_version: str,
                 last_update_time: str,
                 name: str,
                 type: str):
        """
        :param str account_id: The ID of account.
        :param str creation_time: The creation time of the Timer trigger.
        :param str description: The description of the Timer trigger.
        :param str detailed_config: The details of trigger configuration.
        :param bool enabled: Whether the Timer trigger is enabled.
        :param str function_id: The ID of Function.
        :param str id: The ID of the Timer trigger.
        :param str image_version: The image version of the Timer trigger.
        :param str last_update_time: The last update time of the Timer trigger.
        :param str name: The name of the Timer trigger.
        :param str type: The category of the Timer trigger.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "detailed_config", detailed_config)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The ID of account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The creation time of the Timer trigger.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Timer trigger.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detailedConfig")
    def detailed_config(self) -> str:
        """
        The details of trigger configuration.
        """
        return pulumi.get(self, "detailed_config")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether the Timer trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The ID of Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Timer trigger.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        """
        The image version of the Timer trigger.
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        The last update time of the Timer trigger.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Timer trigger.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The category of the Timer trigger.
        """
        return pulumi.get(self, "type")


