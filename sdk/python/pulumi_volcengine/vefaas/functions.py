# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FunctionsResult',
    'AwaitableFunctionsResult',
    'functions',
    'functions_output',
]

warnings.warn("""volcengine.vefaas.Functions has been deprecated in favor of volcengine.vefaas.getFunctions""", DeprecationWarning)

@pulumi.output_type
class FunctionsResult:
    """
    A collection of values returned by Functions.
    """
    def __init__(__self__, id=None, items=None, name_regex=None, output_file=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.FunctionsItemResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableFunctionsResult(FunctionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return FunctionsResult(
            id=self.id,
            items=self.items,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count)


def functions(name_regex: Optional[str] = None,
              output_file: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableFunctionsResult:
    """
    Use this data source to query detailed information of vefaas functions
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vefaas.get_functions()
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    pulumi.log.warn("""functions is deprecated: volcengine.vefaas.Functions has been deprecated in favor of volcengine.vefaas.getFunctions""")
    __args__ = dict()
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:vefaas/functions:Functions', __args__, opts=opts, typ=FunctionsResult).value

    return AwaitableFunctionsResult(
        id=pulumi.get(__ret__, 'id'),
        items=pulumi.get(__ret__, 'items'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(functions)
def functions_output(name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                     output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[FunctionsResult]:
    """
    Use this data source to query detailed information of vefaas functions
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.vefaas.get_functions()
    ```


    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    pulumi.log.warn("""functions is deprecated: volcengine.vefaas.Functions has been deprecated in favor of volcengine.vefaas.getFunctions""")
    ...
