# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'KeyMultiRegionConfiguration',
    'KeyMultiRegionConfigurationPrimaryKey',
    'KeyMultiRegionConfigurationReplicaKey',
    'KeyTag',
    'KeyringsKeyringResult',
    'KeysKeyResult',
    'KeysKeyMultiRegionConfigurationResult',
    'KeysKeyMultiRegionConfigurationPrimaryKeyResult',
    'KeysKeyMultiRegionConfigurationReplicaKeyResult',
    'KeysKeyTagResult',
    'KeysTagResult',
    'SecretsSecretResult',
    'GetKeyringsKeyringResult',
    'GetKeysKeyResult',
    'GetKeysKeyMultiRegionConfigurationResult',
    'GetKeysKeyMultiRegionConfigurationPrimaryKeyResult',
    'GetKeysKeyMultiRegionConfigurationReplicaKeyResult',
    'GetKeysKeyTagResult',
    'GetKeysTagResult',
    'GetSecretsSecretResult',
]

@pulumi.output_type
class KeyMultiRegionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "multiRegionKeyType":
            suggest = "multi_region_key_type"
        elif key == "primaryKey":
            suggest = "primary_key"
        elif key == "replicaKeys":
            suggest = "replica_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyMultiRegionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyMultiRegionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyMultiRegionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 multi_region_key_type: Optional[str] = None,
                 primary_key: Optional['outputs.KeyMultiRegionConfigurationPrimaryKey'] = None,
                 replica_keys: Optional[Sequence['outputs.KeyMultiRegionConfigurationReplicaKey']] = None):
        """
        :param str multi_region_key_type: The type of the multi-region key.
        :param 'KeyMultiRegionConfigurationPrimaryKeyArgs' primary_key: Trn and region id of the primary multi-region key.
        :param Sequence['KeyMultiRegionConfigurationReplicaKeyArgs'] replica_keys: Trn and region id of replica multi-region keys.
        """
        if multi_region_key_type is not None:
            pulumi.set(__self__, "multi_region_key_type", multi_region_key_type)
        if primary_key is not None:
            pulumi.set(__self__, "primary_key", primary_key)
        if replica_keys is not None:
            pulumi.set(__self__, "replica_keys", replica_keys)

    @property
    @pulumi.getter(name="multiRegionKeyType")
    def multi_region_key_type(self) -> Optional[str]:
        """
        The type of the multi-region key.
        """
        return pulumi.get(self, "multi_region_key_type")

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional['outputs.KeyMultiRegionConfigurationPrimaryKey']:
        """
        Trn and region id of the primary multi-region key.
        """
        return pulumi.get(self, "primary_key")

    @property
    @pulumi.getter(name="replicaKeys")
    def replica_keys(self) -> Optional[Sequence['outputs.KeyMultiRegionConfigurationReplicaKey']]:
        """
        Trn and region id of replica multi-region keys.
        """
        return pulumi.get(self, "replica_keys")


@pulumi.output_type
class KeyMultiRegionConfigurationPrimaryKey(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 trn: Optional[str] = None):
        """
        :param str region: The region id of multi-region key.
        :param str trn: The name of the resource.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if trn is not None:
            pulumi.set(__self__, "trn", trn)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region id of multi-region key.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def trn(self) -> Optional[str]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")


@pulumi.output_type
class KeyMultiRegionConfigurationReplicaKey(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 trn: Optional[str] = None):
        """
        :param str region: The region id of multi-region key.
        :param str trn: The name of the resource.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if trn is not None:
            pulumi.set(__self__, "trn", trn)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region id of multi-region key.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def trn(self) -> Optional[str]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")


@pulumi.output_type
class KeyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class KeyringsKeyringResult(dict):
    def __init__(__self__, *,
                 creation_date: int,
                 description: str,
                 id: str,
                 key_count: int,
                 keyring_name: str,
                 keyring_type: str,
                 trn: str,
                 uid: str,
                 update_date: int):
        """
        :param int creation_date: The date when the keyring was created.
        :param str description: The description of the keyring.
        :param str id: The unique ID of the keyring. The value is in the UUID format.
        :param int key_count: Key ring key count.
        :param str keyring_name: The name of the keyring.
        :param str keyring_type: The type of the keyring.
        :param str trn: The information about the tenant resource name (TRN).
        :param str uid: The tenant ID of the keyring.
        :param int update_date: The date when the keyring was updated.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_count", key_count)
        pulumi.set(__self__, "keyring_name", keyring_name)
        pulumi.set(__self__, "keyring_type", keyring_type)
        pulumi.set(__self__, "trn", trn)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> int:
        """
        The date when the keyring was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the keyring.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of the keyring. The value is in the UUID format.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyCount")
    def key_count(self) -> int:
        """
        Key ring key count.
        """
        return pulumi.get(self, "key_count")

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> str:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

    @property
    @pulumi.getter(name="keyringType")
    def keyring_type(self) -> str:
        """
        The type of the keyring.
        """
        return pulumi.get(self, "keyring_type")

    @property
    @pulumi.getter
    def trn(self) -> str:
        """
        The information about the tenant resource name (TRN).
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The tenant ID of the keyring.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> int:
        """
        The date when the keyring was updated.
        """
        return pulumi.get(self, "update_date")


@pulumi.output_type
class KeysKeyResult(dict):
    def __init__(__self__, *,
                 creation_date: int,
                 description: str,
                 id: str,
                 key_material_expire_time: str,
                 key_name: str,
                 key_spec: str,
                 key_state: str,
                 key_usage: str,
                 last_rotation_time: str,
                 multi_region: bool,
                 multi_region_configuration: 'outputs.KeysKeyMultiRegionConfigurationResult',
                 origin: str,
                 protection_level: str,
                 rotation_state: str,
                 schedule_delete_time: str,
                 schedule_rotation_time: str,
                 tags: Sequence['outputs.KeysKeyTagResult'],
                 trn: str,
                 update_date: int):
        """
        :param int creation_date: The date when the keyring was created.
        :param str description: The description of the key.
        :param str id: The unique ID of the key.
        :param str key_material_expire_time: The time when the key material will expire.
        :param str key_name: The name of the key.
        :param str key_spec: The algorithm used in the key.
        :param str key_state: The state of the key.
        :param str key_usage: The usage of the key.
        :param str last_rotation_time: The last time the key was rotated.
        :param bool multi_region: Whether it is the master key of the Multi-region type.
        :param 'KeysKeyMultiRegionConfigurationArgs' multi_region_configuration: The configuration of Multi-region key.
        :param str origin: The origin of the key.
        :param str protection_level: The protection level of the key.
        :param str rotation_state: The rotation configuration of the key.
        :param str schedule_delete_time: The time when the key will be deleted.
        :param str schedule_rotation_time: The next time the key will be rotated.
        :param Sequence['KeysKeyTagArgs'] tags: A list of tags.
        :param str trn: The name of the resource.
        :param int update_date: The date when the keyring was updated.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_material_expire_time", key_material_expire_time)
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "key_spec", key_spec)
        pulumi.set(__self__, "key_state", key_state)
        pulumi.set(__self__, "key_usage", key_usage)
        pulumi.set(__self__, "last_rotation_time", last_rotation_time)
        pulumi.set(__self__, "multi_region", multi_region)
        pulumi.set(__self__, "multi_region_configuration", multi_region_configuration)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "protection_level", protection_level)
        pulumi.set(__self__, "rotation_state", rotation_state)
        pulumi.set(__self__, "schedule_delete_time", schedule_delete_time)
        pulumi.set(__self__, "schedule_rotation_time", schedule_rotation_time)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "trn", trn)
        pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> int:
        """
        The date when the keyring was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the key.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of the key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyMaterialExpireTime")
    def key_material_expire_time(self) -> str:
        """
        The time when the key material will expire.
        """
        return pulumi.get(self, "key_material_expire_time")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        """
        The name of the key.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> str:
        """
        The algorithm used in the key.
        """
        return pulumi.get(self, "key_spec")

    @property
    @pulumi.getter(name="keyState")
    def key_state(self) -> str:
        """
        The state of the key.
        """
        return pulumi.get(self, "key_state")

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> str:
        """
        The usage of the key.
        """
        return pulumi.get(self, "key_usage")

    @property
    @pulumi.getter(name="lastRotationTime")
    def last_rotation_time(self) -> str:
        """
        The last time the key was rotated.
        """
        return pulumi.get(self, "last_rotation_time")

    @property
    @pulumi.getter(name="multiRegion")
    def multi_region(self) -> bool:
        """
        Whether it is the master key of the Multi-region type.
        """
        return pulumi.get(self, "multi_region")

    @property
    @pulumi.getter(name="multiRegionConfiguration")
    def multi_region_configuration(self) -> 'outputs.KeysKeyMultiRegionConfigurationResult':
        """
        The configuration of Multi-region key.
        """
        return pulumi.get(self, "multi_region_configuration")

    @property
    @pulumi.getter
    def origin(self) -> str:
        """
        The origin of the key.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="protectionLevel")
    def protection_level(self) -> str:
        """
        The protection level of the key.
        """
        return pulumi.get(self, "protection_level")

    @property
    @pulumi.getter(name="rotationState")
    def rotation_state(self) -> str:
        """
        The rotation configuration of the key.
        """
        return pulumi.get(self, "rotation_state")

    @property
    @pulumi.getter(name="scheduleDeleteTime")
    def schedule_delete_time(self) -> str:
        """
        The time when the key will be deleted.
        """
        return pulumi.get(self, "schedule_delete_time")

    @property
    @pulumi.getter(name="scheduleRotationTime")
    def schedule_rotation_time(self) -> str:
        """
        The next time the key will be rotated.
        """
        return pulumi.get(self, "schedule_rotation_time")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.KeysKeyTagResult']:
        """
        A list of tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def trn(self) -> str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> int:
        """
        The date when the keyring was updated.
        """
        return pulumi.get(self, "update_date")


@pulumi.output_type
class KeysKeyMultiRegionConfigurationResult(dict):
    def __init__(__self__, *,
                 multi_region_key_type: str,
                 primary_key: 'outputs.KeysKeyMultiRegionConfigurationPrimaryKeyResult',
                 replica_keys: Sequence['outputs.KeysKeyMultiRegionConfigurationReplicaKeyResult']):
        """
        :param str multi_region_key_type: The type of the multi-region key.
        :param 'KeysKeyMultiRegionConfigurationPrimaryKeyArgs' primary_key: Trn and region id of the primary multi-region key.
        :param Sequence['KeysKeyMultiRegionConfigurationReplicaKeyArgs'] replica_keys: Trn and region id of replica multi-region keys.
        """
        pulumi.set(__self__, "multi_region_key_type", multi_region_key_type)
        pulumi.set(__self__, "primary_key", primary_key)
        pulumi.set(__self__, "replica_keys", replica_keys)

    @property
    @pulumi.getter(name="multiRegionKeyType")
    def multi_region_key_type(self) -> str:
        """
        The type of the multi-region key.
        """
        return pulumi.get(self, "multi_region_key_type")

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> 'outputs.KeysKeyMultiRegionConfigurationPrimaryKeyResult':
        """
        Trn and region id of the primary multi-region key.
        """
        return pulumi.get(self, "primary_key")

    @property
    @pulumi.getter(name="replicaKeys")
    def replica_keys(self) -> Sequence['outputs.KeysKeyMultiRegionConfigurationReplicaKeyResult']:
        """
        Trn and region id of replica multi-region keys.
        """
        return pulumi.get(self, "replica_keys")


@pulumi.output_type
class KeysKeyMultiRegionConfigurationPrimaryKeyResult(dict):
    def __init__(__self__, *,
                 region: str,
                 trn: str):
        """
        :param str region: The region id of multi-region key.
        :param str trn: The name of the resource.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "trn", trn)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region id of multi-region key.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def trn(self) -> str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")


@pulumi.output_type
class KeysKeyMultiRegionConfigurationReplicaKeyResult(dict):
    def __init__(__self__, *,
                 region: str,
                 trn: str):
        """
        :param str region: The region id of multi-region key.
        :param str trn: The name of the resource.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "trn", trn)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region id of multi-region key.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def trn(self) -> str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")


@pulumi.output_type
class KeysKeyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of the tag.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class KeysTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The key of the tag.
        :param Sequence[str] values: The values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class SecretsSecretResult(dict):
    def __init__(__self__, *,
                 creation_date: int,
                 description: str,
                 encryption_key: str,
                 extended_config: str,
                 id: str,
                 last_rotation_time: str,
                 managed: bool,
                 project_name: str,
                 rotation_interval: int,
                 rotation_state: str,
                 schedule_delete_time: str,
                 schedule_rotation_time: str,
                 secret_name: str,
                 secret_state: str,
                 secret_type: str,
                 trn: str,
                 uid: str,
                 update_date: int):
        """
        :param int creation_date: The date when the keyring was created.
        :param str description: The description of the secret.
        :param str encryption_key: The TRN of the KMS key used to encrypt the secret value.
        :param str extended_config: The extended configurations of the secret.
        :param str id: The unique ID of the secret. The value is in the UUID format.
        :param str last_rotation_time: The last time the secret was rotated.
        :param bool managed: Indicates whether the secret is hosted.
        :param str project_name: The name of the project to which the secret belongs.
        :param int rotation_interval: The interval at which automatic rotation is performed.
        :param str rotation_state: The state of the rotation.
        :param str schedule_delete_time: The time when the secret will be deleted.
        :param str schedule_rotation_time: The next time the secret will be rotated.
        :param str secret_name: The name of the secret.
        :param str secret_state: The state of the secret.
        :param str secret_type: The type of the secret.
        :param str trn: The trn of the secret.
        :param str uid: The tenant ID of the secret.
        :param int update_date: The date when the keyring was updated.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "encryption_key", encryption_key)
        pulumi.set(__self__, "extended_config", extended_config)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_rotation_time", last_rotation_time)
        pulumi.set(__self__, "managed", managed)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "rotation_interval", rotation_interval)
        pulumi.set(__self__, "rotation_state", rotation_state)
        pulumi.set(__self__, "schedule_delete_time", schedule_delete_time)
        pulumi.set(__self__, "schedule_rotation_time", schedule_rotation_time)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_state", secret_state)
        pulumi.set(__self__, "secret_type", secret_type)
        pulumi.set(__self__, "trn", trn)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> int:
        """
        The date when the keyring was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the secret.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> str:
        """
        The TRN of the KMS key used to encrypt the secret value.
        """
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="extendedConfig")
    def extended_config(self) -> str:
        """
        The extended configurations of the secret.
        """
        return pulumi.get(self, "extended_config")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of the secret. The value is in the UUID format.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastRotationTime")
    def last_rotation_time(self) -> str:
        """
        The last time the secret was rotated.
        """
        return pulumi.get(self, "last_rotation_time")

    @property
    @pulumi.getter
    def managed(self) -> bool:
        """
        Indicates whether the secret is hosted.
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The name of the project to which the secret belongs.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="rotationInterval")
    def rotation_interval(self) -> int:
        """
        The interval at which automatic rotation is performed.
        """
        return pulumi.get(self, "rotation_interval")

    @property
    @pulumi.getter(name="rotationState")
    def rotation_state(self) -> str:
        """
        The state of the rotation.
        """
        return pulumi.get(self, "rotation_state")

    @property
    @pulumi.getter(name="scheduleDeleteTime")
    def schedule_delete_time(self) -> str:
        """
        The time when the secret will be deleted.
        """
        return pulumi.get(self, "schedule_delete_time")

    @property
    @pulumi.getter(name="scheduleRotationTime")
    def schedule_rotation_time(self) -> str:
        """
        The next time the secret will be rotated.
        """
        return pulumi.get(self, "schedule_rotation_time")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the secret.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="secretState")
    def secret_state(self) -> str:
        """
        The state of the secret.
        """
        return pulumi.get(self, "secret_state")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> str:
        """
        The type of the secret.
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def trn(self) -> str:
        """
        The trn of the secret.
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The tenant ID of the secret.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> int:
        """
        The date when the keyring was updated.
        """
        return pulumi.get(self, "update_date")


@pulumi.output_type
class GetKeyringsKeyringResult(dict):
    def __init__(__self__, *,
                 creation_date: int,
                 description: str,
                 id: str,
                 key_count: int,
                 keyring_name: str,
                 keyring_type: str,
                 trn: str,
                 uid: str,
                 update_date: int):
        """
        :param int creation_date: The date when the keyring was created.
        :param str description: The description of the keyring.
        :param str id: The unique ID of the keyring. The value is in the UUID format.
        :param int key_count: Key ring key count.
        :param str keyring_name: The name of the keyring.
        :param str keyring_type: The type of the keyring.
        :param str trn: The information about the tenant resource name (TRN).
        :param str uid: The tenant ID of the keyring.
        :param int update_date: The date when the keyring was updated.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_count", key_count)
        pulumi.set(__self__, "keyring_name", keyring_name)
        pulumi.set(__self__, "keyring_type", keyring_type)
        pulumi.set(__self__, "trn", trn)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> int:
        """
        The date when the keyring was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the keyring.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of the keyring. The value is in the UUID format.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyCount")
    def key_count(self) -> int:
        """
        Key ring key count.
        """
        return pulumi.get(self, "key_count")

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> str:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

    @property
    @pulumi.getter(name="keyringType")
    def keyring_type(self) -> str:
        """
        The type of the keyring.
        """
        return pulumi.get(self, "keyring_type")

    @property
    @pulumi.getter
    def trn(self) -> str:
        """
        The information about the tenant resource name (TRN).
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The tenant ID of the keyring.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> int:
        """
        The date when the keyring was updated.
        """
        return pulumi.get(self, "update_date")


@pulumi.output_type
class GetKeysKeyResult(dict):
    def __init__(__self__, *,
                 creation_date: int,
                 description: str,
                 id: str,
                 key_material_expire_time: str,
                 key_name: str,
                 key_spec: str,
                 key_state: str,
                 key_usage: str,
                 last_rotation_time: str,
                 multi_region: bool,
                 multi_region_configuration: 'outputs.GetKeysKeyMultiRegionConfigurationResult',
                 origin: str,
                 protection_level: str,
                 rotation_state: str,
                 schedule_delete_time: str,
                 schedule_rotation_time: str,
                 tags: Sequence['outputs.GetKeysKeyTagResult'],
                 trn: str,
                 update_date: int):
        """
        :param int creation_date: The date when the keyring was created.
        :param str description: The description of the key.
        :param str id: The unique ID of the key.
        :param str key_material_expire_time: The time when the key material will expire.
        :param str key_name: The name of the key.
        :param str key_spec: The algorithm used in the key.
        :param str key_state: The state of the key.
        :param str key_usage: The usage of the key.
        :param str last_rotation_time: The last time the key was rotated.
        :param bool multi_region: Whether it is the master key of the Multi-region type.
        :param 'GetKeysKeyMultiRegionConfigurationArgs' multi_region_configuration: The configuration of Multi-region key.
        :param str origin: The origin of the key.
        :param str protection_level: The protection level of the key.
        :param str rotation_state: The rotation configuration of the key.
        :param str schedule_delete_time: The time when the key will be deleted.
        :param str schedule_rotation_time: The next time the key will be rotated.
        :param Sequence['GetKeysKeyTagArgs'] tags: A list of tags.
        :param str trn: The name of the resource.
        :param int update_date: The date when the keyring was updated.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_material_expire_time", key_material_expire_time)
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "key_spec", key_spec)
        pulumi.set(__self__, "key_state", key_state)
        pulumi.set(__self__, "key_usage", key_usage)
        pulumi.set(__self__, "last_rotation_time", last_rotation_time)
        pulumi.set(__self__, "multi_region", multi_region)
        pulumi.set(__self__, "multi_region_configuration", multi_region_configuration)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "protection_level", protection_level)
        pulumi.set(__self__, "rotation_state", rotation_state)
        pulumi.set(__self__, "schedule_delete_time", schedule_delete_time)
        pulumi.set(__self__, "schedule_rotation_time", schedule_rotation_time)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "trn", trn)
        pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> int:
        """
        The date when the keyring was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the key.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of the key.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyMaterialExpireTime")
    def key_material_expire_time(self) -> str:
        """
        The time when the key material will expire.
        """
        return pulumi.get(self, "key_material_expire_time")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        """
        The name of the key.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> str:
        """
        The algorithm used in the key.
        """
        return pulumi.get(self, "key_spec")

    @property
    @pulumi.getter(name="keyState")
    def key_state(self) -> str:
        """
        The state of the key.
        """
        return pulumi.get(self, "key_state")

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> str:
        """
        The usage of the key.
        """
        return pulumi.get(self, "key_usage")

    @property
    @pulumi.getter(name="lastRotationTime")
    def last_rotation_time(self) -> str:
        """
        The last time the key was rotated.
        """
        return pulumi.get(self, "last_rotation_time")

    @property
    @pulumi.getter(name="multiRegion")
    def multi_region(self) -> bool:
        """
        Whether it is the master key of the Multi-region type.
        """
        return pulumi.get(self, "multi_region")

    @property
    @pulumi.getter(name="multiRegionConfiguration")
    def multi_region_configuration(self) -> 'outputs.GetKeysKeyMultiRegionConfigurationResult':
        """
        The configuration of Multi-region key.
        """
        return pulumi.get(self, "multi_region_configuration")

    @property
    @pulumi.getter
    def origin(self) -> str:
        """
        The origin of the key.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="protectionLevel")
    def protection_level(self) -> str:
        """
        The protection level of the key.
        """
        return pulumi.get(self, "protection_level")

    @property
    @pulumi.getter(name="rotationState")
    def rotation_state(self) -> str:
        """
        The rotation configuration of the key.
        """
        return pulumi.get(self, "rotation_state")

    @property
    @pulumi.getter(name="scheduleDeleteTime")
    def schedule_delete_time(self) -> str:
        """
        The time when the key will be deleted.
        """
        return pulumi.get(self, "schedule_delete_time")

    @property
    @pulumi.getter(name="scheduleRotationTime")
    def schedule_rotation_time(self) -> str:
        """
        The next time the key will be rotated.
        """
        return pulumi.get(self, "schedule_rotation_time")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetKeysKeyTagResult']:
        """
        A list of tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def trn(self) -> str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> int:
        """
        The date when the keyring was updated.
        """
        return pulumi.get(self, "update_date")


@pulumi.output_type
class GetKeysKeyMultiRegionConfigurationResult(dict):
    def __init__(__self__, *,
                 multi_region_key_type: str,
                 primary_key: 'outputs.GetKeysKeyMultiRegionConfigurationPrimaryKeyResult',
                 replica_keys: Sequence['outputs.GetKeysKeyMultiRegionConfigurationReplicaKeyResult']):
        """
        :param str multi_region_key_type: The type of the multi-region key.
        :param 'GetKeysKeyMultiRegionConfigurationPrimaryKeyArgs' primary_key: Trn and region id of the primary multi-region key.
        :param Sequence['GetKeysKeyMultiRegionConfigurationReplicaKeyArgs'] replica_keys: Trn and region id of replica multi-region keys.
        """
        pulumi.set(__self__, "multi_region_key_type", multi_region_key_type)
        pulumi.set(__self__, "primary_key", primary_key)
        pulumi.set(__self__, "replica_keys", replica_keys)

    @property
    @pulumi.getter(name="multiRegionKeyType")
    def multi_region_key_type(self) -> str:
        """
        The type of the multi-region key.
        """
        return pulumi.get(self, "multi_region_key_type")

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> 'outputs.GetKeysKeyMultiRegionConfigurationPrimaryKeyResult':
        """
        Trn and region id of the primary multi-region key.
        """
        return pulumi.get(self, "primary_key")

    @property
    @pulumi.getter(name="replicaKeys")
    def replica_keys(self) -> Sequence['outputs.GetKeysKeyMultiRegionConfigurationReplicaKeyResult']:
        """
        Trn and region id of replica multi-region keys.
        """
        return pulumi.get(self, "replica_keys")


@pulumi.output_type
class GetKeysKeyMultiRegionConfigurationPrimaryKeyResult(dict):
    def __init__(__self__, *,
                 region: str,
                 trn: str):
        """
        :param str region: The region id of multi-region key.
        :param str trn: The name of the resource.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "trn", trn)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region id of multi-region key.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def trn(self) -> str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")


@pulumi.output_type
class GetKeysKeyMultiRegionConfigurationReplicaKeyResult(dict):
    def __init__(__self__, *,
                 region: str,
                 trn: str):
        """
        :param str region: The region id of multi-region key.
        :param str trn: The name of the resource.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "trn", trn)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region id of multi-region key.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def trn(self) -> str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")


@pulumi.output_type
class GetKeysKeyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of the tag.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetKeysTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The key of the tag.
        :param Sequence[str] values: The values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values of the tag.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSecretsSecretResult(dict):
    def __init__(__self__, *,
                 creation_date: int,
                 description: str,
                 encryption_key: str,
                 extended_config: str,
                 id: str,
                 last_rotation_time: str,
                 managed: bool,
                 project_name: str,
                 rotation_interval: int,
                 rotation_state: str,
                 schedule_delete_time: str,
                 schedule_rotation_time: str,
                 secret_name: str,
                 secret_state: str,
                 secret_type: str,
                 trn: str,
                 uid: str,
                 update_date: int):
        """
        :param int creation_date: The date when the keyring was created.
        :param str description: The description of the secret.
        :param str encryption_key: The TRN of the KMS key used to encrypt the secret value.
        :param str extended_config: The extended configurations of the secret.
        :param str id: The unique ID of the secret. The value is in the UUID format.
        :param str last_rotation_time: The last time the secret was rotated.
        :param bool managed: Indicates whether the secret is hosted.
        :param str project_name: The name of the project to which the secret belongs.
        :param int rotation_interval: The interval at which automatic rotation is performed.
        :param str rotation_state: The state of the rotation.
        :param str schedule_delete_time: The time when the secret will be deleted.
        :param str schedule_rotation_time: The next time the secret will be rotated.
        :param str secret_name: The name of the secret.
        :param str secret_state: The state of the secret.
        :param str secret_type: The type of the secret.
        :param str trn: The trn of the secret.
        :param str uid: The tenant ID of the secret.
        :param int update_date: The date when the keyring was updated.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "encryption_key", encryption_key)
        pulumi.set(__self__, "extended_config", extended_config)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_rotation_time", last_rotation_time)
        pulumi.set(__self__, "managed", managed)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "rotation_interval", rotation_interval)
        pulumi.set(__self__, "rotation_state", rotation_state)
        pulumi.set(__self__, "schedule_delete_time", schedule_delete_time)
        pulumi.set(__self__, "schedule_rotation_time", schedule_rotation_time)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_state", secret_state)
        pulumi.set(__self__, "secret_type", secret_type)
        pulumi.set(__self__, "trn", trn)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> int:
        """
        The date when the keyring was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the secret.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> str:
        """
        The TRN of the KMS key used to encrypt the secret value.
        """
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="extendedConfig")
    def extended_config(self) -> str:
        """
        The extended configurations of the secret.
        """
        return pulumi.get(self, "extended_config")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of the secret. The value is in the UUID format.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastRotationTime")
    def last_rotation_time(self) -> str:
        """
        The last time the secret was rotated.
        """
        return pulumi.get(self, "last_rotation_time")

    @property
    @pulumi.getter
    def managed(self) -> bool:
        """
        Indicates whether the secret is hosted.
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The name of the project to which the secret belongs.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="rotationInterval")
    def rotation_interval(self) -> int:
        """
        The interval at which automatic rotation is performed.
        """
        return pulumi.get(self, "rotation_interval")

    @property
    @pulumi.getter(name="rotationState")
    def rotation_state(self) -> str:
        """
        The state of the rotation.
        """
        return pulumi.get(self, "rotation_state")

    @property
    @pulumi.getter(name="scheduleDeleteTime")
    def schedule_delete_time(self) -> str:
        """
        The time when the secret will be deleted.
        """
        return pulumi.get(self, "schedule_delete_time")

    @property
    @pulumi.getter(name="scheduleRotationTime")
    def schedule_rotation_time(self) -> str:
        """
        The next time the secret will be rotated.
        """
        return pulumi.get(self, "schedule_rotation_time")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the secret.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="secretState")
    def secret_state(self) -> str:
        """
        The state of the secret.
        """
        return pulumi.get(self, "secret_state")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> str:
        """
        The type of the secret.
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def trn(self) -> str:
        """
        The trn of the secret.
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The tenant ID of the secret.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> int:
        """
        The date when the keyring was updated.
        """
        return pulumi.get(self, "update_date")


