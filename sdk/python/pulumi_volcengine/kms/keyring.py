# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['KeyringArgs', 'Keyring']

@pulumi.input_type
class KeyringArgs:
    def __init__(__self__, *,
                 keyring_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 keyring_type: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Keyring resource.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        :param pulumi.Input[str] description: The description of the keyring.
        :param pulumi.Input[str] keyring_type: The type of the keyring.
        :param pulumi.Input[str] project_name: The name of the project.
        """
        pulumi.set(__self__, "keyring_name", keyring_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if keyring_type is not None:
            pulumi.set(__self__, "keyring_type", keyring_type)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> pulumi.Input[str]:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

    @keyring_name.setter
    def keyring_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "keyring_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the keyring.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="keyringType")
    def keyring_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the keyring.
        """
        return pulumi.get(self, "keyring_type")

    @keyring_type.setter
    def keyring_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring_type", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)


@pulumi.input_type
class _KeyringState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 keyring_name: Optional[pulumi.Input[str]] = None,
                 keyring_type: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 trn: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 update_date: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Keyring resources.
        :param pulumi.Input[int] creation_date: The date when the keyring was created.
        :param pulumi.Input[str] description: The description of the keyring.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        :param pulumi.Input[str] keyring_type: The type of the keyring.
        :param pulumi.Input[str] project_name: The name of the project.
        :param pulumi.Input[str] trn: The information about the tenant resource name (TRN).
        :param pulumi.Input[str] uid: The tenant ID of the keyring.
        :param pulumi.Input[int] update_date: The date when the keyring was updated.
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if keyring_name is not None:
            pulumi.set(__self__, "keyring_name", keyring_name)
        if keyring_type is not None:
            pulumi.set(__self__, "keyring_type", keyring_type)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if trn is not None:
            pulumi.set(__self__, "trn", trn)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if update_date is not None:
            pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[int]]:
        """
        The date when the keyring was created.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the keyring.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

    @keyring_name.setter
    def keyring_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring_name", value)

    @property
    @pulumi.getter(name="keyringType")
    def keyring_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the keyring.
        """
        return pulumi.get(self, "keyring_type")

    @keyring_type.setter
    def keyring_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring_type", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the project.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def trn(self) -> Optional[pulumi.Input[str]]:
        """
        The information about the tenant resource name (TRN).
        """
        return pulumi.get(self, "trn")

    @trn.setter
    def trn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trn", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        The tenant ID of the keyring.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> Optional[pulumi.Input[int]]:
        """
        The date when the keyring was updated.
        """
        return pulumi.get(self, "update_date")

    @update_date.setter
    def update_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_date", value)


class Keyring(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 keyring_name: Optional[pulumi.Input[str]] = None,
                 keyring_type: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage kms keyring
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.kms.Keyring("foo",
            description="tf-test",
            keyring_name="tf-test",
            project_name="default")
        ```

        ## Import

        KmsKeyring can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:kms/keyring:Keyring default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the keyring.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        :param pulumi.Input[str] keyring_type: The type of the keyring.
        :param pulumi.Input[str] project_name: The name of the project.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeyringArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage kms keyring
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.kms.Keyring("foo",
            description="tf-test",
            keyring_name="tf-test",
            project_name="default")
        ```

        ## Import

        KmsKeyring can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:kms/keyring:Keyring default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param KeyringArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeyringArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 keyring_name: Optional[pulumi.Input[str]] = None,
                 keyring_type: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeyringArgs.__new__(KeyringArgs)

            __props__.__dict__["description"] = description
            if keyring_name is None and not opts.urn:
                raise TypeError("Missing required property 'keyring_name'")
            __props__.__dict__["keyring_name"] = keyring_name
            __props__.__dict__["keyring_type"] = keyring_type
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["trn"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_date"] = None
        super(Keyring, __self__).__init__(
            'volcengine:kms/keyring:Keyring',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            keyring_name: Optional[pulumi.Input[str]] = None,
            keyring_type: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            trn: Optional[pulumi.Input[str]] = None,
            uid: Optional[pulumi.Input[str]] = None,
            update_date: Optional[pulumi.Input[int]] = None) -> 'Keyring':
        """
        Get an existing Keyring resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] creation_date: The date when the keyring was created.
        :param pulumi.Input[str] description: The description of the keyring.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        :param pulumi.Input[str] keyring_type: The type of the keyring.
        :param pulumi.Input[str] project_name: The name of the project.
        :param pulumi.Input[str] trn: The information about the tenant resource name (TRN).
        :param pulumi.Input[str] uid: The tenant ID of the keyring.
        :param pulumi.Input[int] update_date: The date when the keyring was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeyringState.__new__(_KeyringState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["description"] = description
        __props__.__dict__["keyring_name"] = keyring_name
        __props__.__dict__["keyring_type"] = keyring_type
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["trn"] = trn
        __props__.__dict__["uid"] = uid
        __props__.__dict__["update_date"] = update_date
        return Keyring(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[int]:
        """
        The date when the keyring was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the keyring.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> pulumi.Output[str]:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

    @property
    @pulumi.getter(name="keyringType")
    def keyring_type(self) -> pulumi.Output[str]:
        """
        The type of the keyring.
        """
        return pulumi.get(self, "keyring_type")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The name of the project.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def trn(self) -> pulumi.Output[str]:
        """
        The information about the tenant resource name (TRN).
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        The tenant ID of the keyring.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> pulumi.Output[int]:
        """
        The date when the keyring was updated.
        """
        return pulumi.get(self, "update_date")

