# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SecretArgs', 'Secret']

@pulumi.input_type
class SecretArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 secret_type: pulumi.Input[str],
                 secret_value: pulumi.Input[str],
                 automatic_rotation: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 extended_config: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rotation_interval: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Secret resource.
        :param pulumi.Input[str] secret_name: The name of the secret.
        :param pulumi.Input[str] secret_type: The type of the secret.
        :param pulumi.Input[str] secret_value: The value of the secret.
        :param pulumi.Input[bool] automatic_rotation: The rotation state of the secret.
        :param pulumi.Input[str] description: The description of the secret.
        :param pulumi.Input[str] encryption_key: The TRN of the KMS key used to encrypt the secret value.
        :param pulumi.Input[str] extended_config: The extended configurations of the secret.
        :param pulumi.Input[str] project_name: The project name of the secret.
        :param pulumi.Input[str] rotation_interval: The interval at which automatic rotation is performed.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_type", secret_type)
        pulumi.set(__self__, "secret_value", secret_value)
        if automatic_rotation is not None:
            pulumi.set(__self__, "automatic_rotation", automatic_rotation)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if extended_config is not None:
            pulumi.set(__self__, "extended_config", extended_config)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if rotation_interval is not None:
            pulumi.set(__self__, "rotation_interval", rotation_interval)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the secret.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> pulumi.Input[str]:
        """
        The type of the secret.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> pulumi.Input[str]:
        """
        The value of the secret.
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter(name="automaticRotation")
    def automatic_rotation(self) -> Optional[pulumi.Input[bool]]:
        """
        The rotation state of the secret.
        """
        return pulumi.get(self, "automatic_rotation")

    @automatic_rotation.setter
    def automatic_rotation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_rotation", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the secret.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[str]]:
        """
        The TRN of the KMS key used to encrypt the secret value.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter(name="extendedConfig")
    def extended_config(self) -> Optional[pulumi.Input[str]]:
        """
        The extended configurations of the secret.
        """
        return pulumi.get(self, "extended_config")

    @extended_config.setter
    def extended_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_config", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of the secret.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="rotationInterval")
    def rotation_interval(self) -> Optional[pulumi.Input[str]]:
        """
        The interval at which automatic rotation is performed.
        """
        return pulumi.get(self, "rotation_interval")

    @rotation_interval.setter
    def rotation_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_interval", value)


@pulumi.input_type
class _SecretState:
    def __init__(__self__, *,
                 automatic_rotation: Optional[pulumi.Input[bool]] = None,
                 creation_date: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 extended_config: Optional[pulumi.Input[str]] = None,
                 last_rotation_time: Optional[pulumi.Input[str]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rotation_interval: Optional[pulumi.Input[str]] = None,
                 rotation_interval_second: Optional[pulumi.Input[int]] = None,
                 rotation_state: Optional[pulumi.Input[str]] = None,
                 schedule_delete_time: Optional[pulumi.Input[str]] = None,
                 schedule_rotation_time: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 secret_value: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 trn: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 update_date: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Secret resources.
        :param pulumi.Input[bool] automatic_rotation: The rotation state of the secret.
        :param pulumi.Input[int] creation_date: The date when the secret was created.
        :param pulumi.Input[str] description: The description of the secret.
        :param pulumi.Input[str] encryption_key: The TRN of the KMS key used to encrypt the secret value.
        :param pulumi.Input[str] extended_config: The extended configurations of the secret.
        :param pulumi.Input[str] last_rotation_time: The last time the secret was rotated.
        :param pulumi.Input[bool] managed: Indicates whether the secret is hosted.
        :param pulumi.Input[str] project_name: The project name of the secret.
        :param pulumi.Input[str] rotation_interval: The interval at which automatic rotation is performed.
        :param pulumi.Input[int] rotation_interval_second: Rotation interval second.
        :param pulumi.Input[str] rotation_state: The rotation state of the secret.
        :param pulumi.Input[str] schedule_delete_time: The time when the secret will be deleted.
        :param pulumi.Input[str] schedule_rotation_time: The next time the secret will be rotated.
        :param pulumi.Input[str] secret_name: The name of the secret.
        :param pulumi.Input[str] secret_type: The type of the secret.
        :param pulumi.Input[str] secret_value: The value of the secret.
        :param pulumi.Input[str] state: The state of secret.
        :param pulumi.Input[str] trn: The information about the tenant resource name (TRN).
        :param pulumi.Input[str] uid: The tenant ID of the secret.
        :param pulumi.Input[int] update_date: The date when the secret was updated.
        :param pulumi.Input[str] uuid: The ID of secret.
        """
        if automatic_rotation is not None:
            pulumi.set(__self__, "automatic_rotation", automatic_rotation)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if extended_config is not None:
            pulumi.set(__self__, "extended_config", extended_config)
        if last_rotation_time is not None:
            pulumi.set(__self__, "last_rotation_time", last_rotation_time)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if rotation_interval is not None:
            pulumi.set(__self__, "rotation_interval", rotation_interval)
        if rotation_interval_second is not None:
            pulumi.set(__self__, "rotation_interval_second", rotation_interval_second)
        if rotation_state is not None:
            pulumi.set(__self__, "rotation_state", rotation_state)
        if schedule_delete_time is not None:
            pulumi.set(__self__, "schedule_delete_time", schedule_delete_time)
        if schedule_rotation_time is not None:
            pulumi.set(__self__, "schedule_rotation_time", schedule_rotation_time)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if trn is not None:
            pulumi.set(__self__, "trn", trn)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if update_date is not None:
            pulumi.set(__self__, "update_date", update_date)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="automaticRotation")
    def automatic_rotation(self) -> Optional[pulumi.Input[bool]]:
        """
        The rotation state of the secret.
        """
        return pulumi.get(self, "automatic_rotation")

    @automatic_rotation.setter
    def automatic_rotation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_rotation", value)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[int]]:
        """
        The date when the secret was created.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the secret.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[str]]:
        """
        The TRN of the KMS key used to encrypt the secret value.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter(name="extendedConfig")
    def extended_config(self) -> Optional[pulumi.Input[str]]:
        """
        The extended configurations of the secret.
        """
        return pulumi.get(self, "extended_config")

    @extended_config.setter
    def extended_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_config", value)

    @property
    @pulumi.getter(name="lastRotationTime")
    def last_rotation_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time the secret was rotated.
        """
        return pulumi.get(self, "last_rotation_time")

    @last_rotation_time.setter
    def last_rotation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_rotation_time", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the secret is hosted.
        """
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of the secret.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="rotationInterval")
    def rotation_interval(self) -> Optional[pulumi.Input[str]]:
        """
        The interval at which automatic rotation is performed.
        """
        return pulumi.get(self, "rotation_interval")

    @rotation_interval.setter
    def rotation_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_interval", value)

    @property
    @pulumi.getter(name="rotationIntervalSecond")
    def rotation_interval_second(self) -> Optional[pulumi.Input[int]]:
        """
        Rotation interval second.
        """
        return pulumi.get(self, "rotation_interval_second")

    @rotation_interval_second.setter
    def rotation_interval_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rotation_interval_second", value)

    @property
    @pulumi.getter(name="rotationState")
    def rotation_state(self) -> Optional[pulumi.Input[str]]:
        """
        The rotation state of the secret.
        """
        return pulumi.get(self, "rotation_state")

    @rotation_state.setter
    def rotation_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_state", value)

    @property
    @pulumi.getter(name="scheduleDeleteTime")
    def schedule_delete_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the secret will be deleted.
        """
        return pulumi.get(self, "schedule_delete_time")

    @schedule_delete_time.setter
    def schedule_delete_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_delete_time", value)

    @property
    @pulumi.getter(name="scheduleRotationTime")
    def schedule_rotation_time(self) -> Optional[pulumi.Input[str]]:
        """
        The next time the secret will be rotated.
        """
        return pulumi.get(self, "schedule_rotation_time")

    @schedule_rotation_time.setter
    def schedule_rotation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_rotation_time", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the secret.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the secret.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the secret.
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of secret.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def trn(self) -> Optional[pulumi.Input[str]]:
        """
        The information about the tenant resource name (TRN).
        """
        return pulumi.get(self, "trn")

    @trn.setter
    def trn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trn", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        The tenant ID of the secret.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> Optional[pulumi.Input[int]]:
        """
        The date when the secret was updated.
        """
        return pulumi.get(self, "update_date")

    @update_date.setter
    def update_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_date", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of secret.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class Secret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automatic_rotation: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 extended_config: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rotation_interval: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 secret_value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage kms secret
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.kms.Secret("foo",
            description="tf-test",
            secret_name="tf-test1",
            secret_type="Generic",
            secret_value="{\\"dasdasd\\":\\"dasdasd\\"}")
        ```

        ## Import

        KmsSecret can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:kms/secret:Secret default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] automatic_rotation: The rotation state of the secret.
        :param pulumi.Input[str] description: The description of the secret.
        :param pulumi.Input[str] encryption_key: The TRN of the KMS key used to encrypt the secret value.
        :param pulumi.Input[str] extended_config: The extended configurations of the secret.
        :param pulumi.Input[str] project_name: The project name of the secret.
        :param pulumi.Input[str] rotation_interval: The interval at which automatic rotation is performed.
        :param pulumi.Input[str] secret_name: The name of the secret.
        :param pulumi.Input[str] secret_type: The type of the secret.
        :param pulumi.Input[str] secret_value: The value of the secret.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecretArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage kms secret
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.kms.Secret("foo",
            description="tf-test",
            secret_name="tf-test1",
            secret_type="Generic",
            secret_value="{\\"dasdasd\\":\\"dasdasd\\"}")
        ```

        ## Import

        KmsSecret can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:kms/secret:Secret default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param SecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automatic_rotation: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 extended_config: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rotation_interval: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 secret_value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecretArgs.__new__(SecretArgs)

            __props__.__dict__["automatic_rotation"] = automatic_rotation
            __props__.__dict__["description"] = description
            __props__.__dict__["encryption_key"] = encryption_key
            __props__.__dict__["extended_config"] = extended_config
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["rotation_interval"] = rotation_interval
            if secret_name is None and not opts.urn:
                raise TypeError("Missing required property 'secret_name'")
            __props__.__dict__["secret_name"] = secret_name
            if secret_type is None and not opts.urn:
                raise TypeError("Missing required property 'secret_type'")
            __props__.__dict__["secret_type"] = secret_type
            if secret_value is None and not opts.urn:
                raise TypeError("Missing required property 'secret_value'")
            __props__.__dict__["secret_value"] = secret_value
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["last_rotation_time"] = None
            __props__.__dict__["managed"] = None
            __props__.__dict__["rotation_interval_second"] = None
            __props__.__dict__["rotation_state"] = None
            __props__.__dict__["schedule_delete_time"] = None
            __props__.__dict__["schedule_rotation_time"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["trn"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_date"] = None
            __props__.__dict__["uuid"] = None
        super(Secret, __self__).__init__(
            'volcengine:kms/secret:Secret',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            automatic_rotation: Optional[pulumi.Input[bool]] = None,
            creation_date: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            encryption_key: Optional[pulumi.Input[str]] = None,
            extended_config: Optional[pulumi.Input[str]] = None,
            last_rotation_time: Optional[pulumi.Input[str]] = None,
            managed: Optional[pulumi.Input[bool]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            rotation_interval: Optional[pulumi.Input[str]] = None,
            rotation_interval_second: Optional[pulumi.Input[int]] = None,
            rotation_state: Optional[pulumi.Input[str]] = None,
            schedule_delete_time: Optional[pulumi.Input[str]] = None,
            schedule_rotation_time: Optional[pulumi.Input[str]] = None,
            secret_name: Optional[pulumi.Input[str]] = None,
            secret_type: Optional[pulumi.Input[str]] = None,
            secret_value: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            trn: Optional[pulumi.Input[str]] = None,
            uid: Optional[pulumi.Input[str]] = None,
            update_date: Optional[pulumi.Input[int]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'Secret':
        """
        Get an existing Secret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] automatic_rotation: The rotation state of the secret.
        :param pulumi.Input[int] creation_date: The date when the secret was created.
        :param pulumi.Input[str] description: The description of the secret.
        :param pulumi.Input[str] encryption_key: The TRN of the KMS key used to encrypt the secret value.
        :param pulumi.Input[str] extended_config: The extended configurations of the secret.
        :param pulumi.Input[str] last_rotation_time: The last time the secret was rotated.
        :param pulumi.Input[bool] managed: Indicates whether the secret is hosted.
        :param pulumi.Input[str] project_name: The project name of the secret.
        :param pulumi.Input[str] rotation_interval: The interval at which automatic rotation is performed.
        :param pulumi.Input[int] rotation_interval_second: Rotation interval second.
        :param pulumi.Input[str] rotation_state: The rotation state of the secret.
        :param pulumi.Input[str] schedule_delete_time: The time when the secret will be deleted.
        :param pulumi.Input[str] schedule_rotation_time: The next time the secret will be rotated.
        :param pulumi.Input[str] secret_name: The name of the secret.
        :param pulumi.Input[str] secret_type: The type of the secret.
        :param pulumi.Input[str] secret_value: The value of the secret.
        :param pulumi.Input[str] state: The state of secret.
        :param pulumi.Input[str] trn: The information about the tenant resource name (TRN).
        :param pulumi.Input[str] uid: The tenant ID of the secret.
        :param pulumi.Input[int] update_date: The date when the secret was updated.
        :param pulumi.Input[str] uuid: The ID of secret.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecretState.__new__(_SecretState)

        __props__.__dict__["automatic_rotation"] = automatic_rotation
        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["description"] = description
        __props__.__dict__["encryption_key"] = encryption_key
        __props__.__dict__["extended_config"] = extended_config
        __props__.__dict__["last_rotation_time"] = last_rotation_time
        __props__.__dict__["managed"] = managed
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["rotation_interval"] = rotation_interval
        __props__.__dict__["rotation_interval_second"] = rotation_interval_second
        __props__.__dict__["rotation_state"] = rotation_state
        __props__.__dict__["schedule_delete_time"] = schedule_delete_time
        __props__.__dict__["schedule_rotation_time"] = schedule_rotation_time
        __props__.__dict__["secret_name"] = secret_name
        __props__.__dict__["secret_type"] = secret_type
        __props__.__dict__["secret_value"] = secret_value
        __props__.__dict__["state"] = state
        __props__.__dict__["trn"] = trn
        __props__.__dict__["uid"] = uid
        __props__.__dict__["update_date"] = update_date
        __props__.__dict__["uuid"] = uuid
        return Secret(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="automaticRotation")
    def automatic_rotation(self) -> pulumi.Output[Optional[bool]]:
        """
        The rotation state of the secret.
        """
        return pulumi.get(self, "automatic_rotation")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[int]:
        """
        The date when the secret was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the secret.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Output[str]:
        """
        The TRN of the KMS key used to encrypt the secret value.
        """
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="extendedConfig")
    def extended_config(self) -> pulumi.Output[str]:
        """
        The extended configurations of the secret.
        """
        return pulumi.get(self, "extended_config")

    @property
    @pulumi.getter(name="lastRotationTime")
    def last_rotation_time(self) -> pulumi.Output[str]:
        """
        The last time the secret was rotated.
        """
        return pulumi.get(self, "last_rotation_time")

    @property
    @pulumi.getter
    def managed(self) -> pulumi.Output[bool]:
        """
        Indicates whether the secret is hosted.
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The project name of the secret.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="rotationInterval")
    def rotation_interval(self) -> pulumi.Output[str]:
        """
        The interval at which automatic rotation is performed.
        """
        return pulumi.get(self, "rotation_interval")

    @property
    @pulumi.getter(name="rotationIntervalSecond")
    def rotation_interval_second(self) -> pulumi.Output[int]:
        """
        Rotation interval second.
        """
        return pulumi.get(self, "rotation_interval_second")

    @property
    @pulumi.getter(name="rotationState")
    def rotation_state(self) -> pulumi.Output[str]:
        """
        The rotation state of the secret.
        """
        return pulumi.get(self, "rotation_state")

    @property
    @pulumi.getter(name="scheduleDeleteTime")
    def schedule_delete_time(self) -> pulumi.Output[str]:
        """
        The time when the secret will be deleted.
        """
        return pulumi.get(self, "schedule_delete_time")

    @property
    @pulumi.getter(name="scheduleRotationTime")
    def schedule_rotation_time(self) -> pulumi.Output[str]:
        """
        The next time the secret will be rotated.
        """
        return pulumi.get(self, "schedule_rotation_time")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Output[str]:
        """
        The name of the secret.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> pulumi.Output[str]:
        """
        The type of the secret.
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> pulumi.Output[str]:
        """
        The value of the secret.
        """
        return pulumi.get(self, "secret_value")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of secret.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def trn(self) -> pulumi.Output[str]:
        """
        The information about the tenant resource name (TRN).
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        The tenant ID of the secret.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> pulumi.Output[int]:
        """
        The date when the secret was updated.
        """
        return pulumi.get(self, "update_date")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        The ID of secret.
        """
        return pulumi.get(self, "uuid")

