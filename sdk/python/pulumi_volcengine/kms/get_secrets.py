# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecretsResult',
    'AwaitableGetSecretsResult',
    'get_secrets',
    'get_secrets_output',
]

@pulumi.output_type
class GetSecretsResult:
    """
    A collection of values returned by getSecrets.
    """
    def __init__(__self__, creation_date_ranges=None, descriptions=None, id=None, managed_states=None, name_regex=None, output_file=None, project_name=None, rotation_states=None, secret_names=None, secret_states=None, secret_types=None, secrets=None, total_count=None, trns=None, update_date_ranges=None):
        if creation_date_ranges and not isinstance(creation_date_ranges, list):
            raise TypeError("Expected argument 'creation_date_ranges' to be a list")
        pulumi.set(__self__, "creation_date_ranges", creation_date_ranges)
        if descriptions and not isinstance(descriptions, list):
            raise TypeError("Expected argument 'descriptions' to be a list")
        pulumi.set(__self__, "descriptions", descriptions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managed_states and not isinstance(managed_states, list):
            raise TypeError("Expected argument 'managed_states' to be a list")
        pulumi.set(__self__, "managed_states", managed_states)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if rotation_states and not isinstance(rotation_states, list):
            raise TypeError("Expected argument 'rotation_states' to be a list")
        pulumi.set(__self__, "rotation_states", rotation_states)
        if secret_names and not isinstance(secret_names, list):
            raise TypeError("Expected argument 'secret_names' to be a list")
        pulumi.set(__self__, "secret_names", secret_names)
        if secret_states and not isinstance(secret_states, list):
            raise TypeError("Expected argument 'secret_states' to be a list")
        pulumi.set(__self__, "secret_states", secret_states)
        if secret_types and not isinstance(secret_types, list):
            raise TypeError("Expected argument 'secret_types' to be a list")
        pulumi.set(__self__, "secret_types", secret_types)
        if secrets and not isinstance(secrets, list):
            raise TypeError("Expected argument 'secrets' to be a list")
        pulumi.set(__self__, "secrets", secrets)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if trns and not isinstance(trns, list):
            raise TypeError("Expected argument 'trns' to be a list")
        pulumi.set(__self__, "trns", trns)
        if update_date_ranges and not isinstance(update_date_ranges, list):
            raise TypeError("Expected argument 'update_date_ranges' to be a list")
        pulumi.set(__self__, "update_date_ranges", update_date_ranges)

    @property
    @pulumi.getter(name="creationDateRanges")
    def creation_date_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "creation_date_ranges")

    @property
    @pulumi.getter
    def descriptions(self) -> Optional[Sequence[str]]:
        """
        The description of the secret.
        """
        return pulumi.get(self, "descriptions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedStates")
    def managed_states(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_states")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The project name of the secret.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="rotationStates")
    def rotation_states(self) -> Optional[Sequence[str]]:
        """
        The rotation state of the secret.
        """
        return pulumi.get(self, "rotation_states")

    @property
    @pulumi.getter(name="secretNames")
    def secret_names(self) -> Optional[Sequence[str]]:
        """
        The name of the secret.
        """
        return pulumi.get(self, "secret_names")

    @property
    @pulumi.getter(name="secretStates")
    def secret_states(self) -> Optional[Sequence[str]]:
        """
        The state of secret.
        """
        return pulumi.get(self, "secret_states")

    @property
    @pulumi.getter(name="secretTypes")
    def secret_types(self) -> Optional[Sequence[str]]:
        """
        The type of the secret.
        """
        return pulumi.get(self, "secret_types")

    @property
    @pulumi.getter
    def secrets(self) -> Sequence['outputs.GetSecretsSecretResult']:
        """
        The information about the secret.
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def trns(self) -> Optional[Sequence[str]]:
        """
        The information about the tenant resource name (TRN).
        """
        return pulumi.get(self, "trns")

    @property
    @pulumi.getter(name="updateDateRanges")
    def update_date_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "update_date_ranges")


class AwaitableGetSecretsResult(GetSecretsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecretsResult(
            creation_date_ranges=self.creation_date_ranges,
            descriptions=self.descriptions,
            id=self.id,
            managed_states=self.managed_states,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_name=self.project_name,
            rotation_states=self.rotation_states,
            secret_names=self.secret_names,
            secret_states=self.secret_states,
            secret_types=self.secret_types,
            secrets=self.secrets,
            total_count=self.total_count,
            trns=self.trns,
            update_date_ranges=self.update_date_ranges)


def get_secrets(creation_date_ranges: Optional[Sequence[str]] = None,
                descriptions: Optional[Sequence[str]] = None,
                managed_states: Optional[Sequence[str]] = None,
                name_regex: Optional[str] = None,
                output_file: Optional[str] = None,
                project_name: Optional[str] = None,
                rotation_states: Optional[Sequence[str]] = None,
                secret_names: Optional[Sequence[str]] = None,
                secret_states: Optional[Sequence[str]] = None,
                secret_types: Optional[Sequence[str]] = None,
                trns: Optional[Sequence[str]] = None,
                update_date_ranges: Optional[Sequence[str]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecretsResult:
    """
    Use this data source to query detailed information of kms secrets
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.kms.get_secrets(descriptions=[
            "tf-1",
            "tf-2",
        ],
        secret_names=[
            "5r3",
            "5r",
            "tf",
        ])
    ```


    :param Sequence[str] creation_date_ranges: The creation date of the secret.
    :param Sequence[str] descriptions: The description of the secret.
    :param Sequence[str] managed_states: The state of the managed.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The name of the project to which the secret belongs.
    :param Sequence[str] rotation_states: The state of the rotation.
    :param Sequence[str] secret_names: The name of the secret.
    :param Sequence[str] secret_states: The state of the secret.
    :param Sequence[str] secret_types: The type of the secret.
    :param Sequence[str] trns: The trn of the secret.
    :param Sequence[str] update_date_ranges: The update date of the secret.
    """
    __args__ = dict()
    __args__['creationDateRanges'] = creation_date_ranges
    __args__['descriptions'] = descriptions
    __args__['managedStates'] = managed_states
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['rotationStates'] = rotation_states
    __args__['secretNames'] = secret_names
    __args__['secretStates'] = secret_states
    __args__['secretTypes'] = secret_types
    __args__['trns'] = trns
    __args__['updateDateRanges'] = update_date_ranges
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:kms/getSecrets:getSecrets', __args__, opts=opts, typ=GetSecretsResult).value

    return AwaitableGetSecretsResult(
        creation_date_ranges=pulumi.get(__ret__, 'creation_date_ranges'),
        descriptions=pulumi.get(__ret__, 'descriptions'),
        id=pulumi.get(__ret__, 'id'),
        managed_states=pulumi.get(__ret__, 'managed_states'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        rotation_states=pulumi.get(__ret__, 'rotation_states'),
        secret_names=pulumi.get(__ret__, 'secret_names'),
        secret_states=pulumi.get(__ret__, 'secret_states'),
        secret_types=pulumi.get(__ret__, 'secret_types'),
        secrets=pulumi.get(__ret__, 'secrets'),
        total_count=pulumi.get(__ret__, 'total_count'),
        trns=pulumi.get(__ret__, 'trns'),
        update_date_ranges=pulumi.get(__ret__, 'update_date_ranges'))


@_utilities.lift_output_func(get_secrets)
def get_secrets_output(creation_date_ranges: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       descriptions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       managed_states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                       output_file: Optional[pulumi.Input[Optional[str]]] = None,
                       project_name: Optional[pulumi.Input[Optional[str]]] = None,
                       rotation_states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       secret_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       secret_states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       secret_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       trns: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       update_date_ranges: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecretsResult]:
    """
    Use this data source to query detailed information of kms secrets
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.kms.get_secrets(descriptions=[
            "tf-1",
            "tf-2",
        ],
        secret_names=[
            "5r3",
            "5r",
            "tf",
        ])
    ```


    :param Sequence[str] creation_date_ranges: The creation date of the secret.
    :param Sequence[str] descriptions: The description of the secret.
    :param Sequence[str] managed_states: The state of the managed.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    :param str project_name: The name of the project to which the secret belongs.
    :param Sequence[str] rotation_states: The state of the rotation.
    :param Sequence[str] secret_names: The name of the secret.
    :param Sequence[str] secret_states: The state of the secret.
    :param Sequence[str] secret_types: The type of the secret.
    :param Sequence[str] trns: The trn of the secret.
    :param Sequence[str] update_date_ranges: The update date of the secret.
    """
    ...
