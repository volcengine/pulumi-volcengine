# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['KeyArchiveArgs', 'KeyArchive']

@pulumi.input_type
class KeyArchiveArgs:
    def __init__(__self__, *,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 keyring_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KeyArchive resource.
        :param pulumi.Input[str] key_id: The id of the CMK.
        :param pulumi.Input[str] key_name: The name of the CMK.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if keyring_name is not None:
            pulumi.set(__self__, "keyring_name", keyring_name)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the CMK.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the CMK.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

    @keyring_name.setter
    def keyring_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring_name", value)


@pulumi.input_type
class _KeyArchiveState:
    def __init__(__self__, *,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 key_state: Optional[pulumi.Input[str]] = None,
                 keyring_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering KeyArchive resources.
        :param pulumi.Input[str] key_id: The id of the CMK.
        :param pulumi.Input[str] key_name: The name of the CMK.
        :param pulumi.Input[str] key_state: The state of the key.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if key_state is not None:
            pulumi.set(__self__, "key_state", key_state)
        if keyring_name is not None:
            pulumi.set(__self__, "keyring_name", keyring_name)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the CMK.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the CMK.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="keyState")
    def key_state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the key.
        """
        return pulumi.get(self, "key_state")

    @key_state.setter
    def key_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_state", value)

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

    @keyring_name.setter
    def keyring_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring_name", value)


class KeyArchive(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 keyring_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage kms key archive
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_keyring = volcengine.kms.Keyring("fooKeyring",
            keyring_name="tf-test",
            description="tf-test",
            project_name="default")
        foo_key = volcengine.kms.Key("fooKey",
            keyring_name=foo_keyring.keyring_name,
            key_name="mrk-tf-key-mod",
            description="tf test key-mod",
            tags=[volcengine.kms.KeyTagArgs(
                key="tfkey3",
                value="tfvalue3",
            )])
        foo_key_archive = volcengine.kms.KeyArchive("fooKeyArchive", key_id=foo_key.id)
        ```

        ## Import

        KmsKeyArchive can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:kms/keyArchive:KeyArchive default resource_id
        ```

        or

        ```sh
        $ pulumi import volcengine:kms/keyArchive:KeyArchive default key_name:keyring_name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key_id: The id of the CMK.
        :param pulumi.Input[str] key_name: The name of the CMK.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[KeyArchiveArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage kms key archive
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_keyring = volcengine.kms.Keyring("fooKeyring",
            keyring_name="tf-test",
            description="tf-test",
            project_name="default")
        foo_key = volcengine.kms.Key("fooKey",
            keyring_name=foo_keyring.keyring_name,
            key_name="mrk-tf-key-mod",
            description="tf test key-mod",
            tags=[volcengine.kms.KeyTagArgs(
                key="tfkey3",
                value="tfvalue3",
            )])
        foo_key_archive = volcengine.kms.KeyArchive("fooKeyArchive", key_id=foo_key.id)
        ```

        ## Import

        KmsKeyArchive can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:kms/keyArchive:KeyArchive default resource_id
        ```

        or

        ```sh
        $ pulumi import volcengine:kms/keyArchive:KeyArchive default key_name:keyring_name
        ```

        :param str resource_name: The name of the resource.
        :param KeyArchiveArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeyArchiveArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 keyring_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeyArchiveArgs.__new__(KeyArchiveArgs)

            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["key_name"] = key_name
            __props__.__dict__["keyring_name"] = keyring_name
            __props__.__dict__["key_state"] = None
        super(KeyArchive, __self__).__init__(
            'volcengine:kms/keyArchive:KeyArchive',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            key_id: Optional[pulumi.Input[str]] = None,
            key_name: Optional[pulumi.Input[str]] = None,
            key_state: Optional[pulumi.Input[str]] = None,
            keyring_name: Optional[pulumi.Input[str]] = None) -> 'KeyArchive':
        """
        Get an existing KeyArchive resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key_id: The id of the CMK.
        :param pulumi.Input[str] key_name: The name of the CMK.
        :param pulumi.Input[str] key_state: The state of the key.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeyArchiveState.__new__(_KeyArchiveState)

        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["key_name"] = key_name
        __props__.__dict__["key_state"] = key_state
        __props__.__dict__["keyring_name"] = keyring_name
        return KeyArchive(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[str]:
        """
        The id of the CMK.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Output[str]:
        """
        The name of the CMK.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keyState")
    def key_state(self) -> pulumi.Output[str]:
        """
        The state of the key.
        """
        return pulumi.get(self, "key_state")

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

