# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'KeyMultiRegionConfigurationArgs',
    'KeyMultiRegionConfigurationPrimaryKeyArgs',
    'KeyMultiRegionConfigurationReplicaKeyArgs',
    'KeyTagArgs',
    'KeysTagArgs',
    'GetKeysTagArgs',
]

@pulumi.input_type
class KeyMultiRegionConfigurationArgs:
    def __init__(__self__, *,
                 multi_region_key_type: Optional[pulumi.Input[str]] = None,
                 primary_key: Optional[pulumi.Input['KeyMultiRegionConfigurationPrimaryKeyArgs']] = None,
                 replica_keys: Optional[pulumi.Input[Sequence[pulumi.Input['KeyMultiRegionConfigurationReplicaKeyArgs']]]] = None):
        """
        :param pulumi.Input[str] multi_region_key_type: The type of the multi-region key.
        :param pulumi.Input['KeyMultiRegionConfigurationPrimaryKeyArgs'] primary_key: Trn and region id of the primary multi-region key.
        :param pulumi.Input[Sequence[pulumi.Input['KeyMultiRegionConfigurationReplicaKeyArgs']]] replica_keys: Trn and region id of replica multi-region keys.
        """
        if multi_region_key_type is not None:
            pulumi.set(__self__, "multi_region_key_type", multi_region_key_type)
        if primary_key is not None:
            pulumi.set(__self__, "primary_key", primary_key)
        if replica_keys is not None:
            pulumi.set(__self__, "replica_keys", replica_keys)

    @property
    @pulumi.getter(name="multiRegionKeyType")
    def multi_region_key_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the multi-region key.
        """
        return pulumi.get(self, "multi_region_key_type")

    @multi_region_key_type.setter
    def multi_region_key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_region_key_type", value)

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional[pulumi.Input['KeyMultiRegionConfigurationPrimaryKeyArgs']]:
        """
        Trn and region id of the primary multi-region key.
        """
        return pulumi.get(self, "primary_key")

    @primary_key.setter
    def primary_key(self, value: Optional[pulumi.Input['KeyMultiRegionConfigurationPrimaryKeyArgs']]):
        pulumi.set(self, "primary_key", value)

    @property
    @pulumi.getter(name="replicaKeys")
    def replica_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeyMultiRegionConfigurationReplicaKeyArgs']]]]:
        """
        Trn and region id of replica multi-region keys.
        """
        return pulumi.get(self, "replica_keys")

    @replica_keys.setter
    def replica_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeyMultiRegionConfigurationReplicaKeyArgs']]]]):
        pulumi.set(self, "replica_keys", value)


@pulumi.input_type
class KeyMultiRegionConfigurationPrimaryKeyArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None,
                 trn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: The region id of multi-region key.
        :param pulumi.Input[str] trn: The name of the resource.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if trn is not None:
            pulumi.set(__self__, "trn", trn)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region id of multi-region key.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def trn(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")

    @trn.setter
    def trn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trn", value)


@pulumi.input_type
class KeyMultiRegionConfigurationReplicaKeyArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None,
                 trn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: The region id of multi-region key.
        :param pulumi.Input[str] trn: The name of the resource.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if trn is not None:
            pulumi.set(__self__, "trn", trn)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region id of multi-region key.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def trn(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")

    @trn.setter
    def trn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trn", value)


@pulumi.input_type
class KeyTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The Key of Tags.
        :param pulumi.Input[str] value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KeysTagArgs:
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The key of the tag.
        :param Sequence[str] values: The values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values of the tag.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetKeysTagArgs:
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        """
        :param str key: The key of the tag.
        :param Sequence[str] values: The values of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values of the tag.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


