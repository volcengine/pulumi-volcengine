# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetKeysResult',
    'AwaitableGetKeysResult',
    'get_keys',
    'get_keys_output',
]

@pulumi.output_type
class GetKeysResult:
    """
    A collection of values returned by getKeys.
    """
    def __init__(__self__, creation_date_ranges=None, descriptions=None, id=None, key_names=None, key_specs=None, key_states=None, key_usages=None, keyring_id=None, keyring_name=None, keys=None, name_regex=None, origins=None, output_file=None, protection_levels=None, rotate_states=None, tags=None, total_count=None, update_date_ranges=None):
        if creation_date_ranges and not isinstance(creation_date_ranges, list):
            raise TypeError("Expected argument 'creation_date_ranges' to be a list")
        pulumi.set(__self__, "creation_date_ranges", creation_date_ranges)
        if descriptions and not isinstance(descriptions, list):
            raise TypeError("Expected argument 'descriptions' to be a list")
        pulumi.set(__self__, "descriptions", descriptions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_names and not isinstance(key_names, list):
            raise TypeError("Expected argument 'key_names' to be a list")
        pulumi.set(__self__, "key_names", key_names)
        if key_specs and not isinstance(key_specs, list):
            raise TypeError("Expected argument 'key_specs' to be a list")
        pulumi.set(__self__, "key_specs", key_specs)
        if key_states and not isinstance(key_states, list):
            raise TypeError("Expected argument 'key_states' to be a list")
        pulumi.set(__self__, "key_states", key_states)
        if key_usages and not isinstance(key_usages, list):
            raise TypeError("Expected argument 'key_usages' to be a list")
        pulumi.set(__self__, "key_usages", key_usages)
        if keyring_id and not isinstance(keyring_id, str):
            raise TypeError("Expected argument 'keyring_id' to be a str")
        pulumi.set(__self__, "keyring_id", keyring_id)
        if keyring_name and not isinstance(keyring_name, str):
            raise TypeError("Expected argument 'keyring_name' to be a str")
        pulumi.set(__self__, "keyring_name", keyring_name)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if origins and not isinstance(origins, list):
            raise TypeError("Expected argument 'origins' to be a list")
        pulumi.set(__self__, "origins", origins)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if protection_levels and not isinstance(protection_levels, list):
            raise TypeError("Expected argument 'protection_levels' to be a list")
        pulumi.set(__self__, "protection_levels", protection_levels)
        if rotate_states and not isinstance(rotate_states, list):
            raise TypeError("Expected argument 'rotate_states' to be a list")
        pulumi.set(__self__, "rotate_states", rotate_states)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if update_date_ranges and not isinstance(update_date_ranges, list):
            raise TypeError("Expected argument 'update_date_ranges' to be a list")
        pulumi.set(__self__, "update_date_ranges", update_date_ranges)

    @property
    @pulumi.getter(name="creationDateRanges")
    def creation_date_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "creation_date_ranges")

    @property
    @pulumi.getter
    def descriptions(self) -> Optional[Sequence[str]]:
        """
        The description of the key.
        """
        return pulumi.get(self, "descriptions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyNames")
    def key_names(self) -> Optional[Sequence[str]]:
        """
        The name of the key.
        """
        return pulumi.get(self, "key_names")

    @property
    @pulumi.getter(name="keySpecs")
    def key_specs(self) -> Optional[Sequence[str]]:
        """
        The algorithm used in the key.
        """
        return pulumi.get(self, "key_specs")

    @property
    @pulumi.getter(name="keyStates")
    def key_states(self) -> Optional[Sequence[str]]:
        """
        The state of the key.
        """
        return pulumi.get(self, "key_states")

    @property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> Optional[Sequence[str]]:
        """
        The usage of the key.
        """
        return pulumi.get(self, "key_usages")

    @property
    @pulumi.getter(name="keyringId")
    def keyring_id(self) -> Optional[str]:
        return pulumi.get(self, "keyring_id")

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> Optional[str]:
        return pulumi.get(self, "keyring_name")

    @property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetKeysKeyResult']:
        """
        Master key list information.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence[str]]:
        """
        The origin of the key.
        """
        return pulumi.get(self, "origins")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="protectionLevels")
    def protection_levels(self) -> Optional[Sequence[str]]:
        """
        The protection level of the key.
        """
        return pulumi.get(self, "protection_levels")

    @property
    @pulumi.getter(name="rotateStates")
    def rotate_states(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "rotate_states")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetKeysTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updateDateRanges")
    def update_date_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "update_date_ranges")


class AwaitableGetKeysResult(GetKeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKeysResult(
            creation_date_ranges=self.creation_date_ranges,
            descriptions=self.descriptions,
            id=self.id,
            key_names=self.key_names,
            key_specs=self.key_specs,
            key_states=self.key_states,
            key_usages=self.key_usages,
            keyring_id=self.keyring_id,
            keyring_name=self.keyring_name,
            keys=self.keys,
            name_regex=self.name_regex,
            origins=self.origins,
            output_file=self.output_file,
            protection_levels=self.protection_levels,
            rotate_states=self.rotate_states,
            tags=self.tags,
            total_count=self.total_count,
            update_date_ranges=self.update_date_ranges)


def get_keys(creation_date_ranges: Optional[Sequence[str]] = None,
             descriptions: Optional[Sequence[str]] = None,
             key_names: Optional[Sequence[str]] = None,
             key_specs: Optional[Sequence[str]] = None,
             key_states: Optional[Sequence[str]] = None,
             key_usages: Optional[Sequence[str]] = None,
             keyring_id: Optional[str] = None,
             keyring_name: Optional[str] = None,
             name_regex: Optional[str] = None,
             origins: Optional[Sequence[str]] = None,
             output_file: Optional[str] = None,
             protection_levels: Optional[Sequence[str]] = None,
             rotate_states: Optional[Sequence[str]] = None,
             tags: Optional[Sequence[pulumi.InputType['GetKeysTagArgs']]] = None,
             update_date_ranges: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKeysResult:
    """
    Use this data source to query detailed information of kms keys
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.kms.get_keys(creation_date_ranges=[
            "2025-06-01 19:48:06",
            "2025-06-04 19:48:06",
        ],
        descriptions=["tf-test"],
        key_names=[
            "mrk-tf-key-mod",
            "mrk-tf-key",
        ],
        key_specs=["SYMMETRIC_256"],
        key_states=["Enable"],
        key_usages=["ENCRYPT_DECRYPT"],
        keyring_id="7a358829-bd5a-4763-ba77-7500ecxxxxxx",
        origins=["CloudKMS"],
        protection_levels=["SOFTWARE"],
        rotate_states=["Enable"],
        tags=[volcengine.kms.GetKeysTagArgs(
            key="tf-k1",
            values=["tf-v1"],
        )],
        update_date_ranges=[
            "2025-06-01 19:48:06",
            "2025-06-04 19:48:06",
        ])
    ```


    :param Sequence[str] creation_date_ranges: The creation date of the keyring.
    :param Sequence[str] descriptions: The description of the key.
    :param Sequence[str] key_names: The name of the key.
    :param Sequence[str] key_specs: The algorithm used in the key.
    :param Sequence[str] key_states: The state of the key.
    :param Sequence[str] key_usages: The usage of the key.
    :param str keyring_id: Query the Key ring that meets the specified conditions, which is composed of key-value pairs.
    :param str keyring_name: Query the Key ring that meets the specified conditions, which is composed of key-value pairs.
    :param str name_regex: A Name Regex of Resource.
    :param Sequence[str] origins: The origin of the key.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] protection_levels: The protection level of the key.
    :param Sequence[str] rotate_states: The state of the rotate.
    :param Sequence[pulumi.InputType['GetKeysTagArgs']] tags: A list of tags.
    :param Sequence[str] update_date_ranges: The update date of the keyring.
    """
    __args__ = dict()
    __args__['creationDateRanges'] = creation_date_ranges
    __args__['descriptions'] = descriptions
    __args__['keyNames'] = key_names
    __args__['keySpecs'] = key_specs
    __args__['keyStates'] = key_states
    __args__['keyUsages'] = key_usages
    __args__['keyringId'] = keyring_id
    __args__['keyringName'] = keyring_name
    __args__['nameRegex'] = name_regex
    __args__['origins'] = origins
    __args__['outputFile'] = output_file
    __args__['protectionLevels'] = protection_levels
    __args__['rotateStates'] = rotate_states
    __args__['tags'] = tags
    __args__['updateDateRanges'] = update_date_ranges
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:kms/getKeys:getKeys', __args__, opts=opts, typ=GetKeysResult).value

    return AwaitableGetKeysResult(
        creation_date_ranges=pulumi.get(__ret__, 'creation_date_ranges'),
        descriptions=pulumi.get(__ret__, 'descriptions'),
        id=pulumi.get(__ret__, 'id'),
        key_names=pulumi.get(__ret__, 'key_names'),
        key_specs=pulumi.get(__ret__, 'key_specs'),
        key_states=pulumi.get(__ret__, 'key_states'),
        key_usages=pulumi.get(__ret__, 'key_usages'),
        keyring_id=pulumi.get(__ret__, 'keyring_id'),
        keyring_name=pulumi.get(__ret__, 'keyring_name'),
        keys=pulumi.get(__ret__, 'keys'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        origins=pulumi.get(__ret__, 'origins'),
        output_file=pulumi.get(__ret__, 'output_file'),
        protection_levels=pulumi.get(__ret__, 'protection_levels'),
        rotate_states=pulumi.get(__ret__, 'rotate_states'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        update_date_ranges=pulumi.get(__ret__, 'update_date_ranges'))


@_utilities.lift_output_func(get_keys)
def get_keys_output(creation_date_ranges: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    descriptions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    key_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    key_specs: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    key_states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    key_usages: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    keyring_id: Optional[pulumi.Input[Optional[str]]] = None,
                    keyring_name: Optional[pulumi.Input[Optional[str]]] = None,
                    name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                    origins: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    output_file: Optional[pulumi.Input[Optional[str]]] = None,
                    protection_levels: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    rotate_states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetKeysTagArgs']]]]] = None,
                    update_date_ranges: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKeysResult]:
    """
    Use this data source to query detailed information of kms keys
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.kms.get_keys(creation_date_ranges=[
            "2025-06-01 19:48:06",
            "2025-06-04 19:48:06",
        ],
        descriptions=["tf-test"],
        key_names=[
            "mrk-tf-key-mod",
            "mrk-tf-key",
        ],
        key_specs=["SYMMETRIC_256"],
        key_states=["Enable"],
        key_usages=["ENCRYPT_DECRYPT"],
        keyring_id="7a358829-bd5a-4763-ba77-7500ecxxxxxx",
        origins=["CloudKMS"],
        protection_levels=["SOFTWARE"],
        rotate_states=["Enable"],
        tags=[volcengine.kms.GetKeysTagArgs(
            key="tf-k1",
            values=["tf-v1"],
        )],
        update_date_ranges=[
            "2025-06-01 19:48:06",
            "2025-06-04 19:48:06",
        ])
    ```


    :param Sequence[str] creation_date_ranges: The creation date of the keyring.
    :param Sequence[str] descriptions: The description of the key.
    :param Sequence[str] key_names: The name of the key.
    :param Sequence[str] key_specs: The algorithm used in the key.
    :param Sequence[str] key_states: The state of the key.
    :param Sequence[str] key_usages: The usage of the key.
    :param str keyring_id: Query the Key ring that meets the specified conditions, which is composed of key-value pairs.
    :param str keyring_name: Query the Key ring that meets the specified conditions, which is composed of key-value pairs.
    :param str name_regex: A Name Regex of Resource.
    :param Sequence[str] origins: The origin of the key.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] protection_levels: The protection level of the key.
    :param Sequence[str] rotate_states: The state of the rotate.
    :param Sequence[pulumi.InputType['GetKeysTagArgs']] tags: A list of tags.
    :param Sequence[str] update_date_ranges: The update date of the keyring.
    """
    ...
