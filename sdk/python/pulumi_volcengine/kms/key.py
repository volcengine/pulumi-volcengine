# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KeyArgs', 'Key']

@pulumi.input_type
class KeyArgs:
    def __init__(__self__, *,
                 key_name: pulumi.Input[str],
                 keyring_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 key_spec: Optional[pulumi.Input[str]] = None,
                 key_usage: Optional[pulumi.Input[str]] = None,
                 multi_region: Optional[pulumi.Input[bool]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 pending_window_in_days: Optional[pulumi.Input[int]] = None,
                 protection_level: Optional[pulumi.Input[str]] = None,
                 rotate_state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['KeyTagArgs']]]] = None):
        """
        The set of arguments for constructing a Key resource.
        :param pulumi.Input[str] key_name: The name of the CMK.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        :param pulumi.Input[str] description: The description of the key.
        :param pulumi.Input[str] key_spec: The type of the keys.
        :param pulumi.Input[str] key_usage: The usage of the key.
        :param pulumi.Input[bool] multi_region: Whether it is the master key of the Multi-region type.
        :param pulumi.Input[str] origin: The origin of the key.
        :param pulumi.Input[int] pending_window_in_days: The pre-deletion cycle of the key.
        :param pulumi.Input[str] protection_level: The protection level of the key.
        :param pulumi.Input[str] rotate_state: The rotation state of the key.
        :param pulumi.Input[Sequence[pulumi.Input['KeyTagArgs']]] tags: Tags.
        """
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "keyring_name", keyring_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key_spec is not None:
            pulumi.set(__self__, "key_spec", key_spec)
        if key_usage is not None:
            pulumi.set(__self__, "key_usage", key_usage)
        if multi_region is not None:
            pulumi.set(__self__, "multi_region", multi_region)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if pending_window_in_days is not None:
            pulumi.set(__self__, "pending_window_in_days", pending_window_in_days)
        if protection_level is not None:
            pulumi.set(__self__, "protection_level", protection_level)
        if rotate_state is not None:
            pulumi.set(__self__, "rotate_state", rotate_state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Input[str]:
        """
        The name of the CMK.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> pulumi.Input[str]:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

    @keyring_name.setter
    def keyring_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "keyring_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the key.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the keys.
        """
        return pulumi.get(self, "key_spec")

    @key_spec.setter
    def key_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_spec", value)

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> Optional[pulumi.Input[str]]:
        """
        The usage of the key.
        """
        return pulumi.get(self, "key_usage")

    @key_usage.setter
    def key_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_usage", value)

    @property
    @pulumi.getter(name="multiRegion")
    def multi_region(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether it is the master key of the Multi-region type.
        """
        return pulumi.get(self, "multi_region")

    @multi_region.setter
    def multi_region(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_region", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        The origin of the key.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="pendingWindowInDays")
    def pending_window_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        The pre-deletion cycle of the key.
        """
        return pulumi.get(self, "pending_window_in_days")

    @pending_window_in_days.setter
    def pending_window_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pending_window_in_days", value)

    @property
    @pulumi.getter(name="protectionLevel")
    def protection_level(self) -> Optional[pulumi.Input[str]]:
        """
        The protection level of the key.
        """
        return pulumi.get(self, "protection_level")

    @protection_level.setter
    def protection_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_level", value)

    @property
    @pulumi.getter(name="rotateState")
    def rotate_state(self) -> Optional[pulumi.Input[str]]:
        """
        The rotation state of the key.
        """
        return pulumi.get(self, "rotate_state")

    @rotate_state.setter
    def rotate_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotate_state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeyTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeyTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _KeyState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key_material_expire_time: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 key_spec: Optional[pulumi.Input[str]] = None,
                 key_usage: Optional[pulumi.Input[str]] = None,
                 keyring_name: Optional[pulumi.Input[str]] = None,
                 last_rotation_time: Optional[pulumi.Input[str]] = None,
                 multi_region: Optional[pulumi.Input[bool]] = None,
                 multi_region_configuration: Optional[pulumi.Input['KeyMultiRegionConfigurationArgs']] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 pending_window_in_days: Optional[pulumi.Input[int]] = None,
                 protection_level: Optional[pulumi.Input[str]] = None,
                 rotate_state: Optional[pulumi.Input[str]] = None,
                 rotation_state: Optional[pulumi.Input[str]] = None,
                 schedule_delete_time: Optional[pulumi.Input[str]] = None,
                 schedule_rotation_time: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['KeyTagArgs']]]] = None,
                 trn: Optional[pulumi.Input[str]] = None,
                 update_date: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Key resources.
        :param pulumi.Input[int] creation_date: The date when the keyring was created.
        :param pulumi.Input[str] description: The description of the key.
        :param pulumi.Input[str] key_material_expire_time: The time when the key material will expire.
        :param pulumi.Input[str] key_name: The name of the CMK.
        :param pulumi.Input[str] key_spec: The type of the keys.
        :param pulumi.Input[str] key_usage: The usage of the key.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        :param pulumi.Input[str] last_rotation_time: The last time the key was rotated.
        :param pulumi.Input[bool] multi_region: Whether it is the master key of the Multi-region type.
        :param pulumi.Input['KeyMultiRegionConfigurationArgs'] multi_region_configuration: The configuration of Multi-region key.
        :param pulumi.Input[str] origin: The origin of the key.
        :param pulumi.Input[int] pending_window_in_days: The pre-deletion cycle of the key.
        :param pulumi.Input[str] protection_level: The protection level of the key.
        :param pulumi.Input[str] rotate_state: The rotation state of the key.
        :param pulumi.Input[str] rotation_state: The rotation configuration of the key.
        :param pulumi.Input[str] schedule_delete_time: The time when the key will be deleted.
        :param pulumi.Input[str] schedule_rotation_time: The next time the key will be rotated.
        :param pulumi.Input[str] state: The state of the key.
        :param pulumi.Input[Sequence[pulumi.Input['KeyTagArgs']]] tags: Tags.
        :param pulumi.Input[str] trn: The name of the resource.
        :param pulumi.Input[int] update_date: The date when the keyring was updated.
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key_material_expire_time is not None:
            pulumi.set(__self__, "key_material_expire_time", key_material_expire_time)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if key_spec is not None:
            pulumi.set(__self__, "key_spec", key_spec)
        if key_usage is not None:
            pulumi.set(__self__, "key_usage", key_usage)
        if keyring_name is not None:
            pulumi.set(__self__, "keyring_name", keyring_name)
        if last_rotation_time is not None:
            pulumi.set(__self__, "last_rotation_time", last_rotation_time)
        if multi_region is not None:
            pulumi.set(__self__, "multi_region", multi_region)
        if multi_region_configuration is not None:
            pulumi.set(__self__, "multi_region_configuration", multi_region_configuration)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if pending_window_in_days is not None:
            pulumi.set(__self__, "pending_window_in_days", pending_window_in_days)
        if protection_level is not None:
            pulumi.set(__self__, "protection_level", protection_level)
        if rotate_state is not None:
            pulumi.set(__self__, "rotate_state", rotate_state)
        if rotation_state is not None:
            pulumi.set(__self__, "rotation_state", rotation_state)
        if schedule_delete_time is not None:
            pulumi.set(__self__, "schedule_delete_time", schedule_delete_time)
        if schedule_rotation_time is not None:
            pulumi.set(__self__, "schedule_rotation_time", schedule_rotation_time)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trn is not None:
            pulumi.set(__self__, "trn", trn)
        if update_date is not None:
            pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[int]]:
        """
        The date when the keyring was created.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the key.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="keyMaterialExpireTime")
    def key_material_expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the key material will expire.
        """
        return pulumi.get(self, "key_material_expire_time")

    @key_material_expire_time.setter
    def key_material_expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_material_expire_time", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the CMK.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the keys.
        """
        return pulumi.get(self, "key_spec")

    @key_spec.setter
    def key_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_spec", value)

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> Optional[pulumi.Input[str]]:
        """
        The usage of the key.
        """
        return pulumi.get(self, "key_usage")

    @key_usage.setter
    def key_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_usage", value)

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

    @keyring_name.setter
    def keyring_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring_name", value)

    @property
    @pulumi.getter(name="lastRotationTime")
    def last_rotation_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time the key was rotated.
        """
        return pulumi.get(self, "last_rotation_time")

    @last_rotation_time.setter
    def last_rotation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_rotation_time", value)

    @property
    @pulumi.getter(name="multiRegion")
    def multi_region(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether it is the master key of the Multi-region type.
        """
        return pulumi.get(self, "multi_region")

    @multi_region.setter
    def multi_region(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_region", value)

    @property
    @pulumi.getter(name="multiRegionConfiguration")
    def multi_region_configuration(self) -> Optional[pulumi.Input['KeyMultiRegionConfigurationArgs']]:
        """
        The configuration of Multi-region key.
        """
        return pulumi.get(self, "multi_region_configuration")

    @multi_region_configuration.setter
    def multi_region_configuration(self, value: Optional[pulumi.Input['KeyMultiRegionConfigurationArgs']]):
        pulumi.set(self, "multi_region_configuration", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        The origin of the key.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="pendingWindowInDays")
    def pending_window_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        The pre-deletion cycle of the key.
        """
        return pulumi.get(self, "pending_window_in_days")

    @pending_window_in_days.setter
    def pending_window_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pending_window_in_days", value)

    @property
    @pulumi.getter(name="protectionLevel")
    def protection_level(self) -> Optional[pulumi.Input[str]]:
        """
        The protection level of the key.
        """
        return pulumi.get(self, "protection_level")

    @protection_level.setter
    def protection_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_level", value)

    @property
    @pulumi.getter(name="rotateState")
    def rotate_state(self) -> Optional[pulumi.Input[str]]:
        """
        The rotation state of the key.
        """
        return pulumi.get(self, "rotate_state")

    @rotate_state.setter
    def rotate_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotate_state", value)

    @property
    @pulumi.getter(name="rotationState")
    def rotation_state(self) -> Optional[pulumi.Input[str]]:
        """
        The rotation configuration of the key.
        """
        return pulumi.get(self, "rotation_state")

    @rotation_state.setter
    def rotation_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_state", value)

    @property
    @pulumi.getter(name="scheduleDeleteTime")
    def schedule_delete_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the key will be deleted.
        """
        return pulumi.get(self, "schedule_delete_time")

    @schedule_delete_time.setter
    def schedule_delete_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_delete_time", value)

    @property
    @pulumi.getter(name="scheduleRotationTime")
    def schedule_rotation_time(self) -> Optional[pulumi.Input[str]]:
        """
        The next time the key will be rotated.
        """
        return pulumi.get(self, "schedule_rotation_time")

    @schedule_rotation_time.setter
    def schedule_rotation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_rotation_time", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the key.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeyTagArgs']]]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeyTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def trn(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")

    @trn.setter
    def trn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trn", value)

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> Optional[pulumi.Input[int]]:
        """
        The date when the keyring was updated.
        """
        return pulumi.get(self, "update_date")

    @update_date.setter
    def update_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_date", value)


class Key(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 key_spec: Optional[pulumi.Input[str]] = None,
                 key_usage: Optional[pulumi.Input[str]] = None,
                 keyring_name: Optional[pulumi.Input[str]] = None,
                 multi_region: Optional[pulumi.Input[bool]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 pending_window_in_days: Optional[pulumi.Input[int]] = None,
                 protection_level: Optional[pulumi.Input[str]] = None,
                 rotate_state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyTagArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage kms key
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_keyring = volcengine.kms.Keyring("fooKeyring",
            keyring_name="tf-test",
            description="tf-test",
            project_name="default")
        foo_key = volcengine.kms.Key("fooKey",
            keyring_name=foo_keyring.keyring_name,
            key_name="mrk-tf-key-mod",
            description="tf test key-mod",
            tags=[volcengine.kms.KeyTagArgs(
                key="tfkey3",
                value="tfvalue3",
            )])
        ```

        ## Import

        KmsKey can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:kms/key:Key default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the key.
        :param pulumi.Input[str] key_name: The name of the CMK.
        :param pulumi.Input[str] key_spec: The type of the keys.
        :param pulumi.Input[str] key_usage: The usage of the key.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        :param pulumi.Input[bool] multi_region: Whether it is the master key of the Multi-region type.
        :param pulumi.Input[str] origin: The origin of the key.
        :param pulumi.Input[int] pending_window_in_days: The pre-deletion cycle of the key.
        :param pulumi.Input[str] protection_level: The protection level of the key.
        :param pulumi.Input[str] rotate_state: The rotation state of the key.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyTagArgs']]]] tags: Tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage kms key
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_keyring = volcengine.kms.Keyring("fooKeyring",
            keyring_name="tf-test",
            description="tf-test",
            project_name="default")
        foo_key = volcengine.kms.Key("fooKey",
            keyring_name=foo_keyring.keyring_name,
            key_name="mrk-tf-key-mod",
            description="tf test key-mod",
            tags=[volcengine.kms.KeyTagArgs(
                key="tfkey3",
                value="tfvalue3",
            )])
        ```

        ## Import

        KmsKey can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:kms/key:Key default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param KeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 key_spec: Optional[pulumi.Input[str]] = None,
                 key_usage: Optional[pulumi.Input[str]] = None,
                 keyring_name: Optional[pulumi.Input[str]] = None,
                 multi_region: Optional[pulumi.Input[bool]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 pending_window_in_days: Optional[pulumi.Input[int]] = None,
                 protection_level: Optional[pulumi.Input[str]] = None,
                 rotate_state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeyArgs.__new__(KeyArgs)

            __props__.__dict__["description"] = description
            if key_name is None and not opts.urn:
                raise TypeError("Missing required property 'key_name'")
            __props__.__dict__["key_name"] = key_name
            __props__.__dict__["key_spec"] = key_spec
            __props__.__dict__["key_usage"] = key_usage
            if keyring_name is None and not opts.urn:
                raise TypeError("Missing required property 'keyring_name'")
            __props__.__dict__["keyring_name"] = keyring_name
            __props__.__dict__["multi_region"] = multi_region
            __props__.__dict__["origin"] = origin
            __props__.__dict__["pending_window_in_days"] = pending_window_in_days
            __props__.__dict__["protection_level"] = protection_level
            __props__.__dict__["rotate_state"] = rotate_state
            __props__.__dict__["tags"] = tags
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["key_material_expire_time"] = None
            __props__.__dict__["last_rotation_time"] = None
            __props__.__dict__["multi_region_configuration"] = None
            __props__.__dict__["rotation_state"] = None
            __props__.__dict__["schedule_delete_time"] = None
            __props__.__dict__["schedule_rotation_time"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["trn"] = None
            __props__.__dict__["update_date"] = None
        super(Key, __self__).__init__(
            'volcengine:kms/key:Key',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            key_material_expire_time: Optional[pulumi.Input[str]] = None,
            key_name: Optional[pulumi.Input[str]] = None,
            key_spec: Optional[pulumi.Input[str]] = None,
            key_usage: Optional[pulumi.Input[str]] = None,
            keyring_name: Optional[pulumi.Input[str]] = None,
            last_rotation_time: Optional[pulumi.Input[str]] = None,
            multi_region: Optional[pulumi.Input[bool]] = None,
            multi_region_configuration: Optional[pulumi.Input[pulumi.InputType['KeyMultiRegionConfigurationArgs']]] = None,
            origin: Optional[pulumi.Input[str]] = None,
            pending_window_in_days: Optional[pulumi.Input[int]] = None,
            protection_level: Optional[pulumi.Input[str]] = None,
            rotate_state: Optional[pulumi.Input[str]] = None,
            rotation_state: Optional[pulumi.Input[str]] = None,
            schedule_delete_time: Optional[pulumi.Input[str]] = None,
            schedule_rotation_time: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyTagArgs']]]]] = None,
            trn: Optional[pulumi.Input[str]] = None,
            update_date: Optional[pulumi.Input[int]] = None) -> 'Key':
        """
        Get an existing Key resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] creation_date: The date when the keyring was created.
        :param pulumi.Input[str] description: The description of the key.
        :param pulumi.Input[str] key_material_expire_time: The time when the key material will expire.
        :param pulumi.Input[str] key_name: The name of the CMK.
        :param pulumi.Input[str] key_spec: The type of the keys.
        :param pulumi.Input[str] key_usage: The usage of the key.
        :param pulumi.Input[str] keyring_name: The name of the keyring.
        :param pulumi.Input[str] last_rotation_time: The last time the key was rotated.
        :param pulumi.Input[bool] multi_region: Whether it is the master key of the Multi-region type.
        :param pulumi.Input[pulumi.InputType['KeyMultiRegionConfigurationArgs']] multi_region_configuration: The configuration of Multi-region key.
        :param pulumi.Input[str] origin: The origin of the key.
        :param pulumi.Input[int] pending_window_in_days: The pre-deletion cycle of the key.
        :param pulumi.Input[str] protection_level: The protection level of the key.
        :param pulumi.Input[str] rotate_state: The rotation state of the key.
        :param pulumi.Input[str] rotation_state: The rotation configuration of the key.
        :param pulumi.Input[str] schedule_delete_time: The time when the key will be deleted.
        :param pulumi.Input[str] schedule_rotation_time: The next time the key will be rotated.
        :param pulumi.Input[str] state: The state of the key.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyTagArgs']]]] tags: Tags.
        :param pulumi.Input[str] trn: The name of the resource.
        :param pulumi.Input[int] update_date: The date when the keyring was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeyState.__new__(_KeyState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["description"] = description
        __props__.__dict__["key_material_expire_time"] = key_material_expire_time
        __props__.__dict__["key_name"] = key_name
        __props__.__dict__["key_spec"] = key_spec
        __props__.__dict__["key_usage"] = key_usage
        __props__.__dict__["keyring_name"] = keyring_name
        __props__.__dict__["last_rotation_time"] = last_rotation_time
        __props__.__dict__["multi_region"] = multi_region
        __props__.__dict__["multi_region_configuration"] = multi_region_configuration
        __props__.__dict__["origin"] = origin
        __props__.__dict__["pending_window_in_days"] = pending_window_in_days
        __props__.__dict__["protection_level"] = protection_level
        __props__.__dict__["rotate_state"] = rotate_state
        __props__.__dict__["rotation_state"] = rotation_state
        __props__.__dict__["schedule_delete_time"] = schedule_delete_time
        __props__.__dict__["schedule_rotation_time"] = schedule_rotation_time
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["trn"] = trn
        __props__.__dict__["update_date"] = update_date
        return Key(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[int]:
        """
        The date when the keyring was created.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the key.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="keyMaterialExpireTime")
    def key_material_expire_time(self) -> pulumi.Output[str]:
        """
        The time when the key material will expire.
        """
        return pulumi.get(self, "key_material_expire_time")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Output[str]:
        """
        The name of the CMK.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> pulumi.Output[str]:
        """
        The type of the keys.
        """
        return pulumi.get(self, "key_spec")

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> pulumi.Output[str]:
        """
        The usage of the key.
        """
        return pulumi.get(self, "key_usage")

    @property
    @pulumi.getter(name="keyringName")
    def keyring_name(self) -> pulumi.Output[str]:
        """
        The name of the keyring.
        """
        return pulumi.get(self, "keyring_name")

    @property
    @pulumi.getter(name="lastRotationTime")
    def last_rotation_time(self) -> pulumi.Output[str]:
        """
        The last time the key was rotated.
        """
        return pulumi.get(self, "last_rotation_time")

    @property
    @pulumi.getter(name="multiRegion")
    def multi_region(self) -> pulumi.Output[bool]:
        """
        Whether it is the master key of the Multi-region type.
        """
        return pulumi.get(self, "multi_region")

    @property
    @pulumi.getter(name="multiRegionConfiguration")
    def multi_region_configuration(self) -> pulumi.Output['outputs.KeyMultiRegionConfiguration']:
        """
        The configuration of Multi-region key.
        """
        return pulumi.get(self, "multi_region_configuration")

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Output[str]:
        """
        The origin of the key.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="pendingWindowInDays")
    def pending_window_in_days(self) -> pulumi.Output[Optional[int]]:
        """
        The pre-deletion cycle of the key.
        """
        return pulumi.get(self, "pending_window_in_days")

    @property
    @pulumi.getter(name="protectionLevel")
    def protection_level(self) -> pulumi.Output[str]:
        """
        The protection level of the key.
        """
        return pulumi.get(self, "protection_level")

    @property
    @pulumi.getter(name="rotateState")
    def rotate_state(self) -> pulumi.Output[Optional[str]]:
        """
        The rotation state of the key.
        """
        return pulumi.get(self, "rotate_state")

    @property
    @pulumi.getter(name="rotationState")
    def rotation_state(self) -> pulumi.Output[str]:
        """
        The rotation configuration of the key.
        """
        return pulumi.get(self, "rotation_state")

    @property
    @pulumi.getter(name="scheduleDeleteTime")
    def schedule_delete_time(self) -> pulumi.Output[str]:
        """
        The time when the key will be deleted.
        """
        return pulumi.get(self, "schedule_delete_time")

    @property
    @pulumi.getter(name="scheduleRotationTime")
    def schedule_rotation_time(self) -> pulumi.Output[str]:
        """
        The next time the key will be rotated.
        """
        return pulumi.get(self, "schedule_rotation_time")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the key.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.KeyTag']]]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def trn(self) -> pulumi.Output[str]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> pulumi.Output[int]:
        """
        The date when the keyring was updated.
        """
        return pulumi.get(self, "update_date")

