# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SamlProviderArgs', 'SamlProvider']

@pulumi.input_type
class SamlProviderArgs:
    def __init__(__self__, *,
                 encoded_saml_metadata_document: pulumi.Input[str],
                 saml_provider_name: pulumi.Input[str],
                 sso_type: pulumi.Input[int],
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SamlProvider resource.
        :param pulumi.Input[str] encoded_saml_metadata_document: Metadata document, encoded in Base64.
        :param pulumi.Input[str] saml_provider_name: The name of the SAML provider.
        :param pulumi.Input[int] sso_type: SSO types, 1. Role-based SSO, 2. User-based SSO.
        :param pulumi.Input[str] description: The description of the SAML provider.
        :param pulumi.Input[int] status: User SSO status, 1. Enabled, 2. Disable other console login methods after enabling, 3. Disabled, is a required field when creating user SSO.
        """
        pulumi.set(__self__, "encoded_saml_metadata_document", encoded_saml_metadata_document)
        pulumi.set(__self__, "saml_provider_name", saml_provider_name)
        pulumi.set(__self__, "sso_type", sso_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="encodedSamlMetadataDocument")
    def encoded_saml_metadata_document(self) -> pulumi.Input[str]:
        """
        Metadata document, encoded in Base64.
        """
        return pulumi.get(self, "encoded_saml_metadata_document")

    @encoded_saml_metadata_document.setter
    def encoded_saml_metadata_document(self, value: pulumi.Input[str]):
        pulumi.set(self, "encoded_saml_metadata_document", value)

    @property
    @pulumi.getter(name="samlProviderName")
    def saml_provider_name(self) -> pulumi.Input[str]:
        """
        The name of the SAML provider.
        """
        return pulumi.get(self, "saml_provider_name")

    @saml_provider_name.setter
    def saml_provider_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "saml_provider_name", value)

    @property
    @pulumi.getter(name="ssoType")
    def sso_type(self) -> pulumi.Input[int]:
        """
        SSO types, 1. Role-based SSO, 2. User-based SSO.
        """
        return pulumi.get(self, "sso_type")

    @sso_type.setter
    def sso_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "sso_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the SAML provider.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        User SSO status, 1. Enabled, 2. Disable other console login methods after enabling, 3. Disabled, is a required field when creating user SSO.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _SamlProviderState:
    def __init__(__self__, *,
                 create_date: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encoded_saml_metadata_document: Optional[pulumi.Input[str]] = None,
                 saml_provider_name: Optional[pulumi.Input[str]] = None,
                 sso_type: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 trn: Optional[pulumi.Input[str]] = None,
                 update_date: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SamlProvider resources.
        :param pulumi.Input[str] create_date: Identity provider creation time, such as 20150123T123318Z.
        :param pulumi.Input[str] description: The description of the SAML provider.
        :param pulumi.Input[str] encoded_saml_metadata_document: Metadata document, encoded in Base64.
        :param pulumi.Input[str] saml_provider_name: The name of the SAML provider.
        :param pulumi.Input[int] sso_type: SSO types, 1. Role-based SSO, 2. User-based SSO.
        :param pulumi.Input[int] status: User SSO status, 1. Enabled, 2. Disable other console login methods after enabling, 3. Disabled, is a required field when creating user SSO.
        :param pulumi.Input[str] trn: The format for the resource name of an identity provider is trn:iam::${accountID}:saml-provider/{$SAMLProviderName}.
        :param pulumi.Input[str] update_date: Identity provider update time, such as: 20150123T123318Z.
        """
        if create_date is not None:
            pulumi.set(__self__, "create_date", create_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encoded_saml_metadata_document is not None:
            pulumi.set(__self__, "encoded_saml_metadata_document", encoded_saml_metadata_document)
        if saml_provider_name is not None:
            pulumi.set(__self__, "saml_provider_name", saml_provider_name)
        if sso_type is not None:
            pulumi.set(__self__, "sso_type", sso_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trn is not None:
            pulumi.set(__self__, "trn", trn)
        if update_date is not None:
            pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> Optional[pulumi.Input[str]]:
        """
        Identity provider creation time, such as 20150123T123318Z.
        """
        return pulumi.get(self, "create_date")

    @create_date.setter
    def create_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the SAML provider.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="encodedSamlMetadataDocument")
    def encoded_saml_metadata_document(self) -> Optional[pulumi.Input[str]]:
        """
        Metadata document, encoded in Base64.
        """
        return pulumi.get(self, "encoded_saml_metadata_document")

    @encoded_saml_metadata_document.setter
    def encoded_saml_metadata_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoded_saml_metadata_document", value)

    @property
    @pulumi.getter(name="samlProviderName")
    def saml_provider_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the SAML provider.
        """
        return pulumi.get(self, "saml_provider_name")

    @saml_provider_name.setter
    def saml_provider_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_provider_name", value)

    @property
    @pulumi.getter(name="ssoType")
    def sso_type(self) -> Optional[pulumi.Input[int]]:
        """
        SSO types, 1. Role-based SSO, 2. User-based SSO.
        """
        return pulumi.get(self, "sso_type")

    @sso_type.setter
    def sso_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sso_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        User SSO status, 1. Enabled, 2. Disable other console login methods after enabling, 3. Disabled, is a required field when creating user SSO.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def trn(self) -> Optional[pulumi.Input[str]]:
        """
        The format for the resource name of an identity provider is trn:iam::${accountID}:saml-provider/{$SAMLProviderName}.
        """
        return pulumi.get(self, "trn")

    @trn.setter
    def trn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trn", value)

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> Optional[pulumi.Input[str]]:
        """
        Identity provider update time, such as: 20150123T123318Z.
        """
        return pulumi.get(self, "update_date")

    @update_date.setter
    def update_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_date", value)


class SamlProvider(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encoded_saml_metadata_document: Optional[pulumi.Input[str]] = None,
                 saml_provider_name: Optional[pulumi.Input[str]] = None,
                 sso_type: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to manage iam saml provider
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.iam.SamlProvider("foo",
            encoded_saml_metadata_document="your document",
            saml_provider_name="terraform",
            sso_type=2,
            status=1)
        ```

        ## Import

        IamSamlProvider can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:iam/samlProvider:SamlProvider default SAMLProviderName
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the SAML provider.
        :param pulumi.Input[str] encoded_saml_metadata_document: Metadata document, encoded in Base64.
        :param pulumi.Input[str] saml_provider_name: The name of the SAML provider.
        :param pulumi.Input[int] sso_type: SSO types, 1. Role-based SSO, 2. User-based SSO.
        :param pulumi.Input[int] status: User SSO status, 1. Enabled, 2. Disable other console login methods after enabling, 3. Disabled, is a required field when creating user SSO.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SamlProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage iam saml provider
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.iam.SamlProvider("foo",
            encoded_saml_metadata_document="your document",
            saml_provider_name="terraform",
            sso_type=2,
            status=1)
        ```

        ## Import

        IamSamlProvider can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:iam/samlProvider:SamlProvider default SAMLProviderName
        ```

        :param str resource_name: The name of the resource.
        :param SamlProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SamlProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encoded_saml_metadata_document: Optional[pulumi.Input[str]] = None,
                 saml_provider_name: Optional[pulumi.Input[str]] = None,
                 sso_type: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SamlProviderArgs.__new__(SamlProviderArgs)

            __props__.__dict__["description"] = description
            if encoded_saml_metadata_document is None and not opts.urn:
                raise TypeError("Missing required property 'encoded_saml_metadata_document'")
            __props__.__dict__["encoded_saml_metadata_document"] = encoded_saml_metadata_document
            if saml_provider_name is None and not opts.urn:
                raise TypeError("Missing required property 'saml_provider_name'")
            __props__.__dict__["saml_provider_name"] = saml_provider_name
            if sso_type is None and not opts.urn:
                raise TypeError("Missing required property 'sso_type'")
            __props__.__dict__["sso_type"] = sso_type
            __props__.__dict__["status"] = status
            __props__.__dict__["create_date"] = None
            __props__.__dict__["trn"] = None
            __props__.__dict__["update_date"] = None
        super(SamlProvider, __self__).__init__(
            'volcengine:iam/samlProvider:SamlProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_date: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            encoded_saml_metadata_document: Optional[pulumi.Input[str]] = None,
            saml_provider_name: Optional[pulumi.Input[str]] = None,
            sso_type: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[int]] = None,
            trn: Optional[pulumi.Input[str]] = None,
            update_date: Optional[pulumi.Input[str]] = None) -> 'SamlProvider':
        """
        Get an existing SamlProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_date: Identity provider creation time, such as 20150123T123318Z.
        :param pulumi.Input[str] description: The description of the SAML provider.
        :param pulumi.Input[str] encoded_saml_metadata_document: Metadata document, encoded in Base64.
        :param pulumi.Input[str] saml_provider_name: The name of the SAML provider.
        :param pulumi.Input[int] sso_type: SSO types, 1. Role-based SSO, 2. User-based SSO.
        :param pulumi.Input[int] status: User SSO status, 1. Enabled, 2. Disable other console login methods after enabling, 3. Disabled, is a required field when creating user SSO.
        :param pulumi.Input[str] trn: The format for the resource name of an identity provider is trn:iam::${accountID}:saml-provider/{$SAMLProviderName}.
        :param pulumi.Input[str] update_date: Identity provider update time, such as: 20150123T123318Z.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SamlProviderState.__new__(_SamlProviderState)

        __props__.__dict__["create_date"] = create_date
        __props__.__dict__["description"] = description
        __props__.__dict__["encoded_saml_metadata_document"] = encoded_saml_metadata_document
        __props__.__dict__["saml_provider_name"] = saml_provider_name
        __props__.__dict__["sso_type"] = sso_type
        __props__.__dict__["status"] = status
        __props__.__dict__["trn"] = trn
        __props__.__dict__["update_date"] = update_date
        return SamlProvider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> pulumi.Output[str]:
        """
        Identity provider creation time, such as 20150123T123318Z.
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the SAML provider.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encodedSamlMetadataDocument")
    def encoded_saml_metadata_document(self) -> pulumi.Output[str]:
        """
        Metadata document, encoded in Base64.
        """
        return pulumi.get(self, "encoded_saml_metadata_document")

    @property
    @pulumi.getter(name="samlProviderName")
    def saml_provider_name(self) -> pulumi.Output[str]:
        """
        The name of the SAML provider.
        """
        return pulumi.get(self, "saml_provider_name")

    @property
    @pulumi.getter(name="ssoType")
    def sso_type(self) -> pulumi.Output[int]:
        """
        SSO types, 1. Role-based SSO, 2. User-based SSO.
        """
        return pulumi.get(self, "sso_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[int]]:
        """
        User SSO status, 1. Enabled, 2. Disable other console login methods after enabling, 3. Disabled, is a required field when creating user SSO.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def trn(self) -> pulumi.Output[str]:
        """
        The format for the resource name of an identity provider is trn:iam::${accountID}:saml-provider/{$SAMLProviderName}.
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> pulumi.Output[str]:
        """
        Identity provider update time, such as: 20150123T123318Z.
        """
        return pulumi.get(self, "update_date")

