# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ConsumedPartitionsConsumedPartitionResult',
    'ConsumedTopicsConsumedTopicResult',
    'GroupsGroupResult',
    'InstanceParameter',
    'InstanceTag',
    'InstancesInstanceResult',
    'InstancesInstanceConnectionInfoResult',
    'InstancesInstanceParameterResult',
    'InstancesInstanceTagResult',
    'InstancesTagResult',
    'RegionsRegionResult',
    'SaslUsersUserResult',
    'TopicAccessPolicy',
    'TopicParameters',
    'TopicPartitionsPartitionResult',
    'TopicsTopicResult',
    'TopicsTopicAccessPolicyResult',
    'TopicsTopicParametersResult',
    'ZonesZoneResult',
]

@pulumi.output_type
class ConsumedPartitionsConsumedPartitionResult(dict):
    def __init__(__self__, *,
                 accumulation: int,
                 consumed_client: str,
                 consumed_offset: int,
                 end_offset: int,
                 partition_id: int,
                 start_offset: int):
        """
        :param int accumulation: The total amount of message accumulation in this topic partition for the consumer group.
        :param str consumed_client: The consumed client info of partition.
        :param int consumed_offset: The consumed offset of partition.
        :param int end_offset: The end offset of partition.
        :param int partition_id: The index number of partition.
        :param int start_offset: The start offset of partition.
        """
        pulumi.set(__self__, "accumulation", accumulation)
        pulumi.set(__self__, "consumed_client", consumed_client)
        pulumi.set(__self__, "consumed_offset", consumed_offset)
        pulumi.set(__self__, "end_offset", end_offset)
        pulumi.set(__self__, "partition_id", partition_id)
        pulumi.set(__self__, "start_offset", start_offset)

    @property
    @pulumi.getter
    def accumulation(self) -> int:
        """
        The total amount of message accumulation in this topic partition for the consumer group.
        """
        return pulumi.get(self, "accumulation")

    @property
    @pulumi.getter(name="consumedClient")
    def consumed_client(self) -> str:
        """
        The consumed client info of partition.
        """
        return pulumi.get(self, "consumed_client")

    @property
    @pulumi.getter(name="consumedOffset")
    def consumed_offset(self) -> int:
        """
        The consumed offset of partition.
        """
        return pulumi.get(self, "consumed_offset")

    @property
    @pulumi.getter(name="endOffset")
    def end_offset(self) -> int:
        """
        The end offset of partition.
        """
        return pulumi.get(self, "end_offset")

    @property
    @pulumi.getter(name="partitionId")
    def partition_id(self) -> int:
        """
        The index number of partition.
        """
        return pulumi.get(self, "partition_id")

    @property
    @pulumi.getter(name="startOffset")
    def start_offset(self) -> int:
        """
        The start offset of partition.
        """
        return pulumi.get(self, "start_offset")


@pulumi.output_type
class ConsumedTopicsConsumedTopicResult(dict):
    def __init__(__self__, *,
                 accumulation: int,
                 topic_name: str):
        """
        :param int accumulation: The total amount of message accumulation in this topic for the consumer group.
        :param str topic_name: The name of kafka topic. This field supports fuzzy query.
        """
        pulumi.set(__self__, "accumulation", accumulation)
        pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter
    def accumulation(self) -> int:
        """
        The total amount of message accumulation in this topic for the consumer group.
        """
        return pulumi.get(self, "accumulation")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        """
        The name of kafka topic. This field supports fuzzy query.
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class GroupsGroupResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 state: str):
        """
        :param str group_id: The id of kafka group, support fuzzy matching.
        :param str state: The state of kafka group.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The id of kafka group, support fuzzy matching.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of kafka group.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class InstanceParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterName":
            suggest = "parameter_name"
        elif key == "parameterValue":
            suggest = "parameter_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_name: str,
                 parameter_value: str):
        """
        :param str parameter_name: Parameter name.
        :param str parameter_value: Parameter value.
        """
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "parameter_value", parameter_value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> str:
        """
        Parameter value.
        """
        return pulumi.get(self, "parameter_value")


@pulumi.output_type
class InstanceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Tags.
        :param str value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstancesInstanceResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 auto_renew: bool,
                 charge_expire_time: str,
                 charge_start_time: str,
                 charge_status: str,
                 charge_type: str,
                 compute_spec: str,
                 connection_infos: Sequence['outputs.InstancesInstanceConnectionInfoResult'],
                 create_time: str,
                 eip_id: str,
                 id: str,
                 instance_description: str,
                 instance_id: str,
                 instance_name: str,
                 instance_status: str,
                 overdue_reclaim_time: str,
                 overdue_time: str,
                 parameters: Sequence['outputs.InstancesInstanceParameterResult'],
                 period_unit: str,
                 private_domain_on_public: bool,
                 project_name: str,
                 region_id: str,
                 storage_space: int,
                 storage_type: str,
                 subnet_id: str,
                 tags: Sequence['outputs.InstancesInstanceTagResult'],
                 usable_partition_number: int,
                 used_group_number: int,
                 used_partition_number: int,
                 used_storage_space: int,
                 used_topic_number: int,
                 version: str,
                 vpc_id: str,
                 zone_id: str):
        """
        :param str account_id: The id of account.
        :param bool auto_renew: The auto renew status of instance.
        :param str charge_expire_time: The charge expire time of instance.
        :param str charge_start_time: The charge start time of instance.
        :param str charge_status: The charge status of instance.
        :param str charge_type: The charge type of instance.
        :param str compute_spec: The compute spec of instance.
        :param Sequence['InstancesInstanceConnectionInfoArgs'] connection_infos: Connection info of the instance.
        :param str create_time: The create time of instance.
        :param str eip_id: The id of eip.
        :param str id: The id of instance.
        :param str instance_description: The description of instance.
        :param str instance_id: The id of instance.
        :param str instance_name: The name of instance.
        :param str instance_status: The status of instance.
        :param str overdue_reclaim_time: The overdue reclaim time of instance.
        :param str overdue_time: The overdue time of instance.
        :param Sequence['InstancesInstanceParameterArgs'] parameters: Parameters of the instance.
        :param str period_unit: The period unit of instance.
        :param bool private_domain_on_public: Whether enable private domain on public.
        :param str project_name: The name of project.
        :param str region_id: The id of region.
        :param int storage_space: The storage space of instance.
        :param str storage_type: The storage type of instance.
        :param str subnet_id: The id of subnet.
        :param Sequence['InstancesInstanceTagArgs'] tags: The tags of instance.
        :param int usable_partition_number: The usable partition number of instance.
        :param int used_group_number: The used group number of instance.
        :param int used_partition_number: The used partition number of instance.
        :param int used_storage_space: The used storage space of instance.
        :param int used_topic_number: The used topic number of instance.
        :param str version: The version of instance.
        :param str vpc_id: The id of vpc.
        :param str zone_id: The zone id of instance.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "charge_expire_time", charge_expire_time)
        pulumi.set(__self__, "charge_start_time", charge_start_time)
        pulumi.set(__self__, "charge_status", charge_status)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "compute_spec", compute_spec)
        pulumi.set(__self__, "connection_infos", connection_infos)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_description", instance_description)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "overdue_reclaim_time", overdue_reclaim_time)
        pulumi.set(__self__, "overdue_time", overdue_time)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "period_unit", period_unit)
        pulumi.set(__self__, "private_domain_on_public", private_domain_on_public)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "storage_space", storage_space)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "usable_partition_number", usable_partition_number)
        pulumi.set(__self__, "used_group_number", used_group_number)
        pulumi.set(__self__, "used_partition_number", used_partition_number)
        pulumi.set(__self__, "used_storage_space", used_storage_space)
        pulumi.set(__self__, "used_topic_number", used_topic_number)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The id of account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> bool:
        """
        The auto renew status of instance.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="chargeExpireTime")
    def charge_expire_time(self) -> str:
        """
        The charge expire time of instance.
        """
        return pulumi.get(self, "charge_expire_time")

    @property
    @pulumi.getter(name="chargeStartTime")
    def charge_start_time(self) -> str:
        """
        The charge start time of instance.
        """
        return pulumi.get(self, "charge_start_time")

    @property
    @pulumi.getter(name="chargeStatus")
    def charge_status(self) -> str:
        """
        The charge status of instance.
        """
        return pulumi.get(self, "charge_status")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of instance.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="computeSpec")
    def compute_spec(self) -> str:
        """
        The compute spec of instance.
        """
        return pulumi.get(self, "compute_spec")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Sequence['outputs.InstancesInstanceConnectionInfoResult']:
        """
        Connection info of the instance.
        """
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> str:
        """
        The id of eip.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceDescription")
    def instance_description(self) -> str:
        """
        The description of instance.
        """
        return pulumi.get(self, "instance_description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The id of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        The name of instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> str:
        """
        The status of instance.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="overdueReclaimTime")
    def overdue_reclaim_time(self) -> str:
        """
        The overdue reclaim time of instance.
        """
        return pulumi.get(self, "overdue_reclaim_time")

    @property
    @pulumi.getter(name="overdueTime")
    def overdue_time(self) -> str:
        """
        The overdue time of instance.
        """
        return pulumi.get(self, "overdue_time")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.InstancesInstanceParameterResult']:
        """
        Parameters of the instance.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> str:
        """
        The period unit of instance.
        """
        return pulumi.get(self, "period_unit")

    @property
    @pulumi.getter(name="privateDomainOnPublic")
    def private_domain_on_public(self) -> bool:
        """
        Whether enable private domain on public.
        """
        return pulumi.get(self, "private_domain_on_public")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        The name of project.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The id of region.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> int:
        """
        The storage space of instance.
        """
        return pulumi.get(self, "storage_space")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The storage type of instance.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The id of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.InstancesInstanceTagResult']:
        """
        The tags of instance.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="usablePartitionNumber")
    def usable_partition_number(self) -> int:
        """
        The usable partition number of instance.
        """
        return pulumi.get(self, "usable_partition_number")

    @property
    @pulumi.getter(name="usedGroupNumber")
    def used_group_number(self) -> int:
        """
        The used group number of instance.
        """
        return pulumi.get(self, "used_group_number")

    @property
    @pulumi.getter(name="usedPartitionNumber")
    def used_partition_number(self) -> int:
        """
        The used partition number of instance.
        """
        return pulumi.get(self, "used_partition_number")

    @property
    @pulumi.getter(name="usedStorageSpace")
    def used_storage_space(self) -> int:
        """
        The used storage space of instance.
        """
        return pulumi.get(self, "used_storage_space")

    @property
    @pulumi.getter(name="usedTopicNumber")
    def used_topic_number(self) -> int:
        """
        The used topic number of instance.
        """
        return pulumi.get(self, "used_topic_number")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of instance.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The id of vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone id of instance.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class InstancesInstanceConnectionInfoResult(dict):
    def __init__(__self__, *,
                 endpoint_type: str,
                 internal_endpoint: str,
                 network_type: str,
                 public_endpoint: str):
        """
        :param str endpoint_type: The endpoint type of instance.
        :param str internal_endpoint: The internal endpoint of instance.
        :param str network_type: The network type of instance.
        :param str public_endpoint: The public endpoint of instance.
        """
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        pulumi.set(__self__, "internal_endpoint", internal_endpoint)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "public_endpoint", public_endpoint)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> str:
        """
        The endpoint type of instance.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="internalEndpoint")
    def internal_endpoint(self) -> str:
        """
        The internal endpoint of instance.
        """
        return pulumi.get(self, "internal_endpoint")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        The network type of instance.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> str:
        """
        The public endpoint of instance.
        """
        return pulumi.get(self, "public_endpoint")


@pulumi.output_type
class InstancesInstanceParameterResult(dict):
    def __init__(__self__, *,
                 parameter_name: str,
                 parameter_value: str):
        """
        :param str parameter_name: Parameter name.
        :param str parameter_value: Parameter value.
        """
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "parameter_value", parameter_value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> str:
        """
        Parameter value.
        """
        return pulumi.get(self, "parameter_value")


@pulumi.output_type
class InstancesInstanceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of tag.
        :param str value: The value of tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstancesTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of tag.
        :param str value: The value of tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RegionsRegionResult(dict):
    def __init__(__self__, *,
                 description: str,
                 region_id: str,
                 region_name: str,
                 status: str):
        """
        :param str description: The description of region.
        :param str region_id: The id of the region.
        :param str region_name: The name of region.
        :param str status: The status of region.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of region.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        The id of the region.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        The name of region.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of region.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SaslUsersUserResult(dict):
    def __init__(__self__, *,
                 all_authority: bool,
                 create_time: str,
                 description: str,
                 password_type: str,
                 user_name: str):
        """
        :param bool all_authority: Whether this user has read and write permissions for all topics.
        :param str create_time: The create time.
        :param str description: The description of user.
        :param str password_type: The type of password.
        :param str user_name: The user name, support fuzzy matching.
        """
        pulumi.set(__self__, "all_authority", all_authority)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "password_type", password_type)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> bool:
        """
        Whether this user has read and write permissions for all topics.
        """
        return pulumi.get(self, "all_authority")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of user.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> str:
        """
        The type of password.
        """
        return pulumi.get(self, "password_type")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The user name, support fuzzy matching.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class TopicAccessPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPolicy":
            suggest = "access_policy"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TopicAccessPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TopicAccessPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TopicAccessPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_policy: str,
                 user_name: str):
        """
        :param str access_policy: The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
        :param str user_name: The name of SASL user.
        """
        pulumi.set(__self__, "access_policy", access_policy)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="accessPolicy")
    def access_policy(self) -> str:
        """
        The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
        """
        return pulumi.get(self, "access_policy")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The name of SASL user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class TopicParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logRetentionHours":
            suggest = "log_retention_hours"
        elif key == "messageMaxByte":
            suggest = "message_max_byte"
        elif key == "minInsyncReplicaNumber":
            suggest = "min_insync_replica_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TopicParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TopicParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TopicParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_retention_hours: Optional[int] = None,
                 message_max_byte: Optional[int] = None,
                 min_insync_replica_number: Optional[int] = None):
        """
        :param int log_retention_hours: The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
        :param int message_max_byte: The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
        :param int min_insync_replica_number: The min number of sync replica. The default value is the replica number minus 1.
        """
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if message_max_byte is not None:
            pulumi.set(__self__, "message_max_byte", message_max_byte)
        if min_insync_replica_number is not None:
            pulumi.set(__self__, "min_insync_replica_number", min_insync_replica_number)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[int]:
        """
        The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
        """
        return pulumi.get(self, "log_retention_hours")

    @property
    @pulumi.getter(name="messageMaxByte")
    def message_max_byte(self) -> Optional[int]:
        """
        The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
        """
        return pulumi.get(self, "message_max_byte")

    @property
    @pulumi.getter(name="minInsyncReplicaNumber")
    def min_insync_replica_number(self) -> Optional[int]:
        """
        The min number of sync replica. The default value is the replica number minus 1.
        """
        return pulumi.get(self, "min_insync_replica_number")


@pulumi.output_type
class TopicPartitionsPartitionResult(dict):
    def __init__(__self__, *,
                 end_offset: int,
                 insync_replicas: Sequence[int],
                 leader: int,
                 message_count: int,
                 partition_id: int,
                 replicas: Sequence[int],
                 start_offset: int,
                 under_insync_replicas: Sequence[int]):
        """
        :param int end_offset: The end offset of partition leader.
        :param Sequence[int] insync_replicas: The insync replica info.
        :param int leader: The leader info of partition.
        :param int message_count: The count of message.
        :param int partition_id: The index number of partition.
        :param Sequence[int] replicas: The replica info.
        :param int start_offset: The start offset of partition leader.
        :param Sequence[int] under_insync_replicas: The under insync replica info.
        """
        pulumi.set(__self__, "end_offset", end_offset)
        pulumi.set(__self__, "insync_replicas", insync_replicas)
        pulumi.set(__self__, "leader", leader)
        pulumi.set(__self__, "message_count", message_count)
        pulumi.set(__self__, "partition_id", partition_id)
        pulumi.set(__self__, "replicas", replicas)
        pulumi.set(__self__, "start_offset", start_offset)
        pulumi.set(__self__, "under_insync_replicas", under_insync_replicas)

    @property
    @pulumi.getter(name="endOffset")
    def end_offset(self) -> int:
        """
        The end offset of partition leader.
        """
        return pulumi.get(self, "end_offset")

    @property
    @pulumi.getter(name="insyncReplicas")
    def insync_replicas(self) -> Sequence[int]:
        """
        The insync replica info.
        """
        return pulumi.get(self, "insync_replicas")

    @property
    @pulumi.getter
    def leader(self) -> int:
        """
        The leader info of partition.
        """
        return pulumi.get(self, "leader")

    @property
    @pulumi.getter(name="messageCount")
    def message_count(self) -> int:
        """
        The count of message.
        """
        return pulumi.get(self, "message_count")

    @property
    @pulumi.getter(name="partitionId")
    def partition_id(self) -> int:
        """
        The index number of partition.
        """
        return pulumi.get(self, "partition_id")

    @property
    @pulumi.getter
    def replicas(self) -> Sequence[int]:
        """
        The replica info.
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="startOffset")
    def start_offset(self) -> int:
        """
        The start offset of partition leader.
        """
        return pulumi.get(self, "start_offset")

    @property
    @pulumi.getter(name="underInsyncReplicas")
    def under_insync_replicas(self) -> Sequence[int]:
        """
        The under insync replica info.
        """
        return pulumi.get(self, "under_insync_replicas")


@pulumi.output_type
class TopicsTopicResult(dict):
    def __init__(__self__, *,
                 access_policies: Sequence['outputs.TopicsTopicAccessPolicyResult'],
                 all_authority: bool,
                 create_time: str,
                 description: str,
                 parameters: 'outputs.TopicsTopicParametersResult',
                 partition_number: int,
                 replica_number: int,
                 status: str,
                 topic_name: str):
        """
        :param Sequence['TopicsTopicAccessPolicyArgs'] access_policies: The access policies info of the kafka topic.
        :param bool all_authority: Whether the kafka topic is configured to be accessible by all users.
        :param str create_time: The create time of the kafka topic.
        :param str description: The description of the kafka topic.
        :param 'TopicsTopicParametersArgs' parameters: The parameters of the kafka topic.
        :param int partition_number: The number of partition in kafka topic.
        :param int replica_number: The number of replica in kafka topic.
        :param str status: The status of the kafka topic.
        :param str topic_name: The name of kafka topic. This field supports fuzzy query.
        """
        pulumi.set(__self__, "access_policies", access_policies)
        pulumi.set(__self__, "all_authority", all_authority)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "partition_number", partition_number)
        pulumi.set(__self__, "replica_number", replica_number)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> Sequence['outputs.TopicsTopicAccessPolicyResult']:
        """
        The access policies info of the kafka topic.
        """
        return pulumi.get(self, "access_policies")

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> bool:
        """
        Whether the kafka topic is configured to be accessible by all users.
        """
        return pulumi.get(self, "all_authority")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the kafka topic.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the kafka topic.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def parameters(self) -> 'outputs.TopicsTopicParametersResult':
        """
        The parameters of the kafka topic.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="partitionNumber")
    def partition_number(self) -> int:
        """
        The number of partition in kafka topic.
        """
        return pulumi.get(self, "partition_number")

    @property
    @pulumi.getter(name="replicaNumber")
    def replica_number(self) -> int:
        """
        The number of replica in kafka topic.
        """
        return pulumi.get(self, "replica_number")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the kafka topic.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        """
        The name of kafka topic. This field supports fuzzy query.
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class TopicsTopicAccessPolicyResult(dict):
    def __init__(__self__, *,
                 access_policy: str,
                 user_name: str):
        """
        :param str access_policy: The access policy of SASL user.
        :param str user_name: When a user name is specified, only the access policy of the specified user for this Topic will be returned.
        """
        pulumi.set(__self__, "access_policy", access_policy)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="accessPolicy")
    def access_policy(self) -> str:
        """
        The access policy of SASL user.
        """
        return pulumi.get(self, "access_policy")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        When a user name is specified, only the access policy of the specified user for this Topic will be returned.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class TopicsTopicParametersResult(dict):
    def __init__(__self__, *,
                 log_retention_hours: int,
                 message_max_byte: int,
                 min_insync_replica_number: int):
        """
        :param int log_retention_hours: The retention hours of log.
        :param int message_max_byte: The max byte of message.
        :param int min_insync_replica_number: The min number of sync replica.
        """
        pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        pulumi.set(__self__, "message_max_byte", message_max_byte)
        pulumi.set(__self__, "min_insync_replica_number", min_insync_replica_number)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> int:
        """
        The retention hours of log.
        """
        return pulumi.get(self, "log_retention_hours")

    @property
    @pulumi.getter(name="messageMaxByte")
    def message_max_byte(self) -> int:
        """
        The max byte of message.
        """
        return pulumi.get(self, "message_max_byte")

    @property
    @pulumi.getter(name="minInsyncReplicaNumber")
    def min_insync_replica_number(self) -> int:
        """
        The min number of sync replica.
        """
        return pulumi.get(self, "min_insync_replica_number")


@pulumi.output_type
class ZonesZoneResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 status: str,
                 zone_id: str,
                 zone_name: str):
        """
        :param str description: The description of the zone.
        :param str id: The id of the zone.
        :param str status: The status of the zone.
        :param str zone_id: The id of the zone.
        :param str zone_name: The name of the zone.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the zone.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the zone.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        The name of the zone.
        """
        return pulumi.get(self, "zone_name")


