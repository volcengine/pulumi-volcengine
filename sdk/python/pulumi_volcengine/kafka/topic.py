# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TopicArgs', 'Topic']

@pulumi.input_type
class TopicArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 partition_number: pulumi.Input[int],
                 topic_name: pulumi.Input[str],
                 access_policies: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAccessPolicyArgs']]]] = None,
                 all_authority: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input['TopicParametersArgs']] = None,
                 replica_number: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Topic resource.
        :param pulumi.Input[str] instance_id: The instance id of the kafka topic.
        :param pulumi.Input[int] partition_number: The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
        :param pulumi.Input[str] topic_name: The name of the kafka topic.
        :param pulumi.Input[Sequence[pulumi.Input['TopicAccessPolicyArgs']]] access_policies: The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
        :param pulumi.Input[bool] all_authority: Whether the kafka topic is configured to be accessible by all users. Default: true.
        :param pulumi.Input[str] description: The description of the kafka topic.
        :param pulumi.Input['TopicParametersArgs'] parameters: The parameters of the kafka topic.
        :param pulumi.Input[int] replica_number: The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "partition_number", partition_number)
        pulumi.set(__self__, "topic_name", topic_name)
        if access_policies is not None:
            pulumi.set(__self__, "access_policies", access_policies)
        if all_authority is not None:
            pulumi.set(__self__, "all_authority", all_authority)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if replica_number is not None:
            pulumi.set(__self__, "replica_number", replica_number)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The instance id of the kafka topic.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="partitionNumber")
    def partition_number(self) -> pulumi.Input[int]:
        """
        The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
        """
        return pulumi.get(self, "partition_number")

    @partition_number.setter
    def partition_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "partition_number", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        The name of the kafka topic.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicAccessPolicyArgs']]]]:
        """
        The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
        """
        return pulumi.get(self, "access_policies")

    @access_policies.setter
    def access_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAccessPolicyArgs']]]]):
        pulumi.set(self, "access_policies", value)

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the kafka topic is configured to be accessible by all users. Default: true.
        """
        return pulumi.get(self, "all_authority")

    @all_authority.setter
    def all_authority(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_authority", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the kafka topic.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['TopicParametersArgs']]:
        """
        The parameters of the kafka topic.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['TopicParametersArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="replicaNumber")
    def replica_number(self) -> Optional[pulumi.Input[int]]:
        """
        The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
        """
        return pulumi.get(self, "replica_number")

    @replica_number.setter
    def replica_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replica_number", value)


@pulumi.input_type
class _TopicState:
    def __init__(__self__, *,
                 access_policies: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAccessPolicyArgs']]]] = None,
                 all_authority: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input['TopicParametersArgs']] = None,
                 partition_number: Optional[pulumi.Input[int]] = None,
                 replica_number: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Topic resources.
        :param pulumi.Input[Sequence[pulumi.Input['TopicAccessPolicyArgs']]] access_policies: The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
        :param pulumi.Input[bool] all_authority: Whether the kafka topic is configured to be accessible by all users. Default: true.
        :param pulumi.Input[str] description: The description of the kafka topic.
        :param pulumi.Input[str] instance_id: The instance id of the kafka topic.
        :param pulumi.Input['TopicParametersArgs'] parameters: The parameters of the kafka topic.
        :param pulumi.Input[int] partition_number: The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
        :param pulumi.Input[int] replica_number: The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
        :param pulumi.Input[str] topic_name: The name of the kafka topic.
        """
        if access_policies is not None:
            pulumi.set(__self__, "access_policies", access_policies)
        if all_authority is not None:
            pulumi.set(__self__, "all_authority", all_authority)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if partition_number is not None:
            pulumi.set(__self__, "partition_number", partition_number)
        if replica_number is not None:
            pulumi.set(__self__, "replica_number", replica_number)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicAccessPolicyArgs']]]]:
        """
        The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
        """
        return pulumi.get(self, "access_policies")

    @access_policies.setter
    def access_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAccessPolicyArgs']]]]):
        pulumi.set(self, "access_policies", value)

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the kafka topic is configured to be accessible by all users. Default: true.
        """
        return pulumi.get(self, "all_authority")

    @all_authority.setter
    def all_authority(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_authority", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the kafka topic.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The instance id of the kafka topic.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['TopicParametersArgs']]:
        """
        The parameters of the kafka topic.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['TopicParametersArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="partitionNumber")
    def partition_number(self) -> Optional[pulumi.Input[int]]:
        """
        The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
        """
        return pulumi.get(self, "partition_number")

    @partition_number.setter
    def partition_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_number", value)

    @property
    @pulumi.getter(name="replicaNumber")
    def replica_number(self) -> Optional[pulumi.Input[int]]:
        """
        The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
        """
        return pulumi.get(self, "replica_number")

    @replica_number.setter
    def replica_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replica_number", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the kafka topic.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


class Topic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TopicAccessPolicyArgs']]]]] = None,
                 all_authority: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[pulumi.InputType['TopicParametersArgs']]] = None,
                 partition_number: Optional[pulumi.Input[int]] = None,
                 replica_number: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage kafka topic
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.kafka.Instance("fooInstance",
            instance_name="acc-test-kafka",
            instance_description="tf-test",
            version="2.2.2",
            compute_spec="kafka.20xrate.hw",
            subnet_id=foo_subnet.id,
            user_name="tf-user",
            user_password="tf-pass!@q1",
            charge_type="PostPaid",
            storage_space=300,
            partition_number=350,
            project_name="default",
            tags=[volcengine.kafka.InstanceTagArgs(
                key="k1",
                value="v1",
            )],
            parameters=[
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="MessageMaxByte",
                    parameter_value="12",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="LogRetentionHours",
                    parameter_value="70",
                ),
            ])
        foo_sasl_user = volcengine.kafka.SaslUser("fooSaslUser",
            user_name="acc-test-user",
            instance_id=foo_instance.id,
            user_password="suqsnis123!",
            description="tf-test",
            all_authority=True,
            password_type="Scram")
        foo_topic = volcengine.kafka.Topic("fooTopic",
            topic_name="acc-test-topic",
            instance_id=foo_instance.id,
            description="tf-test",
            partition_number=15,
            replica_number=3,
            parameters=volcengine.kafka.TopicParametersArgs(
                min_insync_replica_number=2,
                message_max_byte=10,
                log_retention_hours=96,
            ),
            all_authority=False,
            access_policies=[volcengine.kafka.TopicAccessPolicyArgs(
                user_name=foo_sasl_user.user_name,
                access_policy="Pub",
            )])
        ```

        ## Import

        KafkaTopic can be imported using the instance_id:topic_name, e.g.

        ```sh
         $ pulumi import volcengine:kafka/topic:Topic default kafka-cnoeeapetf4s****:topic
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TopicAccessPolicyArgs']]]] access_policies: The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
        :param pulumi.Input[bool] all_authority: Whether the kafka topic is configured to be accessible by all users. Default: true.
        :param pulumi.Input[str] description: The description of the kafka topic.
        :param pulumi.Input[str] instance_id: The instance id of the kafka topic.
        :param pulumi.Input[pulumi.InputType['TopicParametersArgs']] parameters: The parameters of the kafka topic.
        :param pulumi.Input[int] partition_number: The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
        :param pulumi.Input[int] replica_number: The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
        :param pulumi.Input[str] topic_name: The name of the kafka topic.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage kafka topic
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.kafka.Instance("fooInstance",
            instance_name="acc-test-kafka",
            instance_description="tf-test",
            version="2.2.2",
            compute_spec="kafka.20xrate.hw",
            subnet_id=foo_subnet.id,
            user_name="tf-user",
            user_password="tf-pass!@q1",
            charge_type="PostPaid",
            storage_space=300,
            partition_number=350,
            project_name="default",
            tags=[volcengine.kafka.InstanceTagArgs(
                key="k1",
                value="v1",
            )],
            parameters=[
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="MessageMaxByte",
                    parameter_value="12",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="LogRetentionHours",
                    parameter_value="70",
                ),
            ])
        foo_sasl_user = volcengine.kafka.SaslUser("fooSaslUser",
            user_name="acc-test-user",
            instance_id=foo_instance.id,
            user_password="suqsnis123!",
            description="tf-test",
            all_authority=True,
            password_type="Scram")
        foo_topic = volcengine.kafka.Topic("fooTopic",
            topic_name="acc-test-topic",
            instance_id=foo_instance.id,
            description="tf-test",
            partition_number=15,
            replica_number=3,
            parameters=volcengine.kafka.TopicParametersArgs(
                min_insync_replica_number=2,
                message_max_byte=10,
                log_retention_hours=96,
            ),
            all_authority=False,
            access_policies=[volcengine.kafka.TopicAccessPolicyArgs(
                user_name=foo_sasl_user.user_name,
                access_policy="Pub",
            )])
        ```

        ## Import

        KafkaTopic can be imported using the instance_id:topic_name, e.g.

        ```sh
         $ pulumi import volcengine:kafka/topic:Topic default kafka-cnoeeapetf4s****:topic
        ```

        :param str resource_name: The name of the resource.
        :param TopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TopicAccessPolicyArgs']]]]] = None,
                 all_authority: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[pulumi.InputType['TopicParametersArgs']]] = None,
                 partition_number: Optional[pulumi.Input[int]] = None,
                 replica_number: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TopicArgs.__new__(TopicArgs)

            __props__.__dict__["access_policies"] = access_policies
            __props__.__dict__["all_authority"] = all_authority
            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["parameters"] = parameters
            if partition_number is None and not opts.urn:
                raise TypeError("Missing required property 'partition_number'")
            __props__.__dict__["partition_number"] = partition_number
            __props__.__dict__["replica_number"] = replica_number
            if topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'topic_name'")
            __props__.__dict__["topic_name"] = topic_name
        super(Topic, __self__).__init__(
            'volcengine:kafka/topic:Topic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TopicAccessPolicyArgs']]]]] = None,
            all_authority: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[pulumi.InputType['TopicParametersArgs']]] = None,
            partition_number: Optional[pulumi.Input[int]] = None,
            replica_number: Optional[pulumi.Input[int]] = None,
            topic_name: Optional[pulumi.Input[str]] = None) -> 'Topic':
        """
        Get an existing Topic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TopicAccessPolicyArgs']]]] access_policies: The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
        :param pulumi.Input[bool] all_authority: Whether the kafka topic is configured to be accessible by all users. Default: true.
        :param pulumi.Input[str] description: The description of the kafka topic.
        :param pulumi.Input[str] instance_id: The instance id of the kafka topic.
        :param pulumi.Input[pulumi.InputType['TopicParametersArgs']] parameters: The parameters of the kafka topic.
        :param pulumi.Input[int] partition_number: The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
        :param pulumi.Input[int] replica_number: The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
        :param pulumi.Input[str] topic_name: The name of the kafka topic.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TopicState.__new__(_TopicState)

        __props__.__dict__["access_policies"] = access_policies
        __props__.__dict__["all_authority"] = all_authority
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["partition_number"] = partition_number
        __props__.__dict__["replica_number"] = replica_number
        __props__.__dict__["topic_name"] = topic_name
        return Topic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> pulumi.Output[Optional[Sequence['outputs.TopicAccessPolicy']]]:
        """
        The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
        """
        return pulumi.get(self, "access_policies")

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the kafka topic is configured to be accessible by all users. Default: true.
        """
        return pulumi.get(self, "all_authority")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the kafka topic.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The instance id of the kafka topic.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output['outputs.TopicParameters']:
        """
        The parameters of the kafka topic.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="partitionNumber")
    def partition_number(self) -> pulumi.Output[int]:
        """
        The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
        """
        return pulumi.get(self, "partition_number")

    @property
    @pulumi.getter(name="replicaNumber")
    def replica_number(self) -> pulumi.Output[Optional[int]]:
        """
        The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
        """
        return pulumi.get(self, "replica_number")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[str]:
        """
        The name of the kafka topic.
        """
        return pulumi.get(self, "topic_name")

