# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'InstancesResult',
    'AwaitableInstancesResult',
    'instances',
    'instances_output',
]

@pulumi.output_type
class InstancesResult:
    """
    A collection of values returned by Instances.
    """
    def __init__(__self__, id=None, instance_id=None, instance_name=None, instance_status=None, instances=None, output_file=None, tags=None, total_count=None, zone_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if instance_status and not isinstance(instance_status, str):
            raise TypeError("Expected argument 'instance_status' to be a str")
        pulumi.set(__self__, "instance_status", instance_status)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        The id of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        The name of instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> Optional[str]:
        """
        The status of instance.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.InstancesInstanceResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.InstancesTagResult']]:
        """
        The Tags of instance.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        The id of zone.
        """
        return pulumi.get(self, "zone_id")


class AwaitableInstancesResult(InstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return InstancesResult(
            id=self.id,
            instance_id=self.instance_id,
            instance_name=self.instance_name,
            instance_status=self.instance_status,
            instances=self.instances,
            output_file=self.output_file,
            tags=self.tags,
            total_count=self.total_count,
            zone_id=self.zone_id)


def instances(instance_id: Optional[str] = None,
              instance_name: Optional[str] = None,
              instance_status: Optional[str] = None,
              output_file: Optional[str] = None,
              tags: Optional[Sequence[pulumi.InputType['InstancesTagArgs']]] = None,
              zone_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableInstancesResult:
    """
    Use this data source to query detailed information of kafka instances
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_instance = volcengine.kafka.Instance("fooInstance",
        instance_name="acc-test-kafka",
        instance_description="tf-test",
        version="2.2.2",
        compute_spec="kafka.20xrate.hw",
        subnet_id=foo_subnet.id,
        user_name="tf-user",
        user_password="tf-pass!@q1",
        charge_type="PostPaid",
        storage_space=300,
        partition_number=350,
        project_name="default",
        tags=[volcengine.kafka.InstanceTagArgs(
            key="k1",
            value="v1",
        )],
        parameters=[
            volcengine.kafka.InstanceParameterArgs(
                parameter_name="MessageMaxByte",
                parameter_value="12",
            ),
            volcengine.kafka.InstanceParameterArgs(
                parameter_name="LogRetentionHours",
                parameter_value="70",
            ),
        ])
    default = volcengine.kafka.instances_output(instance_id=foo_instance.id)
    ```


    :param str instance_id: The id of instance.
    :param str instance_name: The name of instance.
    :param str instance_status: The status of instance.
    :param str output_file: File name where to save data source results.
    :param Sequence[pulumi.InputType['InstancesTagArgs']] tags: The tags of instance.
    :param str zone_id: The zone id of instance.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['instanceName'] = instance_name
    __args__['instanceStatus'] = instance_status
    __args__['outputFile'] = output_file
    __args__['tags'] = tags
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:kafka/instances:Instances', __args__, opts=opts, typ=InstancesResult).value

    return AwaitableInstancesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        instance_status=pulumi.get(__ret__, 'instance_status'),
        instances=pulumi.get(__ret__, 'instances'),
        output_file=pulumi.get(__ret__, 'output_file'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'),
        zone_id=pulumi.get(__ret__, 'zone_id'))


@_utilities.lift_output_func(instances)
def instances_output(instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                     instance_name: Optional[pulumi.Input[Optional[str]]] = None,
                     instance_status: Optional[pulumi.Input[Optional[str]]] = None,
                     output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['InstancesTagArgs']]]]] = None,
                     zone_id: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[InstancesResult]:
    """
    Use this data source to query detailed information of kafka instances
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_zones = volcengine.ecs.zones()
    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_subnet = volcengine.vpc.Subnet("fooSubnet",
        subnet_name="acc-test-subnet",
        cidr_block="172.16.0.0/24",
        zone_id=foo_zones.zones[0].id,
        vpc_id=foo_vpc.id)
    foo_instance = volcengine.kafka.Instance("fooInstance",
        instance_name="acc-test-kafka",
        instance_description="tf-test",
        version="2.2.2",
        compute_spec="kafka.20xrate.hw",
        subnet_id=foo_subnet.id,
        user_name="tf-user",
        user_password="tf-pass!@q1",
        charge_type="PostPaid",
        storage_space=300,
        partition_number=350,
        project_name="default",
        tags=[volcengine.kafka.InstanceTagArgs(
            key="k1",
            value="v1",
        )],
        parameters=[
            volcengine.kafka.InstanceParameterArgs(
                parameter_name="MessageMaxByte",
                parameter_value="12",
            ),
            volcengine.kafka.InstanceParameterArgs(
                parameter_name="LogRetentionHours",
                parameter_value="70",
            ),
        ])
    default = volcengine.kafka.instances_output(instance_id=foo_instance.id)
    ```


    :param str instance_id: The id of instance.
    :param str instance_name: The name of instance.
    :param str instance_status: The status of instance.
    :param str output_file: File name where to save data source results.
    :param Sequence[pulumi.InputType['InstancesTagArgs']] tags: The tags of instance.
    :param str zone_id: The zone id of instance.
    """
    ...
