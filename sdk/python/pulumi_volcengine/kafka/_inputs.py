# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceParameterArgs',
    'InstanceTagArgs',
    'InstancesTagArgs',
    'TopicAccessPolicyArgs',
    'TopicParametersArgs',
]

@pulumi.input_type
class InstanceParameterArgs:
    def __init__(__self__, *,
                 parameter_name: pulumi.Input[str],
                 parameter_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] parameter_name: Parameter name.
        :param pulumi.Input[str] parameter_value: Parameter value.
        """
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "parameter_value", parameter_value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> pulumi.Input[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> pulumi.Input[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_value", value)


@pulumi.input_type
class InstanceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The Key of Tags.
        :param pulumi.Input[str] value: The Value of Tags.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Key of Tags.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The Value of Tags.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InstancesTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of tag.
        :param str value: The value of tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of tag.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TopicAccessPolicyArgs:
    def __init__(__self__, *,
                 access_policy: pulumi.Input[str],
                 user_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] access_policy: The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
        :param pulumi.Input[str] user_name: The name of SASL user.
        """
        pulumi.set(__self__, "access_policy", access_policy)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="accessPolicy")
    def access_policy(self) -> pulumi.Input[str]:
        """
        The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
        """
        return pulumi.get(self, "access_policy")

    @access_policy.setter
    def access_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_policy", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        The name of SASL user.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class TopicParametersArgs:
    def __init__(__self__, *,
                 log_retention_hours: Optional[pulumi.Input[int]] = None,
                 message_max_byte: Optional[pulumi.Input[int]] = None,
                 min_insync_replica_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] log_retention_hours: The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
        :param pulumi.Input[int] message_max_byte: The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
        :param pulumi.Input[int] min_insync_replica_number: The min number of sync replica. The default value is the replica number minus 1.
        """
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if message_max_byte is not None:
            pulumi.set(__self__, "message_max_byte", message_max_byte)
        if min_insync_replica_number is not None:
            pulumi.set(__self__, "min_insync_replica_number", min_insync_replica_number)

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[pulumi.Input[int]]:
        """
        The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
        """
        return pulumi.get(self, "log_retention_hours")

    @log_retention_hours.setter
    def log_retention_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_retention_hours", value)

    @property
    @pulumi.getter(name="messageMaxByte")
    def message_max_byte(self) -> Optional[pulumi.Input[int]]:
        """
        The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
        """
        return pulumi.get(self, "message_max_byte")

    @message_max_byte.setter
    def message_max_byte(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_max_byte", value)

    @property
    @pulumi.getter(name="minInsyncReplicaNumber")
    def min_insync_replica_number(self) -> Optional[pulumi.Input[int]]:
        """
        The min number of sync replica. The default value is the replica number minus 1.
        """
        return pulumi.get(self, "min_insync_replica_number")

    @min_insync_replica_number.setter
    def min_insync_replica_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_insync_replica_number", value)


