# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SaslUserArgs', 'SaslUser']

@pulumi.input_type
class SaslUserArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 user_password: pulumi.Input[str],
                 all_authority: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SaslUser resource.
        :param pulumi.Input[str] instance_id: The id of instance.
        :param pulumi.Input[str] user_name: The name of user.
        :param pulumi.Input[str] user_password: The password of user.
        :param pulumi.Input[bool] all_authority: Whether this user has read and write permissions for all topics. Default is true.
        :param pulumi.Input[str] description: The description of user.
        :param pulumi.Input[str] password_type: The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "user_password", user_password)
        if all_authority is not None:
            pulumi.set(__self__, "all_authority", all_authority)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        The name of user.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> pulumi.Input[str]:
        """
        The password of user.
        """
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_password", value)

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this user has read and write permissions for all topics. Default is true.
        """
        return pulumi.get(self, "all_authority")

    @all_authority.setter
    def all_authority(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_authority", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
        """
        return pulumi.get(self, "password_type")

    @password_type.setter
    def password_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_type", value)


@pulumi.input_type
class _SaslUserState:
    def __init__(__self__, *,
                 all_authority: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SaslUser resources.
        :param pulumi.Input[bool] all_authority: Whether this user has read and write permissions for all topics. Default is true.
        :param pulumi.Input[str] description: The description of user.
        :param pulumi.Input[str] instance_id: The id of instance.
        :param pulumi.Input[str] password_type: The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
        :param pulumi.Input[str] user_name: The name of user.
        :param pulumi.Input[str] user_password: The password of user.
        """
        if all_authority is not None:
            pulumi.set(__self__, "all_authority", all_authority)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_password is not None:
            pulumi.set(__self__, "user_password", user_password)

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this user has read and write permissions for all topics. Default is true.
        """
        return pulumi.get(self, "all_authority")

    @all_authority.setter
    def all_authority(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_authority", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
        """
        return pulumi.get(self, "password_type")

    @password_type.setter
    def password_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_type", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of user.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of user.
        """
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_password", value)


class SaslUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_authority: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage kafka sasl user
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.kafka.Instance("fooInstance",
            instance_name="acc-test-kafka",
            instance_description="tf-test",
            version="2.2.2",
            compute_spec="kafka.20xrate.hw",
            subnet_id=foo_subnet.id,
            user_name="tf-user",
            user_password="tf-pass!@q1",
            charge_type="PostPaid",
            storage_space=300,
            partition_number=350,
            project_name="default",
            tags=[volcengine.kafka.InstanceTagArgs(
                key="k1",
                value="v1",
            )],
            parameters=[
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="MessageMaxByte",
                    parameter_value="12",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="LogRetentionHours",
                    parameter_value="70",
                ),
            ])
        foo_sasl_user = volcengine.kafka.SaslUser("fooSaslUser",
            user_name="acc-test-user",
            instance_id=foo_instance.id,
            user_password="suqsnis123!",
            description="tf-test",
            all_authority=True,
            password_type="Scram")
        ```

        ## Import

        KafkaSaslUser can be imported using the kafka_id:username, e.g.

        ```sh
         $ pulumi import volcengine:kafka/saslUser:SaslUser default kafka-cnngbnntswg1****:tfuser
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] all_authority: Whether this user has read and write permissions for all topics. Default is true.
        :param pulumi.Input[str] description: The description of user.
        :param pulumi.Input[str] instance_id: The id of instance.
        :param pulumi.Input[str] password_type: The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
        :param pulumi.Input[str] user_name: The name of user.
        :param pulumi.Input[str] user_password: The password of user.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SaslUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage kafka sasl user
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.kafka.Instance("fooInstance",
            instance_name="acc-test-kafka",
            instance_description="tf-test",
            version="2.2.2",
            compute_spec="kafka.20xrate.hw",
            subnet_id=foo_subnet.id,
            user_name="tf-user",
            user_password="tf-pass!@q1",
            charge_type="PostPaid",
            storage_space=300,
            partition_number=350,
            project_name="default",
            tags=[volcengine.kafka.InstanceTagArgs(
                key="k1",
                value="v1",
            )],
            parameters=[
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="MessageMaxByte",
                    parameter_value="12",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="LogRetentionHours",
                    parameter_value="70",
                ),
            ])
        foo_sasl_user = volcengine.kafka.SaslUser("fooSaslUser",
            user_name="acc-test-user",
            instance_id=foo_instance.id,
            user_password="suqsnis123!",
            description="tf-test",
            all_authority=True,
            password_type="Scram")
        ```

        ## Import

        KafkaSaslUser can be imported using the kafka_id:username, e.g.

        ```sh
         $ pulumi import volcengine:kafka/saslUser:SaslUser default kafka-cnngbnntswg1****:tfuser
        ```

        :param str resource_name: The name of the resource.
        :param SaslUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SaslUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_authority: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SaslUserArgs.__new__(SaslUserArgs)

            __props__.__dict__["all_authority"] = all_authority
            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["password_type"] = password_type
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
            if user_password is None and not opts.urn:
                raise TypeError("Missing required property 'user_password'")
            __props__.__dict__["user_password"] = None if user_password is None else pulumi.Output.secret(user_password)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["userPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SaslUser, __self__).__init__(
            'volcengine:kafka/saslUser:SaslUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            all_authority: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            password_type: Optional[pulumi.Input[str]] = None,
            user_name: Optional[pulumi.Input[str]] = None,
            user_password: Optional[pulumi.Input[str]] = None) -> 'SaslUser':
        """
        Get an existing SaslUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] all_authority: Whether this user has read and write permissions for all topics. Default is true.
        :param pulumi.Input[str] description: The description of user.
        :param pulumi.Input[str] instance_id: The id of instance.
        :param pulumi.Input[str] password_type: The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
        :param pulumi.Input[str] user_name: The name of user.
        :param pulumi.Input[str] user_password: The password of user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SaslUserState.__new__(_SaslUserState)

        __props__.__dict__["all_authority"] = all_authority
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["password_type"] = password_type
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["user_password"] = user_password
        return SaslUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allAuthority")
    def all_authority(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether this user has read and write permissions for all topics. Default is true.
        """
        return pulumi.get(self, "all_authority")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of user.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
        """
        return pulumi.get(self, "password_type")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        The name of user.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> pulumi.Output[str]:
        """
        The password of user.
        """
        return pulumi.get(self, "user_password")

