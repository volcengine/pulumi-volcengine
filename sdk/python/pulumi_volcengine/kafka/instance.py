# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 charge_type: pulumi.Input[str],
                 compute_spec: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 user_password: pulumi.Input[str],
                 version: pulumi.Input[str],
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 need_rebalance: Optional[pulumi.Input[bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]] = None,
                 partition_number: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rebalance_time: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] charge_type: The charge type of instance, the value can be `PrePaid` or `PostPaid`.
        :param pulumi.Input[str] compute_spec: The compute spec of instance.
        :param pulumi.Input[str] subnet_id: The subnet id of instance.
        :param pulumi.Input[str] user_name: The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] user_password: The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] version: The version of instance, the value can be `2.2.2` or `2.8.2`.
        :param pulumi.Input[bool] auto_renew: The auto renew flag of instance. Only effective when instance_charge_type is PrePaid. Default is false.
        :param pulumi.Input[str] instance_description: The description of instance.
        :param pulumi.Input[str] instance_name: The name of instance.
        :param pulumi.Input[bool] need_rebalance: Whether enable rebalance. Only effected in modify when compute_spec field is changed.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]] parameters: Parameter of the instance.
        :param pulumi.Input[int] partition_number: The partition number of instance.
        :param pulumi.Input[int] period: The period of instance. Only effective when instance_charge_type is PrePaid. Unit is Month.
        :param pulumi.Input[str] project_name: The project name of instance.
        :param pulumi.Input[str] rebalance_time: The rebalance time.
        :param pulumi.Input[int] storage_space: The storage space of instance.
        :param pulumi.Input[str] storage_type: The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]] tags: The tags of instance.
        """
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "compute_spec", compute_spec)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "user_password", user_password)
        pulumi.set(__self__, "version", version)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if instance_description is not None:
            pulumi.set(__self__, "instance_description", instance_description)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if need_rebalance is not None:
            pulumi.set(__self__, "need_rebalance", need_rebalance)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if partition_number is not None:
            pulumi.set(__self__, "partition_number", partition_number)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if rebalance_time is not None:
            pulumi.set(__self__, "rebalance_time", rebalance_time)
        if storage_space is not None:
            pulumi.set(__self__, "storage_space", storage_space)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Input[str]:
        """
        The charge type of instance, the value can be `PrePaid` or `PostPaid`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="computeSpec")
    def compute_spec(self) -> pulumi.Input[str]:
        """
        The compute spec of instance.
        """
        return pulumi.get(self, "compute_spec")

    @compute_spec.setter
    def compute_spec(self, value: pulumi.Input[str]):
        pulumi.set(self, "compute_spec", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The subnet id of instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> pulumi.Input[str]:
        """
        The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_password", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        The version of instance, the value can be `2.2.2` or `2.8.2`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        The auto renew flag of instance. Only effective when instance_charge_type is PrePaid. Default is false.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="instanceDescription")
    def instance_description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of instance.
        """
        return pulumi.get(self, "instance_description")

    @instance_description.setter
    def instance_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_description", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="needRebalance")
    def need_rebalance(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable rebalance. Only effected in modify when compute_spec field is changed.
        """
        return pulumi.get(self, "need_rebalance")

    @need_rebalance.setter
    def need_rebalance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_rebalance", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]]:
        """
        Parameter of the instance.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="partitionNumber")
    def partition_number(self) -> Optional[pulumi.Input[int]]:
        """
        The partition number of instance.
        """
        return pulumi.get(self, "partition_number")

    @partition_number.setter
    def partition_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_number", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The period of instance. Only effective when instance_charge_type is PrePaid. Unit is Month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of instance.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="rebalanceTime")
    def rebalance_time(self) -> Optional[pulumi.Input[str]]:
        """
        The rebalance time.
        """
        return pulumi.get(self, "rebalance_time")

    @rebalance_time.setter
    def rebalance_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rebalance_time", value)

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> Optional[pulumi.Input[int]]:
        """
        The storage space of instance.
        """
        return pulumi.get(self, "storage_space")

    @storage_space.setter
    def storage_space(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_space", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        """
        The tags of instance.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 compute_spec: Optional[pulumi.Input[str]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 need_rebalance: Optional[pulumi.Input[bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]] = None,
                 partition_number: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rebalance_time: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[bool] auto_renew: The auto renew flag of instance. Only effective when instance_charge_type is PrePaid. Default is false.
        :param pulumi.Input[str] charge_type: The charge type of instance, the value can be `PrePaid` or `PostPaid`.
        :param pulumi.Input[str] compute_spec: The compute spec of instance.
        :param pulumi.Input[str] instance_description: The description of instance.
        :param pulumi.Input[str] instance_name: The name of instance.
        :param pulumi.Input[bool] need_rebalance: Whether enable rebalance. Only effected in modify when compute_spec field is changed.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]] parameters: Parameter of the instance.
        :param pulumi.Input[int] partition_number: The partition number of instance.
        :param pulumi.Input[int] period: The period of instance. Only effective when instance_charge_type is PrePaid. Unit is Month.
        :param pulumi.Input[str] project_name: The project name of instance.
        :param pulumi.Input[str] rebalance_time: The rebalance time.
        :param pulumi.Input[int] storage_space: The storage space of instance.
        :param pulumi.Input[str] storage_type: The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
        :param pulumi.Input[str] subnet_id: The subnet id of instance.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]] tags: The tags of instance.
        :param pulumi.Input[str] user_name: The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] user_password: The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] version: The version of instance, the value can be `2.2.2` or `2.8.2`.
        """
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if compute_spec is not None:
            pulumi.set(__self__, "compute_spec", compute_spec)
        if instance_description is not None:
            pulumi.set(__self__, "instance_description", instance_description)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if need_rebalance is not None:
            pulumi.set(__self__, "need_rebalance", need_rebalance)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if partition_number is not None:
            pulumi.set(__self__, "partition_number", partition_number)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if rebalance_time is not None:
            pulumi.set(__self__, "rebalance_time", rebalance_time)
        if storage_space is not None:
            pulumi.set(__self__, "storage_space", storage_space)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_password is not None:
            pulumi.set(__self__, "user_password", user_password)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        The auto renew flag of instance. Only effective when instance_charge_type is PrePaid. Default is false.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance, the value can be `PrePaid` or `PostPaid`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="computeSpec")
    def compute_spec(self) -> Optional[pulumi.Input[str]]:
        """
        The compute spec of instance.
        """
        return pulumi.get(self, "compute_spec")

    @compute_spec.setter
    def compute_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_spec", value)

    @property
    @pulumi.getter(name="instanceDescription")
    def instance_description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of instance.
        """
        return pulumi.get(self, "instance_description")

    @instance_description.setter
    def instance_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_description", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="needRebalance")
    def need_rebalance(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable rebalance. Only effected in modify when compute_spec field is changed.
        """
        return pulumi.get(self, "need_rebalance")

    @need_rebalance.setter
    def need_rebalance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_rebalance", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]]:
        """
        Parameter of the instance.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="partitionNumber")
    def partition_number(self) -> Optional[pulumi.Input[int]]:
        """
        The partition number of instance.
        """
        return pulumi.get(self, "partition_number")

    @partition_number.setter
    def partition_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_number", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The period of instance. Only effective when instance_charge_type is PrePaid. Unit is Month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        The project name of instance.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="rebalanceTime")
    def rebalance_time(self) -> Optional[pulumi.Input[str]]:
        """
        The rebalance time.
        """
        return pulumi.get(self, "rebalance_time")

    @rebalance_time.setter
    def rebalance_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rebalance_time", value)

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> Optional[pulumi.Input[int]]:
        """
        The storage space of instance.
        """
        return pulumi.get(self, "storage_space")

    @storage_space.setter
    def storage_space(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_space", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet id of instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        """
        The tags of instance.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> Optional[pulumi.Input[str]]:
        """
        The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_password", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of instance, the value can be `2.2.2` or `2.8.2`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 compute_spec: Optional[pulumi.Input[str]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 need_rebalance: Optional[pulumi.Input[bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceParameterArgs']]]]] = None,
                 partition_number: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rebalance_time: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.kafka.Instance("fooInstance",
            instance_name="acc-test-kafka",
            instance_description="tf-test",
            version="2.2.2",
            compute_spec="kafka.20xrate.hw",
            subnet_id=foo_subnet.id,
            user_name="tf-user",
            user_password="tf-pass!@q1",
            charge_type="PostPaid",
            storage_space=300,
            partition_number=350,
            project_name="default",
            tags=[volcengine.kafka.InstanceTagArgs(
                key="k1",
                value="v1",
            )],
            parameters=[
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="MessageMaxByte",
                    parameter_value="12",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="LogRetentionHours",
                    parameter_value="70",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="MessageTimestampType",
                    parameter_value="CreateTime",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="OffsetRetentionMinutes",
                    parameter_value="10080",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="AutoDeleteGroup",
                    parameter_value="false",
                ),
            ])
        ```

        ## Import

        KafkaInstance can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:kafka/instance:Instance default kafka-insbjwbbwb
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_renew: The auto renew flag of instance. Only effective when instance_charge_type is PrePaid. Default is false.
        :param pulumi.Input[str] charge_type: The charge type of instance, the value can be `PrePaid` or `PostPaid`.
        :param pulumi.Input[str] compute_spec: The compute spec of instance.
        :param pulumi.Input[str] instance_description: The description of instance.
        :param pulumi.Input[str] instance_name: The name of instance.
        :param pulumi.Input[bool] need_rebalance: Whether enable rebalance. Only effected in modify when compute_spec field is changed.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceParameterArgs']]]] parameters: Parameter of the instance.
        :param pulumi.Input[int] partition_number: The partition number of instance.
        :param pulumi.Input[int] period: The period of instance. Only effective when instance_charge_type is PrePaid. Unit is Month.
        :param pulumi.Input[str] project_name: The project name of instance.
        :param pulumi.Input[str] rebalance_time: The rebalance time.
        :param pulumi.Input[int] storage_space: The storage space of instance.
        :param pulumi.Input[str] storage_type: The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
        :param pulumi.Input[str] subnet_id: The subnet id of instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]] tags: The tags of instance.
        :param pulumi.Input[str] user_name: The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] user_password: The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] version: The version of instance, the value can be `2.2.2` or `2.8.2`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.kafka.Instance("fooInstance",
            instance_name="acc-test-kafka",
            instance_description="tf-test",
            version="2.2.2",
            compute_spec="kafka.20xrate.hw",
            subnet_id=foo_subnet.id,
            user_name="tf-user",
            user_password="tf-pass!@q1",
            charge_type="PostPaid",
            storage_space=300,
            partition_number=350,
            project_name="default",
            tags=[volcengine.kafka.InstanceTagArgs(
                key="k1",
                value="v1",
            )],
            parameters=[
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="MessageMaxByte",
                    parameter_value="12",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="LogRetentionHours",
                    parameter_value="70",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="MessageTimestampType",
                    parameter_value="CreateTime",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="OffsetRetentionMinutes",
                    parameter_value="10080",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="AutoDeleteGroup",
                    parameter_value="false",
                ),
            ])
        ```

        ## Import

        KafkaInstance can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:kafka/instance:Instance default kafka-insbjwbbwb
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 compute_spec: Optional[pulumi.Input[str]] = None,
                 instance_description: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 need_rebalance: Optional[pulumi.Input[bool]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceParameterArgs']]]]] = None,
                 partition_number: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rebalance_time: Optional[pulumi.Input[str]] = None,
                 storage_space: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["auto_renew"] = auto_renew
            if charge_type is None and not opts.urn:
                raise TypeError("Missing required property 'charge_type'")
            __props__.__dict__["charge_type"] = charge_type
            if compute_spec is None and not opts.urn:
                raise TypeError("Missing required property 'compute_spec'")
            __props__.__dict__["compute_spec"] = compute_spec
            __props__.__dict__["instance_description"] = instance_description
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["need_rebalance"] = need_rebalance
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["partition_number"] = partition_number
            __props__.__dict__["period"] = period
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["rebalance_time"] = rebalance_time
            __props__.__dict__["storage_space"] = storage_space
            __props__.__dict__["storage_type"] = storage_type
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
            if user_password is None and not opts.urn:
                raise TypeError("Missing required property 'user_password'")
            __props__.__dict__["user_password"] = None if user_password is None else pulumi.Output.secret(user_password)
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["userPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'volcengine:kafka/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew: Optional[pulumi.Input[bool]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            compute_spec: Optional[pulumi.Input[str]] = None,
            instance_description: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            need_rebalance: Optional[pulumi.Input[bool]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceParameterArgs']]]]] = None,
            partition_number: Optional[pulumi.Input[int]] = None,
            period: Optional[pulumi.Input[int]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            rebalance_time: Optional[pulumi.Input[str]] = None,
            storage_space: Optional[pulumi.Input[int]] = None,
            storage_type: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
            user_name: Optional[pulumi.Input[str]] = None,
            user_password: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_renew: The auto renew flag of instance. Only effective when instance_charge_type is PrePaid. Default is false.
        :param pulumi.Input[str] charge_type: The charge type of instance, the value can be `PrePaid` or `PostPaid`.
        :param pulumi.Input[str] compute_spec: The compute spec of instance.
        :param pulumi.Input[str] instance_description: The description of instance.
        :param pulumi.Input[str] instance_name: The name of instance.
        :param pulumi.Input[bool] need_rebalance: Whether enable rebalance. Only effected in modify when compute_spec field is changed.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceParameterArgs']]]] parameters: Parameter of the instance.
        :param pulumi.Input[int] partition_number: The partition number of instance.
        :param pulumi.Input[int] period: The period of instance. Only effective when instance_charge_type is PrePaid. Unit is Month.
        :param pulumi.Input[str] project_name: The project name of instance.
        :param pulumi.Input[str] rebalance_time: The rebalance time.
        :param pulumi.Input[int] storage_space: The storage space of instance.
        :param pulumi.Input[str] storage_type: The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
        :param pulumi.Input[str] subnet_id: The subnet id of instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]] tags: The tags of instance.
        :param pulumi.Input[str] user_name: The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] user_password: The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        :param pulumi.Input[str] version: The version of instance, the value can be `2.2.2` or `2.8.2`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["compute_spec"] = compute_spec
        __props__.__dict__["instance_description"] = instance_description
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["need_rebalance"] = need_rebalance
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["partition_number"] = partition_number
        __props__.__dict__["period"] = period
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["rebalance_time"] = rebalance_time
        __props__.__dict__["storage_space"] = storage_space
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["user_password"] = user_password
        __props__.__dict__["version"] = version
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[bool]]:
        """
        The auto renew flag of instance. Only effective when instance_charge_type is PrePaid. Default is false.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[str]:
        """
        The charge type of instance, the value can be `PrePaid` or `PostPaid`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="computeSpec")
    def compute_spec(self) -> pulumi.Output[str]:
        """
        The compute spec of instance.
        """
        return pulumi.get(self, "compute_spec")

    @property
    @pulumi.getter(name="instanceDescription")
    def instance_description(self) -> pulumi.Output[str]:
        """
        The description of instance.
        """
        return pulumi.get(self, "instance_description")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        The name of instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="needRebalance")
    def need_rebalance(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether enable rebalance. Only effected in modify when compute_spec field is changed.
        """
        return pulumi.get(self, "need_rebalance")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceParameter']]]:
        """
        Parameter of the instance.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="partitionNumber")
    def partition_number(self) -> pulumi.Output[int]:
        """
        The partition number of instance.
        """
        return pulumi.get(self, "partition_number")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        The period of instance. Only effective when instance_charge_type is PrePaid. Unit is Month.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The project name of instance.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="rebalanceTime")
    def rebalance_time(self) -> pulumi.Output[Optional[str]]:
        """
        The rebalance time.
        """
        return pulumi.get(self, "rebalance_time")

    @property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> pulumi.Output[int]:
        """
        The storage space of instance.
        """
        return pulumi.get(self, "storage_space")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[Optional[str]]:
        """
        The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The subnet id of instance.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceTag']]]:
        """
        The tags of instance.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> pulumi.Output[str]:
        """
        The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        """
        return pulumi.get(self, "user_password")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version of instance, the value can be `2.2.2` or `2.8.2`.
        """
        return pulumi.get(self, "version")

