# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PublicAddressArgs', 'PublicAddress']

@pulumi.input_type
class PublicAddressArgs:
    def __init__(__self__, *,
                 eip_id: pulumi.Input[str],
                 instance_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a PublicAddress resource.
        :param pulumi.Input[str] eip_id: The id of eip.
        :param pulumi.Input[str] instance_id: The id of kafka instance.
        """
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Input[str]:
        """
        The id of eip.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of kafka instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)


@pulumi.input_type
class _PublicAddressState:
    def __init__(__self__, *,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 public_endpoint: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PublicAddress resources.
        :param pulumi.Input[str] eip_id: The id of eip.
        :param pulumi.Input[str] endpoint_type: The endpoint type of instance.
        :param pulumi.Input[str] instance_id: The id of kafka instance.
        :param pulumi.Input[str] network_type: The network type of instance.
        :param pulumi.Input[str] public_endpoint: The public endpoint of instance.
        """
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if public_endpoint is not None:
            pulumi.set(__self__, "public_endpoint", public_endpoint)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of eip.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint type of instance.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of kafka instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        The network type of instance.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The public endpoint of instance.
        """
        return pulumi.get(self, "public_endpoint")

    @public_endpoint.setter
    def public_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_endpoint", value)


class PublicAddress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage kafka public address
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.kafka.Instance("fooInstance",
            instance_name="acc-test-kafka",
            instance_description="tf-test",
            version="2.2.2",
            compute_spec="kafka.20xrate.hw",
            subnet_id=foo_subnet.id,
            user_name="tf-user",
            user_password="tf-pass!@q1",
            charge_type="PostPaid",
            storage_space=300,
            partition_number=350,
            project_name="default",
            tags=[volcengine.kafka.InstanceTagArgs(
                key="k1",
                value="v1",
            )],
            parameters=[
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="MessageMaxByte",
                    parameter_value="12",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="LogRetentionHours",
                    parameter_value="70",
                ),
            ])
        foo_address = volcengine.eip.Address("fooAddress",
            billing_type="PostPaidByBandwidth",
            bandwidth=1,
            isp="BGP",
            description="tf-test",
            project_name="default")
        foo_public_address = volcengine.kafka.PublicAddress("fooPublicAddress",
            instance_id=foo_instance.id,
            eip_id=foo_address.id)
        ```

        ## Import

        KafkaPublicAddress can be imported using the instance_id:eip_id, e.g.

        ```sh
         $ pulumi import volcengine:kafka/publicAddress:PublicAddress default instance_id:eip_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] eip_id: The id of eip.
        :param pulumi.Input[str] instance_id: The id of kafka instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PublicAddressArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage kafka public address
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_zones = volcengine.ecs.zones()
        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_subnet = volcengine.vpc.Subnet("fooSubnet",
            subnet_name="acc-test-subnet",
            cidr_block="172.16.0.0/24",
            zone_id=foo_zones.zones[0].id,
            vpc_id=foo_vpc.id)
        foo_instance = volcengine.kafka.Instance("fooInstance",
            instance_name="acc-test-kafka",
            instance_description="tf-test",
            version="2.2.2",
            compute_spec="kafka.20xrate.hw",
            subnet_id=foo_subnet.id,
            user_name="tf-user",
            user_password="tf-pass!@q1",
            charge_type="PostPaid",
            storage_space=300,
            partition_number=350,
            project_name="default",
            tags=[volcengine.kafka.InstanceTagArgs(
                key="k1",
                value="v1",
            )],
            parameters=[
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="MessageMaxByte",
                    parameter_value="12",
                ),
                volcengine.kafka.InstanceParameterArgs(
                    parameter_name="LogRetentionHours",
                    parameter_value="70",
                ),
            ])
        foo_address = volcengine.eip.Address("fooAddress",
            billing_type="PostPaidByBandwidth",
            bandwidth=1,
            isp="BGP",
            description="tf-test",
            project_name="default")
        foo_public_address = volcengine.kafka.PublicAddress("fooPublicAddress",
            instance_id=foo_instance.id,
            eip_id=foo_address.id)
        ```

        ## Import

        KafkaPublicAddress can be imported using the instance_id:eip_id, e.g.

        ```sh
         $ pulumi import volcengine:kafka/publicAddress:PublicAddress default instance_id:eip_id
        ```

        :param str resource_name: The name of the resource.
        :param PublicAddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PublicAddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PublicAddressArgs.__new__(PublicAddressArgs)

            if eip_id is None and not opts.urn:
                raise TypeError("Missing required property 'eip_id'")
            __props__.__dict__["eip_id"] = eip_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["endpoint_type"] = None
            __props__.__dict__["network_type"] = None
            __props__.__dict__["public_endpoint"] = None
        super(PublicAddress, __self__).__init__(
            'volcengine:kafka/publicAddress:PublicAddress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            eip_id: Optional[pulumi.Input[str]] = None,
            endpoint_type: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            network_type: Optional[pulumi.Input[str]] = None,
            public_endpoint: Optional[pulumi.Input[str]] = None) -> 'PublicAddress':
        """
        Get an existing PublicAddress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] eip_id: The id of eip.
        :param pulumi.Input[str] endpoint_type: The endpoint type of instance.
        :param pulumi.Input[str] instance_id: The id of kafka instance.
        :param pulumi.Input[str] network_type: The network type of instance.
        :param pulumi.Input[str] public_endpoint: The public endpoint of instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PublicAddressState.__new__(_PublicAddressState)

        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["network_type"] = network_type
        __props__.__dict__["public_endpoint"] = public_endpoint
        return PublicAddress(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[str]:
        """
        The id of eip.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[str]:
        """
        The endpoint type of instance.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of kafka instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[str]:
        """
        The network type of instance.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> pulumi.Output[str]:
        """
        The public endpoint of instance.
        """
        return pulumi.get(self, "public_endpoint")

