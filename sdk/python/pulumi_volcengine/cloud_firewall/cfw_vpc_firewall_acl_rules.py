# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CfwVpcFirewallAclRulesResult',
    'AwaitableCfwVpcFirewallAclRulesResult',
    'cfw_vpc_firewall_acl_rules',
    'cfw_vpc_firewall_acl_rules_output',
]

@pulumi.output_type
class CfwVpcFirewallAclRulesResult:
    """
    A collection of values returned by CfwVpcFirewallAclRules.
    """
    def __init__(__self__, actions=None, description=None, destination=None, id=None, output_file=None, protos=None, repeat_types=None, rule_id=None, source=None, statuses=None, total_count=None, vpc_firewall_acl_rules=None, vpc_firewall_id=None):
        if actions and not isinstance(actions, list):
            raise TypeError("Expected argument 'actions' to be a list")
        pulumi.set(__self__, "actions", actions)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if protos and not isinstance(protos, list):
            raise TypeError("Expected argument 'protos' to be a list")
        pulumi.set(__self__, "protos", protos)
        if repeat_types and not isinstance(repeat_types, list):
            raise TypeError("Expected argument 'repeat_types' to be a list")
        pulumi.set(__self__, "repeat_types", repeat_types)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if vpc_firewall_acl_rules and not isinstance(vpc_firewall_acl_rules, list):
            raise TypeError("Expected argument 'vpc_firewall_acl_rules' to be a list")
        pulumi.set(__self__, "vpc_firewall_acl_rules", vpc_firewall_acl_rules)
        if vpc_firewall_id and not isinstance(vpc_firewall_id, str):
            raise TypeError("Expected argument 'vpc_firewall_id' to be a str")
        pulumi.set(__self__, "vpc_firewall_id", vpc_firewall_id)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        """
        The action of the vpc firewall acl rule.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the vpc firewall acl rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        """
        The destination of the vpc firewall acl rule.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def protos(self) -> Optional[Sequence[str]]:
        """
        The proto of the vpc firewall acl rule.
        """
        return pulumi.get(self, "protos")

    @property
    @pulumi.getter(name="repeatTypes")
    def repeat_types(self) -> Optional[Sequence[str]]:
        """
        The repeat type of the vpc firewall acl rule.
        """
        return pulumi.get(self, "repeat_types")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        """
        The id of the vpc firewall acl rule.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        The source of the vpc firewall acl rule.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[bool]]:
        """
        Whether to enable the vpc firewall acl rule.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="vpcFirewallAclRules")
    def vpc_firewall_acl_rules(self) -> Sequence['outputs.CfwVpcFirewallAclRulesVpcFirewallAclRuleResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "vpc_firewall_acl_rules")

    @property
    @pulumi.getter(name="vpcFirewallId")
    def vpc_firewall_id(self) -> str:
        """
        The id of the vpc firewall.
        """
        return pulumi.get(self, "vpc_firewall_id")


class AwaitableCfwVpcFirewallAclRulesResult(CfwVpcFirewallAclRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return CfwVpcFirewallAclRulesResult(
            actions=self.actions,
            description=self.description,
            destination=self.destination,
            id=self.id,
            output_file=self.output_file,
            protos=self.protos,
            repeat_types=self.repeat_types,
            rule_id=self.rule_id,
            source=self.source,
            statuses=self.statuses,
            total_count=self.total_count,
            vpc_firewall_acl_rules=self.vpc_firewall_acl_rules,
            vpc_firewall_id=self.vpc_firewall_id)


def cfw_vpc_firewall_acl_rules(actions: Optional[Sequence[str]] = None,
                               description: Optional[str] = None,
                               destination: Optional[str] = None,
                               output_file: Optional[str] = None,
                               protos: Optional[Sequence[str]] = None,
                               repeat_types: Optional[Sequence[str]] = None,
                               rule_id: Optional[str] = None,
                               source: Optional[str] = None,
                               statuses: Optional[Sequence[bool]] = None,
                               vpc_firewall_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableCfwVpcFirewallAclRulesResult:
    """
    Use this data source to query detailed information of cfw vpc firewall acl rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cloud_firewall.cfw_vpc_firewall_acl_rules(actions=[
            "accept",
            "deny",
        ],
        vpc_firewall_id="vfw-ydmjakzksgf7u99j6sby")
    ```


    :param Sequence[str] actions: The action list of the vpc firewall acl rule. Valid values: `accept`, `deny`, `monitor`.
    :param str description: The description of the vpc firewall acl rule. This field support fuzzy query.
    :param str destination: The destination of the vpc firewall acl rule. This field support fuzzy query.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] protos: The proto list of the vpc firewall acl rule. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destination_type is `domain`, The proto must be `TCP`.
    :param Sequence[str] repeat_types: The repeat type of the vpc firewall acl rule. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
    :param str rule_id: The rule id of the vpc firewall acl rule. This field support fuzzy query.
    :param str source: The source of the vpc firewall acl rule. This field support fuzzy query.
    :param Sequence[bool] statuses: The enable status list of the vpc firewall acl rule.
    :param str vpc_firewall_id: The vpc firewall id of the vpc firewall acl rule.
    """
    __args__ = dict()
    __args__['actions'] = actions
    __args__['description'] = description
    __args__['destination'] = destination
    __args__['outputFile'] = output_file
    __args__['protos'] = protos
    __args__['repeatTypes'] = repeat_types
    __args__['ruleId'] = rule_id
    __args__['source'] = source
    __args__['statuses'] = statuses
    __args__['vpcFirewallId'] = vpc_firewall_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cloud_firewall/cfwVpcFirewallAclRules:CfwVpcFirewallAclRules', __args__, opts=opts, typ=CfwVpcFirewallAclRulesResult).value

    return AwaitableCfwVpcFirewallAclRulesResult(
        actions=pulumi.get(__ret__, 'actions'),
        description=pulumi.get(__ret__, 'description'),
        destination=pulumi.get(__ret__, 'destination'),
        id=pulumi.get(__ret__, 'id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        protos=pulumi.get(__ret__, 'protos'),
        repeat_types=pulumi.get(__ret__, 'repeat_types'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        source=pulumi.get(__ret__, 'source'),
        statuses=pulumi.get(__ret__, 'statuses'),
        total_count=pulumi.get(__ret__, 'total_count'),
        vpc_firewall_acl_rules=pulumi.get(__ret__, 'vpc_firewall_acl_rules'),
        vpc_firewall_id=pulumi.get(__ret__, 'vpc_firewall_id'))


@_utilities.lift_output_func(cfw_vpc_firewall_acl_rules)
def cfw_vpc_firewall_acl_rules_output(actions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                      description: Optional[pulumi.Input[Optional[str]]] = None,
                                      destination: Optional[pulumi.Input[Optional[str]]] = None,
                                      output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      protos: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                      repeat_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                      rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      source: Optional[pulumi.Input[Optional[str]]] = None,
                                      statuses: Optional[pulumi.Input[Optional[Sequence[bool]]]] = None,
                                      vpc_firewall_id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[CfwVpcFirewallAclRulesResult]:
    """
    Use this data source to query detailed information of cfw vpc firewall acl rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cloud_firewall.cfw_vpc_firewall_acl_rules(actions=[
            "accept",
            "deny",
        ],
        vpc_firewall_id="vfw-ydmjakzksgf7u99j6sby")
    ```


    :param Sequence[str] actions: The action list of the vpc firewall acl rule. Valid values: `accept`, `deny`, `monitor`.
    :param str description: The description of the vpc firewall acl rule. This field support fuzzy query.
    :param str destination: The destination of the vpc firewall acl rule. This field support fuzzy query.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] protos: The proto list of the vpc firewall acl rule. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destination_type is `domain`, The proto must be `TCP`.
    :param Sequence[str] repeat_types: The repeat type of the vpc firewall acl rule. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
    :param str rule_id: The rule id of the vpc firewall acl rule. This field support fuzzy query.
    :param str source: The source of the vpc firewall acl rule. This field support fuzzy query.
    :param Sequence[bool] statuses: The enable status list of the vpc firewall acl rule.
    :param str vpc_firewall_id: The vpc firewall id of the vpc firewall acl rule.
    """
    ...
