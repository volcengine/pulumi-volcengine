# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CfwDnsControlPolicyArgs', 'CfwDnsControlPolicy']

@pulumi.input_type
class CfwDnsControlPolicyArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 sources: pulumi.Input[Sequence[pulumi.Input['CfwDnsControlPolicySourceArgs']]],
                 description: Optional[pulumi.Input[str]] = None,
                 internet_firewall_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a CfwDnsControlPolicy resource.
        :param pulumi.Input[str] destination: The destination of the dns control policy.
        :param pulumi.Input[str] destination_type: The destination type of the dns control policy. Valid values: `group`, `domain`.
        :param pulumi.Input[Sequence[pulumi.Input['CfwDnsControlPolicySourceArgs']]] sources: The source vpc list of the dns control policy.
        :param pulumi.Input[str] description: The description of the dns control policy.
        :param pulumi.Input[str] internet_firewall_id: The internet firewall id of the control policy.
        :param pulumi.Input[bool] status: Whether to enable the dns control policy.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "sources", sources)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if internet_firewall_id is not None:
            pulumi.set(__self__, "internet_firewall_id", internet_firewall_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        The destination of the dns control policy.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        """
        The destination type of the dns control policy. Valid values: `group`, `domain`.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['CfwDnsControlPolicySourceArgs']]]:
        """
        The source vpc list of the dns control policy.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['CfwDnsControlPolicySourceArgs']]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the dns control policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="internetFirewallId")
    def internet_firewall_id(self) -> Optional[pulumi.Input[str]]:
        """
        The internet firewall id of the control policy.
        """
        return pulumi.get(self, "internet_firewall_id")

    @internet_firewall_id.setter
    def internet_firewall_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_firewall_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the dns control policy.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _CfwDnsControlPolicyState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 hit_cnt: Optional[pulumi.Input[int]] = None,
                 internet_firewall_id: Optional[pulumi.Input[str]] = None,
                 last_hit_time: Optional[pulumi.Input[int]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['CfwDnsControlPolicySourceArgs']]]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 use_count: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering CfwDnsControlPolicy resources.
        :param pulumi.Input[str] account_id: The account id of the dns control policy.
        :param pulumi.Input[str] description: The description of the dns control policy.
        :param pulumi.Input[str] destination: The destination of the dns control policy.
        :param pulumi.Input[str] destination_type: The destination type of the dns control policy. Valid values: `group`, `domain`.
        :param pulumi.Input[int] hit_cnt: The hit count of the dns control policy.
        :param pulumi.Input[str] internet_firewall_id: The internet firewall id of the control policy.
        :param pulumi.Input[int] last_hit_time: The last hit time of the dns control policy. Unix timestamp.
        :param pulumi.Input[Sequence[pulumi.Input['CfwDnsControlPolicySourceArgs']]] sources: The source vpc list of the dns control policy.
        :param pulumi.Input[bool] status: Whether to enable the dns control policy.
        :param pulumi.Input[int] use_count: The use count of the dns control policy.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if hit_cnt is not None:
            pulumi.set(__self__, "hit_cnt", hit_cnt)
        if internet_firewall_id is not None:
            pulumi.set(__self__, "internet_firewall_id", internet_firewall_id)
        if last_hit_time is not None:
            pulumi.set(__self__, "last_hit_time", last_hit_time)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if use_count is not None:
            pulumi.set(__self__, "use_count", use_count)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account id of the dns control policy.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the dns control policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        """
        The destination of the dns control policy.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        """
        The destination type of the dns control policy. Valid values: `group`, `domain`.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="hitCnt")
    def hit_cnt(self) -> Optional[pulumi.Input[int]]:
        """
        The hit count of the dns control policy.
        """
        return pulumi.get(self, "hit_cnt")

    @hit_cnt.setter
    def hit_cnt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hit_cnt", value)

    @property
    @pulumi.getter(name="internetFirewallId")
    def internet_firewall_id(self) -> Optional[pulumi.Input[str]]:
        """
        The internet firewall id of the control policy.
        """
        return pulumi.get(self, "internet_firewall_id")

    @internet_firewall_id.setter
    def internet_firewall_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_firewall_id", value)

    @property
    @pulumi.getter(name="lastHitTime")
    def last_hit_time(self) -> Optional[pulumi.Input[int]]:
        """
        The last hit time of the dns control policy. Unix timestamp.
        """
        return pulumi.get(self, "last_hit_time")

    @last_hit_time.setter
    def last_hit_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_hit_time", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CfwDnsControlPolicySourceArgs']]]]:
        """
        The source vpc list of the dns control policy.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CfwDnsControlPolicySourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the dns control policy.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="useCount")
    def use_count(self) -> Optional[pulumi.Input[int]]:
        """
        The use count of the dns control policy.
        """
        return pulumi.get(self, "use_count")

    @use_count.setter
    def use_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "use_count", value)


class CfwDnsControlPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 internet_firewall_id: Optional[pulumi.Input[str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CfwDnsControlPolicySourceArgs']]]]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to manage cfw dns control policy
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_cfw_dns_control_policy = volcengine.cloud_firewall.CfwDnsControlPolicy("fooCfwDnsControlPolicy",
            description="acc-test-dns-control-policy",
            destination_type="domain",
            destination="www.test.com",
            sources=[volcengine.cloud_firewall.CfwDnsControlPolicySourceArgs(
                vpc_id=foo_vpc.id,
                region="cn-beijing",
            )])
        ```

        ## Import

        DnsControlPolicy can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:cloud_firewall/cfwDnsControlPolicy:CfwDnsControlPolicy default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the dns control policy.
        :param pulumi.Input[str] destination: The destination of the dns control policy.
        :param pulumi.Input[str] destination_type: The destination type of the dns control policy. Valid values: `group`, `domain`.
        :param pulumi.Input[str] internet_firewall_id: The internet firewall id of the control policy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CfwDnsControlPolicySourceArgs']]]] sources: The source vpc list of the dns control policy.
        :param pulumi.Input[bool] status: Whether to enable the dns control policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CfwDnsControlPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cfw dns control policy
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_vpc = volcengine.vpc.Vpc("fooVpc",
            vpc_name="acc-test-vpc",
            cidr_block="172.16.0.0/16")
        foo_cfw_dns_control_policy = volcengine.cloud_firewall.CfwDnsControlPolicy("fooCfwDnsControlPolicy",
            description="acc-test-dns-control-policy",
            destination_type="domain",
            destination="www.test.com",
            sources=[volcengine.cloud_firewall.CfwDnsControlPolicySourceArgs(
                vpc_id=foo_vpc.id,
                region="cn-beijing",
            )])
        ```

        ## Import

        DnsControlPolicy can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:cloud_firewall/cfwDnsControlPolicy:CfwDnsControlPolicy default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param CfwDnsControlPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CfwDnsControlPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 internet_firewall_id: Optional[pulumi.Input[str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CfwDnsControlPolicySourceArgs']]]]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CfwDnsControlPolicyArgs.__new__(CfwDnsControlPolicyArgs)

            __props__.__dict__["description"] = description
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            if destination_type is None and not opts.urn:
                raise TypeError("Missing required property 'destination_type'")
            __props__.__dict__["destination_type"] = destination_type
            __props__.__dict__["internet_firewall_id"] = internet_firewall_id
            if sources is None and not opts.urn:
                raise TypeError("Missing required property 'sources'")
            __props__.__dict__["sources"] = sources
            __props__.__dict__["status"] = status
            __props__.__dict__["account_id"] = None
            __props__.__dict__["hit_cnt"] = None
            __props__.__dict__["last_hit_time"] = None
            __props__.__dict__["use_count"] = None
        super(CfwDnsControlPolicy, __self__).__init__(
            'volcengine:cloud_firewall/cfwDnsControlPolicy:CfwDnsControlPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[str]] = None,
            destination_type: Optional[pulumi.Input[str]] = None,
            hit_cnt: Optional[pulumi.Input[int]] = None,
            internet_firewall_id: Optional[pulumi.Input[str]] = None,
            last_hit_time: Optional[pulumi.Input[int]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CfwDnsControlPolicySourceArgs']]]]] = None,
            status: Optional[pulumi.Input[bool]] = None,
            use_count: Optional[pulumi.Input[int]] = None) -> 'CfwDnsControlPolicy':
        """
        Get an existing CfwDnsControlPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The account id of the dns control policy.
        :param pulumi.Input[str] description: The description of the dns control policy.
        :param pulumi.Input[str] destination: The destination of the dns control policy.
        :param pulumi.Input[str] destination_type: The destination type of the dns control policy. Valid values: `group`, `domain`.
        :param pulumi.Input[int] hit_cnt: The hit count of the dns control policy.
        :param pulumi.Input[str] internet_firewall_id: The internet firewall id of the control policy.
        :param pulumi.Input[int] last_hit_time: The last hit time of the dns control policy. Unix timestamp.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CfwDnsControlPolicySourceArgs']]]] sources: The source vpc list of the dns control policy.
        :param pulumi.Input[bool] status: Whether to enable the dns control policy.
        :param pulumi.Input[int] use_count: The use count of the dns control policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CfwDnsControlPolicyState.__new__(_CfwDnsControlPolicyState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["description"] = description
        __props__.__dict__["destination"] = destination
        __props__.__dict__["destination_type"] = destination_type
        __props__.__dict__["hit_cnt"] = hit_cnt
        __props__.__dict__["internet_firewall_id"] = internet_firewall_id
        __props__.__dict__["last_hit_time"] = last_hit_time
        __props__.__dict__["sources"] = sources
        __props__.__dict__["status"] = status
        __props__.__dict__["use_count"] = use_count
        return CfwDnsControlPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The account id of the dns control policy.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the dns control policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[str]:
        """
        The destination of the dns control policy.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Output[str]:
        """
        The destination type of the dns control policy. Valid values: `group`, `domain`.
        """
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="hitCnt")
    def hit_cnt(self) -> pulumi.Output[int]:
        """
        The hit count of the dns control policy.
        """
        return pulumi.get(self, "hit_cnt")

    @property
    @pulumi.getter(name="internetFirewallId")
    def internet_firewall_id(self) -> pulumi.Output[str]:
        """
        The internet firewall id of the control policy.
        """
        return pulumi.get(self, "internet_firewall_id")

    @property
    @pulumi.getter(name="lastHitTime")
    def last_hit_time(self) -> pulumi.Output[int]:
        """
        The last hit time of the dns control policy. Unix timestamp.
        """
        return pulumi.get(self, "last_hit_time")

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Sequence['outputs.CfwDnsControlPolicySource']]:
        """
        The source vpc list of the dns control policy.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[bool]:
        """
        Whether to enable the dns control policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="useCount")
    def use_count(self) -> pulumi.Output[int]:
        """
        The use count of the dns control policy.
        """
        return pulumi.get(self, "use_count")

