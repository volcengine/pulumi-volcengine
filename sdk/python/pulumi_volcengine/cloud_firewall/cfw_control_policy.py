# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CfwControlPolicyArgs', 'CfwControlPolicy']

@pulumi.input_type
class CfwControlPolicyArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 destination: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 direction: pulumi.Input[str],
                 proto: pulumi.Input[str],
                 source: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 dest_port: Optional[pulumi.Input[str]] = None,
                 dest_port_type: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 repeat_days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 repeat_end_time: Optional[pulumi.Input[str]] = None,
                 repeat_start_time: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a CfwControlPolicy resource.
        :param pulumi.Input[str] action: The action of the control policy. Valid values: `accept`, `deny`, `monitor`.
        :param pulumi.Input[str] destination: The destination of the control policy.
        :param pulumi.Input[str] destination_type: The destination type of the control policy. Valid values: `net`, `group`, `location`, `domain`.
        :param pulumi.Input[str] direction: The direction of the control policy. Valid values: `in`, `out`.
        :param pulumi.Input[str] proto: The proto of the control policy. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destination_type is `domain`, The proto must be `TCP`.
        :param pulumi.Input[str] source: The source of the control policy.
        :param pulumi.Input[str] source_type: The source type of the control policy. Valid values: `net`, `group`, `location`.
        :param pulumi.Input[str] description: The description of the control policy.
        :param pulumi.Input[str] dest_port: The dest port of the control policy.
        :param pulumi.Input[str] dest_port_type: The dest port type of the control policy. Valid values: `port`, `group`.
        :param pulumi.Input[int] end_time: The end time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
               When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[int] priority: The priority of the control policy. Default is 0. This field is only effective when creating a control policy.0 means lowest priority, 1 means highest priority. The priority increases in order from 1, with lower priority indicating higher priority.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] repeat_days: The repeat days of the control policy. When the value of repeat_type is one of `Weekly`, `Monthly`, this field is required.
               When the repeat_type is `Weekly`, the valid value range is 0~6.
               When the repeat_type is `Monthly`, the valid value range is 1~31.
        :param pulumi.Input[str] repeat_end_time: The repeat end time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
               When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[str] repeat_start_time: The repeat start time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
               When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[str] repeat_type: The repeat type of the control policy. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
        :param pulumi.Input[int] start_time: The start time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
               When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[bool] status: Whether to enable the control policy. Default is false.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "proto", proto)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source_type", source_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_port is not None:
            pulumi.set(__self__, "dest_port", dest_port)
        if dest_port_type is not None:
            pulumi.set(__self__, "dest_port_type", dest_port_type)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if repeat_days is not None:
            pulumi.set(__self__, "repeat_days", repeat_days)
        if repeat_end_time is not None:
            pulumi.set(__self__, "repeat_end_time", repeat_end_time)
        if repeat_start_time is not None:
            pulumi.set(__self__, "repeat_start_time", repeat_start_time)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        The action of the control policy. Valid values: `accept`, `deny`, `monitor`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        The destination of the control policy.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        """
        The destination type of the control policy. Valid values: `net`, `group`, `location`, `domain`.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        The direction of the control policy. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def proto(self) -> pulumi.Input[str]:
        """
        The proto of the control policy. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destination_type is `domain`, The proto must be `TCP`.
        """
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: pulumi.Input[str]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The source of the control policy.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        The source type of the control policy. Valid values: `net`, `group`, `location`.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the control policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destPort")
    def dest_port(self) -> Optional[pulumi.Input[str]]:
        """
        The dest port of the control policy.
        """
        return pulumi.get(self, "dest_port")

    @dest_port.setter
    def dest_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_port", value)

    @property
    @pulumi.getter(name="destPortType")
    def dest_port_type(self) -> Optional[pulumi.Input[str]]:
        """
        The dest port type of the control policy. Valid values: `port`, `group`.
        """
        return pulumi.get(self, "dest_port_type")

    @dest_port_type.setter
    def dest_port_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_port_type", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[int]]:
        """
        The end time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
        When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the control policy. Default is 0. This field is only effective when creating a control policy.0 means lowest priority, 1 means highest priority. The priority increases in order from 1, with lower priority indicating higher priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="repeatDays")
    def repeat_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The repeat days of the control policy. When the value of repeat_type is one of `Weekly`, `Monthly`, this field is required.
        When the repeat_type is `Weekly`, the valid value range is 0~6.
        When the repeat_type is `Monthly`, the valid value range is 1~31.
        """
        return pulumi.get(self, "repeat_days")

    @repeat_days.setter
    def repeat_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "repeat_days", value)

    @property
    @pulumi.getter(name="repeatEndTime")
    def repeat_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        The repeat end time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
        When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "repeat_end_time")

    @repeat_end_time.setter
    def repeat_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_end_time", value)

    @property
    @pulumi.getter(name="repeatStartTime")
    def repeat_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The repeat start time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
        When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "repeat_start_time")

    @repeat_start_time.setter
    def repeat_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_start_time", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        """
        The repeat type of the control policy. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
        """
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        """
        The start time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
        When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the control policy. Default is false.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _CfwControlPolicyState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_port: Optional[pulumi.Input[str]] = None,
                 dest_port_type: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 effect_status: Optional[pulumi.Input[int]] = None,
                 end_time: Optional[pulumi.Input[int]] = None,
                 hit_cnt: Optional[pulumi.Input[int]] = None,
                 is_effected: Optional[pulumi.Input[bool]] = None,
                 prio: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proto: Optional[pulumi.Input[str]] = None,
                 repeat_days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 repeat_end_time: Optional[pulumi.Input[str]] = None,
                 repeat_start_time: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 update_time: Optional[pulumi.Input[int]] = None,
                 use_count: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering CfwControlPolicy resources.
        :param pulumi.Input[str] account_id: The account id of the control policy.
        :param pulumi.Input[str] action: The action of the control policy. Valid values: `accept`, `deny`, `monitor`.
        :param pulumi.Input[str] description: The description of the control policy.
        :param pulumi.Input[str] dest_port: The dest port of the control policy.
        :param pulumi.Input[str] dest_port_type: The dest port type of the control policy. Valid values: `port`, `group`.
        :param pulumi.Input[str] destination: The destination of the control policy.
        :param pulumi.Input[str] destination_type: The destination type of the control policy. Valid values: `net`, `group`, `location`, `domain`.
        :param pulumi.Input[str] direction: The direction of the control policy. Valid values: `in`, `out`.
        :param pulumi.Input[int] effect_status: The effect status of the control policy. 1: Not yet effective, 2: Issued in progress, 3: Effective.
        :param pulumi.Input[int] end_time: The end time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
               When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[int] hit_cnt: The hit count of the control policy.
        :param pulumi.Input[bool] is_effected: Whether the control policy is effected.
        :param pulumi.Input[int] prio: The priority of the control policy.
        :param pulumi.Input[int] priority: The priority of the control policy. Default is 0. This field is only effective when creating a control policy.0 means lowest priority, 1 means highest priority. The priority increases in order from 1, with lower priority indicating higher priority.
        :param pulumi.Input[str] proto: The proto of the control policy. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destination_type is `domain`, The proto must be `TCP`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] repeat_days: The repeat days of the control policy. When the value of repeat_type is one of `Weekly`, `Monthly`, this field is required.
               When the repeat_type is `Weekly`, the valid value range is 0~6.
               When the repeat_type is `Monthly`, the valid value range is 1~31.
        :param pulumi.Input[str] repeat_end_time: The repeat end time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
               When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[str] repeat_start_time: The repeat start time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
               When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[str] repeat_type: The repeat type of the control policy. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
        :param pulumi.Input[str] rule_id: The rule id of the control policy.
        :param pulumi.Input[str] source: The source of the control policy.
        :param pulumi.Input[str] source_type: The source type of the control policy. Valid values: `net`, `group`, `location`.
        :param pulumi.Input[int] start_time: The start time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
               When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[bool] status: Whether to enable the control policy. Default is false.
        :param pulumi.Input[int] update_time: The update time of the control policy.
        :param pulumi.Input[int] use_count: The use count of the control policy.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_port is not None:
            pulumi.set(__self__, "dest_port", dest_port)
        if dest_port_type is not None:
            pulumi.set(__self__, "dest_port_type", dest_port_type)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if effect_status is not None:
            pulumi.set(__self__, "effect_status", effect_status)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if hit_cnt is not None:
            pulumi.set(__self__, "hit_cnt", hit_cnt)
        if is_effected is not None:
            pulumi.set(__self__, "is_effected", is_effected)
        if prio is not None:
            pulumi.set(__self__, "prio", prio)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if repeat_days is not None:
            pulumi.set(__self__, "repeat_days", repeat_days)
        if repeat_end_time is not None:
            pulumi.set(__self__, "repeat_end_time", repeat_end_time)
        if repeat_start_time is not None:
            pulumi.set(__self__, "repeat_start_time", repeat_start_time)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if use_count is not None:
            pulumi.set(__self__, "use_count", use_count)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account id of the control policy.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The action of the control policy. Valid values: `accept`, `deny`, `monitor`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the control policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destPort")
    def dest_port(self) -> Optional[pulumi.Input[str]]:
        """
        The dest port of the control policy.
        """
        return pulumi.get(self, "dest_port")

    @dest_port.setter
    def dest_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_port", value)

    @property
    @pulumi.getter(name="destPortType")
    def dest_port_type(self) -> Optional[pulumi.Input[str]]:
        """
        The dest port type of the control policy. Valid values: `port`, `group`.
        """
        return pulumi.get(self, "dest_port_type")

    @dest_port_type.setter
    def dest_port_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_port_type", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        """
        The destination of the control policy.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        """
        The destination type of the control policy. Valid values: `net`, `group`, `location`, `domain`.
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        The direction of the control policy. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="effectStatus")
    def effect_status(self) -> Optional[pulumi.Input[int]]:
        """
        The effect status of the control policy. 1: Not yet effective, 2: Issued in progress, 3: Effective.
        """
        return pulumi.get(self, "effect_status")

    @effect_status.setter
    def effect_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "effect_status", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[int]]:
        """
        The end time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
        When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="hitCnt")
    def hit_cnt(self) -> Optional[pulumi.Input[int]]:
        """
        The hit count of the control policy.
        """
        return pulumi.get(self, "hit_cnt")

    @hit_cnt.setter
    def hit_cnt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hit_cnt", value)

    @property
    @pulumi.getter(name="isEffected")
    def is_effected(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the control policy is effected.
        """
        return pulumi.get(self, "is_effected")

    @is_effected.setter
    def is_effected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_effected", value)

    @property
    @pulumi.getter
    def prio(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the control policy.
        """
        return pulumi.get(self, "prio")

    @prio.setter
    def prio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prio", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the control policy. Default is 0. This field is only effective when creating a control policy.0 means lowest priority, 1 means highest priority. The priority increases in order from 1, with lower priority indicating higher priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def proto(self) -> Optional[pulumi.Input[str]]:
        """
        The proto of the control policy. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destination_type is `domain`, The proto must be `TCP`.
        """
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter(name="repeatDays")
    def repeat_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The repeat days of the control policy. When the value of repeat_type is one of `Weekly`, `Monthly`, this field is required.
        When the repeat_type is `Weekly`, the valid value range is 0~6.
        When the repeat_type is `Monthly`, the valid value range is 1~31.
        """
        return pulumi.get(self, "repeat_days")

    @repeat_days.setter
    def repeat_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "repeat_days", value)

    @property
    @pulumi.getter(name="repeatEndTime")
    def repeat_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        The repeat end time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
        When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "repeat_end_time")

    @repeat_end_time.setter
    def repeat_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_end_time", value)

    @property
    @pulumi.getter(name="repeatStartTime")
    def repeat_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The repeat start time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
        When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "repeat_start_time")

    @repeat_start_time.setter
    def repeat_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_start_time", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        """
        The repeat type of the control policy. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
        """
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        The rule id of the control policy.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        The source of the control policy.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        The source type of the control policy. Valid values: `net`, `group`, `location`.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        """
        The start time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
        When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the control policy. Default is false.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[int]]:
        """
        The update time of the control policy.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="useCount")
    def use_count(self) -> Optional[pulumi.Input[int]]:
        """
        The use count of the control policy.
        """
        return pulumi.get(self, "use_count")

    @use_count.setter
    def use_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "use_count", value)


class CfwControlPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_port: Optional[pulumi.Input[str]] = None,
                 dest_port_type: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proto: Optional[pulumi.Input[str]] = None,
                 repeat_days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 repeat_end_time: Optional[pulumi.Input[str]] = None,
                 repeat_start_time: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to manage cfw control policy
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_cfw_address_book = volcengine.cloud_firewall.CfwAddressBook("fooCfwAddressBook",
            group_name="acc-test-address-book",
            description="acc-test",
            group_type="ip",
            address_lists=[
                "192.168.1.1",
                "192.168.2.2",
            ])
        foo_cfw_control_policy = volcengine.cloud_firewall.CfwControlPolicy("fooCfwControlPolicy",
            direction="in",
            action="accept",
            destination_type="group",
            destination=foo_cfw_address_book.id,
            proto="TCP",
            source_type="net",
            source="0.0.0.0/0",
            description="acc-test-control-policy",
            dest_port_type="port",
            dest_port="300",
            repeat_type="Weekly",
            repeat_start_time="01:00",
            repeat_end_time="11:00",
            repeat_days=[
                2,
                5,
            ],
            start_time=1736092800,
            end_time=1738339140,
            priority=1,
            status=True)
        ```

        ## Import

        ControlPolicy can be imported using the direction:rule_id, e.g.

        ```sh
        $ pulumi import volcengine:cloud_firewall/cfwControlPolicy:CfwControlPolicy default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: The action of the control policy. Valid values: `accept`, `deny`, `monitor`.
        :param pulumi.Input[str] description: The description of the control policy.
        :param pulumi.Input[str] dest_port: The dest port of the control policy.
        :param pulumi.Input[str] dest_port_type: The dest port type of the control policy. Valid values: `port`, `group`.
        :param pulumi.Input[str] destination: The destination of the control policy.
        :param pulumi.Input[str] destination_type: The destination type of the control policy. Valid values: `net`, `group`, `location`, `domain`.
        :param pulumi.Input[str] direction: The direction of the control policy. Valid values: `in`, `out`.
        :param pulumi.Input[int] end_time: The end time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
               When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[int] priority: The priority of the control policy. Default is 0. This field is only effective when creating a control policy.0 means lowest priority, 1 means highest priority. The priority increases in order from 1, with lower priority indicating higher priority.
        :param pulumi.Input[str] proto: The proto of the control policy. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destination_type is `domain`, The proto must be `TCP`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] repeat_days: The repeat days of the control policy. When the value of repeat_type is one of `Weekly`, `Monthly`, this field is required.
               When the repeat_type is `Weekly`, the valid value range is 0~6.
               When the repeat_type is `Monthly`, the valid value range is 1~31.
        :param pulumi.Input[str] repeat_end_time: The repeat end time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
               When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[str] repeat_start_time: The repeat start time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
               When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[str] repeat_type: The repeat type of the control policy. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
        :param pulumi.Input[str] source: The source of the control policy.
        :param pulumi.Input[str] source_type: The source type of the control policy. Valid values: `net`, `group`, `location`.
        :param pulumi.Input[int] start_time: The start time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
               When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[bool] status: Whether to enable the control policy. Default is false.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CfwControlPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cfw control policy
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo_cfw_address_book = volcengine.cloud_firewall.CfwAddressBook("fooCfwAddressBook",
            group_name="acc-test-address-book",
            description="acc-test",
            group_type="ip",
            address_lists=[
                "192.168.1.1",
                "192.168.2.2",
            ])
        foo_cfw_control_policy = volcengine.cloud_firewall.CfwControlPolicy("fooCfwControlPolicy",
            direction="in",
            action="accept",
            destination_type="group",
            destination=foo_cfw_address_book.id,
            proto="TCP",
            source_type="net",
            source="0.0.0.0/0",
            description="acc-test-control-policy",
            dest_port_type="port",
            dest_port="300",
            repeat_type="Weekly",
            repeat_start_time="01:00",
            repeat_end_time="11:00",
            repeat_days=[
                2,
                5,
            ],
            start_time=1736092800,
            end_time=1738339140,
            priority=1,
            status=True)
        ```

        ## Import

        ControlPolicy can be imported using the direction:rule_id, e.g.

        ```sh
        $ pulumi import volcengine:cloud_firewall/cfwControlPolicy:CfwControlPolicy default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param CfwControlPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CfwControlPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_port: Optional[pulumi.Input[str]] = None,
                 dest_port_type: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proto: Optional[pulumi.Input[str]] = None,
                 repeat_days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 repeat_end_time: Optional[pulumi.Input[str]] = None,
                 repeat_start_time: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CfwControlPolicyArgs.__new__(CfwControlPolicyArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["description"] = description
            __props__.__dict__["dest_port"] = dest_port
            __props__.__dict__["dest_port_type"] = dest_port_type
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            if destination_type is None and not opts.urn:
                raise TypeError("Missing required property 'destination_type'")
            __props__.__dict__["destination_type"] = destination_type
            if direction is None and not opts.urn:
                raise TypeError("Missing required property 'direction'")
            __props__.__dict__["direction"] = direction
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["priority"] = priority
            if proto is None and not opts.urn:
                raise TypeError("Missing required property 'proto'")
            __props__.__dict__["proto"] = proto
            __props__.__dict__["repeat_days"] = repeat_days
            __props__.__dict__["repeat_end_time"] = repeat_end_time
            __props__.__dict__["repeat_start_time"] = repeat_start_time
            __props__.__dict__["repeat_type"] = repeat_type
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["status"] = status
            __props__.__dict__["account_id"] = None
            __props__.__dict__["effect_status"] = None
            __props__.__dict__["hit_cnt"] = None
            __props__.__dict__["is_effected"] = None
            __props__.__dict__["prio"] = None
            __props__.__dict__["rule_id"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["use_count"] = None
        super(CfwControlPolicy, __self__).__init__(
            'volcengine:cloud_firewall/cfwControlPolicy:CfwControlPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            action: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dest_port: Optional[pulumi.Input[str]] = None,
            dest_port_type: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[str]] = None,
            destination_type: Optional[pulumi.Input[str]] = None,
            direction: Optional[pulumi.Input[str]] = None,
            effect_status: Optional[pulumi.Input[int]] = None,
            end_time: Optional[pulumi.Input[int]] = None,
            hit_cnt: Optional[pulumi.Input[int]] = None,
            is_effected: Optional[pulumi.Input[bool]] = None,
            prio: Optional[pulumi.Input[int]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            proto: Optional[pulumi.Input[str]] = None,
            repeat_days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            repeat_end_time: Optional[pulumi.Input[str]] = None,
            repeat_start_time: Optional[pulumi.Input[str]] = None,
            repeat_type: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[str]] = None,
            source_type: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[bool]] = None,
            update_time: Optional[pulumi.Input[int]] = None,
            use_count: Optional[pulumi.Input[int]] = None) -> 'CfwControlPolicy':
        """
        Get an existing CfwControlPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The account id of the control policy.
        :param pulumi.Input[str] action: The action of the control policy. Valid values: `accept`, `deny`, `monitor`.
        :param pulumi.Input[str] description: The description of the control policy.
        :param pulumi.Input[str] dest_port: The dest port of the control policy.
        :param pulumi.Input[str] dest_port_type: The dest port type of the control policy. Valid values: `port`, `group`.
        :param pulumi.Input[str] destination: The destination of the control policy.
        :param pulumi.Input[str] destination_type: The destination type of the control policy. Valid values: `net`, `group`, `location`, `domain`.
        :param pulumi.Input[str] direction: The direction of the control policy. Valid values: `in`, `out`.
        :param pulumi.Input[int] effect_status: The effect status of the control policy. 1: Not yet effective, 2: Issued in progress, 3: Effective.
        :param pulumi.Input[int] end_time: The end time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
               When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[int] hit_cnt: The hit count of the control policy.
        :param pulumi.Input[bool] is_effected: Whether the control policy is effected.
        :param pulumi.Input[int] prio: The priority of the control policy.
        :param pulumi.Input[int] priority: The priority of the control policy. Default is 0. This field is only effective when creating a control policy.0 means lowest priority, 1 means highest priority. The priority increases in order from 1, with lower priority indicating higher priority.
        :param pulumi.Input[str] proto: The proto of the control policy. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destination_type is `domain`, The proto must be `TCP`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] repeat_days: The repeat days of the control policy. When the value of repeat_type is one of `Weekly`, `Monthly`, this field is required.
               When the repeat_type is `Weekly`, the valid value range is 0~6.
               When the repeat_type is `Monthly`, the valid value range is 1~31.
        :param pulumi.Input[str] repeat_end_time: The repeat end time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
               When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[str] repeat_start_time: The repeat start time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
               When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[str] repeat_type: The repeat type of the control policy. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
        :param pulumi.Input[str] rule_id: The rule id of the control policy.
        :param pulumi.Input[str] source: The source of the control policy.
        :param pulumi.Input[str] source_type: The source type of the control policy. Valid values: `net`, `group`, `location`.
        :param pulumi.Input[int] start_time: The start time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
               When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        :param pulumi.Input[bool] status: Whether to enable the control policy. Default is false.
        :param pulumi.Input[int] update_time: The update time of the control policy.
        :param pulumi.Input[int] use_count: The use count of the control policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CfwControlPolicyState.__new__(_CfwControlPolicyState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["action"] = action
        __props__.__dict__["description"] = description
        __props__.__dict__["dest_port"] = dest_port
        __props__.__dict__["dest_port_type"] = dest_port_type
        __props__.__dict__["destination"] = destination
        __props__.__dict__["destination_type"] = destination_type
        __props__.__dict__["direction"] = direction
        __props__.__dict__["effect_status"] = effect_status
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["hit_cnt"] = hit_cnt
        __props__.__dict__["is_effected"] = is_effected
        __props__.__dict__["prio"] = prio
        __props__.__dict__["priority"] = priority
        __props__.__dict__["proto"] = proto
        __props__.__dict__["repeat_days"] = repeat_days
        __props__.__dict__["repeat_end_time"] = repeat_end_time
        __props__.__dict__["repeat_start_time"] = repeat_start_time
        __props__.__dict__["repeat_type"] = repeat_type
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["source"] = source
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["use_count"] = use_count
        return CfwControlPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The account id of the control policy.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        The action of the control policy. Valid values: `accept`, `deny`, `monitor`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the control policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destPort")
    def dest_port(self) -> pulumi.Output[str]:
        """
        The dest port of the control policy.
        """
        return pulumi.get(self, "dest_port")

    @property
    @pulumi.getter(name="destPortType")
    def dest_port_type(self) -> pulumi.Output[str]:
        """
        The dest port type of the control policy. Valid values: `port`, `group`.
        """
        return pulumi.get(self, "dest_port_type")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[str]:
        """
        The destination of the control policy.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Output[str]:
        """
        The destination type of the control policy. Valid values: `net`, `group`, `location`, `domain`.
        """
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Output[str]:
        """
        The direction of the control policy. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="effectStatus")
    def effect_status(self) -> pulumi.Output[int]:
        """
        The effect status of the control policy. 1: Not yet effective, 2: Issued in progress, 3: Effective.
        """
        return pulumi.get(self, "effect_status")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[Optional[int]]:
        """
        The end time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
        When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="hitCnt")
    def hit_cnt(self) -> pulumi.Output[int]:
        """
        The hit count of the control policy.
        """
        return pulumi.get(self, "hit_cnt")

    @property
    @pulumi.getter(name="isEffected")
    def is_effected(self) -> pulumi.Output[bool]:
        """
        Whether the control policy is effected.
        """
        return pulumi.get(self, "is_effected")

    @property
    @pulumi.getter
    def prio(self) -> pulumi.Output[int]:
        """
        The priority of the control policy.
        """
        return pulumi.get(self, "prio")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[int]]:
        """
        The priority of the control policy. Default is 0. This field is only effective when creating a control policy.0 means lowest priority, 1 means highest priority. The priority increases in order from 1, with lower priority indicating higher priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def proto(self) -> pulumi.Output[str]:
        """
        The proto of the control policy. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destination_type is `domain`, The proto must be `TCP`.
        """
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter(name="repeatDays")
    def repeat_days(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        The repeat days of the control policy. When the value of repeat_type is one of `Weekly`, `Monthly`, this field is required.
        When the repeat_type is `Weekly`, the valid value range is 0~6.
        When the repeat_type is `Monthly`, the valid value range is 1~31.
        """
        return pulumi.get(self, "repeat_days")

    @property
    @pulumi.getter(name="repeatEndTime")
    def repeat_end_time(self) -> pulumi.Output[Optional[str]]:
        """
        The repeat end time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
        When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "repeat_end_time")

    @property
    @pulumi.getter(name="repeatStartTime")
    def repeat_start_time(self) -> pulumi.Output[Optional[str]]:
        """
        The repeat start time of the control policy. Accurate to the minute, in the format of hh: mm. For example: 12:00.
        When the value of repeat_type is one of `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "repeat_start_time")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> pulumi.Output[str]:
        """
        The repeat type of the control policy. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        The rule id of the control policy.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        The source of the control policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[str]:
        """
        The source type of the control policy. Valid values: `net`, `group`, `location`.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[int]]:
        """
        The start time of the control policy. Unix timestamp, fields need to be precise to 23:59:00 of the set date.
        When the value of repeat_type is one of `Once`, `Daily`, `Weekly`, `Monthly`, this field is required.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[bool]:
        """
        Whether to enable the control policy. Default is false.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[int]:
        """
        The update time of the control policy.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="useCount")
    def use_count(self) -> pulumi.Output[int]:
        """
        The use count of the control policy.
        """
        return pulumi.get(self, "use_count")

