# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCfwDnsControlPoliciesResult',
    'AwaitableGetCfwDnsControlPoliciesResult',
    'get_cfw_dns_control_policies',
    'get_cfw_dns_control_policies_output',
]

@pulumi.output_type
class GetCfwDnsControlPoliciesResult:
    """
    A collection of values returned by getCfwDnsControlPolicies.
    """
    def __init__(__self__, description=None, destinations=None, dns_control_policies=None, id=None, ids=None, internet_firewall_id=None, output_file=None, sources=None, statuses=None, total_count=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destinations and not isinstance(destinations, list):
            raise TypeError("Expected argument 'destinations' to be a list")
        pulumi.set(__self__, "destinations", destinations)
        if dns_control_policies and not isinstance(dns_control_policies, list):
            raise TypeError("Expected argument 'dns_control_policies' to be a list")
        pulumi.set(__self__, "dns_control_policies", dns_control_policies)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if internet_firewall_id and not isinstance(internet_firewall_id, str):
            raise TypeError("Expected argument 'internet_firewall_id' to be a str")
        pulumi.set(__self__, "internet_firewall_id", internet_firewall_id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the dns control policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence[str]]:
        """
        The destination of the dns control policy.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dnsControlPolicies")
    def dns_control_policies(self) -> Sequence['outputs.GetCfwDnsControlPoliciesDnsControlPolicyResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "dns_control_policies")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="internetFirewallId")
    def internet_firewall_id(self) -> Optional[str]:
        return pulumi.get(self, "internet_firewall_id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence[str]]:
        """
        The source vpc list of the dns control policy.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[bool]]:
        """
        Whether to enable the dns control policy.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetCfwDnsControlPoliciesResult(GetCfwDnsControlPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCfwDnsControlPoliciesResult(
            description=self.description,
            destinations=self.destinations,
            dns_control_policies=self.dns_control_policies,
            id=self.id,
            ids=self.ids,
            internet_firewall_id=self.internet_firewall_id,
            output_file=self.output_file,
            sources=self.sources,
            statuses=self.statuses,
            total_count=self.total_count)


def get_cfw_dns_control_policies(description: Optional[str] = None,
                                 destinations: Optional[Sequence[str]] = None,
                                 ids: Optional[Sequence[str]] = None,
                                 internet_firewall_id: Optional[str] = None,
                                 output_file: Optional[str] = None,
                                 sources: Optional[Sequence[str]] = None,
                                 statuses: Optional[Sequence[bool]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCfwDnsControlPoliciesResult:
    """
    Use this data source to query detailed information of cfw dns control policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_cfw_dns_control_policy = volcengine.cloud_firewall.CfwDnsControlPolicy("fooCfwDnsControlPolicy",
        description="acc-test-dns-control-policy",
        destination_type="domain",
        destination="www.test.com",
        sources=[volcengine.cloud_firewall.CfwDnsControlPolicySourceArgs(
            vpc_id=foo_vpc.id,
            region="cn-beijing",
        )])
    foo_cfw_dns_control_policies = volcengine.cloud_firewall.get_cfw_dns_control_policies_output(ids=[foo_cfw_dns_control_policy.id])
    ```


    :param str description: The description of the dns control policy. This field support fuzzy query.
    :param Sequence[str] destinations: The destination list of the dns control policy. This field support fuzzy query.
    :param Sequence[str] ids: The rule id list of the dns control policy. This field support fuzzy query.
    :param str internet_firewall_id: The internet firewall id of the dns control policy.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] sources: The source list of the dns control policy. This field support fuzzy query.
    :param Sequence[bool] statuses: The enable status list of the dns control policy. This field support fuzzy query.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['destinations'] = destinations
    __args__['ids'] = ids
    __args__['internetFirewallId'] = internet_firewall_id
    __args__['outputFile'] = output_file
    __args__['sources'] = sources
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cloud_firewall/getCfwDnsControlPolicies:getCfwDnsControlPolicies', __args__, opts=opts, typ=GetCfwDnsControlPoliciesResult).value

    return AwaitableGetCfwDnsControlPoliciesResult(
        description=pulumi.get(__ret__, 'description'),
        destinations=pulumi.get(__ret__, 'destinations'),
        dns_control_policies=pulumi.get(__ret__, 'dns_control_policies'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        internet_firewall_id=pulumi.get(__ret__, 'internet_firewall_id'),
        output_file=pulumi.get(__ret__, 'output_file'),
        sources=pulumi.get(__ret__, 'sources'),
        statuses=pulumi.get(__ret__, 'statuses'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(get_cfw_dns_control_policies)
def get_cfw_dns_control_policies_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                                        destinations: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                        ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                        internet_firewall_id: Optional[pulumi.Input[Optional[str]]] = None,
                                        output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                        sources: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                        statuses: Optional[pulumi.Input[Optional[Sequence[bool]]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCfwDnsControlPoliciesResult]:
    """
    Use this data source to query detailed information of cfw dns control policies
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo_vpc = volcengine.vpc.Vpc("fooVpc",
        vpc_name="acc-test-vpc",
        cidr_block="172.16.0.0/16")
    foo_cfw_dns_control_policy = volcengine.cloud_firewall.CfwDnsControlPolicy("fooCfwDnsControlPolicy",
        description="acc-test-dns-control-policy",
        destination_type="domain",
        destination="www.test.com",
        sources=[volcengine.cloud_firewall.CfwDnsControlPolicySourceArgs(
            vpc_id=foo_vpc.id,
            region="cn-beijing",
        )])
    foo_cfw_dns_control_policies = volcengine.cloud_firewall.get_cfw_dns_control_policies_output(ids=[foo_cfw_dns_control_policy.id])
    ```


    :param str description: The description of the dns control policy. This field support fuzzy query.
    :param Sequence[str] destinations: The destination list of the dns control policy. This field support fuzzy query.
    :param Sequence[str] ids: The rule id list of the dns control policy. This field support fuzzy query.
    :param str internet_firewall_id: The internet firewall id of the dns control policy.
    :param str output_file: File name where to save data source results.
    :param Sequence[str] sources: The source list of the dns control policy. This field support fuzzy query.
    :param Sequence[bool] statuses: The enable status list of the dns control policy. This field support fuzzy query.
    """
    ...
