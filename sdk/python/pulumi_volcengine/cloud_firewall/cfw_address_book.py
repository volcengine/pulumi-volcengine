# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CfwAddressBookArgs', 'CfwAddressBook']

@pulumi.input_type
class CfwAddressBookArgs:
    def __init__(__self__, *,
                 address_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 group_name: pulumi.Input[str],
                 group_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CfwAddressBook resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_lists: The address list of the address book.
               When group_type is `ip`, fill in IPv4/CIDRV4 addresses in the address list.
               When group_type is `port`, fill in the port information in the address list, supporting two formats: 22 and 100/200.
               When group_type is `domain`, fill in the domain name information in the address list.
        :param pulumi.Input[str] group_name: The name of the address book.
        :param pulumi.Input[str] group_type: The type of the address book. Valid values: `ip`, `port`, `domain`.
        :param pulumi.Input[str] description: The description of the address book.
        """
        pulumi.set(__self__, "address_lists", address_lists)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "group_type", group_type)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The address list of the address book.
        When group_type is `ip`, fill in IPv4/CIDRV4 addresses in the address list.
        When group_type is `port`, fill in the port information in the address list, supporting two formats: 22 and 100/200.
        When group_type is `domain`, fill in the domain name information in the address list.
        """
        return pulumi.get(self, "address_lists")

    @address_lists.setter
    def address_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "address_lists", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        The name of the address book.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Input[str]:
        """
        The type of the address book. Valid values: `ip`, `port`, `domain`.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the address book.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _CfwAddressBookState:
    def __init__(__self__, *,
                 address_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 ref_cnt: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering CfwAddressBook resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_lists: The address list of the address book.
               When group_type is `ip`, fill in IPv4/CIDRV4 addresses in the address list.
               When group_type is `port`, fill in the port information in the address list, supporting two formats: 22 and 100/200.
               When group_type is `domain`, fill in the domain name information in the address list.
        :param pulumi.Input[str] description: The description of the address book.
        :param pulumi.Input[str] group_name: The name of the address book.
        :param pulumi.Input[str] group_type: The type of the address book. Valid values: `ip`, `port`, `domain`.
        :param pulumi.Input[int] ref_cnt: The reference count of the address book.
        """
        if address_lists is not None:
            pulumi.set(__self__, "address_lists", address_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if ref_cnt is not None:
            pulumi.set(__self__, "ref_cnt", ref_cnt)

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The address list of the address book.
        When group_type is `ip`, fill in IPv4/CIDRV4 addresses in the address list.
        When group_type is `port`, fill in the port information in the address list, supporting two formats: 22 and 100/200.
        When group_type is `domain`, fill in the domain name information in the address list.
        """
        return pulumi.get(self, "address_lists")

    @address_lists.setter
    def address_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "address_lists", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the address book.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the address book.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the address book. Valid values: `ip`, `port`, `domain`.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="refCnt")
    def ref_cnt(self) -> Optional[pulumi.Input[int]]:
        """
        The reference count of the address book.
        """
        return pulumi.get(self, "ref_cnt")

    @ref_cnt.setter
    def ref_cnt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ref_cnt", value)


class CfwAddressBook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage cfw address book
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cloud_firewall.CfwAddressBook("foo",
            address_lists=[
                "192.168.1.1",
                "192.168.2.2",
            ],
            description="acc-test",
            group_name="acc-test-address-book",
            group_type="ip")
        ```

        ## Import

        AddressBook can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:cloud_firewall/cfwAddressBook:CfwAddressBook default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_lists: The address list of the address book.
               When group_type is `ip`, fill in IPv4/CIDRV4 addresses in the address list.
               When group_type is `port`, fill in the port information in the address list, supporting two formats: 22 and 100/200.
               When group_type is `domain`, fill in the domain name information in the address list.
        :param pulumi.Input[str] description: The description of the address book.
        :param pulumi.Input[str] group_name: The name of the address book.
        :param pulumi.Input[str] group_type: The type of the address book. Valid values: `ip`, `port`, `domain`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CfwAddressBookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage cfw address book
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.cloud_firewall.CfwAddressBook("foo",
            address_lists=[
                "192.168.1.1",
                "192.168.2.2",
            ],
            description="acc-test",
            group_name="acc-test-address-book",
            group_type="ip")
        ```

        ## Import

        AddressBook can be imported using the id, e.g.

        ```sh
        $ pulumi import volcengine:cloud_firewall/cfwAddressBook:CfwAddressBook default resource_id
        ```

        :param str resource_name: The name of the resource.
        :param CfwAddressBookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CfwAddressBookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CfwAddressBookArgs.__new__(CfwAddressBookArgs)

            if address_lists is None and not opts.urn:
                raise TypeError("Missing required property 'address_lists'")
            __props__.__dict__["address_lists"] = address_lists
            __props__.__dict__["description"] = description
            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            if group_type is None and not opts.urn:
                raise TypeError("Missing required property 'group_type'")
            __props__.__dict__["group_type"] = group_type
            __props__.__dict__["ref_cnt"] = None
        super(CfwAddressBook, __self__).__init__(
            'volcengine:cloud_firewall/cfwAddressBook:CfwAddressBook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            group_type: Optional[pulumi.Input[str]] = None,
            ref_cnt: Optional[pulumi.Input[int]] = None) -> 'CfwAddressBook':
        """
        Get an existing CfwAddressBook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_lists: The address list of the address book.
               When group_type is `ip`, fill in IPv4/CIDRV4 addresses in the address list.
               When group_type is `port`, fill in the port information in the address list, supporting two formats: 22 and 100/200.
               When group_type is `domain`, fill in the domain name information in the address list.
        :param pulumi.Input[str] description: The description of the address book.
        :param pulumi.Input[str] group_name: The name of the address book.
        :param pulumi.Input[str] group_type: The type of the address book. Valid values: `ip`, `port`, `domain`.
        :param pulumi.Input[int] ref_cnt: The reference count of the address book.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CfwAddressBookState.__new__(_CfwAddressBookState)

        __props__.__dict__["address_lists"] = address_lists
        __props__.__dict__["description"] = description
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["group_type"] = group_type
        __props__.__dict__["ref_cnt"] = ref_cnt
        return CfwAddressBook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        The address list of the address book.
        When group_type is `ip`, fill in IPv4/CIDRV4 addresses in the address list.
        When group_type is `port`, fill in the port information in the address list, supporting two formats: 22 and 100/200.
        When group_type is `domain`, fill in the domain name information in the address list.
        """
        return pulumi.get(self, "address_lists")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the address book.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        The name of the address book.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Output[str]:
        """
        The type of the address book. Valid values: `ip`, `port`, `domain`.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter(name="refCnt")
    def ref_cnt(self) -> pulumi.Output[int]:
        """
        The reference count of the address book.
        """
        return pulumi.get(self, "ref_cnt")

