# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CfwAddressBooksResult',
    'AwaitableCfwAddressBooksResult',
    'cfw_address_books',
    'cfw_address_books_output',
]

@pulumi.output_type
class CfwAddressBooksResult:
    """
    A collection of values returned by CfwAddressBooks.
    """
    def __init__(__self__, address=None, address_books=None, description=None, group_name=None, group_type=None, id=None, name_regex=None, output_file=None, total_count=None):
        if address and not isinstance(address, str):
            raise TypeError("Expected argument 'address' to be a str")
        pulumi.set(__self__, "address", address)
        if address_books and not isinstance(address_books, list):
            raise TypeError("Expected argument 'address_books' to be a list")
        pulumi.set(__self__, "address_books", address_books)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if group_type and not isinstance(group_type, str):
            raise TypeError("Expected argument 'group_type' to be a str")
        pulumi.set(__self__, "group_type", group_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="addressBooks")
    def address_books(self) -> Sequence['outputs.CfwAddressBooksAddressBookResult']:
        """
        The collection of query.
        """
        return pulumi.get(self, "address_books")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the address book.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        The name of the address book.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[str]:
        """
        The type of the address book.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of query.
        """
        return pulumi.get(self, "total_count")


class AwaitableCfwAddressBooksResult(CfwAddressBooksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return CfwAddressBooksResult(
            address=self.address,
            address_books=self.address_books,
            description=self.description,
            group_name=self.group_name,
            group_type=self.group_type,
            id=self.id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count)


def cfw_address_books(address: Optional[str] = None,
                      description: Optional[str] = None,
                      group_name: Optional[str] = None,
                      group_type: Optional[str] = None,
                      name_regex: Optional[str] = None,
                      output_file: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableCfwAddressBooksResult:
    """
    Use this data source to query detailed information of cfw address books
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cloud_firewall.cfw_address_books(group_name="acc-test",
        group_type="ip")
    ```


    :param str address: The group type of address book. This field support fuzzy query.
    :param str description: The group type of address book. This field support fuzzy query.
    :param str group_name: The group name of address book. This field support fuzzy query.
    :param str group_type: The group type of address book. Valid values: `ip`, `port`, `domain`.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['address'] = address
    __args__['description'] = description
    __args__['groupName'] = group_name
    __args__['groupType'] = group_type
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cloud_firewall/cfwAddressBooks:CfwAddressBooks', __args__, opts=opts, typ=CfwAddressBooksResult).value

    return AwaitableCfwAddressBooksResult(
        address=pulumi.get(__ret__, 'address'),
        address_books=pulumi.get(__ret__, 'address_books'),
        description=pulumi.get(__ret__, 'description'),
        group_name=pulumi.get(__ret__, 'group_name'),
        group_type=pulumi.get(__ret__, 'group_type'),
        id=pulumi.get(__ret__, 'id'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(cfw_address_books)
def cfw_address_books_output(address: Optional[pulumi.Input[Optional[str]]] = None,
                             description: Optional[pulumi.Input[Optional[str]]] = None,
                             group_name: Optional[pulumi.Input[Optional[str]]] = None,
                             group_type: Optional[pulumi.Input[Optional[str]]] = None,
                             name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                             output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[CfwAddressBooksResult]:
    """
    Use this data source to query detailed information of cfw address books
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cloud_firewall.cfw_address_books(group_name="acc-test",
        group_type="ip")
    ```


    :param str address: The group type of address book. This field support fuzzy query.
    :param str description: The group type of address book. This field support fuzzy query.
    :param str group_name: The group name of address book. This field support fuzzy query.
    :param str group_type: The group type of address book. Valid values: `ip`, `port`, `domain`.
    :param str name_regex: A Name Regex of Resource.
    :param str output_file: File name where to save data source results.
    """
    ...
