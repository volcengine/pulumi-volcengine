# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRegistriesResult',
    'AwaitableGetRegistriesResult',
    'get_registries',
    'get_registries_output',
]

@pulumi.output_type
class GetRegistriesResult:
    """
    A collection of values returned by getRegistries.
    """
    def __init__(__self__, id=None, names=None, output_file=None, registries=None, resource_tags=None, statuses=None, total_count=None, types=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if registries and not isinstance(registries, list):
            raise TypeError("Expected argument 'registries' to be a list")
        pulumi.set(__self__, "registries", registries)
        if resource_tags and not isinstance(resource_tags, list):
            raise TypeError("Expected argument 'resource_tags' to be a list")
        pulumi.set(__self__, "resource_tags", resource_tags)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)
        if types and not isinstance(types, list):
            raise TypeError("Expected argument 'types' to be a list")
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def registries(self) -> Sequence['outputs.GetRegistriesRegistryResult']:
        """
        The collection of registry query.
        """
        return pulumi.get(self, "registries")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[Sequence['outputs.GetRegistriesResourceTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence['outputs.GetRegistriesStatusResult']]:
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of registry query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter
    def types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "types")


class AwaitableGetRegistriesResult(GetRegistriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistriesResult(
            id=self.id,
            names=self.names,
            output_file=self.output_file,
            registries=self.registries,
            resource_tags=self.resource_tags,
            statuses=self.statuses,
            total_count=self.total_count,
            types=self.types)


def get_registries(names: Optional[Sequence[str]] = None,
                   output_file: Optional[str] = None,
                   resource_tags: Optional[Sequence[pulumi.InputType['GetRegistriesResourceTagArgs']]] = None,
                   statuses: Optional[Sequence[pulumi.InputType['GetRegistriesStatusArgs']]] = None,
                   types: Optional[Sequence[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistriesResult:
    """
    Use this data source to query detailed information of cr registries
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cr.get_registries(statuses=[volcengine.cr.GetRegistriesStatusArgs(
        condition="Ok",
        phase="Running",
    )])
    ```


    :param Sequence[str] names: The list of registry names to query.
    :param str output_file: File name where to save data source results.
    :param Sequence[pulumi.InputType['GetRegistriesResourceTagArgs']] resource_tags: The tags of cr registry.
    :param Sequence[pulumi.InputType['GetRegistriesStatusArgs']] statuses: The list of registry statuses.
    :param Sequence[str] types: The list of registry types to query.
    """
    __args__ = dict()
    __args__['names'] = names
    __args__['outputFile'] = output_file
    __args__['resourceTags'] = resource_tags
    __args__['statuses'] = statuses
    __args__['types'] = types
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:cr/getRegistries:getRegistries', __args__, opts=opts, typ=GetRegistriesResult).value

    return AwaitableGetRegistriesResult(
        id=pulumi.get(__ret__, 'id'),
        names=pulumi.get(__ret__, 'names'),
        output_file=pulumi.get(__ret__, 'output_file'),
        registries=pulumi.get(__ret__, 'registries'),
        resource_tags=pulumi.get(__ret__, 'resource_tags'),
        statuses=pulumi.get(__ret__, 'statuses'),
        total_count=pulumi.get(__ret__, 'total_count'),
        types=pulumi.get(__ret__, 'types'))


@_utilities.lift_output_func(get_registries)
def get_registries_output(names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          resource_tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetRegistriesResourceTagArgs']]]]] = None,
                          statuses: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetRegistriesStatusArgs']]]]] = None,
                          types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegistriesResult]:
    """
    Use this data source to query detailed information of cr registries
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    foo = volcengine.cr.get_registries(statuses=[volcengine.cr.GetRegistriesStatusArgs(
        condition="Ok",
        phase="Running",
    )])
    ```


    :param Sequence[str] names: The list of registry names to query.
    :param str output_file: File name where to save data source results.
    :param Sequence[pulumi.InputType['GetRegistriesResourceTagArgs']] resource_tags: The tags of cr registry.
    :param Sequence[pulumi.InputType['GetRegistriesStatusArgs']] statuses: The list of registry statuses.
    :param Sequence[str] types: The list of registry types to query.
    """
    ...
