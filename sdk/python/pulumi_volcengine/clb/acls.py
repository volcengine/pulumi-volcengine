# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AclsResult',
    'AwaitableAclsResult',
    'acls',
    'acls_output',
]

@pulumi.output_type
class AclsResult:
    """
    A collection of values returned by Acls.
    """
    def __init__(__self__, acl_name=None, acls=None, id=None, ids=None, name_regex=None, output_file=None, project_name=None, total_count=None):
        if acl_name and not isinstance(acl_name, str):
            raise TypeError("Expected argument 'acl_name' to be a str")
        pulumi.set(__self__, "acl_name", acl_name)
        if acls and not isinstance(acls, list):
            raise TypeError("Expected argument 'acls' to be a list")
        pulumi.set(__self__, "acls", acls)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[str]:
        """
        The Name of Acl.
        """
        return pulumi.get(self, "acl_name")

    @property
    @pulumi.getter
    def acls(self) -> Sequence['outputs.AclsAclResult']:
        """
        The collection of Acl query.
        """
        return pulumi.get(self, "acls")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The ProjectName of Acl.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of Acl query.
        """
        return pulumi.get(self, "total_count")


class AwaitableAclsResult(AclsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return AclsResult(
            acl_name=self.acl_name,
            acls=self.acls,
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_name=self.project_name,
            total_count=self.total_count)


def acls(acl_name: Optional[str] = None,
         ids: Optional[Sequence[str]] = None,
         name_regex: Optional[str] = None,
         output_file: Optional[str] = None,
         project_name: Optional[str] = None,
         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableAclsResult:
    """
    Use this data source to query detailed information of acls
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.clb.acls(ids=["acl-3ti8n0rurx4bwbh9jzdy"])
    ```


    :param str acl_name: The name of acl.
    :param Sequence[str] ids: A list of Acl IDs.
    :param str name_regex: A Name Regex of Acl.
    :param str output_file: File name where to save data source results.
    :param str project_name: The ProjectName of Acl.
    """
    __args__ = dict()
    __args__['aclName'] = acl_name
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcengine:clb/acls:Acls', __args__, opts=opts, typ=AclsResult).value

    return AwaitableAclsResult(
        acl_name=pulumi.get(__ret__, 'acl_name'),
        acls=pulumi.get(__ret__, 'acls'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        output_file=pulumi.get(__ret__, 'output_file'),
        project_name=pulumi.get(__ret__, 'project_name'),
        total_count=pulumi.get(__ret__, 'total_count'))


@_utilities.lift_output_func(acls)
def acls_output(acl_name: Optional[pulumi.Input[Optional[str]]] = None,
                ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                output_file: Optional[pulumi.Input[Optional[str]]] = None,
                project_name: Optional[pulumi.Input[Optional[str]]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[AclsResult]:
    """
    Use this data source to query detailed information of acls
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.clb.acls(ids=["acl-3ti8n0rurx4bwbh9jzdy"])
    ```


    :param str acl_name: The name of acl.
    :param Sequence[str] ids: A list of Acl IDs.
    :param str name_regex: A Name Regex of Acl.
    :param str output_file: File name where to save data source results.
    :param str project_name: The ProjectName of Acl.
    """
    ...
