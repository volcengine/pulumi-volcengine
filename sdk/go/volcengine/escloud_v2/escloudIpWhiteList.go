// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package escloud_v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage escloud ip white list
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/escloud_v2"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName:  pulumi.String("acc-test-subnet"),
//				Description: pulumi.String("tfdesc"),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      pulumi.String(fooZones.Zones[0].Id),
//				VpcId:       fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooEscloudInstanceV2, err := escloud_v2.NewEscloudInstanceV2(ctx, "fooEscloudInstanceV2", &escloud_v2.EscloudInstanceV2Args{
//				InstanceName: pulumi.String("acc-test-escloud-instance"),
//				Version:      pulumi.String("V7_10"),
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//					pulumi.String(fooZones.Zones[1].Id),
//					pulumi.String(fooZones.Zones[2].Id),
//				},
//				SubnetId:           fooSubnet.ID(),
//				EnableHttps:        pulumi.Bool(false),
//				AdminPassword:      pulumi.String("Password@@123"),
//				ChargeType:         pulumi.String("PostPaid"),
//				AutoRenew:          pulumi.Bool(false),
//				Period:             pulumi.Int(1),
//				ConfigurationCode:  pulumi.String("es.standard"),
//				EnablePureMaster:   pulumi.Bool(true),
//				DeletionProtection: pulumi.Bool(false),
//				ProjectName:        pulumi.String("default"),
//				NodeSpecsAssigns: escloud_v2.EscloudInstanceV2NodeSpecsAssignArray{
//					&escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs{
//						Type:             pulumi.String("Master"),
//						Number:           pulumi.Int(3),
//						ResourceSpecName: pulumi.String("es.x2.medium"),
//						StorageSpecName:  pulumi.String("es.volume.essd.pl0"),
//						StorageSize:      pulumi.Int(20),
//					},
//					&escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs{
//						Type:             pulumi.String("Hot"),
//						Number:           pulumi.Int(6),
//						ResourceSpecName: pulumi.String("es.x2.medium"),
//						StorageSpecName:  pulumi.String("es.volume.essd.flexpl-standard"),
//						StorageSize:      pulumi.Int(500),
//						ExtraPerformance: &escloud_v2.EscloudInstanceV2NodeSpecsAssignExtraPerformanceArgs{
//							Throughput: pulumi.Int(65),
//						},
//					},
//					&escloud_v2.EscloudInstanceV2NodeSpecsAssignArgs{
//						Type:             pulumi.String("Kibana"),
//						Number:           pulumi.Int(1),
//						ResourceSpecName: pulumi.String("kibana.x2.small"),
//						StorageSpecName:  pulumi.String(""),
//						StorageSize:      pulumi.Int(0),
//					},
//				},
//				NetworkSpecs: escloud_v2.EscloudInstanceV2NetworkSpecArray{
//					&escloud_v2.EscloudInstanceV2NetworkSpecArgs{
//						Type:      pulumi.String("Elasticsearch"),
//						Bandwidth: pulumi.Int(1),
//						IsOpen:    pulumi.Bool(true),
//						SpecName:  pulumi.String("es.eip.bgp_fixed_bandwidth"),
//					},
//					&escloud_v2.EscloudInstanceV2NetworkSpecArgs{
//						Type:      pulumi.String("Kibana"),
//						Bandwidth: pulumi.Int(1),
//						IsOpen:    pulumi.Bool(true),
//						SpecName:  pulumi.String("es.eip.bgp_fixed_bandwidth"),
//					},
//				},
//				Tags: escloud_v2.EscloudInstanceV2TagArray{
//					&escloud_v2.EscloudInstanceV2TagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = escloud_v2.NewEscloudIpWhiteList(ctx, "fooEscloudIpWhiteList", &escloud_v2.EscloudIpWhiteListArgs{
//				InstanceId: fooEscloudInstanceV2.ID(),
//				Type:       pulumi.String("public"),
//				Component:  pulumi.String("es"),
//				IpLists: pulumi.StringArray{
//					pulumi.String("172.16.0.10"),
//					pulumi.String("172.16.0.11"),
//					pulumi.String("172.16.0.12"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EscloudIpWhiteList can be imported using the instance_id:type:component, e.g.
//
// ```sh
// $ pulumi import volcengine:escloud_v2/escloudIpWhiteList:EscloudIpWhiteList default resource_id
// ```
type EscloudIpWhiteList struct {
	pulumi.CustomResourceState

	// The component of the ip white list. Valid values: `es`, `kibana`.
	Component pulumi.StringOutput `pulumi:"component"`
	// The id of the EsCloud instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The ip list of the ip white list.
	IpLists pulumi.StringArrayOutput `pulumi:"ipLists"`
	// The type of the ip white list. Valid values: `private`, `public`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEscloudIpWhiteList registers a new resource with the given unique name, arguments, and options.
func NewEscloudIpWhiteList(ctx *pulumi.Context,
	name string, args *EscloudIpWhiteListArgs, opts ...pulumi.ResourceOption) (*EscloudIpWhiteList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Component == nil {
		return nil, errors.New("invalid value for required argument 'Component'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.IpLists == nil {
		return nil, errors.New("invalid value for required argument 'IpLists'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EscloudIpWhiteList
	err := ctx.RegisterResource("volcengine:escloud_v2/escloudIpWhiteList:EscloudIpWhiteList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEscloudIpWhiteList gets an existing EscloudIpWhiteList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEscloudIpWhiteList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EscloudIpWhiteListState, opts ...pulumi.ResourceOption) (*EscloudIpWhiteList, error) {
	var resource EscloudIpWhiteList
	err := ctx.ReadResource("volcengine:escloud_v2/escloudIpWhiteList:EscloudIpWhiteList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EscloudIpWhiteList resources.
type escloudIpWhiteListState struct {
	// The component of the ip white list. Valid values: `es`, `kibana`.
	Component *string `pulumi:"component"`
	// The id of the EsCloud instance.
	InstanceId *string `pulumi:"instanceId"`
	// The ip list of the ip white list.
	IpLists []string `pulumi:"ipLists"`
	// The type of the ip white list. Valid values: `private`, `public`.
	Type *string `pulumi:"type"`
}

type EscloudIpWhiteListState struct {
	// The component of the ip white list. Valid values: `es`, `kibana`.
	Component pulumi.StringPtrInput
	// The id of the EsCloud instance.
	InstanceId pulumi.StringPtrInput
	// The ip list of the ip white list.
	IpLists pulumi.StringArrayInput
	// The type of the ip white list. Valid values: `private`, `public`.
	Type pulumi.StringPtrInput
}

func (EscloudIpWhiteListState) ElementType() reflect.Type {
	return reflect.TypeOf((*escloudIpWhiteListState)(nil)).Elem()
}

type escloudIpWhiteListArgs struct {
	// The component of the ip white list. Valid values: `es`, `kibana`.
	Component string `pulumi:"component"`
	// The id of the EsCloud instance.
	InstanceId string `pulumi:"instanceId"`
	// The ip list of the ip white list.
	IpLists []string `pulumi:"ipLists"`
	// The type of the ip white list. Valid values: `private`, `public`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a EscloudIpWhiteList resource.
type EscloudIpWhiteListArgs struct {
	// The component of the ip white list. Valid values: `es`, `kibana`.
	Component pulumi.StringInput
	// The id of the EsCloud instance.
	InstanceId pulumi.StringInput
	// The ip list of the ip white list.
	IpLists pulumi.StringArrayInput
	// The type of the ip white list. Valid values: `private`, `public`.
	Type pulumi.StringInput
}

func (EscloudIpWhiteListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*escloudIpWhiteListArgs)(nil)).Elem()
}

type EscloudIpWhiteListInput interface {
	pulumi.Input

	ToEscloudIpWhiteListOutput() EscloudIpWhiteListOutput
	ToEscloudIpWhiteListOutputWithContext(ctx context.Context) EscloudIpWhiteListOutput
}

func (*EscloudIpWhiteList) ElementType() reflect.Type {
	return reflect.TypeOf((**EscloudIpWhiteList)(nil)).Elem()
}

func (i *EscloudIpWhiteList) ToEscloudIpWhiteListOutput() EscloudIpWhiteListOutput {
	return i.ToEscloudIpWhiteListOutputWithContext(context.Background())
}

func (i *EscloudIpWhiteList) ToEscloudIpWhiteListOutputWithContext(ctx context.Context) EscloudIpWhiteListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscloudIpWhiteListOutput)
}

// EscloudIpWhiteListArrayInput is an input type that accepts EscloudIpWhiteListArray and EscloudIpWhiteListArrayOutput values.
// You can construct a concrete instance of `EscloudIpWhiteListArrayInput` via:
//
//	EscloudIpWhiteListArray{ EscloudIpWhiteListArgs{...} }
type EscloudIpWhiteListArrayInput interface {
	pulumi.Input

	ToEscloudIpWhiteListArrayOutput() EscloudIpWhiteListArrayOutput
	ToEscloudIpWhiteListArrayOutputWithContext(context.Context) EscloudIpWhiteListArrayOutput
}

type EscloudIpWhiteListArray []EscloudIpWhiteListInput

func (EscloudIpWhiteListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EscloudIpWhiteList)(nil)).Elem()
}

func (i EscloudIpWhiteListArray) ToEscloudIpWhiteListArrayOutput() EscloudIpWhiteListArrayOutput {
	return i.ToEscloudIpWhiteListArrayOutputWithContext(context.Background())
}

func (i EscloudIpWhiteListArray) ToEscloudIpWhiteListArrayOutputWithContext(ctx context.Context) EscloudIpWhiteListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscloudIpWhiteListArrayOutput)
}

// EscloudIpWhiteListMapInput is an input type that accepts EscloudIpWhiteListMap and EscloudIpWhiteListMapOutput values.
// You can construct a concrete instance of `EscloudIpWhiteListMapInput` via:
//
//	EscloudIpWhiteListMap{ "key": EscloudIpWhiteListArgs{...} }
type EscloudIpWhiteListMapInput interface {
	pulumi.Input

	ToEscloudIpWhiteListMapOutput() EscloudIpWhiteListMapOutput
	ToEscloudIpWhiteListMapOutputWithContext(context.Context) EscloudIpWhiteListMapOutput
}

type EscloudIpWhiteListMap map[string]EscloudIpWhiteListInput

func (EscloudIpWhiteListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EscloudIpWhiteList)(nil)).Elem()
}

func (i EscloudIpWhiteListMap) ToEscloudIpWhiteListMapOutput() EscloudIpWhiteListMapOutput {
	return i.ToEscloudIpWhiteListMapOutputWithContext(context.Background())
}

func (i EscloudIpWhiteListMap) ToEscloudIpWhiteListMapOutputWithContext(ctx context.Context) EscloudIpWhiteListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscloudIpWhiteListMapOutput)
}

type EscloudIpWhiteListOutput struct{ *pulumi.OutputState }

func (EscloudIpWhiteListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EscloudIpWhiteList)(nil)).Elem()
}

func (o EscloudIpWhiteListOutput) ToEscloudIpWhiteListOutput() EscloudIpWhiteListOutput {
	return o
}

func (o EscloudIpWhiteListOutput) ToEscloudIpWhiteListOutputWithContext(ctx context.Context) EscloudIpWhiteListOutput {
	return o
}

// The component of the ip white list. Valid values: `es`, `kibana`.
func (o EscloudIpWhiteListOutput) Component() pulumi.StringOutput {
	return o.ApplyT(func(v *EscloudIpWhiteList) pulumi.StringOutput { return v.Component }).(pulumi.StringOutput)
}

// The id of the EsCloud instance.
func (o EscloudIpWhiteListOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EscloudIpWhiteList) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The ip list of the ip white list.
func (o EscloudIpWhiteListOutput) IpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EscloudIpWhiteList) pulumi.StringArrayOutput { return v.IpLists }).(pulumi.StringArrayOutput)
}

// The type of the ip white list. Valid values: `private`, `public`.
func (o EscloudIpWhiteListOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EscloudIpWhiteList) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type EscloudIpWhiteListArrayOutput struct{ *pulumi.OutputState }

func (EscloudIpWhiteListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EscloudIpWhiteList)(nil)).Elem()
}

func (o EscloudIpWhiteListArrayOutput) ToEscloudIpWhiteListArrayOutput() EscloudIpWhiteListArrayOutput {
	return o
}

func (o EscloudIpWhiteListArrayOutput) ToEscloudIpWhiteListArrayOutputWithContext(ctx context.Context) EscloudIpWhiteListArrayOutput {
	return o
}

func (o EscloudIpWhiteListArrayOutput) Index(i pulumi.IntInput) EscloudIpWhiteListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EscloudIpWhiteList {
		return vs[0].([]*EscloudIpWhiteList)[vs[1].(int)]
	}).(EscloudIpWhiteListOutput)
}

type EscloudIpWhiteListMapOutput struct{ *pulumi.OutputState }

func (EscloudIpWhiteListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EscloudIpWhiteList)(nil)).Elem()
}

func (o EscloudIpWhiteListMapOutput) ToEscloudIpWhiteListMapOutput() EscloudIpWhiteListMapOutput {
	return o
}

func (o EscloudIpWhiteListMapOutput) ToEscloudIpWhiteListMapOutputWithContext(ctx context.Context) EscloudIpWhiteListMapOutput {
	return o
}

func (o EscloudIpWhiteListMapOutput) MapIndex(k pulumi.StringInput) EscloudIpWhiteListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EscloudIpWhiteList {
		return vs[0].(map[string]*EscloudIpWhiteList)[vs[1].(string)]
	}).(EscloudIpWhiteListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EscloudIpWhiteListInput)(nil)).Elem(), &EscloudIpWhiteList{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscloudIpWhiteListArrayInput)(nil)).Elem(), EscloudIpWhiteListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscloudIpWhiteListMapInput)(nil)).Elem(), EscloudIpWhiteListMap{})
	pulumi.RegisterOutputType(EscloudIpWhiteListOutput{})
	pulumi.RegisterOutputType(EscloudIpWhiteListArrayOutput{})
	pulumi.RegisterOutputType(EscloudIpWhiteListMapOutput{})
}
