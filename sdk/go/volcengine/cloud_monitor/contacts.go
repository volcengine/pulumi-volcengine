// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cloud monitor contacts
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloud_monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud_monitor.GetContacts(ctx, &cloud_monitor.GetContactsArgs{
//				Ids: []string{
//					"17******516",
//					"1712**********0",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.cloud_monitor.Contacts has been deprecated in favor of volcengine.cloud_monitor.getContacts
func Contacts(ctx *pulumi.Context, args *ContactsArgs, opts ...pulumi.InvokeOption) (*ContactsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ContactsResult
	err := ctx.Invoke("volcengine:cloud_monitor/contacts:Contacts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Contacts.
type ContactsArgs struct {
	// A list of Contact IDs.
	Ids []string `pulumi:"ids"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Contacts.
type ContactsResult struct {
	// The collection of query.
	Contacts []ContactsContact `pulumi:"contacts"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	OutputFile *string  `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func ContactsOutput(ctx *pulumi.Context, args ContactsOutputArgs, opts ...pulumi.InvokeOption) ContactsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ContactsResult, error) {
			args := v.(ContactsArgs)
			r, err := Contacts(ctx, &args, opts...)
			var s ContactsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ContactsResultOutput)
}

// A collection of arguments for invoking Contacts.
type ContactsOutputArgs struct {
	// A list of Contact IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (ContactsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactsArgs)(nil)).Elem()
}

// A collection of values returned by Contacts.
type ContactsResultOutput struct{ *pulumi.OutputState }

func (ContactsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactsResult)(nil)).Elem()
}

func (o ContactsResultOutput) ToContactsResultOutput() ContactsResultOutput {
	return o
}

func (o ContactsResultOutput) ToContactsResultOutputWithContext(ctx context.Context) ContactsResultOutput {
	return o
}

// The collection of query.
func (o ContactsResultOutput) Contacts() ContactsContactArrayOutput {
	return o.ApplyT(func(v ContactsResult) []ContactsContact { return v.Contacts }).(ContactsContactArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ContactsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ContactsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ContactsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o ContactsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o ContactsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ContactsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ContactsResultOutput{})
}
