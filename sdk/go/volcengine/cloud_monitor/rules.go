// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cloud monitor rules
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloud_monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud_monitor.GetRules(ctx, &cloud_monitor.GetRulesArgs{
//				Ids: []string{
//					"174402785374661****",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.cloud_monitor.Rules has been deprecated in favor of volcengine.cloud_monitor.getRules
func Rules(ctx *pulumi.Context, args *RulesArgs, opts ...pulumi.InvokeOption) (*RulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv RulesResult
	err := ctx.Invoke("volcengine:cloud_monitor/rules:Rules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Rules.
type RulesArgs struct {
	// The alert state of the cloud monitor rule. Valid values: `altering`, `normal`.
	AlertStates []string `pulumi:"alertStates"`
	// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
	EnableStates []string `pulumi:"enableStates"`
	// A list of cloud monitor ids.
	Ids []string `pulumi:"ids"`
	// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
	Levels []string `pulumi:"levels"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// The namespace of the cloud monitor rule.
	Namespaces []string `pulumi:"namespaces"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The name of the cloud monitor rule. This field support fuzzy query.
	RuleName *string `pulumi:"ruleName"`
}

// A collection of values returned by Rules.
type RulesResult struct {
	// The alert state of the cloud monitor rule.
	AlertStates []string `pulumi:"alertStates"`
	// The enable state of the cloud monitor rule.
	EnableStates []string `pulumi:"enableStates"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The level of the cloud monitor rule.
	Levels    []string `pulumi:"levels"`
	NameRegex *string  `pulumi:"nameRegex"`
	// The namespace of the cloud monitor rule.
	Namespaces []string `pulumi:"namespaces"`
	OutputFile *string  `pulumi:"outputFile"`
	// The name of the cloud monitor rule.
	RuleName *string `pulumi:"ruleName"`
	// The collection of query.
	Rules []RulesRule `pulumi:"rules"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func RulesOutput(ctx *pulumi.Context, args RulesOutputArgs, opts ...pulumi.InvokeOption) RulesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (RulesResult, error) {
			args := v.(RulesArgs)
			r, err := Rules(ctx, &args, opts...)
			var s RulesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(RulesResultOutput)
}

// A collection of arguments for invoking Rules.
type RulesOutputArgs struct {
	// The alert state of the cloud monitor rule. Valid values: `altering`, `normal`.
	AlertStates pulumi.StringArrayInput `pulumi:"alertStates"`
	// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
	EnableStates pulumi.StringArrayInput `pulumi:"enableStates"`
	// A list of cloud monitor ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
	Levels pulumi.StringArrayInput `pulumi:"levels"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The namespace of the cloud monitor rule.
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The name of the cloud monitor rule. This field support fuzzy query.
	RuleName pulumi.StringPtrInput `pulumi:"ruleName"`
}

func (RulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesArgs)(nil)).Elem()
}

// A collection of values returned by Rules.
type RulesResultOutput struct{ *pulumi.OutputState }

func (RulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesResult)(nil)).Elem()
}

func (o RulesResultOutput) ToRulesResultOutput() RulesResultOutput {
	return o
}

func (o RulesResultOutput) ToRulesResultOutputWithContext(ctx context.Context) RulesResultOutput {
	return o
}

// The alert state of the cloud monitor rule.
func (o RulesResultOutput) AlertStates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesResult) []string { return v.AlertStates }).(pulumi.StringArrayOutput)
}

// The enable state of the cloud monitor rule.
func (o RulesResultOutput) EnableStates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesResult) []string { return v.EnableStates }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o RulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RulesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o RulesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The level of the cloud monitor rule.
func (o RulesResultOutput) Levels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesResult) []string { return v.Levels }).(pulumi.StringArrayOutput)
}

func (o RulesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// The namespace of the cloud monitor rule.
func (o RulesResultOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesResult) []string { return v.Namespaces }).(pulumi.StringArrayOutput)
}

func (o RulesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The name of the cloud monitor rule.
func (o RulesResultOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesResult) *string { return v.RuleName }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o RulesResultOutput) Rules() RulesRuleArrayOutput {
	return o.ApplyT(func(v RulesResult) []RulesRule { return v.Rules }).(RulesRuleArrayOutput)
}

// The total count of query.
func (o RulesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v RulesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(RulesResultOutput{})
}
