// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_monitor

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage cloud monitor rule
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloud_monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud_monitor.NewRule(ctx, "foo", &cloud_monitor.RuleArgs{
//				AlertMethods: pulumi.StringArray{
//					pulumi.String("Email"),
//					pulumi.String("Webhook"),
//				},
//				ConditionOperator: pulumi.String("||"),
//				Conditions: cloud_monitor.RuleConditionArray{
//					&cloud_monitor.RuleConditionArgs{
//						ComparisonOperator: pulumi.String(">"),
//						MetricName:         pulumi.String("DiskUsageAvail"),
//						MetricUnit:         pulumi.String("Megabytes"),
//						Statistics:         pulumi.String("avg"),
//						Threshold:          pulumi.String("100"),
//					},
//					&cloud_monitor.RuleConditionArgs{
//						ComparisonOperator: pulumi.String(">"),
//						MetricName:         pulumi.String("DiskUsageUtilization"),
//						MetricUnit:         pulumi.String("Percent"),
//						Statistics:         pulumi.String("avg"),
//						Threshold:          pulumi.String("90"),
//					},
//				},
//				ContactGroupIds: pulumi.StringArray{
//					pulumi.String("174284616403161****"),
//				},
//				Description:        pulumi.String("acc-test"),
//				EffectEndAt:        pulumi.String("22:55"),
//				EffectStartAt:      pulumi.String("00:15"),
//				EnableState:        pulumi.String("disable"),
//				EvaluationCount:    pulumi.Int(5),
//				Level:              pulumi.String("warning"),
//				MultipleConditions: pulumi.Bool(true),
//				Namespace:          pulumi.String("VCM_ECS"),
//				OriginalDimensions: cloud_monitor.RuleOriginalDimensionArray{
//					&cloud_monitor.RuleOriginalDimensionArgs{
//						Key: pulumi.String("ResourceID"),
//						Values: pulumi.StringArray{
//							pulumi.String("*"),
//						},
//					},
//					&cloud_monitor.RuleOriginalDimensionArgs{
//						Key: pulumi.String("DiskName"),
//						Values: pulumi.StringArray{
//							pulumi.String("vda"),
//							pulumi.String("vda1"),
//						},
//					},
//				},
//				RecoveryNotify: &cloud_monitor.RuleRecoveryNotifyArgs{
//					Enable: pulumi.Bool(true),
//				},
//				Regions:      pulumi.String("cn-beijing"),
//				RuleName:     pulumi.String("acc-test-rule"),
//				SilenceTime:  pulumi.Int(5),
//				SubNamespace: pulumi.String("Storage"),
//				WebHook:      pulumi.String("http://alert.volc.com/callback"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CloudMonitorRule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:cloud_monitor/rule:Rule default 174284623567451****
// ```
type Rule struct {
	pulumi.CustomResourceState

	// The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
	AlertMethods pulumi.StringArrayOutput `pulumi:"alertMethods"`
	// The alert state of the cloud monitor rule.
	AlertState pulumi.StringOutput `pulumi:"alertState"`
	// The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
	ConditionOperator pulumi.StringOutput `pulumi:"conditionOperator"`
	// The conditions of the cloud monitor rule.
	Conditions RuleConditionArrayOutput `pulumi:"conditions"`
	// The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
	ContactGroupIds pulumi.StringArrayOutput `pulumi:"contactGroupIds"`
	// The created time of the cloud monitor rule.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the cloud monitor rule.
	Description pulumi.StringOutput `pulumi:"description"`
	// The effect end time of the cloud monitor rule. The expression is `HH:MM`.
	EffectEndAt pulumi.StringOutput `pulumi:"effectEndAt"`
	// The effect start time of the cloud monitor rule. The expression is `HH:MM`.
	EffectStartAt pulumi.StringOutput `pulumi:"effectStartAt"`
	// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
	EnableState pulumi.StringOutput `pulumi:"enableState"`
	// The evaluation count of the cloud monitor rule.
	EvaluationCount pulumi.IntOutput `pulumi:"evaluationCount"`
	// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
	Level pulumi.StringOutput `pulumi:"level"`
	// Whether to enable the multiple conditions function of the cloud monitor rule.
	MultipleConditions pulumi.BoolOutput `pulumi:"multipleConditions"`
	// The namespace of the cloud monitor rule.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// The original dimensions of the cloud monitor rule.
	OriginalDimensions RuleOriginalDimensionArrayOutput `pulumi:"originalDimensions"`
	// The recovery notify of the cloud monitor rule.
	RecoveryNotify RuleRecoveryNotifyOutput `pulumi:"recoveryNotify"`
	// The region ids of the cloud monitor rule. Only one region id can be specified currently.
	Regions pulumi.StringOutput `pulumi:"regions"`
	// The name of the cloud monitor rule.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
	// The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
	SilenceTime pulumi.IntOutput `pulumi:"silenceTime"`
	// The sub namespace of the cloud monitor rule.
	SubNamespace pulumi.StringOutput `pulumi:"subNamespace"`
	// The updated time of the cloud monitor rule.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
	WebHook pulumi.StringPtrOutput `pulumi:"webHook"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlertMethods == nil {
		return nil, errors.New("invalid value for required argument 'AlertMethods'")
	}
	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.EffectEndAt == nil {
		return nil, errors.New("invalid value for required argument 'EffectEndAt'")
	}
	if args.EffectStartAt == nil {
		return nil, errors.New("invalid value for required argument 'EffectStartAt'")
	}
	if args.EnableState == nil {
		return nil, errors.New("invalid value for required argument 'EnableState'")
	}
	if args.EvaluationCount == nil {
		return nil, errors.New("invalid value for required argument 'EvaluationCount'")
	}
	if args.Level == nil {
		return nil, errors.New("invalid value for required argument 'Level'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.OriginalDimensions == nil {
		return nil, errors.New("invalid value for required argument 'OriginalDimensions'")
	}
	if args.Regions == nil {
		return nil, errors.New("invalid value for required argument 'Regions'")
	}
	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	if args.SilenceTime == nil {
		return nil, errors.New("invalid value for required argument 'SilenceTime'")
	}
	if args.SubNamespace == nil {
		return nil, errors.New("invalid value for required argument 'SubNamespace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rule
	err := ctx.RegisterResource("volcengine:cloud_monitor/rule:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("volcengine:cloud_monitor/rule:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
	// The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
	AlertMethods []string `pulumi:"alertMethods"`
	// The alert state of the cloud monitor rule.
	AlertState *string `pulumi:"alertState"`
	// The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
	ConditionOperator *string `pulumi:"conditionOperator"`
	// The conditions of the cloud monitor rule.
	Conditions []RuleCondition `pulumi:"conditions"`
	// The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
	ContactGroupIds []string `pulumi:"contactGroupIds"`
	// The created time of the cloud monitor rule.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the cloud monitor rule.
	Description *string `pulumi:"description"`
	// The effect end time of the cloud monitor rule. The expression is `HH:MM`.
	EffectEndAt *string `pulumi:"effectEndAt"`
	// The effect start time of the cloud monitor rule. The expression is `HH:MM`.
	EffectStartAt *string `pulumi:"effectStartAt"`
	// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
	EnableState *string `pulumi:"enableState"`
	// The evaluation count of the cloud monitor rule.
	EvaluationCount *int `pulumi:"evaluationCount"`
	// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
	Level *string `pulumi:"level"`
	// Whether to enable the multiple conditions function of the cloud monitor rule.
	MultipleConditions *bool `pulumi:"multipleConditions"`
	// The namespace of the cloud monitor rule.
	Namespace *string `pulumi:"namespace"`
	// The original dimensions of the cloud monitor rule.
	OriginalDimensions []RuleOriginalDimension `pulumi:"originalDimensions"`
	// The recovery notify of the cloud monitor rule.
	RecoveryNotify *RuleRecoveryNotify `pulumi:"recoveryNotify"`
	// The region ids of the cloud monitor rule. Only one region id can be specified currently.
	Regions *string `pulumi:"regions"`
	// The name of the cloud monitor rule.
	RuleName *string `pulumi:"ruleName"`
	// The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
	SilenceTime *int `pulumi:"silenceTime"`
	// The sub namespace of the cloud monitor rule.
	SubNamespace *string `pulumi:"subNamespace"`
	// The updated time of the cloud monitor rule.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
	WebHook *string `pulumi:"webHook"`
}

type RuleState struct {
	// The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
	AlertMethods pulumi.StringArrayInput
	// The alert state of the cloud monitor rule.
	AlertState pulumi.StringPtrInput
	// The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
	ConditionOperator pulumi.StringPtrInput
	// The conditions of the cloud monitor rule.
	Conditions RuleConditionArrayInput
	// The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
	ContactGroupIds pulumi.StringArrayInput
	// The created time of the cloud monitor rule.
	CreatedAt pulumi.StringPtrInput
	// The description of the cloud monitor rule.
	Description pulumi.StringPtrInput
	// The effect end time of the cloud monitor rule. The expression is `HH:MM`.
	EffectEndAt pulumi.StringPtrInput
	// The effect start time of the cloud monitor rule. The expression is `HH:MM`.
	EffectStartAt pulumi.StringPtrInput
	// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
	EnableState pulumi.StringPtrInput
	// The evaluation count of the cloud monitor rule.
	EvaluationCount pulumi.IntPtrInput
	// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
	Level pulumi.StringPtrInput
	// Whether to enable the multiple conditions function of the cloud monitor rule.
	MultipleConditions pulumi.BoolPtrInput
	// The namespace of the cloud monitor rule.
	Namespace pulumi.StringPtrInput
	// The original dimensions of the cloud monitor rule.
	OriginalDimensions RuleOriginalDimensionArrayInput
	// The recovery notify of the cloud monitor rule.
	RecoveryNotify RuleRecoveryNotifyPtrInput
	// The region ids of the cloud monitor rule. Only one region id can be specified currently.
	Regions pulumi.StringPtrInput
	// The name of the cloud monitor rule.
	RuleName pulumi.StringPtrInput
	// The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
	SilenceTime pulumi.IntPtrInput
	// The sub namespace of the cloud monitor rule.
	SubNamespace pulumi.StringPtrInput
	// The updated time of the cloud monitor rule.
	UpdatedAt pulumi.StringPtrInput
	// The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
	WebHook pulumi.StringPtrInput
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
	AlertMethods []string `pulumi:"alertMethods"`
	// The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
	ConditionOperator *string `pulumi:"conditionOperator"`
	// The conditions of the cloud monitor rule.
	Conditions []RuleCondition `pulumi:"conditions"`
	// The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
	ContactGroupIds []string `pulumi:"contactGroupIds"`
	// The description of the cloud monitor rule.
	Description *string `pulumi:"description"`
	// The effect end time of the cloud monitor rule. The expression is `HH:MM`.
	EffectEndAt string `pulumi:"effectEndAt"`
	// The effect start time of the cloud monitor rule. The expression is `HH:MM`.
	EffectStartAt string `pulumi:"effectStartAt"`
	// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
	EnableState string `pulumi:"enableState"`
	// The evaluation count of the cloud monitor rule.
	EvaluationCount int `pulumi:"evaluationCount"`
	// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
	Level string `pulumi:"level"`
	// Whether to enable the multiple conditions function of the cloud monitor rule.
	MultipleConditions *bool `pulumi:"multipleConditions"`
	// The namespace of the cloud monitor rule.
	Namespace string `pulumi:"namespace"`
	// The original dimensions of the cloud monitor rule.
	OriginalDimensions []RuleOriginalDimension `pulumi:"originalDimensions"`
	// The recovery notify of the cloud monitor rule.
	RecoveryNotify *RuleRecoveryNotify `pulumi:"recoveryNotify"`
	// The region ids of the cloud monitor rule. Only one region id can be specified currently.
	Regions string `pulumi:"regions"`
	// The name of the cloud monitor rule.
	RuleName string `pulumi:"ruleName"`
	// The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
	SilenceTime int `pulumi:"silenceTime"`
	// The sub namespace of the cloud monitor rule.
	SubNamespace string `pulumi:"subNamespace"`
	// The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
	WebHook *string `pulumi:"webHook"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
	AlertMethods pulumi.StringArrayInput
	// The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
	ConditionOperator pulumi.StringPtrInput
	// The conditions of the cloud monitor rule.
	Conditions RuleConditionArrayInput
	// The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
	ContactGroupIds pulumi.StringArrayInput
	// The description of the cloud monitor rule.
	Description pulumi.StringPtrInput
	// The effect end time of the cloud monitor rule. The expression is `HH:MM`.
	EffectEndAt pulumi.StringInput
	// The effect start time of the cloud monitor rule. The expression is `HH:MM`.
	EffectStartAt pulumi.StringInput
	// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
	EnableState pulumi.StringInput
	// The evaluation count of the cloud monitor rule.
	EvaluationCount pulumi.IntInput
	// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
	Level pulumi.StringInput
	// Whether to enable the multiple conditions function of the cloud monitor rule.
	MultipleConditions pulumi.BoolPtrInput
	// The namespace of the cloud monitor rule.
	Namespace pulumi.StringInput
	// The original dimensions of the cloud monitor rule.
	OriginalDimensions RuleOriginalDimensionArrayInput
	// The recovery notify of the cloud monitor rule.
	RecoveryNotify RuleRecoveryNotifyPtrInput
	// The region ids of the cloud monitor rule. Only one region id can be specified currently.
	Regions pulumi.StringInput
	// The name of the cloud monitor rule.
	RuleName pulumi.StringInput
	// The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
	SilenceTime pulumi.IntInput
	// The sub namespace of the cloud monitor rule.
	SubNamespace pulumi.StringInput
	// The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
	WebHook pulumi.StringPtrInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(ctx context.Context) RuleOutput
}

func (*Rule) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (i *Rule) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i *Rule) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

// RuleArrayInput is an input type that accepts RuleArray and RuleArrayOutput values.
// You can construct a concrete instance of `RuleArrayInput` via:
//
//	RuleArray{ RuleArgs{...} }
type RuleArrayInput interface {
	pulumi.Input

	ToRuleArrayOutput() RuleArrayOutput
	ToRuleArrayOutputWithContext(context.Context) RuleArrayOutput
}

type RuleArray []RuleInput

func (RuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rule)(nil)).Elem()
}

func (i RuleArray) ToRuleArrayOutput() RuleArrayOutput {
	return i.ToRuleArrayOutputWithContext(context.Background())
}

func (i RuleArray) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleArrayOutput)
}

// RuleMapInput is an input type that accepts RuleMap and RuleMapOutput values.
// You can construct a concrete instance of `RuleMapInput` via:
//
//	RuleMap{ "key": RuleArgs{...} }
type RuleMapInput interface {
	pulumi.Input

	ToRuleMapOutput() RuleMapOutput
	ToRuleMapOutputWithContext(context.Context) RuleMapOutput
}

type RuleMap map[string]RuleInput

func (RuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rule)(nil)).Elem()
}

func (i RuleMap) ToRuleMapOutput() RuleMapOutput {
	return i.ToRuleMapOutputWithContext(context.Background())
}

func (i RuleMap) ToRuleMapOutputWithContext(ctx context.Context) RuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMapOutput)
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

// The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
func (o RuleOutput) AlertMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringArrayOutput { return v.AlertMethods }).(pulumi.StringArrayOutput)
}

// The alert state of the cloud monitor rule.
func (o RuleOutput) AlertState() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.AlertState }).(pulumi.StringOutput)
}

// The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
func (o RuleOutput) ConditionOperator() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.ConditionOperator }).(pulumi.StringOutput)
}

// The conditions of the cloud monitor rule.
func (o RuleOutput) Conditions() RuleConditionArrayOutput {
	return o.ApplyT(func(v *Rule) RuleConditionArrayOutput { return v.Conditions }).(RuleConditionArrayOutput)
}

// The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
func (o RuleOutput) ContactGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringArrayOutput { return v.ContactGroupIds }).(pulumi.StringArrayOutput)
}

// The created time of the cloud monitor rule.
func (o RuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the cloud monitor rule.
func (o RuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The effect end time of the cloud monitor rule. The expression is `HH:MM`.
func (o RuleOutput) EffectEndAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.EffectEndAt }).(pulumi.StringOutput)
}

// The effect start time of the cloud monitor rule. The expression is `HH:MM`.
func (o RuleOutput) EffectStartAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.EffectStartAt }).(pulumi.StringOutput)
}

// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
func (o RuleOutput) EnableState() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.EnableState }).(pulumi.StringOutput)
}

// The evaluation count of the cloud monitor rule.
func (o RuleOutput) EvaluationCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Rule) pulumi.IntOutput { return v.EvaluationCount }).(pulumi.IntOutput)
}

// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
func (o RuleOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Level }).(pulumi.StringOutput)
}

// Whether to enable the multiple conditions function of the cloud monitor rule.
func (o RuleOutput) MultipleConditions() pulumi.BoolOutput {
	return o.ApplyT(func(v *Rule) pulumi.BoolOutput { return v.MultipleConditions }).(pulumi.BoolOutput)
}

// The namespace of the cloud monitor rule.
func (o RuleOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// The original dimensions of the cloud monitor rule.
func (o RuleOutput) OriginalDimensions() RuleOriginalDimensionArrayOutput {
	return o.ApplyT(func(v *Rule) RuleOriginalDimensionArrayOutput { return v.OriginalDimensions }).(RuleOriginalDimensionArrayOutput)
}

// The recovery notify of the cloud monitor rule.
func (o RuleOutput) RecoveryNotify() RuleRecoveryNotifyOutput {
	return o.ApplyT(func(v *Rule) RuleRecoveryNotifyOutput { return v.RecoveryNotify }).(RuleRecoveryNotifyOutput)
}

// The region ids of the cloud monitor rule. Only one region id can be specified currently.
func (o RuleOutput) Regions() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Regions }).(pulumi.StringOutput)
}

// The name of the cloud monitor rule.
func (o RuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

// The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
func (o RuleOutput) SilenceTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Rule) pulumi.IntOutput { return v.SilenceTime }).(pulumi.IntOutput)
}

// The sub namespace of the cloud monitor rule.
func (o RuleOutput) SubNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.SubNamespace }).(pulumi.StringOutput)
}

// The updated time of the cloud monitor rule.
func (o RuleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The web hook of the cloud monitor rule. When the alert method is `Webhook`, This field must be specified.
func (o RuleOutput) WebHook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.WebHook }).(pulumi.StringPtrOutput)
}

type RuleArrayOutput struct{ *pulumi.OutputState }

func (RuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rule)(nil)).Elem()
}

func (o RuleArrayOutput) ToRuleArrayOutput() RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) Index(i pulumi.IntInput) RuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rule {
		return vs[0].([]*Rule)[vs[1].(int)]
	}).(RuleOutput)
}

type RuleMapOutput struct{ *pulumi.OutputState }

func (RuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rule)(nil)).Elem()
}

func (o RuleMapOutput) ToRuleMapOutput() RuleMapOutput {
	return o
}

func (o RuleMapOutput) ToRuleMapOutputWithContext(ctx context.Context) RuleMapOutput {
	return o
}

func (o RuleMapOutput) MapIndex(k pulumi.StringInput) RuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rule {
		return vs[0].(map[string]*Rule)[vs[1].(string)]
	}).(RuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), &Rule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleArrayInput)(nil)).Elem(), RuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMapInput)(nil)).Elem(), RuleMap{})
	pulumi.RegisterOutputType(RuleOutput{})
	pulumi.RegisterOutputType(RuleArrayOutput{})
	pulumi.RegisterOutputType(RuleMapOutput{})
}
