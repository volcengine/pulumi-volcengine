// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_monitor

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage cloud monitor event rule
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloud_monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud_monitor.NewEventRule(ctx, "foo", &cloud_monitor.EventRuleArgs{
//				ContactGroupIds: pulumi.StringArray{
//					pulumi.String("1737941730782699520"),
//					pulumi.String("1737940985502777344"),
//				},
//				ContactMethods: pulumi.StringArray{
//					pulumi.String("Phone"),
//					pulumi.String("TLS"),
//					pulumi.String("MQ"),
//				},
//				EffectiveTime: &cloud_monitor.EventRuleEffectiveTimeArgs{
//					EndTime:   pulumi.String("22:00"),
//					StartTime: pulumi.String("01:00"),
//				},
//				EventSource: pulumi.String("ecs"),
//				EventTypes: pulumi.StringArray{
//					pulumi.String("ecs:Disk:DiskError.Redeploy.Canceled"),
//				},
//				FilterPattern: &cloud_monitor.EventRuleFilterPatternArgs{
//					Source: pulumi.String("ecs"),
//					Types: pulumi.StringArray{
//						pulumi.String("ecs:Disk:DiskError.Redeploy.Canceled"),
//					},
//				},
//				Level: pulumi.String("notice"),
//				MessageQueues: cloud_monitor.EventRuleMessageQueueArray{
//					&cloud_monitor.EventRuleMessageQueueArgs{
//						InstanceId: pulumi.String("kafka-cnoe4rfrsqfb1d64"),
//						Region:     pulumi.String("*****"),
//						Topic:      pulumi.String("tftest"),
//						Type:       pulumi.String("kafka"),
//						VpcId:      pulumi.String("vpc-2d68hz41j7qio58ozfd6jxgtb"),
//					},
//				},
//				RuleName: pulumi.String("tftest1"),
//				Status:   pulumi.String("enable"),
//				TlsTargets: cloud_monitor.EventRuleTlsTargetArray{
//					&cloud_monitor.EventRuleTlsTargetArgs{
//						ProjectId:    pulumi.String("17ba378d-de43-495e-8906-03ae6567b376"),
//						ProjectName:  pulumi.String("tf-test"),
//						RegionNameCn: pulumi.String("*****"),
//						RegionNameEn: pulumi.String("*****"),
//						TopicId:      pulumi.String("7ce12237-6670-44a7-9d79-2e36961586e6"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CloudMonitorEventRule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:cloud_monitor/eventRule:EventRule default rule_id
// ```
type EventRule struct {
	pulumi.CustomResourceState

	// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
	ContactGroupIds pulumi.StringArrayOutput `pulumi:"contactGroupIds"`
	// Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
	ContactMethods pulumi.StringArrayOutput `pulumi:"contactMethods"`
	// The description of the rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The rule takes effect at a certain time and will only be effective during this period.
	EffectiveTime EventRuleEffectiveTimeOutput `pulumi:"effectiveTime"`
	// When the alarm notification method is alarm callback, it triggers the callback address.
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// Event source.
	EventSource pulumi.StringOutput `pulumi:"eventSource"`
	// Event type.
	EventTypes pulumi.StringArrayOutput `pulumi:"eventTypes"`
	// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
	FilterPattern EventRuleFilterPatternOutput `pulumi:"filterPattern"`
	// Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
	Level pulumi.StringOutput `pulumi:"level"`
	// The triggered message queue when the alarm notification method is Kafka message queue.
	MessageQueues EventRuleMessageQueueArrayOutput `pulumi:"messageQueues"`
	// The name of the rule.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
	// Rule status. `enable`: enable rule(default), `disable`: disable rule.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The alarm method for log service triggers the configuration of the log service.
	TlsTargets EventRuleTlsTargetArrayOutput `pulumi:"tlsTargets"`
}

// NewEventRule registers a new resource with the given unique name, arguments, and options.
func NewEventRule(ctx *pulumi.Context,
	name string, args *EventRuleArgs, opts ...pulumi.ResourceOption) (*EventRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactMethods == nil {
		return nil, errors.New("invalid value for required argument 'ContactMethods'")
	}
	if args.EffectiveTime == nil {
		return nil, errors.New("invalid value for required argument 'EffectiveTime'")
	}
	if args.EventSource == nil {
		return nil, errors.New("invalid value for required argument 'EventSource'")
	}
	if args.FilterPattern == nil {
		return nil, errors.New("invalid value for required argument 'FilterPattern'")
	}
	if args.Level == nil {
		return nil, errors.New("invalid value for required argument 'Level'")
	}
	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventRule
	err := ctx.RegisterResource("volcengine:cloud_monitor/eventRule:EventRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventRule gets an existing EventRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventRuleState, opts ...pulumi.ResourceOption) (*EventRule, error) {
	var resource EventRule
	err := ctx.ReadResource("volcengine:cloud_monitor/eventRule:EventRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventRule resources.
type eventRuleState struct {
	// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
	ContactGroupIds []string `pulumi:"contactGroupIds"`
	// Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
	ContactMethods []string `pulumi:"contactMethods"`
	// The description of the rule.
	Description *string `pulumi:"description"`
	// The rule takes effect at a certain time and will only be effective during this period.
	EffectiveTime *EventRuleEffectiveTime `pulumi:"effectiveTime"`
	// When the alarm notification method is alarm callback, it triggers the callback address.
	Endpoint *string `pulumi:"endpoint"`
	// Event source.
	EventSource *string `pulumi:"eventSource"`
	// Event type.
	EventTypes []string `pulumi:"eventTypes"`
	// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
	FilterPattern *EventRuleFilterPattern `pulumi:"filterPattern"`
	// Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
	Level *string `pulumi:"level"`
	// The triggered message queue when the alarm notification method is Kafka message queue.
	MessageQueues []EventRuleMessageQueue `pulumi:"messageQueues"`
	// The name of the rule.
	RuleName *string `pulumi:"ruleName"`
	// Rule status. `enable`: enable rule(default), `disable`: disable rule.
	Status *string `pulumi:"status"`
	// The alarm method for log service triggers the configuration of the log service.
	TlsTargets []EventRuleTlsTarget `pulumi:"tlsTargets"`
}

type EventRuleState struct {
	// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
	ContactGroupIds pulumi.StringArrayInput
	// Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
	ContactMethods pulumi.StringArrayInput
	// The description of the rule.
	Description pulumi.StringPtrInput
	// The rule takes effect at a certain time and will only be effective during this period.
	EffectiveTime EventRuleEffectiveTimePtrInput
	// When the alarm notification method is alarm callback, it triggers the callback address.
	Endpoint pulumi.StringPtrInput
	// Event source.
	EventSource pulumi.StringPtrInput
	// Event type.
	EventTypes pulumi.StringArrayInput
	// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
	FilterPattern EventRuleFilterPatternPtrInput
	// Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
	Level pulumi.StringPtrInput
	// The triggered message queue when the alarm notification method is Kafka message queue.
	MessageQueues EventRuleMessageQueueArrayInput
	// The name of the rule.
	RuleName pulumi.StringPtrInput
	// Rule status. `enable`: enable rule(default), `disable`: disable rule.
	Status pulumi.StringPtrInput
	// The alarm method for log service triggers the configuration of the log service.
	TlsTargets EventRuleTlsTargetArrayInput
}

func (EventRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventRuleState)(nil)).Elem()
}

type eventRuleArgs struct {
	// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
	ContactGroupIds []string `pulumi:"contactGroupIds"`
	// Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
	ContactMethods []string `pulumi:"contactMethods"`
	// The description of the rule.
	Description *string `pulumi:"description"`
	// The rule takes effect at a certain time and will only be effective during this period.
	EffectiveTime EventRuleEffectiveTime `pulumi:"effectiveTime"`
	// When the alarm notification method is alarm callback, it triggers the callback address.
	Endpoint *string `pulumi:"endpoint"`
	// Event source.
	EventSource string `pulumi:"eventSource"`
	// Event type.
	EventTypes []string `pulumi:"eventTypes"`
	// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
	FilterPattern EventRuleFilterPattern `pulumi:"filterPattern"`
	// Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
	Level string `pulumi:"level"`
	// The triggered message queue when the alarm notification method is Kafka message queue.
	MessageQueues []EventRuleMessageQueue `pulumi:"messageQueues"`
	// The name of the rule.
	RuleName string `pulumi:"ruleName"`
	// Rule status. `enable`: enable rule(default), `disable`: disable rule.
	Status *string `pulumi:"status"`
	// The alarm method for log service triggers the configuration of the log service.
	TlsTargets []EventRuleTlsTarget `pulumi:"tlsTargets"`
}

// The set of arguments for constructing a EventRule resource.
type EventRuleArgs struct {
	// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
	ContactGroupIds pulumi.StringArrayInput
	// Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
	ContactMethods pulumi.StringArrayInput
	// The description of the rule.
	Description pulumi.StringPtrInput
	// The rule takes effect at a certain time and will only be effective during this period.
	EffectiveTime EventRuleEffectiveTimeInput
	// When the alarm notification method is alarm callback, it triggers the callback address.
	Endpoint pulumi.StringPtrInput
	// Event source.
	EventSource pulumi.StringInput
	// Event type.
	EventTypes pulumi.StringArrayInput
	// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
	FilterPattern EventRuleFilterPatternInput
	// Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
	Level pulumi.StringInput
	// The triggered message queue when the alarm notification method is Kafka message queue.
	MessageQueues EventRuleMessageQueueArrayInput
	// The name of the rule.
	RuleName pulumi.StringInput
	// Rule status. `enable`: enable rule(default), `disable`: disable rule.
	Status pulumi.StringPtrInput
	// The alarm method for log service triggers the configuration of the log service.
	TlsTargets EventRuleTlsTargetArrayInput
}

func (EventRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventRuleArgs)(nil)).Elem()
}

type EventRuleInput interface {
	pulumi.Input

	ToEventRuleOutput() EventRuleOutput
	ToEventRuleOutputWithContext(ctx context.Context) EventRuleOutput
}

func (*EventRule) ElementType() reflect.Type {
	return reflect.TypeOf((**EventRule)(nil)).Elem()
}

func (i *EventRule) ToEventRuleOutput() EventRuleOutput {
	return i.ToEventRuleOutputWithContext(context.Background())
}

func (i *EventRule) ToEventRuleOutputWithContext(ctx context.Context) EventRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleOutput)
}

// EventRuleArrayInput is an input type that accepts EventRuleArray and EventRuleArrayOutput values.
// You can construct a concrete instance of `EventRuleArrayInput` via:
//
//	EventRuleArray{ EventRuleArgs{...} }
type EventRuleArrayInput interface {
	pulumi.Input

	ToEventRuleArrayOutput() EventRuleArrayOutput
	ToEventRuleArrayOutputWithContext(context.Context) EventRuleArrayOutput
}

type EventRuleArray []EventRuleInput

func (EventRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventRule)(nil)).Elem()
}

func (i EventRuleArray) ToEventRuleArrayOutput() EventRuleArrayOutput {
	return i.ToEventRuleArrayOutputWithContext(context.Background())
}

func (i EventRuleArray) ToEventRuleArrayOutputWithContext(ctx context.Context) EventRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleArrayOutput)
}

// EventRuleMapInput is an input type that accepts EventRuleMap and EventRuleMapOutput values.
// You can construct a concrete instance of `EventRuleMapInput` via:
//
//	EventRuleMap{ "key": EventRuleArgs{...} }
type EventRuleMapInput interface {
	pulumi.Input

	ToEventRuleMapOutput() EventRuleMapOutput
	ToEventRuleMapOutputWithContext(context.Context) EventRuleMapOutput
}

type EventRuleMap map[string]EventRuleInput

func (EventRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventRule)(nil)).Elem()
}

func (i EventRuleMap) ToEventRuleMapOutput() EventRuleMapOutput {
	return i.ToEventRuleMapOutputWithContext(context.Background())
}

func (i EventRuleMap) ToEventRuleMapOutputWithContext(ctx context.Context) EventRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleMapOutput)
}

type EventRuleOutput struct{ *pulumi.OutputState }

func (EventRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventRule)(nil)).Elem()
}

func (o EventRuleOutput) ToEventRuleOutput() EventRuleOutput {
	return o
}

func (o EventRuleOutput) ToEventRuleOutputWithContext(ctx context.Context) EventRuleOutput {
	return o
}

// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
func (o EventRuleOutput) ContactGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringArrayOutput { return v.ContactGroupIds }).(pulumi.StringArrayOutput)
}

// Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
func (o EventRuleOutput) ContactMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringArrayOutput { return v.ContactMethods }).(pulumi.StringArrayOutput)
}

// The description of the rule.
func (o EventRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The rule takes effect at a certain time and will only be effective during this period.
func (o EventRuleOutput) EffectiveTime() EventRuleEffectiveTimeOutput {
	return o.ApplyT(func(v *EventRule) EventRuleEffectiveTimeOutput { return v.EffectiveTime }).(EventRuleEffectiveTimeOutput)
}

// When the alarm notification method is alarm callback, it triggers the callback address.
func (o EventRuleOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Event source.
func (o EventRuleOutput) EventSource() pulumi.StringOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringOutput { return v.EventSource }).(pulumi.StringOutput)
}

// Event type.
func (o EventRuleOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringArrayOutput { return v.EventTypes }).(pulumi.StringArrayOutput)
}

// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
func (o EventRuleOutput) FilterPattern() EventRuleFilterPatternOutput {
	return o.ApplyT(func(v *EventRule) EventRuleFilterPatternOutput { return v.FilterPattern }).(EventRuleFilterPatternOutput)
}

// Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
func (o EventRuleOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringOutput { return v.Level }).(pulumi.StringOutput)
}

// The triggered message queue when the alarm notification method is Kafka message queue.
func (o EventRuleOutput) MessageQueues() EventRuleMessageQueueArrayOutput {
	return o.ApplyT(func(v *EventRule) EventRuleMessageQueueArrayOutput { return v.MessageQueues }).(EventRuleMessageQueueArrayOutput)
}

// The name of the rule.
func (o EventRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

// Rule status. `enable`: enable rule(default), `disable`: disable rule.
func (o EventRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventRule) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The alarm method for log service triggers the configuration of the log service.
func (o EventRuleOutput) TlsTargets() EventRuleTlsTargetArrayOutput {
	return o.ApplyT(func(v *EventRule) EventRuleTlsTargetArrayOutput { return v.TlsTargets }).(EventRuleTlsTargetArrayOutput)
}

type EventRuleArrayOutput struct{ *pulumi.OutputState }

func (EventRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventRule)(nil)).Elem()
}

func (o EventRuleArrayOutput) ToEventRuleArrayOutput() EventRuleArrayOutput {
	return o
}

func (o EventRuleArrayOutput) ToEventRuleArrayOutputWithContext(ctx context.Context) EventRuleArrayOutput {
	return o
}

func (o EventRuleArrayOutput) Index(i pulumi.IntInput) EventRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventRule {
		return vs[0].([]*EventRule)[vs[1].(int)]
	}).(EventRuleOutput)
}

type EventRuleMapOutput struct{ *pulumi.OutputState }

func (EventRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventRule)(nil)).Elem()
}

func (o EventRuleMapOutput) ToEventRuleMapOutput() EventRuleMapOutput {
	return o
}

func (o EventRuleMapOutput) ToEventRuleMapOutputWithContext(ctx context.Context) EventRuleMapOutput {
	return o
}

func (o EventRuleMapOutput) MapIndex(k pulumi.StringInput) EventRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventRule {
		return vs[0].(map[string]*EventRule)[vs[1].(string)]
	}).(EventRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleInput)(nil)).Elem(), &EventRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleArrayInput)(nil)).Elem(), EventRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleMapInput)(nil)).Elem(), EventRuleMap{})
	pulumi.RegisterOutputType(EventRuleOutput{})
	pulumi.RegisterOutputType(EventRuleArrayOutput{})
	pulumi.RegisterOutputType(EventRuleMapOutput{})
}
