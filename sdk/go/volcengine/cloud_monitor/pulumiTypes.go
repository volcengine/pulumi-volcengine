// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type ContactGroupsGroup struct {
	// The id of the account.
	AccountId string `pulumi:"accountId"`
	// Contact information in the contact group.
	Contacts []ContactGroupsGroupContact `pulumi:"contacts"`
	// The create time.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the contact group.
	Description string `pulumi:"description"`
	// The id of the contact group.
	Id string `pulumi:"id"`
	// Search for keywords in contact group names, supports fuzzy search.
	Name string `pulumi:"name"`
	// The update time.
	UpdatedAt string `pulumi:"updatedAt"`
}

// ContactGroupsGroupInput is an input type that accepts ContactGroupsGroupArgs and ContactGroupsGroupOutput values.
// You can construct a concrete instance of `ContactGroupsGroupInput` via:
//
//	ContactGroupsGroupArgs{...}
type ContactGroupsGroupInput interface {
	pulumi.Input

	ToContactGroupsGroupOutput() ContactGroupsGroupOutput
	ToContactGroupsGroupOutputWithContext(context.Context) ContactGroupsGroupOutput
}

type ContactGroupsGroupArgs struct {
	// The id of the account.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Contact information in the contact group.
	Contacts ContactGroupsGroupContactArrayInput `pulumi:"contacts"`
	// The create time.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the contact group.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the contact group.
	Id pulumi.StringInput `pulumi:"id"`
	// Search for keywords in contact group names, supports fuzzy search.
	Name pulumi.StringInput `pulumi:"name"`
	// The update time.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (ContactGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactGroupsGroup)(nil)).Elem()
}

func (i ContactGroupsGroupArgs) ToContactGroupsGroupOutput() ContactGroupsGroupOutput {
	return i.ToContactGroupsGroupOutputWithContext(context.Background())
}

func (i ContactGroupsGroupArgs) ToContactGroupsGroupOutputWithContext(ctx context.Context) ContactGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactGroupsGroupOutput)
}

// ContactGroupsGroupArrayInput is an input type that accepts ContactGroupsGroupArray and ContactGroupsGroupArrayOutput values.
// You can construct a concrete instance of `ContactGroupsGroupArrayInput` via:
//
//	ContactGroupsGroupArray{ ContactGroupsGroupArgs{...} }
type ContactGroupsGroupArrayInput interface {
	pulumi.Input

	ToContactGroupsGroupArrayOutput() ContactGroupsGroupArrayOutput
	ToContactGroupsGroupArrayOutputWithContext(context.Context) ContactGroupsGroupArrayOutput
}

type ContactGroupsGroupArray []ContactGroupsGroupInput

func (ContactGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactGroupsGroup)(nil)).Elem()
}

func (i ContactGroupsGroupArray) ToContactGroupsGroupArrayOutput() ContactGroupsGroupArrayOutput {
	return i.ToContactGroupsGroupArrayOutputWithContext(context.Background())
}

func (i ContactGroupsGroupArray) ToContactGroupsGroupArrayOutputWithContext(ctx context.Context) ContactGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactGroupsGroupArrayOutput)
}

type ContactGroupsGroupOutput struct{ *pulumi.OutputState }

func (ContactGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactGroupsGroup)(nil)).Elem()
}

func (o ContactGroupsGroupOutput) ToContactGroupsGroupOutput() ContactGroupsGroupOutput {
	return o
}

func (o ContactGroupsGroupOutput) ToContactGroupsGroupOutputWithContext(ctx context.Context) ContactGroupsGroupOutput {
	return o
}

// The id of the account.
func (o ContactGroupsGroupOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsGroup) string { return v.AccountId }).(pulumi.StringOutput)
}

// Contact information in the contact group.
func (o ContactGroupsGroupOutput) Contacts() ContactGroupsGroupContactArrayOutput {
	return o.ApplyT(func(v ContactGroupsGroup) []ContactGroupsGroupContact { return v.Contacts }).(ContactGroupsGroupContactArrayOutput)
}

// The create time.
func (o ContactGroupsGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsGroup) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the contact group.
func (o ContactGroupsGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsGroup) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the contact group.
func (o ContactGroupsGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsGroup) string { return v.Id }).(pulumi.StringOutput)
}

// Search for keywords in contact group names, supports fuzzy search.
func (o ContactGroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

// The update time.
func (o ContactGroupsGroupOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsGroup) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ContactGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (ContactGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactGroupsGroup)(nil)).Elem()
}

func (o ContactGroupsGroupArrayOutput) ToContactGroupsGroupArrayOutput() ContactGroupsGroupArrayOutput {
	return o
}

func (o ContactGroupsGroupArrayOutput) ToContactGroupsGroupArrayOutputWithContext(ctx context.Context) ContactGroupsGroupArrayOutput {
	return o
}

func (o ContactGroupsGroupArrayOutput) Index(i pulumi.IntInput) ContactGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactGroupsGroup {
		return vs[0].([]ContactGroupsGroup)[vs[1].(int)]
	}).(ContactGroupsGroupOutput)
}

type ContactGroupsGroupContact struct {
	// The email of contact.
	Email string `pulumi:"email"`
	// The id of the contact group.
	Id string `pulumi:"id"`
	// Search for keywords in contact group names, supports fuzzy search.
	Name string `pulumi:"name"`
	// The phone of contact.
	Phone string `pulumi:"phone"`
}

// ContactGroupsGroupContactInput is an input type that accepts ContactGroupsGroupContactArgs and ContactGroupsGroupContactOutput values.
// You can construct a concrete instance of `ContactGroupsGroupContactInput` via:
//
//	ContactGroupsGroupContactArgs{...}
type ContactGroupsGroupContactInput interface {
	pulumi.Input

	ToContactGroupsGroupContactOutput() ContactGroupsGroupContactOutput
	ToContactGroupsGroupContactOutputWithContext(context.Context) ContactGroupsGroupContactOutput
}

type ContactGroupsGroupContactArgs struct {
	// The email of contact.
	Email pulumi.StringInput `pulumi:"email"`
	// The id of the contact group.
	Id pulumi.StringInput `pulumi:"id"`
	// Search for keywords in contact group names, supports fuzzy search.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone of contact.
	Phone pulumi.StringInput `pulumi:"phone"`
}

func (ContactGroupsGroupContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactGroupsGroupContact)(nil)).Elem()
}

func (i ContactGroupsGroupContactArgs) ToContactGroupsGroupContactOutput() ContactGroupsGroupContactOutput {
	return i.ToContactGroupsGroupContactOutputWithContext(context.Background())
}

func (i ContactGroupsGroupContactArgs) ToContactGroupsGroupContactOutputWithContext(ctx context.Context) ContactGroupsGroupContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactGroupsGroupContactOutput)
}

// ContactGroupsGroupContactArrayInput is an input type that accepts ContactGroupsGroupContactArray and ContactGroupsGroupContactArrayOutput values.
// You can construct a concrete instance of `ContactGroupsGroupContactArrayInput` via:
//
//	ContactGroupsGroupContactArray{ ContactGroupsGroupContactArgs{...} }
type ContactGroupsGroupContactArrayInput interface {
	pulumi.Input

	ToContactGroupsGroupContactArrayOutput() ContactGroupsGroupContactArrayOutput
	ToContactGroupsGroupContactArrayOutputWithContext(context.Context) ContactGroupsGroupContactArrayOutput
}

type ContactGroupsGroupContactArray []ContactGroupsGroupContactInput

func (ContactGroupsGroupContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactGroupsGroupContact)(nil)).Elem()
}

func (i ContactGroupsGroupContactArray) ToContactGroupsGroupContactArrayOutput() ContactGroupsGroupContactArrayOutput {
	return i.ToContactGroupsGroupContactArrayOutputWithContext(context.Background())
}

func (i ContactGroupsGroupContactArray) ToContactGroupsGroupContactArrayOutputWithContext(ctx context.Context) ContactGroupsGroupContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactGroupsGroupContactArrayOutput)
}

type ContactGroupsGroupContactOutput struct{ *pulumi.OutputState }

func (ContactGroupsGroupContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactGroupsGroupContact)(nil)).Elem()
}

func (o ContactGroupsGroupContactOutput) ToContactGroupsGroupContactOutput() ContactGroupsGroupContactOutput {
	return o
}

func (o ContactGroupsGroupContactOutput) ToContactGroupsGroupContactOutputWithContext(ctx context.Context) ContactGroupsGroupContactOutput {
	return o
}

// The email of contact.
func (o ContactGroupsGroupContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsGroupContact) string { return v.Email }).(pulumi.StringOutput)
}

// The id of the contact group.
func (o ContactGroupsGroupContactOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsGroupContact) string { return v.Id }).(pulumi.StringOutput)
}

// Search for keywords in contact group names, supports fuzzy search.
func (o ContactGroupsGroupContactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsGroupContact) string { return v.Name }).(pulumi.StringOutput)
}

// The phone of contact.
func (o ContactGroupsGroupContactOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsGroupContact) string { return v.Phone }).(pulumi.StringOutput)
}

type ContactGroupsGroupContactArrayOutput struct{ *pulumi.OutputState }

func (ContactGroupsGroupContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactGroupsGroupContact)(nil)).Elem()
}

func (o ContactGroupsGroupContactArrayOutput) ToContactGroupsGroupContactArrayOutput() ContactGroupsGroupContactArrayOutput {
	return o
}

func (o ContactGroupsGroupContactArrayOutput) ToContactGroupsGroupContactArrayOutputWithContext(ctx context.Context) ContactGroupsGroupContactArrayOutput {
	return o
}

func (o ContactGroupsGroupContactArrayOutput) Index(i pulumi.IntInput) ContactGroupsGroupContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactGroupsGroupContact {
		return vs[0].([]ContactGroupsGroupContact)[vs[1].(int)]
	}).(ContactGroupsGroupContactOutput)
}

type ContactsContact struct {
	// The email of contact.
	Email string `pulumi:"email"`
	// The ID of contact.
	Id string `pulumi:"id"`
	// The name of contact.
	Name string `pulumi:"name"`
	// The phone of contact.
	Phone string `pulumi:"phone"`
}

// ContactsContactInput is an input type that accepts ContactsContactArgs and ContactsContactOutput values.
// You can construct a concrete instance of `ContactsContactInput` via:
//
//	ContactsContactArgs{...}
type ContactsContactInput interface {
	pulumi.Input

	ToContactsContactOutput() ContactsContactOutput
	ToContactsContactOutputWithContext(context.Context) ContactsContactOutput
}

type ContactsContactArgs struct {
	// The email of contact.
	Email pulumi.StringInput `pulumi:"email"`
	// The ID of contact.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of contact.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone of contact.
	Phone pulumi.StringInput `pulumi:"phone"`
}

func (ContactsContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactsContact)(nil)).Elem()
}

func (i ContactsContactArgs) ToContactsContactOutput() ContactsContactOutput {
	return i.ToContactsContactOutputWithContext(context.Background())
}

func (i ContactsContactArgs) ToContactsContactOutputWithContext(ctx context.Context) ContactsContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsContactOutput)
}

// ContactsContactArrayInput is an input type that accepts ContactsContactArray and ContactsContactArrayOutput values.
// You can construct a concrete instance of `ContactsContactArrayInput` via:
//
//	ContactsContactArray{ ContactsContactArgs{...} }
type ContactsContactArrayInput interface {
	pulumi.Input

	ToContactsContactArrayOutput() ContactsContactArrayOutput
	ToContactsContactArrayOutputWithContext(context.Context) ContactsContactArrayOutput
}

type ContactsContactArray []ContactsContactInput

func (ContactsContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactsContact)(nil)).Elem()
}

func (i ContactsContactArray) ToContactsContactArrayOutput() ContactsContactArrayOutput {
	return i.ToContactsContactArrayOutputWithContext(context.Background())
}

func (i ContactsContactArray) ToContactsContactArrayOutputWithContext(ctx context.Context) ContactsContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsContactArrayOutput)
}

type ContactsContactOutput struct{ *pulumi.OutputState }

func (ContactsContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactsContact)(nil)).Elem()
}

func (o ContactsContactOutput) ToContactsContactOutput() ContactsContactOutput {
	return o
}

func (o ContactsContactOutput) ToContactsContactOutputWithContext(ctx context.Context) ContactsContactOutput {
	return o
}

// The email of contact.
func (o ContactsContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ContactsContact) string { return v.Email }).(pulumi.StringOutput)
}

// The ID of contact.
func (o ContactsContactOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ContactsContact) string { return v.Id }).(pulumi.StringOutput)
}

// The name of contact.
func (o ContactsContactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContactsContact) string { return v.Name }).(pulumi.StringOutput)
}

// The phone of contact.
func (o ContactsContactOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v ContactsContact) string { return v.Phone }).(pulumi.StringOutput)
}

type ContactsContactArrayOutput struct{ *pulumi.OutputState }

func (ContactsContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactsContact)(nil)).Elem()
}

func (o ContactsContactArrayOutput) ToContactsContactArrayOutput() ContactsContactArrayOutput {
	return o
}

func (o ContactsContactArrayOutput) ToContactsContactArrayOutputWithContext(ctx context.Context) ContactsContactArrayOutput {
	return o
}

func (o ContactsContactArrayOutput) Index(i pulumi.IntInput) ContactsContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactsContact {
		return vs[0].([]ContactsContact)[vs[1].(int)]
	}).(ContactsContactOutput)
}

type EventRuleEffectiveTime struct {
	// End time for rule activation.
	EndTime string `pulumi:"endTime"`
	// Start time for rule activation.
	StartTime string `pulumi:"startTime"`
}

// EventRuleEffectiveTimeInput is an input type that accepts EventRuleEffectiveTimeArgs and EventRuleEffectiveTimeOutput values.
// You can construct a concrete instance of `EventRuleEffectiveTimeInput` via:
//
//	EventRuleEffectiveTimeArgs{...}
type EventRuleEffectiveTimeInput interface {
	pulumi.Input

	ToEventRuleEffectiveTimeOutput() EventRuleEffectiveTimeOutput
	ToEventRuleEffectiveTimeOutputWithContext(context.Context) EventRuleEffectiveTimeOutput
}

type EventRuleEffectiveTimeArgs struct {
	// End time for rule activation.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Start time for rule activation.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (EventRuleEffectiveTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRuleEffectiveTime)(nil)).Elem()
}

func (i EventRuleEffectiveTimeArgs) ToEventRuleEffectiveTimeOutput() EventRuleEffectiveTimeOutput {
	return i.ToEventRuleEffectiveTimeOutputWithContext(context.Background())
}

func (i EventRuleEffectiveTimeArgs) ToEventRuleEffectiveTimeOutputWithContext(ctx context.Context) EventRuleEffectiveTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleEffectiveTimeOutput)
}

func (i EventRuleEffectiveTimeArgs) ToEventRuleEffectiveTimePtrOutput() EventRuleEffectiveTimePtrOutput {
	return i.ToEventRuleEffectiveTimePtrOutputWithContext(context.Background())
}

func (i EventRuleEffectiveTimeArgs) ToEventRuleEffectiveTimePtrOutputWithContext(ctx context.Context) EventRuleEffectiveTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleEffectiveTimeOutput).ToEventRuleEffectiveTimePtrOutputWithContext(ctx)
}

// EventRuleEffectiveTimePtrInput is an input type that accepts EventRuleEffectiveTimeArgs, EventRuleEffectiveTimePtr and EventRuleEffectiveTimePtrOutput values.
// You can construct a concrete instance of `EventRuleEffectiveTimePtrInput` via:
//
//	        EventRuleEffectiveTimeArgs{...}
//
//	or:
//
//	        nil
type EventRuleEffectiveTimePtrInput interface {
	pulumi.Input

	ToEventRuleEffectiveTimePtrOutput() EventRuleEffectiveTimePtrOutput
	ToEventRuleEffectiveTimePtrOutputWithContext(context.Context) EventRuleEffectiveTimePtrOutput
}

type eventRuleEffectiveTimePtrType EventRuleEffectiveTimeArgs

func EventRuleEffectiveTimePtr(v *EventRuleEffectiveTimeArgs) EventRuleEffectiveTimePtrInput {
	return (*eventRuleEffectiveTimePtrType)(v)
}

func (*eventRuleEffectiveTimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventRuleEffectiveTime)(nil)).Elem()
}

func (i *eventRuleEffectiveTimePtrType) ToEventRuleEffectiveTimePtrOutput() EventRuleEffectiveTimePtrOutput {
	return i.ToEventRuleEffectiveTimePtrOutputWithContext(context.Background())
}

func (i *eventRuleEffectiveTimePtrType) ToEventRuleEffectiveTimePtrOutputWithContext(ctx context.Context) EventRuleEffectiveTimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleEffectiveTimePtrOutput)
}

type EventRuleEffectiveTimeOutput struct{ *pulumi.OutputState }

func (EventRuleEffectiveTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRuleEffectiveTime)(nil)).Elem()
}

func (o EventRuleEffectiveTimeOutput) ToEventRuleEffectiveTimeOutput() EventRuleEffectiveTimeOutput {
	return o
}

func (o EventRuleEffectiveTimeOutput) ToEventRuleEffectiveTimeOutputWithContext(ctx context.Context) EventRuleEffectiveTimeOutput {
	return o
}

func (o EventRuleEffectiveTimeOutput) ToEventRuleEffectiveTimePtrOutput() EventRuleEffectiveTimePtrOutput {
	return o.ToEventRuleEffectiveTimePtrOutputWithContext(context.Background())
}

func (o EventRuleEffectiveTimeOutput) ToEventRuleEffectiveTimePtrOutputWithContext(ctx context.Context) EventRuleEffectiveTimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventRuleEffectiveTime) *EventRuleEffectiveTime {
		return &v
	}).(EventRuleEffectiveTimePtrOutput)
}

// End time for rule activation.
func (o EventRuleEffectiveTimeOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleEffectiveTime) string { return v.EndTime }).(pulumi.StringOutput)
}

// Start time for rule activation.
func (o EventRuleEffectiveTimeOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleEffectiveTime) string { return v.StartTime }).(pulumi.StringOutput)
}

type EventRuleEffectiveTimePtrOutput struct{ *pulumi.OutputState }

func (EventRuleEffectiveTimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventRuleEffectiveTime)(nil)).Elem()
}

func (o EventRuleEffectiveTimePtrOutput) ToEventRuleEffectiveTimePtrOutput() EventRuleEffectiveTimePtrOutput {
	return o
}

func (o EventRuleEffectiveTimePtrOutput) ToEventRuleEffectiveTimePtrOutputWithContext(ctx context.Context) EventRuleEffectiveTimePtrOutput {
	return o
}

func (o EventRuleEffectiveTimePtrOutput) Elem() EventRuleEffectiveTimeOutput {
	return o.ApplyT(func(v *EventRuleEffectiveTime) EventRuleEffectiveTime {
		if v != nil {
			return *v
		}
		var ret EventRuleEffectiveTime
		return ret
	}).(EventRuleEffectiveTimeOutput)
}

// End time for rule activation.
func (o EventRuleEffectiveTimePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventRuleEffectiveTime) *string {
		if v == nil {
			return nil
		}
		return &v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Start time for rule activation.
func (o EventRuleEffectiveTimePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventRuleEffectiveTime) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

type EventRuleFilterPattern struct {
	// Event source corresponding to pattern matching.
	Source string `pulumi:"source"`
	// The list of corresponding event types in pattern matching, currently set to match any.
	Types []string `pulumi:"types"`
}

// EventRuleFilterPatternInput is an input type that accepts EventRuleFilterPatternArgs and EventRuleFilterPatternOutput values.
// You can construct a concrete instance of `EventRuleFilterPatternInput` via:
//
//	EventRuleFilterPatternArgs{...}
type EventRuleFilterPatternInput interface {
	pulumi.Input

	ToEventRuleFilterPatternOutput() EventRuleFilterPatternOutput
	ToEventRuleFilterPatternOutputWithContext(context.Context) EventRuleFilterPatternOutput
}

type EventRuleFilterPatternArgs struct {
	// Event source corresponding to pattern matching.
	Source pulumi.StringInput `pulumi:"source"`
	// The list of corresponding event types in pattern matching, currently set to match any.
	Types pulumi.StringArrayInput `pulumi:"types"`
}

func (EventRuleFilterPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRuleFilterPattern)(nil)).Elem()
}

func (i EventRuleFilterPatternArgs) ToEventRuleFilterPatternOutput() EventRuleFilterPatternOutput {
	return i.ToEventRuleFilterPatternOutputWithContext(context.Background())
}

func (i EventRuleFilterPatternArgs) ToEventRuleFilterPatternOutputWithContext(ctx context.Context) EventRuleFilterPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleFilterPatternOutput)
}

func (i EventRuleFilterPatternArgs) ToEventRuleFilterPatternPtrOutput() EventRuleFilterPatternPtrOutput {
	return i.ToEventRuleFilterPatternPtrOutputWithContext(context.Background())
}

func (i EventRuleFilterPatternArgs) ToEventRuleFilterPatternPtrOutputWithContext(ctx context.Context) EventRuleFilterPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleFilterPatternOutput).ToEventRuleFilterPatternPtrOutputWithContext(ctx)
}

// EventRuleFilterPatternPtrInput is an input type that accepts EventRuleFilterPatternArgs, EventRuleFilterPatternPtr and EventRuleFilterPatternPtrOutput values.
// You can construct a concrete instance of `EventRuleFilterPatternPtrInput` via:
//
//	        EventRuleFilterPatternArgs{...}
//
//	or:
//
//	        nil
type EventRuleFilterPatternPtrInput interface {
	pulumi.Input

	ToEventRuleFilterPatternPtrOutput() EventRuleFilterPatternPtrOutput
	ToEventRuleFilterPatternPtrOutputWithContext(context.Context) EventRuleFilterPatternPtrOutput
}

type eventRuleFilterPatternPtrType EventRuleFilterPatternArgs

func EventRuleFilterPatternPtr(v *EventRuleFilterPatternArgs) EventRuleFilterPatternPtrInput {
	return (*eventRuleFilterPatternPtrType)(v)
}

func (*eventRuleFilterPatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventRuleFilterPattern)(nil)).Elem()
}

func (i *eventRuleFilterPatternPtrType) ToEventRuleFilterPatternPtrOutput() EventRuleFilterPatternPtrOutput {
	return i.ToEventRuleFilterPatternPtrOutputWithContext(context.Background())
}

func (i *eventRuleFilterPatternPtrType) ToEventRuleFilterPatternPtrOutputWithContext(ctx context.Context) EventRuleFilterPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleFilterPatternPtrOutput)
}

type EventRuleFilterPatternOutput struct{ *pulumi.OutputState }

func (EventRuleFilterPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRuleFilterPattern)(nil)).Elem()
}

func (o EventRuleFilterPatternOutput) ToEventRuleFilterPatternOutput() EventRuleFilterPatternOutput {
	return o
}

func (o EventRuleFilterPatternOutput) ToEventRuleFilterPatternOutputWithContext(ctx context.Context) EventRuleFilterPatternOutput {
	return o
}

func (o EventRuleFilterPatternOutput) ToEventRuleFilterPatternPtrOutput() EventRuleFilterPatternPtrOutput {
	return o.ToEventRuleFilterPatternPtrOutputWithContext(context.Background())
}

func (o EventRuleFilterPatternOutput) ToEventRuleFilterPatternPtrOutputWithContext(ctx context.Context) EventRuleFilterPatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventRuleFilterPattern) *EventRuleFilterPattern {
		return &v
	}).(EventRuleFilterPatternPtrOutput)
}

// Event source corresponding to pattern matching.
func (o EventRuleFilterPatternOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleFilterPattern) string { return v.Source }).(pulumi.StringOutput)
}

// The list of corresponding event types in pattern matching, currently set to match any.
func (o EventRuleFilterPatternOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventRuleFilterPattern) []string { return v.Types }).(pulumi.StringArrayOutput)
}

type EventRuleFilterPatternPtrOutput struct{ *pulumi.OutputState }

func (EventRuleFilterPatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventRuleFilterPattern)(nil)).Elem()
}

func (o EventRuleFilterPatternPtrOutput) ToEventRuleFilterPatternPtrOutput() EventRuleFilterPatternPtrOutput {
	return o
}

func (o EventRuleFilterPatternPtrOutput) ToEventRuleFilterPatternPtrOutputWithContext(ctx context.Context) EventRuleFilterPatternPtrOutput {
	return o
}

func (o EventRuleFilterPatternPtrOutput) Elem() EventRuleFilterPatternOutput {
	return o.ApplyT(func(v *EventRuleFilterPattern) EventRuleFilterPattern {
		if v != nil {
			return *v
		}
		var ret EventRuleFilterPattern
		return ret
	}).(EventRuleFilterPatternOutput)
}

// Event source corresponding to pattern matching.
func (o EventRuleFilterPatternPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventRuleFilterPattern) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

// The list of corresponding event types in pattern matching, currently set to match any.
func (o EventRuleFilterPatternPtrOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventRuleFilterPattern) []string {
		if v == nil {
			return nil
		}
		return v.Types
	}).(pulumi.StringArrayOutput)
}

type EventRuleMessageQueue struct {
	// The kafka instance id.
	InstanceId string `pulumi:"instanceId"`
	// The region.
	Region string `pulumi:"region"`
	// The topic name.
	Topic string `pulumi:"topic"`
	// The message queue type, only support kafka now.
	Type string `pulumi:"type"`
	// The vpc id.
	VpcId string `pulumi:"vpcId"`
}

// EventRuleMessageQueueInput is an input type that accepts EventRuleMessageQueueArgs and EventRuleMessageQueueOutput values.
// You can construct a concrete instance of `EventRuleMessageQueueInput` via:
//
//	EventRuleMessageQueueArgs{...}
type EventRuleMessageQueueInput interface {
	pulumi.Input

	ToEventRuleMessageQueueOutput() EventRuleMessageQueueOutput
	ToEventRuleMessageQueueOutputWithContext(context.Context) EventRuleMessageQueueOutput
}

type EventRuleMessageQueueArgs struct {
	// The kafka instance id.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The region.
	Region pulumi.StringInput `pulumi:"region"`
	// The topic name.
	Topic pulumi.StringInput `pulumi:"topic"`
	// The message queue type, only support kafka now.
	Type pulumi.StringInput `pulumi:"type"`
	// The vpc id.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (EventRuleMessageQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRuleMessageQueue)(nil)).Elem()
}

func (i EventRuleMessageQueueArgs) ToEventRuleMessageQueueOutput() EventRuleMessageQueueOutput {
	return i.ToEventRuleMessageQueueOutputWithContext(context.Background())
}

func (i EventRuleMessageQueueArgs) ToEventRuleMessageQueueOutputWithContext(ctx context.Context) EventRuleMessageQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleMessageQueueOutput)
}

// EventRuleMessageQueueArrayInput is an input type that accepts EventRuleMessageQueueArray and EventRuleMessageQueueArrayOutput values.
// You can construct a concrete instance of `EventRuleMessageQueueArrayInput` via:
//
//	EventRuleMessageQueueArray{ EventRuleMessageQueueArgs{...} }
type EventRuleMessageQueueArrayInput interface {
	pulumi.Input

	ToEventRuleMessageQueueArrayOutput() EventRuleMessageQueueArrayOutput
	ToEventRuleMessageQueueArrayOutputWithContext(context.Context) EventRuleMessageQueueArrayOutput
}

type EventRuleMessageQueueArray []EventRuleMessageQueueInput

func (EventRuleMessageQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRuleMessageQueue)(nil)).Elem()
}

func (i EventRuleMessageQueueArray) ToEventRuleMessageQueueArrayOutput() EventRuleMessageQueueArrayOutput {
	return i.ToEventRuleMessageQueueArrayOutputWithContext(context.Background())
}

func (i EventRuleMessageQueueArray) ToEventRuleMessageQueueArrayOutputWithContext(ctx context.Context) EventRuleMessageQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleMessageQueueArrayOutput)
}

type EventRuleMessageQueueOutput struct{ *pulumi.OutputState }

func (EventRuleMessageQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRuleMessageQueue)(nil)).Elem()
}

func (o EventRuleMessageQueueOutput) ToEventRuleMessageQueueOutput() EventRuleMessageQueueOutput {
	return o
}

func (o EventRuleMessageQueueOutput) ToEventRuleMessageQueueOutputWithContext(ctx context.Context) EventRuleMessageQueueOutput {
	return o
}

// The kafka instance id.
func (o EventRuleMessageQueueOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleMessageQueue) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The region.
func (o EventRuleMessageQueueOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleMessageQueue) string { return v.Region }).(pulumi.StringOutput)
}

// The topic name.
func (o EventRuleMessageQueueOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleMessageQueue) string { return v.Topic }).(pulumi.StringOutput)
}

// The message queue type, only support kafka now.
func (o EventRuleMessageQueueOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleMessageQueue) string { return v.Type }).(pulumi.StringOutput)
}

// The vpc id.
func (o EventRuleMessageQueueOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleMessageQueue) string { return v.VpcId }).(pulumi.StringOutput)
}

type EventRuleMessageQueueArrayOutput struct{ *pulumi.OutputState }

func (EventRuleMessageQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRuleMessageQueue)(nil)).Elem()
}

func (o EventRuleMessageQueueArrayOutput) ToEventRuleMessageQueueArrayOutput() EventRuleMessageQueueArrayOutput {
	return o
}

func (o EventRuleMessageQueueArrayOutput) ToEventRuleMessageQueueArrayOutputWithContext(ctx context.Context) EventRuleMessageQueueArrayOutput {
	return o
}

func (o EventRuleMessageQueueArrayOutput) Index(i pulumi.IntInput) EventRuleMessageQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventRuleMessageQueue {
		return vs[0].([]EventRuleMessageQueue)[vs[1].(int)]
	}).(EventRuleMessageQueueOutput)
}

type EventRuleTlsTarget struct {
	// The project id.
	ProjectId string `pulumi:"projectId"`
	// The project name.
	ProjectName string `pulumi:"projectName"`
	// The Chinese region name.
	RegionNameCn string `pulumi:"regionNameCn"`
	// The English region name.
	RegionNameEn string `pulumi:"regionNameEn"`
	// The topic id.
	TopicId string `pulumi:"topicId"`
}

// EventRuleTlsTargetInput is an input type that accepts EventRuleTlsTargetArgs and EventRuleTlsTargetOutput values.
// You can construct a concrete instance of `EventRuleTlsTargetInput` via:
//
//	EventRuleTlsTargetArgs{...}
type EventRuleTlsTargetInput interface {
	pulumi.Input

	ToEventRuleTlsTargetOutput() EventRuleTlsTargetOutput
	ToEventRuleTlsTargetOutputWithContext(context.Context) EventRuleTlsTargetOutput
}

type EventRuleTlsTargetArgs struct {
	// The project id.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The project name.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The Chinese region name.
	RegionNameCn pulumi.StringInput `pulumi:"regionNameCn"`
	// The English region name.
	RegionNameEn pulumi.StringInput `pulumi:"regionNameEn"`
	// The topic id.
	TopicId pulumi.StringInput `pulumi:"topicId"`
}

func (EventRuleTlsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRuleTlsTarget)(nil)).Elem()
}

func (i EventRuleTlsTargetArgs) ToEventRuleTlsTargetOutput() EventRuleTlsTargetOutput {
	return i.ToEventRuleTlsTargetOutputWithContext(context.Background())
}

func (i EventRuleTlsTargetArgs) ToEventRuleTlsTargetOutputWithContext(ctx context.Context) EventRuleTlsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleTlsTargetOutput)
}

// EventRuleTlsTargetArrayInput is an input type that accepts EventRuleTlsTargetArray and EventRuleTlsTargetArrayOutput values.
// You can construct a concrete instance of `EventRuleTlsTargetArrayInput` via:
//
//	EventRuleTlsTargetArray{ EventRuleTlsTargetArgs{...} }
type EventRuleTlsTargetArrayInput interface {
	pulumi.Input

	ToEventRuleTlsTargetArrayOutput() EventRuleTlsTargetArrayOutput
	ToEventRuleTlsTargetArrayOutputWithContext(context.Context) EventRuleTlsTargetArrayOutput
}

type EventRuleTlsTargetArray []EventRuleTlsTargetInput

func (EventRuleTlsTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRuleTlsTarget)(nil)).Elem()
}

func (i EventRuleTlsTargetArray) ToEventRuleTlsTargetArrayOutput() EventRuleTlsTargetArrayOutput {
	return i.ToEventRuleTlsTargetArrayOutputWithContext(context.Background())
}

func (i EventRuleTlsTargetArray) ToEventRuleTlsTargetArrayOutputWithContext(ctx context.Context) EventRuleTlsTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRuleTlsTargetArrayOutput)
}

type EventRuleTlsTargetOutput struct{ *pulumi.OutputState }

func (EventRuleTlsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRuleTlsTarget)(nil)).Elem()
}

func (o EventRuleTlsTargetOutput) ToEventRuleTlsTargetOutput() EventRuleTlsTargetOutput {
	return o
}

func (o EventRuleTlsTargetOutput) ToEventRuleTlsTargetOutputWithContext(ctx context.Context) EventRuleTlsTargetOutput {
	return o
}

// The project id.
func (o EventRuleTlsTargetOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleTlsTarget) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The project name.
func (o EventRuleTlsTargetOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleTlsTarget) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The Chinese region name.
func (o EventRuleTlsTargetOutput) RegionNameCn() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleTlsTarget) string { return v.RegionNameCn }).(pulumi.StringOutput)
}

// The English region name.
func (o EventRuleTlsTargetOutput) RegionNameEn() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleTlsTarget) string { return v.RegionNameEn }).(pulumi.StringOutput)
}

// The topic id.
func (o EventRuleTlsTargetOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v EventRuleTlsTarget) string { return v.TopicId }).(pulumi.StringOutput)
}

type EventRuleTlsTargetArrayOutput struct{ *pulumi.OutputState }

func (EventRuleTlsTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRuleTlsTarget)(nil)).Elem()
}

func (o EventRuleTlsTargetArrayOutput) ToEventRuleTlsTargetArrayOutput() EventRuleTlsTargetArrayOutput {
	return o
}

func (o EventRuleTlsTargetArrayOutput) ToEventRuleTlsTargetArrayOutputWithContext(ctx context.Context) EventRuleTlsTargetArrayOutput {
	return o
}

func (o EventRuleTlsTargetArrayOutput) Index(i pulumi.IntInput) EventRuleTlsTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventRuleTlsTarget {
		return vs[0].([]EventRuleTlsTarget)[vs[1].(int)]
	}).(EventRuleTlsTargetOutput)
}

type EventRulesRule struct {
	// The id of the account.
	AccountId string `pulumi:"accountId"`
	// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
	ContactGroupIds []string `pulumi:"contactGroupIds"`
	// List of contact methods.
	ContactMethods []string `pulumi:"contactMethods"`
	// The create time.
	CreatedAt int `pulumi:"createdAt"`
	// The description of the rule.
	Description string `pulumi:"description"`
	// The end time of the rule.
	EffectEndAt string `pulumi:"effectEndAt"`
	// The start time of the rule.
	EffectStartAt string `pulumi:"effectStartAt"`
	// When the alarm notification method is alarm callback, it triggers the callback address.
	Endpoint string `pulumi:"endpoint"`
	// The name of the event bus.
	EventBusName string `pulumi:"eventBusName"`
	// The source of the event.
	EventSource string `pulumi:"eventSource"`
	// The event type.
	EventTypes []string `pulumi:"eventTypes"`
	// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
	FilterPatterns []EventRulesRuleFilterPattern `pulumi:"filterPatterns"`
	// The id of the rule.
	Id string `pulumi:"id"`
	// The level of the rule.
	Level string `pulumi:"level"`
	// The triggered message queue when the alarm notification method is Kafka message queue.
	MessageQueues []EventRulesRuleMessageQueue `pulumi:"messageQueues"`
	// The name of the region.
	Region string `pulumi:"region"`
	// The id of the rule.
	RuleId string `pulumi:"ruleId"`
	// Rule name, search rules by name using fuzzy search.
	RuleName string `pulumi:"ruleName"`
	// Enable the state of the rule.
	Status string `pulumi:"status"`
	// The alarm method for log service triggers the configuration of the log service.
	TlsTargets []EventRulesRuleTlsTarget `pulumi:"tlsTargets"`
	// The updated time.
	UpdatedAt int `pulumi:"updatedAt"`
}

// EventRulesRuleInput is an input type that accepts EventRulesRuleArgs and EventRulesRuleOutput values.
// You can construct a concrete instance of `EventRulesRuleInput` via:
//
//	EventRulesRuleArgs{...}
type EventRulesRuleInput interface {
	pulumi.Input

	ToEventRulesRuleOutput() EventRulesRuleOutput
	ToEventRulesRuleOutputWithContext(context.Context) EventRulesRuleOutput
}

type EventRulesRuleArgs struct {
	// The id of the account.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
	ContactGroupIds pulumi.StringArrayInput `pulumi:"contactGroupIds"`
	// List of contact methods.
	ContactMethods pulumi.StringArrayInput `pulumi:"contactMethods"`
	// The create time.
	CreatedAt pulumi.IntInput `pulumi:"createdAt"`
	// The description of the rule.
	Description pulumi.StringInput `pulumi:"description"`
	// The end time of the rule.
	EffectEndAt pulumi.StringInput `pulumi:"effectEndAt"`
	// The start time of the rule.
	EffectStartAt pulumi.StringInput `pulumi:"effectStartAt"`
	// When the alarm notification method is alarm callback, it triggers the callback address.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The name of the event bus.
	EventBusName pulumi.StringInput `pulumi:"eventBusName"`
	// The source of the event.
	EventSource pulumi.StringInput `pulumi:"eventSource"`
	// The event type.
	EventTypes pulumi.StringArrayInput `pulumi:"eventTypes"`
	// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
	FilterPatterns EventRulesRuleFilterPatternArrayInput `pulumi:"filterPatterns"`
	// The id of the rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The level of the rule.
	Level pulumi.StringInput `pulumi:"level"`
	// The triggered message queue when the alarm notification method is Kafka message queue.
	MessageQueues EventRulesRuleMessageQueueArrayInput `pulumi:"messageQueues"`
	// The name of the region.
	Region pulumi.StringInput `pulumi:"region"`
	// The id of the rule.
	RuleId pulumi.StringInput `pulumi:"ruleId"`
	// Rule name, search rules by name using fuzzy search.
	RuleName pulumi.StringInput `pulumi:"ruleName"`
	// Enable the state of the rule.
	Status pulumi.StringInput `pulumi:"status"`
	// The alarm method for log service triggers the configuration of the log service.
	TlsTargets EventRulesRuleTlsTargetArrayInput `pulumi:"tlsTargets"`
	// The updated time.
	UpdatedAt pulumi.IntInput `pulumi:"updatedAt"`
}

func (EventRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRulesRule)(nil)).Elem()
}

func (i EventRulesRuleArgs) ToEventRulesRuleOutput() EventRulesRuleOutput {
	return i.ToEventRulesRuleOutputWithContext(context.Background())
}

func (i EventRulesRuleArgs) ToEventRulesRuleOutputWithContext(ctx context.Context) EventRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRulesRuleOutput)
}

// EventRulesRuleArrayInput is an input type that accepts EventRulesRuleArray and EventRulesRuleArrayOutput values.
// You can construct a concrete instance of `EventRulesRuleArrayInput` via:
//
//	EventRulesRuleArray{ EventRulesRuleArgs{...} }
type EventRulesRuleArrayInput interface {
	pulumi.Input

	ToEventRulesRuleArrayOutput() EventRulesRuleArrayOutput
	ToEventRulesRuleArrayOutputWithContext(context.Context) EventRulesRuleArrayOutput
}

type EventRulesRuleArray []EventRulesRuleInput

func (EventRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRulesRule)(nil)).Elem()
}

func (i EventRulesRuleArray) ToEventRulesRuleArrayOutput() EventRulesRuleArrayOutput {
	return i.ToEventRulesRuleArrayOutputWithContext(context.Background())
}

func (i EventRulesRuleArray) ToEventRulesRuleArrayOutputWithContext(ctx context.Context) EventRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRulesRuleArrayOutput)
}

type EventRulesRuleOutput struct{ *pulumi.OutputState }

func (EventRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRulesRule)(nil)).Elem()
}

func (o EventRulesRuleOutput) ToEventRulesRuleOutput() EventRulesRuleOutput {
	return o
}

func (o EventRulesRuleOutput) ToEventRulesRuleOutputWithContext(ctx context.Context) EventRulesRuleOutput {
	return o
}

// The id of the account.
func (o EventRulesRuleOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.AccountId }).(pulumi.StringOutput)
}

// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
func (o EventRulesRuleOutput) ContactGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventRulesRule) []string { return v.ContactGroupIds }).(pulumi.StringArrayOutput)
}

// List of contact methods.
func (o EventRulesRuleOutput) ContactMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventRulesRule) []string { return v.ContactMethods }).(pulumi.StringArrayOutput)
}

// The create time.
func (o EventRulesRuleOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v EventRulesRule) int { return v.CreatedAt }).(pulumi.IntOutput)
}

// The description of the rule.
func (o EventRulesRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.Description }).(pulumi.StringOutput)
}

// The end time of the rule.
func (o EventRulesRuleOutput) EffectEndAt() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.EffectEndAt }).(pulumi.StringOutput)
}

// The start time of the rule.
func (o EventRulesRuleOutput) EffectStartAt() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.EffectStartAt }).(pulumi.StringOutput)
}

// When the alarm notification method is alarm callback, it triggers the callback address.
func (o EventRulesRuleOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The name of the event bus.
func (o EventRulesRuleOutput) EventBusName() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.EventBusName }).(pulumi.StringOutput)
}

// The source of the event.
func (o EventRulesRuleOutput) EventSource() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.EventSource }).(pulumi.StringOutput)
}

// The event type.
func (o EventRulesRuleOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventRulesRule) []string { return v.EventTypes }).(pulumi.StringArrayOutput)
}

// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
func (o EventRulesRuleOutput) FilterPatterns() EventRulesRuleFilterPatternArrayOutput {
	return o.ApplyT(func(v EventRulesRule) []EventRulesRuleFilterPattern { return v.FilterPatterns }).(EventRulesRuleFilterPatternArrayOutput)
}

// The id of the rule.
func (o EventRulesRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.Id }).(pulumi.StringOutput)
}

// The level of the rule.
func (o EventRulesRuleOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.Level }).(pulumi.StringOutput)
}

// The triggered message queue when the alarm notification method is Kafka message queue.
func (o EventRulesRuleOutput) MessageQueues() EventRulesRuleMessageQueueArrayOutput {
	return o.ApplyT(func(v EventRulesRule) []EventRulesRuleMessageQueue { return v.MessageQueues }).(EventRulesRuleMessageQueueArrayOutput)
}

// The name of the region.
func (o EventRulesRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.Region }).(pulumi.StringOutput)
}

// The id of the rule.
func (o EventRulesRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.RuleId }).(pulumi.StringOutput)
}

// Rule name, search rules by name using fuzzy search.
func (o EventRulesRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.RuleName }).(pulumi.StringOutput)
}

// Enable the state of the rule.
func (o EventRulesRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRule) string { return v.Status }).(pulumi.StringOutput)
}

// The alarm method for log service triggers the configuration of the log service.
func (o EventRulesRuleOutput) TlsTargets() EventRulesRuleTlsTargetArrayOutput {
	return o.ApplyT(func(v EventRulesRule) []EventRulesRuleTlsTarget { return v.TlsTargets }).(EventRulesRuleTlsTargetArrayOutput)
}

// The updated time.
func (o EventRulesRuleOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v EventRulesRule) int { return v.UpdatedAt }).(pulumi.IntOutput)
}

type EventRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (EventRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRulesRule)(nil)).Elem()
}

func (o EventRulesRuleArrayOutput) ToEventRulesRuleArrayOutput() EventRulesRuleArrayOutput {
	return o
}

func (o EventRulesRuleArrayOutput) ToEventRulesRuleArrayOutputWithContext(ctx context.Context) EventRulesRuleArrayOutput {
	return o
}

func (o EventRulesRuleArrayOutput) Index(i pulumi.IntInput) EventRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventRulesRule {
		return vs[0].([]EventRulesRule)[vs[1].(int)]
	}).(EventRulesRuleOutput)
}

type EventRulesRuleFilterPattern struct {
	// Event source.
	Source string `pulumi:"source"`
	// The message queue type, only support kafka now.
	Types []string `pulumi:"types"`
}

// EventRulesRuleFilterPatternInput is an input type that accepts EventRulesRuleFilterPatternArgs and EventRulesRuleFilterPatternOutput values.
// You can construct a concrete instance of `EventRulesRuleFilterPatternInput` via:
//
//	EventRulesRuleFilterPatternArgs{...}
type EventRulesRuleFilterPatternInput interface {
	pulumi.Input

	ToEventRulesRuleFilterPatternOutput() EventRulesRuleFilterPatternOutput
	ToEventRulesRuleFilterPatternOutputWithContext(context.Context) EventRulesRuleFilterPatternOutput
}

type EventRulesRuleFilterPatternArgs struct {
	// Event source.
	Source pulumi.StringInput `pulumi:"source"`
	// The message queue type, only support kafka now.
	Types pulumi.StringArrayInput `pulumi:"types"`
}

func (EventRulesRuleFilterPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRulesRuleFilterPattern)(nil)).Elem()
}

func (i EventRulesRuleFilterPatternArgs) ToEventRulesRuleFilterPatternOutput() EventRulesRuleFilterPatternOutput {
	return i.ToEventRulesRuleFilterPatternOutputWithContext(context.Background())
}

func (i EventRulesRuleFilterPatternArgs) ToEventRulesRuleFilterPatternOutputWithContext(ctx context.Context) EventRulesRuleFilterPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRulesRuleFilterPatternOutput)
}

// EventRulesRuleFilterPatternArrayInput is an input type that accepts EventRulesRuleFilterPatternArray and EventRulesRuleFilterPatternArrayOutput values.
// You can construct a concrete instance of `EventRulesRuleFilterPatternArrayInput` via:
//
//	EventRulesRuleFilterPatternArray{ EventRulesRuleFilterPatternArgs{...} }
type EventRulesRuleFilterPatternArrayInput interface {
	pulumi.Input

	ToEventRulesRuleFilterPatternArrayOutput() EventRulesRuleFilterPatternArrayOutput
	ToEventRulesRuleFilterPatternArrayOutputWithContext(context.Context) EventRulesRuleFilterPatternArrayOutput
}

type EventRulesRuleFilterPatternArray []EventRulesRuleFilterPatternInput

func (EventRulesRuleFilterPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRulesRuleFilterPattern)(nil)).Elem()
}

func (i EventRulesRuleFilterPatternArray) ToEventRulesRuleFilterPatternArrayOutput() EventRulesRuleFilterPatternArrayOutput {
	return i.ToEventRulesRuleFilterPatternArrayOutputWithContext(context.Background())
}

func (i EventRulesRuleFilterPatternArray) ToEventRulesRuleFilterPatternArrayOutputWithContext(ctx context.Context) EventRulesRuleFilterPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRulesRuleFilterPatternArrayOutput)
}

type EventRulesRuleFilterPatternOutput struct{ *pulumi.OutputState }

func (EventRulesRuleFilterPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRulesRuleFilterPattern)(nil)).Elem()
}

func (o EventRulesRuleFilterPatternOutput) ToEventRulesRuleFilterPatternOutput() EventRulesRuleFilterPatternOutput {
	return o
}

func (o EventRulesRuleFilterPatternOutput) ToEventRulesRuleFilterPatternOutputWithContext(ctx context.Context) EventRulesRuleFilterPatternOutput {
	return o
}

// Event source.
func (o EventRulesRuleFilterPatternOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleFilterPattern) string { return v.Source }).(pulumi.StringOutput)
}

// The message queue type, only support kafka now.
func (o EventRulesRuleFilterPatternOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventRulesRuleFilterPattern) []string { return v.Types }).(pulumi.StringArrayOutput)
}

type EventRulesRuleFilterPatternArrayOutput struct{ *pulumi.OutputState }

func (EventRulesRuleFilterPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRulesRuleFilterPattern)(nil)).Elem()
}

func (o EventRulesRuleFilterPatternArrayOutput) ToEventRulesRuleFilterPatternArrayOutput() EventRulesRuleFilterPatternArrayOutput {
	return o
}

func (o EventRulesRuleFilterPatternArrayOutput) ToEventRulesRuleFilterPatternArrayOutputWithContext(ctx context.Context) EventRulesRuleFilterPatternArrayOutput {
	return o
}

func (o EventRulesRuleFilterPatternArrayOutput) Index(i pulumi.IntInput) EventRulesRuleFilterPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventRulesRuleFilterPattern {
		return vs[0].([]EventRulesRuleFilterPattern)[vs[1].(int)]
	}).(EventRulesRuleFilterPatternOutput)
}

type EventRulesRuleMessageQueue struct {
	// The kafka instance id.
	InstanceId string `pulumi:"instanceId"`
	// The name of the region.
	Region string `pulumi:"region"`
	// The topic name.
	Topic string `pulumi:"topic"`
	// The message queue type, only support kafka now.
	Type string `pulumi:"type"`
	// The vpc id.
	VpcId string `pulumi:"vpcId"`
}

// EventRulesRuleMessageQueueInput is an input type that accepts EventRulesRuleMessageQueueArgs and EventRulesRuleMessageQueueOutput values.
// You can construct a concrete instance of `EventRulesRuleMessageQueueInput` via:
//
//	EventRulesRuleMessageQueueArgs{...}
type EventRulesRuleMessageQueueInput interface {
	pulumi.Input

	ToEventRulesRuleMessageQueueOutput() EventRulesRuleMessageQueueOutput
	ToEventRulesRuleMessageQueueOutputWithContext(context.Context) EventRulesRuleMessageQueueOutput
}

type EventRulesRuleMessageQueueArgs struct {
	// The kafka instance id.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the region.
	Region pulumi.StringInput `pulumi:"region"`
	// The topic name.
	Topic pulumi.StringInput `pulumi:"topic"`
	// The message queue type, only support kafka now.
	Type pulumi.StringInput `pulumi:"type"`
	// The vpc id.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (EventRulesRuleMessageQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRulesRuleMessageQueue)(nil)).Elem()
}

func (i EventRulesRuleMessageQueueArgs) ToEventRulesRuleMessageQueueOutput() EventRulesRuleMessageQueueOutput {
	return i.ToEventRulesRuleMessageQueueOutputWithContext(context.Background())
}

func (i EventRulesRuleMessageQueueArgs) ToEventRulesRuleMessageQueueOutputWithContext(ctx context.Context) EventRulesRuleMessageQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRulesRuleMessageQueueOutput)
}

// EventRulesRuleMessageQueueArrayInput is an input type that accepts EventRulesRuleMessageQueueArray and EventRulesRuleMessageQueueArrayOutput values.
// You can construct a concrete instance of `EventRulesRuleMessageQueueArrayInput` via:
//
//	EventRulesRuleMessageQueueArray{ EventRulesRuleMessageQueueArgs{...} }
type EventRulesRuleMessageQueueArrayInput interface {
	pulumi.Input

	ToEventRulesRuleMessageQueueArrayOutput() EventRulesRuleMessageQueueArrayOutput
	ToEventRulesRuleMessageQueueArrayOutputWithContext(context.Context) EventRulesRuleMessageQueueArrayOutput
}

type EventRulesRuleMessageQueueArray []EventRulesRuleMessageQueueInput

func (EventRulesRuleMessageQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRulesRuleMessageQueue)(nil)).Elem()
}

func (i EventRulesRuleMessageQueueArray) ToEventRulesRuleMessageQueueArrayOutput() EventRulesRuleMessageQueueArrayOutput {
	return i.ToEventRulesRuleMessageQueueArrayOutputWithContext(context.Background())
}

func (i EventRulesRuleMessageQueueArray) ToEventRulesRuleMessageQueueArrayOutputWithContext(ctx context.Context) EventRulesRuleMessageQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRulesRuleMessageQueueArrayOutput)
}

type EventRulesRuleMessageQueueOutput struct{ *pulumi.OutputState }

func (EventRulesRuleMessageQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRulesRuleMessageQueue)(nil)).Elem()
}

func (o EventRulesRuleMessageQueueOutput) ToEventRulesRuleMessageQueueOutput() EventRulesRuleMessageQueueOutput {
	return o
}

func (o EventRulesRuleMessageQueueOutput) ToEventRulesRuleMessageQueueOutputWithContext(ctx context.Context) EventRulesRuleMessageQueueOutput {
	return o
}

// The kafka instance id.
func (o EventRulesRuleMessageQueueOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleMessageQueue) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the region.
func (o EventRulesRuleMessageQueueOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleMessageQueue) string { return v.Region }).(pulumi.StringOutput)
}

// The topic name.
func (o EventRulesRuleMessageQueueOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleMessageQueue) string { return v.Topic }).(pulumi.StringOutput)
}

// The message queue type, only support kafka now.
func (o EventRulesRuleMessageQueueOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleMessageQueue) string { return v.Type }).(pulumi.StringOutput)
}

// The vpc id.
func (o EventRulesRuleMessageQueueOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleMessageQueue) string { return v.VpcId }).(pulumi.StringOutput)
}

type EventRulesRuleMessageQueueArrayOutput struct{ *pulumi.OutputState }

func (EventRulesRuleMessageQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRulesRuleMessageQueue)(nil)).Elem()
}

func (o EventRulesRuleMessageQueueArrayOutput) ToEventRulesRuleMessageQueueArrayOutput() EventRulesRuleMessageQueueArrayOutput {
	return o
}

func (o EventRulesRuleMessageQueueArrayOutput) ToEventRulesRuleMessageQueueArrayOutputWithContext(ctx context.Context) EventRulesRuleMessageQueueArrayOutput {
	return o
}

func (o EventRulesRuleMessageQueueArrayOutput) Index(i pulumi.IntInput) EventRulesRuleMessageQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventRulesRuleMessageQueue {
		return vs[0].([]EventRulesRuleMessageQueue)[vs[1].(int)]
	}).(EventRulesRuleMessageQueueOutput)
}

type EventRulesRuleTlsTarget struct {
	// The project id.
	ProjectId string `pulumi:"projectId"`
	// The project name.
	ProjectName string `pulumi:"projectName"`
	// The Chinese region name.
	RegionNameCn string `pulumi:"regionNameCn"`
	// The English region name.
	RegionNameEn string `pulumi:"regionNameEn"`
	// The topic id.
	TopicId string `pulumi:"topicId"`
	// The topic name.
	TopicName string `pulumi:"topicName"`
}

// EventRulesRuleTlsTargetInput is an input type that accepts EventRulesRuleTlsTargetArgs and EventRulesRuleTlsTargetOutput values.
// You can construct a concrete instance of `EventRulesRuleTlsTargetInput` via:
//
//	EventRulesRuleTlsTargetArgs{...}
type EventRulesRuleTlsTargetInput interface {
	pulumi.Input

	ToEventRulesRuleTlsTargetOutput() EventRulesRuleTlsTargetOutput
	ToEventRulesRuleTlsTargetOutputWithContext(context.Context) EventRulesRuleTlsTargetOutput
}

type EventRulesRuleTlsTargetArgs struct {
	// The project id.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The project name.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The Chinese region name.
	RegionNameCn pulumi.StringInput `pulumi:"regionNameCn"`
	// The English region name.
	RegionNameEn pulumi.StringInput `pulumi:"regionNameEn"`
	// The topic id.
	TopicId pulumi.StringInput `pulumi:"topicId"`
	// The topic name.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (EventRulesRuleTlsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRulesRuleTlsTarget)(nil)).Elem()
}

func (i EventRulesRuleTlsTargetArgs) ToEventRulesRuleTlsTargetOutput() EventRulesRuleTlsTargetOutput {
	return i.ToEventRulesRuleTlsTargetOutputWithContext(context.Background())
}

func (i EventRulesRuleTlsTargetArgs) ToEventRulesRuleTlsTargetOutputWithContext(ctx context.Context) EventRulesRuleTlsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRulesRuleTlsTargetOutput)
}

// EventRulesRuleTlsTargetArrayInput is an input type that accepts EventRulesRuleTlsTargetArray and EventRulesRuleTlsTargetArrayOutput values.
// You can construct a concrete instance of `EventRulesRuleTlsTargetArrayInput` via:
//
//	EventRulesRuleTlsTargetArray{ EventRulesRuleTlsTargetArgs{...} }
type EventRulesRuleTlsTargetArrayInput interface {
	pulumi.Input

	ToEventRulesRuleTlsTargetArrayOutput() EventRulesRuleTlsTargetArrayOutput
	ToEventRulesRuleTlsTargetArrayOutputWithContext(context.Context) EventRulesRuleTlsTargetArrayOutput
}

type EventRulesRuleTlsTargetArray []EventRulesRuleTlsTargetInput

func (EventRulesRuleTlsTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRulesRuleTlsTarget)(nil)).Elem()
}

func (i EventRulesRuleTlsTargetArray) ToEventRulesRuleTlsTargetArrayOutput() EventRulesRuleTlsTargetArrayOutput {
	return i.ToEventRulesRuleTlsTargetArrayOutputWithContext(context.Background())
}

func (i EventRulesRuleTlsTargetArray) ToEventRulesRuleTlsTargetArrayOutputWithContext(ctx context.Context) EventRulesRuleTlsTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventRulesRuleTlsTargetArrayOutput)
}

type EventRulesRuleTlsTargetOutput struct{ *pulumi.OutputState }

func (EventRulesRuleTlsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRulesRuleTlsTarget)(nil)).Elem()
}

func (o EventRulesRuleTlsTargetOutput) ToEventRulesRuleTlsTargetOutput() EventRulesRuleTlsTargetOutput {
	return o
}

func (o EventRulesRuleTlsTargetOutput) ToEventRulesRuleTlsTargetOutputWithContext(ctx context.Context) EventRulesRuleTlsTargetOutput {
	return o
}

// The project id.
func (o EventRulesRuleTlsTargetOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleTlsTarget) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The project name.
func (o EventRulesRuleTlsTargetOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleTlsTarget) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The Chinese region name.
func (o EventRulesRuleTlsTargetOutput) RegionNameCn() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleTlsTarget) string { return v.RegionNameCn }).(pulumi.StringOutput)
}

// The English region name.
func (o EventRulesRuleTlsTargetOutput) RegionNameEn() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleTlsTarget) string { return v.RegionNameEn }).(pulumi.StringOutput)
}

// The topic id.
func (o EventRulesRuleTlsTargetOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleTlsTarget) string { return v.TopicId }).(pulumi.StringOutput)
}

// The topic name.
func (o EventRulesRuleTlsTargetOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesRuleTlsTarget) string { return v.TopicName }).(pulumi.StringOutput)
}

type EventRulesRuleTlsTargetArrayOutput struct{ *pulumi.OutputState }

func (EventRulesRuleTlsTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventRulesRuleTlsTarget)(nil)).Elem()
}

func (o EventRulesRuleTlsTargetArrayOutput) ToEventRulesRuleTlsTargetArrayOutput() EventRulesRuleTlsTargetArrayOutput {
	return o
}

func (o EventRulesRuleTlsTargetArrayOutput) ToEventRulesRuleTlsTargetArrayOutputWithContext(ctx context.Context) EventRulesRuleTlsTargetArrayOutput {
	return o
}

func (o EventRulesRuleTlsTargetArrayOutput) Index(i pulumi.IntInput) EventRulesRuleTlsTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventRulesRuleTlsTarget {
		return vs[0].([]EventRulesRuleTlsTarget)[vs[1].(int)]
	}).(EventRulesRuleTlsTargetOutput)
}

type RuleCondition struct {
	// The comparison operation of the cloud monitor rule. Valid values: `>`, `>=`, `<`, `<=`, `!=`, `=`.
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// The metric name of the cloud monitor rule.
	MetricName string `pulumi:"metricName"`
	// The metric unit of the cloud monitor rule.
	MetricUnit string `pulumi:"metricUnit"`
	// The period of the cloud monitor rule.
	Period *string `pulumi:"period"`
	// The statistics of the cloud monitor rule. Valid values: `avg`, `max`, `min`.
	Statistics string `pulumi:"statistics"`
	// The threshold of the cloud monitor rule.
	Threshold string `pulumi:"threshold"`
}

// RuleConditionInput is an input type that accepts RuleConditionArgs and RuleConditionOutput values.
// You can construct a concrete instance of `RuleConditionInput` via:
//
//	RuleConditionArgs{...}
type RuleConditionInput interface {
	pulumi.Input

	ToRuleConditionOutput() RuleConditionOutput
	ToRuleConditionOutputWithContext(context.Context) RuleConditionOutput
}

type RuleConditionArgs struct {
	// The comparison operation of the cloud monitor rule. Valid values: `>`, `>=`, `<`, `<=`, `!=`, `=`.
	ComparisonOperator pulumi.StringInput `pulumi:"comparisonOperator"`
	// The metric name of the cloud monitor rule.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// The metric unit of the cloud monitor rule.
	MetricUnit pulumi.StringInput `pulumi:"metricUnit"`
	// The period of the cloud monitor rule.
	Period pulumi.StringPtrInput `pulumi:"period"`
	// The statistics of the cloud monitor rule. Valid values: `avg`, `max`, `min`.
	Statistics pulumi.StringInput `pulumi:"statistics"`
	// The threshold of the cloud monitor rule.
	Threshold pulumi.StringInput `pulumi:"threshold"`
}

func (RuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleCondition)(nil)).Elem()
}

func (i RuleConditionArgs) ToRuleConditionOutput() RuleConditionOutput {
	return i.ToRuleConditionOutputWithContext(context.Background())
}

func (i RuleConditionArgs) ToRuleConditionOutputWithContext(ctx context.Context) RuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionOutput)
}

// RuleConditionArrayInput is an input type that accepts RuleConditionArray and RuleConditionArrayOutput values.
// You can construct a concrete instance of `RuleConditionArrayInput` via:
//
//	RuleConditionArray{ RuleConditionArgs{...} }
type RuleConditionArrayInput interface {
	pulumi.Input

	ToRuleConditionArrayOutput() RuleConditionArrayOutput
	ToRuleConditionArrayOutputWithContext(context.Context) RuleConditionArrayOutput
}

type RuleConditionArray []RuleConditionInput

func (RuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleCondition)(nil)).Elem()
}

func (i RuleConditionArray) ToRuleConditionArrayOutput() RuleConditionArrayOutput {
	return i.ToRuleConditionArrayOutputWithContext(context.Background())
}

func (i RuleConditionArray) ToRuleConditionArrayOutputWithContext(ctx context.Context) RuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionArrayOutput)
}

type RuleConditionOutput struct{ *pulumi.OutputState }

func (RuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleCondition)(nil)).Elem()
}

func (o RuleConditionOutput) ToRuleConditionOutput() RuleConditionOutput {
	return o
}

func (o RuleConditionOutput) ToRuleConditionOutputWithContext(ctx context.Context) RuleConditionOutput {
	return o
}

// The comparison operation of the cloud monitor rule. Valid values: `>`, `>=`, `<`, `<=`, `!=`, `=`.
func (o RuleConditionOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func(v RuleCondition) string { return v.ComparisonOperator }).(pulumi.StringOutput)
}

// The metric name of the cloud monitor rule.
func (o RuleConditionOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v RuleCondition) string { return v.MetricName }).(pulumi.StringOutput)
}

// The metric unit of the cloud monitor rule.
func (o RuleConditionOutput) MetricUnit() pulumi.StringOutput {
	return o.ApplyT(func(v RuleCondition) string { return v.MetricUnit }).(pulumi.StringOutput)
}

// The period of the cloud monitor rule.
func (o RuleConditionOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleCondition) *string { return v.Period }).(pulumi.StringPtrOutput)
}

// The statistics of the cloud monitor rule. Valid values: `avg`, `max`, `min`.
func (o RuleConditionOutput) Statistics() pulumi.StringOutput {
	return o.ApplyT(func(v RuleCondition) string { return v.Statistics }).(pulumi.StringOutput)
}

// The threshold of the cloud monitor rule.
func (o RuleConditionOutput) Threshold() pulumi.StringOutput {
	return o.ApplyT(func(v RuleCondition) string { return v.Threshold }).(pulumi.StringOutput)
}

type RuleConditionArrayOutput struct{ *pulumi.OutputState }

func (RuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleCondition)(nil)).Elem()
}

func (o RuleConditionArrayOutput) ToRuleConditionArrayOutput() RuleConditionArrayOutput {
	return o
}

func (o RuleConditionArrayOutput) ToRuleConditionArrayOutputWithContext(ctx context.Context) RuleConditionArrayOutput {
	return o
}

func (o RuleConditionArrayOutput) Index(i pulumi.IntInput) RuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleCondition {
		return vs[0].([]RuleCondition)[vs[1].(int)]
	}).(RuleConditionOutput)
}

type RuleOriginalDimension struct {
	// The key of the dimension.
	Key string `pulumi:"key"`
	// The value of the dimension.
	Values []string `pulumi:"values"`
}

// RuleOriginalDimensionInput is an input type that accepts RuleOriginalDimensionArgs and RuleOriginalDimensionOutput values.
// You can construct a concrete instance of `RuleOriginalDimensionInput` via:
//
//	RuleOriginalDimensionArgs{...}
type RuleOriginalDimensionInput interface {
	pulumi.Input

	ToRuleOriginalDimensionOutput() RuleOriginalDimensionOutput
	ToRuleOriginalDimensionOutputWithContext(context.Context) RuleOriginalDimensionOutput
}

type RuleOriginalDimensionArgs struct {
	// The key of the dimension.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the dimension.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RuleOriginalDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleOriginalDimension)(nil)).Elem()
}

func (i RuleOriginalDimensionArgs) ToRuleOriginalDimensionOutput() RuleOriginalDimensionOutput {
	return i.ToRuleOriginalDimensionOutputWithContext(context.Background())
}

func (i RuleOriginalDimensionArgs) ToRuleOriginalDimensionOutputWithContext(ctx context.Context) RuleOriginalDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOriginalDimensionOutput)
}

// RuleOriginalDimensionArrayInput is an input type that accepts RuleOriginalDimensionArray and RuleOriginalDimensionArrayOutput values.
// You can construct a concrete instance of `RuleOriginalDimensionArrayInput` via:
//
//	RuleOriginalDimensionArray{ RuleOriginalDimensionArgs{...} }
type RuleOriginalDimensionArrayInput interface {
	pulumi.Input

	ToRuleOriginalDimensionArrayOutput() RuleOriginalDimensionArrayOutput
	ToRuleOriginalDimensionArrayOutputWithContext(context.Context) RuleOriginalDimensionArrayOutput
}

type RuleOriginalDimensionArray []RuleOriginalDimensionInput

func (RuleOriginalDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleOriginalDimension)(nil)).Elem()
}

func (i RuleOriginalDimensionArray) ToRuleOriginalDimensionArrayOutput() RuleOriginalDimensionArrayOutput {
	return i.ToRuleOriginalDimensionArrayOutputWithContext(context.Background())
}

func (i RuleOriginalDimensionArray) ToRuleOriginalDimensionArrayOutputWithContext(ctx context.Context) RuleOriginalDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOriginalDimensionArrayOutput)
}

type RuleOriginalDimensionOutput struct{ *pulumi.OutputState }

func (RuleOriginalDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleOriginalDimension)(nil)).Elem()
}

func (o RuleOriginalDimensionOutput) ToRuleOriginalDimensionOutput() RuleOriginalDimensionOutput {
	return o
}

func (o RuleOriginalDimensionOutput) ToRuleOriginalDimensionOutputWithContext(ctx context.Context) RuleOriginalDimensionOutput {
	return o
}

// The key of the dimension.
func (o RuleOriginalDimensionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RuleOriginalDimension) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the dimension.
func (o RuleOriginalDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleOriginalDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type RuleOriginalDimensionArrayOutput struct{ *pulumi.OutputState }

func (RuleOriginalDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleOriginalDimension)(nil)).Elem()
}

func (o RuleOriginalDimensionArrayOutput) ToRuleOriginalDimensionArrayOutput() RuleOriginalDimensionArrayOutput {
	return o
}

func (o RuleOriginalDimensionArrayOutput) ToRuleOriginalDimensionArrayOutputWithContext(ctx context.Context) RuleOriginalDimensionArrayOutput {
	return o
}

func (o RuleOriginalDimensionArrayOutput) Index(i pulumi.IntInput) RuleOriginalDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleOriginalDimension {
		return vs[0].([]RuleOriginalDimension)[vs[1].(int)]
	}).(RuleOriginalDimensionOutput)
}

type RuleRecoveryNotify struct {
	// Whether to enable the recovery notify function.
	Enable *bool `pulumi:"enable"`
}

// RuleRecoveryNotifyInput is an input type that accepts RuleRecoveryNotifyArgs and RuleRecoveryNotifyOutput values.
// You can construct a concrete instance of `RuleRecoveryNotifyInput` via:
//
//	RuleRecoveryNotifyArgs{...}
type RuleRecoveryNotifyInput interface {
	pulumi.Input

	ToRuleRecoveryNotifyOutput() RuleRecoveryNotifyOutput
	ToRuleRecoveryNotifyOutputWithContext(context.Context) RuleRecoveryNotifyOutput
}

type RuleRecoveryNotifyArgs struct {
	// Whether to enable the recovery notify function.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
}

func (RuleRecoveryNotifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRecoveryNotify)(nil)).Elem()
}

func (i RuleRecoveryNotifyArgs) ToRuleRecoveryNotifyOutput() RuleRecoveryNotifyOutput {
	return i.ToRuleRecoveryNotifyOutputWithContext(context.Background())
}

func (i RuleRecoveryNotifyArgs) ToRuleRecoveryNotifyOutputWithContext(ctx context.Context) RuleRecoveryNotifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRecoveryNotifyOutput)
}

func (i RuleRecoveryNotifyArgs) ToRuleRecoveryNotifyPtrOutput() RuleRecoveryNotifyPtrOutput {
	return i.ToRuleRecoveryNotifyPtrOutputWithContext(context.Background())
}

func (i RuleRecoveryNotifyArgs) ToRuleRecoveryNotifyPtrOutputWithContext(ctx context.Context) RuleRecoveryNotifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRecoveryNotifyOutput).ToRuleRecoveryNotifyPtrOutputWithContext(ctx)
}

// RuleRecoveryNotifyPtrInput is an input type that accepts RuleRecoveryNotifyArgs, RuleRecoveryNotifyPtr and RuleRecoveryNotifyPtrOutput values.
// You can construct a concrete instance of `RuleRecoveryNotifyPtrInput` via:
//
//	        RuleRecoveryNotifyArgs{...}
//
//	or:
//
//	        nil
type RuleRecoveryNotifyPtrInput interface {
	pulumi.Input

	ToRuleRecoveryNotifyPtrOutput() RuleRecoveryNotifyPtrOutput
	ToRuleRecoveryNotifyPtrOutputWithContext(context.Context) RuleRecoveryNotifyPtrOutput
}

type ruleRecoveryNotifyPtrType RuleRecoveryNotifyArgs

func RuleRecoveryNotifyPtr(v *RuleRecoveryNotifyArgs) RuleRecoveryNotifyPtrInput {
	return (*ruleRecoveryNotifyPtrType)(v)
}

func (*ruleRecoveryNotifyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRecoveryNotify)(nil)).Elem()
}

func (i *ruleRecoveryNotifyPtrType) ToRuleRecoveryNotifyPtrOutput() RuleRecoveryNotifyPtrOutput {
	return i.ToRuleRecoveryNotifyPtrOutputWithContext(context.Background())
}

func (i *ruleRecoveryNotifyPtrType) ToRuleRecoveryNotifyPtrOutputWithContext(ctx context.Context) RuleRecoveryNotifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRecoveryNotifyPtrOutput)
}

type RuleRecoveryNotifyOutput struct{ *pulumi.OutputState }

func (RuleRecoveryNotifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRecoveryNotify)(nil)).Elem()
}

func (o RuleRecoveryNotifyOutput) ToRuleRecoveryNotifyOutput() RuleRecoveryNotifyOutput {
	return o
}

func (o RuleRecoveryNotifyOutput) ToRuleRecoveryNotifyOutputWithContext(ctx context.Context) RuleRecoveryNotifyOutput {
	return o
}

func (o RuleRecoveryNotifyOutput) ToRuleRecoveryNotifyPtrOutput() RuleRecoveryNotifyPtrOutput {
	return o.ToRuleRecoveryNotifyPtrOutputWithContext(context.Background())
}

func (o RuleRecoveryNotifyOutput) ToRuleRecoveryNotifyPtrOutputWithContext(ctx context.Context) RuleRecoveryNotifyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleRecoveryNotify) *RuleRecoveryNotify {
		return &v
	}).(RuleRecoveryNotifyPtrOutput)
}

// Whether to enable the recovery notify function.
func (o RuleRecoveryNotifyOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleRecoveryNotify) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

type RuleRecoveryNotifyPtrOutput struct{ *pulumi.OutputState }

func (RuleRecoveryNotifyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRecoveryNotify)(nil)).Elem()
}

func (o RuleRecoveryNotifyPtrOutput) ToRuleRecoveryNotifyPtrOutput() RuleRecoveryNotifyPtrOutput {
	return o
}

func (o RuleRecoveryNotifyPtrOutput) ToRuleRecoveryNotifyPtrOutputWithContext(ctx context.Context) RuleRecoveryNotifyPtrOutput {
	return o
}

func (o RuleRecoveryNotifyPtrOutput) Elem() RuleRecoveryNotifyOutput {
	return o.ApplyT(func(v *RuleRecoveryNotify) RuleRecoveryNotify {
		if v != nil {
			return *v
		}
		var ret RuleRecoveryNotify
		return ret
	}).(RuleRecoveryNotifyOutput)
}

// Whether to enable the recovery notify function.
func (o RuleRecoveryNotifyPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleRecoveryNotify) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

type RulesRule struct {
	// The alert methods of the cloud monitor rule.
	AlertMethods []string `pulumi:"alertMethods"`
	// The alert state of the cloud monitor rule. Valid values: `altering`, `normal`.
	AlertState string `pulumi:"alertState"`
	// The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
	ConditionOperator string `pulumi:"conditionOperator"`
	// The conditions of the cloud monitor rule.
	Conditions []RulesRuleCondition `pulumi:"conditions"`
	// The contact group ids of the cloud monitor rule.
	ContactGroupIds []string `pulumi:"contactGroupIds"`
	// The created time of the cloud monitor rule.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the cloud monitor rule.
	Description string `pulumi:"description"`
	// The effect end time of the cloud monitor rule.
	EffectEndAt string `pulumi:"effectEndAt"`
	// The effect start time of the cloud monitor rule.
	EffectStartAt string `pulumi:"effectStartAt"`
	// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
	EnableState string `pulumi:"enableState"`
	// The evaluation count of the cloud monitor rule.
	EvaluationCount int `pulumi:"evaluationCount"`
	// The id of the cloud monitor rule.
	Id string `pulumi:"id"`
	// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
	Level string `pulumi:"level"`
	// Whether to enable the multiple conditions function of the cloud monitor rule.
	MultipleConditions bool `pulumi:"multipleConditions"`
	// The namespace of the cloud monitor rule.
	Namespace string `pulumi:"namespace"`
	// The original dimensions of the cloud monitor rule.
	OriginalDimensions []RulesRuleOriginalDimension `pulumi:"originalDimensions"`
	// The region id of the cloud monitor rule.
	Regions []string `pulumi:"regions"`
	// The name of the cloud monitor rule. This field support fuzzy query.
	RuleName string `pulumi:"ruleName"`
	// The silence time of the cloud monitor rule. Unit in minutes.
	SilenceTime int `pulumi:"silenceTime"`
	// The sub namespace of the cloud monitor rule.
	SubNamespace string `pulumi:"subNamespace"`
	// The updated time of the cloud monitor rule.
	UpdatedAt string `pulumi:"updatedAt"`
	// The web hook of the cloud monitor rule.
	WebHook string `pulumi:"webHook"`
}

// RulesRuleInput is an input type that accepts RulesRuleArgs and RulesRuleOutput values.
// You can construct a concrete instance of `RulesRuleInput` via:
//
//	RulesRuleArgs{...}
type RulesRuleInput interface {
	pulumi.Input

	ToRulesRuleOutput() RulesRuleOutput
	ToRulesRuleOutputWithContext(context.Context) RulesRuleOutput
}

type RulesRuleArgs struct {
	// The alert methods of the cloud monitor rule.
	AlertMethods pulumi.StringArrayInput `pulumi:"alertMethods"`
	// The alert state of the cloud monitor rule. Valid values: `altering`, `normal`.
	AlertState pulumi.StringInput `pulumi:"alertState"`
	// The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
	ConditionOperator pulumi.StringInput `pulumi:"conditionOperator"`
	// The conditions of the cloud monitor rule.
	Conditions RulesRuleConditionArrayInput `pulumi:"conditions"`
	// The contact group ids of the cloud monitor rule.
	ContactGroupIds pulumi.StringArrayInput `pulumi:"contactGroupIds"`
	// The created time of the cloud monitor rule.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the cloud monitor rule.
	Description pulumi.StringInput `pulumi:"description"`
	// The effect end time of the cloud monitor rule.
	EffectEndAt pulumi.StringInput `pulumi:"effectEndAt"`
	// The effect start time of the cloud monitor rule.
	EffectStartAt pulumi.StringInput `pulumi:"effectStartAt"`
	// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
	EnableState pulumi.StringInput `pulumi:"enableState"`
	// The evaluation count of the cloud monitor rule.
	EvaluationCount pulumi.IntInput `pulumi:"evaluationCount"`
	// The id of the cloud monitor rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
	Level pulumi.StringInput `pulumi:"level"`
	// Whether to enable the multiple conditions function of the cloud monitor rule.
	MultipleConditions pulumi.BoolInput `pulumi:"multipleConditions"`
	// The namespace of the cloud monitor rule.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// The original dimensions of the cloud monitor rule.
	OriginalDimensions RulesRuleOriginalDimensionArrayInput `pulumi:"originalDimensions"`
	// The region id of the cloud monitor rule.
	Regions pulumi.StringArrayInput `pulumi:"regions"`
	// The name of the cloud monitor rule. This field support fuzzy query.
	RuleName pulumi.StringInput `pulumi:"ruleName"`
	// The silence time of the cloud monitor rule. Unit in minutes.
	SilenceTime pulumi.IntInput `pulumi:"silenceTime"`
	// The sub namespace of the cloud monitor rule.
	SubNamespace pulumi.StringInput `pulumi:"subNamespace"`
	// The updated time of the cloud monitor rule.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The web hook of the cloud monitor rule.
	WebHook pulumi.StringInput `pulumi:"webHook"`
}

func (RulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRule)(nil)).Elem()
}

func (i RulesRuleArgs) ToRulesRuleOutput() RulesRuleOutput {
	return i.ToRulesRuleOutputWithContext(context.Background())
}

func (i RulesRuleArgs) ToRulesRuleOutputWithContext(ctx context.Context) RulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleOutput)
}

// RulesRuleArrayInput is an input type that accepts RulesRuleArray and RulesRuleArrayOutput values.
// You can construct a concrete instance of `RulesRuleArrayInput` via:
//
//	RulesRuleArray{ RulesRuleArgs{...} }
type RulesRuleArrayInput interface {
	pulumi.Input

	ToRulesRuleArrayOutput() RulesRuleArrayOutput
	ToRulesRuleArrayOutputWithContext(context.Context) RulesRuleArrayOutput
}

type RulesRuleArray []RulesRuleInput

func (RulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRule)(nil)).Elem()
}

func (i RulesRuleArray) ToRulesRuleArrayOutput() RulesRuleArrayOutput {
	return i.ToRulesRuleArrayOutputWithContext(context.Background())
}

func (i RulesRuleArray) ToRulesRuleArrayOutputWithContext(ctx context.Context) RulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleArrayOutput)
}

type RulesRuleOutput struct{ *pulumi.OutputState }

func (RulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRule)(nil)).Elem()
}

func (o RulesRuleOutput) ToRulesRuleOutput() RulesRuleOutput {
	return o
}

func (o RulesRuleOutput) ToRulesRuleOutputWithContext(ctx context.Context) RulesRuleOutput {
	return o
}

// The alert methods of the cloud monitor rule.
func (o RulesRuleOutput) AlertMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesRule) []string { return v.AlertMethods }).(pulumi.StringArrayOutput)
}

// The alert state of the cloud monitor rule. Valid values: `altering`, `normal`.
func (o RulesRuleOutput) AlertState() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.AlertState }).(pulumi.StringOutput)
}

// The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
func (o RulesRuleOutput) ConditionOperator() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.ConditionOperator }).(pulumi.StringOutput)
}

// The conditions of the cloud monitor rule.
func (o RulesRuleOutput) Conditions() RulesRuleConditionArrayOutput {
	return o.ApplyT(func(v RulesRule) []RulesRuleCondition { return v.Conditions }).(RulesRuleConditionArrayOutput)
}

// The contact group ids of the cloud monitor rule.
func (o RulesRuleOutput) ContactGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesRule) []string { return v.ContactGroupIds }).(pulumi.StringArrayOutput)
}

// The created time of the cloud monitor rule.
func (o RulesRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the cloud monitor rule.
func (o RulesRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.Description }).(pulumi.StringOutput)
}

// The effect end time of the cloud monitor rule.
func (o RulesRuleOutput) EffectEndAt() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.EffectEndAt }).(pulumi.StringOutput)
}

// The effect start time of the cloud monitor rule.
func (o RulesRuleOutput) EffectStartAt() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.EffectStartAt }).(pulumi.StringOutput)
}

// The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
func (o RulesRuleOutput) EnableState() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.EnableState }).(pulumi.StringOutput)
}

// The evaluation count of the cloud monitor rule.
func (o RulesRuleOutput) EvaluationCount() pulumi.IntOutput {
	return o.ApplyT(func(v RulesRule) int { return v.EvaluationCount }).(pulumi.IntOutput)
}

// The id of the cloud monitor rule.
func (o RulesRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.Id }).(pulumi.StringOutput)
}

// The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
func (o RulesRuleOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.Level }).(pulumi.StringOutput)
}

// Whether to enable the multiple conditions function of the cloud monitor rule.
func (o RulesRuleOutput) MultipleConditions() pulumi.BoolOutput {
	return o.ApplyT(func(v RulesRule) bool { return v.MultipleConditions }).(pulumi.BoolOutput)
}

// The namespace of the cloud monitor rule.
func (o RulesRuleOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.Namespace }).(pulumi.StringOutput)
}

// The original dimensions of the cloud monitor rule.
func (o RulesRuleOutput) OriginalDimensions() RulesRuleOriginalDimensionArrayOutput {
	return o.ApplyT(func(v RulesRule) []RulesRuleOriginalDimension { return v.OriginalDimensions }).(RulesRuleOriginalDimensionArrayOutput)
}

// The region id of the cloud monitor rule.
func (o RulesRuleOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesRule) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// The name of the cloud monitor rule. This field support fuzzy query.
func (o RulesRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.RuleName }).(pulumi.StringOutput)
}

// The silence time of the cloud monitor rule. Unit in minutes.
func (o RulesRuleOutput) SilenceTime() pulumi.IntOutput {
	return o.ApplyT(func(v RulesRule) int { return v.SilenceTime }).(pulumi.IntOutput)
}

// The sub namespace of the cloud monitor rule.
func (o RulesRuleOutput) SubNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.SubNamespace }).(pulumi.StringOutput)
}

// The updated time of the cloud monitor rule.
func (o RulesRuleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The web hook of the cloud monitor rule.
func (o RulesRuleOutput) WebHook() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.WebHook }).(pulumi.StringOutput)
}

type RulesRuleArrayOutput struct{ *pulumi.OutputState }

func (RulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRule)(nil)).Elem()
}

func (o RulesRuleArrayOutput) ToRulesRuleArrayOutput() RulesRuleArrayOutput {
	return o
}

func (o RulesRuleArrayOutput) ToRulesRuleArrayOutputWithContext(ctx context.Context) RulesRuleArrayOutput {
	return o
}

func (o RulesRuleArrayOutput) Index(i pulumi.IntInput) RulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesRule {
		return vs[0].([]RulesRule)[vs[1].(int)]
	}).(RulesRuleOutput)
}

type RulesRuleCondition struct {
	// The comparison operation of the cloud monitor rule.
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// The metric name of the cloud monitor rule.
	MetricName string `pulumi:"metricName"`
	// The metric unit of the cloud monitor rule.
	MetricUnit string `pulumi:"metricUnit"`
	// The period of the cloud monitor rule.
	Period string `pulumi:"period"`
	// The statistics of the cloud monitor rule.
	Statistics string `pulumi:"statistics"`
	// The threshold of the cloud monitor rule.
	Threshold string `pulumi:"threshold"`
}

// RulesRuleConditionInput is an input type that accepts RulesRuleConditionArgs and RulesRuleConditionOutput values.
// You can construct a concrete instance of `RulesRuleConditionInput` via:
//
//	RulesRuleConditionArgs{...}
type RulesRuleConditionInput interface {
	pulumi.Input

	ToRulesRuleConditionOutput() RulesRuleConditionOutput
	ToRulesRuleConditionOutputWithContext(context.Context) RulesRuleConditionOutput
}

type RulesRuleConditionArgs struct {
	// The comparison operation of the cloud monitor rule.
	ComparisonOperator pulumi.StringInput `pulumi:"comparisonOperator"`
	// The metric name of the cloud monitor rule.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// The metric unit of the cloud monitor rule.
	MetricUnit pulumi.StringInput `pulumi:"metricUnit"`
	// The period of the cloud monitor rule.
	Period pulumi.StringInput `pulumi:"period"`
	// The statistics of the cloud monitor rule.
	Statistics pulumi.StringInput `pulumi:"statistics"`
	// The threshold of the cloud monitor rule.
	Threshold pulumi.StringInput `pulumi:"threshold"`
}

func (RulesRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleCondition)(nil)).Elem()
}

func (i RulesRuleConditionArgs) ToRulesRuleConditionOutput() RulesRuleConditionOutput {
	return i.ToRulesRuleConditionOutputWithContext(context.Background())
}

func (i RulesRuleConditionArgs) ToRulesRuleConditionOutputWithContext(ctx context.Context) RulesRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleConditionOutput)
}

// RulesRuleConditionArrayInput is an input type that accepts RulesRuleConditionArray and RulesRuleConditionArrayOutput values.
// You can construct a concrete instance of `RulesRuleConditionArrayInput` via:
//
//	RulesRuleConditionArray{ RulesRuleConditionArgs{...} }
type RulesRuleConditionArrayInput interface {
	pulumi.Input

	ToRulesRuleConditionArrayOutput() RulesRuleConditionArrayOutput
	ToRulesRuleConditionArrayOutputWithContext(context.Context) RulesRuleConditionArrayOutput
}

type RulesRuleConditionArray []RulesRuleConditionInput

func (RulesRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleCondition)(nil)).Elem()
}

func (i RulesRuleConditionArray) ToRulesRuleConditionArrayOutput() RulesRuleConditionArrayOutput {
	return i.ToRulesRuleConditionArrayOutputWithContext(context.Background())
}

func (i RulesRuleConditionArray) ToRulesRuleConditionArrayOutputWithContext(ctx context.Context) RulesRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleConditionArrayOutput)
}

type RulesRuleConditionOutput struct{ *pulumi.OutputState }

func (RulesRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleCondition)(nil)).Elem()
}

func (o RulesRuleConditionOutput) ToRulesRuleConditionOutput() RulesRuleConditionOutput {
	return o
}

func (o RulesRuleConditionOutput) ToRulesRuleConditionOutputWithContext(ctx context.Context) RulesRuleConditionOutput {
	return o
}

// The comparison operation of the cloud monitor rule.
func (o RulesRuleConditionOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleCondition) string { return v.ComparisonOperator }).(pulumi.StringOutput)
}

// The metric name of the cloud monitor rule.
func (o RulesRuleConditionOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleCondition) string { return v.MetricName }).(pulumi.StringOutput)
}

// The metric unit of the cloud monitor rule.
func (o RulesRuleConditionOutput) MetricUnit() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleCondition) string { return v.MetricUnit }).(pulumi.StringOutput)
}

// The period of the cloud monitor rule.
func (o RulesRuleConditionOutput) Period() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleCondition) string { return v.Period }).(pulumi.StringOutput)
}

// The statistics of the cloud monitor rule.
func (o RulesRuleConditionOutput) Statistics() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleCondition) string { return v.Statistics }).(pulumi.StringOutput)
}

// The threshold of the cloud monitor rule.
func (o RulesRuleConditionOutput) Threshold() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleCondition) string { return v.Threshold }).(pulumi.StringOutput)
}

type RulesRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (RulesRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleCondition)(nil)).Elem()
}

func (o RulesRuleConditionArrayOutput) ToRulesRuleConditionArrayOutput() RulesRuleConditionArrayOutput {
	return o
}

func (o RulesRuleConditionArrayOutput) ToRulesRuleConditionArrayOutputWithContext(ctx context.Context) RulesRuleConditionArrayOutput {
	return o
}

func (o RulesRuleConditionArrayOutput) Index(i pulumi.IntInput) RulesRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesRuleCondition {
		return vs[0].([]RulesRuleCondition)[vs[1].(int)]
	}).(RulesRuleConditionOutput)
}

type RulesRuleOriginalDimension struct {
	// The key of the dimension.
	Key string `pulumi:"key"`
	// The value of the dimension.
	Values []string `pulumi:"values"`
}

// RulesRuleOriginalDimensionInput is an input type that accepts RulesRuleOriginalDimensionArgs and RulesRuleOriginalDimensionOutput values.
// You can construct a concrete instance of `RulesRuleOriginalDimensionInput` via:
//
//	RulesRuleOriginalDimensionArgs{...}
type RulesRuleOriginalDimensionInput interface {
	pulumi.Input

	ToRulesRuleOriginalDimensionOutput() RulesRuleOriginalDimensionOutput
	ToRulesRuleOriginalDimensionOutputWithContext(context.Context) RulesRuleOriginalDimensionOutput
}

type RulesRuleOriginalDimensionArgs struct {
	// The key of the dimension.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the dimension.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RulesRuleOriginalDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleOriginalDimension)(nil)).Elem()
}

func (i RulesRuleOriginalDimensionArgs) ToRulesRuleOriginalDimensionOutput() RulesRuleOriginalDimensionOutput {
	return i.ToRulesRuleOriginalDimensionOutputWithContext(context.Background())
}

func (i RulesRuleOriginalDimensionArgs) ToRulesRuleOriginalDimensionOutputWithContext(ctx context.Context) RulesRuleOriginalDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleOriginalDimensionOutput)
}

// RulesRuleOriginalDimensionArrayInput is an input type that accepts RulesRuleOriginalDimensionArray and RulesRuleOriginalDimensionArrayOutput values.
// You can construct a concrete instance of `RulesRuleOriginalDimensionArrayInput` via:
//
//	RulesRuleOriginalDimensionArray{ RulesRuleOriginalDimensionArgs{...} }
type RulesRuleOriginalDimensionArrayInput interface {
	pulumi.Input

	ToRulesRuleOriginalDimensionArrayOutput() RulesRuleOriginalDimensionArrayOutput
	ToRulesRuleOriginalDimensionArrayOutputWithContext(context.Context) RulesRuleOriginalDimensionArrayOutput
}

type RulesRuleOriginalDimensionArray []RulesRuleOriginalDimensionInput

func (RulesRuleOriginalDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleOriginalDimension)(nil)).Elem()
}

func (i RulesRuleOriginalDimensionArray) ToRulesRuleOriginalDimensionArrayOutput() RulesRuleOriginalDimensionArrayOutput {
	return i.ToRulesRuleOriginalDimensionArrayOutputWithContext(context.Background())
}

func (i RulesRuleOriginalDimensionArray) ToRulesRuleOriginalDimensionArrayOutputWithContext(ctx context.Context) RulesRuleOriginalDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleOriginalDimensionArrayOutput)
}

type RulesRuleOriginalDimensionOutput struct{ *pulumi.OutputState }

func (RulesRuleOriginalDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleOriginalDimension)(nil)).Elem()
}

func (o RulesRuleOriginalDimensionOutput) ToRulesRuleOriginalDimensionOutput() RulesRuleOriginalDimensionOutput {
	return o
}

func (o RulesRuleOriginalDimensionOutput) ToRulesRuleOriginalDimensionOutputWithContext(ctx context.Context) RulesRuleOriginalDimensionOutput {
	return o
}

// The key of the dimension.
func (o RulesRuleOriginalDimensionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleOriginalDimension) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the dimension.
func (o RulesRuleOriginalDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesRuleOriginalDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type RulesRuleOriginalDimensionArrayOutput struct{ *pulumi.OutputState }

func (RulesRuleOriginalDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleOriginalDimension)(nil)).Elem()
}

func (o RulesRuleOriginalDimensionArrayOutput) ToRulesRuleOriginalDimensionArrayOutput() RulesRuleOriginalDimensionArrayOutput {
	return o
}

func (o RulesRuleOriginalDimensionArrayOutput) ToRulesRuleOriginalDimensionArrayOutputWithContext(ctx context.Context) RulesRuleOriginalDimensionArrayOutput {
	return o
}

func (o RulesRuleOriginalDimensionArrayOutput) Index(i pulumi.IntInput) RulesRuleOriginalDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesRuleOriginalDimension {
		return vs[0].([]RulesRuleOriginalDimension)[vs[1].(int)]
	}).(RulesRuleOriginalDimensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactGroupsGroupInput)(nil)).Elem(), ContactGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactGroupsGroupArrayInput)(nil)).Elem(), ContactGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactGroupsGroupContactInput)(nil)).Elem(), ContactGroupsGroupContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactGroupsGroupContactArrayInput)(nil)).Elem(), ContactGroupsGroupContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsContactInput)(nil)).Elem(), ContactsContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsContactArrayInput)(nil)).Elem(), ContactsContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleEffectiveTimeInput)(nil)).Elem(), EventRuleEffectiveTimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleEffectiveTimePtrInput)(nil)).Elem(), EventRuleEffectiveTimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleFilterPatternInput)(nil)).Elem(), EventRuleFilterPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleFilterPatternPtrInput)(nil)).Elem(), EventRuleFilterPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleMessageQueueInput)(nil)).Elem(), EventRuleMessageQueueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleMessageQueueArrayInput)(nil)).Elem(), EventRuleMessageQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleTlsTargetInput)(nil)).Elem(), EventRuleTlsTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRuleTlsTargetArrayInput)(nil)).Elem(), EventRuleTlsTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRulesRuleInput)(nil)).Elem(), EventRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRulesRuleArrayInput)(nil)).Elem(), EventRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRulesRuleFilterPatternInput)(nil)).Elem(), EventRulesRuleFilterPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRulesRuleFilterPatternArrayInput)(nil)).Elem(), EventRulesRuleFilterPatternArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRulesRuleMessageQueueInput)(nil)).Elem(), EventRulesRuleMessageQueueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRulesRuleMessageQueueArrayInput)(nil)).Elem(), EventRulesRuleMessageQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRulesRuleTlsTargetInput)(nil)).Elem(), EventRulesRuleTlsTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventRulesRuleTlsTargetArrayInput)(nil)).Elem(), EventRulesRuleTlsTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleConditionInput)(nil)).Elem(), RuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleConditionArrayInput)(nil)).Elem(), RuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleOriginalDimensionInput)(nil)).Elem(), RuleOriginalDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleOriginalDimensionArrayInput)(nil)).Elem(), RuleOriginalDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRecoveryNotifyInput)(nil)).Elem(), RuleRecoveryNotifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRecoveryNotifyPtrInput)(nil)).Elem(), RuleRecoveryNotifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleInput)(nil)).Elem(), RulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleArrayInput)(nil)).Elem(), RulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleConditionInput)(nil)).Elem(), RulesRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleConditionArrayInput)(nil)).Elem(), RulesRuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleOriginalDimensionInput)(nil)).Elem(), RulesRuleOriginalDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleOriginalDimensionArrayInput)(nil)).Elem(), RulesRuleOriginalDimensionArray{})
	pulumi.RegisterOutputType(ContactGroupsGroupOutput{})
	pulumi.RegisterOutputType(ContactGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(ContactGroupsGroupContactOutput{})
	pulumi.RegisterOutputType(ContactGroupsGroupContactArrayOutput{})
	pulumi.RegisterOutputType(ContactsContactOutput{})
	pulumi.RegisterOutputType(ContactsContactArrayOutput{})
	pulumi.RegisterOutputType(EventRuleEffectiveTimeOutput{})
	pulumi.RegisterOutputType(EventRuleEffectiveTimePtrOutput{})
	pulumi.RegisterOutputType(EventRuleFilterPatternOutput{})
	pulumi.RegisterOutputType(EventRuleFilterPatternPtrOutput{})
	pulumi.RegisterOutputType(EventRuleMessageQueueOutput{})
	pulumi.RegisterOutputType(EventRuleMessageQueueArrayOutput{})
	pulumi.RegisterOutputType(EventRuleTlsTargetOutput{})
	pulumi.RegisterOutputType(EventRuleTlsTargetArrayOutput{})
	pulumi.RegisterOutputType(EventRulesRuleOutput{})
	pulumi.RegisterOutputType(EventRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(EventRulesRuleFilterPatternOutput{})
	pulumi.RegisterOutputType(EventRulesRuleFilterPatternArrayOutput{})
	pulumi.RegisterOutputType(EventRulesRuleMessageQueueOutput{})
	pulumi.RegisterOutputType(EventRulesRuleMessageQueueArrayOutput{})
	pulumi.RegisterOutputType(EventRulesRuleTlsTargetOutput{})
	pulumi.RegisterOutputType(EventRulesRuleTlsTargetArrayOutput{})
	pulumi.RegisterOutputType(RuleConditionOutput{})
	pulumi.RegisterOutputType(RuleConditionArrayOutput{})
	pulumi.RegisterOutputType(RuleOriginalDimensionOutput{})
	pulumi.RegisterOutputType(RuleOriginalDimensionArrayOutput{})
	pulumi.RegisterOutputType(RuleRecoveryNotifyOutput{})
	pulumi.RegisterOutputType(RuleRecoveryNotifyPtrOutput{})
	pulumi.RegisterOutputType(RulesRuleOutput{})
	pulumi.RegisterOutputType(RulesRuleArrayOutput{})
	pulumi.RegisterOutputType(RulesRuleConditionOutput{})
	pulumi.RegisterOutputType(RulesRuleConditionArrayOutput{})
	pulumi.RegisterOutputType(RulesRuleOriginalDimensionOutput{})
	pulumi.RegisterOutputType(RulesRuleOriginalDimensionArrayOutput{})
}
