// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cloud monitor event rules
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloud_monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud_monitor.EventRules(ctx, &cloud_monitor.EventRulesArgs{
//				RuleName: pulumi.StringRef("tftest"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func EventRules(ctx *pulumi.Context, args *EventRulesArgs, opts ...pulumi.InvokeOption) (*EventRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv EventRulesResult
	err := ctx.Invoke("volcengine:cloud_monitor/eventRules:EventRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking EventRules.
type EventRulesArgs struct {
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Rule name, search rules by name using fuzzy search.
	RuleName *string `pulumi:"ruleName"`
	// Event source.
	Source *string `pulumi:"source"`
}

// A collection of values returned by EventRules.
type EventRulesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The name of the rule.
	RuleName *string `pulumi:"ruleName"`
	// The collection of query.
	Rules []EventRulesRule `pulumi:"rules"`
	// Event source corresponding to pattern matching.
	Source *string `pulumi:"source"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func EventRulesOutput(ctx *pulumi.Context, args EventRulesOutputArgs, opts ...pulumi.InvokeOption) EventRulesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (EventRulesResult, error) {
			args := v.(EventRulesArgs)
			r, err := EventRules(ctx, &args, opts...)
			var s EventRulesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(EventRulesResultOutput)
}

// A collection of arguments for invoking EventRules.
type EventRulesOutputArgs struct {
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Rule name, search rules by name using fuzzy search.
	RuleName pulumi.StringPtrInput `pulumi:"ruleName"`
	// Event source.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (EventRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRulesArgs)(nil)).Elem()
}

// A collection of values returned by EventRules.
type EventRulesResultOutput struct{ *pulumi.OutputState }

func (EventRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventRulesResult)(nil)).Elem()
}

func (o EventRulesResultOutput) ToEventRulesResultOutput() EventRulesResultOutput {
	return o
}

func (o EventRulesResultOutput) ToEventRulesResultOutputWithContext(ctx context.Context) EventRulesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o EventRulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EventRulesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o EventRulesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventRulesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The name of the rule.
func (o EventRulesResultOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventRulesResult) *string { return v.RuleName }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o EventRulesResultOutput) Rules() EventRulesRuleArrayOutput {
	return o.ApplyT(func(v EventRulesResult) []EventRulesRule { return v.Rules }).(EventRulesRuleArrayOutput)
}

// Event source corresponding to pattern matching.
func (o EventRulesResultOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventRulesResult) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o EventRulesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v EventRulesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(EventRulesResultOutput{})
}
