// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage cloud monitor contact group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloud_monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud_monitor.NewContactGroup(ctx, "foo", &cloud_monitor.ContactGroupArgs{
//				ContactsIdLists: pulumi.StringArray{
//					pulumi.String("1737376113733353472"),
//					pulumi.String("1737375997680111616"),
//				},
//				Description: pulumi.String("tftest"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CloudMonitorContactGroup can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:cloud_monitor/contactGroup:ContactGroup default resource_id
// ```
type ContactGroup struct {
	pulumi.CustomResourceState

	// When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
	ContactsIdLists pulumi.StringArrayOutput `pulumi:"contactsIdLists"`
	// The description of the contact group.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the contact group.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewContactGroup registers a new resource with the given unique name, arguments, and options.
func NewContactGroup(ctx *pulumi.Context,
	name string, args *ContactGroupArgs, opts ...pulumi.ResourceOption) (*ContactGroup, error) {
	if args == nil {
		args = &ContactGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContactGroup
	err := ctx.RegisterResource("volcengine:cloud_monitor/contactGroup:ContactGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContactGroup gets an existing ContactGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContactGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactGroupState, opts ...pulumi.ResourceOption) (*ContactGroup, error) {
	var resource ContactGroup
	err := ctx.ReadResource("volcengine:cloud_monitor/contactGroup:ContactGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContactGroup resources.
type contactGroupState struct {
	// When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
	ContactsIdLists []string `pulumi:"contactsIdLists"`
	// The description of the contact group.
	Description *string `pulumi:"description"`
	// The name of the contact group.
	Name *string `pulumi:"name"`
}

type ContactGroupState struct {
	// When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
	ContactsIdLists pulumi.StringArrayInput
	// The description of the contact group.
	Description pulumi.StringPtrInput
	// The name of the contact group.
	Name pulumi.StringPtrInput
}

func (ContactGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactGroupState)(nil)).Elem()
}

type contactGroupArgs struct {
	// When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
	ContactsIdLists []string `pulumi:"contactsIdLists"`
	// The description of the contact group.
	Description *string `pulumi:"description"`
	// The name of the contact group.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ContactGroup resource.
type ContactGroupArgs struct {
	// When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
	ContactsIdLists pulumi.StringArrayInput
	// The description of the contact group.
	Description pulumi.StringPtrInput
	// The name of the contact group.
	Name pulumi.StringPtrInput
}

func (ContactGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactGroupArgs)(nil)).Elem()
}

type ContactGroupInput interface {
	pulumi.Input

	ToContactGroupOutput() ContactGroupOutput
	ToContactGroupOutputWithContext(ctx context.Context) ContactGroupOutput
}

func (*ContactGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactGroup)(nil)).Elem()
}

func (i *ContactGroup) ToContactGroupOutput() ContactGroupOutput {
	return i.ToContactGroupOutputWithContext(context.Background())
}

func (i *ContactGroup) ToContactGroupOutputWithContext(ctx context.Context) ContactGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactGroupOutput)
}

// ContactGroupArrayInput is an input type that accepts ContactGroupArray and ContactGroupArrayOutput values.
// You can construct a concrete instance of `ContactGroupArrayInput` via:
//
//	ContactGroupArray{ ContactGroupArgs{...} }
type ContactGroupArrayInput interface {
	pulumi.Input

	ToContactGroupArrayOutput() ContactGroupArrayOutput
	ToContactGroupArrayOutputWithContext(context.Context) ContactGroupArrayOutput
}

type ContactGroupArray []ContactGroupInput

func (ContactGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactGroup)(nil)).Elem()
}

func (i ContactGroupArray) ToContactGroupArrayOutput() ContactGroupArrayOutput {
	return i.ToContactGroupArrayOutputWithContext(context.Background())
}

func (i ContactGroupArray) ToContactGroupArrayOutputWithContext(ctx context.Context) ContactGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactGroupArrayOutput)
}

// ContactGroupMapInput is an input type that accepts ContactGroupMap and ContactGroupMapOutput values.
// You can construct a concrete instance of `ContactGroupMapInput` via:
//
//	ContactGroupMap{ "key": ContactGroupArgs{...} }
type ContactGroupMapInput interface {
	pulumi.Input

	ToContactGroupMapOutput() ContactGroupMapOutput
	ToContactGroupMapOutputWithContext(context.Context) ContactGroupMapOutput
}

type ContactGroupMap map[string]ContactGroupInput

func (ContactGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactGroup)(nil)).Elem()
}

func (i ContactGroupMap) ToContactGroupMapOutput() ContactGroupMapOutput {
	return i.ToContactGroupMapOutputWithContext(context.Background())
}

func (i ContactGroupMap) ToContactGroupMapOutputWithContext(ctx context.Context) ContactGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactGroupMapOutput)
}

type ContactGroupOutput struct{ *pulumi.OutputState }

func (ContactGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactGroup)(nil)).Elem()
}

func (o ContactGroupOutput) ToContactGroupOutput() ContactGroupOutput {
	return o
}

func (o ContactGroupOutput) ToContactGroupOutputWithContext(ctx context.Context) ContactGroupOutput {
	return o
}

// When creating a contact group, contacts should be added with their contact ID. The maximum number of IDs allowed is 10, meaning that the maximum number of members in a single contact group is 10.
func (o ContactGroupOutput) ContactsIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContactGroup) pulumi.StringArrayOutput { return v.ContactsIdLists }).(pulumi.StringArrayOutput)
}

// The description of the contact group.
func (o ContactGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the contact group.
func (o ContactGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ContactGroupArrayOutput struct{ *pulumi.OutputState }

func (ContactGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactGroup)(nil)).Elem()
}

func (o ContactGroupArrayOutput) ToContactGroupArrayOutput() ContactGroupArrayOutput {
	return o
}

func (o ContactGroupArrayOutput) ToContactGroupArrayOutputWithContext(ctx context.Context) ContactGroupArrayOutput {
	return o
}

func (o ContactGroupArrayOutput) Index(i pulumi.IntInput) ContactGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContactGroup {
		return vs[0].([]*ContactGroup)[vs[1].(int)]
	}).(ContactGroupOutput)
}

type ContactGroupMapOutput struct{ *pulumi.OutputState }

func (ContactGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactGroup)(nil)).Elem()
}

func (o ContactGroupMapOutput) ToContactGroupMapOutput() ContactGroupMapOutput {
	return o
}

func (o ContactGroupMapOutput) ToContactGroupMapOutputWithContext(ctx context.Context) ContactGroupMapOutput {
	return o
}

func (o ContactGroupMapOutput) MapIndex(k pulumi.StringInput) ContactGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContactGroup {
		return vs[0].(map[string]*ContactGroup)[vs[1].(string)]
	}).(ContactGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactGroupInput)(nil)).Elem(), &ContactGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactGroupArrayInput)(nil)).Elem(), ContactGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactGroupMapInput)(nil)).Elem(), ContactGroupMap{})
	pulumi.RegisterOutputType(ContactGroupOutput{})
	pulumi.RegisterOutputType(ContactGroupArrayOutput{})
	pulumi.RegisterOutputType(ContactGroupMapOutput{})
}
