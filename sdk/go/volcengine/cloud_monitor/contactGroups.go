// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cloud monitor contact groups
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloud_monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud_monitor.GetContactGroups(ctx, &cloud_monitor.GetContactGroupsArgs{
//				Name: pulumi.StringRef("tftest"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.cloud_monitor.ContactGroups has been deprecated in favor of volcengine.cloud_monitor.getContactGroups
func ContactGroups(ctx *pulumi.Context, args *ContactGroupsArgs, opts ...pulumi.InvokeOption) (*ContactGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ContactGroupsResult
	err := ctx.Invoke("volcengine:cloud_monitor/contactGroups:ContactGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ContactGroups.
type ContactGroupsArgs struct {
	// Search for keywords in contact group names, supports fuzzy search.
	Name *string `pulumi:"name"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by ContactGroups.
type ContactGroupsResult struct {
	// The collection of query.
	Groups []ContactGroupsGroup `pulumi:"groups"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the contact group.
	Name       *string `pulumi:"name"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func ContactGroupsOutput(ctx *pulumi.Context, args ContactGroupsOutputArgs, opts ...pulumi.InvokeOption) ContactGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ContactGroupsResult, error) {
			args := v.(ContactGroupsArgs)
			r, err := ContactGroups(ctx, &args, opts...)
			var s ContactGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ContactGroupsResultOutput)
}

// A collection of arguments for invoking ContactGroups.
type ContactGroupsOutputArgs struct {
	// Search for keywords in contact group names, supports fuzzy search.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (ContactGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactGroupsArgs)(nil)).Elem()
}

// A collection of values returned by ContactGroups.
type ContactGroupsResultOutput struct{ *pulumi.OutputState }

func (ContactGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactGroupsResult)(nil)).Elem()
}

func (o ContactGroupsResultOutput) ToContactGroupsResultOutput() ContactGroupsResultOutput {
	return o
}

func (o ContactGroupsResultOutput) ToContactGroupsResultOutputWithContext(ctx context.Context) ContactGroupsResultOutput {
	return o
}

// The collection of query.
func (o ContactGroupsResultOutput) Groups() ContactGroupsGroupArrayOutput {
	return o.ApplyT(func(v ContactGroupsResult) []ContactGroupsGroup { return v.Groups }).(ContactGroupsGroupArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ContactGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ContactGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the contact group.
func (o ContactGroupsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactGroupsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ContactGroupsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactGroupsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o ContactGroupsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ContactGroupsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ContactGroupsResultOutput{})
}
