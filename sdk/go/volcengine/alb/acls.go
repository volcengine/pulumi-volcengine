// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of alb acls
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/alb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := alb.Acls(ctx, &alb.AclsArgs{
//				Ids: []string{
//					"acl-1g72w6z11ighs2zbhq4v3rvh4",
//				},
//				ProjectName: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Acls(ctx *pulumi.Context, args *AclsArgs, opts ...pulumi.InvokeOption) (*AclsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv AclsResult
	err := ctx.Invoke("volcengine:alb/acls:Acls", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Acls.
type AclsArgs struct {
	// The name of acl.
	AclName *string `pulumi:"aclName"`
	// A list of Acl IDs.
	Ids []string `pulumi:"ids"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The name of project.
	ProjectName *string `pulumi:"projectName"`
}

// A collection of values returned by Acls.
type AclsResult struct {
	// The Name of Acl.
	AclName *string `pulumi:"aclName"`
	// The collection of Acl query.
	Acls []AclsAcl `pulumi:"acls"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	OutputFile *string  `pulumi:"outputFile"`
	// The project name of Acl.
	ProjectName *string `pulumi:"projectName"`
	// The total count of Acl query.
	TotalCount int `pulumi:"totalCount"`
}

func AclsOutput(ctx *pulumi.Context, args AclsOutputArgs, opts ...pulumi.InvokeOption) AclsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (AclsResult, error) {
			args := v.(AclsArgs)
			r, err := Acls(ctx, &args, opts...)
			var s AclsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(AclsResultOutput)
}

// A collection of arguments for invoking Acls.
type AclsOutputArgs struct {
	// The name of acl.
	AclName pulumi.StringPtrInput `pulumi:"aclName"`
	// A list of Acl IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The name of project.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
}

func (AclsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsArgs)(nil)).Elem()
}

// A collection of values returned by Acls.
type AclsResultOutput struct{ *pulumi.OutputState }

func (AclsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsResult)(nil)).Elem()
}

func (o AclsResultOutput) ToAclsResultOutput() AclsResultOutput {
	return o
}

func (o AclsResultOutput) ToAclsResultOutputWithContext(ctx context.Context) AclsResultOutput {
	return o
}

// The Name of Acl.
func (o AclsResultOutput) AclName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclsResult) *string { return v.AclName }).(pulumi.StringPtrOutput)
}

// The collection of Acl query.
func (o AclsResultOutput) Acls() AclsAclArrayOutput {
	return o.ApplyT(func(v AclsResult) []AclsAcl { return v.Acls }).(AclsAclArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o AclsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AclsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o AclsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o AclsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The project name of Acl.
func (o AclsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The total count of Acl query.
func (o AclsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v AclsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(AclsResultOutput{})
}
