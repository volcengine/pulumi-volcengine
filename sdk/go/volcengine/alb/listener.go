// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage alb listener
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/alb"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooAlb, err := alb.NewAlb(ctx, "fooAlb", &alb.AlbArgs{
//				AddressIpVersion: pulumi.String("IPv4"),
//				Type:             pulumi.String("private"),
//				LoadBalancerName: pulumi.String("acc-test-alb-private"),
//				Description:      pulumi.String("acc-test"),
//				SubnetIds: pulumi.StringArray{
//					fooSubnet.ID(),
//				},
//				ProjectName:      pulumi.String("default"),
//				DeleteProtection: pulumi.String("off"),
//				Tags: alb.AlbTagArray{
//					&alb.AlbTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooServerGroup, err := alb.NewServerGroup(ctx, "fooServerGroup", &alb.ServerGroupArgs{
//				VpcId:           fooVpc.ID(),
//				ServerGroupName: pulumi.String("acc-test-server-group"),
//				Description:     pulumi.String("acc-test"),
//				ServerGroupType: pulumi.String("instance"),
//				Scheduler:       pulumi.String("wlc"),
//				ProjectName:     pulumi.String("default"),
//				HealthCheck: &alb.ServerGroupHealthCheckArgs{
//					Enabled:  pulumi.String("on"),
//					Interval: pulumi.Int(3),
//					Timeout:  pulumi.Int(3),
//					Method:   pulumi.String("GET"),
//				},
//				StickySessionConfig: &alb.ServerGroupStickySessionConfigArgs{
//					StickySessionEnabled: pulumi.String("on"),
//					StickySessionType:    pulumi.String("insert"),
//					CookieTimeout:        pulumi.Int(1100),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooCertificate, err := alb.NewCertificate(ctx, "fooCertificate", &alb.CertificateArgs{
//				Description: pulumi.String("tf-test"),
//				PublicKey:   pulumi.String("public key"),
//				PrivateKey:  pulumi.String("private key"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = alb.NewListener(ctx, "fooListener", &alb.ListenerArgs{
//				LoadBalancerId:    fooAlb.ID(),
//				ListenerName:      pulumi.String("acc-test-listener"),
//				Protocol:          pulumi.String("HTTPS"),
//				Port:              pulumi.Int(6666),
//				Enabled:           pulumi.String("off"),
//				CertificateSource: pulumi.String("alb"),
//				CertificateId:     fooCertificate.ID(),
//				ServerGroupId:     fooServerGroup.ID(),
//				Description:       pulumi.String("acc test listener"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AlbListener can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:alb/listener:Listener default lsn-273yv0mhs5xj47fap8sehiiso
// ```
type Listener struct {
	pulumi.CustomResourceState

	// The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
	AclIds pulumi.StringArrayOutput `pulumi:"aclIds"`
	// The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
	AclStatus pulumi.StringPtrOutput `pulumi:"aclStatus"`
	// The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
	AclType pulumi.StringOutput `pulumi:"aclType"`
	// The CA certificate id associated with the listener.
	CaCertificateId pulumi.StringPtrOutput `pulumi:"caCertificateId"`
	// The certificate id associated with the listener. Source is `certCenter`.
	CertCenterCertificateId pulumi.StringPtrOutput `pulumi:"certCenterCertificateId"`
	// The certificate id associated with the listener. Source is `alb`.
	CertificateId pulumi.StringPtrOutput `pulumi:"certificateId"`
	// The source of the certificate. Valid values: `alb`, `certCenter`. Default is `alb`.
	CertificateSource pulumi.StringPtrOutput `pulumi:"certificateSource"`
	// Personalized configuration ID, with a value of " " when not bound.
	CustomizedCfgId pulumi.StringPtrOutput `pulumi:"customizedCfgId"`
	// The description of the Listener.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The HTTP2 feature switch,valid value is on or off. Default is `off`.
	EnableHttp2 pulumi.StringPtrOutput `pulumi:"enableHttp2"`
	// The QUIC feature switch,valid value is on or off. Default is `off`.
	EnableQuic pulumi.StringPtrOutput `pulumi:"enableQuic"`
	// The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
	Enabled pulumi.StringPtrOutput `pulumi:"enabled"`
	// The ID of the Listener.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// The name of the Listener.
	ListenerName pulumi.StringOutput `pulumi:"listenerName"`
	// The Id of the load balancer.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// The port receiving request of the Listener, the value range in 1~65535.
	Port pulumi.IntOutput `pulumi:"port"`
	// The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The server group id associated with the listener.
	ServerGroupId pulumi.StringOutput `pulumi:"serverGroupId"`
}

// NewListener registers a new resource with the given unique name, arguments, and options.
func NewListener(ctx *pulumi.Context,
	name string, args *ListenerArgs, opts ...pulumi.ResourceOption) (*Listener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ServerGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Listener
	err := ctx.RegisterResource("volcengine:alb/listener:Listener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListener gets an existing Listener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerState, opts ...pulumi.ResourceOption) (*Listener, error) {
	var resource Listener
	err := ctx.ReadResource("volcengine:alb/listener:Listener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Listener resources.
type listenerState struct {
	// The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
	AclIds []string `pulumi:"aclIds"`
	// The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
	AclStatus *string `pulumi:"aclStatus"`
	// The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
	AclType *string `pulumi:"aclType"`
	// The CA certificate id associated with the listener.
	CaCertificateId *string `pulumi:"caCertificateId"`
	// The certificate id associated with the listener. Source is `certCenter`.
	CertCenterCertificateId *string `pulumi:"certCenterCertificateId"`
	// The certificate id associated with the listener. Source is `alb`.
	CertificateId *string `pulumi:"certificateId"`
	// The source of the certificate. Valid values: `alb`, `certCenter`. Default is `alb`.
	CertificateSource *string `pulumi:"certificateSource"`
	// Personalized configuration ID, with a value of " " when not bound.
	CustomizedCfgId *string `pulumi:"customizedCfgId"`
	// The description of the Listener.
	Description *string `pulumi:"description"`
	// The HTTP2 feature switch,valid value is on or off. Default is `off`.
	EnableHttp2 *string `pulumi:"enableHttp2"`
	// The QUIC feature switch,valid value is on or off. Default is `off`.
	EnableQuic *string `pulumi:"enableQuic"`
	// The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
	Enabled *string `pulumi:"enabled"`
	// The ID of the Listener.
	ListenerId *string `pulumi:"listenerId"`
	// The name of the Listener.
	ListenerName *string `pulumi:"listenerName"`
	// The Id of the load balancer.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The port receiving request of the Listener, the value range in 1~65535.
	Port *int `pulumi:"port"`
	// The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
	Protocol *string `pulumi:"protocol"`
	// The server group id associated with the listener.
	ServerGroupId *string `pulumi:"serverGroupId"`
}

type ListenerState struct {
	// The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
	AclIds pulumi.StringArrayInput
	// The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
	AclStatus pulumi.StringPtrInput
	// The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
	AclType pulumi.StringPtrInput
	// The CA certificate id associated with the listener.
	CaCertificateId pulumi.StringPtrInput
	// The certificate id associated with the listener. Source is `certCenter`.
	CertCenterCertificateId pulumi.StringPtrInput
	// The certificate id associated with the listener. Source is `alb`.
	CertificateId pulumi.StringPtrInput
	// The source of the certificate. Valid values: `alb`, `certCenter`. Default is `alb`.
	CertificateSource pulumi.StringPtrInput
	// Personalized configuration ID, with a value of " " when not bound.
	CustomizedCfgId pulumi.StringPtrInput
	// The description of the Listener.
	Description pulumi.StringPtrInput
	// The HTTP2 feature switch,valid value is on or off. Default is `off`.
	EnableHttp2 pulumi.StringPtrInput
	// The QUIC feature switch,valid value is on or off. Default is `off`.
	EnableQuic pulumi.StringPtrInput
	// The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
	Enabled pulumi.StringPtrInput
	// The ID of the Listener.
	ListenerId pulumi.StringPtrInput
	// The name of the Listener.
	ListenerName pulumi.StringPtrInput
	// The Id of the load balancer.
	LoadBalancerId pulumi.StringPtrInput
	// The port receiving request of the Listener, the value range in 1~65535.
	Port pulumi.IntPtrInput
	// The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
	Protocol pulumi.StringPtrInput
	// The server group id associated with the listener.
	ServerGroupId pulumi.StringPtrInput
}

func (ListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerState)(nil)).Elem()
}

type listenerArgs struct {
	// The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
	AclIds []string `pulumi:"aclIds"`
	// The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
	AclStatus *string `pulumi:"aclStatus"`
	// The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
	AclType *string `pulumi:"aclType"`
	// The CA certificate id associated with the listener.
	CaCertificateId *string `pulumi:"caCertificateId"`
	// The certificate id associated with the listener. Source is `certCenter`.
	CertCenterCertificateId *string `pulumi:"certCenterCertificateId"`
	// The certificate id associated with the listener. Source is `alb`.
	CertificateId *string `pulumi:"certificateId"`
	// The source of the certificate. Valid values: `alb`, `certCenter`. Default is `alb`.
	CertificateSource *string `pulumi:"certificateSource"`
	// Personalized configuration ID, with a value of " " when not bound.
	CustomizedCfgId *string `pulumi:"customizedCfgId"`
	// The description of the Listener.
	Description *string `pulumi:"description"`
	// The HTTP2 feature switch,valid value is on or off. Default is `off`.
	EnableHttp2 *string `pulumi:"enableHttp2"`
	// The QUIC feature switch,valid value is on or off. Default is `off`.
	EnableQuic *string `pulumi:"enableQuic"`
	// The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
	Enabled *string `pulumi:"enabled"`
	// The name of the Listener.
	ListenerName *string `pulumi:"listenerName"`
	// The Id of the load balancer.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The port receiving request of the Listener, the value range in 1~65535.
	Port int `pulumi:"port"`
	// The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
	Protocol string `pulumi:"protocol"`
	// The server group id associated with the listener.
	ServerGroupId string `pulumi:"serverGroupId"`
}

// The set of arguments for constructing a Listener resource.
type ListenerArgs struct {
	// The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
	AclIds pulumi.StringArrayInput
	// The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
	AclStatus pulumi.StringPtrInput
	// The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
	AclType pulumi.StringPtrInput
	// The CA certificate id associated with the listener.
	CaCertificateId pulumi.StringPtrInput
	// The certificate id associated with the listener. Source is `certCenter`.
	CertCenterCertificateId pulumi.StringPtrInput
	// The certificate id associated with the listener. Source is `alb`.
	CertificateId pulumi.StringPtrInput
	// The source of the certificate. Valid values: `alb`, `certCenter`. Default is `alb`.
	CertificateSource pulumi.StringPtrInput
	// Personalized configuration ID, with a value of " " when not bound.
	CustomizedCfgId pulumi.StringPtrInput
	// The description of the Listener.
	Description pulumi.StringPtrInput
	// The HTTP2 feature switch,valid value is on or off. Default is `off`.
	EnableHttp2 pulumi.StringPtrInput
	// The QUIC feature switch,valid value is on or off. Default is `off`.
	EnableQuic pulumi.StringPtrInput
	// The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
	Enabled pulumi.StringPtrInput
	// The name of the Listener.
	ListenerName pulumi.StringPtrInput
	// The Id of the load balancer.
	LoadBalancerId pulumi.StringInput
	// The port receiving request of the Listener, the value range in 1~65535.
	Port pulumi.IntInput
	// The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
	Protocol pulumi.StringInput
	// The server group id associated with the listener.
	ServerGroupId pulumi.StringInput
}

func (ListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerArgs)(nil)).Elem()
}

type ListenerInput interface {
	pulumi.Input

	ToListenerOutput() ListenerOutput
	ToListenerOutputWithContext(ctx context.Context) ListenerOutput
}

func (*Listener) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (i *Listener) ToListenerOutput() ListenerOutput {
	return i.ToListenerOutputWithContext(context.Background())
}

func (i *Listener) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerOutput)
}

// ListenerArrayInput is an input type that accepts ListenerArray and ListenerArrayOutput values.
// You can construct a concrete instance of `ListenerArrayInput` via:
//
//	ListenerArray{ ListenerArgs{...} }
type ListenerArrayInput interface {
	pulumi.Input

	ToListenerArrayOutput() ListenerArrayOutput
	ToListenerArrayOutputWithContext(context.Context) ListenerArrayOutput
}

type ListenerArray []ListenerInput

func (ListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (i ListenerArray) ToListenerArrayOutput() ListenerArrayOutput {
	return i.ToListenerArrayOutputWithContext(context.Background())
}

func (i ListenerArray) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerArrayOutput)
}

// ListenerMapInput is an input type that accepts ListenerMap and ListenerMapOutput values.
// You can construct a concrete instance of `ListenerMapInput` via:
//
//	ListenerMap{ "key": ListenerArgs{...} }
type ListenerMapInput interface {
	pulumi.Input

	ToListenerMapOutput() ListenerMapOutput
	ToListenerMapOutputWithContext(context.Context) ListenerMapOutput
}

type ListenerMap map[string]ListenerInput

func (ListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (i ListenerMap) ToListenerMapOutput() ListenerMapOutput {
	return i.ToListenerMapOutputWithContext(context.Background())
}

func (i ListenerMap) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerMapOutput)
}

type ListenerOutput struct{ *pulumi.OutputState }

func (ListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (o ListenerOutput) ToListenerOutput() ListenerOutput {
	return o
}

func (o ListenerOutput) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return o
}

// The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
func (o ListenerOutput) AclIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringArrayOutput { return v.AclIds }).(pulumi.StringArrayOutput)
}

// The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
func (o ListenerOutput) AclStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.AclStatus }).(pulumi.StringPtrOutput)
}

// The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
func (o ListenerOutput) AclType() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.AclType }).(pulumi.StringOutput)
}

// The CA certificate id associated with the listener.
func (o ListenerOutput) CaCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.CaCertificateId }).(pulumi.StringPtrOutput)
}

// The certificate id associated with the listener. Source is `certCenter`.
func (o ListenerOutput) CertCenterCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.CertCenterCertificateId }).(pulumi.StringPtrOutput)
}

// The certificate id associated with the listener. Source is `alb`.
func (o ListenerOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// The source of the certificate. Valid values: `alb`, `certCenter`. Default is `alb`.
func (o ListenerOutput) CertificateSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.CertificateSource }).(pulumi.StringPtrOutput)
}

// Personalized configuration ID, with a value of " " when not bound.
func (o ListenerOutput) CustomizedCfgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.CustomizedCfgId }).(pulumi.StringPtrOutput)
}

// The description of the Listener.
func (o ListenerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The HTTP2 feature switch,valid value is on or off. Default is `off`.
func (o ListenerOutput) EnableHttp2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.EnableHttp2 }).(pulumi.StringPtrOutput)
}

// The QUIC feature switch,valid value is on or off. Default is `off`.
func (o ListenerOutput) EnableQuic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.EnableQuic }).(pulumi.StringPtrOutput)
}

// The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
func (o ListenerOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.Enabled }).(pulumi.StringPtrOutput)
}

// The ID of the Listener.
func (o ListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// The name of the Listener.
func (o ListenerOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ListenerName }).(pulumi.StringOutput)
}

// The Id of the load balancer.
func (o ListenerOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// The port receiving request of the Listener, the value range in 1~65535.
func (o ListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
func (o ListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The server group id associated with the listener.
func (o ListenerOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ServerGroupId }).(pulumi.StringOutput)
}

type ListenerArrayOutput struct{ *pulumi.OutputState }

func (ListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (o ListenerArrayOutput) ToListenerArrayOutput() ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) Index(i pulumi.IntInput) ListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].([]*Listener)[vs[1].(int)]
	}).(ListenerOutput)
}

type ListenerMapOutput struct{ *pulumi.OutputState }

func (ListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (o ListenerMapOutput) ToListenerMapOutput() ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) MapIndex(k pulumi.StringInput) ListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].(map[string]*Listener)[vs[1].(string)]
	}).(ListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerInput)(nil)).Elem(), &Listener{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerArrayInput)(nil)).Elem(), ListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerMapInput)(nil)).Elem(), ListenerMap{})
	pulumi.RegisterOutputType(ListenerOutput{})
	pulumi.RegisterOutputType(ListenerArrayOutput{})
	pulumi.RegisterOutputType(ListenerMapOutput{})
}
