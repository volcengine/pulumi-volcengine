// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage alb ca certificate
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/alb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := alb.NewCACertificate(ctx, "foo", &alb.CACertificateArgs{
//				CaCertificate:     pulumi.String("-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----\n"),
//				CaCertificateName: pulumi.String("acc-test-1"),
//				Description:       pulumi.String("acc-test-1"),
//				ProjectName:       pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AlbCaCertificate can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:alb/cACertificate:CACertificate default cert-*****
//
// ```
type CACertificate struct {
	pulumi.CustomResourceState

	// The content of the CA certificate.
	CaCertificate pulumi.StringOutput `pulumi:"caCertificate"`
	// The name of the CA certificate.
	CaCertificateName pulumi.StringOutput `pulumi:"caCertificateName"`
	// The type of the CA Certificate.
	CertificateType pulumi.StringOutput `pulumi:"certificateType"`
	// The create time of the CA Certificate.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the CA certificate.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The domain name of the CA Certificate.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The expire time of the CA Certificate.
	ExpiredAt pulumi.StringOutput `pulumi:"expiredAt"`
	// The ID list of the Listener.
	Listeners pulumi.StringArrayOutput `pulumi:"listeners"`
	// The project name of the CA certificate.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The status of the CA Certificate.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewCACertificate registers a new resource with the given unique name, arguments, and options.
func NewCACertificate(ctx *pulumi.Context,
	name string, args *CACertificateArgs, opts ...pulumi.ResourceOption) (*CACertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CaCertificate == nil {
		return nil, errors.New("invalid value for required argument 'CaCertificate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CACertificate
	err := ctx.RegisterResource("volcengine:alb/cACertificate:CACertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCACertificate gets an existing CACertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCACertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CACertificateState, opts ...pulumi.ResourceOption) (*CACertificate, error) {
	var resource CACertificate
	err := ctx.ReadResource("volcengine:alb/cACertificate:CACertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CACertificate resources.
type cacertificateState struct {
	// The content of the CA certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// The name of the CA certificate.
	CaCertificateName *string `pulumi:"caCertificateName"`
	// The type of the CA Certificate.
	CertificateType *string `pulumi:"certificateType"`
	// The create time of the CA Certificate.
	CreateTime *string `pulumi:"createTime"`
	// The description of the CA certificate.
	Description *string `pulumi:"description"`
	// The domain name of the CA Certificate.
	DomainName *string `pulumi:"domainName"`
	// The expire time of the CA Certificate.
	ExpiredAt *string `pulumi:"expiredAt"`
	// The ID list of the Listener.
	Listeners []string `pulumi:"listeners"`
	// The project name of the CA certificate.
	ProjectName *string `pulumi:"projectName"`
	// The status of the CA Certificate.
	Status *string `pulumi:"status"`
}

type CACertificateState struct {
	// The content of the CA certificate.
	CaCertificate pulumi.StringPtrInput
	// The name of the CA certificate.
	CaCertificateName pulumi.StringPtrInput
	// The type of the CA Certificate.
	CertificateType pulumi.StringPtrInput
	// The create time of the CA Certificate.
	CreateTime pulumi.StringPtrInput
	// The description of the CA certificate.
	Description pulumi.StringPtrInput
	// The domain name of the CA Certificate.
	DomainName pulumi.StringPtrInput
	// The expire time of the CA Certificate.
	ExpiredAt pulumi.StringPtrInput
	// The ID list of the Listener.
	Listeners pulumi.StringArrayInput
	// The project name of the CA certificate.
	ProjectName pulumi.StringPtrInput
	// The status of the CA Certificate.
	Status pulumi.StringPtrInput
}

func (CACertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cacertificateState)(nil)).Elem()
}

type cacertificateArgs struct {
	// The content of the CA certificate.
	CaCertificate string `pulumi:"caCertificate"`
	// The name of the CA certificate.
	CaCertificateName *string `pulumi:"caCertificateName"`
	// The description of the CA certificate.
	Description *string `pulumi:"description"`
	// The project name of the CA certificate.
	ProjectName *string `pulumi:"projectName"`
}

// The set of arguments for constructing a CACertificate resource.
type CACertificateArgs struct {
	// The content of the CA certificate.
	CaCertificate pulumi.StringInput
	// The name of the CA certificate.
	CaCertificateName pulumi.StringPtrInput
	// The description of the CA certificate.
	Description pulumi.StringPtrInput
	// The project name of the CA certificate.
	ProjectName pulumi.StringPtrInput
}

func (CACertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cacertificateArgs)(nil)).Elem()
}

type CACertificateInput interface {
	pulumi.Input

	ToCACertificateOutput() CACertificateOutput
	ToCACertificateOutputWithContext(ctx context.Context) CACertificateOutput
}

func (*CACertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**CACertificate)(nil)).Elem()
}

func (i *CACertificate) ToCACertificateOutput() CACertificateOutput {
	return i.ToCACertificateOutputWithContext(context.Background())
}

func (i *CACertificate) ToCACertificateOutputWithContext(ctx context.Context) CACertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CACertificateOutput)
}

// CACertificateArrayInput is an input type that accepts CACertificateArray and CACertificateArrayOutput values.
// You can construct a concrete instance of `CACertificateArrayInput` via:
//
//	CACertificateArray{ CACertificateArgs{...} }
type CACertificateArrayInput interface {
	pulumi.Input

	ToCACertificateArrayOutput() CACertificateArrayOutput
	ToCACertificateArrayOutputWithContext(context.Context) CACertificateArrayOutput
}

type CACertificateArray []CACertificateInput

func (CACertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CACertificate)(nil)).Elem()
}

func (i CACertificateArray) ToCACertificateArrayOutput() CACertificateArrayOutput {
	return i.ToCACertificateArrayOutputWithContext(context.Background())
}

func (i CACertificateArray) ToCACertificateArrayOutputWithContext(ctx context.Context) CACertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CACertificateArrayOutput)
}

// CACertificateMapInput is an input type that accepts CACertificateMap and CACertificateMapOutput values.
// You can construct a concrete instance of `CACertificateMapInput` via:
//
//	CACertificateMap{ "key": CACertificateArgs{...} }
type CACertificateMapInput interface {
	pulumi.Input

	ToCACertificateMapOutput() CACertificateMapOutput
	ToCACertificateMapOutputWithContext(context.Context) CACertificateMapOutput
}

type CACertificateMap map[string]CACertificateInput

func (CACertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CACertificate)(nil)).Elem()
}

func (i CACertificateMap) ToCACertificateMapOutput() CACertificateMapOutput {
	return i.ToCACertificateMapOutputWithContext(context.Background())
}

func (i CACertificateMap) ToCACertificateMapOutputWithContext(ctx context.Context) CACertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CACertificateMapOutput)
}

type CACertificateOutput struct{ *pulumi.OutputState }

func (CACertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CACertificate)(nil)).Elem()
}

func (o CACertificateOutput) ToCACertificateOutput() CACertificateOutput {
	return o
}

func (o CACertificateOutput) ToCACertificateOutputWithContext(ctx context.Context) CACertificateOutput {
	return o
}

// The content of the CA certificate.
func (o CACertificateOutput) CaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringOutput { return v.CaCertificate }).(pulumi.StringOutput)
}

// The name of the CA certificate.
func (o CACertificateOutput) CaCertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringOutput { return v.CaCertificateName }).(pulumi.StringOutput)
}

// The type of the CA Certificate.
func (o CACertificateOutput) CertificateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringOutput { return v.CertificateType }).(pulumi.StringOutput)
}

// The create time of the CA Certificate.
func (o CACertificateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the CA certificate.
func (o CACertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The domain name of the CA Certificate.
func (o CACertificateOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The expire time of the CA Certificate.
func (o CACertificateOutput) ExpiredAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringOutput { return v.ExpiredAt }).(pulumi.StringOutput)
}

// The ID list of the Listener.
func (o CACertificateOutput) Listeners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringArrayOutput { return v.Listeners }).(pulumi.StringArrayOutput)
}

// The project name of the CA certificate.
func (o CACertificateOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The status of the CA Certificate.
func (o CACertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type CACertificateArrayOutput struct{ *pulumi.OutputState }

func (CACertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CACertificate)(nil)).Elem()
}

func (o CACertificateArrayOutput) ToCACertificateArrayOutput() CACertificateArrayOutput {
	return o
}

func (o CACertificateArrayOutput) ToCACertificateArrayOutputWithContext(ctx context.Context) CACertificateArrayOutput {
	return o
}

func (o CACertificateArrayOutput) Index(i pulumi.IntInput) CACertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CACertificate {
		return vs[0].([]*CACertificate)[vs[1].(int)]
	}).(CACertificateOutput)
}

type CACertificateMapOutput struct{ *pulumi.OutputState }

func (CACertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CACertificate)(nil)).Elem()
}

func (o CACertificateMapOutput) ToCACertificateMapOutput() CACertificateMapOutput {
	return o
}

func (o CACertificateMapOutput) ToCACertificateMapOutputWithContext(ctx context.Context) CACertificateMapOutput {
	return o
}

func (o CACertificateMapOutput) MapIndex(k pulumi.StringInput) CACertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CACertificate {
		return vs[0].(map[string]*CACertificate)[vs[1].(string)]
	}).(CACertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CACertificateInput)(nil)).Elem(), &CACertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CACertificateArrayInput)(nil)).Elem(), CACertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CACertificateMapInput)(nil)).Elem(), CACertificateMap{})
	pulumi.RegisterOutputType(CACertificateOutput{})
	pulumi.RegisterOutputType(CACertificateArrayOutput{})
	pulumi.RegisterOutputType(CACertificateMapOutput{})
}
