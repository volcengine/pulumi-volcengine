// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of albs
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/alb"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooZones, err := alb.Zones(ctx, nil, nil);
// if err != nil {
// return err
// }
// fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
// VpcName: pulumi.String("acc-test-vpc"),
// CidrBlock: pulumi.String("172.16.0.0/16"),
// })
// if err != nil {
// return err
// }
// subnet1, err := vpc.NewSubnet(ctx, "subnet1", &vpc.SubnetArgs{
// SubnetName: pulumi.String("acc-test-subnet-1"),
// CidrBlock: pulumi.String("172.16.1.0/24"),
// ZoneId: pulumi.String(fooZones.Zones[0].Id),
// VpcId: fooVpc.ID(),
// })
// if err != nil {
// return err
// }
// subnet2, err := vpc.NewSubnet(ctx, "subnet2", &vpc.SubnetArgs{
// SubnetName: pulumi.String("acc-test-subnet-2"),
// CidrBlock: pulumi.String("172.16.2.0/24"),
// ZoneId: pulumi.String(fooZones.Zones[1].Id),
// VpcId: fooVpc.ID(),
// })
// if err != nil {
// return err
// }
// var fooAlb []*alb.Alb
//
//	for index := 0; index < 3; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := alb.NewAlb(ctx, fmt.Sprintf("fooAlb-%v", key0), &alb.AlbArgs{
// AddressIpVersion: pulumi.String("IPv4"),
// Type: pulumi.String("private"),
// LoadBalancerName: pulumi.String(fmt.Sprintf("acc-test-alb-private-%v", val0)),
// Description: pulumi.String("acc-test"),
// SubnetIds: pulumi.StringArray{
// subnet1.ID(),
// subnet2.ID(),
// },
// ProjectName: pulumi.String("default"),
// DeleteProtection: pulumi.String("off"),
// Tags: alb.AlbTagArray{
// &alb.AlbTagArgs{
// Key: pulumi.String("k1"),
// Value: pulumi.String("v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooAlb = append(fooAlb, __res)
// }
// _ = alb.AlbsOutput(ctx, alb.AlbsOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:alb-albs:Albs.pp:36,9-21),
// }, nil);
// return nil
// })
// }
// ```
func Albs(ctx *pulumi.Context, args *AlbsArgs, opts ...pulumi.InvokeOption) (*AlbsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv AlbsResult
	err := ctx.Invoke("volcengine:alb/albs:Albs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Albs.
type AlbsArgs struct {
	// The private ip address of the Alb.
	EniAddress *string `pulumi:"eniAddress"`
	// A list of Alb IDs.
	Ids []string `pulumi:"ids"`
	// The name of the Alb.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project of the Alb.
	Project *string `pulumi:"project"`
	// Tags.
	Tags []AlbsTag `pulumi:"tags"`
	// The vpc id which Alb belongs to.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by Albs.
type AlbsResult struct {
	// The collection of query.
	Albs []AlbsAlb `pulumi:"albs"`
	// The Eni address of the Alb in this availability zone.
	EniAddress *string `pulumi:"eniAddress"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The name of the Alb.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	NameRegex        *string `pulumi:"nameRegex"`
	OutputFile       *string `pulumi:"outputFile"`
	Project          *string `pulumi:"project"`
	// Tags.
	Tags []AlbsTag `pulumi:"tags"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The vpc id of the Alb.
	VpcId *string `pulumi:"vpcId"`
}

func AlbsOutput(ctx *pulumi.Context, args AlbsOutputArgs, opts ...pulumi.InvokeOption) AlbsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (AlbsResult, error) {
			args := v.(AlbsArgs)
			r, err := Albs(ctx, &args, opts...)
			var s AlbsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(AlbsResultOutput)
}

// A collection of arguments for invoking Albs.
type AlbsOutputArgs struct {
	// The private ip address of the Alb.
	EniAddress pulumi.StringPtrInput `pulumi:"eniAddress"`
	// A list of Alb IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of the Alb.
	LoadBalancerName pulumi.StringPtrInput `pulumi:"loadBalancerName"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project of the Alb.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Tags.
	Tags AlbsTagArrayInput `pulumi:"tags"`
	// The vpc id which Alb belongs to.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (AlbsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlbsArgs)(nil)).Elem()
}

// A collection of values returned by Albs.
type AlbsResultOutput struct{ *pulumi.OutputState }

func (AlbsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlbsResult)(nil)).Elem()
}

func (o AlbsResultOutput) ToAlbsResultOutput() AlbsResultOutput {
	return o
}

func (o AlbsResultOutput) ToAlbsResultOutputWithContext(ctx context.Context) AlbsResultOutput {
	return o
}

// The collection of query.
func (o AlbsResultOutput) Albs() AlbsAlbArrayOutput {
	return o.ApplyT(func(v AlbsResult) []AlbsAlb { return v.Albs }).(AlbsAlbArrayOutput)
}

// The Eni address of the Alb in this availability zone.
func (o AlbsResultOutput) EniAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlbsResult) *string { return v.EniAddress }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o AlbsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AlbsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o AlbsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlbsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of the Alb.
func (o AlbsResultOutput) LoadBalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlbsResult) *string { return v.LoadBalancerName }).(pulumi.StringPtrOutput)
}

func (o AlbsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlbsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o AlbsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlbsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o AlbsResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlbsResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Tags.
func (o AlbsResultOutput) Tags() AlbsTagArrayOutput {
	return o.ApplyT(func(v AlbsResult) []AlbsTag { return v.Tags }).(AlbsTagArrayOutput)
}

// The total count of query.
func (o AlbsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v AlbsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The vpc id of the Alb.
func (o AlbsResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlbsResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AlbsResultOutput{})
}
