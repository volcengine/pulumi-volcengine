// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage alb listener domain extension
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/alb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooListener, err := alb.NewListener(ctx, "fooListener", &alb.ListenerArgs{
//				LoadBalancerId:  pulumi.String("alb-1iidd17v3klj474adhfrunyz9"),
//				ListenerName:    pulumi.String("acc-test-listener-1"),
//				Protocol:        pulumi.String("HTTPS"),
//				Port:            pulumi.Int(6666),
//				Enabled:         pulumi.String("on"),
//				CertificateId:   pulumi.String("cert-1iidd2pahdyio74adhfr9ajwg"),
//				CaCertificateId: pulumi.String("cert-1iidd2r9ii0hs74adhfeodxo1"),
//				ServerGroupId:   pulumi.String("rsp-1g72w74y4umf42zbhq4k4hnln"),
//				EnableHttp2:     pulumi.String("on"),
//				EnableQuic:      pulumi.String("off"),
//				AclStatus:       pulumi.String("on"),
//				AclType:         pulumi.String("white"),
//				AclIds: pulumi.StringArray{
//					pulumi.String("acl-1g72w6z11ighs2zbhq4v3rvh4"),
//				},
//				Description: pulumi.String("acc test listener"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = alb.NewListenerDomainExtension(ctx, "fooListenerDomainExtension", &alb.ListenerDomainExtensionArgs{
//				ListenerId:    fooListener.ID(),
//				Domain:        pulumi.String("test-modify.com"),
//				CertificateId: pulumi.String("cert-1iidd2pahdyio74adhfr9ajwg"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AlbListenerDomainExtension can be imported using the listener id and domain extension id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:alb/listenerDomainExtension:ListenerDomainExtension default listenerId:extensionId
//
// ```
type ListenerDomainExtension struct {
	pulumi.CustomResourceState

	// Server certificate used for the domain name.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// The domain name. The maximum number of associated domain names for an HTTPS listener is 20, with a value range of 1 to 20.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The id of the domain extension.
	DomainExtensionId pulumi.StringOutput `pulumi:"domainExtensionId"`
	// The listener id. Only HTTPS listener is effective.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
}

// NewListenerDomainExtension registers a new resource with the given unique name, arguments, and options.
func NewListenerDomainExtension(ctx *pulumi.Context,
	name string, args *ListenerDomainExtensionArgs, opts ...pulumi.ResourceOption) (*ListenerDomainExtension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ListenerDomainExtension
	err := ctx.RegisterResource("volcengine:alb/listenerDomainExtension:ListenerDomainExtension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListenerDomainExtension gets an existing ListenerDomainExtension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListenerDomainExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerDomainExtensionState, opts ...pulumi.ResourceOption) (*ListenerDomainExtension, error) {
	var resource ListenerDomainExtension
	err := ctx.ReadResource("volcengine:alb/listenerDomainExtension:ListenerDomainExtension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListenerDomainExtension resources.
type listenerDomainExtensionState struct {
	// Server certificate used for the domain name.
	CertificateId *string `pulumi:"certificateId"`
	// The domain name. The maximum number of associated domain names for an HTTPS listener is 20, with a value range of 1 to 20.
	Domain *string `pulumi:"domain"`
	// The id of the domain extension.
	DomainExtensionId *string `pulumi:"domainExtensionId"`
	// The listener id. Only HTTPS listener is effective.
	ListenerId *string `pulumi:"listenerId"`
}

type ListenerDomainExtensionState struct {
	// Server certificate used for the domain name.
	CertificateId pulumi.StringPtrInput
	// The domain name. The maximum number of associated domain names for an HTTPS listener is 20, with a value range of 1 to 20.
	Domain pulumi.StringPtrInput
	// The id of the domain extension.
	DomainExtensionId pulumi.StringPtrInput
	// The listener id. Only HTTPS listener is effective.
	ListenerId pulumi.StringPtrInput
}

func (ListenerDomainExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerDomainExtensionState)(nil)).Elem()
}

type listenerDomainExtensionArgs struct {
	// Server certificate used for the domain name.
	CertificateId string `pulumi:"certificateId"`
	// The domain name. The maximum number of associated domain names for an HTTPS listener is 20, with a value range of 1 to 20.
	Domain string `pulumi:"domain"`
	// The listener id. Only HTTPS listener is effective.
	ListenerId string `pulumi:"listenerId"`
}

// The set of arguments for constructing a ListenerDomainExtension resource.
type ListenerDomainExtensionArgs struct {
	// Server certificate used for the domain name.
	CertificateId pulumi.StringInput
	// The domain name. The maximum number of associated domain names for an HTTPS listener is 20, with a value range of 1 to 20.
	Domain pulumi.StringInput
	// The listener id. Only HTTPS listener is effective.
	ListenerId pulumi.StringInput
}

func (ListenerDomainExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerDomainExtensionArgs)(nil)).Elem()
}

type ListenerDomainExtensionInput interface {
	pulumi.Input

	ToListenerDomainExtensionOutput() ListenerDomainExtensionOutput
	ToListenerDomainExtensionOutputWithContext(ctx context.Context) ListenerDomainExtensionOutput
}

func (*ListenerDomainExtension) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerDomainExtension)(nil)).Elem()
}

func (i *ListenerDomainExtension) ToListenerDomainExtensionOutput() ListenerDomainExtensionOutput {
	return i.ToListenerDomainExtensionOutputWithContext(context.Background())
}

func (i *ListenerDomainExtension) ToListenerDomainExtensionOutputWithContext(ctx context.Context) ListenerDomainExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDomainExtensionOutput)
}

// ListenerDomainExtensionArrayInput is an input type that accepts ListenerDomainExtensionArray and ListenerDomainExtensionArrayOutput values.
// You can construct a concrete instance of `ListenerDomainExtensionArrayInput` via:
//
//	ListenerDomainExtensionArray{ ListenerDomainExtensionArgs{...} }
type ListenerDomainExtensionArrayInput interface {
	pulumi.Input

	ToListenerDomainExtensionArrayOutput() ListenerDomainExtensionArrayOutput
	ToListenerDomainExtensionArrayOutputWithContext(context.Context) ListenerDomainExtensionArrayOutput
}

type ListenerDomainExtensionArray []ListenerDomainExtensionInput

func (ListenerDomainExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListenerDomainExtension)(nil)).Elem()
}

func (i ListenerDomainExtensionArray) ToListenerDomainExtensionArrayOutput() ListenerDomainExtensionArrayOutput {
	return i.ToListenerDomainExtensionArrayOutputWithContext(context.Background())
}

func (i ListenerDomainExtensionArray) ToListenerDomainExtensionArrayOutputWithContext(ctx context.Context) ListenerDomainExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDomainExtensionArrayOutput)
}

// ListenerDomainExtensionMapInput is an input type that accepts ListenerDomainExtensionMap and ListenerDomainExtensionMapOutput values.
// You can construct a concrete instance of `ListenerDomainExtensionMapInput` via:
//
//	ListenerDomainExtensionMap{ "key": ListenerDomainExtensionArgs{...} }
type ListenerDomainExtensionMapInput interface {
	pulumi.Input

	ToListenerDomainExtensionMapOutput() ListenerDomainExtensionMapOutput
	ToListenerDomainExtensionMapOutputWithContext(context.Context) ListenerDomainExtensionMapOutput
}

type ListenerDomainExtensionMap map[string]ListenerDomainExtensionInput

func (ListenerDomainExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListenerDomainExtension)(nil)).Elem()
}

func (i ListenerDomainExtensionMap) ToListenerDomainExtensionMapOutput() ListenerDomainExtensionMapOutput {
	return i.ToListenerDomainExtensionMapOutputWithContext(context.Background())
}

func (i ListenerDomainExtensionMap) ToListenerDomainExtensionMapOutputWithContext(ctx context.Context) ListenerDomainExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDomainExtensionMapOutput)
}

type ListenerDomainExtensionOutput struct{ *pulumi.OutputState }

func (ListenerDomainExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerDomainExtension)(nil)).Elem()
}

func (o ListenerDomainExtensionOutput) ToListenerDomainExtensionOutput() ListenerDomainExtensionOutput {
	return o
}

func (o ListenerDomainExtensionOutput) ToListenerDomainExtensionOutputWithContext(ctx context.Context) ListenerDomainExtensionOutput {
	return o
}

// Server certificate used for the domain name.
func (o ListenerDomainExtensionOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerDomainExtension) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// The domain name. The maximum number of associated domain names for an HTTPS listener is 20, with a value range of 1 to 20.
func (o ListenerDomainExtensionOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerDomainExtension) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The id of the domain extension.
func (o ListenerDomainExtensionOutput) DomainExtensionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerDomainExtension) pulumi.StringOutput { return v.DomainExtensionId }).(pulumi.StringOutput)
}

// The listener id. Only HTTPS listener is effective.
func (o ListenerDomainExtensionOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerDomainExtension) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

type ListenerDomainExtensionArrayOutput struct{ *pulumi.OutputState }

func (ListenerDomainExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListenerDomainExtension)(nil)).Elem()
}

func (o ListenerDomainExtensionArrayOutput) ToListenerDomainExtensionArrayOutput() ListenerDomainExtensionArrayOutput {
	return o
}

func (o ListenerDomainExtensionArrayOutput) ToListenerDomainExtensionArrayOutputWithContext(ctx context.Context) ListenerDomainExtensionArrayOutput {
	return o
}

func (o ListenerDomainExtensionArrayOutput) Index(i pulumi.IntInput) ListenerDomainExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ListenerDomainExtension {
		return vs[0].([]*ListenerDomainExtension)[vs[1].(int)]
	}).(ListenerDomainExtensionOutput)
}

type ListenerDomainExtensionMapOutput struct{ *pulumi.OutputState }

func (ListenerDomainExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListenerDomainExtension)(nil)).Elem()
}

func (o ListenerDomainExtensionMapOutput) ToListenerDomainExtensionMapOutput() ListenerDomainExtensionMapOutput {
	return o
}

func (o ListenerDomainExtensionMapOutput) ToListenerDomainExtensionMapOutputWithContext(ctx context.Context) ListenerDomainExtensionMapOutput {
	return o
}

func (o ListenerDomainExtensionMapOutput) MapIndex(k pulumi.StringInput) ListenerDomainExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ListenerDomainExtension {
		return vs[0].(map[string]*ListenerDomainExtension)[vs[1].(string)]
	}).(ListenerDomainExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerDomainExtensionInput)(nil)).Elem(), &ListenerDomainExtension{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerDomainExtensionArrayInput)(nil)).Elem(), ListenerDomainExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerDomainExtensionMapInput)(nil)).Elem(), ListenerDomainExtensionMap{})
	pulumi.RegisterOutputType(ListenerDomainExtensionOutput{})
	pulumi.RegisterOutputType(ListenerDomainExtensionArrayOutput{})
	pulumi.RegisterOutputType(ListenerDomainExtensionMapOutput{})
}
