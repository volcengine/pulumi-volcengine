// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage alb
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/alb"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := alb.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			vpcIpv6, err := vpc.NewVpc(ctx, "vpcIpv6", &vpc.VpcArgs{
//				VpcName:    pulumi.String("acc-test-vpc-ipv6"),
//				CidrBlock:  pulumi.String("172.16.0.0/16"),
//				EnableIpv6: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			subnetIpv61, err := vpc.NewSubnet(ctx, "subnetIpv61", &vpc.SubnetArgs{
//				SubnetName:    pulumi.String("acc-test-subnet-ipv6-1"),
//				CidrBlock:     pulumi.String("172.16.1.0/24"),
//				ZoneId:        pulumi.String(foo.Zones[0].Id),
//				VpcId:         vpcIpv6.ID(),
//				Ipv6CidrBlock: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			subnetIpv62, err := vpc.NewSubnet(ctx, "subnetIpv62", &vpc.SubnetArgs{
//				SubnetName:    pulumi.String("acc-test-subnet-ipv6-2"),
//				CidrBlock:     pulumi.String("172.16.2.0/24"),
//				ZoneId:        pulumi.String(foo.Zones[1].Id),
//				VpcId:         vpcIpv6.ID(),
//				Ipv6CidrBlock: pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			ipv6Gateway, err := vpc.NewIpv6Gateway(ctx, "ipv6Gateway", &vpc.Ipv6GatewayArgs{
//				VpcId: vpcIpv6.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = alb.NewAlb(ctx, "alb-private", &alb.AlbArgs{
//				AddressIpVersion: pulumi.String("IPv4"),
//				Type:             pulumi.String("private"),
//				LoadBalancerName: pulumi.String("acc-test-alb-private"),
//				Description:      pulumi.String("acc-test"),
//				SubnetIds: pulumi.StringArray{
//					subnetIpv61.ID(),
//					subnetIpv62.ID(),
//				},
//				ProjectName:      pulumi.String("default"),
//				DeleteProtection: pulumi.String("off"),
//				Tags: alb.AlbTagArray{
//					&alb.AlbTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = alb.NewAlb(ctx, "alb-public", &alb.AlbArgs{
//				AddressIpVersion: pulumi.String("DualStack"),
//				Type:             pulumi.String("public"),
//				LoadBalancerName: pulumi.String("acc-test-alb-public"),
//				Description:      pulumi.String("acc-test"),
//				SubnetIds: pulumi.StringArray{
//					subnetIpv61.ID(),
//					subnetIpv62.ID(),
//				},
//				ProjectName:      pulumi.String("default"),
//				DeleteProtection: pulumi.String("off"),
//				EipBillingConfig: &alb.AlbEipBillingConfigArgs{
//					Isp:            pulumi.String("BGP"),
//					EipBillingType: pulumi.String("PostPaidByBandwidth"),
//					Bandwidth:      pulumi.Int(1),
//				},
//				Ipv6EipBillingConfig: &alb.AlbIpv6EipBillingConfigArgs{
//					Isp:         pulumi.String("BGP"),
//					BillingType: pulumi.String("PostPaidByBandwidth"),
//					Bandwidth:   pulumi.Int(1),
//				},
//				Tags: alb.AlbTagArray{
//					&alb.AlbTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				ipv6Gateway,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Alb can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:alb/alb:Alb default resource_id
// ```
type Alb struct {
	pulumi.CustomResourceState

	// The address ip version of the Alb. Valid values: `IPv4`, `DualStack`. Default is `ipv4`.
	AddressIpVersion pulumi.StringPtrOutput `pulumi:"addressIpVersion"`
	// Whether to enable the delete protection function of the Alb. Valid values: `on`, `off`. Default is `off`.
	DeleteProtection pulumi.StringPtrOutput `pulumi:"deleteProtection"`
	// The description of the Alb.
	Description pulumi.StringOutput `pulumi:"description"`
	// The DNS name.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// The billing configuration of the EIP which automatically associated to the Alb. This field is valid when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `eip.Address` and `eip.Associate` to achieve public network access function.
	EipBillingConfig AlbEipBillingConfigOutput `pulumi:"eipBillingConfig"`
	// The billing configuration of the Ipv6 EIP which automatically associated to the Alb. This field is required when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `vpc.Ipv6Gateway` and `vpc.Ipv6AddressBandwidth` to achieve ipv6 public network access function.
	Ipv6EipBillingConfig AlbIpv6EipBillingConfigOutput `pulumi:"ipv6EipBillingConfig"`
	// The name of the Alb.
	LoadBalancerName pulumi.StringOutput `pulumi:"loadBalancerName"`
	// The local addresses of the Alb.
	LocalAddresses pulumi.StringArrayOutput `pulumi:"localAddresses"`
	// The ProjectName of the Alb.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The status of the Alb.
	Status pulumi.StringOutput `pulumi:"status"`
	// The id of the Subnet.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Tags.
	Tags AlbTagArrayOutput `pulumi:"tags"`
	// The type of the Alb. Valid values: `public`, `private`.
	Type pulumi.StringOutput `pulumi:"type"`
	// The vpc id of the Alb.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Configuration information of the Alb instance in different Availability Zones.
	ZoneMappings AlbZoneMappingArrayOutput `pulumi:"zoneMappings"`
}

// NewAlb registers a new resource with the given unique name, arguments, and options.
func NewAlb(ctx *pulumi.Context,
	name string, args *AlbArgs, opts ...pulumi.ResourceOption) (*Alb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Alb
	err := ctx.RegisterResource("volcengine:alb/alb:Alb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlb gets an existing Alb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlbState, opts ...pulumi.ResourceOption) (*Alb, error) {
	var resource Alb
	err := ctx.ReadResource("volcengine:alb/alb:Alb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alb resources.
type albState struct {
	// The address ip version of the Alb. Valid values: `IPv4`, `DualStack`. Default is `ipv4`.
	AddressIpVersion *string `pulumi:"addressIpVersion"`
	// Whether to enable the delete protection function of the Alb. Valid values: `on`, `off`. Default is `off`.
	DeleteProtection *string `pulumi:"deleteProtection"`
	// The description of the Alb.
	Description *string `pulumi:"description"`
	// The DNS name.
	DnsName *string `pulumi:"dnsName"`
	// The billing configuration of the EIP which automatically associated to the Alb. This field is valid when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `eip.Address` and `eip.Associate` to achieve public network access function.
	EipBillingConfig *AlbEipBillingConfig `pulumi:"eipBillingConfig"`
	// The billing configuration of the Ipv6 EIP which automatically associated to the Alb. This field is required when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `vpc.Ipv6Gateway` and `vpc.Ipv6AddressBandwidth` to achieve ipv6 public network access function.
	Ipv6EipBillingConfig *AlbIpv6EipBillingConfig `pulumi:"ipv6EipBillingConfig"`
	// The name of the Alb.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The local addresses of the Alb.
	LocalAddresses []string `pulumi:"localAddresses"`
	// The ProjectName of the Alb.
	ProjectName *string `pulumi:"projectName"`
	// The status of the Alb.
	Status *string `pulumi:"status"`
	// The id of the Subnet.
	SubnetIds []string `pulumi:"subnetIds"`
	// Tags.
	Tags []AlbTag `pulumi:"tags"`
	// The type of the Alb. Valid values: `public`, `private`.
	Type *string `pulumi:"type"`
	// The vpc id of the Alb.
	VpcId *string `pulumi:"vpcId"`
	// Configuration information of the Alb instance in different Availability Zones.
	ZoneMappings []AlbZoneMapping `pulumi:"zoneMappings"`
}

type AlbState struct {
	// The address ip version of the Alb. Valid values: `IPv4`, `DualStack`. Default is `ipv4`.
	AddressIpVersion pulumi.StringPtrInput
	// Whether to enable the delete protection function of the Alb. Valid values: `on`, `off`. Default is `off`.
	DeleteProtection pulumi.StringPtrInput
	// The description of the Alb.
	Description pulumi.StringPtrInput
	// The DNS name.
	DnsName pulumi.StringPtrInput
	// The billing configuration of the EIP which automatically associated to the Alb. This field is valid when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `eip.Address` and `eip.Associate` to achieve public network access function.
	EipBillingConfig AlbEipBillingConfigPtrInput
	// The billing configuration of the Ipv6 EIP which automatically associated to the Alb. This field is required when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `vpc.Ipv6Gateway` and `vpc.Ipv6AddressBandwidth` to achieve ipv6 public network access function.
	Ipv6EipBillingConfig AlbIpv6EipBillingConfigPtrInput
	// The name of the Alb.
	LoadBalancerName pulumi.StringPtrInput
	// The local addresses of the Alb.
	LocalAddresses pulumi.StringArrayInput
	// The ProjectName of the Alb.
	ProjectName pulumi.StringPtrInput
	// The status of the Alb.
	Status pulumi.StringPtrInput
	// The id of the Subnet.
	SubnetIds pulumi.StringArrayInput
	// Tags.
	Tags AlbTagArrayInput
	// The type of the Alb. Valid values: `public`, `private`.
	Type pulumi.StringPtrInput
	// The vpc id of the Alb.
	VpcId pulumi.StringPtrInput
	// Configuration information of the Alb instance in different Availability Zones.
	ZoneMappings AlbZoneMappingArrayInput
}

func (AlbState) ElementType() reflect.Type {
	return reflect.TypeOf((*albState)(nil)).Elem()
}

type albArgs struct {
	// The address ip version of the Alb. Valid values: `IPv4`, `DualStack`. Default is `ipv4`.
	AddressIpVersion *string `pulumi:"addressIpVersion"`
	// Whether to enable the delete protection function of the Alb. Valid values: `on`, `off`. Default is `off`.
	DeleteProtection *string `pulumi:"deleteProtection"`
	// The description of the Alb.
	Description *string `pulumi:"description"`
	// The billing configuration of the EIP which automatically associated to the Alb. This field is valid when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `eip.Address` and `eip.Associate` to achieve public network access function.
	EipBillingConfig *AlbEipBillingConfig `pulumi:"eipBillingConfig"`
	// The billing configuration of the Ipv6 EIP which automatically associated to the Alb. This field is required when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `vpc.Ipv6Gateway` and `vpc.Ipv6AddressBandwidth` to achieve ipv6 public network access function.
	Ipv6EipBillingConfig *AlbIpv6EipBillingConfig `pulumi:"ipv6EipBillingConfig"`
	// The name of the Alb.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The ProjectName of the Alb.
	ProjectName *string `pulumi:"projectName"`
	// The id of the Subnet.
	SubnetIds []string `pulumi:"subnetIds"`
	// Tags.
	Tags []AlbTag `pulumi:"tags"`
	// The type of the Alb. Valid values: `public`, `private`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Alb resource.
type AlbArgs struct {
	// The address ip version of the Alb. Valid values: `IPv4`, `DualStack`. Default is `ipv4`.
	AddressIpVersion pulumi.StringPtrInput
	// Whether to enable the delete protection function of the Alb. Valid values: `on`, `off`. Default is `off`.
	DeleteProtection pulumi.StringPtrInput
	// The description of the Alb.
	Description pulumi.StringPtrInput
	// The billing configuration of the EIP which automatically associated to the Alb. This field is valid when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `eip.Address` and `eip.Associate` to achieve public network access function.
	EipBillingConfig AlbEipBillingConfigPtrInput
	// The billing configuration of the Ipv6 EIP which automatically associated to the Alb. This field is required when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `vpc.Ipv6Gateway` and `vpc.Ipv6AddressBandwidth` to achieve ipv6 public network access function.
	Ipv6EipBillingConfig AlbIpv6EipBillingConfigPtrInput
	// The name of the Alb.
	LoadBalancerName pulumi.StringPtrInput
	// The ProjectName of the Alb.
	ProjectName pulumi.StringPtrInput
	// The id of the Subnet.
	SubnetIds pulumi.StringArrayInput
	// Tags.
	Tags AlbTagArrayInput
	// The type of the Alb. Valid values: `public`, `private`.
	Type pulumi.StringInput
}

func (AlbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*albArgs)(nil)).Elem()
}

type AlbInput interface {
	pulumi.Input

	ToAlbOutput() AlbOutput
	ToAlbOutputWithContext(ctx context.Context) AlbOutput
}

func (*Alb) ElementType() reflect.Type {
	return reflect.TypeOf((**Alb)(nil)).Elem()
}

func (i *Alb) ToAlbOutput() AlbOutput {
	return i.ToAlbOutputWithContext(context.Background())
}

func (i *Alb) ToAlbOutputWithContext(ctx context.Context) AlbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbOutput)
}

// AlbArrayInput is an input type that accepts AlbArray and AlbArrayOutput values.
// You can construct a concrete instance of `AlbArrayInput` via:
//
//	AlbArray{ AlbArgs{...} }
type AlbArrayInput interface {
	pulumi.Input

	ToAlbArrayOutput() AlbArrayOutput
	ToAlbArrayOutputWithContext(context.Context) AlbArrayOutput
}

type AlbArray []AlbInput

func (AlbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alb)(nil)).Elem()
}

func (i AlbArray) ToAlbArrayOutput() AlbArrayOutput {
	return i.ToAlbArrayOutputWithContext(context.Background())
}

func (i AlbArray) ToAlbArrayOutputWithContext(ctx context.Context) AlbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbArrayOutput)
}

// AlbMapInput is an input type that accepts AlbMap and AlbMapOutput values.
// You can construct a concrete instance of `AlbMapInput` via:
//
//	AlbMap{ "key": AlbArgs{...} }
type AlbMapInput interface {
	pulumi.Input

	ToAlbMapOutput() AlbMapOutput
	ToAlbMapOutputWithContext(context.Context) AlbMapOutput
}

type AlbMap map[string]AlbInput

func (AlbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alb)(nil)).Elem()
}

func (i AlbMap) ToAlbMapOutput() AlbMapOutput {
	return i.ToAlbMapOutputWithContext(context.Background())
}

func (i AlbMap) ToAlbMapOutputWithContext(ctx context.Context) AlbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbMapOutput)
}

type AlbOutput struct{ *pulumi.OutputState }

func (AlbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Alb)(nil)).Elem()
}

func (o AlbOutput) ToAlbOutput() AlbOutput {
	return o
}

func (o AlbOutput) ToAlbOutputWithContext(ctx context.Context) AlbOutput {
	return o
}

// The address ip version of the Alb. Valid values: `IPv4`, `DualStack`. Default is `ipv4`.
func (o AlbOutput) AddressIpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringPtrOutput { return v.AddressIpVersion }).(pulumi.StringPtrOutput)
}

// Whether to enable the delete protection function of the Alb. Valid values: `on`, `off`. Default is `off`.
func (o AlbOutput) DeleteProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringPtrOutput { return v.DeleteProtection }).(pulumi.StringPtrOutput)
}

// The description of the Alb.
func (o AlbOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The DNS name.
func (o AlbOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// The billing configuration of the EIP which automatically associated to the Alb. This field is valid when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `eip.Address` and `eip.Associate` to achieve public network access function.
func (o AlbOutput) EipBillingConfig() AlbEipBillingConfigOutput {
	return o.ApplyT(func(v *Alb) AlbEipBillingConfigOutput { return v.EipBillingConfig }).(AlbEipBillingConfigOutput)
}

// The billing configuration of the Ipv6 EIP which automatically associated to the Alb. This field is required when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `vpc.Ipv6Gateway` and `vpc.Ipv6AddressBandwidth` to achieve ipv6 public network access function.
func (o AlbOutput) Ipv6EipBillingConfig() AlbIpv6EipBillingConfigOutput {
	return o.ApplyT(func(v *Alb) AlbIpv6EipBillingConfigOutput { return v.Ipv6EipBillingConfig }).(AlbIpv6EipBillingConfigOutput)
}

// The name of the Alb.
func (o AlbOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringOutput { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// The local addresses of the Alb.
func (o AlbOutput) LocalAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringArrayOutput { return v.LocalAddresses }).(pulumi.StringArrayOutput)
}

// The ProjectName of the Alb.
func (o AlbOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The status of the Alb.
func (o AlbOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The id of the Subnet.
func (o AlbOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Tags.
func (o AlbOutput) Tags() AlbTagArrayOutput {
	return o.ApplyT(func(v *Alb) AlbTagArrayOutput { return v.Tags }).(AlbTagArrayOutput)
}

// The type of the Alb. Valid values: `public`, `private`.
func (o AlbOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The vpc id of the Alb.
func (o AlbOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Alb) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Configuration information of the Alb instance in different Availability Zones.
func (o AlbOutput) ZoneMappings() AlbZoneMappingArrayOutput {
	return o.ApplyT(func(v *Alb) AlbZoneMappingArrayOutput { return v.ZoneMappings }).(AlbZoneMappingArrayOutput)
}

type AlbArrayOutput struct{ *pulumi.OutputState }

func (AlbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alb)(nil)).Elem()
}

func (o AlbArrayOutput) ToAlbArrayOutput() AlbArrayOutput {
	return o
}

func (o AlbArrayOutput) ToAlbArrayOutputWithContext(ctx context.Context) AlbArrayOutput {
	return o
}

func (o AlbArrayOutput) Index(i pulumi.IntInput) AlbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Alb {
		return vs[0].([]*Alb)[vs[1].(int)]
	}).(AlbOutput)
}

type AlbMapOutput struct{ *pulumi.OutputState }

func (AlbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alb)(nil)).Elem()
}

func (o AlbMapOutput) ToAlbMapOutput() AlbMapOutput {
	return o
}

func (o AlbMapOutput) ToAlbMapOutputWithContext(ctx context.Context) AlbMapOutput {
	return o
}

func (o AlbMapOutput) MapIndex(k pulumi.StringInput) AlbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Alb {
		return vs[0].(map[string]*Alb)[vs[1].(string)]
	}).(AlbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlbInput)(nil)).Elem(), &Alb{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbArrayInput)(nil)).Elem(), AlbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbMapInput)(nil)).Elem(), AlbMap{})
	pulumi.RegisterOutputType(AlbOutput{})
	pulumi.RegisterOutputType(AlbArrayOutput{})
	pulumi.RegisterOutputType(AlbMapOutput{})
}
