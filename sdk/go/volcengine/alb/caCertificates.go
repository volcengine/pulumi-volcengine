// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of alb ca certificates
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/alb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := alb.CaCertificates(ctx, &alb.CaCertificatesArgs{
//				Ids: []string{
//					"cert-1iidd2r9ii0hs74adhfeodxo1",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func CaCertificates(ctx *pulumi.Context, args *CaCertificatesArgs, opts ...pulumi.InvokeOption) (*CaCertificatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CaCertificatesResult
	err := ctx.Invoke("volcengine:alb/caCertificates:CaCertificates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking CaCertificates.
type CaCertificatesArgs struct {
	// The name of the CA certificate.
	CaCertificateName *string `pulumi:"caCertificateName"`
	// A list of CA certificate IDs.
	Ids []string `pulumi:"ids"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project name of the CA certificate.
	ProjectName *string `pulumi:"projectName"`
}

// A collection of values returned by CaCertificates.
type CaCertificatesResult struct {
	// The name of the CA certificate.
	CaCertificateName *string `pulumi:"caCertificateName"`
	// The collection of CA certificates query.
	Certificates []CaCertificatesCertificate `pulumi:"certificates"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// The ProjectName of the CA Certificate.
	ProjectName *string `pulumi:"projectName"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func CaCertificatesOutput(ctx *pulumi.Context, args CaCertificatesOutputArgs, opts ...pulumi.InvokeOption) CaCertificatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (CaCertificatesResult, error) {
			args := v.(CaCertificatesArgs)
			r, err := CaCertificates(ctx, &args, opts...)
			var s CaCertificatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(CaCertificatesResultOutput)
}

// A collection of arguments for invoking CaCertificates.
type CaCertificatesOutputArgs struct {
	// The name of the CA certificate.
	CaCertificateName pulumi.StringPtrInput `pulumi:"caCertificateName"`
	// A list of CA certificate IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project name of the CA certificate.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
}

func (CaCertificatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaCertificatesArgs)(nil)).Elem()
}

// A collection of values returned by CaCertificates.
type CaCertificatesResultOutput struct{ *pulumi.OutputState }

func (CaCertificatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaCertificatesResult)(nil)).Elem()
}

func (o CaCertificatesResultOutput) ToCaCertificatesResultOutput() CaCertificatesResultOutput {
	return o
}

func (o CaCertificatesResultOutput) ToCaCertificatesResultOutputWithContext(ctx context.Context) CaCertificatesResultOutput {
	return o
}

// The name of the CA certificate.
func (o CaCertificatesResultOutput) CaCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaCertificatesResult) *string { return v.CaCertificateName }).(pulumi.StringPtrOutput)
}

// The collection of CA certificates query.
func (o CaCertificatesResultOutput) Certificates() CaCertificatesCertificateArrayOutput {
	return o.ApplyT(func(v CaCertificatesResult) []CaCertificatesCertificate { return v.Certificates }).(CaCertificatesCertificateArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o CaCertificatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CaCertificatesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o CaCertificatesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CaCertificatesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o CaCertificatesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaCertificatesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o CaCertificatesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaCertificatesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The ProjectName of the CA Certificate.
func (o CaCertificatesResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaCertificatesResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o CaCertificatesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v CaCertificatesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(CaCertificatesResultOutput{})
}
