// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of alb server groups
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/alb"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
// VpcName: pulumi.String("acc-test-vpc"),
// CidrBlock: pulumi.String("172.16.0.0/16"),
// })
// if err != nil {
// return err
// }
// var fooServerGroup []*alb.ServerGroup
//
//	for index := 0; index < 3; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := alb.NewServerGroup(ctx, fmt.Sprintf("fooServerGroup-%v", key0), &alb.ServerGroupArgs{
// VpcId: fooVpc.ID(),
// ServerGroupName: pulumi.String(fmt.Sprintf("acc-test-server-group-%v", val0)),
// Description: pulumi.String("acc-test"),
// ServerGroupType: pulumi.String("instance"),
// Scheduler: pulumi.String("sh"),
// ProjectName: pulumi.String("default"),
// HealthCheck: &alb.ServerGroupHealthCheckArgs{
// Enabled: pulumi.String("on"),
// Interval: pulumi.Int(3),
// Timeout: pulumi.Int(3),
// Method: pulumi.String("GET"),
// },
// StickySessionConfig: &alb.ServerGroupStickySessionConfigArgs{
// StickySessionEnabled: pulumi.String("on"),
// StickySessionType: pulumi.String("insert"),
// CookieTimeout: pulumi.Int(1100),
// },
// })
// if err != nil {
// return err
// }
// fooServerGroup = append(fooServerGroup, __res)
// }
// _ = alb.GetServerGroupsOutput(ctx, alb.GetServerGroupsOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:alb-serverGroups:ServerGroups.pp:28,9-29),
// }, nil);
// return nil
// })
// }
// ```
//
// Deprecated: volcengine.alb.ServerGroups has been deprecated in favor of volcengine.alb.getServerGroups
func ServerGroups(ctx *pulumi.Context, args *ServerGroupsArgs, opts ...pulumi.InvokeOption) (*ServerGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ServerGroupsResult
	err := ctx.Invoke("volcengine:alb/serverGroups:ServerGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ServerGroups.
type ServerGroupsArgs struct {
	// A list of Alb server group IDs.
	Ids []string `pulumi:"ids"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project name of Alb server group.
	ProjectName *string `pulumi:"projectName"`
	// A list of Alb server group name.
	ServerGroupNames []string `pulumi:"serverGroupNames"`
	// The type of Alb server group. Valid values: `instance`, `ip`.
	ServerGroupType *string `pulumi:"serverGroupType"`
}

// A collection of values returned by ServerGroups.
type ServerGroupsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// The project name of the Alb server group.
	ProjectName      *string  `pulumi:"projectName"`
	ServerGroupNames []string `pulumi:"serverGroupNames"`
	// The type of the Alb server group.
	ServerGroupType *string `pulumi:"serverGroupType"`
	// The collection of query.
	ServerGroups []ServerGroupsServerGroup `pulumi:"serverGroups"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func ServerGroupsOutput(ctx *pulumi.Context, args ServerGroupsOutputArgs, opts ...pulumi.InvokeOption) ServerGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ServerGroupsResult, error) {
			args := v.(ServerGroupsArgs)
			r, err := ServerGroups(ctx, &args, opts...)
			var s ServerGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ServerGroupsResultOutput)
}

// A collection of arguments for invoking ServerGroups.
type ServerGroupsOutputArgs struct {
	// A list of Alb server group IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project name of Alb server group.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// A list of Alb server group name.
	ServerGroupNames pulumi.StringArrayInput `pulumi:"serverGroupNames"`
	// The type of Alb server group. Valid values: `instance`, `ip`.
	ServerGroupType pulumi.StringPtrInput `pulumi:"serverGroupType"`
}

func (ServerGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupsArgs)(nil)).Elem()
}

// A collection of values returned by ServerGroups.
type ServerGroupsResultOutput struct{ *pulumi.OutputState }

func (ServerGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupsResult)(nil)).Elem()
}

func (o ServerGroupsResultOutput) ToServerGroupsResultOutput() ServerGroupsResultOutput {
	return o
}

func (o ServerGroupsResultOutput) ToServerGroupsResultOutputWithContext(ctx context.Context) ServerGroupsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o ServerGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ServerGroupsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerGroupsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o ServerGroupsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o ServerGroupsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The project name of the Alb server group.
func (o ServerGroupsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

func (o ServerGroupsResultOutput) ServerGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerGroupsResult) []string { return v.ServerGroupNames }).(pulumi.StringArrayOutput)
}

// The type of the Alb server group.
func (o ServerGroupsResultOutput) ServerGroupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupsResult) *string { return v.ServerGroupType }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o ServerGroupsResultOutput) ServerGroups() ServerGroupsServerGroupArrayOutput {
	return o.ApplyT(func(v ServerGroupsResult) []ServerGroupsServerGroup { return v.ServerGroups }).(ServerGroupsServerGroupArrayOutput)
}

// The total count of query.
func (o ServerGroupsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ServerGroupsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ServerGroupsResultOutput{})
}
