// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage alb server group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/alb"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = alb.NewServerGroup(ctx, "fooServerGroup", &alb.ServerGroupArgs{
//				VpcId:           fooVpc.ID(),
//				ServerGroupName: pulumi.String("acc-test-server-group"),
//				Description:     pulumi.String("acc-test"),
//				ServerGroupType: pulumi.String("instance"),
//				Scheduler:       pulumi.String("wlc"),
//				ProjectName:     pulumi.String("default"),
//				HealthCheck: &alb.ServerGroupHealthCheckArgs{
//					Enabled:  pulumi.String("on"),
//					Interval: pulumi.Int(3),
//					Timeout:  pulumi.Int(3),
//					Method:   pulumi.String("GET"),
//				},
//				StickySessionConfig: &alb.ServerGroupStickySessionConfigArgs{
//					StickySessionEnabled: pulumi.String("on"),
//					StickySessionType:    pulumi.String("insert"),
//					CookieTimeout:        pulumi.Int(1100),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AlbServerGroup can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:alb/serverGroup:ServerGroup default resource_id
// ```
type ServerGroup struct {
	pulumi.CustomResourceState

	// The create time of the Alb server group.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the Alb server group.
	Description pulumi.StringOutput `pulumi:"description"`
	// The health check config of the Alb server group. The enable status of health check function defaults to `on`.
	HealthCheck ServerGroupHealthCheckOutput `pulumi:"healthCheck"`
	// The listener information of the Alb server group.
	Listeners pulumi.StringArrayOutput `pulumi:"listeners"`
	// The project name of the Alb server group.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
	Scheduler pulumi.StringPtrOutput `pulumi:"scheduler"`
	// The server count of the Alb server group.
	ServerCount pulumi.IntOutput `pulumi:"serverCount"`
	// The name of the Alb server group.
	ServerGroupName pulumi.StringOutput `pulumi:"serverGroupName"`
	// The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
	ServerGroupType pulumi.StringPtrOutput `pulumi:"serverGroupType"`
	// The status of the Alb server group.
	Status pulumi.StringOutput `pulumi:"status"`
	// The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
	StickySessionConfig ServerGroupStickySessionConfigOutput `pulumi:"stickySessionConfig"`
	// The update time of the Alb server group.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The vpc id of the Alb server group.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewServerGroup registers a new resource with the given unique name, arguments, and options.
func NewServerGroup(ctx *pulumi.Context,
	name string, args *ServerGroupArgs, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerGroup
	err := ctx.RegisterResource("volcengine:alb/serverGroup:ServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerGroup gets an existing ServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerGroupState, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	var resource ServerGroup
	err := ctx.ReadResource("volcengine:alb/serverGroup:ServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerGroup resources.
type serverGroupState struct {
	// The create time of the Alb server group.
	CreateTime *string `pulumi:"createTime"`
	// The description of the Alb server group.
	Description *string `pulumi:"description"`
	// The health check config of the Alb server group. The enable status of health check function defaults to `on`.
	HealthCheck *ServerGroupHealthCheck `pulumi:"healthCheck"`
	// The listener information of the Alb server group.
	Listeners []string `pulumi:"listeners"`
	// The project name of the Alb server group.
	ProjectName *string `pulumi:"projectName"`
	// The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
	Scheduler *string `pulumi:"scheduler"`
	// The server count of the Alb server group.
	ServerCount *int `pulumi:"serverCount"`
	// The name of the Alb server group.
	ServerGroupName *string `pulumi:"serverGroupName"`
	// The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
	ServerGroupType *string `pulumi:"serverGroupType"`
	// The status of the Alb server group.
	Status *string `pulumi:"status"`
	// The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
	StickySessionConfig *ServerGroupStickySessionConfig `pulumi:"stickySessionConfig"`
	// The update time of the Alb server group.
	UpdateTime *string `pulumi:"updateTime"`
	// The vpc id of the Alb server group.
	VpcId *string `pulumi:"vpcId"`
}

type ServerGroupState struct {
	// The create time of the Alb server group.
	CreateTime pulumi.StringPtrInput
	// The description of the Alb server group.
	Description pulumi.StringPtrInput
	// The health check config of the Alb server group. The enable status of health check function defaults to `on`.
	HealthCheck ServerGroupHealthCheckPtrInput
	// The listener information of the Alb server group.
	Listeners pulumi.StringArrayInput
	// The project name of the Alb server group.
	ProjectName pulumi.StringPtrInput
	// The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
	Scheduler pulumi.StringPtrInput
	// The server count of the Alb server group.
	ServerCount pulumi.IntPtrInput
	// The name of the Alb server group.
	ServerGroupName pulumi.StringPtrInput
	// The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
	ServerGroupType pulumi.StringPtrInput
	// The status of the Alb server group.
	Status pulumi.StringPtrInput
	// The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
	StickySessionConfig ServerGroupStickySessionConfigPtrInput
	// The update time of the Alb server group.
	UpdateTime pulumi.StringPtrInput
	// The vpc id of the Alb server group.
	VpcId pulumi.StringPtrInput
}

func (ServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupState)(nil)).Elem()
}

type serverGroupArgs struct {
	// The description of the Alb server group.
	Description *string `pulumi:"description"`
	// The health check config of the Alb server group. The enable status of health check function defaults to `on`.
	HealthCheck *ServerGroupHealthCheck `pulumi:"healthCheck"`
	// The project name of the Alb server group.
	ProjectName *string `pulumi:"projectName"`
	// The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
	Scheduler *string `pulumi:"scheduler"`
	// The name of the Alb server group.
	ServerGroupName *string `pulumi:"serverGroupName"`
	// The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
	ServerGroupType *string `pulumi:"serverGroupType"`
	// The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
	StickySessionConfig *ServerGroupStickySessionConfig `pulumi:"stickySessionConfig"`
	// The vpc id of the Alb server group.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ServerGroup resource.
type ServerGroupArgs struct {
	// The description of the Alb server group.
	Description pulumi.StringPtrInput
	// The health check config of the Alb server group. The enable status of health check function defaults to `on`.
	HealthCheck ServerGroupHealthCheckPtrInput
	// The project name of the Alb server group.
	ProjectName pulumi.StringPtrInput
	// The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
	Scheduler pulumi.StringPtrInput
	// The name of the Alb server group.
	ServerGroupName pulumi.StringPtrInput
	// The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
	ServerGroupType pulumi.StringPtrInput
	// The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
	StickySessionConfig ServerGroupStickySessionConfigPtrInput
	// The vpc id of the Alb server group.
	VpcId pulumi.StringInput
}

func (ServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupArgs)(nil)).Elem()
}

type ServerGroupInput interface {
	pulumi.Input

	ToServerGroupOutput() ServerGroupOutput
	ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput
}

func (*ServerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (i *ServerGroup) ToServerGroupOutput() ServerGroupOutput {
	return i.ToServerGroupOutputWithContext(context.Background())
}

func (i *ServerGroup) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupOutput)
}

// ServerGroupArrayInput is an input type that accepts ServerGroupArray and ServerGroupArrayOutput values.
// You can construct a concrete instance of `ServerGroupArrayInput` via:
//
//	ServerGroupArray{ ServerGroupArgs{...} }
type ServerGroupArrayInput interface {
	pulumi.Input

	ToServerGroupArrayOutput() ServerGroupArrayOutput
	ToServerGroupArrayOutputWithContext(context.Context) ServerGroupArrayOutput
}

type ServerGroupArray []ServerGroupInput

func (ServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupArray) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return i.ToServerGroupArrayOutputWithContext(context.Background())
}

func (i ServerGroupArray) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupArrayOutput)
}

// ServerGroupMapInput is an input type that accepts ServerGroupMap and ServerGroupMapOutput values.
// You can construct a concrete instance of `ServerGroupMapInput` via:
//
//	ServerGroupMap{ "key": ServerGroupArgs{...} }
type ServerGroupMapInput interface {
	pulumi.Input

	ToServerGroupMapOutput() ServerGroupMapOutput
	ToServerGroupMapOutputWithContext(context.Context) ServerGroupMapOutput
}

type ServerGroupMap map[string]ServerGroupInput

func (ServerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupMap) ToServerGroupMapOutput() ServerGroupMapOutput {
	return i.ToServerGroupMapOutputWithContext(context.Background())
}

func (i ServerGroupMap) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupMapOutput)
}

type ServerGroupOutput struct{ *pulumi.OutputState }

func (ServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (o ServerGroupOutput) ToServerGroupOutput() ServerGroupOutput {
	return o
}

func (o ServerGroupOutput) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return o
}

// The create time of the Alb server group.
func (o ServerGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the Alb server group.
func (o ServerGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The health check config of the Alb server group. The enable status of health check function defaults to `on`.
func (o ServerGroupOutput) HealthCheck() ServerGroupHealthCheckOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupHealthCheckOutput { return v.HealthCheck }).(ServerGroupHealthCheckOutput)
}

// The listener information of the Alb server group.
func (o ServerGroupOutput) Listeners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringArrayOutput { return v.Listeners }).(pulumi.StringArrayOutput)
}

// The project name of the Alb server group.
func (o ServerGroupOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
func (o ServerGroupOutput) Scheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.Scheduler }).(pulumi.StringPtrOutput)
}

// The server count of the Alb server group.
func (o ServerGroupOutput) ServerCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.IntOutput { return v.ServerCount }).(pulumi.IntOutput)
}

// The name of the Alb server group.
func (o ServerGroupOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ServerGroupName }).(pulumi.StringOutput)
}

// The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
func (o ServerGroupOutput) ServerGroupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringPtrOutput { return v.ServerGroupType }).(pulumi.StringPtrOutput)
}

// The status of the Alb server group.
func (o ServerGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
func (o ServerGroupOutput) StickySessionConfig() ServerGroupStickySessionConfigOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupStickySessionConfigOutput { return v.StickySessionConfig }).(ServerGroupStickySessionConfigOutput)
}

// The update time of the Alb server group.
func (o ServerGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The vpc id of the Alb server group.
func (o ServerGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ServerGroupArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) Index(i pulumi.IntInput) ServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].([]*ServerGroup)[vs[1].(int)]
	}).(ServerGroupOutput)
}

type ServerGroupMapOutput struct{ *pulumi.OutputState }

func (ServerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupMapOutput) ToServerGroupMapOutput() ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) MapIndex(k pulumi.StringInput) ServerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].(map[string]*ServerGroup)[vs[1].(string)]
	}).(ServerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupInput)(nil)).Elem(), &ServerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupArrayInput)(nil)).Elem(), ServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupMapInput)(nil)).Elem(), ServerGroupMap{})
	pulumi.RegisterOutputType(ServerGroupOutput{})
	pulumi.RegisterOutputType(ServerGroupArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupMapOutput{})
}
