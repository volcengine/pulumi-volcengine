// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage alb rule
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/alb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := alb.NewRule(ctx, "foo", &alb.RuleArgs{
//				Description: pulumi.String("test"),
//				Domain:      pulumi.String("www.test.com"),
//				ListenerId:  pulumi.String("lsn-1iidd19u4oni874adhezjkyj3"),
//				RedirectConfig: &alb.RuleRedirectConfigArgs{
//					RedirectDomain:   pulumi.String("www.testtest.com"),
//					RedirectHttpCode: pulumi.String("302"),
//					RedirectPort:     pulumi.String("555"),
//					RedirectUri:      pulumi.String("/testtest"),
//				},
//				RewriteConfig: &alb.RuleRewriteConfigArgs{
//					RewritePath: pulumi.String("/test"),
//				},
//				RewriteEnabled:      pulumi.String("off"),
//				RuleAction:          pulumi.String("Redirect"),
//				ServerGroupId:       pulumi.String("rsp-1g72w74y4umf42zbhq4k4hnln"),
//				TrafficLimitEnabled: pulumi.String("off"),
//				TrafficLimitQps:     pulumi.Int(100),
//				Url:                 pulumi.String("/test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AlbRule can be imported using the listener id and rule id, e.g.
//
// ```sh
// $ pulumi import volcengine:alb/rule:Rule default lsn-273yv0mhs5xj47fap8sehiiso:rule-****
// ```
type Rule struct {
	pulumi.CustomResourceState

	// The description of the Rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The domain of Rule.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The ID of listener.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// The redirect related configuration.
	RedirectConfig RuleRedirectConfigPtrOutput `pulumi:"redirectConfig"`
	// The list of rewrite configurations.
	RewriteConfig RuleRewriteConfigPtrOutput `pulumi:"rewriteConfig"`
	// Rewrite configuration switch for forwarding rules, only allows configuration and takes effect when RuleAction is empty (i.e., forwarding to server group). Only available for whitelist users, please submit an application to experience. Supported values are as follows:
	// on: enable.
	// off: disable.
	RewriteEnabled pulumi.StringPtrOutput `pulumi:"rewriteEnabled"`
	// The forwarding rule action, if this parameter is empty(`""`), forward to server group, if value is `Redirect`, will redirect.
	RuleAction pulumi.StringOutput `pulumi:"ruleAction"`
	// The ID of rule.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// Server group ID, this parameter is required if `ruleAction` is empty.
	ServerGroupId pulumi.StringPtrOutput `pulumi:"serverGroupId"`
	// Forwarding rule QPS rate limiting switch:
	// on: enable.
	// off: disable (default).
	TrafficLimitEnabled pulumi.StringPtrOutput `pulumi:"trafficLimitEnabled"`
	// When Rules.N.TrafficLimitEnabled is turned on, this field is required. Requests per second. Valid values are between 100 and 100000.
	TrafficLimitQps pulumi.IntPtrOutput `pulumi:"trafficLimitQps"`
	// The Url of Rule.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	if args.RuleAction == nil {
		return nil, errors.New("invalid value for required argument 'RuleAction'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rule
	err := ctx.RegisterResource("volcengine:alb/rule:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("volcengine:alb/rule:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
	// The description of the Rule.
	Description *string `pulumi:"description"`
	// The domain of Rule.
	Domain *string `pulumi:"domain"`
	// The ID of listener.
	ListenerId *string `pulumi:"listenerId"`
	// The redirect related configuration.
	RedirectConfig *RuleRedirectConfig `pulumi:"redirectConfig"`
	// The list of rewrite configurations.
	RewriteConfig *RuleRewriteConfig `pulumi:"rewriteConfig"`
	// Rewrite configuration switch for forwarding rules, only allows configuration and takes effect when RuleAction is empty (i.e., forwarding to server group). Only available for whitelist users, please submit an application to experience. Supported values are as follows:
	// on: enable.
	// off: disable.
	RewriteEnabled *string `pulumi:"rewriteEnabled"`
	// The forwarding rule action, if this parameter is empty(`""`), forward to server group, if value is `Redirect`, will redirect.
	RuleAction *string `pulumi:"ruleAction"`
	// The ID of rule.
	RuleId *string `pulumi:"ruleId"`
	// Server group ID, this parameter is required if `ruleAction` is empty.
	ServerGroupId *string `pulumi:"serverGroupId"`
	// Forwarding rule QPS rate limiting switch:
	// on: enable.
	// off: disable (default).
	TrafficLimitEnabled *string `pulumi:"trafficLimitEnabled"`
	// When Rules.N.TrafficLimitEnabled is turned on, this field is required. Requests per second. Valid values are between 100 and 100000.
	TrafficLimitQps *int `pulumi:"trafficLimitQps"`
	// The Url of Rule.
	Url *string `pulumi:"url"`
}

type RuleState struct {
	// The description of the Rule.
	Description pulumi.StringPtrInput
	// The domain of Rule.
	Domain pulumi.StringPtrInput
	// The ID of listener.
	ListenerId pulumi.StringPtrInput
	// The redirect related configuration.
	RedirectConfig RuleRedirectConfigPtrInput
	// The list of rewrite configurations.
	RewriteConfig RuleRewriteConfigPtrInput
	// Rewrite configuration switch for forwarding rules, only allows configuration and takes effect when RuleAction is empty (i.e., forwarding to server group). Only available for whitelist users, please submit an application to experience. Supported values are as follows:
	// on: enable.
	// off: disable.
	RewriteEnabled pulumi.StringPtrInput
	// The forwarding rule action, if this parameter is empty(`""`), forward to server group, if value is `Redirect`, will redirect.
	RuleAction pulumi.StringPtrInput
	// The ID of rule.
	RuleId pulumi.StringPtrInput
	// Server group ID, this parameter is required if `ruleAction` is empty.
	ServerGroupId pulumi.StringPtrInput
	// Forwarding rule QPS rate limiting switch:
	// on: enable.
	// off: disable (default).
	TrafficLimitEnabled pulumi.StringPtrInput
	// When Rules.N.TrafficLimitEnabled is turned on, this field is required. Requests per second. Valid values are between 100 and 100000.
	TrafficLimitQps pulumi.IntPtrInput
	// The Url of Rule.
	Url pulumi.StringPtrInput
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// The description of the Rule.
	Description *string `pulumi:"description"`
	// The domain of Rule.
	Domain *string `pulumi:"domain"`
	// The ID of listener.
	ListenerId string `pulumi:"listenerId"`
	// The redirect related configuration.
	RedirectConfig *RuleRedirectConfig `pulumi:"redirectConfig"`
	// The list of rewrite configurations.
	RewriteConfig *RuleRewriteConfig `pulumi:"rewriteConfig"`
	// Rewrite configuration switch for forwarding rules, only allows configuration and takes effect when RuleAction is empty (i.e., forwarding to server group). Only available for whitelist users, please submit an application to experience. Supported values are as follows:
	// on: enable.
	// off: disable.
	RewriteEnabled *string `pulumi:"rewriteEnabled"`
	// The forwarding rule action, if this parameter is empty(`""`), forward to server group, if value is `Redirect`, will redirect.
	RuleAction string `pulumi:"ruleAction"`
	// Server group ID, this parameter is required if `ruleAction` is empty.
	ServerGroupId *string `pulumi:"serverGroupId"`
	// Forwarding rule QPS rate limiting switch:
	// on: enable.
	// off: disable (default).
	TrafficLimitEnabled *string `pulumi:"trafficLimitEnabled"`
	// When Rules.N.TrafficLimitEnabled is turned on, this field is required. Requests per second. Valid values are between 100 and 100000.
	TrafficLimitQps *int `pulumi:"trafficLimitQps"`
	// The Url of Rule.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// The description of the Rule.
	Description pulumi.StringPtrInput
	// The domain of Rule.
	Domain pulumi.StringPtrInput
	// The ID of listener.
	ListenerId pulumi.StringInput
	// The redirect related configuration.
	RedirectConfig RuleRedirectConfigPtrInput
	// The list of rewrite configurations.
	RewriteConfig RuleRewriteConfigPtrInput
	// Rewrite configuration switch for forwarding rules, only allows configuration and takes effect when RuleAction is empty (i.e., forwarding to server group). Only available for whitelist users, please submit an application to experience. Supported values are as follows:
	// on: enable.
	// off: disable.
	RewriteEnabled pulumi.StringPtrInput
	// The forwarding rule action, if this parameter is empty(`""`), forward to server group, if value is `Redirect`, will redirect.
	RuleAction pulumi.StringInput
	// Server group ID, this parameter is required if `ruleAction` is empty.
	ServerGroupId pulumi.StringPtrInput
	// Forwarding rule QPS rate limiting switch:
	// on: enable.
	// off: disable (default).
	TrafficLimitEnabled pulumi.StringPtrInput
	// When Rules.N.TrafficLimitEnabled is turned on, this field is required. Requests per second. Valid values are between 100 and 100000.
	TrafficLimitQps pulumi.IntPtrInput
	// The Url of Rule.
	Url pulumi.StringPtrInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(ctx context.Context) RuleOutput
}

func (*Rule) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (i *Rule) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i *Rule) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

// RuleArrayInput is an input type that accepts RuleArray and RuleArrayOutput values.
// You can construct a concrete instance of `RuleArrayInput` via:
//
//	RuleArray{ RuleArgs{...} }
type RuleArrayInput interface {
	pulumi.Input

	ToRuleArrayOutput() RuleArrayOutput
	ToRuleArrayOutputWithContext(context.Context) RuleArrayOutput
}

type RuleArray []RuleInput

func (RuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rule)(nil)).Elem()
}

func (i RuleArray) ToRuleArrayOutput() RuleArrayOutput {
	return i.ToRuleArrayOutputWithContext(context.Background())
}

func (i RuleArray) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleArrayOutput)
}

// RuleMapInput is an input type that accepts RuleMap and RuleMapOutput values.
// You can construct a concrete instance of `RuleMapInput` via:
//
//	RuleMap{ "key": RuleArgs{...} }
type RuleMapInput interface {
	pulumi.Input

	ToRuleMapOutput() RuleMapOutput
	ToRuleMapOutputWithContext(context.Context) RuleMapOutput
}

type RuleMap map[string]RuleInput

func (RuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rule)(nil)).Elem()
}

func (i RuleMap) ToRuleMapOutput() RuleMapOutput {
	return i.ToRuleMapOutputWithContext(context.Background())
}

func (i RuleMap) ToRuleMapOutputWithContext(ctx context.Context) RuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMapOutput)
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

// The description of the Rule.
func (o RuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The domain of Rule.
func (o RuleOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The ID of listener.
func (o RuleOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// The redirect related configuration.
func (o RuleOutput) RedirectConfig() RuleRedirectConfigPtrOutput {
	return o.ApplyT(func(v *Rule) RuleRedirectConfigPtrOutput { return v.RedirectConfig }).(RuleRedirectConfigPtrOutput)
}

// The list of rewrite configurations.
func (o RuleOutput) RewriteConfig() RuleRewriteConfigPtrOutput {
	return o.ApplyT(func(v *Rule) RuleRewriteConfigPtrOutput { return v.RewriteConfig }).(RuleRewriteConfigPtrOutput)
}

// Rewrite configuration switch for forwarding rules, only allows configuration and takes effect when RuleAction is empty (i.e., forwarding to server group). Only available for whitelist users, please submit an application to experience. Supported values are as follows:
// on: enable.
// off: disable.
func (o RuleOutput) RewriteEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.RewriteEnabled }).(pulumi.StringPtrOutput)
}

// The forwarding rule action, if this parameter is empty(`""`), forward to server group, if value is `Redirect`, will redirect.
func (o RuleOutput) RuleAction() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.RuleAction }).(pulumi.StringOutput)
}

// The ID of rule.
func (o RuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

// Server group ID, this parameter is required if `ruleAction` is empty.
func (o RuleOutput) ServerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.ServerGroupId }).(pulumi.StringPtrOutput)
}

// Forwarding rule QPS rate limiting switch:
// on: enable.
// off: disable (default).
func (o RuleOutput) TrafficLimitEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.TrafficLimitEnabled }).(pulumi.StringPtrOutput)
}

// When Rules.N.TrafficLimitEnabled is turned on, this field is required. Requests per second. Valid values are between 100 and 100000.
func (o RuleOutput) TrafficLimitQps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.IntPtrOutput { return v.TrafficLimitQps }).(pulumi.IntPtrOutput)
}

// The Url of Rule.
func (o RuleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type RuleArrayOutput struct{ *pulumi.OutputState }

func (RuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rule)(nil)).Elem()
}

func (o RuleArrayOutput) ToRuleArrayOutput() RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) Index(i pulumi.IntInput) RuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rule {
		return vs[0].([]*Rule)[vs[1].(int)]
	}).(RuleOutput)
}

type RuleMapOutput struct{ *pulumi.OutputState }

func (RuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rule)(nil)).Elem()
}

func (o RuleMapOutput) ToRuleMapOutput() RuleMapOutput {
	return o
}

func (o RuleMapOutput) ToRuleMapOutputWithContext(ctx context.Context) RuleMapOutput {
	return o
}

func (o RuleMapOutput) MapIndex(k pulumi.StringInput) RuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rule {
		return vs[0].(map[string]*Rule)[vs[1].(string)]
	}).(RuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), &Rule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleArrayInput)(nil)).Elem(), RuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMapInput)(nil)).Elem(), RuleMap{})
	pulumi.RegisterOutputType(RuleOutput{})
	pulumi.RegisterOutputType(RuleArrayOutput{})
	pulumi.RegisterOutputType(RuleMapOutput{})
}
