// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage cdn certificate
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cdn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cdn.NewCdnCertificate(ctx, "foo", &cdn.CdnCertificateArgs{
//				Certificate: pulumi.String(""),
//				Desc:        pulumi.String("tftest"),
//				PrivateKey:  pulumi.String(""),
//				Source:      pulumi.String("cdn_cert_hosting"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CdnCertificate can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:cdn/cdnCertificate:CdnCertificate default resource_id
//
// ```
//
//	You can delete the certificate hosted on the content delivery network. You can configure the HTTPS module to associate the certificate and domain name through the domain_config field of volcengine_cdn_domain. If the certificate to be deleted is already associated with a domain name, the deletion will fail. To remove the association between the domain name and the certificate, you can disable the HTTPS function for the domain name in the Content Delivery Network console.
type CdnCertificate struct {
	pulumi.CustomResourceState

	// Content of the specified certificate public key file. Line breaks in the content should be replaced with `\r\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Note on the certificate.
	Desc pulumi.StringOutput `pulumi:"desc"`
	// The content of the specified certificate private key file. Replace line breaks in the content with `\r\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
	Source pulumi.StringOutput `pulumi:"source"`
}

// NewCdnCertificate registers a new resource with the given unique name, arguments, and options.
func NewCdnCertificate(ctx *pulumi.Context,
	name string, args *CdnCertificateArgs, opts ...pulumi.ResourceOption) (*CdnCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.Desc == nil {
		return nil, errors.New("invalid value for required argument 'Desc'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CdnCertificate
	err := ctx.RegisterResource("volcengine:cdn/cdnCertificate:CdnCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCdnCertificate gets an existing CdnCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCdnCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CdnCertificateState, opts ...pulumi.ResourceOption) (*CdnCertificate, error) {
	var resource CdnCertificate
	err := ctx.ReadResource("volcengine:cdn/cdnCertificate:CdnCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CdnCertificate resources.
type cdnCertificateState struct {
	// Content of the specified certificate public key file. Line breaks in the content should be replaced with `\r\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	Certificate *string `pulumi:"certificate"`
	// Note on the certificate.
	Desc *string `pulumi:"desc"`
	// The content of the specified certificate private key file. Replace line breaks in the content with `\r\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	PrivateKey *string `pulumi:"privateKey"`
	// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
	Source *string `pulumi:"source"`
}

type CdnCertificateState struct {
	// Content of the specified certificate public key file. Line breaks in the content should be replaced with `\r\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	Certificate pulumi.StringPtrInput
	// Note on the certificate.
	Desc pulumi.StringPtrInput
	// The content of the specified certificate private key file. Replace line breaks in the content with `\r\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	PrivateKey pulumi.StringPtrInput
	// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
	Source pulumi.StringPtrInput
}

func (CdnCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cdnCertificateState)(nil)).Elem()
}

type cdnCertificateArgs struct {
	// Content of the specified certificate public key file. Line breaks in the content should be replaced with `\r\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	Certificate string `pulumi:"certificate"`
	// Note on the certificate.
	Desc string `pulumi:"desc"`
	// The content of the specified certificate private key file. Replace line breaks in the content with `\r\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	PrivateKey string `pulumi:"privateKey"`
	// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
	Source string `pulumi:"source"`
}

// The set of arguments for constructing a CdnCertificate resource.
type CdnCertificateArgs struct {
	// Content of the specified certificate public key file. Line breaks in the content should be replaced with `\r\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	Certificate pulumi.StringInput
	// Note on the certificate.
	Desc pulumi.StringInput
	// The content of the specified certificate private key file. Replace line breaks in the content with `\r\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	PrivateKey pulumi.StringInput
	// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
	Source pulumi.StringInput
}

func (CdnCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cdnCertificateArgs)(nil)).Elem()
}

type CdnCertificateInput interface {
	pulumi.Input

	ToCdnCertificateOutput() CdnCertificateOutput
	ToCdnCertificateOutputWithContext(ctx context.Context) CdnCertificateOutput
}

func (*CdnCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnCertificate)(nil)).Elem()
}

func (i *CdnCertificate) ToCdnCertificateOutput() CdnCertificateOutput {
	return i.ToCdnCertificateOutputWithContext(context.Background())
}

func (i *CdnCertificate) ToCdnCertificateOutputWithContext(ctx context.Context) CdnCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnCertificateOutput)
}

// CdnCertificateArrayInput is an input type that accepts CdnCertificateArray and CdnCertificateArrayOutput values.
// You can construct a concrete instance of `CdnCertificateArrayInput` via:
//
//	CdnCertificateArray{ CdnCertificateArgs{...} }
type CdnCertificateArrayInput interface {
	pulumi.Input

	ToCdnCertificateArrayOutput() CdnCertificateArrayOutput
	ToCdnCertificateArrayOutputWithContext(context.Context) CdnCertificateArrayOutput
}

type CdnCertificateArray []CdnCertificateInput

func (CdnCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CdnCertificate)(nil)).Elem()
}

func (i CdnCertificateArray) ToCdnCertificateArrayOutput() CdnCertificateArrayOutput {
	return i.ToCdnCertificateArrayOutputWithContext(context.Background())
}

func (i CdnCertificateArray) ToCdnCertificateArrayOutputWithContext(ctx context.Context) CdnCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnCertificateArrayOutput)
}

// CdnCertificateMapInput is an input type that accepts CdnCertificateMap and CdnCertificateMapOutput values.
// You can construct a concrete instance of `CdnCertificateMapInput` via:
//
//	CdnCertificateMap{ "key": CdnCertificateArgs{...} }
type CdnCertificateMapInput interface {
	pulumi.Input

	ToCdnCertificateMapOutput() CdnCertificateMapOutput
	ToCdnCertificateMapOutputWithContext(context.Context) CdnCertificateMapOutput
}

type CdnCertificateMap map[string]CdnCertificateInput

func (CdnCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CdnCertificate)(nil)).Elem()
}

func (i CdnCertificateMap) ToCdnCertificateMapOutput() CdnCertificateMapOutput {
	return i.ToCdnCertificateMapOutputWithContext(context.Background())
}

func (i CdnCertificateMap) ToCdnCertificateMapOutputWithContext(ctx context.Context) CdnCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnCertificateMapOutput)
}

type CdnCertificateOutput struct{ *pulumi.OutputState }

func (CdnCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnCertificate)(nil)).Elem()
}

func (o CdnCertificateOutput) ToCdnCertificateOutput() CdnCertificateOutput {
	return o
}

func (o CdnCertificateOutput) ToCdnCertificateOutputWithContext(ctx context.Context) CdnCertificateOutput {
	return o
}

// Content of the specified certificate public key file. Line breaks in the content should be replaced with `\r\n`. The file extension for the certificate public key is `.crt` or `.pem`. The public key must include the complete certificate chain. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o CdnCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Note on the certificate.
func (o CdnCertificateOutput) Desc() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnCertificate) pulumi.StringOutput { return v.Desc }).(pulumi.StringOutput)
}

// The content of the specified certificate private key file. Replace line breaks in the content with `\r\n`. The file extension for the certificate private key is `.key` or `.pem`. The private key must be unencrypted. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o CdnCertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnCertificate) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
func (o CdnCertificateOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnCertificate) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type CdnCertificateArrayOutput struct{ *pulumi.OutputState }

func (CdnCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CdnCertificate)(nil)).Elem()
}

func (o CdnCertificateArrayOutput) ToCdnCertificateArrayOutput() CdnCertificateArrayOutput {
	return o
}

func (o CdnCertificateArrayOutput) ToCdnCertificateArrayOutputWithContext(ctx context.Context) CdnCertificateArrayOutput {
	return o
}

func (o CdnCertificateArrayOutput) Index(i pulumi.IntInput) CdnCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CdnCertificate {
		return vs[0].([]*CdnCertificate)[vs[1].(int)]
	}).(CdnCertificateOutput)
}

type CdnCertificateMapOutput struct{ *pulumi.OutputState }

func (CdnCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CdnCertificate)(nil)).Elem()
}

func (o CdnCertificateMapOutput) ToCdnCertificateMapOutput() CdnCertificateMapOutput {
	return o
}

func (o CdnCertificateMapOutput) ToCdnCertificateMapOutputWithContext(ctx context.Context) CdnCertificateMapOutput {
	return o
}

func (o CdnCertificateMapOutput) MapIndex(k pulumi.StringInput) CdnCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CdnCertificate {
		return vs[0].(map[string]*CdnCertificate)[vs[1].(string)]
	}).(CdnCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdnCertificateInput)(nil)).Elem(), &CdnCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnCertificateArrayInput)(nil)).Elem(), CdnCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnCertificateMapInput)(nil)).Elem(), CdnCertificateMap{})
	pulumi.RegisterOutputType(CdnCertificateOutput{})
	pulumi.RegisterOutputType(CdnCertificateArrayOutput{})
	pulumi.RegisterOutputType(CdnCertificateMapOutput{})
}
