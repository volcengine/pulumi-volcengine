// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type CdnDomainSharedCname struct {
	// Assign a CNAME to the accelerated domain.
	Cname string `pulumi:"cname"`
	// Specify whether to enable shared CNAME.
	Switch bool `pulumi:"switch"`
}

// CdnDomainSharedCnameInput is an input type that accepts CdnDomainSharedCnameArgs and CdnDomainSharedCnameOutput values.
// You can construct a concrete instance of `CdnDomainSharedCnameInput` via:
//
//	CdnDomainSharedCnameArgs{...}
type CdnDomainSharedCnameInput interface {
	pulumi.Input

	ToCdnDomainSharedCnameOutput() CdnDomainSharedCnameOutput
	ToCdnDomainSharedCnameOutputWithContext(context.Context) CdnDomainSharedCnameOutput
}

type CdnDomainSharedCnameArgs struct {
	// Assign a CNAME to the accelerated domain.
	Cname pulumi.StringInput `pulumi:"cname"`
	// Specify whether to enable shared CNAME.
	Switch pulumi.BoolInput `pulumi:"switch"`
}

func (CdnDomainSharedCnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDomainSharedCname)(nil)).Elem()
}

func (i CdnDomainSharedCnameArgs) ToCdnDomainSharedCnameOutput() CdnDomainSharedCnameOutput {
	return i.ToCdnDomainSharedCnameOutputWithContext(context.Background())
}

func (i CdnDomainSharedCnameArgs) ToCdnDomainSharedCnameOutputWithContext(ctx context.Context) CdnDomainSharedCnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainSharedCnameOutput)
}

func (i CdnDomainSharedCnameArgs) ToCdnDomainSharedCnamePtrOutput() CdnDomainSharedCnamePtrOutput {
	return i.ToCdnDomainSharedCnamePtrOutputWithContext(context.Background())
}

func (i CdnDomainSharedCnameArgs) ToCdnDomainSharedCnamePtrOutputWithContext(ctx context.Context) CdnDomainSharedCnamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainSharedCnameOutput).ToCdnDomainSharedCnamePtrOutputWithContext(ctx)
}

// CdnDomainSharedCnamePtrInput is an input type that accepts CdnDomainSharedCnameArgs, CdnDomainSharedCnamePtr and CdnDomainSharedCnamePtrOutput values.
// You can construct a concrete instance of `CdnDomainSharedCnamePtrInput` via:
//
//	        CdnDomainSharedCnameArgs{...}
//
//	or:
//
//	        nil
type CdnDomainSharedCnamePtrInput interface {
	pulumi.Input

	ToCdnDomainSharedCnamePtrOutput() CdnDomainSharedCnamePtrOutput
	ToCdnDomainSharedCnamePtrOutputWithContext(context.Context) CdnDomainSharedCnamePtrOutput
}

type cdnDomainSharedCnamePtrType CdnDomainSharedCnameArgs

func CdnDomainSharedCnamePtr(v *CdnDomainSharedCnameArgs) CdnDomainSharedCnamePtrInput {
	return (*cdnDomainSharedCnamePtrType)(v)
}

func (*cdnDomainSharedCnamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDomainSharedCname)(nil)).Elem()
}

func (i *cdnDomainSharedCnamePtrType) ToCdnDomainSharedCnamePtrOutput() CdnDomainSharedCnamePtrOutput {
	return i.ToCdnDomainSharedCnamePtrOutputWithContext(context.Background())
}

func (i *cdnDomainSharedCnamePtrType) ToCdnDomainSharedCnamePtrOutputWithContext(ctx context.Context) CdnDomainSharedCnamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainSharedCnamePtrOutput)
}

type CdnDomainSharedCnameOutput struct{ *pulumi.OutputState }

func (CdnDomainSharedCnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDomainSharedCname)(nil)).Elem()
}

func (o CdnDomainSharedCnameOutput) ToCdnDomainSharedCnameOutput() CdnDomainSharedCnameOutput {
	return o
}

func (o CdnDomainSharedCnameOutput) ToCdnDomainSharedCnameOutputWithContext(ctx context.Context) CdnDomainSharedCnameOutput {
	return o
}

func (o CdnDomainSharedCnameOutput) ToCdnDomainSharedCnamePtrOutput() CdnDomainSharedCnamePtrOutput {
	return o.ToCdnDomainSharedCnamePtrOutputWithContext(context.Background())
}

func (o CdnDomainSharedCnameOutput) ToCdnDomainSharedCnamePtrOutputWithContext(ctx context.Context) CdnDomainSharedCnamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CdnDomainSharedCname) *CdnDomainSharedCname {
		return &v
	}).(CdnDomainSharedCnamePtrOutput)
}

// Assign a CNAME to the accelerated domain.
func (o CdnDomainSharedCnameOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v CdnDomainSharedCname) string { return v.Cname }).(pulumi.StringOutput)
}

// Specify whether to enable shared CNAME.
func (o CdnDomainSharedCnameOutput) Switch() pulumi.BoolOutput {
	return o.ApplyT(func(v CdnDomainSharedCname) bool { return v.Switch }).(pulumi.BoolOutput)
}

type CdnDomainSharedCnamePtrOutput struct{ *pulumi.OutputState }

func (CdnDomainSharedCnamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDomainSharedCname)(nil)).Elem()
}

func (o CdnDomainSharedCnamePtrOutput) ToCdnDomainSharedCnamePtrOutput() CdnDomainSharedCnamePtrOutput {
	return o
}

func (o CdnDomainSharedCnamePtrOutput) ToCdnDomainSharedCnamePtrOutputWithContext(ctx context.Context) CdnDomainSharedCnamePtrOutput {
	return o
}

func (o CdnDomainSharedCnamePtrOutput) Elem() CdnDomainSharedCnameOutput {
	return o.ApplyT(func(v *CdnDomainSharedCname) CdnDomainSharedCname {
		if v != nil {
			return *v
		}
		var ret CdnDomainSharedCname
		return ret
	}).(CdnDomainSharedCnameOutput)
}

// Assign a CNAME to the accelerated domain.
func (o CdnDomainSharedCnamePtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnDomainSharedCname) *string {
		if v == nil {
			return nil
		}
		return &v.Cname
	}).(pulumi.StringPtrOutput)
}

// Specify whether to enable shared CNAME.
func (o CdnDomainSharedCnamePtrOutput) Switch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CdnDomainSharedCname) *bool {
		if v == nil {
			return nil
		}
		return &v.Switch
	}).(pulumi.BoolPtrOutput)
}

type CdnDomainTag struct {
	// The key of the tag.
	Key string `pulumi:"key"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

// CdnDomainTagInput is an input type that accepts CdnDomainTagArgs and CdnDomainTagOutput values.
// You can construct a concrete instance of `CdnDomainTagInput` via:
//
//	CdnDomainTagArgs{...}
type CdnDomainTagInput interface {
	pulumi.Input

	ToCdnDomainTagOutput() CdnDomainTagOutput
	ToCdnDomainTagOutputWithContext(context.Context) CdnDomainTagOutput
}

type CdnDomainTagArgs struct {
	// The key of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CdnDomainTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDomainTag)(nil)).Elem()
}

func (i CdnDomainTagArgs) ToCdnDomainTagOutput() CdnDomainTagOutput {
	return i.ToCdnDomainTagOutputWithContext(context.Background())
}

func (i CdnDomainTagArgs) ToCdnDomainTagOutputWithContext(ctx context.Context) CdnDomainTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainTagOutput)
}

// CdnDomainTagArrayInput is an input type that accepts CdnDomainTagArray and CdnDomainTagArrayOutput values.
// You can construct a concrete instance of `CdnDomainTagArrayInput` via:
//
//	CdnDomainTagArray{ CdnDomainTagArgs{...} }
type CdnDomainTagArrayInput interface {
	pulumi.Input

	ToCdnDomainTagArrayOutput() CdnDomainTagArrayOutput
	ToCdnDomainTagArrayOutputWithContext(context.Context) CdnDomainTagArrayOutput
}

type CdnDomainTagArray []CdnDomainTagInput

func (CdnDomainTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CdnDomainTag)(nil)).Elem()
}

func (i CdnDomainTagArray) ToCdnDomainTagArrayOutput() CdnDomainTagArrayOutput {
	return i.ToCdnDomainTagArrayOutputWithContext(context.Background())
}

func (i CdnDomainTagArray) ToCdnDomainTagArrayOutputWithContext(ctx context.Context) CdnDomainTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainTagArrayOutput)
}

type CdnDomainTagOutput struct{ *pulumi.OutputState }

func (CdnDomainTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDomainTag)(nil)).Elem()
}

func (o CdnDomainTagOutput) ToCdnDomainTagOutput() CdnDomainTagOutput {
	return o
}

func (o CdnDomainTagOutput) ToCdnDomainTagOutputWithContext(ctx context.Context) CdnDomainTagOutput {
	return o
}

// The key of the tag.
func (o CdnDomainTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CdnDomainTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the tag.
func (o CdnDomainTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CdnDomainTag) string { return v.Value }).(pulumi.StringOutput)
}

type CdnDomainTagArrayOutput struct{ *pulumi.OutputState }

func (CdnDomainTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CdnDomainTag)(nil)).Elem()
}

func (o CdnDomainTagArrayOutput) ToCdnDomainTagArrayOutput() CdnDomainTagArrayOutput {
	return o
}

func (o CdnDomainTagArrayOutput) ToCdnDomainTagArrayOutputWithContext(ctx context.Context) CdnDomainTagArrayOutput {
	return o
}

func (o CdnDomainTagArrayOutput) Index(i pulumi.IntInput) CdnDomainTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CdnDomainTag {
		return vs[0].([]CdnDomainTag)[vs[1].(int)]
	}).(CdnDomainTagOutput)
}

type CertificatesCertInfo struct {
	// ID indicating the certificate.
	CertId string `pulumi:"certId"`
	// The domain name to which the certificate is issued.
	CertName string `pulumi:"certName"`
	// The domain name associated with the certificate. If the certificate is not yet associated with any domain name, the parameter value is null.
	ConfiguredDomain string `pulumi:"configuredDomain"`
	// The remark of the cert.
	Desc string `pulumi:"desc"`
	// The domain names included in the SAN field of the certificate.
	DnsName string `pulumi:"dnsName"`
	// The issuance time of the certificate is indicated. The unit is Unix timestamp.
	EffectiveTime int `pulumi:"effectiveTime"`
	// The expiration time of the certificate is indicated. The unit is Unix timestamp.
	ExpireTime int `pulumi:"expireTime"`
	// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
	Source string `pulumi:"source"`
	// Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
	Status string `pulumi:"status"`
}

// CertificatesCertInfoInput is an input type that accepts CertificatesCertInfoArgs and CertificatesCertInfoOutput values.
// You can construct a concrete instance of `CertificatesCertInfoInput` via:
//
//	CertificatesCertInfoArgs{...}
type CertificatesCertInfoInput interface {
	pulumi.Input

	ToCertificatesCertInfoOutput() CertificatesCertInfoOutput
	ToCertificatesCertInfoOutputWithContext(context.Context) CertificatesCertInfoOutput
}

type CertificatesCertInfoArgs struct {
	// ID indicating the certificate.
	CertId pulumi.StringInput `pulumi:"certId"`
	// The domain name to which the certificate is issued.
	CertName pulumi.StringInput `pulumi:"certName"`
	// The domain name associated with the certificate. If the certificate is not yet associated with any domain name, the parameter value is null.
	ConfiguredDomain pulumi.StringInput `pulumi:"configuredDomain"`
	// The remark of the cert.
	Desc pulumi.StringInput `pulumi:"desc"`
	// The domain names included in the SAN field of the certificate.
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// The issuance time of the certificate is indicated. The unit is Unix timestamp.
	EffectiveTime pulumi.IntInput `pulumi:"effectiveTime"`
	// The expiration time of the certificate is indicated. The unit is Unix timestamp.
	ExpireTime pulumi.IntInput `pulumi:"expireTime"`
	// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
	Source pulumi.StringInput `pulumi:"source"`
	// Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
	Status pulumi.StringInput `pulumi:"status"`
}

func (CertificatesCertInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesCertInfo)(nil)).Elem()
}

func (i CertificatesCertInfoArgs) ToCertificatesCertInfoOutput() CertificatesCertInfoOutput {
	return i.ToCertificatesCertInfoOutputWithContext(context.Background())
}

func (i CertificatesCertInfoArgs) ToCertificatesCertInfoOutputWithContext(ctx context.Context) CertificatesCertInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesCertInfoOutput)
}

// CertificatesCertInfoArrayInput is an input type that accepts CertificatesCertInfoArray and CertificatesCertInfoArrayOutput values.
// You can construct a concrete instance of `CertificatesCertInfoArrayInput` via:
//
//	CertificatesCertInfoArray{ CertificatesCertInfoArgs{...} }
type CertificatesCertInfoArrayInput interface {
	pulumi.Input

	ToCertificatesCertInfoArrayOutput() CertificatesCertInfoArrayOutput
	ToCertificatesCertInfoArrayOutputWithContext(context.Context) CertificatesCertInfoArrayOutput
}

type CertificatesCertInfoArray []CertificatesCertInfoInput

func (CertificatesCertInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificatesCertInfo)(nil)).Elem()
}

func (i CertificatesCertInfoArray) ToCertificatesCertInfoArrayOutput() CertificatesCertInfoArrayOutput {
	return i.ToCertificatesCertInfoArrayOutputWithContext(context.Background())
}

func (i CertificatesCertInfoArray) ToCertificatesCertInfoArrayOutputWithContext(ctx context.Context) CertificatesCertInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesCertInfoArrayOutput)
}

type CertificatesCertInfoOutput struct{ *pulumi.OutputState }

func (CertificatesCertInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesCertInfo)(nil)).Elem()
}

func (o CertificatesCertInfoOutput) ToCertificatesCertInfoOutput() CertificatesCertInfoOutput {
	return o
}

func (o CertificatesCertInfoOutput) ToCertificatesCertInfoOutputWithContext(ctx context.Context) CertificatesCertInfoOutput {
	return o
}

// ID indicating the certificate.
func (o CertificatesCertInfoOutput) CertId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertInfo) string { return v.CertId }).(pulumi.StringOutput)
}

// The domain name to which the certificate is issued.
func (o CertificatesCertInfoOutput) CertName() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertInfo) string { return v.CertName }).(pulumi.StringOutput)
}

// The domain name associated with the certificate. If the certificate is not yet associated with any domain name, the parameter value is null.
func (o CertificatesCertInfoOutput) ConfiguredDomain() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertInfo) string { return v.ConfiguredDomain }).(pulumi.StringOutput)
}

// The remark of the cert.
func (o CertificatesCertInfoOutput) Desc() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertInfo) string { return v.Desc }).(pulumi.StringOutput)
}

// The domain names included in the SAN field of the certificate.
func (o CertificatesCertInfoOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertInfo) string { return v.DnsName }).(pulumi.StringOutput)
}

// The issuance time of the certificate is indicated. The unit is Unix timestamp.
func (o CertificatesCertInfoOutput) EffectiveTime() pulumi.IntOutput {
	return o.ApplyT(func(v CertificatesCertInfo) int { return v.EffectiveTime }).(pulumi.IntOutput)
}

// The expiration time of the certificate is indicated. The unit is Unix timestamp.
func (o CertificatesCertInfoOutput) ExpireTime() pulumi.IntOutput {
	return o.ApplyT(func(v CertificatesCertInfo) int { return v.ExpireTime }).(pulumi.IntOutput)
}

// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
func (o CertificatesCertInfoOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertInfo) string { return v.Source }).(pulumi.StringOutput)
}

// Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
func (o CertificatesCertInfoOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertInfo) string { return v.Status }).(pulumi.StringOutput)
}

type CertificatesCertInfoArrayOutput struct{ *pulumi.OutputState }

func (CertificatesCertInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificatesCertInfo)(nil)).Elem()
}

func (o CertificatesCertInfoArrayOutput) ToCertificatesCertInfoArrayOutput() CertificatesCertInfoArrayOutput {
	return o
}

func (o CertificatesCertInfoArrayOutput) ToCertificatesCertInfoArrayOutputWithContext(ctx context.Context) CertificatesCertInfoArrayOutput {
	return o
}

func (o CertificatesCertInfoArrayOutput) Index(i pulumi.IntInput) CertificatesCertInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificatesCertInfo {
		return vs[0].([]CertificatesCertInfo)[vs[1].(int)]
	}).(CertificatesCertInfoOutput)
}

type ConfigsDomainConfig struct {
	// The cname of the domain.
	Cname string `pulumi:"cname"`
	// The create time of the domain.
	CreateTime int `pulumi:"createTime"`
	// The domain name.
	Domain string `pulumi:"domain"`
	// Indicates whether the configuration of this domain name is allowed to be changed.
	LockStatus string `pulumi:"lockStatus"`
	// The project name.
	Project string `pulumi:"project"`
	// The service region of the domain.
	ServiceRegion string `pulumi:"serviceRegion"`
	// The service type of the domain.
	ServiceType string `pulumi:"serviceType"`
	// The status of the domain.
	Status string `pulumi:"status"`
	// The update time of the domain.
	UpdateTime int `pulumi:"updateTime"`
}

// ConfigsDomainConfigInput is an input type that accepts ConfigsDomainConfigArgs and ConfigsDomainConfigOutput values.
// You can construct a concrete instance of `ConfigsDomainConfigInput` via:
//
//	ConfigsDomainConfigArgs{...}
type ConfigsDomainConfigInput interface {
	pulumi.Input

	ToConfigsDomainConfigOutput() ConfigsDomainConfigOutput
	ToConfigsDomainConfigOutputWithContext(context.Context) ConfigsDomainConfigOutput
}

type ConfigsDomainConfigArgs struct {
	// The cname of the domain.
	Cname pulumi.StringInput `pulumi:"cname"`
	// The create time of the domain.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// The domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Indicates whether the configuration of this domain name is allowed to be changed.
	LockStatus pulumi.StringInput `pulumi:"lockStatus"`
	// The project name.
	Project pulumi.StringInput `pulumi:"project"`
	// The service region of the domain.
	ServiceRegion pulumi.StringInput `pulumi:"serviceRegion"`
	// The service type of the domain.
	ServiceType pulumi.StringInput `pulumi:"serviceType"`
	// The status of the domain.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of the domain.
	UpdateTime pulumi.IntInput `pulumi:"updateTime"`
}

func (ConfigsDomainConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigsDomainConfig)(nil)).Elem()
}

func (i ConfigsDomainConfigArgs) ToConfigsDomainConfigOutput() ConfigsDomainConfigOutput {
	return i.ToConfigsDomainConfigOutputWithContext(context.Background())
}

func (i ConfigsDomainConfigArgs) ToConfigsDomainConfigOutputWithContext(ctx context.Context) ConfigsDomainConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigsDomainConfigOutput)
}

// ConfigsDomainConfigArrayInput is an input type that accepts ConfigsDomainConfigArray and ConfigsDomainConfigArrayOutput values.
// You can construct a concrete instance of `ConfigsDomainConfigArrayInput` via:
//
//	ConfigsDomainConfigArray{ ConfigsDomainConfigArgs{...} }
type ConfigsDomainConfigArrayInput interface {
	pulumi.Input

	ToConfigsDomainConfigArrayOutput() ConfigsDomainConfigArrayOutput
	ToConfigsDomainConfigArrayOutputWithContext(context.Context) ConfigsDomainConfigArrayOutput
}

type ConfigsDomainConfigArray []ConfigsDomainConfigInput

func (ConfigsDomainConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigsDomainConfig)(nil)).Elem()
}

func (i ConfigsDomainConfigArray) ToConfigsDomainConfigArrayOutput() ConfigsDomainConfigArrayOutput {
	return i.ToConfigsDomainConfigArrayOutputWithContext(context.Background())
}

func (i ConfigsDomainConfigArray) ToConfigsDomainConfigArrayOutputWithContext(ctx context.Context) ConfigsDomainConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigsDomainConfigArrayOutput)
}

type ConfigsDomainConfigOutput struct{ *pulumi.OutputState }

func (ConfigsDomainConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigsDomainConfig)(nil)).Elem()
}

func (o ConfigsDomainConfigOutput) ToConfigsDomainConfigOutput() ConfigsDomainConfigOutput {
	return o
}

func (o ConfigsDomainConfigOutput) ToConfigsDomainConfigOutputWithContext(ctx context.Context) ConfigsDomainConfigOutput {
	return o
}

// The cname of the domain.
func (o ConfigsDomainConfigOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigsDomainConfig) string { return v.Cname }).(pulumi.StringOutput)
}

// The create time of the domain.
func (o ConfigsDomainConfigOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigsDomainConfig) int { return v.CreateTime }).(pulumi.IntOutput)
}

// The domain name.
func (o ConfigsDomainConfigOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigsDomainConfig) string { return v.Domain }).(pulumi.StringOutput)
}

// Indicates whether the configuration of this domain name is allowed to be changed.
func (o ConfigsDomainConfigOutput) LockStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigsDomainConfig) string { return v.LockStatus }).(pulumi.StringOutput)
}

// The project name.
func (o ConfigsDomainConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigsDomainConfig) string { return v.Project }).(pulumi.StringOutput)
}

// The service region of the domain.
func (o ConfigsDomainConfigOutput) ServiceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigsDomainConfig) string { return v.ServiceRegion }).(pulumi.StringOutput)
}

// The service type of the domain.
func (o ConfigsDomainConfigOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigsDomainConfig) string { return v.ServiceType }).(pulumi.StringOutput)
}

// The status of the domain.
func (o ConfigsDomainConfigOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigsDomainConfig) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of the domain.
func (o ConfigsDomainConfigOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigsDomainConfig) int { return v.UpdateTime }).(pulumi.IntOutput)
}

type ConfigsDomainConfigArrayOutput struct{ *pulumi.OutputState }

func (ConfigsDomainConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigsDomainConfig)(nil)).Elem()
}

func (o ConfigsDomainConfigArrayOutput) ToConfigsDomainConfigArrayOutput() ConfigsDomainConfigArrayOutput {
	return o
}

func (o ConfigsDomainConfigArrayOutput) ToConfigsDomainConfigArrayOutputWithContext(ctx context.Context) ConfigsDomainConfigArrayOutput {
	return o
}

func (o ConfigsDomainConfigArrayOutput) Index(i pulumi.IntInput) ConfigsDomainConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigsDomainConfig {
		return vs[0].([]ConfigsDomainConfig)[vs[1].(int)]
	}).(ConfigsDomainConfigOutput)
}

type DomainsDomain struct {
	// The list of backup origin servers for accelerating this domain name. If no backup origin server is configured for this acceleration domain name, the parameter value is null.
	BackupOrigins []string `pulumi:"backupOrigins"`
	// Indicates the role of the accelerated domain in the shared cache configuration. This parameter can take the following values: `targetHost`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the target domain.`cacheSharedOn`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the configured domain.`""`: This parameter value is empty, indicating that the accelerated domain does not exist in any shared cache configuration.
	CacheShared string `pulumi:"cacheShared"`
	// If CacheShared is cache_shared_on, it means the target domain name that shares cache with the accelerated domain name. If CacheShared is targetHost or an empty value, the parameter value is empty.
	CacheSharedTargetHost string `pulumi:"cacheSharedTargetHost"`
	// The CNAME address of the domain is automatically assigned when adding the domain.
	Cname string `pulumi:"cname"`
	// The creation time of the domain.
	CreateTime int `pulumi:"createTime"`
	// Search by specifying domain name keywords, with fuzzy matching.
	Domain string `pulumi:"domain"`
	// Indicates the locked status of the accelerated domain.
	DomainLocks []DomainsDomainDomainLock `pulumi:"domainLocks"`
	// Specify HTTPS configuration to filter accelerated domains. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain has enabled HTTPS function.`false`: Indicates that the accelerated domain has not enabled HTTPS function.
	Https bool `pulumi:"https"`
	// Specify IPv6 configuration to filter accelerated domain names. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain name supports requests using IPv6 addresses.`false`: Indicates that the accelerated domain name does not support requests using IPv6 addresses.
	Ipv6 bool `pulumi:"ipv6"`
	// Indicates whether the accelerated domain name is a conflicting domain name. By default, each accelerated domain name is unique in the content delivery network. If you need to add an accelerated domain name that already exists in the content delivery network, you need to submit a ticket. If the domain name is added successfully, it becomes a conflicting domain name.
	IsConflictDomain bool `pulumi:"isConflictDomain"`
	// Configure the origin protocol for the accelerated domain.
	OriginProtocol string `pulumi:"originProtocol"`
	// Specify a primary origin server for filtering accelerated domains.
	PrimaryOrigins []string `pulumi:"primaryOrigins"`
	// The project name of the domain.
	Project string `pulumi:"project"`
	// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
	ServiceRegion string `pulumi:"serviceRegion"`
	// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
	ServiceType string `pulumi:"serviceType"`
	// The status of the domain.
	Status string `pulumi:"status"`
	// Filter by specified domain name tags, up to 10 tags can be specified. Each tag is entered as a string in the format of key:value.
	Tags []DomainsDomainTag `pulumi:"tags"`
	// The update time of the domain.
	UpdateTime int `pulumi:"updateTime"`
}

// DomainsDomainInput is an input type that accepts DomainsDomainArgs and DomainsDomainOutput values.
// You can construct a concrete instance of `DomainsDomainInput` via:
//
//	DomainsDomainArgs{...}
type DomainsDomainInput interface {
	pulumi.Input

	ToDomainsDomainOutput() DomainsDomainOutput
	ToDomainsDomainOutputWithContext(context.Context) DomainsDomainOutput
}

type DomainsDomainArgs struct {
	// The list of backup origin servers for accelerating this domain name. If no backup origin server is configured for this acceleration domain name, the parameter value is null.
	BackupOrigins pulumi.StringArrayInput `pulumi:"backupOrigins"`
	// Indicates the role of the accelerated domain in the shared cache configuration. This parameter can take the following values: `targetHost`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the target domain.`cacheSharedOn`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the configured domain.`""`: This parameter value is empty, indicating that the accelerated domain does not exist in any shared cache configuration.
	CacheShared pulumi.StringInput `pulumi:"cacheShared"`
	// If CacheShared is cache_shared_on, it means the target domain name that shares cache with the accelerated domain name. If CacheShared is targetHost or an empty value, the parameter value is empty.
	CacheSharedTargetHost pulumi.StringInput `pulumi:"cacheSharedTargetHost"`
	// The CNAME address of the domain is automatically assigned when adding the domain.
	Cname pulumi.StringInput `pulumi:"cname"`
	// The creation time of the domain.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// Search by specifying domain name keywords, with fuzzy matching.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Indicates the locked status of the accelerated domain.
	DomainLocks DomainsDomainDomainLockArrayInput `pulumi:"domainLocks"`
	// Specify HTTPS configuration to filter accelerated domains. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain has enabled HTTPS function.`false`: Indicates that the accelerated domain has not enabled HTTPS function.
	Https pulumi.BoolInput `pulumi:"https"`
	// Specify IPv6 configuration to filter accelerated domain names. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain name supports requests using IPv6 addresses.`false`: Indicates that the accelerated domain name does not support requests using IPv6 addresses.
	Ipv6 pulumi.BoolInput `pulumi:"ipv6"`
	// Indicates whether the accelerated domain name is a conflicting domain name. By default, each accelerated domain name is unique in the content delivery network. If you need to add an accelerated domain name that already exists in the content delivery network, you need to submit a ticket. If the domain name is added successfully, it becomes a conflicting domain name.
	IsConflictDomain pulumi.BoolInput `pulumi:"isConflictDomain"`
	// Configure the origin protocol for the accelerated domain.
	OriginProtocol pulumi.StringInput `pulumi:"originProtocol"`
	// Specify a primary origin server for filtering accelerated domains.
	PrimaryOrigins pulumi.StringArrayInput `pulumi:"primaryOrigins"`
	// The project name of the domain.
	Project pulumi.StringInput `pulumi:"project"`
	// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
	ServiceRegion pulumi.StringInput `pulumi:"serviceRegion"`
	// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
	ServiceType pulumi.StringInput `pulumi:"serviceType"`
	// The status of the domain.
	Status pulumi.StringInput `pulumi:"status"`
	// Filter by specified domain name tags, up to 10 tags can be specified. Each tag is entered as a string in the format of key:value.
	Tags DomainsDomainTagArrayInput `pulumi:"tags"`
	// The update time of the domain.
	UpdateTime pulumi.IntInput `pulumi:"updateTime"`
}

func (DomainsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainsDomain)(nil)).Elem()
}

func (i DomainsDomainArgs) ToDomainsDomainOutput() DomainsDomainOutput {
	return i.ToDomainsDomainOutputWithContext(context.Background())
}

func (i DomainsDomainArgs) ToDomainsDomainOutputWithContext(ctx context.Context) DomainsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainsDomainOutput)
}

// DomainsDomainArrayInput is an input type that accepts DomainsDomainArray and DomainsDomainArrayOutput values.
// You can construct a concrete instance of `DomainsDomainArrayInput` via:
//
//	DomainsDomainArray{ DomainsDomainArgs{...} }
type DomainsDomainArrayInput interface {
	pulumi.Input

	ToDomainsDomainArrayOutput() DomainsDomainArrayOutput
	ToDomainsDomainArrayOutputWithContext(context.Context) DomainsDomainArrayOutput
}

type DomainsDomainArray []DomainsDomainInput

func (DomainsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainsDomain)(nil)).Elem()
}

func (i DomainsDomainArray) ToDomainsDomainArrayOutput() DomainsDomainArrayOutput {
	return i.ToDomainsDomainArrayOutputWithContext(context.Background())
}

func (i DomainsDomainArray) ToDomainsDomainArrayOutputWithContext(ctx context.Context) DomainsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainsDomainArrayOutput)
}

type DomainsDomainOutput struct{ *pulumi.OutputState }

func (DomainsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainsDomain)(nil)).Elem()
}

func (o DomainsDomainOutput) ToDomainsDomainOutput() DomainsDomainOutput {
	return o
}

func (o DomainsDomainOutput) ToDomainsDomainOutputWithContext(ctx context.Context) DomainsDomainOutput {
	return o
}

// The list of backup origin servers for accelerating this domain name. If no backup origin server is configured for this acceleration domain name, the parameter value is null.
func (o DomainsDomainOutput) BackupOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainsDomain) []string { return v.BackupOrigins }).(pulumi.StringArrayOutput)
}

// Indicates the role of the accelerated domain in the shared cache configuration. This parameter can take the following values: `targetHost`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the target domain.`cacheSharedOn`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the configured domain.`""`: This parameter value is empty, indicating that the accelerated domain does not exist in any shared cache configuration.
func (o DomainsDomainOutput) CacheShared() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomain) string { return v.CacheShared }).(pulumi.StringOutput)
}

// If CacheShared is cache_shared_on, it means the target domain name that shares cache with the accelerated domain name. If CacheShared is targetHost or an empty value, the parameter value is empty.
func (o DomainsDomainOutput) CacheSharedTargetHost() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomain) string { return v.CacheSharedTargetHost }).(pulumi.StringOutput)
}

// The CNAME address of the domain is automatically assigned when adding the domain.
func (o DomainsDomainOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomain) string { return v.Cname }).(pulumi.StringOutput)
}

// The creation time of the domain.
func (o DomainsDomainOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v DomainsDomain) int { return v.CreateTime }).(pulumi.IntOutput)
}

// Search by specifying domain name keywords, with fuzzy matching.
func (o DomainsDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomain) string { return v.Domain }).(pulumi.StringOutput)
}

// Indicates the locked status of the accelerated domain.
func (o DomainsDomainOutput) DomainLocks() DomainsDomainDomainLockArrayOutput {
	return o.ApplyT(func(v DomainsDomain) []DomainsDomainDomainLock { return v.DomainLocks }).(DomainsDomainDomainLockArrayOutput)
}

// Specify HTTPS configuration to filter accelerated domains. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain has enabled HTTPS function.`false`: Indicates that the accelerated domain has not enabled HTTPS function.
func (o DomainsDomainOutput) Https() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainsDomain) bool { return v.Https }).(pulumi.BoolOutput)
}

// Specify IPv6 configuration to filter accelerated domain names. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain name supports requests using IPv6 addresses.`false`: Indicates that the accelerated domain name does not support requests using IPv6 addresses.
func (o DomainsDomainOutput) Ipv6() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainsDomain) bool { return v.Ipv6 }).(pulumi.BoolOutput)
}

// Indicates whether the accelerated domain name is a conflicting domain name. By default, each accelerated domain name is unique in the content delivery network. If you need to add an accelerated domain name that already exists in the content delivery network, you need to submit a ticket. If the domain name is added successfully, it becomes a conflicting domain name.
func (o DomainsDomainOutput) IsConflictDomain() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainsDomain) bool { return v.IsConflictDomain }).(pulumi.BoolOutput)
}

// Configure the origin protocol for the accelerated domain.
func (o DomainsDomainOutput) OriginProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomain) string { return v.OriginProtocol }).(pulumi.StringOutput)
}

// Specify a primary origin server for filtering accelerated domains.
func (o DomainsDomainOutput) PrimaryOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainsDomain) []string { return v.PrimaryOrigins }).(pulumi.StringArrayOutput)
}

// The project name of the domain.
func (o DomainsDomainOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomain) string { return v.Project }).(pulumi.StringOutput)
}

// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
func (o DomainsDomainOutput) ServiceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomain) string { return v.ServiceRegion }).(pulumi.StringOutput)
}

// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
func (o DomainsDomainOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomain) string { return v.ServiceType }).(pulumi.StringOutput)
}

// The status of the domain.
func (o DomainsDomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomain) string { return v.Status }).(pulumi.StringOutput)
}

// Filter by specified domain name tags, up to 10 tags can be specified. Each tag is entered as a string in the format of key:value.
func (o DomainsDomainOutput) Tags() DomainsDomainTagArrayOutput {
	return o.ApplyT(func(v DomainsDomain) []DomainsDomainTag { return v.Tags }).(DomainsDomainTagArrayOutput)
}

// The update time of the domain.
func (o DomainsDomainOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v DomainsDomain) int { return v.UpdateTime }).(pulumi.IntOutput)
}

type DomainsDomainArrayOutput struct{ *pulumi.OutputState }

func (DomainsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainsDomain)(nil)).Elem()
}

func (o DomainsDomainArrayOutput) ToDomainsDomainArrayOutput() DomainsDomainArrayOutput {
	return o
}

func (o DomainsDomainArrayOutput) ToDomainsDomainArrayOutputWithContext(ctx context.Context) DomainsDomainArrayOutput {
	return o
}

func (o DomainsDomainArrayOutput) Index(i pulumi.IntInput) DomainsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainsDomain {
		return vs[0].([]DomainsDomain)[vs[1].(int)]
	}).(DomainsDomainOutput)
}

type DomainsDomainDomainLock struct {
	// If the Status is on, this parameter value records the reason for the lock.
	Remark string `pulumi:"remark"`
	// The status of the domain.
	Status string `pulumi:"status"`
}

// DomainsDomainDomainLockInput is an input type that accepts DomainsDomainDomainLockArgs and DomainsDomainDomainLockOutput values.
// You can construct a concrete instance of `DomainsDomainDomainLockInput` via:
//
//	DomainsDomainDomainLockArgs{...}
type DomainsDomainDomainLockInput interface {
	pulumi.Input

	ToDomainsDomainDomainLockOutput() DomainsDomainDomainLockOutput
	ToDomainsDomainDomainLockOutputWithContext(context.Context) DomainsDomainDomainLockOutput
}

type DomainsDomainDomainLockArgs struct {
	// If the Status is on, this parameter value records the reason for the lock.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The status of the domain.
	Status pulumi.StringInput `pulumi:"status"`
}

func (DomainsDomainDomainLockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainsDomainDomainLock)(nil)).Elem()
}

func (i DomainsDomainDomainLockArgs) ToDomainsDomainDomainLockOutput() DomainsDomainDomainLockOutput {
	return i.ToDomainsDomainDomainLockOutputWithContext(context.Background())
}

func (i DomainsDomainDomainLockArgs) ToDomainsDomainDomainLockOutputWithContext(ctx context.Context) DomainsDomainDomainLockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainsDomainDomainLockOutput)
}

// DomainsDomainDomainLockArrayInput is an input type that accepts DomainsDomainDomainLockArray and DomainsDomainDomainLockArrayOutput values.
// You can construct a concrete instance of `DomainsDomainDomainLockArrayInput` via:
//
//	DomainsDomainDomainLockArray{ DomainsDomainDomainLockArgs{...} }
type DomainsDomainDomainLockArrayInput interface {
	pulumi.Input

	ToDomainsDomainDomainLockArrayOutput() DomainsDomainDomainLockArrayOutput
	ToDomainsDomainDomainLockArrayOutputWithContext(context.Context) DomainsDomainDomainLockArrayOutput
}

type DomainsDomainDomainLockArray []DomainsDomainDomainLockInput

func (DomainsDomainDomainLockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainsDomainDomainLock)(nil)).Elem()
}

func (i DomainsDomainDomainLockArray) ToDomainsDomainDomainLockArrayOutput() DomainsDomainDomainLockArrayOutput {
	return i.ToDomainsDomainDomainLockArrayOutputWithContext(context.Background())
}

func (i DomainsDomainDomainLockArray) ToDomainsDomainDomainLockArrayOutputWithContext(ctx context.Context) DomainsDomainDomainLockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainsDomainDomainLockArrayOutput)
}

type DomainsDomainDomainLockOutput struct{ *pulumi.OutputState }

func (DomainsDomainDomainLockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainsDomainDomainLock)(nil)).Elem()
}

func (o DomainsDomainDomainLockOutput) ToDomainsDomainDomainLockOutput() DomainsDomainDomainLockOutput {
	return o
}

func (o DomainsDomainDomainLockOutput) ToDomainsDomainDomainLockOutputWithContext(ctx context.Context) DomainsDomainDomainLockOutput {
	return o
}

// If the Status is on, this parameter value records the reason for the lock.
func (o DomainsDomainDomainLockOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomainDomainLock) string { return v.Remark }).(pulumi.StringOutput)
}

// The status of the domain.
func (o DomainsDomainDomainLockOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomainDomainLock) string { return v.Status }).(pulumi.StringOutput)
}

type DomainsDomainDomainLockArrayOutput struct{ *pulumi.OutputState }

func (DomainsDomainDomainLockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainsDomainDomainLock)(nil)).Elem()
}

func (o DomainsDomainDomainLockArrayOutput) ToDomainsDomainDomainLockArrayOutput() DomainsDomainDomainLockArrayOutput {
	return o
}

func (o DomainsDomainDomainLockArrayOutput) ToDomainsDomainDomainLockArrayOutputWithContext(ctx context.Context) DomainsDomainDomainLockArrayOutput {
	return o
}

func (o DomainsDomainDomainLockArrayOutput) Index(i pulumi.IntInput) DomainsDomainDomainLockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainsDomainDomainLock {
		return vs[0].([]DomainsDomainDomainLock)[vs[1].(int)]
	}).(DomainsDomainDomainLockOutput)
}

type DomainsDomainTag struct {
	// The key of the tag.
	Key string `pulumi:"key"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

// DomainsDomainTagInput is an input type that accepts DomainsDomainTagArgs and DomainsDomainTagOutput values.
// You can construct a concrete instance of `DomainsDomainTagInput` via:
//
//	DomainsDomainTagArgs{...}
type DomainsDomainTagInput interface {
	pulumi.Input

	ToDomainsDomainTagOutput() DomainsDomainTagOutput
	ToDomainsDomainTagOutputWithContext(context.Context) DomainsDomainTagOutput
}

type DomainsDomainTagArgs struct {
	// The key of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (DomainsDomainTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainsDomainTag)(nil)).Elem()
}

func (i DomainsDomainTagArgs) ToDomainsDomainTagOutput() DomainsDomainTagOutput {
	return i.ToDomainsDomainTagOutputWithContext(context.Background())
}

func (i DomainsDomainTagArgs) ToDomainsDomainTagOutputWithContext(ctx context.Context) DomainsDomainTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainsDomainTagOutput)
}

// DomainsDomainTagArrayInput is an input type that accepts DomainsDomainTagArray and DomainsDomainTagArrayOutput values.
// You can construct a concrete instance of `DomainsDomainTagArrayInput` via:
//
//	DomainsDomainTagArray{ DomainsDomainTagArgs{...} }
type DomainsDomainTagArrayInput interface {
	pulumi.Input

	ToDomainsDomainTagArrayOutput() DomainsDomainTagArrayOutput
	ToDomainsDomainTagArrayOutputWithContext(context.Context) DomainsDomainTagArrayOutput
}

type DomainsDomainTagArray []DomainsDomainTagInput

func (DomainsDomainTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainsDomainTag)(nil)).Elem()
}

func (i DomainsDomainTagArray) ToDomainsDomainTagArrayOutput() DomainsDomainTagArrayOutput {
	return i.ToDomainsDomainTagArrayOutputWithContext(context.Background())
}

func (i DomainsDomainTagArray) ToDomainsDomainTagArrayOutputWithContext(ctx context.Context) DomainsDomainTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainsDomainTagArrayOutput)
}

type DomainsDomainTagOutput struct{ *pulumi.OutputState }

func (DomainsDomainTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainsDomainTag)(nil)).Elem()
}

func (o DomainsDomainTagOutput) ToDomainsDomainTagOutput() DomainsDomainTagOutput {
	return o
}

func (o DomainsDomainTagOutput) ToDomainsDomainTagOutputWithContext(ctx context.Context) DomainsDomainTagOutput {
	return o
}

// The key of the tag.
func (o DomainsDomainTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomainTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the tag.
func (o DomainsDomainTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DomainsDomainTag) string { return v.Value }).(pulumi.StringOutput)
}

type DomainsDomainTagArrayOutput struct{ *pulumi.OutputState }

func (DomainsDomainTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainsDomainTag)(nil)).Elem()
}

func (o DomainsDomainTagArrayOutput) ToDomainsDomainTagArrayOutput() DomainsDomainTagArrayOutput {
	return o
}

func (o DomainsDomainTagArrayOutput) ToDomainsDomainTagArrayOutputWithContext(ctx context.Context) DomainsDomainTagArrayOutput {
	return o
}

func (o DomainsDomainTagArrayOutput) Index(i pulumi.IntInput) DomainsDomainTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainsDomainTag {
		return vs[0].([]DomainsDomainTag)[vs[1].(int)]
	}).(DomainsDomainTagOutput)
}

type SharedConfigAllowIpAccessRule struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// SharedConfigAllowIpAccessRuleInput is an input type that accepts SharedConfigAllowIpAccessRuleArgs and SharedConfigAllowIpAccessRuleOutput values.
// You can construct a concrete instance of `SharedConfigAllowIpAccessRuleInput` via:
//
//	SharedConfigAllowIpAccessRuleArgs{...}
type SharedConfigAllowIpAccessRuleInput interface {
	pulumi.Input

	ToSharedConfigAllowIpAccessRuleOutput() SharedConfigAllowIpAccessRuleOutput
	ToSharedConfigAllowIpAccessRuleOutputWithContext(context.Context) SharedConfigAllowIpAccessRuleOutput
}

type SharedConfigAllowIpAccessRuleArgs struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (SharedConfigAllowIpAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigAllowIpAccessRule)(nil)).Elem()
}

func (i SharedConfigAllowIpAccessRuleArgs) ToSharedConfigAllowIpAccessRuleOutput() SharedConfigAllowIpAccessRuleOutput {
	return i.ToSharedConfigAllowIpAccessRuleOutputWithContext(context.Background())
}

func (i SharedConfigAllowIpAccessRuleArgs) ToSharedConfigAllowIpAccessRuleOutputWithContext(ctx context.Context) SharedConfigAllowIpAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigAllowIpAccessRuleOutput)
}

func (i SharedConfigAllowIpAccessRuleArgs) ToSharedConfigAllowIpAccessRulePtrOutput() SharedConfigAllowIpAccessRulePtrOutput {
	return i.ToSharedConfigAllowIpAccessRulePtrOutputWithContext(context.Background())
}

func (i SharedConfigAllowIpAccessRuleArgs) ToSharedConfigAllowIpAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigAllowIpAccessRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigAllowIpAccessRuleOutput).ToSharedConfigAllowIpAccessRulePtrOutputWithContext(ctx)
}

// SharedConfigAllowIpAccessRulePtrInput is an input type that accepts SharedConfigAllowIpAccessRuleArgs, SharedConfigAllowIpAccessRulePtr and SharedConfigAllowIpAccessRulePtrOutput values.
// You can construct a concrete instance of `SharedConfigAllowIpAccessRulePtrInput` via:
//
//	        SharedConfigAllowIpAccessRuleArgs{...}
//
//	or:
//
//	        nil
type SharedConfigAllowIpAccessRulePtrInput interface {
	pulumi.Input

	ToSharedConfigAllowIpAccessRulePtrOutput() SharedConfigAllowIpAccessRulePtrOutput
	ToSharedConfigAllowIpAccessRulePtrOutputWithContext(context.Context) SharedConfigAllowIpAccessRulePtrOutput
}

type sharedConfigAllowIpAccessRulePtrType SharedConfigAllowIpAccessRuleArgs

func SharedConfigAllowIpAccessRulePtr(v *SharedConfigAllowIpAccessRuleArgs) SharedConfigAllowIpAccessRulePtrInput {
	return (*sharedConfigAllowIpAccessRulePtrType)(v)
}

func (*sharedConfigAllowIpAccessRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigAllowIpAccessRule)(nil)).Elem()
}

func (i *sharedConfigAllowIpAccessRulePtrType) ToSharedConfigAllowIpAccessRulePtrOutput() SharedConfigAllowIpAccessRulePtrOutput {
	return i.ToSharedConfigAllowIpAccessRulePtrOutputWithContext(context.Background())
}

func (i *sharedConfigAllowIpAccessRulePtrType) ToSharedConfigAllowIpAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigAllowIpAccessRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigAllowIpAccessRulePtrOutput)
}

type SharedConfigAllowIpAccessRuleOutput struct{ *pulumi.OutputState }

func (SharedConfigAllowIpAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigAllowIpAccessRule)(nil)).Elem()
}

func (o SharedConfigAllowIpAccessRuleOutput) ToSharedConfigAllowIpAccessRuleOutput() SharedConfigAllowIpAccessRuleOutput {
	return o
}

func (o SharedConfigAllowIpAccessRuleOutput) ToSharedConfigAllowIpAccessRuleOutputWithContext(ctx context.Context) SharedConfigAllowIpAccessRuleOutput {
	return o
}

func (o SharedConfigAllowIpAccessRuleOutput) ToSharedConfigAllowIpAccessRulePtrOutput() SharedConfigAllowIpAccessRulePtrOutput {
	return o.ToSharedConfigAllowIpAccessRulePtrOutputWithContext(context.Background())
}

func (o SharedConfigAllowIpAccessRuleOutput) ToSharedConfigAllowIpAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigAllowIpAccessRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedConfigAllowIpAccessRule) *SharedConfigAllowIpAccessRule {
		return &v
	}).(SharedConfigAllowIpAccessRulePtrOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigAllowIpAccessRuleOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedConfigAllowIpAccessRule) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type SharedConfigAllowIpAccessRulePtrOutput struct{ *pulumi.OutputState }

func (SharedConfigAllowIpAccessRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigAllowIpAccessRule)(nil)).Elem()
}

func (o SharedConfigAllowIpAccessRulePtrOutput) ToSharedConfigAllowIpAccessRulePtrOutput() SharedConfigAllowIpAccessRulePtrOutput {
	return o
}

func (o SharedConfigAllowIpAccessRulePtrOutput) ToSharedConfigAllowIpAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigAllowIpAccessRulePtrOutput {
	return o
}

func (o SharedConfigAllowIpAccessRulePtrOutput) Elem() SharedConfigAllowIpAccessRuleOutput {
	return o.ApplyT(func(v *SharedConfigAllowIpAccessRule) SharedConfigAllowIpAccessRule {
		if v != nil {
			return *v
		}
		var ret SharedConfigAllowIpAccessRule
		return ret
	}).(SharedConfigAllowIpAccessRuleOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigAllowIpAccessRulePtrOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SharedConfigAllowIpAccessRule) []string {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(pulumi.StringArrayOutput)
}

type SharedConfigAllowRefererAccessRule struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty *bool `pulumi:"allowEmpty"`
	// The content indicating the Referer whitelist.
	CommonType SharedConfigAllowRefererAccessRuleCommonType `pulumi:"commonType"`
}

// SharedConfigAllowRefererAccessRuleInput is an input type that accepts SharedConfigAllowRefererAccessRuleArgs and SharedConfigAllowRefererAccessRuleOutput values.
// You can construct a concrete instance of `SharedConfigAllowRefererAccessRuleInput` via:
//
//	SharedConfigAllowRefererAccessRuleArgs{...}
type SharedConfigAllowRefererAccessRuleInput interface {
	pulumi.Input

	ToSharedConfigAllowRefererAccessRuleOutput() SharedConfigAllowRefererAccessRuleOutput
	ToSharedConfigAllowRefererAccessRuleOutputWithContext(context.Context) SharedConfigAllowRefererAccessRuleOutput
}

type SharedConfigAllowRefererAccessRuleArgs struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty pulumi.BoolPtrInput `pulumi:"allowEmpty"`
	// The content indicating the Referer whitelist.
	CommonType SharedConfigAllowRefererAccessRuleCommonTypeInput `pulumi:"commonType"`
}

func (SharedConfigAllowRefererAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigAllowRefererAccessRule)(nil)).Elem()
}

func (i SharedConfigAllowRefererAccessRuleArgs) ToSharedConfigAllowRefererAccessRuleOutput() SharedConfigAllowRefererAccessRuleOutput {
	return i.ToSharedConfigAllowRefererAccessRuleOutputWithContext(context.Background())
}

func (i SharedConfigAllowRefererAccessRuleArgs) ToSharedConfigAllowRefererAccessRuleOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigAllowRefererAccessRuleOutput)
}

func (i SharedConfigAllowRefererAccessRuleArgs) ToSharedConfigAllowRefererAccessRulePtrOutput() SharedConfigAllowRefererAccessRulePtrOutput {
	return i.ToSharedConfigAllowRefererAccessRulePtrOutputWithContext(context.Background())
}

func (i SharedConfigAllowRefererAccessRuleArgs) ToSharedConfigAllowRefererAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigAllowRefererAccessRuleOutput).ToSharedConfigAllowRefererAccessRulePtrOutputWithContext(ctx)
}

// SharedConfigAllowRefererAccessRulePtrInput is an input type that accepts SharedConfigAllowRefererAccessRuleArgs, SharedConfigAllowRefererAccessRulePtr and SharedConfigAllowRefererAccessRulePtrOutput values.
// You can construct a concrete instance of `SharedConfigAllowRefererAccessRulePtrInput` via:
//
//	        SharedConfigAllowRefererAccessRuleArgs{...}
//
//	or:
//
//	        nil
type SharedConfigAllowRefererAccessRulePtrInput interface {
	pulumi.Input

	ToSharedConfigAllowRefererAccessRulePtrOutput() SharedConfigAllowRefererAccessRulePtrOutput
	ToSharedConfigAllowRefererAccessRulePtrOutputWithContext(context.Context) SharedConfigAllowRefererAccessRulePtrOutput
}

type sharedConfigAllowRefererAccessRulePtrType SharedConfigAllowRefererAccessRuleArgs

func SharedConfigAllowRefererAccessRulePtr(v *SharedConfigAllowRefererAccessRuleArgs) SharedConfigAllowRefererAccessRulePtrInput {
	return (*sharedConfigAllowRefererAccessRulePtrType)(v)
}

func (*sharedConfigAllowRefererAccessRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigAllowRefererAccessRule)(nil)).Elem()
}

func (i *sharedConfigAllowRefererAccessRulePtrType) ToSharedConfigAllowRefererAccessRulePtrOutput() SharedConfigAllowRefererAccessRulePtrOutput {
	return i.ToSharedConfigAllowRefererAccessRulePtrOutputWithContext(context.Background())
}

func (i *sharedConfigAllowRefererAccessRulePtrType) ToSharedConfigAllowRefererAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigAllowRefererAccessRulePtrOutput)
}

type SharedConfigAllowRefererAccessRuleOutput struct{ *pulumi.OutputState }

func (SharedConfigAllowRefererAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigAllowRefererAccessRule)(nil)).Elem()
}

func (o SharedConfigAllowRefererAccessRuleOutput) ToSharedConfigAllowRefererAccessRuleOutput() SharedConfigAllowRefererAccessRuleOutput {
	return o
}

func (o SharedConfigAllowRefererAccessRuleOutput) ToSharedConfigAllowRefererAccessRuleOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRuleOutput {
	return o
}

func (o SharedConfigAllowRefererAccessRuleOutput) ToSharedConfigAllowRefererAccessRulePtrOutput() SharedConfigAllowRefererAccessRulePtrOutput {
	return o.ToSharedConfigAllowRefererAccessRulePtrOutputWithContext(context.Background())
}

func (o SharedConfigAllowRefererAccessRuleOutput) ToSharedConfigAllowRefererAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedConfigAllowRefererAccessRule) *SharedConfigAllowRefererAccessRule {
		return &v
	}).(SharedConfigAllowRefererAccessRulePtrOutput)
}

// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
func (o SharedConfigAllowRefererAccessRuleOutput) AllowEmpty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SharedConfigAllowRefererAccessRule) *bool { return v.AllowEmpty }).(pulumi.BoolPtrOutput)
}

// The content indicating the Referer whitelist.
func (o SharedConfigAllowRefererAccessRuleOutput) CommonType() SharedConfigAllowRefererAccessRuleCommonTypeOutput {
	return o.ApplyT(func(v SharedConfigAllowRefererAccessRule) SharedConfigAllowRefererAccessRuleCommonType {
		return v.CommonType
	}).(SharedConfigAllowRefererAccessRuleCommonTypeOutput)
}

type SharedConfigAllowRefererAccessRulePtrOutput struct{ *pulumi.OutputState }

func (SharedConfigAllowRefererAccessRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigAllowRefererAccessRule)(nil)).Elem()
}

func (o SharedConfigAllowRefererAccessRulePtrOutput) ToSharedConfigAllowRefererAccessRulePtrOutput() SharedConfigAllowRefererAccessRulePtrOutput {
	return o
}

func (o SharedConfigAllowRefererAccessRulePtrOutput) ToSharedConfigAllowRefererAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRulePtrOutput {
	return o
}

func (o SharedConfigAllowRefererAccessRulePtrOutput) Elem() SharedConfigAllowRefererAccessRuleOutput {
	return o.ApplyT(func(v *SharedConfigAllowRefererAccessRule) SharedConfigAllowRefererAccessRule {
		if v != nil {
			return *v
		}
		var ret SharedConfigAllowRefererAccessRule
		return ret
	}).(SharedConfigAllowRefererAccessRuleOutput)
}

// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
func (o SharedConfigAllowRefererAccessRulePtrOutput) AllowEmpty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SharedConfigAllowRefererAccessRule) *bool {
		if v == nil {
			return nil
		}
		return v.AllowEmpty
	}).(pulumi.BoolPtrOutput)
}

// The content indicating the Referer whitelist.
func (o SharedConfigAllowRefererAccessRulePtrOutput) CommonType() SharedConfigAllowRefererAccessRuleCommonTypePtrOutput {
	return o.ApplyT(func(v *SharedConfigAllowRefererAccessRule) *SharedConfigAllowRefererAccessRuleCommonType {
		if v == nil {
			return nil
		}
		return &v.CommonType
	}).(SharedConfigAllowRefererAccessRuleCommonTypePtrOutput)
}

type SharedConfigAllowRefererAccessRuleCommonType struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// SharedConfigAllowRefererAccessRuleCommonTypeInput is an input type that accepts SharedConfigAllowRefererAccessRuleCommonTypeArgs and SharedConfigAllowRefererAccessRuleCommonTypeOutput values.
// You can construct a concrete instance of `SharedConfigAllowRefererAccessRuleCommonTypeInput` via:
//
//	SharedConfigAllowRefererAccessRuleCommonTypeArgs{...}
type SharedConfigAllowRefererAccessRuleCommonTypeInput interface {
	pulumi.Input

	ToSharedConfigAllowRefererAccessRuleCommonTypeOutput() SharedConfigAllowRefererAccessRuleCommonTypeOutput
	ToSharedConfigAllowRefererAccessRuleCommonTypeOutputWithContext(context.Context) SharedConfigAllowRefererAccessRuleCommonTypeOutput
}

type SharedConfigAllowRefererAccessRuleCommonTypeArgs struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (SharedConfigAllowRefererAccessRuleCommonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (i SharedConfigAllowRefererAccessRuleCommonTypeArgs) ToSharedConfigAllowRefererAccessRuleCommonTypeOutput() SharedConfigAllowRefererAccessRuleCommonTypeOutput {
	return i.ToSharedConfigAllowRefererAccessRuleCommonTypeOutputWithContext(context.Background())
}

func (i SharedConfigAllowRefererAccessRuleCommonTypeArgs) ToSharedConfigAllowRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRuleCommonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigAllowRefererAccessRuleCommonTypeOutput)
}

func (i SharedConfigAllowRefererAccessRuleCommonTypeArgs) ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutput() SharedConfigAllowRefererAccessRuleCommonTypePtrOutput {
	return i.ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutputWithContext(context.Background())
}

func (i SharedConfigAllowRefererAccessRuleCommonTypeArgs) ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRuleCommonTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigAllowRefererAccessRuleCommonTypeOutput).ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutputWithContext(ctx)
}

// SharedConfigAllowRefererAccessRuleCommonTypePtrInput is an input type that accepts SharedConfigAllowRefererAccessRuleCommonTypeArgs, SharedConfigAllowRefererAccessRuleCommonTypePtr and SharedConfigAllowRefererAccessRuleCommonTypePtrOutput values.
// You can construct a concrete instance of `SharedConfigAllowRefererAccessRuleCommonTypePtrInput` via:
//
//	        SharedConfigAllowRefererAccessRuleCommonTypeArgs{...}
//
//	or:
//
//	        nil
type SharedConfigAllowRefererAccessRuleCommonTypePtrInput interface {
	pulumi.Input

	ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutput() SharedConfigAllowRefererAccessRuleCommonTypePtrOutput
	ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutputWithContext(context.Context) SharedConfigAllowRefererAccessRuleCommonTypePtrOutput
}

type sharedConfigAllowRefererAccessRuleCommonTypePtrType SharedConfigAllowRefererAccessRuleCommonTypeArgs

func SharedConfigAllowRefererAccessRuleCommonTypePtr(v *SharedConfigAllowRefererAccessRuleCommonTypeArgs) SharedConfigAllowRefererAccessRuleCommonTypePtrInput {
	return (*sharedConfigAllowRefererAccessRuleCommonTypePtrType)(v)
}

func (*sharedConfigAllowRefererAccessRuleCommonTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (i *sharedConfigAllowRefererAccessRuleCommonTypePtrType) ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutput() SharedConfigAllowRefererAccessRuleCommonTypePtrOutput {
	return i.ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutputWithContext(context.Background())
}

func (i *sharedConfigAllowRefererAccessRuleCommonTypePtrType) ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRuleCommonTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigAllowRefererAccessRuleCommonTypePtrOutput)
}

type SharedConfigAllowRefererAccessRuleCommonTypeOutput struct{ *pulumi.OutputState }

func (SharedConfigAllowRefererAccessRuleCommonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (o SharedConfigAllowRefererAccessRuleCommonTypeOutput) ToSharedConfigAllowRefererAccessRuleCommonTypeOutput() SharedConfigAllowRefererAccessRuleCommonTypeOutput {
	return o
}

func (o SharedConfigAllowRefererAccessRuleCommonTypeOutput) ToSharedConfigAllowRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRuleCommonTypeOutput {
	return o
}

func (o SharedConfigAllowRefererAccessRuleCommonTypeOutput) ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutput() SharedConfigAllowRefererAccessRuleCommonTypePtrOutput {
	return o.ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutputWithContext(context.Background())
}

func (o SharedConfigAllowRefererAccessRuleCommonTypeOutput) ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRuleCommonTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedConfigAllowRefererAccessRuleCommonType) *SharedConfigAllowRefererAccessRuleCommonType {
		return &v
	}).(SharedConfigAllowRefererAccessRuleCommonTypePtrOutput)
}

// This list is case-sensitive when matching requests. Default is true.
func (o SharedConfigAllowRefererAccessRuleCommonTypeOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SharedConfigAllowRefererAccessRuleCommonType) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigAllowRefererAccessRuleCommonTypeOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedConfigAllowRefererAccessRuleCommonType) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type SharedConfigAllowRefererAccessRuleCommonTypePtrOutput struct{ *pulumi.OutputState }

func (SharedConfigAllowRefererAccessRuleCommonTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (o SharedConfigAllowRefererAccessRuleCommonTypePtrOutput) ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutput() SharedConfigAllowRefererAccessRuleCommonTypePtrOutput {
	return o
}

func (o SharedConfigAllowRefererAccessRuleCommonTypePtrOutput) ToSharedConfigAllowRefererAccessRuleCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigAllowRefererAccessRuleCommonTypePtrOutput {
	return o
}

func (o SharedConfigAllowRefererAccessRuleCommonTypePtrOutput) Elem() SharedConfigAllowRefererAccessRuleCommonTypeOutput {
	return o.ApplyT(func(v *SharedConfigAllowRefererAccessRuleCommonType) SharedConfigAllowRefererAccessRuleCommonType {
		if v != nil {
			return *v
		}
		var ret SharedConfigAllowRefererAccessRuleCommonType
		return ret
	}).(SharedConfigAllowRefererAccessRuleCommonTypeOutput)
}

// This list is case-sensitive when matching requests. Default is true.
func (o SharedConfigAllowRefererAccessRuleCommonTypePtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SharedConfigAllowRefererAccessRuleCommonType) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigAllowRefererAccessRuleCommonTypePtrOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SharedConfigAllowRefererAccessRuleCommonType) []string {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(pulumi.StringArrayOutput)
}

type SharedConfigCommonMatchList struct {
	// The content indicating the Referer blacklist.
	CommonType SharedConfigCommonMatchListCommonType `pulumi:"commonType"`
}

// SharedConfigCommonMatchListInput is an input type that accepts SharedConfigCommonMatchListArgs and SharedConfigCommonMatchListOutput values.
// You can construct a concrete instance of `SharedConfigCommonMatchListInput` via:
//
//	SharedConfigCommonMatchListArgs{...}
type SharedConfigCommonMatchListInput interface {
	pulumi.Input

	ToSharedConfigCommonMatchListOutput() SharedConfigCommonMatchListOutput
	ToSharedConfigCommonMatchListOutputWithContext(context.Context) SharedConfigCommonMatchListOutput
}

type SharedConfigCommonMatchListArgs struct {
	// The content indicating the Referer blacklist.
	CommonType SharedConfigCommonMatchListCommonTypeInput `pulumi:"commonType"`
}

func (SharedConfigCommonMatchListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigCommonMatchList)(nil)).Elem()
}

func (i SharedConfigCommonMatchListArgs) ToSharedConfigCommonMatchListOutput() SharedConfigCommonMatchListOutput {
	return i.ToSharedConfigCommonMatchListOutputWithContext(context.Background())
}

func (i SharedConfigCommonMatchListArgs) ToSharedConfigCommonMatchListOutputWithContext(ctx context.Context) SharedConfigCommonMatchListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigCommonMatchListOutput)
}

func (i SharedConfigCommonMatchListArgs) ToSharedConfigCommonMatchListPtrOutput() SharedConfigCommonMatchListPtrOutput {
	return i.ToSharedConfigCommonMatchListPtrOutputWithContext(context.Background())
}

func (i SharedConfigCommonMatchListArgs) ToSharedConfigCommonMatchListPtrOutputWithContext(ctx context.Context) SharedConfigCommonMatchListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigCommonMatchListOutput).ToSharedConfigCommonMatchListPtrOutputWithContext(ctx)
}

// SharedConfigCommonMatchListPtrInput is an input type that accepts SharedConfigCommonMatchListArgs, SharedConfigCommonMatchListPtr and SharedConfigCommonMatchListPtrOutput values.
// You can construct a concrete instance of `SharedConfigCommonMatchListPtrInput` via:
//
//	        SharedConfigCommonMatchListArgs{...}
//
//	or:
//
//	        nil
type SharedConfigCommonMatchListPtrInput interface {
	pulumi.Input

	ToSharedConfigCommonMatchListPtrOutput() SharedConfigCommonMatchListPtrOutput
	ToSharedConfigCommonMatchListPtrOutputWithContext(context.Context) SharedConfigCommonMatchListPtrOutput
}

type sharedConfigCommonMatchListPtrType SharedConfigCommonMatchListArgs

func SharedConfigCommonMatchListPtr(v *SharedConfigCommonMatchListArgs) SharedConfigCommonMatchListPtrInput {
	return (*sharedConfigCommonMatchListPtrType)(v)
}

func (*sharedConfigCommonMatchListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigCommonMatchList)(nil)).Elem()
}

func (i *sharedConfigCommonMatchListPtrType) ToSharedConfigCommonMatchListPtrOutput() SharedConfigCommonMatchListPtrOutput {
	return i.ToSharedConfigCommonMatchListPtrOutputWithContext(context.Background())
}

func (i *sharedConfigCommonMatchListPtrType) ToSharedConfigCommonMatchListPtrOutputWithContext(ctx context.Context) SharedConfigCommonMatchListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigCommonMatchListPtrOutput)
}

type SharedConfigCommonMatchListOutput struct{ *pulumi.OutputState }

func (SharedConfigCommonMatchListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigCommonMatchList)(nil)).Elem()
}

func (o SharedConfigCommonMatchListOutput) ToSharedConfigCommonMatchListOutput() SharedConfigCommonMatchListOutput {
	return o
}

func (o SharedConfigCommonMatchListOutput) ToSharedConfigCommonMatchListOutputWithContext(ctx context.Context) SharedConfigCommonMatchListOutput {
	return o
}

func (o SharedConfigCommonMatchListOutput) ToSharedConfigCommonMatchListPtrOutput() SharedConfigCommonMatchListPtrOutput {
	return o.ToSharedConfigCommonMatchListPtrOutputWithContext(context.Background())
}

func (o SharedConfigCommonMatchListOutput) ToSharedConfigCommonMatchListPtrOutputWithContext(ctx context.Context) SharedConfigCommonMatchListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedConfigCommonMatchList) *SharedConfigCommonMatchList {
		return &v
	}).(SharedConfigCommonMatchListPtrOutput)
}

// The content indicating the Referer blacklist.
func (o SharedConfigCommonMatchListOutput) CommonType() SharedConfigCommonMatchListCommonTypeOutput {
	return o.ApplyT(func(v SharedConfigCommonMatchList) SharedConfigCommonMatchListCommonType { return v.CommonType }).(SharedConfigCommonMatchListCommonTypeOutput)
}

type SharedConfigCommonMatchListPtrOutput struct{ *pulumi.OutputState }

func (SharedConfigCommonMatchListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigCommonMatchList)(nil)).Elem()
}

func (o SharedConfigCommonMatchListPtrOutput) ToSharedConfigCommonMatchListPtrOutput() SharedConfigCommonMatchListPtrOutput {
	return o
}

func (o SharedConfigCommonMatchListPtrOutput) ToSharedConfigCommonMatchListPtrOutputWithContext(ctx context.Context) SharedConfigCommonMatchListPtrOutput {
	return o
}

func (o SharedConfigCommonMatchListPtrOutput) Elem() SharedConfigCommonMatchListOutput {
	return o.ApplyT(func(v *SharedConfigCommonMatchList) SharedConfigCommonMatchList {
		if v != nil {
			return *v
		}
		var ret SharedConfigCommonMatchList
		return ret
	}).(SharedConfigCommonMatchListOutput)
}

// The content indicating the Referer blacklist.
func (o SharedConfigCommonMatchListPtrOutput) CommonType() SharedConfigCommonMatchListCommonTypePtrOutput {
	return o.ApplyT(func(v *SharedConfigCommonMatchList) *SharedConfigCommonMatchListCommonType {
		if v == nil {
			return nil
		}
		return &v.CommonType
	}).(SharedConfigCommonMatchListCommonTypePtrOutput)
}

type SharedConfigCommonMatchListCommonType struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// SharedConfigCommonMatchListCommonTypeInput is an input type that accepts SharedConfigCommonMatchListCommonTypeArgs and SharedConfigCommonMatchListCommonTypeOutput values.
// You can construct a concrete instance of `SharedConfigCommonMatchListCommonTypeInput` via:
//
//	SharedConfigCommonMatchListCommonTypeArgs{...}
type SharedConfigCommonMatchListCommonTypeInput interface {
	pulumi.Input

	ToSharedConfigCommonMatchListCommonTypeOutput() SharedConfigCommonMatchListCommonTypeOutput
	ToSharedConfigCommonMatchListCommonTypeOutputWithContext(context.Context) SharedConfigCommonMatchListCommonTypeOutput
}

type SharedConfigCommonMatchListCommonTypeArgs struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (SharedConfigCommonMatchListCommonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigCommonMatchListCommonType)(nil)).Elem()
}

func (i SharedConfigCommonMatchListCommonTypeArgs) ToSharedConfigCommonMatchListCommonTypeOutput() SharedConfigCommonMatchListCommonTypeOutput {
	return i.ToSharedConfigCommonMatchListCommonTypeOutputWithContext(context.Background())
}

func (i SharedConfigCommonMatchListCommonTypeArgs) ToSharedConfigCommonMatchListCommonTypeOutputWithContext(ctx context.Context) SharedConfigCommonMatchListCommonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigCommonMatchListCommonTypeOutput)
}

func (i SharedConfigCommonMatchListCommonTypeArgs) ToSharedConfigCommonMatchListCommonTypePtrOutput() SharedConfigCommonMatchListCommonTypePtrOutput {
	return i.ToSharedConfigCommonMatchListCommonTypePtrOutputWithContext(context.Background())
}

func (i SharedConfigCommonMatchListCommonTypeArgs) ToSharedConfigCommonMatchListCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigCommonMatchListCommonTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigCommonMatchListCommonTypeOutput).ToSharedConfigCommonMatchListCommonTypePtrOutputWithContext(ctx)
}

// SharedConfigCommonMatchListCommonTypePtrInput is an input type that accepts SharedConfigCommonMatchListCommonTypeArgs, SharedConfigCommonMatchListCommonTypePtr and SharedConfigCommonMatchListCommonTypePtrOutput values.
// You can construct a concrete instance of `SharedConfigCommonMatchListCommonTypePtrInput` via:
//
//	        SharedConfigCommonMatchListCommonTypeArgs{...}
//
//	or:
//
//	        nil
type SharedConfigCommonMatchListCommonTypePtrInput interface {
	pulumi.Input

	ToSharedConfigCommonMatchListCommonTypePtrOutput() SharedConfigCommonMatchListCommonTypePtrOutput
	ToSharedConfigCommonMatchListCommonTypePtrOutputWithContext(context.Context) SharedConfigCommonMatchListCommonTypePtrOutput
}

type sharedConfigCommonMatchListCommonTypePtrType SharedConfigCommonMatchListCommonTypeArgs

func SharedConfigCommonMatchListCommonTypePtr(v *SharedConfigCommonMatchListCommonTypeArgs) SharedConfigCommonMatchListCommonTypePtrInput {
	return (*sharedConfigCommonMatchListCommonTypePtrType)(v)
}

func (*sharedConfigCommonMatchListCommonTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigCommonMatchListCommonType)(nil)).Elem()
}

func (i *sharedConfigCommonMatchListCommonTypePtrType) ToSharedConfigCommonMatchListCommonTypePtrOutput() SharedConfigCommonMatchListCommonTypePtrOutput {
	return i.ToSharedConfigCommonMatchListCommonTypePtrOutputWithContext(context.Background())
}

func (i *sharedConfigCommonMatchListCommonTypePtrType) ToSharedConfigCommonMatchListCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigCommonMatchListCommonTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigCommonMatchListCommonTypePtrOutput)
}

type SharedConfigCommonMatchListCommonTypeOutput struct{ *pulumi.OutputState }

func (SharedConfigCommonMatchListCommonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigCommonMatchListCommonType)(nil)).Elem()
}

func (o SharedConfigCommonMatchListCommonTypeOutput) ToSharedConfigCommonMatchListCommonTypeOutput() SharedConfigCommonMatchListCommonTypeOutput {
	return o
}

func (o SharedConfigCommonMatchListCommonTypeOutput) ToSharedConfigCommonMatchListCommonTypeOutputWithContext(ctx context.Context) SharedConfigCommonMatchListCommonTypeOutput {
	return o
}

func (o SharedConfigCommonMatchListCommonTypeOutput) ToSharedConfigCommonMatchListCommonTypePtrOutput() SharedConfigCommonMatchListCommonTypePtrOutput {
	return o.ToSharedConfigCommonMatchListCommonTypePtrOutputWithContext(context.Background())
}

func (o SharedConfigCommonMatchListCommonTypeOutput) ToSharedConfigCommonMatchListCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigCommonMatchListCommonTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedConfigCommonMatchListCommonType) *SharedConfigCommonMatchListCommonType {
		return &v
	}).(SharedConfigCommonMatchListCommonTypePtrOutput)
}

// This list is case-sensitive when matching requests. Default is true.
func (o SharedConfigCommonMatchListCommonTypeOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SharedConfigCommonMatchListCommonType) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigCommonMatchListCommonTypeOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedConfigCommonMatchListCommonType) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type SharedConfigCommonMatchListCommonTypePtrOutput struct{ *pulumi.OutputState }

func (SharedConfigCommonMatchListCommonTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigCommonMatchListCommonType)(nil)).Elem()
}

func (o SharedConfigCommonMatchListCommonTypePtrOutput) ToSharedConfigCommonMatchListCommonTypePtrOutput() SharedConfigCommonMatchListCommonTypePtrOutput {
	return o
}

func (o SharedConfigCommonMatchListCommonTypePtrOutput) ToSharedConfigCommonMatchListCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigCommonMatchListCommonTypePtrOutput {
	return o
}

func (o SharedConfigCommonMatchListCommonTypePtrOutput) Elem() SharedConfigCommonMatchListCommonTypeOutput {
	return o.ApplyT(func(v *SharedConfigCommonMatchListCommonType) SharedConfigCommonMatchListCommonType {
		if v != nil {
			return *v
		}
		var ret SharedConfigCommonMatchListCommonType
		return ret
	}).(SharedConfigCommonMatchListCommonTypeOutput)
}

// This list is case-sensitive when matching requests. Default is true.
func (o SharedConfigCommonMatchListCommonTypePtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SharedConfigCommonMatchListCommonType) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigCommonMatchListCommonTypePtrOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SharedConfigCommonMatchListCommonType) []string {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(pulumi.StringArrayOutput)
}

type SharedConfigDenyIpAccessRule struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// SharedConfigDenyIpAccessRuleInput is an input type that accepts SharedConfigDenyIpAccessRuleArgs and SharedConfigDenyIpAccessRuleOutput values.
// You can construct a concrete instance of `SharedConfigDenyIpAccessRuleInput` via:
//
//	SharedConfigDenyIpAccessRuleArgs{...}
type SharedConfigDenyIpAccessRuleInput interface {
	pulumi.Input

	ToSharedConfigDenyIpAccessRuleOutput() SharedConfigDenyIpAccessRuleOutput
	ToSharedConfigDenyIpAccessRuleOutputWithContext(context.Context) SharedConfigDenyIpAccessRuleOutput
}

type SharedConfigDenyIpAccessRuleArgs struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (SharedConfigDenyIpAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigDenyIpAccessRule)(nil)).Elem()
}

func (i SharedConfigDenyIpAccessRuleArgs) ToSharedConfigDenyIpAccessRuleOutput() SharedConfigDenyIpAccessRuleOutput {
	return i.ToSharedConfigDenyIpAccessRuleOutputWithContext(context.Background())
}

func (i SharedConfigDenyIpAccessRuleArgs) ToSharedConfigDenyIpAccessRuleOutputWithContext(ctx context.Context) SharedConfigDenyIpAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigDenyIpAccessRuleOutput)
}

func (i SharedConfigDenyIpAccessRuleArgs) ToSharedConfigDenyIpAccessRulePtrOutput() SharedConfigDenyIpAccessRulePtrOutput {
	return i.ToSharedConfigDenyIpAccessRulePtrOutputWithContext(context.Background())
}

func (i SharedConfigDenyIpAccessRuleArgs) ToSharedConfigDenyIpAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigDenyIpAccessRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigDenyIpAccessRuleOutput).ToSharedConfigDenyIpAccessRulePtrOutputWithContext(ctx)
}

// SharedConfigDenyIpAccessRulePtrInput is an input type that accepts SharedConfigDenyIpAccessRuleArgs, SharedConfigDenyIpAccessRulePtr and SharedConfigDenyIpAccessRulePtrOutput values.
// You can construct a concrete instance of `SharedConfigDenyIpAccessRulePtrInput` via:
//
//	        SharedConfigDenyIpAccessRuleArgs{...}
//
//	or:
//
//	        nil
type SharedConfigDenyIpAccessRulePtrInput interface {
	pulumi.Input

	ToSharedConfigDenyIpAccessRulePtrOutput() SharedConfigDenyIpAccessRulePtrOutput
	ToSharedConfigDenyIpAccessRulePtrOutputWithContext(context.Context) SharedConfigDenyIpAccessRulePtrOutput
}

type sharedConfigDenyIpAccessRulePtrType SharedConfigDenyIpAccessRuleArgs

func SharedConfigDenyIpAccessRulePtr(v *SharedConfigDenyIpAccessRuleArgs) SharedConfigDenyIpAccessRulePtrInput {
	return (*sharedConfigDenyIpAccessRulePtrType)(v)
}

func (*sharedConfigDenyIpAccessRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigDenyIpAccessRule)(nil)).Elem()
}

func (i *sharedConfigDenyIpAccessRulePtrType) ToSharedConfigDenyIpAccessRulePtrOutput() SharedConfigDenyIpAccessRulePtrOutput {
	return i.ToSharedConfigDenyIpAccessRulePtrOutputWithContext(context.Background())
}

func (i *sharedConfigDenyIpAccessRulePtrType) ToSharedConfigDenyIpAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigDenyIpAccessRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigDenyIpAccessRulePtrOutput)
}

type SharedConfigDenyIpAccessRuleOutput struct{ *pulumi.OutputState }

func (SharedConfigDenyIpAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigDenyIpAccessRule)(nil)).Elem()
}

func (o SharedConfigDenyIpAccessRuleOutput) ToSharedConfigDenyIpAccessRuleOutput() SharedConfigDenyIpAccessRuleOutput {
	return o
}

func (o SharedConfigDenyIpAccessRuleOutput) ToSharedConfigDenyIpAccessRuleOutputWithContext(ctx context.Context) SharedConfigDenyIpAccessRuleOutput {
	return o
}

func (o SharedConfigDenyIpAccessRuleOutput) ToSharedConfigDenyIpAccessRulePtrOutput() SharedConfigDenyIpAccessRulePtrOutput {
	return o.ToSharedConfigDenyIpAccessRulePtrOutputWithContext(context.Background())
}

func (o SharedConfigDenyIpAccessRuleOutput) ToSharedConfigDenyIpAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigDenyIpAccessRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedConfigDenyIpAccessRule) *SharedConfigDenyIpAccessRule {
		return &v
	}).(SharedConfigDenyIpAccessRulePtrOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigDenyIpAccessRuleOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedConfigDenyIpAccessRule) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type SharedConfigDenyIpAccessRulePtrOutput struct{ *pulumi.OutputState }

func (SharedConfigDenyIpAccessRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigDenyIpAccessRule)(nil)).Elem()
}

func (o SharedConfigDenyIpAccessRulePtrOutput) ToSharedConfigDenyIpAccessRulePtrOutput() SharedConfigDenyIpAccessRulePtrOutput {
	return o
}

func (o SharedConfigDenyIpAccessRulePtrOutput) ToSharedConfigDenyIpAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigDenyIpAccessRulePtrOutput {
	return o
}

func (o SharedConfigDenyIpAccessRulePtrOutput) Elem() SharedConfigDenyIpAccessRuleOutput {
	return o.ApplyT(func(v *SharedConfigDenyIpAccessRule) SharedConfigDenyIpAccessRule {
		if v != nil {
			return *v
		}
		var ret SharedConfigDenyIpAccessRule
		return ret
	}).(SharedConfigDenyIpAccessRuleOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigDenyIpAccessRulePtrOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SharedConfigDenyIpAccessRule) []string {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(pulumi.StringArrayOutput)
}

type SharedConfigDenyRefererAccessRule struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty *bool `pulumi:"allowEmpty"`
	// The content indicating the Referer blacklist.
	CommonType SharedConfigDenyRefererAccessRuleCommonType `pulumi:"commonType"`
}

// SharedConfigDenyRefererAccessRuleInput is an input type that accepts SharedConfigDenyRefererAccessRuleArgs and SharedConfigDenyRefererAccessRuleOutput values.
// You can construct a concrete instance of `SharedConfigDenyRefererAccessRuleInput` via:
//
//	SharedConfigDenyRefererAccessRuleArgs{...}
type SharedConfigDenyRefererAccessRuleInput interface {
	pulumi.Input

	ToSharedConfigDenyRefererAccessRuleOutput() SharedConfigDenyRefererAccessRuleOutput
	ToSharedConfigDenyRefererAccessRuleOutputWithContext(context.Context) SharedConfigDenyRefererAccessRuleOutput
}

type SharedConfigDenyRefererAccessRuleArgs struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty pulumi.BoolPtrInput `pulumi:"allowEmpty"`
	// The content indicating the Referer blacklist.
	CommonType SharedConfigDenyRefererAccessRuleCommonTypeInput `pulumi:"commonType"`
}

func (SharedConfigDenyRefererAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigDenyRefererAccessRule)(nil)).Elem()
}

func (i SharedConfigDenyRefererAccessRuleArgs) ToSharedConfigDenyRefererAccessRuleOutput() SharedConfigDenyRefererAccessRuleOutput {
	return i.ToSharedConfigDenyRefererAccessRuleOutputWithContext(context.Background())
}

func (i SharedConfigDenyRefererAccessRuleArgs) ToSharedConfigDenyRefererAccessRuleOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigDenyRefererAccessRuleOutput)
}

func (i SharedConfigDenyRefererAccessRuleArgs) ToSharedConfigDenyRefererAccessRulePtrOutput() SharedConfigDenyRefererAccessRulePtrOutput {
	return i.ToSharedConfigDenyRefererAccessRulePtrOutputWithContext(context.Background())
}

func (i SharedConfigDenyRefererAccessRuleArgs) ToSharedConfigDenyRefererAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigDenyRefererAccessRuleOutput).ToSharedConfigDenyRefererAccessRulePtrOutputWithContext(ctx)
}

// SharedConfigDenyRefererAccessRulePtrInput is an input type that accepts SharedConfigDenyRefererAccessRuleArgs, SharedConfigDenyRefererAccessRulePtr and SharedConfigDenyRefererAccessRulePtrOutput values.
// You can construct a concrete instance of `SharedConfigDenyRefererAccessRulePtrInput` via:
//
//	        SharedConfigDenyRefererAccessRuleArgs{...}
//
//	or:
//
//	        nil
type SharedConfigDenyRefererAccessRulePtrInput interface {
	pulumi.Input

	ToSharedConfigDenyRefererAccessRulePtrOutput() SharedConfigDenyRefererAccessRulePtrOutput
	ToSharedConfigDenyRefererAccessRulePtrOutputWithContext(context.Context) SharedConfigDenyRefererAccessRulePtrOutput
}

type sharedConfigDenyRefererAccessRulePtrType SharedConfigDenyRefererAccessRuleArgs

func SharedConfigDenyRefererAccessRulePtr(v *SharedConfigDenyRefererAccessRuleArgs) SharedConfigDenyRefererAccessRulePtrInput {
	return (*sharedConfigDenyRefererAccessRulePtrType)(v)
}

func (*sharedConfigDenyRefererAccessRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigDenyRefererAccessRule)(nil)).Elem()
}

func (i *sharedConfigDenyRefererAccessRulePtrType) ToSharedConfigDenyRefererAccessRulePtrOutput() SharedConfigDenyRefererAccessRulePtrOutput {
	return i.ToSharedConfigDenyRefererAccessRulePtrOutputWithContext(context.Background())
}

func (i *sharedConfigDenyRefererAccessRulePtrType) ToSharedConfigDenyRefererAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigDenyRefererAccessRulePtrOutput)
}

type SharedConfigDenyRefererAccessRuleOutput struct{ *pulumi.OutputState }

func (SharedConfigDenyRefererAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigDenyRefererAccessRule)(nil)).Elem()
}

func (o SharedConfigDenyRefererAccessRuleOutput) ToSharedConfigDenyRefererAccessRuleOutput() SharedConfigDenyRefererAccessRuleOutput {
	return o
}

func (o SharedConfigDenyRefererAccessRuleOutput) ToSharedConfigDenyRefererAccessRuleOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRuleOutput {
	return o
}

func (o SharedConfigDenyRefererAccessRuleOutput) ToSharedConfigDenyRefererAccessRulePtrOutput() SharedConfigDenyRefererAccessRulePtrOutput {
	return o.ToSharedConfigDenyRefererAccessRulePtrOutputWithContext(context.Background())
}

func (o SharedConfigDenyRefererAccessRuleOutput) ToSharedConfigDenyRefererAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedConfigDenyRefererAccessRule) *SharedConfigDenyRefererAccessRule {
		return &v
	}).(SharedConfigDenyRefererAccessRulePtrOutput)
}

// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
func (o SharedConfigDenyRefererAccessRuleOutput) AllowEmpty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SharedConfigDenyRefererAccessRule) *bool { return v.AllowEmpty }).(pulumi.BoolPtrOutput)
}

// The content indicating the Referer blacklist.
func (o SharedConfigDenyRefererAccessRuleOutput) CommonType() SharedConfigDenyRefererAccessRuleCommonTypeOutput {
	return o.ApplyT(func(v SharedConfigDenyRefererAccessRule) SharedConfigDenyRefererAccessRuleCommonType {
		return v.CommonType
	}).(SharedConfigDenyRefererAccessRuleCommonTypeOutput)
}

type SharedConfigDenyRefererAccessRulePtrOutput struct{ *pulumi.OutputState }

func (SharedConfigDenyRefererAccessRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigDenyRefererAccessRule)(nil)).Elem()
}

func (o SharedConfigDenyRefererAccessRulePtrOutput) ToSharedConfigDenyRefererAccessRulePtrOutput() SharedConfigDenyRefererAccessRulePtrOutput {
	return o
}

func (o SharedConfigDenyRefererAccessRulePtrOutput) ToSharedConfigDenyRefererAccessRulePtrOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRulePtrOutput {
	return o
}

func (o SharedConfigDenyRefererAccessRulePtrOutput) Elem() SharedConfigDenyRefererAccessRuleOutput {
	return o.ApplyT(func(v *SharedConfigDenyRefererAccessRule) SharedConfigDenyRefererAccessRule {
		if v != nil {
			return *v
		}
		var ret SharedConfigDenyRefererAccessRule
		return ret
	}).(SharedConfigDenyRefererAccessRuleOutput)
}

// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
func (o SharedConfigDenyRefererAccessRulePtrOutput) AllowEmpty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SharedConfigDenyRefererAccessRule) *bool {
		if v == nil {
			return nil
		}
		return v.AllowEmpty
	}).(pulumi.BoolPtrOutput)
}

// The content indicating the Referer blacklist.
func (o SharedConfigDenyRefererAccessRulePtrOutput) CommonType() SharedConfigDenyRefererAccessRuleCommonTypePtrOutput {
	return o.ApplyT(func(v *SharedConfigDenyRefererAccessRule) *SharedConfigDenyRefererAccessRuleCommonType {
		if v == nil {
			return nil
		}
		return &v.CommonType
	}).(SharedConfigDenyRefererAccessRuleCommonTypePtrOutput)
}

type SharedConfigDenyRefererAccessRuleCommonType struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// SharedConfigDenyRefererAccessRuleCommonTypeInput is an input type that accepts SharedConfigDenyRefererAccessRuleCommonTypeArgs and SharedConfigDenyRefererAccessRuleCommonTypeOutput values.
// You can construct a concrete instance of `SharedConfigDenyRefererAccessRuleCommonTypeInput` via:
//
//	SharedConfigDenyRefererAccessRuleCommonTypeArgs{...}
type SharedConfigDenyRefererAccessRuleCommonTypeInput interface {
	pulumi.Input

	ToSharedConfigDenyRefererAccessRuleCommonTypeOutput() SharedConfigDenyRefererAccessRuleCommonTypeOutput
	ToSharedConfigDenyRefererAccessRuleCommonTypeOutputWithContext(context.Context) SharedConfigDenyRefererAccessRuleCommonTypeOutput
}

type SharedConfigDenyRefererAccessRuleCommonTypeArgs struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (SharedConfigDenyRefererAccessRuleCommonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (i SharedConfigDenyRefererAccessRuleCommonTypeArgs) ToSharedConfigDenyRefererAccessRuleCommonTypeOutput() SharedConfigDenyRefererAccessRuleCommonTypeOutput {
	return i.ToSharedConfigDenyRefererAccessRuleCommonTypeOutputWithContext(context.Background())
}

func (i SharedConfigDenyRefererAccessRuleCommonTypeArgs) ToSharedConfigDenyRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRuleCommonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigDenyRefererAccessRuleCommonTypeOutput)
}

func (i SharedConfigDenyRefererAccessRuleCommonTypeArgs) ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutput() SharedConfigDenyRefererAccessRuleCommonTypePtrOutput {
	return i.ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutputWithContext(context.Background())
}

func (i SharedConfigDenyRefererAccessRuleCommonTypeArgs) ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRuleCommonTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigDenyRefererAccessRuleCommonTypeOutput).ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutputWithContext(ctx)
}

// SharedConfigDenyRefererAccessRuleCommonTypePtrInput is an input type that accepts SharedConfigDenyRefererAccessRuleCommonTypeArgs, SharedConfigDenyRefererAccessRuleCommonTypePtr and SharedConfigDenyRefererAccessRuleCommonTypePtrOutput values.
// You can construct a concrete instance of `SharedConfigDenyRefererAccessRuleCommonTypePtrInput` via:
//
//	        SharedConfigDenyRefererAccessRuleCommonTypeArgs{...}
//
//	or:
//
//	        nil
type SharedConfigDenyRefererAccessRuleCommonTypePtrInput interface {
	pulumi.Input

	ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutput() SharedConfigDenyRefererAccessRuleCommonTypePtrOutput
	ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutputWithContext(context.Context) SharedConfigDenyRefererAccessRuleCommonTypePtrOutput
}

type sharedConfigDenyRefererAccessRuleCommonTypePtrType SharedConfigDenyRefererAccessRuleCommonTypeArgs

func SharedConfigDenyRefererAccessRuleCommonTypePtr(v *SharedConfigDenyRefererAccessRuleCommonTypeArgs) SharedConfigDenyRefererAccessRuleCommonTypePtrInput {
	return (*sharedConfigDenyRefererAccessRuleCommonTypePtrType)(v)
}

func (*sharedConfigDenyRefererAccessRuleCommonTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (i *sharedConfigDenyRefererAccessRuleCommonTypePtrType) ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutput() SharedConfigDenyRefererAccessRuleCommonTypePtrOutput {
	return i.ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutputWithContext(context.Background())
}

func (i *sharedConfigDenyRefererAccessRuleCommonTypePtrType) ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRuleCommonTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigDenyRefererAccessRuleCommonTypePtrOutput)
}

type SharedConfigDenyRefererAccessRuleCommonTypeOutput struct{ *pulumi.OutputState }

func (SharedConfigDenyRefererAccessRuleCommonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (o SharedConfigDenyRefererAccessRuleCommonTypeOutput) ToSharedConfigDenyRefererAccessRuleCommonTypeOutput() SharedConfigDenyRefererAccessRuleCommonTypeOutput {
	return o
}

func (o SharedConfigDenyRefererAccessRuleCommonTypeOutput) ToSharedConfigDenyRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRuleCommonTypeOutput {
	return o
}

func (o SharedConfigDenyRefererAccessRuleCommonTypeOutput) ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutput() SharedConfigDenyRefererAccessRuleCommonTypePtrOutput {
	return o.ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutputWithContext(context.Background())
}

func (o SharedConfigDenyRefererAccessRuleCommonTypeOutput) ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRuleCommonTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedConfigDenyRefererAccessRuleCommonType) *SharedConfigDenyRefererAccessRuleCommonType {
		return &v
	}).(SharedConfigDenyRefererAccessRuleCommonTypePtrOutput)
}

// This list is case-sensitive when matching requests. Default is true.
func (o SharedConfigDenyRefererAccessRuleCommonTypeOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SharedConfigDenyRefererAccessRuleCommonType) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigDenyRefererAccessRuleCommonTypeOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedConfigDenyRefererAccessRuleCommonType) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type SharedConfigDenyRefererAccessRuleCommonTypePtrOutput struct{ *pulumi.OutputState }

func (SharedConfigDenyRefererAccessRuleCommonTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfigDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (o SharedConfigDenyRefererAccessRuleCommonTypePtrOutput) ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutput() SharedConfigDenyRefererAccessRuleCommonTypePtrOutput {
	return o
}

func (o SharedConfigDenyRefererAccessRuleCommonTypePtrOutput) ToSharedConfigDenyRefererAccessRuleCommonTypePtrOutputWithContext(ctx context.Context) SharedConfigDenyRefererAccessRuleCommonTypePtrOutput {
	return o
}

func (o SharedConfigDenyRefererAccessRuleCommonTypePtrOutput) Elem() SharedConfigDenyRefererAccessRuleCommonTypeOutput {
	return o.ApplyT(func(v *SharedConfigDenyRefererAccessRuleCommonType) SharedConfigDenyRefererAccessRuleCommonType {
		if v != nil {
			return *v
		}
		var ret SharedConfigDenyRefererAccessRuleCommonType
		return ret
	}).(SharedConfigDenyRefererAccessRuleCommonTypeOutput)
}

// This list is case-sensitive when matching requests. Default is true.
func (o SharedConfigDenyRefererAccessRuleCommonTypePtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SharedConfigDenyRefererAccessRuleCommonType) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigDenyRefererAccessRuleCommonTypePtrOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SharedConfigDenyRefererAccessRuleCommonType) []string {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(pulumi.StringArrayOutput)
}

type SharedConfigsConfigData struct {
	// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
	AllowIpAccessRules []SharedConfigsConfigDataAllowIpAccessRule `pulumi:"allowIpAccessRules"`
	// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
	AllowRefererAccessRules []SharedConfigsConfigDataAllowRefererAccessRule `pulumi:"allowRefererAccessRules"`
	// The configuration for a common list is represented by ConfigType common_match_list.
	CommonMatchLists []SharedConfigsConfigDataCommonMatchList `pulumi:"commonMatchLists"`
	// The name of the shared config.
	ConfigName string `pulumi:"configName"`
	// The type of the shared config.
	ConfigType string `pulumi:"configType"`
	// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
	DenyIpAccessRules []SharedConfigsConfigDataDenyIpAccessRule `pulumi:"denyIpAccessRules"`
	// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
	DenyRefererAccessRules []SharedConfigsConfigDataDenyRefererAccessRule `pulumi:"denyRefererAccessRules"`
	// The number of domains.
	DomainCount int `pulumi:"domainCount"`
	// The name of the project.
	ProjectName string `pulumi:"projectName"`
	// The update time of the shared config.
	UpdateTime int `pulumi:"updateTime"`
}

// SharedConfigsConfigDataInput is an input type that accepts SharedConfigsConfigDataArgs and SharedConfigsConfigDataOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataInput` via:
//
//	SharedConfigsConfigDataArgs{...}
type SharedConfigsConfigDataInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataOutput() SharedConfigsConfigDataOutput
	ToSharedConfigsConfigDataOutputWithContext(context.Context) SharedConfigsConfigDataOutput
}

type SharedConfigsConfigDataArgs struct {
	// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
	AllowIpAccessRules SharedConfigsConfigDataAllowIpAccessRuleArrayInput `pulumi:"allowIpAccessRules"`
	// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
	AllowRefererAccessRules SharedConfigsConfigDataAllowRefererAccessRuleArrayInput `pulumi:"allowRefererAccessRules"`
	// The configuration for a common list is represented by ConfigType common_match_list.
	CommonMatchLists SharedConfigsConfigDataCommonMatchListArrayInput `pulumi:"commonMatchLists"`
	// The name of the shared config.
	ConfigName pulumi.StringInput `pulumi:"configName"`
	// The type of the shared config.
	ConfigType pulumi.StringInput `pulumi:"configType"`
	// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
	DenyIpAccessRules SharedConfigsConfigDataDenyIpAccessRuleArrayInput `pulumi:"denyIpAccessRules"`
	// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
	DenyRefererAccessRules SharedConfigsConfigDataDenyRefererAccessRuleArrayInput `pulumi:"denyRefererAccessRules"`
	// The number of domains.
	DomainCount pulumi.IntInput `pulumi:"domainCount"`
	// The name of the project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The update time of the shared config.
	UpdateTime pulumi.IntInput `pulumi:"updateTime"`
}

func (SharedConfigsConfigDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigData)(nil)).Elem()
}

func (i SharedConfigsConfigDataArgs) ToSharedConfigsConfigDataOutput() SharedConfigsConfigDataOutput {
	return i.ToSharedConfigsConfigDataOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataArgs) ToSharedConfigsConfigDataOutputWithContext(ctx context.Context) SharedConfigsConfigDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataOutput)
}

// SharedConfigsConfigDataArrayInput is an input type that accepts SharedConfigsConfigDataArray and SharedConfigsConfigDataArrayOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataArrayInput` via:
//
//	SharedConfigsConfigDataArray{ SharedConfigsConfigDataArgs{...} }
type SharedConfigsConfigDataArrayInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataArrayOutput() SharedConfigsConfigDataArrayOutput
	ToSharedConfigsConfigDataArrayOutputWithContext(context.Context) SharedConfigsConfigDataArrayOutput
}

type SharedConfigsConfigDataArray []SharedConfigsConfigDataInput

func (SharedConfigsConfigDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigData)(nil)).Elem()
}

func (i SharedConfigsConfigDataArray) ToSharedConfigsConfigDataArrayOutput() SharedConfigsConfigDataArrayOutput {
	return i.ToSharedConfigsConfigDataArrayOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataArray) ToSharedConfigsConfigDataArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataArrayOutput)
}

type SharedConfigsConfigDataOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigData)(nil)).Elem()
}

func (o SharedConfigsConfigDataOutput) ToSharedConfigsConfigDataOutput() SharedConfigsConfigDataOutput {
	return o
}

func (o SharedConfigsConfigDataOutput) ToSharedConfigsConfigDataOutputWithContext(ctx context.Context) SharedConfigsConfigDataOutput {
	return o
}

// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
func (o SharedConfigsConfigDataOutput) AllowIpAccessRules() SharedConfigsConfigDataAllowIpAccessRuleArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigData) []SharedConfigsConfigDataAllowIpAccessRule {
		return v.AllowIpAccessRules
	}).(SharedConfigsConfigDataAllowIpAccessRuleArrayOutput)
}

// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
func (o SharedConfigsConfigDataOutput) AllowRefererAccessRules() SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigData) []SharedConfigsConfigDataAllowRefererAccessRule {
		return v.AllowRefererAccessRules
	}).(SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput)
}

// The configuration for a common list is represented by ConfigType common_match_list.
func (o SharedConfigsConfigDataOutput) CommonMatchLists() SharedConfigsConfigDataCommonMatchListArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigData) []SharedConfigsConfigDataCommonMatchList { return v.CommonMatchLists }).(SharedConfigsConfigDataCommonMatchListArrayOutput)
}

// The name of the shared config.
func (o SharedConfigsConfigDataOutput) ConfigName() pulumi.StringOutput {
	return o.ApplyT(func(v SharedConfigsConfigData) string { return v.ConfigName }).(pulumi.StringOutput)
}

// The type of the shared config.
func (o SharedConfigsConfigDataOutput) ConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v SharedConfigsConfigData) string { return v.ConfigType }).(pulumi.StringOutput)
}

// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
func (o SharedConfigsConfigDataOutput) DenyIpAccessRules() SharedConfigsConfigDataDenyIpAccessRuleArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigData) []SharedConfigsConfigDataDenyIpAccessRule { return v.DenyIpAccessRules }).(SharedConfigsConfigDataDenyIpAccessRuleArrayOutput)
}

// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
func (o SharedConfigsConfigDataOutput) DenyRefererAccessRules() SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigData) []SharedConfigsConfigDataDenyRefererAccessRule {
		return v.DenyRefererAccessRules
	}).(SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput)
}

// The number of domains.
func (o SharedConfigsConfigDataOutput) DomainCount() pulumi.IntOutput {
	return o.ApplyT(func(v SharedConfigsConfigData) int { return v.DomainCount }).(pulumi.IntOutput)
}

// The name of the project.
func (o SharedConfigsConfigDataOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v SharedConfigsConfigData) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The update time of the shared config.
func (o SharedConfigsConfigDataOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v SharedConfigsConfigData) int { return v.UpdateTime }).(pulumi.IntOutput)
}

type SharedConfigsConfigDataArrayOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigData)(nil)).Elem()
}

func (o SharedConfigsConfigDataArrayOutput) ToSharedConfigsConfigDataArrayOutput() SharedConfigsConfigDataArrayOutput {
	return o
}

func (o SharedConfigsConfigDataArrayOutput) ToSharedConfigsConfigDataArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataArrayOutput {
	return o
}

func (o SharedConfigsConfigDataArrayOutput) Index(i pulumi.IntInput) SharedConfigsConfigDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedConfigsConfigData {
		return vs[0].([]SharedConfigsConfigData)[vs[1].(int)]
	}).(SharedConfigsConfigDataOutput)
}

type SharedConfigsConfigDataAllowIpAccessRule struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// SharedConfigsConfigDataAllowIpAccessRuleInput is an input type that accepts SharedConfigsConfigDataAllowIpAccessRuleArgs and SharedConfigsConfigDataAllowIpAccessRuleOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataAllowIpAccessRuleInput` via:
//
//	SharedConfigsConfigDataAllowIpAccessRuleArgs{...}
type SharedConfigsConfigDataAllowIpAccessRuleInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataAllowIpAccessRuleOutput() SharedConfigsConfigDataAllowIpAccessRuleOutput
	ToSharedConfigsConfigDataAllowIpAccessRuleOutputWithContext(context.Context) SharedConfigsConfigDataAllowIpAccessRuleOutput
}

type SharedConfigsConfigDataAllowIpAccessRuleArgs struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (SharedConfigsConfigDataAllowIpAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataAllowIpAccessRule)(nil)).Elem()
}

func (i SharedConfigsConfigDataAllowIpAccessRuleArgs) ToSharedConfigsConfigDataAllowIpAccessRuleOutput() SharedConfigsConfigDataAllowIpAccessRuleOutput {
	return i.ToSharedConfigsConfigDataAllowIpAccessRuleOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataAllowIpAccessRuleArgs) ToSharedConfigsConfigDataAllowIpAccessRuleOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowIpAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataAllowIpAccessRuleOutput)
}

// SharedConfigsConfigDataAllowIpAccessRuleArrayInput is an input type that accepts SharedConfigsConfigDataAllowIpAccessRuleArray and SharedConfigsConfigDataAllowIpAccessRuleArrayOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataAllowIpAccessRuleArrayInput` via:
//
//	SharedConfigsConfigDataAllowIpAccessRuleArray{ SharedConfigsConfigDataAllowIpAccessRuleArgs{...} }
type SharedConfigsConfigDataAllowIpAccessRuleArrayInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataAllowIpAccessRuleArrayOutput() SharedConfigsConfigDataAllowIpAccessRuleArrayOutput
	ToSharedConfigsConfigDataAllowIpAccessRuleArrayOutputWithContext(context.Context) SharedConfigsConfigDataAllowIpAccessRuleArrayOutput
}

type SharedConfigsConfigDataAllowIpAccessRuleArray []SharedConfigsConfigDataAllowIpAccessRuleInput

func (SharedConfigsConfigDataAllowIpAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataAllowIpAccessRule)(nil)).Elem()
}

func (i SharedConfigsConfigDataAllowIpAccessRuleArray) ToSharedConfigsConfigDataAllowIpAccessRuleArrayOutput() SharedConfigsConfigDataAllowIpAccessRuleArrayOutput {
	return i.ToSharedConfigsConfigDataAllowIpAccessRuleArrayOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataAllowIpAccessRuleArray) ToSharedConfigsConfigDataAllowIpAccessRuleArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowIpAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataAllowIpAccessRuleArrayOutput)
}

type SharedConfigsConfigDataAllowIpAccessRuleOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataAllowIpAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataAllowIpAccessRule)(nil)).Elem()
}

func (o SharedConfigsConfigDataAllowIpAccessRuleOutput) ToSharedConfigsConfigDataAllowIpAccessRuleOutput() SharedConfigsConfigDataAllowIpAccessRuleOutput {
	return o
}

func (o SharedConfigsConfigDataAllowIpAccessRuleOutput) ToSharedConfigsConfigDataAllowIpAccessRuleOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowIpAccessRuleOutput {
	return o
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigsConfigDataAllowIpAccessRuleOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataAllowIpAccessRule) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type SharedConfigsConfigDataAllowIpAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataAllowIpAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataAllowIpAccessRule)(nil)).Elem()
}

func (o SharedConfigsConfigDataAllowIpAccessRuleArrayOutput) ToSharedConfigsConfigDataAllowIpAccessRuleArrayOutput() SharedConfigsConfigDataAllowIpAccessRuleArrayOutput {
	return o
}

func (o SharedConfigsConfigDataAllowIpAccessRuleArrayOutput) ToSharedConfigsConfigDataAllowIpAccessRuleArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowIpAccessRuleArrayOutput {
	return o
}

func (o SharedConfigsConfigDataAllowIpAccessRuleArrayOutput) Index(i pulumi.IntInput) SharedConfigsConfigDataAllowIpAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedConfigsConfigDataAllowIpAccessRule {
		return vs[0].([]SharedConfigsConfigDataAllowIpAccessRule)[vs[1].(int)]
	}).(SharedConfigsConfigDataAllowIpAccessRuleOutput)
}

type SharedConfigsConfigDataAllowRefererAccessRule struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty bool `pulumi:"allowEmpty"`
	// The content indicating the Referer blacklist.
	CommonTypes []SharedConfigsConfigDataAllowRefererAccessRuleCommonType `pulumi:"commonTypes"`
}

// SharedConfigsConfigDataAllowRefererAccessRuleInput is an input type that accepts SharedConfigsConfigDataAllowRefererAccessRuleArgs and SharedConfigsConfigDataAllowRefererAccessRuleOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataAllowRefererAccessRuleInput` via:
//
//	SharedConfigsConfigDataAllowRefererAccessRuleArgs{...}
type SharedConfigsConfigDataAllowRefererAccessRuleInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataAllowRefererAccessRuleOutput() SharedConfigsConfigDataAllowRefererAccessRuleOutput
	ToSharedConfigsConfigDataAllowRefererAccessRuleOutputWithContext(context.Context) SharedConfigsConfigDataAllowRefererAccessRuleOutput
}

type SharedConfigsConfigDataAllowRefererAccessRuleArgs struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty pulumi.BoolInput `pulumi:"allowEmpty"`
	// The content indicating the Referer blacklist.
	CommonTypes SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayInput `pulumi:"commonTypes"`
}

func (SharedConfigsConfigDataAllowRefererAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataAllowRefererAccessRule)(nil)).Elem()
}

func (i SharedConfigsConfigDataAllowRefererAccessRuleArgs) ToSharedConfigsConfigDataAllowRefererAccessRuleOutput() SharedConfigsConfigDataAllowRefererAccessRuleOutput {
	return i.ToSharedConfigsConfigDataAllowRefererAccessRuleOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataAllowRefererAccessRuleArgs) ToSharedConfigsConfigDataAllowRefererAccessRuleOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowRefererAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataAllowRefererAccessRuleOutput)
}

// SharedConfigsConfigDataAllowRefererAccessRuleArrayInput is an input type that accepts SharedConfigsConfigDataAllowRefererAccessRuleArray and SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataAllowRefererAccessRuleArrayInput` via:
//
//	SharedConfigsConfigDataAllowRefererAccessRuleArray{ SharedConfigsConfigDataAllowRefererAccessRuleArgs{...} }
type SharedConfigsConfigDataAllowRefererAccessRuleArrayInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput() SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput
	ToSharedConfigsConfigDataAllowRefererAccessRuleArrayOutputWithContext(context.Context) SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput
}

type SharedConfigsConfigDataAllowRefererAccessRuleArray []SharedConfigsConfigDataAllowRefererAccessRuleInput

func (SharedConfigsConfigDataAllowRefererAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataAllowRefererAccessRule)(nil)).Elem()
}

func (i SharedConfigsConfigDataAllowRefererAccessRuleArray) ToSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput() SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput {
	return i.ToSharedConfigsConfigDataAllowRefererAccessRuleArrayOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataAllowRefererAccessRuleArray) ToSharedConfigsConfigDataAllowRefererAccessRuleArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput)
}

type SharedConfigsConfigDataAllowRefererAccessRuleOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataAllowRefererAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataAllowRefererAccessRule)(nil)).Elem()
}

func (o SharedConfigsConfigDataAllowRefererAccessRuleOutput) ToSharedConfigsConfigDataAllowRefererAccessRuleOutput() SharedConfigsConfigDataAllowRefererAccessRuleOutput {
	return o
}

func (o SharedConfigsConfigDataAllowRefererAccessRuleOutput) ToSharedConfigsConfigDataAllowRefererAccessRuleOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowRefererAccessRuleOutput {
	return o
}

// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
func (o SharedConfigsConfigDataAllowRefererAccessRuleOutput) AllowEmpty() pulumi.BoolOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataAllowRefererAccessRule) bool { return v.AllowEmpty }).(pulumi.BoolOutput)
}

// The content indicating the Referer blacklist.
func (o SharedConfigsConfigDataAllowRefererAccessRuleOutput) CommonTypes() SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataAllowRefererAccessRule) []SharedConfigsConfigDataAllowRefererAccessRuleCommonType {
		return v.CommonTypes
	}).(SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput)
}

type SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataAllowRefererAccessRule)(nil)).Elem()
}

func (o SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput) ToSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput() SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput {
	return o
}

func (o SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput) ToSharedConfigsConfigDataAllowRefererAccessRuleArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput {
	return o
}

func (o SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput) Index(i pulumi.IntInput) SharedConfigsConfigDataAllowRefererAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedConfigsConfigDataAllowRefererAccessRule {
		return vs[0].([]SharedConfigsConfigDataAllowRefererAccessRule)[vs[1].(int)]
	}).(SharedConfigsConfigDataAllowRefererAccessRuleOutput)
}

type SharedConfigsConfigDataAllowRefererAccessRuleCommonType struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase bool `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeInput is an input type that accepts SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs and SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeInput` via:
//
//	SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs{...}
type SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput() SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput
	ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutputWithContext(context.Context) SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput
}

type SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase pulumi.BoolInput `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (i SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs) ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput() SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput {
	return i.ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs) ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput)
}

// SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayInput is an input type that accepts SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray and SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayInput` via:
//
//	SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray{ SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs{...} }
type SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput() SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput
	ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutputWithContext(context.Context) SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput
}

type SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray []SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeInput

func (SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (i SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray) ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput() SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput {
	return i.ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray) ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput)
}

type SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (o SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput) ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput() SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput {
	return o
}

func (o SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput) ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput {
	return o
}

// This list is case-sensitive when matching requests. Default is true.
func (o SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput) IgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataAllowRefererAccessRuleCommonType) bool { return v.IgnoreCase }).(pulumi.BoolOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataAllowRefererAccessRuleCommonType) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (o SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput) ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput() SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput {
	return o
}

func (o SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput) ToSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput {
	return o
}

func (o SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput) Index(i pulumi.IntInput) SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedConfigsConfigDataAllowRefererAccessRuleCommonType {
		return vs[0].([]SharedConfigsConfigDataAllowRefererAccessRuleCommonType)[vs[1].(int)]
	}).(SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput)
}

type SharedConfigsConfigDataCommonMatchList struct {
	// The content indicating the Referer blacklist.
	CommonTypes []SharedConfigsConfigDataCommonMatchListCommonType `pulumi:"commonTypes"`
}

// SharedConfigsConfigDataCommonMatchListInput is an input type that accepts SharedConfigsConfigDataCommonMatchListArgs and SharedConfigsConfigDataCommonMatchListOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataCommonMatchListInput` via:
//
//	SharedConfigsConfigDataCommonMatchListArgs{...}
type SharedConfigsConfigDataCommonMatchListInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataCommonMatchListOutput() SharedConfigsConfigDataCommonMatchListOutput
	ToSharedConfigsConfigDataCommonMatchListOutputWithContext(context.Context) SharedConfigsConfigDataCommonMatchListOutput
}

type SharedConfigsConfigDataCommonMatchListArgs struct {
	// The content indicating the Referer blacklist.
	CommonTypes SharedConfigsConfigDataCommonMatchListCommonTypeArrayInput `pulumi:"commonTypes"`
}

func (SharedConfigsConfigDataCommonMatchListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataCommonMatchList)(nil)).Elem()
}

func (i SharedConfigsConfigDataCommonMatchListArgs) ToSharedConfigsConfigDataCommonMatchListOutput() SharedConfigsConfigDataCommonMatchListOutput {
	return i.ToSharedConfigsConfigDataCommonMatchListOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataCommonMatchListArgs) ToSharedConfigsConfigDataCommonMatchListOutputWithContext(ctx context.Context) SharedConfigsConfigDataCommonMatchListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataCommonMatchListOutput)
}

// SharedConfigsConfigDataCommonMatchListArrayInput is an input type that accepts SharedConfigsConfigDataCommonMatchListArray and SharedConfigsConfigDataCommonMatchListArrayOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataCommonMatchListArrayInput` via:
//
//	SharedConfigsConfigDataCommonMatchListArray{ SharedConfigsConfigDataCommonMatchListArgs{...} }
type SharedConfigsConfigDataCommonMatchListArrayInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataCommonMatchListArrayOutput() SharedConfigsConfigDataCommonMatchListArrayOutput
	ToSharedConfigsConfigDataCommonMatchListArrayOutputWithContext(context.Context) SharedConfigsConfigDataCommonMatchListArrayOutput
}

type SharedConfigsConfigDataCommonMatchListArray []SharedConfigsConfigDataCommonMatchListInput

func (SharedConfigsConfigDataCommonMatchListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataCommonMatchList)(nil)).Elem()
}

func (i SharedConfigsConfigDataCommonMatchListArray) ToSharedConfigsConfigDataCommonMatchListArrayOutput() SharedConfigsConfigDataCommonMatchListArrayOutput {
	return i.ToSharedConfigsConfigDataCommonMatchListArrayOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataCommonMatchListArray) ToSharedConfigsConfigDataCommonMatchListArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataCommonMatchListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataCommonMatchListArrayOutput)
}

type SharedConfigsConfigDataCommonMatchListOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataCommonMatchListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataCommonMatchList)(nil)).Elem()
}

func (o SharedConfigsConfigDataCommonMatchListOutput) ToSharedConfigsConfigDataCommonMatchListOutput() SharedConfigsConfigDataCommonMatchListOutput {
	return o
}

func (o SharedConfigsConfigDataCommonMatchListOutput) ToSharedConfigsConfigDataCommonMatchListOutputWithContext(ctx context.Context) SharedConfigsConfigDataCommonMatchListOutput {
	return o
}

// The content indicating the Referer blacklist.
func (o SharedConfigsConfigDataCommonMatchListOutput) CommonTypes() SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataCommonMatchList) []SharedConfigsConfigDataCommonMatchListCommonType {
		return v.CommonTypes
	}).(SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput)
}

type SharedConfigsConfigDataCommonMatchListArrayOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataCommonMatchListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataCommonMatchList)(nil)).Elem()
}

func (o SharedConfigsConfigDataCommonMatchListArrayOutput) ToSharedConfigsConfigDataCommonMatchListArrayOutput() SharedConfigsConfigDataCommonMatchListArrayOutput {
	return o
}

func (o SharedConfigsConfigDataCommonMatchListArrayOutput) ToSharedConfigsConfigDataCommonMatchListArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataCommonMatchListArrayOutput {
	return o
}

func (o SharedConfigsConfigDataCommonMatchListArrayOutput) Index(i pulumi.IntInput) SharedConfigsConfigDataCommonMatchListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedConfigsConfigDataCommonMatchList {
		return vs[0].([]SharedConfigsConfigDataCommonMatchList)[vs[1].(int)]
	}).(SharedConfigsConfigDataCommonMatchListOutput)
}

type SharedConfigsConfigDataCommonMatchListCommonType struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase bool `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// SharedConfigsConfigDataCommonMatchListCommonTypeInput is an input type that accepts SharedConfigsConfigDataCommonMatchListCommonTypeArgs and SharedConfigsConfigDataCommonMatchListCommonTypeOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataCommonMatchListCommonTypeInput` via:
//
//	SharedConfigsConfigDataCommonMatchListCommonTypeArgs{...}
type SharedConfigsConfigDataCommonMatchListCommonTypeInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataCommonMatchListCommonTypeOutput() SharedConfigsConfigDataCommonMatchListCommonTypeOutput
	ToSharedConfigsConfigDataCommonMatchListCommonTypeOutputWithContext(context.Context) SharedConfigsConfigDataCommonMatchListCommonTypeOutput
}

type SharedConfigsConfigDataCommonMatchListCommonTypeArgs struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase pulumi.BoolInput `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (SharedConfigsConfigDataCommonMatchListCommonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataCommonMatchListCommonType)(nil)).Elem()
}

func (i SharedConfigsConfigDataCommonMatchListCommonTypeArgs) ToSharedConfigsConfigDataCommonMatchListCommonTypeOutput() SharedConfigsConfigDataCommonMatchListCommonTypeOutput {
	return i.ToSharedConfigsConfigDataCommonMatchListCommonTypeOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataCommonMatchListCommonTypeArgs) ToSharedConfigsConfigDataCommonMatchListCommonTypeOutputWithContext(ctx context.Context) SharedConfigsConfigDataCommonMatchListCommonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataCommonMatchListCommonTypeOutput)
}

// SharedConfigsConfigDataCommonMatchListCommonTypeArrayInput is an input type that accepts SharedConfigsConfigDataCommonMatchListCommonTypeArray and SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataCommonMatchListCommonTypeArrayInput` via:
//
//	SharedConfigsConfigDataCommonMatchListCommonTypeArray{ SharedConfigsConfigDataCommonMatchListCommonTypeArgs{...} }
type SharedConfigsConfigDataCommonMatchListCommonTypeArrayInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput() SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput
	ToSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutputWithContext(context.Context) SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput
}

type SharedConfigsConfigDataCommonMatchListCommonTypeArray []SharedConfigsConfigDataCommonMatchListCommonTypeInput

func (SharedConfigsConfigDataCommonMatchListCommonTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataCommonMatchListCommonType)(nil)).Elem()
}

func (i SharedConfigsConfigDataCommonMatchListCommonTypeArray) ToSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput() SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput {
	return i.ToSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataCommonMatchListCommonTypeArray) ToSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput)
}

type SharedConfigsConfigDataCommonMatchListCommonTypeOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataCommonMatchListCommonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataCommonMatchListCommonType)(nil)).Elem()
}

func (o SharedConfigsConfigDataCommonMatchListCommonTypeOutput) ToSharedConfigsConfigDataCommonMatchListCommonTypeOutput() SharedConfigsConfigDataCommonMatchListCommonTypeOutput {
	return o
}

func (o SharedConfigsConfigDataCommonMatchListCommonTypeOutput) ToSharedConfigsConfigDataCommonMatchListCommonTypeOutputWithContext(ctx context.Context) SharedConfigsConfigDataCommonMatchListCommonTypeOutput {
	return o
}

// This list is case-sensitive when matching requests. Default is true.
func (o SharedConfigsConfigDataCommonMatchListCommonTypeOutput) IgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataCommonMatchListCommonType) bool { return v.IgnoreCase }).(pulumi.BoolOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigsConfigDataCommonMatchListCommonTypeOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataCommonMatchListCommonType) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataCommonMatchListCommonType)(nil)).Elem()
}

func (o SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput) ToSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput() SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput {
	return o
}

func (o SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput) ToSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput {
	return o
}

func (o SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput) Index(i pulumi.IntInput) SharedConfigsConfigDataCommonMatchListCommonTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedConfigsConfigDataCommonMatchListCommonType {
		return vs[0].([]SharedConfigsConfigDataCommonMatchListCommonType)[vs[1].(int)]
	}).(SharedConfigsConfigDataCommonMatchListCommonTypeOutput)
}

type SharedConfigsConfigDataDenyIpAccessRule struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// SharedConfigsConfigDataDenyIpAccessRuleInput is an input type that accepts SharedConfigsConfigDataDenyIpAccessRuleArgs and SharedConfigsConfigDataDenyIpAccessRuleOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataDenyIpAccessRuleInput` via:
//
//	SharedConfigsConfigDataDenyIpAccessRuleArgs{...}
type SharedConfigsConfigDataDenyIpAccessRuleInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataDenyIpAccessRuleOutput() SharedConfigsConfigDataDenyIpAccessRuleOutput
	ToSharedConfigsConfigDataDenyIpAccessRuleOutputWithContext(context.Context) SharedConfigsConfigDataDenyIpAccessRuleOutput
}

type SharedConfigsConfigDataDenyIpAccessRuleArgs struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (SharedConfigsConfigDataDenyIpAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataDenyIpAccessRule)(nil)).Elem()
}

func (i SharedConfigsConfigDataDenyIpAccessRuleArgs) ToSharedConfigsConfigDataDenyIpAccessRuleOutput() SharedConfigsConfigDataDenyIpAccessRuleOutput {
	return i.ToSharedConfigsConfigDataDenyIpAccessRuleOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataDenyIpAccessRuleArgs) ToSharedConfigsConfigDataDenyIpAccessRuleOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyIpAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataDenyIpAccessRuleOutput)
}

// SharedConfigsConfigDataDenyIpAccessRuleArrayInput is an input type that accepts SharedConfigsConfigDataDenyIpAccessRuleArray and SharedConfigsConfigDataDenyIpAccessRuleArrayOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataDenyIpAccessRuleArrayInput` via:
//
//	SharedConfigsConfigDataDenyIpAccessRuleArray{ SharedConfigsConfigDataDenyIpAccessRuleArgs{...} }
type SharedConfigsConfigDataDenyIpAccessRuleArrayInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataDenyIpAccessRuleArrayOutput() SharedConfigsConfigDataDenyIpAccessRuleArrayOutput
	ToSharedConfigsConfigDataDenyIpAccessRuleArrayOutputWithContext(context.Context) SharedConfigsConfigDataDenyIpAccessRuleArrayOutput
}

type SharedConfigsConfigDataDenyIpAccessRuleArray []SharedConfigsConfigDataDenyIpAccessRuleInput

func (SharedConfigsConfigDataDenyIpAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataDenyIpAccessRule)(nil)).Elem()
}

func (i SharedConfigsConfigDataDenyIpAccessRuleArray) ToSharedConfigsConfigDataDenyIpAccessRuleArrayOutput() SharedConfigsConfigDataDenyIpAccessRuleArrayOutput {
	return i.ToSharedConfigsConfigDataDenyIpAccessRuleArrayOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataDenyIpAccessRuleArray) ToSharedConfigsConfigDataDenyIpAccessRuleArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyIpAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataDenyIpAccessRuleArrayOutput)
}

type SharedConfigsConfigDataDenyIpAccessRuleOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataDenyIpAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataDenyIpAccessRule)(nil)).Elem()
}

func (o SharedConfigsConfigDataDenyIpAccessRuleOutput) ToSharedConfigsConfigDataDenyIpAccessRuleOutput() SharedConfigsConfigDataDenyIpAccessRuleOutput {
	return o
}

func (o SharedConfigsConfigDataDenyIpAccessRuleOutput) ToSharedConfigsConfigDataDenyIpAccessRuleOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyIpAccessRuleOutput {
	return o
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigsConfigDataDenyIpAccessRuleOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataDenyIpAccessRule) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type SharedConfigsConfigDataDenyIpAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataDenyIpAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataDenyIpAccessRule)(nil)).Elem()
}

func (o SharedConfigsConfigDataDenyIpAccessRuleArrayOutput) ToSharedConfigsConfigDataDenyIpAccessRuleArrayOutput() SharedConfigsConfigDataDenyIpAccessRuleArrayOutput {
	return o
}

func (o SharedConfigsConfigDataDenyIpAccessRuleArrayOutput) ToSharedConfigsConfigDataDenyIpAccessRuleArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyIpAccessRuleArrayOutput {
	return o
}

func (o SharedConfigsConfigDataDenyIpAccessRuleArrayOutput) Index(i pulumi.IntInput) SharedConfigsConfigDataDenyIpAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedConfigsConfigDataDenyIpAccessRule {
		return vs[0].([]SharedConfigsConfigDataDenyIpAccessRule)[vs[1].(int)]
	}).(SharedConfigsConfigDataDenyIpAccessRuleOutput)
}

type SharedConfigsConfigDataDenyRefererAccessRule struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty bool `pulumi:"allowEmpty"`
	// The content indicating the Referer blacklist.
	CommonTypes []SharedConfigsConfigDataDenyRefererAccessRuleCommonType `pulumi:"commonTypes"`
}

// SharedConfigsConfigDataDenyRefererAccessRuleInput is an input type that accepts SharedConfigsConfigDataDenyRefererAccessRuleArgs and SharedConfigsConfigDataDenyRefererAccessRuleOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataDenyRefererAccessRuleInput` via:
//
//	SharedConfigsConfigDataDenyRefererAccessRuleArgs{...}
type SharedConfigsConfigDataDenyRefererAccessRuleInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataDenyRefererAccessRuleOutput() SharedConfigsConfigDataDenyRefererAccessRuleOutput
	ToSharedConfigsConfigDataDenyRefererAccessRuleOutputWithContext(context.Context) SharedConfigsConfigDataDenyRefererAccessRuleOutput
}

type SharedConfigsConfigDataDenyRefererAccessRuleArgs struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty pulumi.BoolInput `pulumi:"allowEmpty"`
	// The content indicating the Referer blacklist.
	CommonTypes SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayInput `pulumi:"commonTypes"`
}

func (SharedConfigsConfigDataDenyRefererAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataDenyRefererAccessRule)(nil)).Elem()
}

func (i SharedConfigsConfigDataDenyRefererAccessRuleArgs) ToSharedConfigsConfigDataDenyRefererAccessRuleOutput() SharedConfigsConfigDataDenyRefererAccessRuleOutput {
	return i.ToSharedConfigsConfigDataDenyRefererAccessRuleOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataDenyRefererAccessRuleArgs) ToSharedConfigsConfigDataDenyRefererAccessRuleOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyRefererAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataDenyRefererAccessRuleOutput)
}

// SharedConfigsConfigDataDenyRefererAccessRuleArrayInput is an input type that accepts SharedConfigsConfigDataDenyRefererAccessRuleArray and SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataDenyRefererAccessRuleArrayInput` via:
//
//	SharedConfigsConfigDataDenyRefererAccessRuleArray{ SharedConfigsConfigDataDenyRefererAccessRuleArgs{...} }
type SharedConfigsConfigDataDenyRefererAccessRuleArrayInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput() SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput
	ToSharedConfigsConfigDataDenyRefererAccessRuleArrayOutputWithContext(context.Context) SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput
}

type SharedConfigsConfigDataDenyRefererAccessRuleArray []SharedConfigsConfigDataDenyRefererAccessRuleInput

func (SharedConfigsConfigDataDenyRefererAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataDenyRefererAccessRule)(nil)).Elem()
}

func (i SharedConfigsConfigDataDenyRefererAccessRuleArray) ToSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput() SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput {
	return i.ToSharedConfigsConfigDataDenyRefererAccessRuleArrayOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataDenyRefererAccessRuleArray) ToSharedConfigsConfigDataDenyRefererAccessRuleArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput)
}

type SharedConfigsConfigDataDenyRefererAccessRuleOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataDenyRefererAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataDenyRefererAccessRule)(nil)).Elem()
}

func (o SharedConfigsConfigDataDenyRefererAccessRuleOutput) ToSharedConfigsConfigDataDenyRefererAccessRuleOutput() SharedConfigsConfigDataDenyRefererAccessRuleOutput {
	return o
}

func (o SharedConfigsConfigDataDenyRefererAccessRuleOutput) ToSharedConfigsConfigDataDenyRefererAccessRuleOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyRefererAccessRuleOutput {
	return o
}

// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
func (o SharedConfigsConfigDataDenyRefererAccessRuleOutput) AllowEmpty() pulumi.BoolOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataDenyRefererAccessRule) bool { return v.AllowEmpty }).(pulumi.BoolOutput)
}

// The content indicating the Referer blacklist.
func (o SharedConfigsConfigDataDenyRefererAccessRuleOutput) CommonTypes() SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataDenyRefererAccessRule) []SharedConfigsConfigDataDenyRefererAccessRuleCommonType {
		return v.CommonTypes
	}).(SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput)
}

type SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataDenyRefererAccessRule)(nil)).Elem()
}

func (o SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput) ToSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput() SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput {
	return o
}

func (o SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput) ToSharedConfigsConfigDataDenyRefererAccessRuleArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput {
	return o
}

func (o SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput) Index(i pulumi.IntInput) SharedConfigsConfigDataDenyRefererAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedConfigsConfigDataDenyRefererAccessRule {
		return vs[0].([]SharedConfigsConfigDataDenyRefererAccessRule)[vs[1].(int)]
	}).(SharedConfigsConfigDataDenyRefererAccessRuleOutput)
}

type SharedConfigsConfigDataDenyRefererAccessRuleCommonType struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase bool `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeInput is an input type that accepts SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs and SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeInput` via:
//
//	SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs{...}
type SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput() SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput
	ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutputWithContext(context.Context) SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput
}

type SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase pulumi.BoolInput `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (i SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs) ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput() SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput {
	return i.ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs) ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput)
}

// SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayInput is an input type that accepts SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray and SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput values.
// You can construct a concrete instance of `SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayInput` via:
//
//	SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray{ SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs{...} }
type SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayInput interface {
	pulumi.Input

	ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput() SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput
	ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutputWithContext(context.Context) SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput
}

type SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray []SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeInput

func (SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (i SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray) ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput() SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput {
	return i.ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutputWithContext(context.Background())
}

func (i SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray) ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput)
}

type SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedConfigsConfigDataDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (o SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput) ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput() SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput {
	return o
}

func (o SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput) ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput {
	return o
}

// This list is case-sensitive when matching requests. Default is true.
func (o SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput) IgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataDenyRefererAccessRuleCommonType) bool { return v.IgnoreCase }).(pulumi.BoolOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedConfigsConfigDataDenyRefererAccessRuleCommonType) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput struct{ *pulumi.OutputState }

func (SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedConfigsConfigDataDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (o SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput) ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput() SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput {
	return o
}

func (o SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput) ToSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutputWithContext(ctx context.Context) SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput {
	return o
}

func (o SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput) Index(i pulumi.IntInput) SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedConfigsConfigDataDenyRefererAccessRuleCommonType {
		return vs[0].([]SharedConfigsConfigDataDenyRefererAccessRuleCommonType)[vs[1].(int)]
	}).(SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput)
}

type GetCertificatesCertInfo struct {
	// ID indicating the certificate.
	CertId string `pulumi:"certId"`
	// The domain name to which the certificate is issued.
	CertName string `pulumi:"certName"`
	// The domain name associated with the certificate. If the certificate is not yet associated with any domain name, the parameter value is null.
	ConfiguredDomain string `pulumi:"configuredDomain"`
	// The remark of the cert.
	Desc string `pulumi:"desc"`
	// The domain names included in the SAN field of the certificate.
	DnsName string `pulumi:"dnsName"`
	// The issuance time of the certificate is indicated. The unit is Unix timestamp.
	EffectiveTime int `pulumi:"effectiveTime"`
	// The expiration time of the certificate is indicated. The unit is Unix timestamp.
	ExpireTime int `pulumi:"expireTime"`
	// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
	Source string `pulumi:"source"`
	// Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
	Status string `pulumi:"status"`
}

// GetCertificatesCertInfoInput is an input type that accepts GetCertificatesCertInfoArgs and GetCertificatesCertInfoOutput values.
// You can construct a concrete instance of `GetCertificatesCertInfoInput` via:
//
//	GetCertificatesCertInfoArgs{...}
type GetCertificatesCertInfoInput interface {
	pulumi.Input

	ToGetCertificatesCertInfoOutput() GetCertificatesCertInfoOutput
	ToGetCertificatesCertInfoOutputWithContext(context.Context) GetCertificatesCertInfoOutput
}

type GetCertificatesCertInfoArgs struct {
	// ID indicating the certificate.
	CertId pulumi.StringInput `pulumi:"certId"`
	// The domain name to which the certificate is issued.
	CertName pulumi.StringInput `pulumi:"certName"`
	// The domain name associated with the certificate. If the certificate is not yet associated with any domain name, the parameter value is null.
	ConfiguredDomain pulumi.StringInput `pulumi:"configuredDomain"`
	// The remark of the cert.
	Desc pulumi.StringInput `pulumi:"desc"`
	// The domain names included in the SAN field of the certificate.
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// The issuance time of the certificate is indicated. The unit is Unix timestamp.
	EffectiveTime pulumi.IntInput `pulumi:"effectiveTime"`
	// The expiration time of the certificate is indicated. The unit is Unix timestamp.
	ExpireTime pulumi.IntInput `pulumi:"expireTime"`
	// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
	Source pulumi.StringInput `pulumi:"source"`
	// Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetCertificatesCertInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertInfo)(nil)).Elem()
}

func (i GetCertificatesCertInfoArgs) ToGetCertificatesCertInfoOutput() GetCertificatesCertInfoOutput {
	return i.ToGetCertificatesCertInfoOutputWithContext(context.Background())
}

func (i GetCertificatesCertInfoArgs) ToGetCertificatesCertInfoOutputWithContext(ctx context.Context) GetCertificatesCertInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertInfoOutput)
}

// GetCertificatesCertInfoArrayInput is an input type that accepts GetCertificatesCertInfoArray and GetCertificatesCertInfoArrayOutput values.
// You can construct a concrete instance of `GetCertificatesCertInfoArrayInput` via:
//
//	GetCertificatesCertInfoArray{ GetCertificatesCertInfoArgs{...} }
type GetCertificatesCertInfoArrayInput interface {
	pulumi.Input

	ToGetCertificatesCertInfoArrayOutput() GetCertificatesCertInfoArrayOutput
	ToGetCertificatesCertInfoArrayOutputWithContext(context.Context) GetCertificatesCertInfoArrayOutput
}

type GetCertificatesCertInfoArray []GetCertificatesCertInfoInput

func (GetCertificatesCertInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertInfo)(nil)).Elem()
}

func (i GetCertificatesCertInfoArray) ToGetCertificatesCertInfoArrayOutput() GetCertificatesCertInfoArrayOutput {
	return i.ToGetCertificatesCertInfoArrayOutputWithContext(context.Background())
}

func (i GetCertificatesCertInfoArray) ToGetCertificatesCertInfoArrayOutputWithContext(ctx context.Context) GetCertificatesCertInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertInfoArrayOutput)
}

type GetCertificatesCertInfoOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertInfo)(nil)).Elem()
}

func (o GetCertificatesCertInfoOutput) ToGetCertificatesCertInfoOutput() GetCertificatesCertInfoOutput {
	return o
}

func (o GetCertificatesCertInfoOutput) ToGetCertificatesCertInfoOutputWithContext(ctx context.Context) GetCertificatesCertInfoOutput {
	return o
}

// ID indicating the certificate.
func (o GetCertificatesCertInfoOutput) CertId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertInfo) string { return v.CertId }).(pulumi.StringOutput)
}

// The domain name to which the certificate is issued.
func (o GetCertificatesCertInfoOutput) CertName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertInfo) string { return v.CertName }).(pulumi.StringOutput)
}

// The domain name associated with the certificate. If the certificate is not yet associated with any domain name, the parameter value is null.
func (o GetCertificatesCertInfoOutput) ConfiguredDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertInfo) string { return v.ConfiguredDomain }).(pulumi.StringOutput)
}

// The remark of the cert.
func (o GetCertificatesCertInfoOutput) Desc() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertInfo) string { return v.Desc }).(pulumi.StringOutput)
}

// The domain names included in the SAN field of the certificate.
func (o GetCertificatesCertInfoOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertInfo) string { return v.DnsName }).(pulumi.StringOutput)
}

// The issuance time of the certificate is indicated. The unit is Unix timestamp.
func (o GetCertificatesCertInfoOutput) EffectiveTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetCertificatesCertInfo) int { return v.EffectiveTime }).(pulumi.IntOutput)
}

// The expiration time of the certificate is indicated. The unit is Unix timestamp.
func (o GetCertificatesCertInfoOutput) ExpireTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetCertificatesCertInfo) int { return v.ExpireTime }).(pulumi.IntOutput)
}

// Specify the location for storing the certificate. The parameter can take the following values: `volcCertCenter`: indicates that the certificate will be stored in the certificate center.`cdnCertHosting`: indicates that the certificate will be hosted on the content delivery network.
func (o GetCertificatesCertInfoOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertInfo) string { return v.Source }).(pulumi.StringOutput)
}

// Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
func (o GetCertificatesCertInfoOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertInfo) string { return v.Status }).(pulumi.StringOutput)
}

type GetCertificatesCertInfoArrayOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertInfo)(nil)).Elem()
}

func (o GetCertificatesCertInfoArrayOutput) ToGetCertificatesCertInfoArrayOutput() GetCertificatesCertInfoArrayOutput {
	return o
}

func (o GetCertificatesCertInfoArrayOutput) ToGetCertificatesCertInfoArrayOutputWithContext(ctx context.Context) GetCertificatesCertInfoArrayOutput {
	return o
}

func (o GetCertificatesCertInfoArrayOutput) Index(i pulumi.IntInput) GetCertificatesCertInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificatesCertInfo {
		return vs[0].([]GetCertificatesCertInfo)[vs[1].(int)]
	}).(GetCertificatesCertInfoOutput)
}

type GetConfigsDomainConfig struct {
	// The cname of the domain.
	Cname string `pulumi:"cname"`
	// The create time of the domain.
	CreateTime int `pulumi:"createTime"`
	// The domain name.
	Domain string `pulumi:"domain"`
	// Indicates whether the configuration of this domain name is allowed to be changed.
	LockStatus string `pulumi:"lockStatus"`
	// The project name.
	Project string `pulumi:"project"`
	// The service region of the domain.
	ServiceRegion string `pulumi:"serviceRegion"`
	// The service type of the domain.
	ServiceType string `pulumi:"serviceType"`
	// The status of the domain.
	Status string `pulumi:"status"`
	// The update time of the domain.
	UpdateTime int `pulumi:"updateTime"`
}

// GetConfigsDomainConfigInput is an input type that accepts GetConfigsDomainConfigArgs and GetConfigsDomainConfigOutput values.
// You can construct a concrete instance of `GetConfigsDomainConfigInput` via:
//
//	GetConfigsDomainConfigArgs{...}
type GetConfigsDomainConfigInput interface {
	pulumi.Input

	ToGetConfigsDomainConfigOutput() GetConfigsDomainConfigOutput
	ToGetConfigsDomainConfigOutputWithContext(context.Context) GetConfigsDomainConfigOutput
}

type GetConfigsDomainConfigArgs struct {
	// The cname of the domain.
	Cname pulumi.StringInput `pulumi:"cname"`
	// The create time of the domain.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// The domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Indicates whether the configuration of this domain name is allowed to be changed.
	LockStatus pulumi.StringInput `pulumi:"lockStatus"`
	// The project name.
	Project pulumi.StringInput `pulumi:"project"`
	// The service region of the domain.
	ServiceRegion pulumi.StringInput `pulumi:"serviceRegion"`
	// The service type of the domain.
	ServiceType pulumi.StringInput `pulumi:"serviceType"`
	// The status of the domain.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of the domain.
	UpdateTime pulumi.IntInput `pulumi:"updateTime"`
}

func (GetConfigsDomainConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConfigsDomainConfig)(nil)).Elem()
}

func (i GetConfigsDomainConfigArgs) ToGetConfigsDomainConfigOutput() GetConfigsDomainConfigOutput {
	return i.ToGetConfigsDomainConfigOutputWithContext(context.Background())
}

func (i GetConfigsDomainConfigArgs) ToGetConfigsDomainConfigOutputWithContext(ctx context.Context) GetConfigsDomainConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConfigsDomainConfigOutput)
}

// GetConfigsDomainConfigArrayInput is an input type that accepts GetConfigsDomainConfigArray and GetConfigsDomainConfigArrayOutput values.
// You can construct a concrete instance of `GetConfigsDomainConfigArrayInput` via:
//
//	GetConfigsDomainConfigArray{ GetConfigsDomainConfigArgs{...} }
type GetConfigsDomainConfigArrayInput interface {
	pulumi.Input

	ToGetConfigsDomainConfigArrayOutput() GetConfigsDomainConfigArrayOutput
	ToGetConfigsDomainConfigArrayOutputWithContext(context.Context) GetConfigsDomainConfigArrayOutput
}

type GetConfigsDomainConfigArray []GetConfigsDomainConfigInput

func (GetConfigsDomainConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConfigsDomainConfig)(nil)).Elem()
}

func (i GetConfigsDomainConfigArray) ToGetConfigsDomainConfigArrayOutput() GetConfigsDomainConfigArrayOutput {
	return i.ToGetConfigsDomainConfigArrayOutputWithContext(context.Background())
}

func (i GetConfigsDomainConfigArray) ToGetConfigsDomainConfigArrayOutputWithContext(ctx context.Context) GetConfigsDomainConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConfigsDomainConfigArrayOutput)
}

type GetConfigsDomainConfigOutput struct{ *pulumi.OutputState }

func (GetConfigsDomainConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConfigsDomainConfig)(nil)).Elem()
}

func (o GetConfigsDomainConfigOutput) ToGetConfigsDomainConfigOutput() GetConfigsDomainConfigOutput {
	return o
}

func (o GetConfigsDomainConfigOutput) ToGetConfigsDomainConfigOutputWithContext(ctx context.Context) GetConfigsDomainConfigOutput {
	return o
}

// The cname of the domain.
func (o GetConfigsDomainConfigOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigsDomainConfig) string { return v.Cname }).(pulumi.StringOutput)
}

// The create time of the domain.
func (o GetConfigsDomainConfigOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetConfigsDomainConfig) int { return v.CreateTime }).(pulumi.IntOutput)
}

// The domain name.
func (o GetConfigsDomainConfigOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigsDomainConfig) string { return v.Domain }).(pulumi.StringOutput)
}

// Indicates whether the configuration of this domain name is allowed to be changed.
func (o GetConfigsDomainConfigOutput) LockStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigsDomainConfig) string { return v.LockStatus }).(pulumi.StringOutput)
}

// The project name.
func (o GetConfigsDomainConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigsDomainConfig) string { return v.Project }).(pulumi.StringOutput)
}

// The service region of the domain.
func (o GetConfigsDomainConfigOutput) ServiceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigsDomainConfig) string { return v.ServiceRegion }).(pulumi.StringOutput)
}

// The service type of the domain.
func (o GetConfigsDomainConfigOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigsDomainConfig) string { return v.ServiceType }).(pulumi.StringOutput)
}

// The status of the domain.
func (o GetConfigsDomainConfigOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigsDomainConfig) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of the domain.
func (o GetConfigsDomainConfigOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetConfigsDomainConfig) int { return v.UpdateTime }).(pulumi.IntOutput)
}

type GetConfigsDomainConfigArrayOutput struct{ *pulumi.OutputState }

func (GetConfigsDomainConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConfigsDomainConfig)(nil)).Elem()
}

func (o GetConfigsDomainConfigArrayOutput) ToGetConfigsDomainConfigArrayOutput() GetConfigsDomainConfigArrayOutput {
	return o
}

func (o GetConfigsDomainConfigArrayOutput) ToGetConfigsDomainConfigArrayOutputWithContext(ctx context.Context) GetConfigsDomainConfigArrayOutput {
	return o
}

func (o GetConfigsDomainConfigArrayOutput) Index(i pulumi.IntInput) GetConfigsDomainConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetConfigsDomainConfig {
		return vs[0].([]GetConfigsDomainConfig)[vs[1].(int)]
	}).(GetConfigsDomainConfigOutput)
}

type GetDomainsDomain struct {
	// The list of backup origin servers for accelerating this domain name. If no backup origin server is configured for this acceleration domain name, the parameter value is null.
	BackupOrigins []string `pulumi:"backupOrigins"`
	// Indicates the role of the accelerated domain in the shared cache configuration. This parameter can take the following values: `targetHost`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the target domain.`cacheSharedOn`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the configured domain.`""`: This parameter value is empty, indicating that the accelerated domain does not exist in any shared cache configuration.
	CacheShared string `pulumi:"cacheShared"`
	// If CacheShared is cache_shared_on, it means the target domain name that shares cache with the accelerated domain name. If CacheShared is targetHost or an empty value, the parameter value is empty.
	CacheSharedTargetHost string `pulumi:"cacheSharedTargetHost"`
	// The CNAME address of the domain is automatically assigned when adding the domain.
	Cname string `pulumi:"cname"`
	// The creation time of the domain.
	CreateTime int `pulumi:"createTime"`
	// Search by specifying domain name keywords, with fuzzy matching.
	Domain string `pulumi:"domain"`
	// Indicates the locked status of the accelerated domain.
	DomainLocks []GetDomainsDomainDomainLock `pulumi:"domainLocks"`
	// Specify HTTPS configuration to filter accelerated domains. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain has enabled HTTPS function.`false`: Indicates that the accelerated domain has not enabled HTTPS function.
	Https bool `pulumi:"https"`
	// Specify IPv6 configuration to filter accelerated domain names. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain name supports requests using IPv6 addresses.`false`: Indicates that the accelerated domain name does not support requests using IPv6 addresses.
	Ipv6 bool `pulumi:"ipv6"`
	// Indicates whether the accelerated domain name is a conflicting domain name. By default, each accelerated domain name is unique in the content delivery network. If you need to add an accelerated domain name that already exists in the content delivery network, you need to submit a ticket. If the domain name is added successfully, it becomes a conflicting domain name.
	IsConflictDomain bool `pulumi:"isConflictDomain"`
	// Configure the origin protocol for the accelerated domain.
	OriginProtocol string `pulumi:"originProtocol"`
	// Specify a primary origin server for filtering accelerated domains.
	PrimaryOrigins []string `pulumi:"primaryOrigins"`
	// The project name of the domain.
	Project string `pulumi:"project"`
	// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
	ServiceRegion string `pulumi:"serviceRegion"`
	// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
	ServiceType string `pulumi:"serviceType"`
	// The status of the domain.
	Status string `pulumi:"status"`
	// Filter by specified domain name tags, up to 10 tags can be specified. Each tag is entered as a string in the format of key:value.
	Tags []GetDomainsDomainTag `pulumi:"tags"`
	// The update time of the domain.
	UpdateTime int `pulumi:"updateTime"`
}

// GetDomainsDomainInput is an input type that accepts GetDomainsDomainArgs and GetDomainsDomainOutput values.
// You can construct a concrete instance of `GetDomainsDomainInput` via:
//
//	GetDomainsDomainArgs{...}
type GetDomainsDomainInput interface {
	pulumi.Input

	ToGetDomainsDomainOutput() GetDomainsDomainOutput
	ToGetDomainsDomainOutputWithContext(context.Context) GetDomainsDomainOutput
}

type GetDomainsDomainArgs struct {
	// The list of backup origin servers for accelerating this domain name. If no backup origin server is configured for this acceleration domain name, the parameter value is null.
	BackupOrigins pulumi.StringArrayInput `pulumi:"backupOrigins"`
	// Indicates the role of the accelerated domain in the shared cache configuration. This parameter can take the following values: `targetHost`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the target domain.`cacheSharedOn`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the configured domain.`""`: This parameter value is empty, indicating that the accelerated domain does not exist in any shared cache configuration.
	CacheShared pulumi.StringInput `pulumi:"cacheShared"`
	// If CacheShared is cache_shared_on, it means the target domain name that shares cache with the accelerated domain name. If CacheShared is targetHost or an empty value, the parameter value is empty.
	CacheSharedTargetHost pulumi.StringInput `pulumi:"cacheSharedTargetHost"`
	// The CNAME address of the domain is automatically assigned when adding the domain.
	Cname pulumi.StringInput `pulumi:"cname"`
	// The creation time of the domain.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// Search by specifying domain name keywords, with fuzzy matching.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Indicates the locked status of the accelerated domain.
	DomainLocks GetDomainsDomainDomainLockArrayInput `pulumi:"domainLocks"`
	// Specify HTTPS configuration to filter accelerated domains. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain has enabled HTTPS function.`false`: Indicates that the accelerated domain has not enabled HTTPS function.
	Https pulumi.BoolInput `pulumi:"https"`
	// Specify IPv6 configuration to filter accelerated domain names. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain name supports requests using IPv6 addresses.`false`: Indicates that the accelerated domain name does not support requests using IPv6 addresses.
	Ipv6 pulumi.BoolInput `pulumi:"ipv6"`
	// Indicates whether the accelerated domain name is a conflicting domain name. By default, each accelerated domain name is unique in the content delivery network. If you need to add an accelerated domain name that already exists in the content delivery network, you need to submit a ticket. If the domain name is added successfully, it becomes a conflicting domain name.
	IsConflictDomain pulumi.BoolInput `pulumi:"isConflictDomain"`
	// Configure the origin protocol for the accelerated domain.
	OriginProtocol pulumi.StringInput `pulumi:"originProtocol"`
	// Specify a primary origin server for filtering accelerated domains.
	PrimaryOrigins pulumi.StringArrayInput `pulumi:"primaryOrigins"`
	// The project name of the domain.
	Project pulumi.StringInput `pulumi:"project"`
	// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
	ServiceRegion pulumi.StringInput `pulumi:"serviceRegion"`
	// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
	ServiceType pulumi.StringInput `pulumi:"serviceType"`
	// The status of the domain.
	Status pulumi.StringInput `pulumi:"status"`
	// Filter by specified domain name tags, up to 10 tags can be specified. Each tag is entered as a string in the format of key:value.
	Tags GetDomainsDomainTagArrayInput `pulumi:"tags"`
	// The update time of the domain.
	UpdateTime pulumi.IntInput `pulumi:"updateTime"`
}

func (GetDomainsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return i.ToGetDomainsDomainOutputWithContext(context.Background())
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainOutput)
}

// GetDomainsDomainArrayInput is an input type that accepts GetDomainsDomainArray and GetDomainsDomainArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainArrayInput` via:
//
//	GetDomainsDomainArray{ GetDomainsDomainArgs{...} }
type GetDomainsDomainArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput
	ToGetDomainsDomainArrayOutputWithContext(context.Context) GetDomainsDomainArrayOutput
}

type GetDomainsDomainArray []GetDomainsDomainInput

func (GetDomainsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return i.ToGetDomainsDomainArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainArrayOutput)
}

type GetDomainsDomainOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return o
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return o
}

// The list of backup origin servers for accelerating this domain name. If no backup origin server is configured for this acceleration domain name, the parameter value is null.
func (o GetDomainsDomainOutput) BackupOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainsDomain) []string { return v.BackupOrigins }).(pulumi.StringArrayOutput)
}

// Indicates the role of the accelerated domain in the shared cache configuration. This parameter can take the following values: `targetHost`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the target domain.`cacheSharedOn`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the configured domain.`""`: This parameter value is empty, indicating that the accelerated domain does not exist in any shared cache configuration.
func (o GetDomainsDomainOutput) CacheShared() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.CacheShared }).(pulumi.StringOutput)
}

// If CacheShared is cache_shared_on, it means the target domain name that shares cache with the accelerated domain name. If CacheShared is targetHost or an empty value, the parameter value is empty.
func (o GetDomainsDomainOutput) CacheSharedTargetHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.CacheSharedTargetHost }).(pulumi.StringOutput)
}

// The CNAME address of the domain is automatically assigned when adding the domain.
func (o GetDomainsDomainOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Cname }).(pulumi.StringOutput)
}

// The creation time of the domain.
func (o GetDomainsDomainOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomain) int { return v.CreateTime }).(pulumi.IntOutput)
}

// Search by specifying domain name keywords, with fuzzy matching.
func (o GetDomainsDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Domain }).(pulumi.StringOutput)
}

// Indicates the locked status of the accelerated domain.
func (o GetDomainsDomainOutput) DomainLocks() GetDomainsDomainDomainLockArrayOutput {
	return o.ApplyT(func(v GetDomainsDomain) []GetDomainsDomainDomainLock { return v.DomainLocks }).(GetDomainsDomainDomainLockArrayOutput)
}

// Specify HTTPS configuration to filter accelerated domains. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain has enabled HTTPS function.`false`: Indicates that the accelerated domain has not enabled HTTPS function.
func (o GetDomainsDomainOutput) Https() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.Https }).(pulumi.BoolOutput)
}

// Specify IPv6 configuration to filter accelerated domain names. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain name supports requests using IPv6 addresses.`false`: Indicates that the accelerated domain name does not support requests using IPv6 addresses.
func (o GetDomainsDomainOutput) Ipv6() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.Ipv6 }).(pulumi.BoolOutput)
}

// Indicates whether the accelerated domain name is a conflicting domain name. By default, each accelerated domain name is unique in the content delivery network. If you need to add an accelerated domain name that already exists in the content delivery network, you need to submit a ticket. If the domain name is added successfully, it becomes a conflicting domain name.
func (o GetDomainsDomainOutput) IsConflictDomain() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.IsConflictDomain }).(pulumi.BoolOutput)
}

// Configure the origin protocol for the accelerated domain.
func (o GetDomainsDomainOutput) OriginProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.OriginProtocol }).(pulumi.StringOutput)
}

// Specify a primary origin server for filtering accelerated domains.
func (o GetDomainsDomainOutput) PrimaryOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainsDomain) []string { return v.PrimaryOrigins }).(pulumi.StringArrayOutput)
}

// The project name of the domain.
func (o GetDomainsDomainOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Project }).(pulumi.StringOutput)
}

// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
func (o GetDomainsDomainOutput) ServiceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.ServiceRegion }).(pulumi.StringOutput)
}

// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
func (o GetDomainsDomainOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.ServiceType }).(pulumi.StringOutput)
}

// The status of the domain.
func (o GetDomainsDomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.Status }).(pulumi.StringOutput)
}

// Filter by specified domain name tags, up to 10 tags can be specified. Each tag is entered as a string in the format of key:value.
func (o GetDomainsDomainOutput) Tags() GetDomainsDomainTagArrayOutput {
	return o.ApplyT(func(v GetDomainsDomain) []GetDomainsDomainTag { return v.Tags }).(GetDomainsDomainTagArrayOutput)
}

// The update time of the domain.
func (o GetDomainsDomainOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainsDomain) int { return v.UpdateTime }).(pulumi.IntOutput)
}

type GetDomainsDomainArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomain {
		return vs[0].([]GetDomainsDomain)[vs[1].(int)]
	}).(GetDomainsDomainOutput)
}

type GetDomainsDomainDomainLock struct {
	// If the Status is on, this parameter value records the reason for the lock.
	Remark string `pulumi:"remark"`
	// The status of the domain.
	Status string `pulumi:"status"`
}

// GetDomainsDomainDomainLockInput is an input type that accepts GetDomainsDomainDomainLockArgs and GetDomainsDomainDomainLockOutput values.
// You can construct a concrete instance of `GetDomainsDomainDomainLockInput` via:
//
//	GetDomainsDomainDomainLockArgs{...}
type GetDomainsDomainDomainLockInput interface {
	pulumi.Input

	ToGetDomainsDomainDomainLockOutput() GetDomainsDomainDomainLockOutput
	ToGetDomainsDomainDomainLockOutputWithContext(context.Context) GetDomainsDomainDomainLockOutput
}

type GetDomainsDomainDomainLockArgs struct {
	// If the Status is on, this parameter value records the reason for the lock.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The status of the domain.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetDomainsDomainDomainLockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainDomainLock)(nil)).Elem()
}

func (i GetDomainsDomainDomainLockArgs) ToGetDomainsDomainDomainLockOutput() GetDomainsDomainDomainLockOutput {
	return i.ToGetDomainsDomainDomainLockOutputWithContext(context.Background())
}

func (i GetDomainsDomainDomainLockArgs) ToGetDomainsDomainDomainLockOutputWithContext(ctx context.Context) GetDomainsDomainDomainLockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainDomainLockOutput)
}

// GetDomainsDomainDomainLockArrayInput is an input type that accepts GetDomainsDomainDomainLockArray and GetDomainsDomainDomainLockArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainDomainLockArrayInput` via:
//
//	GetDomainsDomainDomainLockArray{ GetDomainsDomainDomainLockArgs{...} }
type GetDomainsDomainDomainLockArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainDomainLockArrayOutput() GetDomainsDomainDomainLockArrayOutput
	ToGetDomainsDomainDomainLockArrayOutputWithContext(context.Context) GetDomainsDomainDomainLockArrayOutput
}

type GetDomainsDomainDomainLockArray []GetDomainsDomainDomainLockInput

func (GetDomainsDomainDomainLockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainDomainLock)(nil)).Elem()
}

func (i GetDomainsDomainDomainLockArray) ToGetDomainsDomainDomainLockArrayOutput() GetDomainsDomainDomainLockArrayOutput {
	return i.ToGetDomainsDomainDomainLockArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainDomainLockArray) ToGetDomainsDomainDomainLockArrayOutputWithContext(ctx context.Context) GetDomainsDomainDomainLockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainDomainLockArrayOutput)
}

type GetDomainsDomainDomainLockOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainDomainLockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainDomainLock)(nil)).Elem()
}

func (o GetDomainsDomainDomainLockOutput) ToGetDomainsDomainDomainLockOutput() GetDomainsDomainDomainLockOutput {
	return o
}

func (o GetDomainsDomainDomainLockOutput) ToGetDomainsDomainDomainLockOutputWithContext(ctx context.Context) GetDomainsDomainDomainLockOutput {
	return o
}

// If the Status is on, this parameter value records the reason for the lock.
func (o GetDomainsDomainDomainLockOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainDomainLock) string { return v.Remark }).(pulumi.StringOutput)
}

// The status of the domain.
func (o GetDomainsDomainDomainLockOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainDomainLock) string { return v.Status }).(pulumi.StringOutput)
}

type GetDomainsDomainDomainLockArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainDomainLockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainDomainLock)(nil)).Elem()
}

func (o GetDomainsDomainDomainLockArrayOutput) ToGetDomainsDomainDomainLockArrayOutput() GetDomainsDomainDomainLockArrayOutput {
	return o
}

func (o GetDomainsDomainDomainLockArrayOutput) ToGetDomainsDomainDomainLockArrayOutputWithContext(ctx context.Context) GetDomainsDomainDomainLockArrayOutput {
	return o
}

func (o GetDomainsDomainDomainLockArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainDomainLockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomainDomainLock {
		return vs[0].([]GetDomainsDomainDomainLock)[vs[1].(int)]
	}).(GetDomainsDomainDomainLockOutput)
}

type GetDomainsDomainTag struct {
	// The key of the tag.
	Key string `pulumi:"key"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

// GetDomainsDomainTagInput is an input type that accepts GetDomainsDomainTagArgs and GetDomainsDomainTagOutput values.
// You can construct a concrete instance of `GetDomainsDomainTagInput` via:
//
//	GetDomainsDomainTagArgs{...}
type GetDomainsDomainTagInput interface {
	pulumi.Input

	ToGetDomainsDomainTagOutput() GetDomainsDomainTagOutput
	ToGetDomainsDomainTagOutputWithContext(context.Context) GetDomainsDomainTagOutput
}

type GetDomainsDomainTagArgs struct {
	// The key of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDomainsDomainTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainTag)(nil)).Elem()
}

func (i GetDomainsDomainTagArgs) ToGetDomainsDomainTagOutput() GetDomainsDomainTagOutput {
	return i.ToGetDomainsDomainTagOutputWithContext(context.Background())
}

func (i GetDomainsDomainTagArgs) ToGetDomainsDomainTagOutputWithContext(ctx context.Context) GetDomainsDomainTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainTagOutput)
}

// GetDomainsDomainTagArrayInput is an input type that accepts GetDomainsDomainTagArray and GetDomainsDomainTagArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainTagArrayInput` via:
//
//	GetDomainsDomainTagArray{ GetDomainsDomainTagArgs{...} }
type GetDomainsDomainTagArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainTagArrayOutput() GetDomainsDomainTagArrayOutput
	ToGetDomainsDomainTagArrayOutputWithContext(context.Context) GetDomainsDomainTagArrayOutput
}

type GetDomainsDomainTagArray []GetDomainsDomainTagInput

func (GetDomainsDomainTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainTag)(nil)).Elem()
}

func (i GetDomainsDomainTagArray) ToGetDomainsDomainTagArrayOutput() GetDomainsDomainTagArrayOutput {
	return i.ToGetDomainsDomainTagArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainTagArray) ToGetDomainsDomainTagArrayOutputWithContext(ctx context.Context) GetDomainsDomainTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainTagArrayOutput)
}

type GetDomainsDomainTagOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomainTag)(nil)).Elem()
}

func (o GetDomainsDomainTagOutput) ToGetDomainsDomainTagOutput() GetDomainsDomainTagOutput {
	return o
}

func (o GetDomainsDomainTagOutput) ToGetDomainsDomainTagOutputWithContext(ctx context.Context) GetDomainsDomainTagOutput {
	return o
}

// The key of the tag.
func (o GetDomainsDomainTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the tag.
func (o GetDomainsDomainTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomainTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetDomainsDomainTagArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomainTag)(nil)).Elem()
}

func (o GetDomainsDomainTagArrayOutput) ToGetDomainsDomainTagArrayOutput() GetDomainsDomainTagArrayOutput {
	return o
}

func (o GetDomainsDomainTagArrayOutput) ToGetDomainsDomainTagArrayOutputWithContext(ctx context.Context) GetDomainsDomainTagArrayOutput {
	return o
}

func (o GetDomainsDomainTagArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomainTag {
		return vs[0].([]GetDomainsDomainTag)[vs[1].(int)]
	}).(GetDomainsDomainTagOutput)
}

type GetSharedConfigsConfigData struct {
	// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
	AllowIpAccessRules []GetSharedConfigsConfigDataAllowIpAccessRule `pulumi:"allowIpAccessRules"`
	// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
	AllowRefererAccessRules []GetSharedConfigsConfigDataAllowRefererAccessRule `pulumi:"allowRefererAccessRules"`
	// The configuration for a common list is represented by ConfigType common_match_list.
	CommonMatchLists []GetSharedConfigsConfigDataCommonMatchList `pulumi:"commonMatchLists"`
	// The name of the shared config.
	ConfigName string `pulumi:"configName"`
	// The type of the shared config.
	ConfigType string `pulumi:"configType"`
	// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
	DenyIpAccessRules []GetSharedConfigsConfigDataDenyIpAccessRule `pulumi:"denyIpAccessRules"`
	// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
	DenyRefererAccessRules []GetSharedConfigsConfigDataDenyRefererAccessRule `pulumi:"denyRefererAccessRules"`
	// The number of domains.
	DomainCount int `pulumi:"domainCount"`
	// The name of the project.
	ProjectName string `pulumi:"projectName"`
	// The update time of the shared config.
	UpdateTime int `pulumi:"updateTime"`
}

// GetSharedConfigsConfigDataInput is an input type that accepts GetSharedConfigsConfigDataArgs and GetSharedConfigsConfigDataOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataInput` via:
//
//	GetSharedConfigsConfigDataArgs{...}
type GetSharedConfigsConfigDataInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataOutput() GetSharedConfigsConfigDataOutput
	ToGetSharedConfigsConfigDataOutputWithContext(context.Context) GetSharedConfigsConfigDataOutput
}

type GetSharedConfigsConfigDataArgs struct {
	// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
	AllowIpAccessRules GetSharedConfigsConfigDataAllowIpAccessRuleArrayInput `pulumi:"allowIpAccessRules"`
	// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
	AllowRefererAccessRules GetSharedConfigsConfigDataAllowRefererAccessRuleArrayInput `pulumi:"allowRefererAccessRules"`
	// The configuration for a common list is represented by ConfigType common_match_list.
	CommonMatchLists GetSharedConfigsConfigDataCommonMatchListArrayInput `pulumi:"commonMatchLists"`
	// The name of the shared config.
	ConfigName pulumi.StringInput `pulumi:"configName"`
	// The type of the shared config.
	ConfigType pulumi.StringInput `pulumi:"configType"`
	// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
	DenyIpAccessRules GetSharedConfigsConfigDataDenyIpAccessRuleArrayInput `pulumi:"denyIpAccessRules"`
	// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
	DenyRefererAccessRules GetSharedConfigsConfigDataDenyRefererAccessRuleArrayInput `pulumi:"denyRefererAccessRules"`
	// The number of domains.
	DomainCount pulumi.IntInput `pulumi:"domainCount"`
	// The name of the project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The update time of the shared config.
	UpdateTime pulumi.IntInput `pulumi:"updateTime"`
}

func (GetSharedConfigsConfigDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigData)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataArgs) ToGetSharedConfigsConfigDataOutput() GetSharedConfigsConfigDataOutput {
	return i.ToGetSharedConfigsConfigDataOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataArgs) ToGetSharedConfigsConfigDataOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataOutput)
}

// GetSharedConfigsConfigDataArrayInput is an input type that accepts GetSharedConfigsConfigDataArray and GetSharedConfigsConfigDataArrayOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataArrayInput` via:
//
//	GetSharedConfigsConfigDataArray{ GetSharedConfigsConfigDataArgs{...} }
type GetSharedConfigsConfigDataArrayInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataArrayOutput() GetSharedConfigsConfigDataArrayOutput
	ToGetSharedConfigsConfigDataArrayOutputWithContext(context.Context) GetSharedConfigsConfigDataArrayOutput
}

type GetSharedConfigsConfigDataArray []GetSharedConfigsConfigDataInput

func (GetSharedConfigsConfigDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigData)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataArray) ToGetSharedConfigsConfigDataArrayOutput() GetSharedConfigsConfigDataArrayOutput {
	return i.ToGetSharedConfigsConfigDataArrayOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataArray) ToGetSharedConfigsConfigDataArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataArrayOutput)
}

type GetSharedConfigsConfigDataOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigData)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataOutput) ToGetSharedConfigsConfigDataOutput() GetSharedConfigsConfigDataOutput {
	return o
}

func (o GetSharedConfigsConfigDataOutput) ToGetSharedConfigsConfigDataOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataOutput {
	return o
}

// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
func (o GetSharedConfigsConfigDataOutput) AllowIpAccessRules() GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigData) []GetSharedConfigsConfigDataAllowIpAccessRule {
		return v.AllowIpAccessRules
	}).(GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput)
}

// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
func (o GetSharedConfigsConfigDataOutput) AllowRefererAccessRules() GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigData) []GetSharedConfigsConfigDataAllowRefererAccessRule {
		return v.AllowRefererAccessRules
	}).(GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput)
}

// The configuration for a common list is represented by ConfigType common_match_list.
func (o GetSharedConfigsConfigDataOutput) CommonMatchLists() GetSharedConfigsConfigDataCommonMatchListArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigData) []GetSharedConfigsConfigDataCommonMatchList {
		return v.CommonMatchLists
	}).(GetSharedConfigsConfigDataCommonMatchListArrayOutput)
}

// The name of the shared config.
func (o GetSharedConfigsConfigDataOutput) ConfigName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigData) string { return v.ConfigName }).(pulumi.StringOutput)
}

// The type of the shared config.
func (o GetSharedConfigsConfigDataOutput) ConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigData) string { return v.ConfigType }).(pulumi.StringOutput)
}

// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
func (o GetSharedConfigsConfigDataOutput) DenyIpAccessRules() GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigData) []GetSharedConfigsConfigDataDenyIpAccessRule {
		return v.DenyIpAccessRules
	}).(GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput)
}

// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
func (o GetSharedConfigsConfigDataOutput) DenyRefererAccessRules() GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigData) []GetSharedConfigsConfigDataDenyRefererAccessRule {
		return v.DenyRefererAccessRules
	}).(GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput)
}

// The number of domains.
func (o GetSharedConfigsConfigDataOutput) DomainCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigData) int { return v.DomainCount }).(pulumi.IntOutput)
}

// The name of the project.
func (o GetSharedConfigsConfigDataOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigData) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The update time of the shared config.
func (o GetSharedConfigsConfigDataOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigData) int { return v.UpdateTime }).(pulumi.IntOutput)
}

type GetSharedConfigsConfigDataArrayOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigData)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataArrayOutput) ToGetSharedConfigsConfigDataArrayOutput() GetSharedConfigsConfigDataArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataArrayOutput) ToGetSharedConfigsConfigDataArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataArrayOutput) Index(i pulumi.IntInput) GetSharedConfigsConfigDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSharedConfigsConfigData {
		return vs[0].([]GetSharedConfigsConfigData)[vs[1].(int)]
	}).(GetSharedConfigsConfigDataOutput)
}

type GetSharedConfigsConfigDataAllowIpAccessRule struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// GetSharedConfigsConfigDataAllowIpAccessRuleInput is an input type that accepts GetSharedConfigsConfigDataAllowIpAccessRuleArgs and GetSharedConfigsConfigDataAllowIpAccessRuleOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataAllowIpAccessRuleInput` via:
//
//	GetSharedConfigsConfigDataAllowIpAccessRuleArgs{...}
type GetSharedConfigsConfigDataAllowIpAccessRuleInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataAllowIpAccessRuleOutput() GetSharedConfigsConfigDataAllowIpAccessRuleOutput
	ToGetSharedConfigsConfigDataAllowIpAccessRuleOutputWithContext(context.Context) GetSharedConfigsConfigDataAllowIpAccessRuleOutput
}

type GetSharedConfigsConfigDataAllowIpAccessRuleArgs struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (GetSharedConfigsConfigDataAllowIpAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataAllowIpAccessRule)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataAllowIpAccessRuleArgs) ToGetSharedConfigsConfigDataAllowIpAccessRuleOutput() GetSharedConfigsConfigDataAllowIpAccessRuleOutput {
	return i.ToGetSharedConfigsConfigDataAllowIpAccessRuleOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataAllowIpAccessRuleArgs) ToGetSharedConfigsConfigDataAllowIpAccessRuleOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowIpAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataAllowIpAccessRuleOutput)
}

// GetSharedConfigsConfigDataAllowIpAccessRuleArrayInput is an input type that accepts GetSharedConfigsConfigDataAllowIpAccessRuleArray and GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataAllowIpAccessRuleArrayInput` via:
//
//	GetSharedConfigsConfigDataAllowIpAccessRuleArray{ GetSharedConfigsConfigDataAllowIpAccessRuleArgs{...} }
type GetSharedConfigsConfigDataAllowIpAccessRuleArrayInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput() GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput
	ToGetSharedConfigsConfigDataAllowIpAccessRuleArrayOutputWithContext(context.Context) GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput
}

type GetSharedConfigsConfigDataAllowIpAccessRuleArray []GetSharedConfigsConfigDataAllowIpAccessRuleInput

func (GetSharedConfigsConfigDataAllowIpAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataAllowIpAccessRule)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataAllowIpAccessRuleArray) ToGetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput() GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput {
	return i.ToGetSharedConfigsConfigDataAllowIpAccessRuleArrayOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataAllowIpAccessRuleArray) ToGetSharedConfigsConfigDataAllowIpAccessRuleArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput)
}

type GetSharedConfigsConfigDataAllowIpAccessRuleOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataAllowIpAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataAllowIpAccessRule)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataAllowIpAccessRuleOutput) ToGetSharedConfigsConfigDataAllowIpAccessRuleOutput() GetSharedConfigsConfigDataAllowIpAccessRuleOutput {
	return o
}

func (o GetSharedConfigsConfigDataAllowIpAccessRuleOutput) ToGetSharedConfigsConfigDataAllowIpAccessRuleOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowIpAccessRuleOutput {
	return o
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o GetSharedConfigsConfigDataAllowIpAccessRuleOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataAllowIpAccessRule) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataAllowIpAccessRule)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput) ToGetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput() GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput) ToGetSharedConfigsConfigDataAllowIpAccessRuleArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput) Index(i pulumi.IntInput) GetSharedConfigsConfigDataAllowIpAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSharedConfigsConfigDataAllowIpAccessRule {
		return vs[0].([]GetSharedConfigsConfigDataAllowIpAccessRule)[vs[1].(int)]
	}).(GetSharedConfigsConfigDataAllowIpAccessRuleOutput)
}

type GetSharedConfigsConfigDataAllowRefererAccessRule struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty bool `pulumi:"allowEmpty"`
	// The content indicating the Referer blacklist.
	CommonTypes []GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType `pulumi:"commonTypes"`
}

// GetSharedConfigsConfigDataAllowRefererAccessRuleInput is an input type that accepts GetSharedConfigsConfigDataAllowRefererAccessRuleArgs and GetSharedConfigsConfigDataAllowRefererAccessRuleOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataAllowRefererAccessRuleInput` via:
//
//	GetSharedConfigsConfigDataAllowRefererAccessRuleArgs{...}
type GetSharedConfigsConfigDataAllowRefererAccessRuleInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataAllowRefererAccessRuleOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleOutput
	ToGetSharedConfigsConfigDataAllowRefererAccessRuleOutputWithContext(context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleOutput
}

type GetSharedConfigsConfigDataAllowRefererAccessRuleArgs struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty pulumi.BoolInput `pulumi:"allowEmpty"`
	// The content indicating the Referer blacklist.
	CommonTypes GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayInput `pulumi:"commonTypes"`
}

func (GetSharedConfigsConfigDataAllowRefererAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataAllowRefererAccessRule)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataAllowRefererAccessRuleArgs) ToGetSharedConfigsConfigDataAllowRefererAccessRuleOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleOutput {
	return i.ToGetSharedConfigsConfigDataAllowRefererAccessRuleOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataAllowRefererAccessRuleArgs) ToGetSharedConfigsConfigDataAllowRefererAccessRuleOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataAllowRefererAccessRuleOutput)
}

// GetSharedConfigsConfigDataAllowRefererAccessRuleArrayInput is an input type that accepts GetSharedConfigsConfigDataAllowRefererAccessRuleArray and GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataAllowRefererAccessRuleArrayInput` via:
//
//	GetSharedConfigsConfigDataAllowRefererAccessRuleArray{ GetSharedConfigsConfigDataAllowRefererAccessRuleArgs{...} }
type GetSharedConfigsConfigDataAllowRefererAccessRuleArrayInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput
	ToGetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutputWithContext(context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput
}

type GetSharedConfigsConfigDataAllowRefererAccessRuleArray []GetSharedConfigsConfigDataAllowRefererAccessRuleInput

func (GetSharedConfigsConfigDataAllowRefererAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataAllowRefererAccessRule)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataAllowRefererAccessRuleArray) ToGetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput {
	return i.ToGetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataAllowRefererAccessRuleArray) ToGetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput)
}

type GetSharedConfigsConfigDataAllowRefererAccessRuleOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataAllowRefererAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataAllowRefererAccessRule)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataAllowRefererAccessRuleOutput) ToGetSharedConfigsConfigDataAllowRefererAccessRuleOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleOutput {
	return o
}

func (o GetSharedConfigsConfigDataAllowRefererAccessRuleOutput) ToGetSharedConfigsConfigDataAllowRefererAccessRuleOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleOutput {
	return o
}

// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
func (o GetSharedConfigsConfigDataAllowRefererAccessRuleOutput) AllowEmpty() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataAllowRefererAccessRule) bool { return v.AllowEmpty }).(pulumi.BoolOutput)
}

// The content indicating the Referer blacklist.
func (o GetSharedConfigsConfigDataAllowRefererAccessRuleOutput) CommonTypes() GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataAllowRefererAccessRule) []GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType {
		return v.CommonTypes
	}).(GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput)
}

type GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataAllowRefererAccessRule)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput) ToGetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput) ToGetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput) Index(i pulumi.IntInput) GetSharedConfigsConfigDataAllowRefererAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSharedConfigsConfigDataAllowRefererAccessRule {
		return vs[0].([]GetSharedConfigsConfigDataAllowRefererAccessRule)[vs[1].(int)]
	}).(GetSharedConfigsConfigDataAllowRefererAccessRuleOutput)
}

type GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase bool `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeInput is an input type that accepts GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs and GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeInput` via:
//
//	GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs{...}
type GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput
	ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutputWithContext(context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput
}

type GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase pulumi.BoolInput `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs) ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput {
	return i.ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs) ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput)
}

// GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayInput is an input type that accepts GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray and GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayInput` via:
//
//	GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray{ GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs{...} }
type GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput
	ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutputWithContext(context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput
}

type GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray []GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeInput

func (GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray) ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput {
	return i.ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray) ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput)
}

type GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput) ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput {
	return o
}

func (o GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput) ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput {
	return o
}

// This list is case-sensitive when matching requests. Default is true.
func (o GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput) IgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType) bool { return v.IgnoreCase }).(pulumi.BoolOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput) ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput() GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput) ToGetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput) Index(i pulumi.IntInput) GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType {
		return vs[0].([]GetSharedConfigsConfigDataAllowRefererAccessRuleCommonType)[vs[1].(int)]
	}).(GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput)
}

type GetSharedConfigsConfigDataCommonMatchList struct {
	// The content indicating the Referer blacklist.
	CommonTypes []GetSharedConfigsConfigDataCommonMatchListCommonType `pulumi:"commonTypes"`
}

// GetSharedConfigsConfigDataCommonMatchListInput is an input type that accepts GetSharedConfigsConfigDataCommonMatchListArgs and GetSharedConfigsConfigDataCommonMatchListOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataCommonMatchListInput` via:
//
//	GetSharedConfigsConfigDataCommonMatchListArgs{...}
type GetSharedConfigsConfigDataCommonMatchListInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataCommonMatchListOutput() GetSharedConfigsConfigDataCommonMatchListOutput
	ToGetSharedConfigsConfigDataCommonMatchListOutputWithContext(context.Context) GetSharedConfigsConfigDataCommonMatchListOutput
}

type GetSharedConfigsConfigDataCommonMatchListArgs struct {
	// The content indicating the Referer blacklist.
	CommonTypes GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayInput `pulumi:"commonTypes"`
}

func (GetSharedConfigsConfigDataCommonMatchListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataCommonMatchList)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataCommonMatchListArgs) ToGetSharedConfigsConfigDataCommonMatchListOutput() GetSharedConfigsConfigDataCommonMatchListOutput {
	return i.ToGetSharedConfigsConfigDataCommonMatchListOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataCommonMatchListArgs) ToGetSharedConfigsConfigDataCommonMatchListOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataCommonMatchListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataCommonMatchListOutput)
}

// GetSharedConfigsConfigDataCommonMatchListArrayInput is an input type that accepts GetSharedConfigsConfigDataCommonMatchListArray and GetSharedConfigsConfigDataCommonMatchListArrayOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataCommonMatchListArrayInput` via:
//
//	GetSharedConfigsConfigDataCommonMatchListArray{ GetSharedConfigsConfigDataCommonMatchListArgs{...} }
type GetSharedConfigsConfigDataCommonMatchListArrayInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataCommonMatchListArrayOutput() GetSharedConfigsConfigDataCommonMatchListArrayOutput
	ToGetSharedConfigsConfigDataCommonMatchListArrayOutputWithContext(context.Context) GetSharedConfigsConfigDataCommonMatchListArrayOutput
}

type GetSharedConfigsConfigDataCommonMatchListArray []GetSharedConfigsConfigDataCommonMatchListInput

func (GetSharedConfigsConfigDataCommonMatchListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataCommonMatchList)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataCommonMatchListArray) ToGetSharedConfigsConfigDataCommonMatchListArrayOutput() GetSharedConfigsConfigDataCommonMatchListArrayOutput {
	return i.ToGetSharedConfigsConfigDataCommonMatchListArrayOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataCommonMatchListArray) ToGetSharedConfigsConfigDataCommonMatchListArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataCommonMatchListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataCommonMatchListArrayOutput)
}

type GetSharedConfigsConfigDataCommonMatchListOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataCommonMatchListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataCommonMatchList)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataCommonMatchListOutput) ToGetSharedConfigsConfigDataCommonMatchListOutput() GetSharedConfigsConfigDataCommonMatchListOutput {
	return o
}

func (o GetSharedConfigsConfigDataCommonMatchListOutput) ToGetSharedConfigsConfigDataCommonMatchListOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataCommonMatchListOutput {
	return o
}

// The content indicating the Referer blacklist.
func (o GetSharedConfigsConfigDataCommonMatchListOutput) CommonTypes() GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataCommonMatchList) []GetSharedConfigsConfigDataCommonMatchListCommonType {
		return v.CommonTypes
	}).(GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput)
}

type GetSharedConfigsConfigDataCommonMatchListArrayOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataCommonMatchListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataCommonMatchList)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataCommonMatchListArrayOutput) ToGetSharedConfigsConfigDataCommonMatchListArrayOutput() GetSharedConfigsConfigDataCommonMatchListArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataCommonMatchListArrayOutput) ToGetSharedConfigsConfigDataCommonMatchListArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataCommonMatchListArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataCommonMatchListArrayOutput) Index(i pulumi.IntInput) GetSharedConfigsConfigDataCommonMatchListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSharedConfigsConfigDataCommonMatchList {
		return vs[0].([]GetSharedConfigsConfigDataCommonMatchList)[vs[1].(int)]
	}).(GetSharedConfigsConfigDataCommonMatchListOutput)
}

type GetSharedConfigsConfigDataCommonMatchListCommonType struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase bool `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// GetSharedConfigsConfigDataCommonMatchListCommonTypeInput is an input type that accepts GetSharedConfigsConfigDataCommonMatchListCommonTypeArgs and GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataCommonMatchListCommonTypeInput` via:
//
//	GetSharedConfigsConfigDataCommonMatchListCommonTypeArgs{...}
type GetSharedConfigsConfigDataCommonMatchListCommonTypeInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataCommonMatchListCommonTypeOutput() GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput
	ToGetSharedConfigsConfigDataCommonMatchListCommonTypeOutputWithContext(context.Context) GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput
}

type GetSharedConfigsConfigDataCommonMatchListCommonTypeArgs struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase pulumi.BoolInput `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (GetSharedConfigsConfigDataCommonMatchListCommonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataCommonMatchListCommonType)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataCommonMatchListCommonTypeArgs) ToGetSharedConfigsConfigDataCommonMatchListCommonTypeOutput() GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput {
	return i.ToGetSharedConfigsConfigDataCommonMatchListCommonTypeOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataCommonMatchListCommonTypeArgs) ToGetSharedConfigsConfigDataCommonMatchListCommonTypeOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput)
}

// GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayInput is an input type that accepts GetSharedConfigsConfigDataCommonMatchListCommonTypeArray and GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayInput` via:
//
//	GetSharedConfigsConfigDataCommonMatchListCommonTypeArray{ GetSharedConfigsConfigDataCommonMatchListCommonTypeArgs{...} }
type GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput() GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput
	ToGetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutputWithContext(context.Context) GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput
}

type GetSharedConfigsConfigDataCommonMatchListCommonTypeArray []GetSharedConfigsConfigDataCommonMatchListCommonTypeInput

func (GetSharedConfigsConfigDataCommonMatchListCommonTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataCommonMatchListCommonType)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataCommonMatchListCommonTypeArray) ToGetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput() GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput {
	return i.ToGetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataCommonMatchListCommonTypeArray) ToGetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput)
}

type GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataCommonMatchListCommonType)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput) ToGetSharedConfigsConfigDataCommonMatchListCommonTypeOutput() GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput {
	return o
}

func (o GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput) ToGetSharedConfigsConfigDataCommonMatchListCommonTypeOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput {
	return o
}

// This list is case-sensitive when matching requests. Default is true.
func (o GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput) IgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataCommonMatchListCommonType) bool { return v.IgnoreCase }).(pulumi.BoolOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataCommonMatchListCommonType) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataCommonMatchListCommonType)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput) ToGetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput() GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput) ToGetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput) Index(i pulumi.IntInput) GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSharedConfigsConfigDataCommonMatchListCommonType {
		return vs[0].([]GetSharedConfigsConfigDataCommonMatchListCommonType)[vs[1].(int)]
	}).(GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput)
}

type GetSharedConfigsConfigDataDenyIpAccessRule struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// GetSharedConfigsConfigDataDenyIpAccessRuleInput is an input type that accepts GetSharedConfigsConfigDataDenyIpAccessRuleArgs and GetSharedConfigsConfigDataDenyIpAccessRuleOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataDenyIpAccessRuleInput` via:
//
//	GetSharedConfigsConfigDataDenyIpAccessRuleArgs{...}
type GetSharedConfigsConfigDataDenyIpAccessRuleInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataDenyIpAccessRuleOutput() GetSharedConfigsConfigDataDenyIpAccessRuleOutput
	ToGetSharedConfigsConfigDataDenyIpAccessRuleOutputWithContext(context.Context) GetSharedConfigsConfigDataDenyIpAccessRuleOutput
}

type GetSharedConfigsConfigDataDenyIpAccessRuleArgs struct {
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (GetSharedConfigsConfigDataDenyIpAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataDenyIpAccessRule)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataDenyIpAccessRuleArgs) ToGetSharedConfigsConfigDataDenyIpAccessRuleOutput() GetSharedConfigsConfigDataDenyIpAccessRuleOutput {
	return i.ToGetSharedConfigsConfigDataDenyIpAccessRuleOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataDenyIpAccessRuleArgs) ToGetSharedConfigsConfigDataDenyIpAccessRuleOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyIpAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataDenyIpAccessRuleOutput)
}

// GetSharedConfigsConfigDataDenyIpAccessRuleArrayInput is an input type that accepts GetSharedConfigsConfigDataDenyIpAccessRuleArray and GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataDenyIpAccessRuleArrayInput` via:
//
//	GetSharedConfigsConfigDataDenyIpAccessRuleArray{ GetSharedConfigsConfigDataDenyIpAccessRuleArgs{...} }
type GetSharedConfigsConfigDataDenyIpAccessRuleArrayInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput() GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput
	ToGetSharedConfigsConfigDataDenyIpAccessRuleArrayOutputWithContext(context.Context) GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput
}

type GetSharedConfigsConfigDataDenyIpAccessRuleArray []GetSharedConfigsConfigDataDenyIpAccessRuleInput

func (GetSharedConfigsConfigDataDenyIpAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataDenyIpAccessRule)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataDenyIpAccessRuleArray) ToGetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput() GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput {
	return i.ToGetSharedConfigsConfigDataDenyIpAccessRuleArrayOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataDenyIpAccessRuleArray) ToGetSharedConfigsConfigDataDenyIpAccessRuleArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput)
}

type GetSharedConfigsConfigDataDenyIpAccessRuleOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataDenyIpAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataDenyIpAccessRule)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataDenyIpAccessRuleOutput) ToGetSharedConfigsConfigDataDenyIpAccessRuleOutput() GetSharedConfigsConfigDataDenyIpAccessRuleOutput {
	return o
}

func (o GetSharedConfigsConfigDataDenyIpAccessRuleOutput) ToGetSharedConfigsConfigDataDenyIpAccessRuleOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyIpAccessRuleOutput {
	return o
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o GetSharedConfigsConfigDataDenyIpAccessRuleOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataDenyIpAccessRule) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataDenyIpAccessRule)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput) ToGetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput() GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput) ToGetSharedConfigsConfigDataDenyIpAccessRuleArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput) Index(i pulumi.IntInput) GetSharedConfigsConfigDataDenyIpAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSharedConfigsConfigDataDenyIpAccessRule {
		return vs[0].([]GetSharedConfigsConfigDataDenyIpAccessRule)[vs[1].(int)]
	}).(GetSharedConfigsConfigDataDenyIpAccessRuleOutput)
}

type GetSharedConfigsConfigDataDenyRefererAccessRule struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty bool `pulumi:"allowEmpty"`
	// The content indicating the Referer blacklist.
	CommonTypes []GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType `pulumi:"commonTypes"`
}

// GetSharedConfigsConfigDataDenyRefererAccessRuleInput is an input type that accepts GetSharedConfigsConfigDataDenyRefererAccessRuleArgs and GetSharedConfigsConfigDataDenyRefererAccessRuleOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataDenyRefererAccessRuleInput` via:
//
//	GetSharedConfigsConfigDataDenyRefererAccessRuleArgs{...}
type GetSharedConfigsConfigDataDenyRefererAccessRuleInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataDenyRefererAccessRuleOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleOutput
	ToGetSharedConfigsConfigDataDenyRefererAccessRuleOutputWithContext(context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleOutput
}

type GetSharedConfigsConfigDataDenyRefererAccessRuleArgs struct {
	// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
	AllowEmpty pulumi.BoolInput `pulumi:"allowEmpty"`
	// The content indicating the Referer blacklist.
	CommonTypes GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayInput `pulumi:"commonTypes"`
}

func (GetSharedConfigsConfigDataDenyRefererAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataDenyRefererAccessRule)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataDenyRefererAccessRuleArgs) ToGetSharedConfigsConfigDataDenyRefererAccessRuleOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleOutput {
	return i.ToGetSharedConfigsConfigDataDenyRefererAccessRuleOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataDenyRefererAccessRuleArgs) ToGetSharedConfigsConfigDataDenyRefererAccessRuleOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataDenyRefererAccessRuleOutput)
}

// GetSharedConfigsConfigDataDenyRefererAccessRuleArrayInput is an input type that accepts GetSharedConfigsConfigDataDenyRefererAccessRuleArray and GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataDenyRefererAccessRuleArrayInput` via:
//
//	GetSharedConfigsConfigDataDenyRefererAccessRuleArray{ GetSharedConfigsConfigDataDenyRefererAccessRuleArgs{...} }
type GetSharedConfigsConfigDataDenyRefererAccessRuleArrayInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput
	ToGetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutputWithContext(context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput
}

type GetSharedConfigsConfigDataDenyRefererAccessRuleArray []GetSharedConfigsConfigDataDenyRefererAccessRuleInput

func (GetSharedConfigsConfigDataDenyRefererAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataDenyRefererAccessRule)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataDenyRefererAccessRuleArray) ToGetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput {
	return i.ToGetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataDenyRefererAccessRuleArray) ToGetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput)
}

type GetSharedConfigsConfigDataDenyRefererAccessRuleOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataDenyRefererAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataDenyRefererAccessRule)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataDenyRefererAccessRuleOutput) ToGetSharedConfigsConfigDataDenyRefererAccessRuleOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleOutput {
	return o
}

func (o GetSharedConfigsConfigDataDenyRefererAccessRuleOutput) ToGetSharedConfigsConfigDataDenyRefererAccessRuleOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleOutput {
	return o
}

// Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
func (o GetSharedConfigsConfigDataDenyRefererAccessRuleOutput) AllowEmpty() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataDenyRefererAccessRule) bool { return v.AllowEmpty }).(pulumi.BoolOutput)
}

// The content indicating the Referer blacklist.
func (o GetSharedConfigsConfigDataDenyRefererAccessRuleOutput) CommonTypes() GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataDenyRefererAccessRule) []GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType {
		return v.CommonTypes
	}).(GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput)
}

type GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataDenyRefererAccessRule)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput) ToGetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput) ToGetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput) Index(i pulumi.IntInput) GetSharedConfigsConfigDataDenyRefererAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSharedConfigsConfigDataDenyRefererAccessRule {
		return vs[0].([]GetSharedConfigsConfigDataDenyRefererAccessRule)[vs[1].(int)]
	}).(GetSharedConfigsConfigDataDenyRefererAccessRuleOutput)
}

type GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase bool `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules []string `pulumi:"rules"`
}

// GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeInput is an input type that accepts GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs and GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeInput` via:
//
//	GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs{...}
type GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput
	ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutputWithContext(context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput
}

type GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs struct {
	// This list is case-sensitive when matching requests. Default is true.
	IgnoreCase pulumi.BoolInput `pulumi:"ignoreCase"`
	// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs) ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput {
	return i.ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs) ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput)
}

// GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayInput is an input type that accepts GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray and GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput values.
// You can construct a concrete instance of `GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayInput` via:
//
//	GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray{ GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs{...} }
type GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayInput interface {
	pulumi.Input

	ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput
	ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutputWithContext(context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput
}

type GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray []GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeInput

func (GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (i GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray) ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput {
	return i.ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutputWithContext(context.Background())
}

func (i GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray) ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput)
}

type GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput) ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput {
	return o
}

func (o GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput) ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput {
	return o
}

// This list is case-sensitive when matching requests. Default is true.
func (o GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput) IgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType) bool { return v.IgnoreCase }).(pulumi.BoolOutput)
}

// The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
func (o GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput struct{ *pulumi.OutputState }

func (GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType)(nil)).Elem()
}

func (o GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput) ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput() GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput) ToGetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutputWithContext(ctx context.Context) GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput {
	return o
}

func (o GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput) Index(i pulumi.IntInput) GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType {
		return vs[0].([]GetSharedConfigsConfigDataDenyRefererAccessRuleCommonType)[vs[1].(int)]
	}).(GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDomainSharedCnameInput)(nil)).Elem(), CdnDomainSharedCnameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDomainSharedCnamePtrInput)(nil)).Elem(), CdnDomainSharedCnameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDomainTagInput)(nil)).Elem(), CdnDomainTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDomainTagArrayInput)(nil)).Elem(), CdnDomainTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesCertInfoInput)(nil)).Elem(), CertificatesCertInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesCertInfoArrayInput)(nil)).Elem(), CertificatesCertInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigsDomainConfigInput)(nil)).Elem(), ConfigsDomainConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigsDomainConfigArrayInput)(nil)).Elem(), ConfigsDomainConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainsDomainInput)(nil)).Elem(), DomainsDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainsDomainArrayInput)(nil)).Elem(), DomainsDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainsDomainDomainLockInput)(nil)).Elem(), DomainsDomainDomainLockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainsDomainDomainLockArrayInput)(nil)).Elem(), DomainsDomainDomainLockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainsDomainTagInput)(nil)).Elem(), DomainsDomainTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainsDomainTagArrayInput)(nil)).Elem(), DomainsDomainTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigAllowIpAccessRuleInput)(nil)).Elem(), SharedConfigAllowIpAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigAllowIpAccessRulePtrInput)(nil)).Elem(), SharedConfigAllowIpAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigAllowRefererAccessRuleInput)(nil)).Elem(), SharedConfigAllowRefererAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigAllowRefererAccessRulePtrInput)(nil)).Elem(), SharedConfigAllowRefererAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigAllowRefererAccessRuleCommonTypeInput)(nil)).Elem(), SharedConfigAllowRefererAccessRuleCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigAllowRefererAccessRuleCommonTypePtrInput)(nil)).Elem(), SharedConfigAllowRefererAccessRuleCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigCommonMatchListInput)(nil)).Elem(), SharedConfigCommonMatchListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigCommonMatchListPtrInput)(nil)).Elem(), SharedConfigCommonMatchListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigCommonMatchListCommonTypeInput)(nil)).Elem(), SharedConfigCommonMatchListCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigCommonMatchListCommonTypePtrInput)(nil)).Elem(), SharedConfigCommonMatchListCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigDenyIpAccessRuleInput)(nil)).Elem(), SharedConfigDenyIpAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigDenyIpAccessRulePtrInput)(nil)).Elem(), SharedConfigDenyIpAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigDenyRefererAccessRuleInput)(nil)).Elem(), SharedConfigDenyRefererAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigDenyRefererAccessRulePtrInput)(nil)).Elem(), SharedConfigDenyRefererAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigDenyRefererAccessRuleCommonTypeInput)(nil)).Elem(), SharedConfigDenyRefererAccessRuleCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigDenyRefererAccessRuleCommonTypePtrInput)(nil)).Elem(), SharedConfigDenyRefererAccessRuleCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataInput)(nil)).Elem(), SharedConfigsConfigDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataArrayInput)(nil)).Elem(), SharedConfigsConfigDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataAllowIpAccessRuleInput)(nil)).Elem(), SharedConfigsConfigDataAllowIpAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataAllowIpAccessRuleArrayInput)(nil)).Elem(), SharedConfigsConfigDataAllowIpAccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataAllowRefererAccessRuleInput)(nil)).Elem(), SharedConfigsConfigDataAllowRefererAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataAllowRefererAccessRuleArrayInput)(nil)).Elem(), SharedConfigsConfigDataAllowRefererAccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeInput)(nil)).Elem(), SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayInput)(nil)).Elem(), SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataCommonMatchListInput)(nil)).Elem(), SharedConfigsConfigDataCommonMatchListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataCommonMatchListArrayInput)(nil)).Elem(), SharedConfigsConfigDataCommonMatchListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataCommonMatchListCommonTypeInput)(nil)).Elem(), SharedConfigsConfigDataCommonMatchListCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataCommonMatchListCommonTypeArrayInput)(nil)).Elem(), SharedConfigsConfigDataCommonMatchListCommonTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataDenyIpAccessRuleInput)(nil)).Elem(), SharedConfigsConfigDataDenyIpAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataDenyIpAccessRuleArrayInput)(nil)).Elem(), SharedConfigsConfigDataDenyIpAccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataDenyRefererAccessRuleInput)(nil)).Elem(), SharedConfigsConfigDataDenyRefererAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataDenyRefererAccessRuleArrayInput)(nil)).Elem(), SharedConfigsConfigDataDenyRefererAccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeInput)(nil)).Elem(), SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayInput)(nil)).Elem(), SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertInfoInput)(nil)).Elem(), GetCertificatesCertInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertInfoArrayInput)(nil)).Elem(), GetCertificatesCertInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConfigsDomainConfigInput)(nil)).Elem(), GetConfigsDomainConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConfigsDomainConfigArrayInput)(nil)).Elem(), GetConfigsDomainConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainInput)(nil)).Elem(), GetDomainsDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainArrayInput)(nil)).Elem(), GetDomainsDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainDomainLockInput)(nil)).Elem(), GetDomainsDomainDomainLockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainDomainLockArrayInput)(nil)).Elem(), GetDomainsDomainDomainLockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainTagInput)(nil)).Elem(), GetDomainsDomainTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainsDomainTagArrayInput)(nil)).Elem(), GetDomainsDomainTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataInput)(nil)).Elem(), GetSharedConfigsConfigDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataArrayInput)(nil)).Elem(), GetSharedConfigsConfigDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataAllowIpAccessRuleInput)(nil)).Elem(), GetSharedConfigsConfigDataAllowIpAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataAllowIpAccessRuleArrayInput)(nil)).Elem(), GetSharedConfigsConfigDataAllowIpAccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataAllowRefererAccessRuleInput)(nil)).Elem(), GetSharedConfigsConfigDataAllowRefererAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataAllowRefererAccessRuleArrayInput)(nil)).Elem(), GetSharedConfigsConfigDataAllowRefererAccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeInput)(nil)).Elem(), GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayInput)(nil)).Elem(), GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataCommonMatchListInput)(nil)).Elem(), GetSharedConfigsConfigDataCommonMatchListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataCommonMatchListArrayInput)(nil)).Elem(), GetSharedConfigsConfigDataCommonMatchListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataCommonMatchListCommonTypeInput)(nil)).Elem(), GetSharedConfigsConfigDataCommonMatchListCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayInput)(nil)).Elem(), GetSharedConfigsConfigDataCommonMatchListCommonTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataDenyIpAccessRuleInput)(nil)).Elem(), GetSharedConfigsConfigDataDenyIpAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataDenyIpAccessRuleArrayInput)(nil)).Elem(), GetSharedConfigsConfigDataDenyIpAccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataDenyRefererAccessRuleInput)(nil)).Elem(), GetSharedConfigsConfigDataDenyRefererAccessRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataDenyRefererAccessRuleArrayInput)(nil)).Elem(), GetSharedConfigsConfigDataDenyRefererAccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeInput)(nil)).Elem(), GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayInput)(nil)).Elem(), GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArray{})
	pulumi.RegisterOutputType(CdnDomainSharedCnameOutput{})
	pulumi.RegisterOutputType(CdnDomainSharedCnamePtrOutput{})
	pulumi.RegisterOutputType(CdnDomainTagOutput{})
	pulumi.RegisterOutputType(CdnDomainTagArrayOutput{})
	pulumi.RegisterOutputType(CertificatesCertInfoOutput{})
	pulumi.RegisterOutputType(CertificatesCertInfoArrayOutput{})
	pulumi.RegisterOutputType(ConfigsDomainConfigOutput{})
	pulumi.RegisterOutputType(ConfigsDomainConfigArrayOutput{})
	pulumi.RegisterOutputType(DomainsDomainOutput{})
	pulumi.RegisterOutputType(DomainsDomainArrayOutput{})
	pulumi.RegisterOutputType(DomainsDomainDomainLockOutput{})
	pulumi.RegisterOutputType(DomainsDomainDomainLockArrayOutput{})
	pulumi.RegisterOutputType(DomainsDomainTagOutput{})
	pulumi.RegisterOutputType(DomainsDomainTagArrayOutput{})
	pulumi.RegisterOutputType(SharedConfigAllowIpAccessRuleOutput{})
	pulumi.RegisterOutputType(SharedConfigAllowIpAccessRulePtrOutput{})
	pulumi.RegisterOutputType(SharedConfigAllowRefererAccessRuleOutput{})
	pulumi.RegisterOutputType(SharedConfigAllowRefererAccessRulePtrOutput{})
	pulumi.RegisterOutputType(SharedConfigAllowRefererAccessRuleCommonTypeOutput{})
	pulumi.RegisterOutputType(SharedConfigAllowRefererAccessRuleCommonTypePtrOutput{})
	pulumi.RegisterOutputType(SharedConfigCommonMatchListOutput{})
	pulumi.RegisterOutputType(SharedConfigCommonMatchListPtrOutput{})
	pulumi.RegisterOutputType(SharedConfigCommonMatchListCommonTypeOutput{})
	pulumi.RegisterOutputType(SharedConfigCommonMatchListCommonTypePtrOutput{})
	pulumi.RegisterOutputType(SharedConfigDenyIpAccessRuleOutput{})
	pulumi.RegisterOutputType(SharedConfigDenyIpAccessRulePtrOutput{})
	pulumi.RegisterOutputType(SharedConfigDenyRefererAccessRuleOutput{})
	pulumi.RegisterOutputType(SharedConfigDenyRefererAccessRulePtrOutput{})
	pulumi.RegisterOutputType(SharedConfigDenyRefererAccessRuleCommonTypeOutput{})
	pulumi.RegisterOutputType(SharedConfigDenyRefererAccessRuleCommonTypePtrOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataArrayOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataAllowIpAccessRuleOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataAllowIpAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataAllowRefererAccessRuleOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataAllowRefererAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataCommonMatchListOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataCommonMatchListArrayOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataCommonMatchListCommonTypeOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataDenyIpAccessRuleOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataDenyIpAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataDenyRefererAccessRuleOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataDenyRefererAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput{})
	pulumi.RegisterOutputType(SharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertInfoOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertInfoArrayOutput{})
	pulumi.RegisterOutputType(GetConfigsDomainConfigOutput{})
	pulumi.RegisterOutputType(GetConfigsDomainConfigArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainDomainLockOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainDomainLockArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainTagOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainTagArrayOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataArrayOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataAllowIpAccessRuleOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataAllowIpAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataAllowRefererAccessRuleOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataAllowRefererAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataAllowRefererAccessRuleCommonTypeArrayOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataCommonMatchListOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataCommonMatchListArrayOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataCommonMatchListCommonTypeOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataCommonMatchListCommonTypeArrayOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataDenyIpAccessRuleOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataDenyIpAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataDenyRefererAccessRuleOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataDenyRefererAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeOutput{})
	pulumi.RegisterOutputType(GetSharedConfigsConfigDataDenyRefererAccessRuleCommonTypeArrayOutput{})
}
