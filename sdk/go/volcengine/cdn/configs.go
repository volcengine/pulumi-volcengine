// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cdn configs
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cdn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooCdnCertificate, err := cdn.NewCdnCertificate(ctx, "fooCdnCertificate", &cdn.CdnCertificateArgs{
//				Certificate: pulumi.String(""),
//				PrivateKey:  pulumi.String(""),
//				Desc:        pulumi.String("tftest"),
//				Source:      pulumi.String("cdn_cert_hosting"),
//			})
//			if err != nil {
//				return err
//			}
//			fooCdnDomain, err := cdn.NewCdnDomain(ctx, "fooCdnDomain", &cdn.CdnDomainArgs{
//				Domain:      pulumi.String("tftest.byte-test.com"),
//				ServiceType: pulumi.String("web"),
//				Tags: cdn.CdnDomainTagArray{
//					&cdn.CdnDomainTagArgs{
//						Key:   pulumi.String("tfkey1"),
//						Value: pulumi.String("tfvalue1"),
//					},
//					&cdn.CdnDomainTagArgs{
//						Key:   pulumi.String("tfkey2"),
//						Value: pulumi.String("tfvalue2"),
//					},
//				},
//				DomainConfig: fooCdnCertificate.ID().ApplyT(func(id string) (pulumi.String, error) {
//					var _zero pulumi.String
//					tmpJSON0, err := json.Marshal(map[string]interface{}{
//						"OriginProtocol": "https",
//						"Origin": []map[string]interface{}{
//							map[string]interface{}{
//								"OriginAction": map[string]interface{}{
//									"OriginLines": []map[string]interface{}{
//										map[string]interface{}{
//											"Address":             "1.1.1.1",
//											"HttpPort":            "80",
//											"HttpsPort":           "443",
//											"InstanceType":        "ip",
//											"OriginType":          "primary",
//											"PrivateBucketAccess": false,
//											"Weight":              "2",
//										},
//									},
//								},
//							},
//						},
//						"HTTPS": map[string]interface{}{
//							"CertInfo": map[string]interface{}{
//								"CertId": id,
//							},
//							"DisableHttp": false,
//							"HTTP2":       true,
//							"Switch":      true,
//							"Ocsp":        false,
//							"TlsVersion": []string{
//								"tlsv1.1",
//								"tlsv1.2",
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return pulumi.String(json0), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_ = cdn.GetConfigsOutput(ctx, cdn.GetConfigsOutputArgs{
//				Domain: fooCdnDomain.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.cdn/configs.Configs has been deprecated in favor of volcengine.cdn/getconfigs.getConfigs
func Configs(ctx *pulumi.Context, args *ConfigsArgs, opts ...pulumi.InvokeOption) (*ConfigsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ConfigsResult
	err := ctx.Invoke("volcengine:cdn/configs:Configs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Configs.
type ConfigsArgs struct {
	// The domain name.
	Domain string `pulumi:"domain"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Configs.
type ConfigsResult struct {
	// The domain name.
	Domain string `pulumi:"domain"`
	// The collection of query.
	DomainConfigs []ConfigsDomainConfig `pulumi:"domainConfigs"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func ConfigsOutput(ctx *pulumi.Context, args ConfigsOutputArgs, opts ...pulumi.InvokeOption) ConfigsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ConfigsResult, error) {
			args := v.(ConfigsArgs)
			r, err := Configs(ctx, &args, opts...)
			var s ConfigsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ConfigsResultOutput)
}

// A collection of arguments for invoking Configs.
type ConfigsOutputArgs struct {
	// The domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (ConfigsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigsArgs)(nil)).Elem()
}

// A collection of values returned by Configs.
type ConfigsResultOutput struct{ *pulumi.OutputState }

func (ConfigsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigsResult)(nil)).Elem()
}

func (o ConfigsResultOutput) ToConfigsResultOutput() ConfigsResultOutput {
	return o
}

func (o ConfigsResultOutput) ToConfigsResultOutputWithContext(ctx context.Context) ConfigsResultOutput {
	return o
}

// The domain name.
func (o ConfigsResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigsResult) string { return v.Domain }).(pulumi.StringOutput)
}

// The collection of query.
func (o ConfigsResultOutput) DomainConfigs() ConfigsDomainConfigArrayOutput {
	return o.ApplyT(func(v ConfigsResult) []ConfigsDomainConfig { return v.DomainConfigs }).(ConfigsDomainConfigArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ConfigsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ConfigsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o ConfigsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ConfigsResultOutput{})
}
