// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage cdn domain
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cdn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooCdnCertificate, err := cdn.NewCdnCertificate(ctx, "fooCdnCertificate", &cdn.CdnCertificateArgs{
//				Certificate: pulumi.String(""),
//				PrivateKey:  pulumi.String(""),
//				Desc:        pulumi.String("tftest"),
//				Source:      pulumi.String("cdn_cert_hosting"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cdn.NewCdnDomain(ctx, "fooCdnDomain", &cdn.CdnDomainArgs{
//				Domain:      pulumi.String("tftest.byte-test.com"),
//				ServiceType: pulumi.String("web"),
//				Tags: cdn.CdnDomainTagArray{
//					&cdn.CdnDomainTagArgs{
//						Key:   pulumi.String("tfkey1"),
//						Value: pulumi.String("tfvalue1"),
//					},
//					&cdn.CdnDomainTagArgs{
//						Key:   pulumi.String("tfkey2"),
//						Value: pulumi.String("tfvalue2"),
//					},
//				},
//				DomainConfig: fooCdnCertificate.ID().ApplyT(func(id string) (pulumi.String, error) {
//					var _zero pulumi.String
//					tmpJSON0, err := json.Marshal(map[string]interface{}{
//						"OriginProtocol": "https",
//						"Origin": []map[string]interface{}{
//							map[string]interface{}{
//								"OriginAction": map[string]interface{}{
//									"OriginLines": []map[string]interface{}{
//										map[string]interface{}{
//											"Address":             "1.1.1.1",
//											"HttpPort":            "80",
//											"HttpsPort":           "443",
//											"InstanceType":        "ip",
//											"OriginType":          "primary",
//											"PrivateBucketAccess": false,
//											"Weight":              "2",
//										},
//									},
//								},
//							},
//						},
//						"HTTPS": map[string]interface{}{
//							"CertInfo": map[string]interface{}{
//								"CertId": id,
//							},
//							"DisableHttp": false,
//							"HTTP2":       true,
//							"Switch":      true,
//							"Ocsp":        false,
//							"TlsVersion": []string{
//								"tlsv1.1",
//								"tlsv1.2",
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return pulumi.String(json0), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CdnDomain can be imported using the domain, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:cdn/cdnDomain:CdnDomain default www.volcengine.com
//
// ```
//
//	Please note that when you execute destroy, we will first take the domain name offline and then delete it.
type CdnDomain struct {
	pulumi.CustomResourceState

	// You need to add a domain. The main account can add up to 200 accelerated domains.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
	DomainConfig pulumi.StringOutput `pulumi:"domainConfig"`
	// The project to which this domain name belongs. Default is `default`.
	Project pulumi.StringPtrOutput `pulumi:"project"`
	// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
	ServiceRegion pulumi.StringOutput `pulumi:"serviceRegion"`
	// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// Configuration for sharing CNAME.
	SharedCname CdnDomainSharedCnamePtrOutput `pulumi:"sharedCname"`
	// The status of the domain.
	Status pulumi.StringOutput `pulumi:"status"`
	// Indicate the tags you have set for this domain name. You can set up to 10 tags.
	Tags CdnDomainTagArrayOutput `pulumi:"tags"`
}

// NewCdnDomain registers a new resource with the given unique name, arguments, and options.
func NewCdnDomain(ctx *pulumi.Context,
	name string, args *CdnDomainArgs, opts ...pulumi.ResourceOption) (*CdnDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.DomainConfig == nil {
		return nil, errors.New("invalid value for required argument 'DomainConfig'")
	}
	if args.ServiceType == nil {
		return nil, errors.New("invalid value for required argument 'ServiceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CdnDomain
	err := ctx.RegisterResource("volcengine:cdn/cdnDomain:CdnDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCdnDomain gets an existing CdnDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCdnDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CdnDomainState, opts ...pulumi.ResourceOption) (*CdnDomain, error) {
	var resource CdnDomain
	err := ctx.ReadResource("volcengine:cdn/cdnDomain:CdnDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CdnDomain resources.
type cdnDomainState struct {
	// You need to add a domain. The main account can add up to 200 accelerated domains.
	Domain *string `pulumi:"domain"`
	// Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
	DomainConfig *string `pulumi:"domainConfig"`
	// The project to which this domain name belongs. Default is `default`.
	Project *string `pulumi:"project"`
	// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
	ServiceRegion *string `pulumi:"serviceRegion"`
	// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
	ServiceType *string `pulumi:"serviceType"`
	// Configuration for sharing CNAME.
	SharedCname *CdnDomainSharedCname `pulumi:"sharedCname"`
	// The status of the domain.
	Status *string `pulumi:"status"`
	// Indicate the tags you have set for this domain name. You can set up to 10 tags.
	Tags []CdnDomainTag `pulumi:"tags"`
}

type CdnDomainState struct {
	// You need to add a domain. The main account can add up to 200 accelerated domains.
	Domain pulumi.StringPtrInput
	// Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
	DomainConfig pulumi.StringPtrInput
	// The project to which this domain name belongs. Default is `default`.
	Project pulumi.StringPtrInput
	// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
	ServiceRegion pulumi.StringPtrInput
	// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
	ServiceType pulumi.StringPtrInput
	// Configuration for sharing CNAME.
	SharedCname CdnDomainSharedCnamePtrInput
	// The status of the domain.
	Status pulumi.StringPtrInput
	// Indicate the tags you have set for this domain name. You can set up to 10 tags.
	Tags CdnDomainTagArrayInput
}

func (CdnDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*cdnDomainState)(nil)).Elem()
}

type cdnDomainArgs struct {
	// You need to add a domain. The main account can add up to 200 accelerated domains.
	Domain string `pulumi:"domain"`
	// Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
	DomainConfig string `pulumi:"domainConfig"`
	// The project to which this domain name belongs. Default is `default`.
	Project *string `pulumi:"project"`
	// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
	ServiceRegion *string `pulumi:"serviceRegion"`
	// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
	ServiceType string `pulumi:"serviceType"`
	// Configuration for sharing CNAME.
	SharedCname *CdnDomainSharedCname `pulumi:"sharedCname"`
	// Indicate the tags you have set for this domain name. You can set up to 10 tags.
	Tags []CdnDomainTag `pulumi:"tags"`
}

// The set of arguments for constructing a CdnDomain resource.
type CdnDomainArgs struct {
	// You need to add a domain. The main account can add up to 200 accelerated domains.
	Domain pulumi.StringInput
	// Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
	DomainConfig pulumi.StringInput
	// The project to which this domain name belongs. Default is `default`.
	Project pulumi.StringPtrInput
	// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
	ServiceRegion pulumi.StringPtrInput
	// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
	ServiceType pulumi.StringInput
	// Configuration for sharing CNAME.
	SharedCname CdnDomainSharedCnamePtrInput
	// Indicate the tags you have set for this domain name. You can set up to 10 tags.
	Tags CdnDomainTagArrayInput
}

func (CdnDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cdnDomainArgs)(nil)).Elem()
}

type CdnDomainInput interface {
	pulumi.Input

	ToCdnDomainOutput() CdnDomainOutput
	ToCdnDomainOutputWithContext(ctx context.Context) CdnDomainOutput
}

func (*CdnDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDomain)(nil)).Elem()
}

func (i *CdnDomain) ToCdnDomainOutput() CdnDomainOutput {
	return i.ToCdnDomainOutputWithContext(context.Background())
}

func (i *CdnDomain) ToCdnDomainOutputWithContext(ctx context.Context) CdnDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainOutput)
}

// CdnDomainArrayInput is an input type that accepts CdnDomainArray and CdnDomainArrayOutput values.
// You can construct a concrete instance of `CdnDomainArrayInput` via:
//
//	CdnDomainArray{ CdnDomainArgs{...} }
type CdnDomainArrayInput interface {
	pulumi.Input

	ToCdnDomainArrayOutput() CdnDomainArrayOutput
	ToCdnDomainArrayOutputWithContext(context.Context) CdnDomainArrayOutput
}

type CdnDomainArray []CdnDomainInput

func (CdnDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CdnDomain)(nil)).Elem()
}

func (i CdnDomainArray) ToCdnDomainArrayOutput() CdnDomainArrayOutput {
	return i.ToCdnDomainArrayOutputWithContext(context.Background())
}

func (i CdnDomainArray) ToCdnDomainArrayOutputWithContext(ctx context.Context) CdnDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainArrayOutput)
}

// CdnDomainMapInput is an input type that accepts CdnDomainMap and CdnDomainMapOutput values.
// You can construct a concrete instance of `CdnDomainMapInput` via:
//
//	CdnDomainMap{ "key": CdnDomainArgs{...} }
type CdnDomainMapInput interface {
	pulumi.Input

	ToCdnDomainMapOutput() CdnDomainMapOutput
	ToCdnDomainMapOutputWithContext(context.Context) CdnDomainMapOutput
}

type CdnDomainMap map[string]CdnDomainInput

func (CdnDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CdnDomain)(nil)).Elem()
}

func (i CdnDomainMap) ToCdnDomainMapOutput() CdnDomainMapOutput {
	return i.ToCdnDomainMapOutputWithContext(context.Background())
}

func (i CdnDomainMap) ToCdnDomainMapOutputWithContext(ctx context.Context) CdnDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainMapOutput)
}

type CdnDomainOutput struct{ *pulumi.OutputState }

func (CdnDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDomain)(nil)).Elem()
}

func (o CdnDomainOutput) ToCdnDomainOutput() CdnDomainOutput {
	return o
}

func (o CdnDomainOutput) ToCdnDomainOutputWithContext(ctx context.Context) CdnDomainOutput {
	return o
}

// You need to add a domain. The main account can add up to 200 accelerated domains.
func (o CdnDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Accelerate domain configuration. Please convert the configuration module structure into json and pass it into a string. You must specify the Origin module. The OriginProtocol parameter, OriginHost parameter, and other domain configuration modules are optional.
func (o CdnDomainOutput) DomainConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringOutput { return v.DomainConfig }).(pulumi.StringOutput)
}

// The project to which this domain name belongs. Default is `default`.
func (o CdnDomainOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

// Indicates the acceleration area. The parameter can take the following values: `chineseMainland`: Indicates mainland China. `global`: Indicates global. `outsideChineseMainland`: Indicates global (excluding mainland China).
func (o CdnDomainOutput) ServiceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringOutput { return v.ServiceRegion }).(pulumi.StringOutput)
}

// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
func (o CdnDomainOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// Configuration for sharing CNAME.
func (o CdnDomainOutput) SharedCname() CdnDomainSharedCnamePtrOutput {
	return o.ApplyT(func(v *CdnDomain) CdnDomainSharedCnamePtrOutput { return v.SharedCname }).(CdnDomainSharedCnamePtrOutput)
}

// The status of the domain.
func (o CdnDomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Indicate the tags you have set for this domain name. You can set up to 10 tags.
func (o CdnDomainOutput) Tags() CdnDomainTagArrayOutput {
	return o.ApplyT(func(v *CdnDomain) CdnDomainTagArrayOutput { return v.Tags }).(CdnDomainTagArrayOutput)
}

type CdnDomainArrayOutput struct{ *pulumi.OutputState }

func (CdnDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CdnDomain)(nil)).Elem()
}

func (o CdnDomainArrayOutput) ToCdnDomainArrayOutput() CdnDomainArrayOutput {
	return o
}

func (o CdnDomainArrayOutput) ToCdnDomainArrayOutputWithContext(ctx context.Context) CdnDomainArrayOutput {
	return o
}

func (o CdnDomainArrayOutput) Index(i pulumi.IntInput) CdnDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CdnDomain {
		return vs[0].([]*CdnDomain)[vs[1].(int)]
	}).(CdnDomainOutput)
}

type CdnDomainMapOutput struct{ *pulumi.OutputState }

func (CdnDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CdnDomain)(nil)).Elem()
}

func (o CdnDomainMapOutput) ToCdnDomainMapOutput() CdnDomainMapOutput {
	return o
}

func (o CdnDomainMapOutput) ToCdnDomainMapOutputWithContext(ctx context.Context) CdnDomainMapOutput {
	return o
}

func (o CdnDomainMapOutput) MapIndex(k pulumi.StringInput) CdnDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CdnDomain {
		return vs[0].(map[string]*CdnDomain)[vs[1].(string)]
	}).(CdnDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDomainInput)(nil)).Elem(), &CdnDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDomainArrayInput)(nil)).Elem(), CdnDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDomainMapInput)(nil)).Elem(), CdnDomainMap{})
	pulumi.RegisterOutputType(CdnDomainOutput{})
	pulumi.RegisterOutputType(CdnDomainArrayOutput{})
	pulumi.RegisterOutputType(CdnDomainMapOutput{})
}
