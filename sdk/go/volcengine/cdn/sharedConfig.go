// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage cdn shared config
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cdn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cdn.NewSharedConfig(ctx, "foo", &cdn.SharedConfigArgs{
//				AllowIpAccessRule: &cdn.SharedConfigAllowIpAccessRuleArgs{
//					Rules: pulumi.StringArray{
//						pulumi.String("1.1.1.1"),
//						pulumi.String("2.2.2.0/24"),
//						pulumi.String("3.3.3.3"),
//					},
//				},
//				AllowRefererAccessRule: &cdn.SharedConfigAllowRefererAccessRuleArgs{
//					CommonType: &cdn.SharedConfigAllowRefererAccessRuleCommonTypeArgs{
//						Rules: pulumi.StringArray{
//							pulumi.String("1.1.1.1"),
//							pulumi.String("2.2.2.0/24"),
//							pulumi.String("3.3.4.4"),
//						},
//					},
//				},
//				CommonMatchList: &cdn.SharedConfigCommonMatchListArgs{
//					CommonType: &cdn.SharedConfigCommonMatchListCommonTypeArgs{
//						Rules: pulumi.StringArray{
//							pulumi.String("1.1.1.1"),
//							pulumi.String("2.2.2.0/24"),
//						},
//					},
//				},
//				ConfigName: pulumi.String("tftest"),
//				ConfigType: pulumi.String("allow_referer_access_rule"),
//				DenyIpAccessRule: &cdn.SharedConfigDenyIpAccessRuleArgs{
//					Rules: pulumi.StringArray{
//						pulumi.String("1.1.1.1"),
//						pulumi.String("2.2.2.0/24"),
//					},
//				},
//				DenyRefererAccessRule: &cdn.SharedConfigDenyRefererAccessRuleArgs{
//					CommonType: &cdn.SharedConfigDenyRefererAccessRuleCommonTypeArgs{
//						Rules: pulumi.StringArray{
//							pulumi.String("1.1.1.1"),
//							pulumi.String("2.2.2.0/24"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CdnSharedConfig can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:cdn/sharedConfig:SharedConfig default resource_id
// ```
type SharedConfig struct {
	pulumi.CustomResourceState

	// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
	AllowIpAccessRule SharedConfigAllowIpAccessRulePtrOutput `pulumi:"allowIpAccessRule"`
	// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
	AllowRefererAccessRule SharedConfigAllowRefererAccessRulePtrOutput `pulumi:"allowRefererAccessRule"`
	// The configuration for a common list is represented by ConfigType common_match_list.
	CommonMatchList SharedConfigCommonMatchListPtrOutput `pulumi:"commonMatchList"`
	// The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
	ConfigName pulumi.StringOutput `pulumi:"configName"`
	// The type of the shared config. The type of global configuration. The parameter can have the following values: `denyIpAccessRule`: represents IP blacklist. `allowIpAccessRule`: represents IP whitelist. `denyRefererAccessRule`: represents Referer blacklist. `allowRefererAccessRule`: represents Referer whitelist. `commonMatchList`: represents common list.
	ConfigType pulumi.StringOutput `pulumi:"configType"`
	// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
	DenyIpAccessRule SharedConfigDenyIpAccessRulePtrOutput `pulumi:"denyIpAccessRule"`
	// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
	DenyRefererAccessRule SharedConfigDenyRefererAccessRulePtrOutput `pulumi:"denyRefererAccessRule"`
	// The ProjectName of the cdn shared config.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
}

// NewSharedConfig registers a new resource with the given unique name, arguments, and options.
func NewSharedConfig(ctx *pulumi.Context,
	name string, args *SharedConfigArgs, opts ...pulumi.ResourceOption) (*SharedConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigName == nil {
		return nil, errors.New("invalid value for required argument 'ConfigName'")
	}
	if args.ConfigType == nil {
		return nil, errors.New("invalid value for required argument 'ConfigType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SharedConfig
	err := ctx.RegisterResource("volcengine:cdn/sharedConfig:SharedConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedConfig gets an existing SharedConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedConfigState, opts ...pulumi.ResourceOption) (*SharedConfig, error) {
	var resource SharedConfig
	err := ctx.ReadResource("volcengine:cdn/sharedConfig:SharedConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedConfig resources.
type sharedConfigState struct {
	// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
	AllowIpAccessRule *SharedConfigAllowIpAccessRule `pulumi:"allowIpAccessRule"`
	// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
	AllowRefererAccessRule *SharedConfigAllowRefererAccessRule `pulumi:"allowRefererAccessRule"`
	// The configuration for a common list is represented by ConfigType common_match_list.
	CommonMatchList *SharedConfigCommonMatchList `pulumi:"commonMatchList"`
	// The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
	ConfigName *string `pulumi:"configName"`
	// The type of the shared config. The type of global configuration. The parameter can have the following values: `denyIpAccessRule`: represents IP blacklist. `allowIpAccessRule`: represents IP whitelist. `denyRefererAccessRule`: represents Referer blacklist. `allowRefererAccessRule`: represents Referer whitelist. `commonMatchList`: represents common list.
	ConfigType *string `pulumi:"configType"`
	// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
	DenyIpAccessRule *SharedConfigDenyIpAccessRule `pulumi:"denyIpAccessRule"`
	// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
	DenyRefererAccessRule *SharedConfigDenyRefererAccessRule `pulumi:"denyRefererAccessRule"`
	// The ProjectName of the cdn shared config.
	ProjectName *string `pulumi:"projectName"`
}

type SharedConfigState struct {
	// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
	AllowIpAccessRule SharedConfigAllowIpAccessRulePtrInput
	// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
	AllowRefererAccessRule SharedConfigAllowRefererAccessRulePtrInput
	// The configuration for a common list is represented by ConfigType common_match_list.
	CommonMatchList SharedConfigCommonMatchListPtrInput
	// The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
	ConfigName pulumi.StringPtrInput
	// The type of the shared config. The type of global configuration. The parameter can have the following values: `denyIpAccessRule`: represents IP blacklist. `allowIpAccessRule`: represents IP whitelist. `denyRefererAccessRule`: represents Referer blacklist. `allowRefererAccessRule`: represents Referer whitelist. `commonMatchList`: represents common list.
	ConfigType pulumi.StringPtrInput
	// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
	DenyIpAccessRule SharedConfigDenyIpAccessRulePtrInput
	// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
	DenyRefererAccessRule SharedConfigDenyRefererAccessRulePtrInput
	// The ProjectName of the cdn shared config.
	ProjectName pulumi.StringPtrInput
}

func (SharedConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedConfigState)(nil)).Elem()
}

type sharedConfigArgs struct {
	// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
	AllowIpAccessRule *SharedConfigAllowIpAccessRule `pulumi:"allowIpAccessRule"`
	// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
	AllowRefererAccessRule *SharedConfigAllowRefererAccessRule `pulumi:"allowRefererAccessRule"`
	// The configuration for a common list is represented by ConfigType common_match_list.
	CommonMatchList *SharedConfigCommonMatchList `pulumi:"commonMatchList"`
	// The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
	ConfigName string `pulumi:"configName"`
	// The type of the shared config. The type of global configuration. The parameter can have the following values: `denyIpAccessRule`: represents IP blacklist. `allowIpAccessRule`: represents IP whitelist. `denyRefererAccessRule`: represents Referer blacklist. `allowRefererAccessRule`: represents Referer whitelist. `commonMatchList`: represents common list.
	ConfigType string `pulumi:"configType"`
	// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
	DenyIpAccessRule *SharedConfigDenyIpAccessRule `pulumi:"denyIpAccessRule"`
	// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
	DenyRefererAccessRule *SharedConfigDenyRefererAccessRule `pulumi:"denyRefererAccessRule"`
	// The ProjectName of the cdn shared config.
	ProjectName *string `pulumi:"projectName"`
}

// The set of arguments for constructing a SharedConfig resource.
type SharedConfigArgs struct {
	// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
	AllowIpAccessRule SharedConfigAllowIpAccessRulePtrInput
	// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
	AllowRefererAccessRule SharedConfigAllowRefererAccessRulePtrInput
	// The configuration for a common list is represented by ConfigType common_match_list.
	CommonMatchList SharedConfigCommonMatchListPtrInput
	// The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
	ConfigName pulumi.StringInput
	// The type of the shared config. The type of global configuration. The parameter can have the following values: `denyIpAccessRule`: represents IP blacklist. `allowIpAccessRule`: represents IP whitelist. `denyRefererAccessRule`: represents Referer blacklist. `allowRefererAccessRule`: represents Referer whitelist. `commonMatchList`: represents common list.
	ConfigType pulumi.StringInput
	// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
	DenyIpAccessRule SharedConfigDenyIpAccessRulePtrInput
	// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
	DenyRefererAccessRule SharedConfigDenyRefererAccessRulePtrInput
	// The ProjectName of the cdn shared config.
	ProjectName pulumi.StringPtrInput
}

func (SharedConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedConfigArgs)(nil)).Elem()
}

type SharedConfigInput interface {
	pulumi.Input

	ToSharedConfigOutput() SharedConfigOutput
	ToSharedConfigOutputWithContext(ctx context.Context) SharedConfigOutput
}

func (*SharedConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfig)(nil)).Elem()
}

func (i *SharedConfig) ToSharedConfigOutput() SharedConfigOutput {
	return i.ToSharedConfigOutputWithContext(context.Background())
}

func (i *SharedConfig) ToSharedConfigOutputWithContext(ctx context.Context) SharedConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigOutput)
}

// SharedConfigArrayInput is an input type that accepts SharedConfigArray and SharedConfigArrayOutput values.
// You can construct a concrete instance of `SharedConfigArrayInput` via:
//
//	SharedConfigArray{ SharedConfigArgs{...} }
type SharedConfigArrayInput interface {
	pulumi.Input

	ToSharedConfigArrayOutput() SharedConfigArrayOutput
	ToSharedConfigArrayOutputWithContext(context.Context) SharedConfigArrayOutput
}

type SharedConfigArray []SharedConfigInput

func (SharedConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedConfig)(nil)).Elem()
}

func (i SharedConfigArray) ToSharedConfigArrayOutput() SharedConfigArrayOutput {
	return i.ToSharedConfigArrayOutputWithContext(context.Background())
}

func (i SharedConfigArray) ToSharedConfigArrayOutputWithContext(ctx context.Context) SharedConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigArrayOutput)
}

// SharedConfigMapInput is an input type that accepts SharedConfigMap and SharedConfigMapOutput values.
// You can construct a concrete instance of `SharedConfigMapInput` via:
//
//	SharedConfigMap{ "key": SharedConfigArgs{...} }
type SharedConfigMapInput interface {
	pulumi.Input

	ToSharedConfigMapOutput() SharedConfigMapOutput
	ToSharedConfigMapOutputWithContext(context.Context) SharedConfigMapOutput
}

type SharedConfigMap map[string]SharedConfigInput

func (SharedConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedConfig)(nil)).Elem()
}

func (i SharedConfigMap) ToSharedConfigMapOutput() SharedConfigMapOutput {
	return i.ToSharedConfigMapOutputWithContext(context.Background())
}

func (i SharedConfigMap) ToSharedConfigMapOutputWithContext(ctx context.Context) SharedConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedConfigMapOutput)
}

type SharedConfigOutput struct{ *pulumi.OutputState }

func (SharedConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedConfig)(nil)).Elem()
}

func (o SharedConfigOutput) ToSharedConfigOutput() SharedConfigOutput {
	return o
}

func (o SharedConfigOutput) ToSharedConfigOutputWithContext(ctx context.Context) SharedConfigOutput {
	return o
}

// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
func (o SharedConfigOutput) AllowIpAccessRule() SharedConfigAllowIpAccessRulePtrOutput {
	return o.ApplyT(func(v *SharedConfig) SharedConfigAllowIpAccessRulePtrOutput { return v.AllowIpAccessRule }).(SharedConfigAllowIpAccessRulePtrOutput)
}

// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
func (o SharedConfigOutput) AllowRefererAccessRule() SharedConfigAllowRefererAccessRulePtrOutput {
	return o.ApplyT(func(v *SharedConfig) SharedConfigAllowRefererAccessRulePtrOutput { return v.AllowRefererAccessRule }).(SharedConfigAllowRefererAccessRulePtrOutput)
}

// The configuration for a common list is represented by ConfigType common_match_list.
func (o SharedConfigOutput) CommonMatchList() SharedConfigCommonMatchListPtrOutput {
	return o.ApplyT(func(v *SharedConfig) SharedConfigCommonMatchListPtrOutput { return v.CommonMatchList }).(SharedConfigCommonMatchListPtrOutput)
}

// The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
func (o SharedConfigOutput) ConfigName() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedConfig) pulumi.StringOutput { return v.ConfigName }).(pulumi.StringOutput)
}

// The type of the shared config. The type of global configuration. The parameter can have the following values: `denyIpAccessRule`: represents IP blacklist. `allowIpAccessRule`: represents IP whitelist. `denyRefererAccessRule`: represents Referer blacklist. `allowRefererAccessRule`: represents Referer whitelist. `commonMatchList`: represents common list.
func (o SharedConfigOutput) ConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedConfig) pulumi.StringOutput { return v.ConfigType }).(pulumi.StringOutput)
}

// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
func (o SharedConfigOutput) DenyIpAccessRule() SharedConfigDenyIpAccessRulePtrOutput {
	return o.ApplyT(func(v *SharedConfig) SharedConfigDenyIpAccessRulePtrOutput { return v.DenyIpAccessRule }).(SharedConfigDenyIpAccessRulePtrOutput)
}

// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
func (o SharedConfigOutput) DenyRefererAccessRule() SharedConfigDenyRefererAccessRulePtrOutput {
	return o.ApplyT(func(v *SharedConfig) SharedConfigDenyRefererAccessRulePtrOutput { return v.DenyRefererAccessRule }).(SharedConfigDenyRefererAccessRulePtrOutput)
}

// The ProjectName of the cdn shared config.
func (o SharedConfigOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedConfig) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

type SharedConfigArrayOutput struct{ *pulumi.OutputState }

func (SharedConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedConfig)(nil)).Elem()
}

func (o SharedConfigArrayOutput) ToSharedConfigArrayOutput() SharedConfigArrayOutput {
	return o
}

func (o SharedConfigArrayOutput) ToSharedConfigArrayOutputWithContext(ctx context.Context) SharedConfigArrayOutput {
	return o
}

func (o SharedConfigArrayOutput) Index(i pulumi.IntInput) SharedConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SharedConfig {
		return vs[0].([]*SharedConfig)[vs[1].(int)]
	}).(SharedConfigOutput)
}

type SharedConfigMapOutput struct{ *pulumi.OutputState }

func (SharedConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedConfig)(nil)).Elem()
}

func (o SharedConfigMapOutput) ToSharedConfigMapOutput() SharedConfigMapOutput {
	return o
}

func (o SharedConfigMapOutput) ToSharedConfigMapOutputWithContext(ctx context.Context) SharedConfigMapOutput {
	return o
}

func (o SharedConfigMapOutput) MapIndex(k pulumi.StringInput) SharedConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SharedConfig {
		return vs[0].(map[string]*SharedConfig)[vs[1].(string)]
	}).(SharedConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigInput)(nil)).Elem(), &SharedConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigArrayInput)(nil)).Elem(), SharedConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedConfigMapInput)(nil)).Elem(), SharedConfigMap{})
	pulumi.RegisterOutputType(SharedConfigOutput{})
	pulumi.RegisterOutputType(SharedConfigArrayOutput{})
	pulumi.RegisterOutputType(SharedConfigMapOutput{})
}
