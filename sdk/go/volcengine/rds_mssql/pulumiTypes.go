// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type BackupBackupMeta struct {
	// The name of the database.
	DbName string `pulumi:"dbName"`
}

// BackupBackupMetaInput is an input type that accepts BackupBackupMetaArgs and BackupBackupMetaOutput values.
// You can construct a concrete instance of `BackupBackupMetaInput` via:
//
//	BackupBackupMetaArgs{...}
type BackupBackupMetaInput interface {
	pulumi.Input

	ToBackupBackupMetaOutput() BackupBackupMetaOutput
	ToBackupBackupMetaOutputWithContext(context.Context) BackupBackupMetaOutput
}

type BackupBackupMetaArgs struct {
	// The name of the database.
	DbName pulumi.StringInput `pulumi:"dbName"`
}

func (BackupBackupMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupBackupMeta)(nil)).Elem()
}

func (i BackupBackupMetaArgs) ToBackupBackupMetaOutput() BackupBackupMetaOutput {
	return i.ToBackupBackupMetaOutputWithContext(context.Background())
}

func (i BackupBackupMetaArgs) ToBackupBackupMetaOutputWithContext(ctx context.Context) BackupBackupMetaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupBackupMetaOutput)
}

// BackupBackupMetaArrayInput is an input type that accepts BackupBackupMetaArray and BackupBackupMetaArrayOutput values.
// You can construct a concrete instance of `BackupBackupMetaArrayInput` via:
//
//	BackupBackupMetaArray{ BackupBackupMetaArgs{...} }
type BackupBackupMetaArrayInput interface {
	pulumi.Input

	ToBackupBackupMetaArrayOutput() BackupBackupMetaArrayOutput
	ToBackupBackupMetaArrayOutputWithContext(context.Context) BackupBackupMetaArrayOutput
}

type BackupBackupMetaArray []BackupBackupMetaInput

func (BackupBackupMetaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupBackupMeta)(nil)).Elem()
}

func (i BackupBackupMetaArray) ToBackupBackupMetaArrayOutput() BackupBackupMetaArrayOutput {
	return i.ToBackupBackupMetaArrayOutputWithContext(context.Background())
}

func (i BackupBackupMetaArray) ToBackupBackupMetaArrayOutputWithContext(ctx context.Context) BackupBackupMetaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupBackupMetaArrayOutput)
}

type BackupBackupMetaOutput struct{ *pulumi.OutputState }

func (BackupBackupMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupBackupMeta)(nil)).Elem()
}

func (o BackupBackupMetaOutput) ToBackupBackupMetaOutput() BackupBackupMetaOutput {
	return o
}

func (o BackupBackupMetaOutput) ToBackupBackupMetaOutputWithContext(ctx context.Context) BackupBackupMetaOutput {
	return o
}

// The name of the database.
func (o BackupBackupMetaOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupBackupMeta) string { return v.DbName }).(pulumi.StringOutput)
}

type BackupBackupMetaArrayOutput struct{ *pulumi.OutputState }

func (BackupBackupMetaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupBackupMeta)(nil)).Elem()
}

func (o BackupBackupMetaArrayOutput) ToBackupBackupMetaArrayOutput() BackupBackupMetaArrayOutput {
	return o
}

func (o BackupBackupMetaArrayOutput) ToBackupBackupMetaArrayOutputWithContext(ctx context.Context) BackupBackupMetaArrayOutput {
	return o
}

func (o BackupBackupMetaArrayOutput) Index(i pulumi.IntInput) BackupBackupMetaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupBackupMeta {
		return vs[0].([]BackupBackupMeta)[vs[1].(int)]
	}).(BackupBackupMetaOutput)
}

type BackupsBackup struct {
	// The detail of the database.
	BackupDatabaseDetails []BackupsBackupBackupDatabaseDetail `pulumi:"backupDatabaseDetails"`
	// The end time of the backup.
	BackupEndTime string `pulumi:"backupEndTime"`
	// The size of the backup file.
	BackupFileSize int `pulumi:"backupFileSize"`
	// The id of the backup.
	BackupId string `pulumi:"backupId"`
	// The name of the backup method.
	BackupMethod string `pulumi:"backupMethod"`
	// The start time of the backup.
	BackupStartTime string `pulumi:"backupStartTime"`
	// The status of the backup.
	BackupStatus string `pulumi:"backupStatus"`
	// The type of the backup.
	BackupType string `pulumi:"backupType"`
	// The type of the backup create.
	CreateType string `pulumi:"createType"`
	// The id of the backup.
	Id string `pulumi:"id"`
}

// BackupsBackupInput is an input type that accepts BackupsBackupArgs and BackupsBackupOutput values.
// You can construct a concrete instance of `BackupsBackupInput` via:
//
//	BackupsBackupArgs{...}
type BackupsBackupInput interface {
	pulumi.Input

	ToBackupsBackupOutput() BackupsBackupOutput
	ToBackupsBackupOutputWithContext(context.Context) BackupsBackupOutput
}

type BackupsBackupArgs struct {
	// The detail of the database.
	BackupDatabaseDetails BackupsBackupBackupDatabaseDetailArrayInput `pulumi:"backupDatabaseDetails"`
	// The end time of the backup.
	BackupEndTime pulumi.StringInput `pulumi:"backupEndTime"`
	// The size of the backup file.
	BackupFileSize pulumi.IntInput `pulumi:"backupFileSize"`
	// The id of the backup.
	BackupId pulumi.StringInput `pulumi:"backupId"`
	// The name of the backup method.
	BackupMethod pulumi.StringInput `pulumi:"backupMethod"`
	// The start time of the backup.
	BackupStartTime pulumi.StringInput `pulumi:"backupStartTime"`
	// The status of the backup.
	BackupStatus pulumi.StringInput `pulumi:"backupStatus"`
	// The type of the backup.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The type of the backup create.
	CreateType pulumi.StringInput `pulumi:"createType"`
	// The id of the backup.
	Id pulumi.StringInput `pulumi:"id"`
}

func (BackupsBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsBackup)(nil)).Elem()
}

func (i BackupsBackupArgs) ToBackupsBackupOutput() BackupsBackupOutput {
	return i.ToBackupsBackupOutputWithContext(context.Background())
}

func (i BackupsBackupArgs) ToBackupsBackupOutputWithContext(ctx context.Context) BackupsBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsBackupOutput)
}

// BackupsBackupArrayInput is an input type that accepts BackupsBackupArray and BackupsBackupArrayOutput values.
// You can construct a concrete instance of `BackupsBackupArrayInput` via:
//
//	BackupsBackupArray{ BackupsBackupArgs{...} }
type BackupsBackupArrayInput interface {
	pulumi.Input

	ToBackupsBackupArrayOutput() BackupsBackupArrayOutput
	ToBackupsBackupArrayOutputWithContext(context.Context) BackupsBackupArrayOutput
}

type BackupsBackupArray []BackupsBackupInput

func (BackupsBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsBackup)(nil)).Elem()
}

func (i BackupsBackupArray) ToBackupsBackupArrayOutput() BackupsBackupArrayOutput {
	return i.ToBackupsBackupArrayOutputWithContext(context.Background())
}

func (i BackupsBackupArray) ToBackupsBackupArrayOutputWithContext(ctx context.Context) BackupsBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsBackupArrayOutput)
}

type BackupsBackupOutput struct{ *pulumi.OutputState }

func (BackupsBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsBackup)(nil)).Elem()
}

func (o BackupsBackupOutput) ToBackupsBackupOutput() BackupsBackupOutput {
	return o
}

func (o BackupsBackupOutput) ToBackupsBackupOutputWithContext(ctx context.Context) BackupsBackupOutput {
	return o
}

// The detail of the database.
func (o BackupsBackupOutput) BackupDatabaseDetails() BackupsBackupBackupDatabaseDetailArrayOutput {
	return o.ApplyT(func(v BackupsBackup) []BackupsBackupBackupDatabaseDetail { return v.BackupDatabaseDetails }).(BackupsBackupBackupDatabaseDetailArrayOutput)
}

// The end time of the backup.
func (o BackupsBackupOutput) BackupEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupEndTime }).(pulumi.StringOutput)
}

// The size of the backup file.
func (o BackupsBackupOutput) BackupFileSize() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsBackup) int { return v.BackupFileSize }).(pulumi.IntOutput)
}

// The id of the backup.
func (o BackupsBackupOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupId }).(pulumi.StringOutput)
}

// The name of the backup method.
func (o BackupsBackupOutput) BackupMethod() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupMethod }).(pulumi.StringOutput)
}

// The start time of the backup.
func (o BackupsBackupOutput) BackupStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupStartTime }).(pulumi.StringOutput)
}

// The status of the backup.
func (o BackupsBackupOutput) BackupStatus() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupStatus }).(pulumi.StringOutput)
}

// The type of the backup.
func (o BackupsBackupOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupType }).(pulumi.StringOutput)
}

// The type of the backup create.
func (o BackupsBackupOutput) CreateType() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.CreateType }).(pulumi.StringOutput)
}

// The id of the backup.
func (o BackupsBackupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.Id }).(pulumi.StringOutput)
}

type BackupsBackupArrayOutput struct{ *pulumi.OutputState }

func (BackupsBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsBackup)(nil)).Elem()
}

func (o BackupsBackupArrayOutput) ToBackupsBackupArrayOutput() BackupsBackupArrayOutput {
	return o
}

func (o BackupsBackupArrayOutput) ToBackupsBackupArrayOutputWithContext(ctx context.Context) BackupsBackupArrayOutput {
	return o
}

func (o BackupsBackupArrayOutput) Index(i pulumi.IntInput) BackupsBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupsBackup {
		return vs[0].([]BackupsBackup)[vs[1].(int)]
	}).(BackupsBackupOutput)
}

type BackupsBackupBackupDatabaseDetail struct {
	// External backup download link.
	BackupDownloadLinkEip string `pulumi:"backupDownloadLinkEip"`
	// Intranet backup download link.
	BackupDownloadLinkInner string `pulumi:"backupDownloadLinkInner"`
	// The end time of the backup.
	BackupEndTime string `pulumi:"backupEndTime"`
	// The name of the backup file.
	BackupFileName string `pulumi:"backupFileName"`
	// The size of the backup file.
	BackupFileSize int `pulumi:"backupFileSize"`
	// The start time of the backup.
	BackupStartTime string `pulumi:"backupStartTime"`
	// The type of the backup.
	BackupType string `pulumi:"backupType"`
	// The name of the database.
	DatabaseName string `pulumi:"databaseName"`
	// Backup file preparation progress, unit: %.
	DownloadProgress int `pulumi:"downloadProgress"`
	// Download status.
	DownloadStatus string `pulumi:"downloadStatus"`
	// Download link expiration time.
	LinkExpiredTime string `pulumi:"linkExpiredTime"`
}

// BackupsBackupBackupDatabaseDetailInput is an input type that accepts BackupsBackupBackupDatabaseDetailArgs and BackupsBackupBackupDatabaseDetailOutput values.
// You can construct a concrete instance of `BackupsBackupBackupDatabaseDetailInput` via:
//
//	BackupsBackupBackupDatabaseDetailArgs{...}
type BackupsBackupBackupDatabaseDetailInput interface {
	pulumi.Input

	ToBackupsBackupBackupDatabaseDetailOutput() BackupsBackupBackupDatabaseDetailOutput
	ToBackupsBackupBackupDatabaseDetailOutputWithContext(context.Context) BackupsBackupBackupDatabaseDetailOutput
}

type BackupsBackupBackupDatabaseDetailArgs struct {
	// External backup download link.
	BackupDownloadLinkEip pulumi.StringInput `pulumi:"backupDownloadLinkEip"`
	// Intranet backup download link.
	BackupDownloadLinkInner pulumi.StringInput `pulumi:"backupDownloadLinkInner"`
	// The end time of the backup.
	BackupEndTime pulumi.StringInput `pulumi:"backupEndTime"`
	// The name of the backup file.
	BackupFileName pulumi.StringInput `pulumi:"backupFileName"`
	// The size of the backup file.
	BackupFileSize pulumi.IntInput `pulumi:"backupFileSize"`
	// The start time of the backup.
	BackupStartTime pulumi.StringInput `pulumi:"backupStartTime"`
	// The type of the backup.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The name of the database.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Backup file preparation progress, unit: %.
	DownloadProgress pulumi.IntInput `pulumi:"downloadProgress"`
	// Download status.
	DownloadStatus pulumi.StringInput `pulumi:"downloadStatus"`
	// Download link expiration time.
	LinkExpiredTime pulumi.StringInput `pulumi:"linkExpiredTime"`
}

func (BackupsBackupBackupDatabaseDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsBackupBackupDatabaseDetail)(nil)).Elem()
}

func (i BackupsBackupBackupDatabaseDetailArgs) ToBackupsBackupBackupDatabaseDetailOutput() BackupsBackupBackupDatabaseDetailOutput {
	return i.ToBackupsBackupBackupDatabaseDetailOutputWithContext(context.Background())
}

func (i BackupsBackupBackupDatabaseDetailArgs) ToBackupsBackupBackupDatabaseDetailOutputWithContext(ctx context.Context) BackupsBackupBackupDatabaseDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsBackupBackupDatabaseDetailOutput)
}

// BackupsBackupBackupDatabaseDetailArrayInput is an input type that accepts BackupsBackupBackupDatabaseDetailArray and BackupsBackupBackupDatabaseDetailArrayOutput values.
// You can construct a concrete instance of `BackupsBackupBackupDatabaseDetailArrayInput` via:
//
//	BackupsBackupBackupDatabaseDetailArray{ BackupsBackupBackupDatabaseDetailArgs{...} }
type BackupsBackupBackupDatabaseDetailArrayInput interface {
	pulumi.Input

	ToBackupsBackupBackupDatabaseDetailArrayOutput() BackupsBackupBackupDatabaseDetailArrayOutput
	ToBackupsBackupBackupDatabaseDetailArrayOutputWithContext(context.Context) BackupsBackupBackupDatabaseDetailArrayOutput
}

type BackupsBackupBackupDatabaseDetailArray []BackupsBackupBackupDatabaseDetailInput

func (BackupsBackupBackupDatabaseDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsBackupBackupDatabaseDetail)(nil)).Elem()
}

func (i BackupsBackupBackupDatabaseDetailArray) ToBackupsBackupBackupDatabaseDetailArrayOutput() BackupsBackupBackupDatabaseDetailArrayOutput {
	return i.ToBackupsBackupBackupDatabaseDetailArrayOutputWithContext(context.Background())
}

func (i BackupsBackupBackupDatabaseDetailArray) ToBackupsBackupBackupDatabaseDetailArrayOutputWithContext(ctx context.Context) BackupsBackupBackupDatabaseDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsBackupBackupDatabaseDetailArrayOutput)
}

type BackupsBackupBackupDatabaseDetailOutput struct{ *pulumi.OutputState }

func (BackupsBackupBackupDatabaseDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsBackupBackupDatabaseDetail)(nil)).Elem()
}

func (o BackupsBackupBackupDatabaseDetailOutput) ToBackupsBackupBackupDatabaseDetailOutput() BackupsBackupBackupDatabaseDetailOutput {
	return o
}

func (o BackupsBackupBackupDatabaseDetailOutput) ToBackupsBackupBackupDatabaseDetailOutputWithContext(ctx context.Context) BackupsBackupBackupDatabaseDetailOutput {
	return o
}

// External backup download link.
func (o BackupsBackupBackupDatabaseDetailOutput) BackupDownloadLinkEip() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) string { return v.BackupDownloadLinkEip }).(pulumi.StringOutput)
}

// Intranet backup download link.
func (o BackupsBackupBackupDatabaseDetailOutput) BackupDownloadLinkInner() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) string { return v.BackupDownloadLinkInner }).(pulumi.StringOutput)
}

// The end time of the backup.
func (o BackupsBackupBackupDatabaseDetailOutput) BackupEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) string { return v.BackupEndTime }).(pulumi.StringOutput)
}

// The name of the backup file.
func (o BackupsBackupBackupDatabaseDetailOutput) BackupFileName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) string { return v.BackupFileName }).(pulumi.StringOutput)
}

// The size of the backup file.
func (o BackupsBackupBackupDatabaseDetailOutput) BackupFileSize() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) int { return v.BackupFileSize }).(pulumi.IntOutput)
}

// The start time of the backup.
func (o BackupsBackupBackupDatabaseDetailOutput) BackupStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) string { return v.BackupStartTime }).(pulumi.StringOutput)
}

// The type of the backup.
func (o BackupsBackupBackupDatabaseDetailOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) string { return v.BackupType }).(pulumi.StringOutput)
}

// The name of the database.
func (o BackupsBackupBackupDatabaseDetailOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Backup file preparation progress, unit: %.
func (o BackupsBackupBackupDatabaseDetailOutput) DownloadProgress() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) int { return v.DownloadProgress }).(pulumi.IntOutput)
}

// Download status.
func (o BackupsBackupBackupDatabaseDetailOutput) DownloadStatus() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) string { return v.DownloadStatus }).(pulumi.StringOutput)
}

// Download link expiration time.
func (o BackupsBackupBackupDatabaseDetailOutput) LinkExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupBackupDatabaseDetail) string { return v.LinkExpiredTime }).(pulumi.StringOutput)
}

type BackupsBackupBackupDatabaseDetailArrayOutput struct{ *pulumi.OutputState }

func (BackupsBackupBackupDatabaseDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsBackupBackupDatabaseDetail)(nil)).Elem()
}

func (o BackupsBackupBackupDatabaseDetailArrayOutput) ToBackupsBackupBackupDatabaseDetailArrayOutput() BackupsBackupBackupDatabaseDetailArrayOutput {
	return o
}

func (o BackupsBackupBackupDatabaseDetailArrayOutput) ToBackupsBackupBackupDatabaseDetailArrayOutputWithContext(ctx context.Context) BackupsBackupBackupDatabaseDetailArrayOutput {
	return o
}

func (o BackupsBackupBackupDatabaseDetailArrayOutput) Index(i pulumi.IntInput) BackupsBackupBackupDatabaseDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupsBackupBackupDatabaseDetail {
		return vs[0].([]BackupsBackupBackupDatabaseDetail)[vs[1].(int)]
	}).(BackupsBackupBackupDatabaseDetailOutput)
}

type InstanceChargeInfo struct {
	// Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when the ChargeType is `Prepaid`.
	AutoRenew       *bool   `pulumi:"autoRenew"`
	ChargeEndTime   *string `pulumi:"chargeEndTime"`
	ChargeStartTime *string `pulumi:"chargeStartTime"`
	ChargeStatus    *string `pulumi:"chargeStatus"`
	// The charge type. Valid values: `PostPaid`, `PrePaid`.
	ChargeType         string  `pulumi:"chargeType"`
	OverdueReclaimTime *string `pulumi:"overdueReclaimTime"`
	OverdueTime        *string `pulumi:"overdueTime"`
	// Purchase duration in a prepaid scenario. This parameter is required when the ChargeType is `Prepaid`.
	Period *int `pulumi:"period"`
}

// InstanceChargeInfoInput is an input type that accepts InstanceChargeInfoArgs and InstanceChargeInfoOutput values.
// You can construct a concrete instance of `InstanceChargeInfoInput` via:
//
//	InstanceChargeInfoArgs{...}
type InstanceChargeInfoInput interface {
	pulumi.Input

	ToInstanceChargeInfoOutput() InstanceChargeInfoOutput
	ToInstanceChargeInfoOutputWithContext(context.Context) InstanceChargeInfoOutput
}

type InstanceChargeInfoArgs struct {
	// Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when the ChargeType is `Prepaid`.
	AutoRenew       pulumi.BoolPtrInput   `pulumi:"autoRenew"`
	ChargeEndTime   pulumi.StringPtrInput `pulumi:"chargeEndTime"`
	ChargeStartTime pulumi.StringPtrInput `pulumi:"chargeStartTime"`
	ChargeStatus    pulumi.StringPtrInput `pulumi:"chargeStatus"`
	// The charge type. Valid values: `PostPaid`, `PrePaid`.
	ChargeType         pulumi.StringInput    `pulumi:"chargeType"`
	OverdueReclaimTime pulumi.StringPtrInput `pulumi:"overdueReclaimTime"`
	OverdueTime        pulumi.StringPtrInput `pulumi:"overdueTime"`
	// Purchase duration in a prepaid scenario. This parameter is required when the ChargeType is `Prepaid`.
	Period pulumi.IntPtrInput `pulumi:"period"`
}

func (InstanceChargeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeInfo)(nil)).Elem()
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoOutput() InstanceChargeInfoOutput {
	return i.ToInstanceChargeInfoOutputWithContext(context.Background())
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoOutputWithContext(ctx context.Context) InstanceChargeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoOutput)
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return i.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoOutput).ToInstanceChargeInfoPtrOutputWithContext(ctx)
}

// InstanceChargeInfoPtrInput is an input type that accepts InstanceChargeInfoArgs, InstanceChargeInfoPtr and InstanceChargeInfoPtrOutput values.
// You can construct a concrete instance of `InstanceChargeInfoPtrInput` via:
//
//	        InstanceChargeInfoArgs{...}
//
//	or:
//
//	        nil
type InstanceChargeInfoPtrInput interface {
	pulumi.Input

	ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput
	ToInstanceChargeInfoPtrOutputWithContext(context.Context) InstanceChargeInfoPtrOutput
}

type instanceChargeInfoPtrType InstanceChargeInfoArgs

func InstanceChargeInfoPtr(v *InstanceChargeInfoArgs) InstanceChargeInfoPtrInput {
	return (*instanceChargeInfoPtrType)(v)
}

func (*instanceChargeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceChargeInfo)(nil)).Elem()
}

func (i *instanceChargeInfoPtrType) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return i.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i *instanceChargeInfoPtrType) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoPtrOutput)
}

type InstanceChargeInfoOutput struct{ *pulumi.OutputState }

func (InstanceChargeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeInfo)(nil)).Elem()
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoOutput() InstanceChargeInfoOutput {
	return o
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoOutputWithContext(ctx context.Context) InstanceChargeInfoOutput {
	return o
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return o.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceChargeInfo) *InstanceChargeInfo {
		return &v
	}).(InstanceChargeInfoPtrOutput)
}

// Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when the ChargeType is `Prepaid`.
func (o InstanceChargeInfoOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

func (o InstanceChargeInfoOutput) ChargeEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *string { return v.ChargeEndTime }).(pulumi.StringPtrOutput)
}

func (o InstanceChargeInfoOutput) ChargeStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *string { return v.ChargeStartTime }).(pulumi.StringPtrOutput)
}

func (o InstanceChargeInfoOutput) ChargeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *string { return v.ChargeStatus }).(pulumi.StringPtrOutput)
}

// The charge type. Valid values: `PostPaid`, `PrePaid`.
func (o InstanceChargeInfoOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceChargeInfo) string { return v.ChargeType }).(pulumi.StringOutput)
}

func (o InstanceChargeInfoOutput) OverdueReclaimTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *string { return v.OverdueReclaimTime }).(pulumi.StringPtrOutput)
}

func (o InstanceChargeInfoOutput) OverdueTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *string { return v.OverdueTime }).(pulumi.StringPtrOutput)
}

// Purchase duration in a prepaid scenario. This parameter is required when the ChargeType is `Prepaid`.
func (o InstanceChargeInfoOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *int { return v.Period }).(pulumi.IntPtrOutput)
}

type InstanceChargeInfoPtrOutput struct{ *pulumi.OutputState }

func (InstanceChargeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceChargeInfo)(nil)).Elem()
}

func (o InstanceChargeInfoPtrOutput) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return o
}

func (o InstanceChargeInfoPtrOutput) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return o
}

func (o InstanceChargeInfoPtrOutput) Elem() InstanceChargeInfoOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) InstanceChargeInfo {
		if v != nil {
			return *v
		}
		var ret InstanceChargeInfo
		return ret
	}).(InstanceChargeInfoOutput)
}

// Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when the ChargeType is `Prepaid`.
func (o InstanceChargeInfoPtrOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRenew
	}).(pulumi.BoolPtrOutput)
}

func (o InstanceChargeInfoPtrOutput) ChargeEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.ChargeEndTime
	}).(pulumi.StringPtrOutput)
}

func (o InstanceChargeInfoPtrOutput) ChargeStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.ChargeStartTime
	}).(pulumi.StringPtrOutput)
}

func (o InstanceChargeInfoPtrOutput) ChargeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.ChargeStatus
	}).(pulumi.StringPtrOutput)
}

// The charge type. Valid values: `PostPaid`, `PrePaid`.
func (o InstanceChargeInfoPtrOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ChargeType
	}).(pulumi.StringPtrOutput)
}

func (o InstanceChargeInfoPtrOutput) OverdueReclaimTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.OverdueReclaimTime
	}).(pulumi.StringPtrOutput)
}

func (o InstanceChargeInfoPtrOutput) OverdueTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.OverdueTime
	}).(pulumi.StringPtrOutput)
}

// Purchase duration in a prepaid scenario. This parameter is required when the ChargeType is `Prepaid`.
func (o InstanceChargeInfoPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *int {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.IntPtrOutput)
}

type InstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstancesInstance struct {
	// The used backup space of the instance. Unit: GiB.
	BackupUse float64 `pulumi:"backupUse"`
	// The charge detail.
	ChargeDetails []InstancesInstanceChargeDetail `pulumi:"chargeDetails"`
	// The connection info of the instance.
	ConnectionInfos []InstancesInstanceConnectionInfo `pulumi:"connectionInfos"`
	// Node creation time.
	CreateTime string `pulumi:"createTime"`
	// Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// The id of the instance.
	Id string `pulumi:"id"`
	// The inner version of the instance.
	InnerVersion string `pulumi:"innerVersion"`
	// The instance category.
	InstanceCategory string `pulumi:"instanceCategory"`
	// Id of the instance.
	InstanceId string `pulumi:"instanceId"`
	// Name of the instance.
	InstanceName string `pulumi:"instanceName"`
	// Status of the instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// Instance type. Valid values: `HA`, `Basic`, `Cluster`.
	InstanceType string `pulumi:"instanceType"`
	// The Memory.
	Memory int `pulumi:"memory"`
	// Node detail information.
	NodeDetailInfos []InstancesInstanceNodeDetailInfo `pulumi:"nodeDetailInfos"`
	// The node spec.
	NodeSpec string `pulumi:"nodeSpec"`
	// The count of instance parameters.
	ParameterCount int `pulumi:"parameterCount"`
	// The list of instance parameters.
	Parameters []InstancesInstanceParameter `pulumi:"parameters"`
	// The port of the instance.
	Port string `pulumi:"port"`
	// The id of the primary instance.
	PrimaryInstanceId string `pulumi:"primaryInstanceId"`
	// The project name.
	ProjectName string `pulumi:"projectName"`
	// The number of read only instance.
	ReadOnlyNumber int `pulumi:"readOnlyNumber"`
	// The region id.
	RegionId string `pulumi:"regionId"`
	// Server sorting rules.
	ServerCollation string `pulumi:"serverCollation"`
	// Whether to enable slow query function.
	SlowQueryEnable bool `pulumi:"slowQueryEnable"`
	// The slow query time. Unit: second.
	SlowQueryTime string `pulumi:"slowQueryTime"`
	// The storage space.
	StorageSpace int `pulumi:"storageSpace"`
	// The storage type.
	StorageType string `pulumi:"storageType"`
	// The used storage space.
	StorageUse float64 `pulumi:"storageUse"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []InstancesInstanceTag `pulumi:"tags"`
	// The time zone.
	TimeZone string `pulumi:"timeZone"`
	// The update time of the instance.
	UpdateTime string `pulumi:"updateTime"`
	// The CPU size of the instance. For example: 1 represents 1U.
	VCpu int `pulumi:"vCpu"`
	// The vpc id.
	VpcId string `pulumi:"vpcId"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceInput is an input type that accepts InstancesInstanceArgs and InstancesInstanceOutput values.
// You can construct a concrete instance of `InstancesInstanceInput` via:
//
//	InstancesInstanceArgs{...}
type InstancesInstanceInput interface {
	pulumi.Input

	ToInstancesInstanceOutput() InstancesInstanceOutput
	ToInstancesInstanceOutputWithContext(context.Context) InstancesInstanceOutput
}

type InstancesInstanceArgs struct {
	// The used backup space of the instance. Unit: GiB.
	BackupUse pulumi.Float64Input `pulumi:"backupUse"`
	// The charge detail.
	ChargeDetails InstancesInstanceChargeDetailArrayInput `pulumi:"chargeDetails"`
	// The connection info of the instance.
	ConnectionInfos InstancesInstanceConnectionInfoArrayInput `pulumi:"connectionInfos"`
	// Node creation time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// The id of the instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The inner version of the instance.
	InnerVersion pulumi.StringInput `pulumi:"innerVersion"`
	// The instance category.
	InstanceCategory pulumi.StringInput `pulumi:"instanceCategory"`
	// Id of the instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Name of the instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// Status of the instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// Instance type. Valid values: `HA`, `Basic`, `Cluster`.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// The Memory.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Node detail information.
	NodeDetailInfos InstancesInstanceNodeDetailInfoArrayInput `pulumi:"nodeDetailInfos"`
	// The node spec.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// The count of instance parameters.
	ParameterCount pulumi.IntInput `pulumi:"parameterCount"`
	// The list of instance parameters.
	Parameters InstancesInstanceParameterArrayInput `pulumi:"parameters"`
	// The port of the instance.
	Port pulumi.StringInput `pulumi:"port"`
	// The id of the primary instance.
	PrimaryInstanceId pulumi.StringInput `pulumi:"primaryInstanceId"`
	// The project name.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The number of read only instance.
	ReadOnlyNumber pulumi.IntInput `pulumi:"readOnlyNumber"`
	// The region id.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Server sorting rules.
	ServerCollation pulumi.StringInput `pulumi:"serverCollation"`
	// Whether to enable slow query function.
	SlowQueryEnable pulumi.BoolInput `pulumi:"slowQueryEnable"`
	// The slow query time. Unit: second.
	SlowQueryTime pulumi.StringInput `pulumi:"slowQueryTime"`
	// The storage space.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// The storage type.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The used storage space.
	StorageUse pulumi.Float64Input `pulumi:"storageUse"`
	// The subnet id.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags InstancesInstanceTagArrayInput `pulumi:"tags"`
	// The time zone.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
	// The update time of the instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// The CPU size of the instance. For example: 1 represents 1U.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The vpc id.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return i.ToInstancesInstanceOutputWithContext(context.Background())
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceOutput)
}

// InstancesInstanceArrayInput is an input type that accepts InstancesInstanceArray and InstancesInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceArrayInput` via:
//
//	InstancesInstanceArray{ InstancesInstanceArgs{...} }
type InstancesInstanceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput
	ToInstancesInstanceArrayOutputWithContext(context.Context) InstancesInstanceArrayOutput
}

type InstancesInstanceArray []InstancesInstanceInput

func (InstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return i.ToInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceArrayOutput)
}

type InstancesInstanceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return o
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return o
}

// The used backup space of the instance. Unit: GiB.
func (o InstancesInstanceOutput) BackupUse() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstance) float64 { return v.BackupUse }).(pulumi.Float64Output)
}

// The charge detail.
func (o InstancesInstanceOutput) ChargeDetails() InstancesInstanceChargeDetailArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceChargeDetail { return v.ChargeDetails }).(InstancesInstanceChargeDetailArrayOutput)
}

// The connection info of the instance.
func (o InstancesInstanceOutput) ConnectionInfos() InstancesInstanceConnectionInfoArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceConnectionInfo { return v.ConnectionInfos }).(InstancesInstanceConnectionInfoArrayOutput)
}

// Node creation time.
func (o InstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Compatible version. Valid values: `SQLServer_2019_Std`, `SQLServer_2019_Web`, `SQLServer_2019_Ent`.
func (o InstancesInstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The id of the instance.
func (o InstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The inner version of the instance.
func (o InstancesInstanceOutput) InnerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InnerVersion }).(pulumi.StringOutput)
}

// The instance category.
func (o InstancesInstanceOutput) InstanceCategory() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceCategory }).(pulumi.StringOutput)
}

// Id of the instance.
func (o InstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Name of the instance.
func (o InstancesInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// Status of the instance.
func (o InstancesInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// Instance type. Valid values: `HA`, `Basic`, `Cluster`.
func (o InstancesInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceType }).(pulumi.StringOutput)
}

// The Memory.
func (o InstancesInstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.Memory }).(pulumi.IntOutput)
}

// Node detail information.
func (o InstancesInstanceOutput) NodeDetailInfos() InstancesInstanceNodeDetailInfoArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceNodeDetailInfo { return v.NodeDetailInfos }).(InstancesInstanceNodeDetailInfoArrayOutput)
}

// The node spec.
func (o InstancesInstanceOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// The count of instance parameters.
func (o InstancesInstanceOutput) ParameterCount() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.ParameterCount }).(pulumi.IntOutput)
}

// The list of instance parameters.
func (o InstancesInstanceOutput) Parameters() InstancesInstanceParameterArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceParameter { return v.Parameters }).(InstancesInstanceParameterArrayOutput)
}

// The port of the instance.
func (o InstancesInstanceOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Port }).(pulumi.StringOutput)
}

// The id of the primary instance.
func (o InstancesInstanceOutput) PrimaryInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.PrimaryInstanceId }).(pulumi.StringOutput)
}

// The project name.
func (o InstancesInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The number of read only instance.
func (o InstancesInstanceOutput) ReadOnlyNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.ReadOnlyNumber }).(pulumi.IntOutput)
}

// The region id.
func (o InstancesInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// Server sorting rules.
func (o InstancesInstanceOutput) ServerCollation() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ServerCollation }).(pulumi.StringOutput)
}

// Whether to enable slow query function.
func (o InstancesInstanceOutput) SlowQueryEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstance) bool { return v.SlowQueryEnable }).(pulumi.BoolOutput)
}

// The slow query time. Unit: second.
func (o InstancesInstanceOutput) SlowQueryTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.SlowQueryTime }).(pulumi.StringOutput)
}

// The storage space.
func (o InstancesInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// The storage type.
func (o InstancesInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The used storage space.
func (o InstancesInstanceOutput) StorageUse() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstance) float64 { return v.StorageUse }).(pulumi.Float64Output)
}

// The subnet id.
func (o InstancesInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o InstancesInstanceOutput) Tags() InstancesInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceTag { return v.Tags }).(InstancesInstanceTagArrayOutput)
}

// The time zone.
func (o InstancesInstanceOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.TimeZone }).(pulumi.StringOutput)
}

// The update time of the instance.
func (o InstancesInstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The CPU size of the instance. For example: 1 represents 1U.
func (o InstancesInstanceOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.VCpu }).(pulumi.IntOutput)
}

// The vpc id.
func (o InstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The id of the zone.
func (o InstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstance {
		return vs[0].([]InstancesInstance)[vs[1].(int)]
	}).(InstancesInstanceOutput)
}

type InstancesInstanceChargeDetail struct {
	// Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when ChargeType is Prepaid.
	AutoRenew bool `pulumi:"autoRenew"`
	// Charge end time.
	ChargeEndTime string `pulumi:"chargeEndTime"`
	// Charge start time.
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// The charge status.
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type. Valid values: `PostPaid`, `PrePaid`.
	ChargeType string `pulumi:"chargeType"`
	// Expected release time when overdue fees are shut down.
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// Time for Disconnection due to Unpaid Fees.
	OverdueTime string `pulumi:"overdueTime"`
	// Purchase duration in a prepaid scenario.
	Period int `pulumi:"period"`
	// Purchase cycle in prepaid scenarios. This parameter can be set when ChargeType is Prepaid.
	PeriodUnit string `pulumi:"periodUnit"`
}

// InstancesInstanceChargeDetailInput is an input type that accepts InstancesInstanceChargeDetailArgs and InstancesInstanceChargeDetailOutput values.
// You can construct a concrete instance of `InstancesInstanceChargeDetailInput` via:
//
//	InstancesInstanceChargeDetailArgs{...}
type InstancesInstanceChargeDetailInput interface {
	pulumi.Input

	ToInstancesInstanceChargeDetailOutput() InstancesInstanceChargeDetailOutput
	ToInstancesInstanceChargeDetailOutputWithContext(context.Context) InstancesInstanceChargeDetailOutput
}

type InstancesInstanceChargeDetailArgs struct {
	// Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when ChargeType is Prepaid.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// Charge end time.
	ChargeEndTime pulumi.StringInput `pulumi:"chargeEndTime"`
	// Charge start time.
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// The charge status.
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type. Valid values: `PostPaid`, `PrePaid`.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Expected release time when overdue fees are shut down.
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// Time for Disconnection due to Unpaid Fees.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// Purchase duration in a prepaid scenario.
	Period pulumi.IntInput `pulumi:"period"`
	// Purchase cycle in prepaid scenarios. This parameter can be set when ChargeType is Prepaid.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
}

func (InstancesInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceChargeDetail)(nil)).Elem()
}

func (i InstancesInstanceChargeDetailArgs) ToInstancesInstanceChargeDetailOutput() InstancesInstanceChargeDetailOutput {
	return i.ToInstancesInstanceChargeDetailOutputWithContext(context.Background())
}

func (i InstancesInstanceChargeDetailArgs) ToInstancesInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceChargeDetailOutput)
}

// InstancesInstanceChargeDetailArrayInput is an input type that accepts InstancesInstanceChargeDetailArray and InstancesInstanceChargeDetailArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceChargeDetailArrayInput` via:
//
//	InstancesInstanceChargeDetailArray{ InstancesInstanceChargeDetailArgs{...} }
type InstancesInstanceChargeDetailArrayInput interface {
	pulumi.Input

	ToInstancesInstanceChargeDetailArrayOutput() InstancesInstanceChargeDetailArrayOutput
	ToInstancesInstanceChargeDetailArrayOutputWithContext(context.Context) InstancesInstanceChargeDetailArrayOutput
}

type InstancesInstanceChargeDetailArray []InstancesInstanceChargeDetailInput

func (InstancesInstanceChargeDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceChargeDetail)(nil)).Elem()
}

func (i InstancesInstanceChargeDetailArray) ToInstancesInstanceChargeDetailArrayOutput() InstancesInstanceChargeDetailArrayOutput {
	return i.ToInstancesInstanceChargeDetailArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceChargeDetailArray) ToInstancesInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstancesInstanceChargeDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceChargeDetailArrayOutput)
}

type InstancesInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (InstancesInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceChargeDetail)(nil)).Elem()
}

func (o InstancesInstanceChargeDetailOutput) ToInstancesInstanceChargeDetailOutput() InstancesInstanceChargeDetailOutput {
	return o
}

func (o InstancesInstanceChargeDetailOutput) ToInstancesInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesInstanceChargeDetailOutput {
	return o
}

// Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when ChargeType is Prepaid.
func (o InstancesInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// Charge end time.
func (o InstancesInstanceChargeDetailOutput) ChargeEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.ChargeEndTime }).(pulumi.StringOutput)
}

// Charge start time.
func (o InstancesInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// The charge status.
func (o InstancesInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type. Valid values: `PostPaid`, `PrePaid`.
func (o InstancesInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Expected release time when overdue fees are shut down.
func (o InstancesInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// Time for Disconnection due to Unpaid Fees.
func (o InstancesInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// Purchase duration in a prepaid scenario.
func (o InstancesInstanceChargeDetailOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) int { return v.Period }).(pulumi.IntOutput)
}

// Purchase cycle in prepaid scenarios. This parameter can be set when ChargeType is Prepaid.
func (o InstancesInstanceChargeDetailOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

type InstancesInstanceChargeDetailArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceChargeDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceChargeDetail)(nil)).Elem()
}

func (o InstancesInstanceChargeDetailArrayOutput) ToInstancesInstanceChargeDetailArrayOutput() InstancesInstanceChargeDetailArrayOutput {
	return o
}

func (o InstancesInstanceChargeDetailArrayOutput) ToInstancesInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstancesInstanceChargeDetailArrayOutput {
	return o
}

func (o InstancesInstanceChargeDetailArrayOutput) Index(i pulumi.IntInput) InstancesInstanceChargeDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceChargeDetail {
		return vs[0].([]InstancesInstanceChargeDetail)[vs[1].(int)]
	}).(InstancesInstanceChargeDetailOutput)
}

type InstancesInstanceConnectionInfo struct {
	// The address info.
	Addresses []InstancesInstanceConnectionInfoAddress `pulumi:"addresses"`
	// The description.
	Description string `pulumi:"description"`
	// The endpoint id.
	EndpointId string `pulumi:"endpointId"`
	// The endpoint name.
	EndpointName string `pulumi:"endpointName"`
	// The endpoint type.
	EndpointType string `pulumi:"endpointType"`
}

// InstancesInstanceConnectionInfoInput is an input type that accepts InstancesInstanceConnectionInfoArgs and InstancesInstanceConnectionInfoOutput values.
// You can construct a concrete instance of `InstancesInstanceConnectionInfoInput` via:
//
//	InstancesInstanceConnectionInfoArgs{...}
type InstancesInstanceConnectionInfoInput interface {
	pulumi.Input

	ToInstancesInstanceConnectionInfoOutput() InstancesInstanceConnectionInfoOutput
	ToInstancesInstanceConnectionInfoOutputWithContext(context.Context) InstancesInstanceConnectionInfoOutput
}

type InstancesInstanceConnectionInfoArgs struct {
	// The address info.
	Addresses InstancesInstanceConnectionInfoAddressArrayInput `pulumi:"addresses"`
	// The description.
	Description pulumi.StringInput `pulumi:"description"`
	// The endpoint id.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The endpoint name.
	EndpointName pulumi.StringInput `pulumi:"endpointName"`
	// The endpoint type.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (InstancesInstanceConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (i InstancesInstanceConnectionInfoArgs) ToInstancesInstanceConnectionInfoOutput() InstancesInstanceConnectionInfoOutput {
	return i.ToInstancesInstanceConnectionInfoOutputWithContext(context.Background())
}

func (i InstancesInstanceConnectionInfoArgs) ToInstancesInstanceConnectionInfoOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceConnectionInfoOutput)
}

// InstancesInstanceConnectionInfoArrayInput is an input type that accepts InstancesInstanceConnectionInfoArray and InstancesInstanceConnectionInfoArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceConnectionInfoArrayInput` via:
//
//	InstancesInstanceConnectionInfoArray{ InstancesInstanceConnectionInfoArgs{...} }
type InstancesInstanceConnectionInfoArrayInput interface {
	pulumi.Input

	ToInstancesInstanceConnectionInfoArrayOutput() InstancesInstanceConnectionInfoArrayOutput
	ToInstancesInstanceConnectionInfoArrayOutputWithContext(context.Context) InstancesInstanceConnectionInfoArrayOutput
}

type InstancesInstanceConnectionInfoArray []InstancesInstanceConnectionInfoInput

func (InstancesInstanceConnectionInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (i InstancesInstanceConnectionInfoArray) ToInstancesInstanceConnectionInfoArrayOutput() InstancesInstanceConnectionInfoArrayOutput {
	return i.ToInstancesInstanceConnectionInfoArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceConnectionInfoArray) ToInstancesInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceConnectionInfoArrayOutput)
}

type InstancesInstanceConnectionInfoOutput struct{ *pulumi.OutputState }

func (InstancesInstanceConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (o InstancesInstanceConnectionInfoOutput) ToInstancesInstanceConnectionInfoOutput() InstancesInstanceConnectionInfoOutput {
	return o
}

func (o InstancesInstanceConnectionInfoOutput) ToInstancesInstanceConnectionInfoOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoOutput {
	return o
}

// The address info.
func (o InstancesInstanceConnectionInfoOutput) Addresses() InstancesInstanceConnectionInfoAddressArrayOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) []InstancesInstanceConnectionInfoAddress { return v.Addresses }).(InstancesInstanceConnectionInfoAddressArrayOutput)
}

// The description.
func (o InstancesInstanceConnectionInfoOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.Description }).(pulumi.StringOutput)
}

// The endpoint id.
func (o InstancesInstanceConnectionInfoOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The endpoint name.
func (o InstancesInstanceConnectionInfoOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.EndpointName }).(pulumi.StringOutput)
}

// The endpoint type.
func (o InstancesInstanceConnectionInfoOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.EndpointType }).(pulumi.StringOutput)
}

type InstancesInstanceConnectionInfoArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceConnectionInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (o InstancesInstanceConnectionInfoArrayOutput) ToInstancesInstanceConnectionInfoArrayOutput() InstancesInstanceConnectionInfoArrayOutput {
	return o
}

func (o InstancesInstanceConnectionInfoArrayOutput) ToInstancesInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoArrayOutput {
	return o
}

func (o InstancesInstanceConnectionInfoArrayOutput) Index(i pulumi.IntInput) InstancesInstanceConnectionInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceConnectionInfo {
		return vs[0].([]InstancesInstanceConnectionInfo)[vs[1].(int)]
	}).(InstancesInstanceConnectionInfoOutput)
}

type InstancesInstanceConnectionInfoAddress struct {
	// Whether to enable private to public network resolution.
	DnsVisibility bool `pulumi:"dnsVisibility"`
	// The domain.
	Domain string `pulumi:"domain"`
	// The eip id for public address.
	EipId string `pulumi:"eipId"`
	// The ip address.
	IpAddress string `pulumi:"ipAddress"`
	// The network type.
	NetworkType string `pulumi:"networkType"`
	// The port of the instance.
	Port string `pulumi:"port"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
}

// InstancesInstanceConnectionInfoAddressInput is an input type that accepts InstancesInstanceConnectionInfoAddressArgs and InstancesInstanceConnectionInfoAddressOutput values.
// You can construct a concrete instance of `InstancesInstanceConnectionInfoAddressInput` via:
//
//	InstancesInstanceConnectionInfoAddressArgs{...}
type InstancesInstanceConnectionInfoAddressInput interface {
	pulumi.Input

	ToInstancesInstanceConnectionInfoAddressOutput() InstancesInstanceConnectionInfoAddressOutput
	ToInstancesInstanceConnectionInfoAddressOutputWithContext(context.Context) InstancesInstanceConnectionInfoAddressOutput
}

type InstancesInstanceConnectionInfoAddressArgs struct {
	// Whether to enable private to public network resolution.
	DnsVisibility pulumi.BoolInput `pulumi:"dnsVisibility"`
	// The domain.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The eip id for public address.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The ip address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The network type.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The port of the instance.
	Port pulumi.StringInput `pulumi:"port"`
	// The subnet id.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (InstancesInstanceConnectionInfoAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceConnectionInfoAddress)(nil)).Elem()
}

func (i InstancesInstanceConnectionInfoAddressArgs) ToInstancesInstanceConnectionInfoAddressOutput() InstancesInstanceConnectionInfoAddressOutput {
	return i.ToInstancesInstanceConnectionInfoAddressOutputWithContext(context.Background())
}

func (i InstancesInstanceConnectionInfoAddressArgs) ToInstancesInstanceConnectionInfoAddressOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceConnectionInfoAddressOutput)
}

// InstancesInstanceConnectionInfoAddressArrayInput is an input type that accepts InstancesInstanceConnectionInfoAddressArray and InstancesInstanceConnectionInfoAddressArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceConnectionInfoAddressArrayInput` via:
//
//	InstancesInstanceConnectionInfoAddressArray{ InstancesInstanceConnectionInfoAddressArgs{...} }
type InstancesInstanceConnectionInfoAddressArrayInput interface {
	pulumi.Input

	ToInstancesInstanceConnectionInfoAddressArrayOutput() InstancesInstanceConnectionInfoAddressArrayOutput
	ToInstancesInstanceConnectionInfoAddressArrayOutputWithContext(context.Context) InstancesInstanceConnectionInfoAddressArrayOutput
}

type InstancesInstanceConnectionInfoAddressArray []InstancesInstanceConnectionInfoAddressInput

func (InstancesInstanceConnectionInfoAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceConnectionInfoAddress)(nil)).Elem()
}

func (i InstancesInstanceConnectionInfoAddressArray) ToInstancesInstanceConnectionInfoAddressArrayOutput() InstancesInstanceConnectionInfoAddressArrayOutput {
	return i.ToInstancesInstanceConnectionInfoAddressArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceConnectionInfoAddressArray) ToInstancesInstanceConnectionInfoAddressArrayOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceConnectionInfoAddressArrayOutput)
}

type InstancesInstanceConnectionInfoAddressOutput struct{ *pulumi.OutputState }

func (InstancesInstanceConnectionInfoAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceConnectionInfoAddress)(nil)).Elem()
}

func (o InstancesInstanceConnectionInfoAddressOutput) ToInstancesInstanceConnectionInfoAddressOutput() InstancesInstanceConnectionInfoAddressOutput {
	return o
}

func (o InstancesInstanceConnectionInfoAddressOutput) ToInstancesInstanceConnectionInfoAddressOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoAddressOutput {
	return o
}

// Whether to enable private to public network resolution.
func (o InstancesInstanceConnectionInfoAddressOutput) DnsVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfoAddress) bool { return v.DnsVisibility }).(pulumi.BoolOutput)
}

// The domain.
func (o InstancesInstanceConnectionInfoAddressOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfoAddress) string { return v.Domain }).(pulumi.StringOutput)
}

// The eip id for public address.
func (o InstancesInstanceConnectionInfoAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfoAddress) string { return v.EipId }).(pulumi.StringOutput)
}

// The ip address.
func (o InstancesInstanceConnectionInfoAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfoAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The network type.
func (o InstancesInstanceConnectionInfoAddressOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfoAddress) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The port of the instance.
func (o InstancesInstanceConnectionInfoAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfoAddress) string { return v.Port }).(pulumi.StringOutput)
}

// The subnet id.
func (o InstancesInstanceConnectionInfoAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfoAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type InstancesInstanceConnectionInfoAddressArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceConnectionInfoAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceConnectionInfoAddress)(nil)).Elem()
}

func (o InstancesInstanceConnectionInfoAddressArrayOutput) ToInstancesInstanceConnectionInfoAddressArrayOutput() InstancesInstanceConnectionInfoAddressArrayOutput {
	return o
}

func (o InstancesInstanceConnectionInfoAddressArrayOutput) ToInstancesInstanceConnectionInfoAddressArrayOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoAddressArrayOutput {
	return o
}

func (o InstancesInstanceConnectionInfoAddressArrayOutput) Index(i pulumi.IntInput) InstancesInstanceConnectionInfoAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceConnectionInfoAddress {
		return vs[0].([]InstancesInstanceConnectionInfoAddress)[vs[1].(int)]
	}).(InstancesInstanceConnectionInfoAddressOutput)
}

type InstancesInstanceNodeDetailInfo struct {
	// Node creation time.
	CreateTime string `pulumi:"createTime"`
	// Id of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The Memory.
	Memory int `pulumi:"memory"`
	// The Node ID.
	NodeId string `pulumi:"nodeId"`
	// The node ip.
	NodeIp string `pulumi:"nodeIp"`
	// The node spec.
	NodeSpec string `pulumi:"nodeSpec"`
	// The node status.
	NodeStatus string `pulumi:"nodeStatus"`
	// The node type.
	NodeType string `pulumi:"nodeType"`
	// The region id.
	RegionId string `pulumi:"regionId"`
	// The update time of the instance.
	UpdateTime string `pulumi:"updateTime"`
	// The CPU size of the instance. For example: 1 represents 1U.
	VCpu int `pulumi:"vCpu"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceNodeDetailInfoInput is an input type that accepts InstancesInstanceNodeDetailInfoArgs and InstancesInstanceNodeDetailInfoOutput values.
// You can construct a concrete instance of `InstancesInstanceNodeDetailInfoInput` via:
//
//	InstancesInstanceNodeDetailInfoArgs{...}
type InstancesInstanceNodeDetailInfoInput interface {
	pulumi.Input

	ToInstancesInstanceNodeDetailInfoOutput() InstancesInstanceNodeDetailInfoOutput
	ToInstancesInstanceNodeDetailInfoOutputWithContext(context.Context) InstancesInstanceNodeDetailInfoOutput
}

type InstancesInstanceNodeDetailInfoArgs struct {
	// Node creation time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Id of the instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The Memory.
	Memory pulumi.IntInput `pulumi:"memory"`
	// The Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// The node ip.
	NodeIp pulumi.StringInput `pulumi:"nodeIp"`
	// The node spec.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// The node status.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// The node type.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The region id.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The update time of the instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// The CPU size of the instance. For example: 1 represents 1U.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceNodeDetailInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNodeDetailInfo)(nil)).Elem()
}

func (i InstancesInstanceNodeDetailInfoArgs) ToInstancesInstanceNodeDetailInfoOutput() InstancesInstanceNodeDetailInfoOutput {
	return i.ToInstancesInstanceNodeDetailInfoOutputWithContext(context.Background())
}

func (i InstancesInstanceNodeDetailInfoArgs) ToInstancesInstanceNodeDetailInfoOutputWithContext(ctx context.Context) InstancesInstanceNodeDetailInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNodeDetailInfoOutput)
}

// InstancesInstanceNodeDetailInfoArrayInput is an input type that accepts InstancesInstanceNodeDetailInfoArray and InstancesInstanceNodeDetailInfoArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceNodeDetailInfoArrayInput` via:
//
//	InstancesInstanceNodeDetailInfoArray{ InstancesInstanceNodeDetailInfoArgs{...} }
type InstancesInstanceNodeDetailInfoArrayInput interface {
	pulumi.Input

	ToInstancesInstanceNodeDetailInfoArrayOutput() InstancesInstanceNodeDetailInfoArrayOutput
	ToInstancesInstanceNodeDetailInfoArrayOutputWithContext(context.Context) InstancesInstanceNodeDetailInfoArrayOutput
}

type InstancesInstanceNodeDetailInfoArray []InstancesInstanceNodeDetailInfoInput

func (InstancesInstanceNodeDetailInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNodeDetailInfo)(nil)).Elem()
}

func (i InstancesInstanceNodeDetailInfoArray) ToInstancesInstanceNodeDetailInfoArrayOutput() InstancesInstanceNodeDetailInfoArrayOutput {
	return i.ToInstancesInstanceNodeDetailInfoArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceNodeDetailInfoArray) ToInstancesInstanceNodeDetailInfoArrayOutputWithContext(ctx context.Context) InstancesInstanceNodeDetailInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNodeDetailInfoArrayOutput)
}

type InstancesInstanceNodeDetailInfoOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNodeDetailInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNodeDetailInfo)(nil)).Elem()
}

func (o InstancesInstanceNodeDetailInfoOutput) ToInstancesInstanceNodeDetailInfoOutput() InstancesInstanceNodeDetailInfoOutput {
	return o
}

func (o InstancesInstanceNodeDetailInfoOutput) ToInstancesInstanceNodeDetailInfoOutputWithContext(ctx context.Context) InstancesInstanceNodeDetailInfoOutput {
	return o
}

// Node creation time.
func (o InstancesInstanceNodeDetailInfoOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Id of the instance.
func (o InstancesInstanceNodeDetailInfoOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The Memory.
func (o InstancesInstanceNodeDetailInfoOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) int { return v.Memory }).(pulumi.IntOutput)
}

// The Node ID.
func (o InstancesInstanceNodeDetailInfoOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) string { return v.NodeId }).(pulumi.StringOutput)
}

// The node ip.
func (o InstancesInstanceNodeDetailInfoOutput) NodeIp() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) string { return v.NodeIp }).(pulumi.StringOutput)
}

// The node spec.
func (o InstancesInstanceNodeDetailInfoOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// The node status.
func (o InstancesInstanceNodeDetailInfoOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// The node type.
func (o InstancesInstanceNodeDetailInfoOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) string { return v.NodeType }).(pulumi.StringOutput)
}

// The region id.
func (o InstancesInstanceNodeDetailInfoOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) string { return v.RegionId }).(pulumi.StringOutput)
}

// The update time of the instance.
func (o InstancesInstanceNodeDetailInfoOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The CPU size of the instance. For example: 1 represents 1U.
func (o InstancesInstanceNodeDetailInfoOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) int { return v.VCpu }).(pulumi.IntOutput)
}

// The id of the zone.
func (o InstancesInstanceNodeDetailInfoOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNodeDetailInfo) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceNodeDetailInfoArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNodeDetailInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNodeDetailInfo)(nil)).Elem()
}

func (o InstancesInstanceNodeDetailInfoArrayOutput) ToInstancesInstanceNodeDetailInfoArrayOutput() InstancesInstanceNodeDetailInfoArrayOutput {
	return o
}

func (o InstancesInstanceNodeDetailInfoArrayOutput) ToInstancesInstanceNodeDetailInfoArrayOutputWithContext(ctx context.Context) InstancesInstanceNodeDetailInfoArrayOutput {
	return o
}

func (o InstancesInstanceNodeDetailInfoArrayOutput) Index(i pulumi.IntInput) InstancesInstanceNodeDetailInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceNodeDetailInfo {
		return vs[0].([]InstancesInstanceNodeDetailInfo)[vs[1].(int)]
	}).(InstancesInstanceNodeDetailInfoOutput)
}

type InstancesInstanceParameter struct {
	// The valid value range of the parameter.
	CheckingCode string `pulumi:"checkingCode"`
	// Indicates whether the parameter running value can be modified.
	ForceModify bool `pulumi:"forceModify"`
	// Indicates whether the instance needs to be restarted to take effect after modifying the running value of the parameter.
	ForceRestart bool `pulumi:"forceRestart"`
	// The default value of the parameter.
	ParameterDefaultValue string `pulumi:"parameterDefaultValue"`
	// The description of the parameter.
	ParameterDescription string `pulumi:"parameterDescription"`
	// The name of the parameter.
	ParameterName string `pulumi:"parameterName"`
	// The type of the parameter.
	ParameterType string `pulumi:"parameterType"`
	// The value of the parameter.
	ParameterValue string `pulumi:"parameterValue"`
}

// InstancesInstanceParameterInput is an input type that accepts InstancesInstanceParameterArgs and InstancesInstanceParameterOutput values.
// You can construct a concrete instance of `InstancesInstanceParameterInput` via:
//
//	InstancesInstanceParameterArgs{...}
type InstancesInstanceParameterInput interface {
	pulumi.Input

	ToInstancesInstanceParameterOutput() InstancesInstanceParameterOutput
	ToInstancesInstanceParameterOutputWithContext(context.Context) InstancesInstanceParameterOutput
}

type InstancesInstanceParameterArgs struct {
	// The valid value range of the parameter.
	CheckingCode pulumi.StringInput `pulumi:"checkingCode"`
	// Indicates whether the parameter running value can be modified.
	ForceModify pulumi.BoolInput `pulumi:"forceModify"`
	// Indicates whether the instance needs to be restarted to take effect after modifying the running value of the parameter.
	ForceRestart pulumi.BoolInput `pulumi:"forceRestart"`
	// The default value of the parameter.
	ParameterDefaultValue pulumi.StringInput `pulumi:"parameterDefaultValue"`
	// The description of the parameter.
	ParameterDescription pulumi.StringInput `pulumi:"parameterDescription"`
	// The name of the parameter.
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
	// The type of the parameter.
	ParameterType pulumi.StringInput `pulumi:"parameterType"`
	// The value of the parameter.
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (InstancesInstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceParameter)(nil)).Elem()
}

func (i InstancesInstanceParameterArgs) ToInstancesInstanceParameterOutput() InstancesInstanceParameterOutput {
	return i.ToInstancesInstanceParameterOutputWithContext(context.Background())
}

func (i InstancesInstanceParameterArgs) ToInstancesInstanceParameterOutputWithContext(ctx context.Context) InstancesInstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceParameterOutput)
}

// InstancesInstanceParameterArrayInput is an input type that accepts InstancesInstanceParameterArray and InstancesInstanceParameterArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceParameterArrayInput` via:
//
//	InstancesInstanceParameterArray{ InstancesInstanceParameterArgs{...} }
type InstancesInstanceParameterArrayInput interface {
	pulumi.Input

	ToInstancesInstanceParameterArrayOutput() InstancesInstanceParameterArrayOutput
	ToInstancesInstanceParameterArrayOutputWithContext(context.Context) InstancesInstanceParameterArrayOutput
}

type InstancesInstanceParameterArray []InstancesInstanceParameterInput

func (InstancesInstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceParameter)(nil)).Elem()
}

func (i InstancesInstanceParameterArray) ToInstancesInstanceParameterArrayOutput() InstancesInstanceParameterArrayOutput {
	return i.ToInstancesInstanceParameterArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceParameterArray) ToInstancesInstanceParameterArrayOutputWithContext(ctx context.Context) InstancesInstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceParameterArrayOutput)
}

type InstancesInstanceParameterOutput struct{ *pulumi.OutputState }

func (InstancesInstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceParameter)(nil)).Elem()
}

func (o InstancesInstanceParameterOutput) ToInstancesInstanceParameterOutput() InstancesInstanceParameterOutput {
	return o
}

func (o InstancesInstanceParameterOutput) ToInstancesInstanceParameterOutputWithContext(ctx context.Context) InstancesInstanceParameterOutput {
	return o
}

// The valid value range of the parameter.
func (o InstancesInstanceParameterOutput) CheckingCode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) string { return v.CheckingCode }).(pulumi.StringOutput)
}

// Indicates whether the parameter running value can be modified.
func (o InstancesInstanceParameterOutput) ForceModify() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) bool { return v.ForceModify }).(pulumi.BoolOutput)
}

// Indicates whether the instance needs to be restarted to take effect after modifying the running value of the parameter.
func (o InstancesInstanceParameterOutput) ForceRestart() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) bool { return v.ForceRestart }).(pulumi.BoolOutput)
}

// The default value of the parameter.
func (o InstancesInstanceParameterOutput) ParameterDefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) string { return v.ParameterDefaultValue }).(pulumi.StringOutput)
}

// The description of the parameter.
func (o InstancesInstanceParameterOutput) ParameterDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) string { return v.ParameterDescription }).(pulumi.StringOutput)
}

// The name of the parameter.
func (o InstancesInstanceParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

// The type of the parameter.
func (o InstancesInstanceParameterOutput) ParameterType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) string { return v.ParameterType }).(pulumi.StringOutput)
}

// The value of the parameter.
func (o InstancesInstanceParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type InstancesInstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceParameter)(nil)).Elem()
}

func (o InstancesInstanceParameterArrayOutput) ToInstancesInstanceParameterArrayOutput() InstancesInstanceParameterArrayOutput {
	return o
}

func (o InstancesInstanceParameterArrayOutput) ToInstancesInstanceParameterArrayOutputWithContext(ctx context.Context) InstancesInstanceParameterArrayOutput {
	return o
}

func (o InstancesInstanceParameterArrayOutput) Index(i pulumi.IntInput) InstancesInstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceParameter {
		return vs[0].([]InstancesInstanceParameter)[vs[1].(int)]
	}).(InstancesInstanceParameterOutput)
}

type InstancesInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesInstanceTagInput is an input type that accepts InstancesInstanceTagArgs and InstancesInstanceTagOutput values.
// You can construct a concrete instance of `InstancesInstanceTagInput` via:
//
//	InstancesInstanceTagArgs{...}
type InstancesInstanceTagInput interface {
	pulumi.Input

	ToInstancesInstanceTagOutput() InstancesInstanceTagOutput
	ToInstancesInstanceTagOutputWithContext(context.Context) InstancesInstanceTagOutput
}

type InstancesInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return i.ToInstancesInstanceTagOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagOutput)
}

// InstancesInstanceTagArrayInput is an input type that accepts InstancesInstanceTagArray and InstancesInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceTagArrayInput` via:
//
//	InstancesInstanceTagArray{ InstancesInstanceTagArgs{...} }
type InstancesInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput
	ToInstancesInstanceTagArrayOutputWithContext(context.Context) InstancesInstanceTagArrayOutput
}

type InstancesInstanceTagArray []InstancesInstanceTagInput

func (InstancesInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return i.ToInstancesInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagArrayOutput)
}

type InstancesInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return o
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceTag {
		return vs[0].([]InstancesInstanceTag)[vs[1].(int)]
	}).(InstancesInstanceTagOutput)
}

type InstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

type RegionsRegion struct {
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// The name of region.
	RegionName string `pulumi:"regionName"`
}

// RegionsRegionInput is an input type that accepts RegionsRegionArgs and RegionsRegionOutput values.
// You can construct a concrete instance of `RegionsRegionInput` via:
//
//	RegionsRegionArgs{...}
type RegionsRegionInput interface {
	pulumi.Input

	ToRegionsRegionOutput() RegionsRegionOutput
	ToRegionsRegionOutputWithContext(context.Context) RegionsRegionOutput
}

type RegionsRegionArgs struct {
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The name of region.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (RegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArgs) ToRegionsRegionOutput() RegionsRegionOutput {
	return i.ToRegionsRegionOutputWithContext(context.Background())
}

func (i RegionsRegionArgs) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionOutput)
}

// RegionsRegionArrayInput is an input type that accepts RegionsRegionArray and RegionsRegionArrayOutput values.
// You can construct a concrete instance of `RegionsRegionArrayInput` via:
//
//	RegionsRegionArray{ RegionsRegionArgs{...} }
type RegionsRegionArrayInput interface {
	pulumi.Input

	ToRegionsRegionArrayOutput() RegionsRegionArrayOutput
	ToRegionsRegionArrayOutputWithContext(context.Context) RegionsRegionArrayOutput
}

type RegionsRegionArray []RegionsRegionInput

func (RegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return i.ToRegionsRegionArrayOutputWithContext(context.Background())
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionArrayOutput)
}

type RegionsRegionOutput struct{ *pulumi.OutputState }

func (RegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionOutput) ToRegionsRegionOutput() RegionsRegionOutput {
	return o
}

func (o RegionsRegionOutput) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return o
}

// The id of the region.
func (o RegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

// The name of region.
func (o RegionsRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionName }).(pulumi.StringOutput)
}

type RegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (RegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) Index(i pulumi.IntInput) RegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionsRegion {
		return vs[0].([]RegionsRegion)[vs[1].(int)]
	}).(RegionsRegionOutput)
}

type ZonesZone struct {
	// The description of the zone.
	Description string `pulumi:"description"`
	// The id of the zone.
	Id string `pulumi:"id"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName string `pulumi:"zoneName"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//	ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	// The description of the zone.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//	ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

// The description of the zone.
func (o ZonesZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

// The name of the zone.
func (o ZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupBackupMetaInput)(nil)).Elem(), BackupBackupMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupBackupMetaArrayInput)(nil)).Elem(), BackupBackupMetaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsBackupInput)(nil)).Elem(), BackupsBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsBackupArrayInput)(nil)).Elem(), BackupsBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsBackupBackupDatabaseDetailInput)(nil)).Elem(), BackupsBackupBackupDatabaseDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsBackupBackupDatabaseDetailArrayInput)(nil)).Elem(), BackupsBackupBackupDatabaseDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeInfoInput)(nil)).Elem(), InstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeInfoPtrInput)(nil)).Elem(), InstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceInput)(nil)).Elem(), InstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceArrayInput)(nil)).Elem(), InstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceChargeDetailInput)(nil)).Elem(), InstancesInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceChargeDetailArrayInput)(nil)).Elem(), InstancesInstanceChargeDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceConnectionInfoInput)(nil)).Elem(), InstancesInstanceConnectionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceConnectionInfoArrayInput)(nil)).Elem(), InstancesInstanceConnectionInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceConnectionInfoAddressInput)(nil)).Elem(), InstancesInstanceConnectionInfoAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceConnectionInfoAddressArrayInput)(nil)).Elem(), InstancesInstanceConnectionInfoAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNodeDetailInfoInput)(nil)).Elem(), InstancesInstanceNodeDetailInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNodeDetailInfoArrayInput)(nil)).Elem(), InstancesInstanceNodeDetailInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceParameterInput)(nil)).Elem(), InstancesInstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceParameterArrayInput)(nil)).Elem(), InstancesInstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagInput)(nil)).Elem(), InstancesInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagArrayInput)(nil)).Elem(), InstancesInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionInput)(nil)).Elem(), RegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionArrayInput)(nil)).Elem(), RegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterOutputType(BackupBackupMetaOutput{})
	pulumi.RegisterOutputType(BackupBackupMetaArrayOutput{})
	pulumi.RegisterOutputType(BackupsBackupOutput{})
	pulumi.RegisterOutputType(BackupsBackupArrayOutput{})
	pulumi.RegisterOutputType(BackupsBackupBackupDatabaseDetailOutput{})
	pulumi.RegisterOutputType(BackupsBackupBackupDatabaseDetailArrayOutput{})
	pulumi.RegisterOutputType(InstanceChargeInfoOutput{})
	pulumi.RegisterOutputType(InstanceChargeInfoPtrOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(InstancesInstanceChargeDetailArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceConnectionInfoOutput{})
	pulumi.RegisterOutputType(InstancesInstanceConnectionInfoArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceConnectionInfoAddressOutput{})
	pulumi.RegisterOutputType(InstancesInstanceConnectionInfoAddressArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNodeDetailInfoOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNodeDetailInfoArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceParameterOutput{})
	pulumi.RegisterOutputType(InstancesInstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
	pulumi.RegisterOutputType(RegionsRegionOutput{})
	pulumi.RegisterOutputType(RegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
}
