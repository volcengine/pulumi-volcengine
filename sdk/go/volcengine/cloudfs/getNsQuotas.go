// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cloudfs ns quotas
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloudfs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudfs.GetNsQuotas(ctx, &cloudfs.GetNsQuotasArgs{
//				FsNames: []string{
//					"tffile",
//					"tftest2",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNsQuotas(ctx *pulumi.Context, args *GetNsQuotasArgs, opts ...pulumi.InvokeOption) (*GetNsQuotasResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNsQuotasResult
	err := ctx.Invoke("volcengine:cloudfs/getNsQuotas:getNsQuotas", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNsQuotas.
type GetNsQuotasArgs struct {
	// A list of fs name.
	FsNames []string `pulumi:"fsNames"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getNsQuotas.
type GetNsQuotasResult struct {
	FsNames []string `pulumi:"fsNames"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The collection of query.
	Quotas []GetNsQuotasQuota `pulumi:"quotas"`
	// The total count of cloud fs quota query.
	TotalCount int `pulumi:"totalCount"`
}

func GetNsQuotasOutput(ctx *pulumi.Context, args GetNsQuotasOutputArgs, opts ...pulumi.InvokeOption) GetNsQuotasResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNsQuotasResult, error) {
			args := v.(GetNsQuotasArgs)
			r, err := GetNsQuotas(ctx, &args, opts...)
			var s GetNsQuotasResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNsQuotasResultOutput)
}

// A collection of arguments for invoking getNsQuotas.
type GetNsQuotasOutputArgs struct {
	// A list of fs name.
	FsNames pulumi.StringArrayInput `pulumi:"fsNames"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetNsQuotasOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsQuotasArgs)(nil)).Elem()
}

// A collection of values returned by getNsQuotas.
type GetNsQuotasResultOutput struct{ *pulumi.OutputState }

func (GetNsQuotasResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsQuotasResult)(nil)).Elem()
}

func (o GetNsQuotasResultOutput) ToGetNsQuotasResultOutput() GetNsQuotasResultOutput {
	return o
}

func (o GetNsQuotasResultOutput) ToGetNsQuotasResultOutputWithContext(ctx context.Context) GetNsQuotasResultOutput {
	return o
}

func (o GetNsQuotasResultOutput) FsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNsQuotasResult) []string { return v.FsNames }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNsQuotasResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsQuotasResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNsQuotasResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNsQuotasResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o GetNsQuotasResultOutput) Quotas() GetNsQuotasQuotaArrayOutput {
	return o.ApplyT(func(v GetNsQuotasResult) []GetNsQuotasQuota { return v.Quotas }).(GetNsQuotasQuotaArrayOutput)
}

// The total count of cloud fs quota query.
func (o GetNsQuotasResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsQuotasResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNsQuotasResultOutput{})
}
