// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage cloudfs file system
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloudfs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudfs.NewFileSystem(ctx, "foo", &cloudfs.FileSystemArgs{
//				CacheCapacityTib: pulumi.Int(10),
//				CachePlan:        pulumi.String("T2"),
//				FsName:           pulumi.String("tffile"),
//				Mode:             pulumi.String("HDFS_MODE"),
//				ReadOnly:         pulumi.Bool(true),
//				SecurityGroupId:  pulumi.String("sg-rrv1klfg5s00v0x578mx14m"),
//				SubnetId:         pulumi.String("subnet-13fca1crr5d6o3n6nu46cyb5m"),
//				TosBucket:        pulumi.String("tfacc"),
//				TosPrefix:        pulumi.String("pre/"),
//				VpcRouteEnabled:  pulumi.Bool(true),
//				ZoneId:           pulumi.String("cn-beijing-b"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudfs.NewFileSystem(ctx, "foo1", &cloudfs.FileSystemArgs{
//				CacheCapacityTib: pulumi.Int(15),
//				CachePlan:        pulumi.String("T2"),
//				FsName:           pulumi.String("tffileu"),
//				Mode:             pulumi.String("ACC_MODE"),
//				ReadOnly:         pulumi.Bool(true),
//				SecurityGroupId:  pulumi.String("sg-rrv1klfg5s00v0x578mx14m"),
//				SubnetId:         pulumi.String("subnet-13fca1crr5d6o3n6nu46cyb5m"),
//				TosBucket:        pulumi.String("tfacc"),
//				VpcRouteEnabled:  pulumi.Bool(false),
//				ZoneId:           pulumi.String("cn-beijing-b"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CloudFileSystem can be imported using the FsName, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:cloudfs/fileSystem:FileSystem default tfname
//
// ```
type FileSystem struct {
	pulumi.CustomResourceState

	// The default vpc access id.
	AccessId pulumi.StringOutput `pulumi:"accessId"`
	// The capacity of cache. This parameter is required when cache acceleration is enabled.
	CacheCapacityTib pulumi.IntPtrOutput `pulumi:"cacheCapacityTib"`
	// The cache plan. The value can be `DISABLED` or `T2` or `T4`. When expanding the cache size, the cache plan should remain the same. For data lakes, cache must be enabled.
	CachePlan pulumi.StringOutput `pulumi:"cachePlan"`
	// The creation time.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The name of file system.
	FsName pulumi.StringOutput `pulumi:"fsName"`
	// The mode of file system. The value can be `HDFS_MODE` or `ACC_MODE`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The point mount.
	MountPoint pulumi.StringOutput `pulumi:"mountPoint"`
	// Whether the Namespace created automatically when mounting the TOS Bucket is read-only. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ReadOnly pulumi.BoolPtrOutput `pulumi:"readOnly"`
	// The id of security group. This parameter is required when cache acceleration is enabled.
	SecurityGroupId pulumi.StringPtrOutput `pulumi:"securityGroupId"`
	// Status of file system.
	Status pulumi.StringOutput `pulumi:"status"`
	// The id of subnet. This parameter is required when cache acceleration is enabled.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported.
	TosAccountId pulumi.IntPtrOutput `pulumi:"tosAccountId"`
	// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported.
	TosAk pulumi.StringPtrOutput `pulumi:"tosAk"`
	// The tos bucket. When importing ACC_MODE resources, this attribute will not be imported.
	TosBucket pulumi.StringPtrOutput `pulumi:"tosBucket"`
	// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path. When importing ACC_MODE resources, this attribute will not be imported.
	TosPrefix pulumi.StringPtrOutput `pulumi:"tosPrefix"`
	// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported.
	TosSk pulumi.StringPtrOutput `pulumi:"tosSk"`
	// The id of vpc.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Whether enable all vpc route.
	VpcRouteEnabled pulumi.BoolPtrOutput `pulumi:"vpcRouteEnabled"`
	// The id of zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CachePlan == nil {
		return nil, errors.New("invalid value for required argument 'CachePlan'")
	}
	if args.FsName == nil {
		return nil, errors.New("invalid value for required argument 'FsName'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileSystem
	err := ctx.RegisterResource("volcengine:cloudfs/fileSystem:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("volcengine:cloudfs/fileSystem:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
	// The default vpc access id.
	AccessId *string `pulumi:"accessId"`
	// The capacity of cache. This parameter is required when cache acceleration is enabled.
	CacheCapacityTib *int `pulumi:"cacheCapacityTib"`
	// The cache plan. The value can be `DISABLED` or `T2` or `T4`. When expanding the cache size, the cache plan should remain the same. For data lakes, cache must be enabled.
	CachePlan *string `pulumi:"cachePlan"`
	// The creation time.
	CreatedTime *string `pulumi:"createdTime"`
	// The name of file system.
	FsName *string `pulumi:"fsName"`
	// The mode of file system. The value can be `HDFS_MODE` or `ACC_MODE`.
	Mode *string `pulumi:"mode"`
	// The point mount.
	MountPoint *string `pulumi:"mountPoint"`
	// Whether the Namespace created automatically when mounting the TOS Bucket is read-only. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ReadOnly *bool `pulumi:"readOnly"`
	// The id of security group. This parameter is required when cache acceleration is enabled.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Status of file system.
	Status *string `pulumi:"status"`
	// The id of subnet. This parameter is required when cache acceleration is enabled.
	SubnetId *string `pulumi:"subnetId"`
	// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported.
	TosAccountId *int `pulumi:"tosAccountId"`
	// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported.
	TosAk *string `pulumi:"tosAk"`
	// The tos bucket. When importing ACC_MODE resources, this attribute will not be imported.
	TosBucket *string `pulumi:"tosBucket"`
	// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path. When importing ACC_MODE resources, this attribute will not be imported.
	TosPrefix *string `pulumi:"tosPrefix"`
	// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported.
	TosSk *string `pulumi:"tosSk"`
	// The id of vpc.
	VpcId *string `pulumi:"vpcId"`
	// Whether enable all vpc route.
	VpcRouteEnabled *bool `pulumi:"vpcRouteEnabled"`
	// The id of zone.
	ZoneId *string `pulumi:"zoneId"`
}

type FileSystemState struct {
	// The default vpc access id.
	AccessId pulumi.StringPtrInput
	// The capacity of cache. This parameter is required when cache acceleration is enabled.
	CacheCapacityTib pulumi.IntPtrInput
	// The cache plan. The value can be `DISABLED` or `T2` or `T4`. When expanding the cache size, the cache plan should remain the same. For data lakes, cache must be enabled.
	CachePlan pulumi.StringPtrInput
	// The creation time.
	CreatedTime pulumi.StringPtrInput
	// The name of file system.
	FsName pulumi.StringPtrInput
	// The mode of file system. The value can be `HDFS_MODE` or `ACC_MODE`.
	Mode pulumi.StringPtrInput
	// The point mount.
	MountPoint pulumi.StringPtrInput
	// Whether the Namespace created automatically when mounting the TOS Bucket is read-only. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ReadOnly pulumi.BoolPtrInput
	// The id of security group. This parameter is required when cache acceleration is enabled.
	SecurityGroupId pulumi.StringPtrInput
	// Status of file system.
	Status pulumi.StringPtrInput
	// The id of subnet. This parameter is required when cache acceleration is enabled.
	SubnetId pulumi.StringPtrInput
	// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported.
	TosAccountId pulumi.IntPtrInput
	// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported.
	TosAk pulumi.StringPtrInput
	// The tos bucket. When importing ACC_MODE resources, this attribute will not be imported.
	TosBucket pulumi.StringPtrInput
	// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path. When importing ACC_MODE resources, this attribute will not be imported.
	TosPrefix pulumi.StringPtrInput
	// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported.
	TosSk pulumi.StringPtrInput
	// The id of vpc.
	VpcId pulumi.StringPtrInput
	// Whether enable all vpc route.
	VpcRouteEnabled pulumi.BoolPtrInput
	// The id of zone.
	ZoneId pulumi.StringPtrInput
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	// The capacity of cache. This parameter is required when cache acceleration is enabled.
	CacheCapacityTib *int `pulumi:"cacheCapacityTib"`
	// The cache plan. The value can be `DISABLED` or `T2` or `T4`. When expanding the cache size, the cache plan should remain the same. For data lakes, cache must be enabled.
	CachePlan string `pulumi:"cachePlan"`
	// The name of file system.
	FsName string `pulumi:"fsName"`
	// The mode of file system. The value can be `HDFS_MODE` or `ACC_MODE`.
	Mode string `pulumi:"mode"`
	// Whether the Namespace created automatically when mounting the TOS Bucket is read-only. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ReadOnly *bool `pulumi:"readOnly"`
	// The id of security group. This parameter is required when cache acceleration is enabled.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The id of subnet. This parameter is required when cache acceleration is enabled.
	SubnetId *string `pulumi:"subnetId"`
	// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported.
	TosAccountId *int `pulumi:"tosAccountId"`
	// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported.
	TosAk *string `pulumi:"tosAk"`
	// The tos bucket. When importing ACC_MODE resources, this attribute will not be imported.
	TosBucket *string `pulumi:"tosBucket"`
	// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path. When importing ACC_MODE resources, this attribute will not be imported.
	TosPrefix *string `pulumi:"tosPrefix"`
	// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported.
	TosSk *string `pulumi:"tosSk"`
	// Whether enable all vpc route.
	VpcRouteEnabled *bool `pulumi:"vpcRouteEnabled"`
	// The id of zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	// The capacity of cache. This parameter is required when cache acceleration is enabled.
	CacheCapacityTib pulumi.IntPtrInput
	// The cache plan. The value can be `DISABLED` or `T2` or `T4`. When expanding the cache size, the cache plan should remain the same. For data lakes, cache must be enabled.
	CachePlan pulumi.StringInput
	// The name of file system.
	FsName pulumi.StringInput
	// The mode of file system. The value can be `HDFS_MODE` or `ACC_MODE`.
	Mode pulumi.StringInput
	// Whether the Namespace created automatically when mounting the TOS Bucket is read-only. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ReadOnly pulumi.BoolPtrInput
	// The id of security group. This parameter is required when cache acceleration is enabled.
	SecurityGroupId pulumi.StringPtrInput
	// The id of subnet. This parameter is required when cache acceleration is enabled.
	SubnetId pulumi.StringPtrInput
	// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported.
	TosAccountId pulumi.IntPtrInput
	// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported.
	TosAk pulumi.StringPtrInput
	// The tos bucket. When importing ACC_MODE resources, this attribute will not be imported.
	TosBucket pulumi.StringPtrInput
	// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path. When importing ACC_MODE resources, this attribute will not be imported.
	TosPrefix pulumi.StringPtrInput
	// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported.
	TosSk pulumi.StringPtrInput
	// Whether enable all vpc route.
	VpcRouteEnabled pulumi.BoolPtrInput
	// The id of zone.
	ZoneId pulumi.StringInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

// FileSystemArrayInput is an input type that accepts FileSystemArray and FileSystemArrayOutput values.
// You can construct a concrete instance of `FileSystemArrayInput` via:
//
//	FileSystemArray{ FileSystemArgs{...} }
type FileSystemArrayInput interface {
	pulumi.Input

	ToFileSystemArrayOutput() FileSystemArrayOutput
	ToFileSystemArrayOutputWithContext(context.Context) FileSystemArrayOutput
}

type FileSystemArray []FileSystemInput

func (FileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (i FileSystemArray) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return i.ToFileSystemArrayOutputWithContext(context.Background())
}

func (i FileSystemArray) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemArrayOutput)
}

// FileSystemMapInput is an input type that accepts FileSystemMap and FileSystemMapOutput values.
// You can construct a concrete instance of `FileSystemMapInput` via:
//
//	FileSystemMap{ "key": FileSystemArgs{...} }
type FileSystemMapInput interface {
	pulumi.Input

	ToFileSystemMapOutput() FileSystemMapOutput
	ToFileSystemMapOutputWithContext(context.Context) FileSystemMapOutput
}

type FileSystemMap map[string]FileSystemInput

func (FileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (i FileSystemMap) ToFileSystemMapOutput() FileSystemMapOutput {
	return i.ToFileSystemMapOutputWithContext(context.Background())
}

func (i FileSystemMap) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMapOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

// The default vpc access id.
func (o FileSystemOutput) AccessId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AccessId }).(pulumi.StringOutput)
}

// The capacity of cache. This parameter is required when cache acceleration is enabled.
func (o FileSystemOutput) CacheCapacityTib() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntPtrOutput { return v.CacheCapacityTib }).(pulumi.IntPtrOutput)
}

// The cache plan. The value can be `DISABLED` or `T2` or `T4`. When expanding the cache size, the cache plan should remain the same. For data lakes, cache must be enabled.
func (o FileSystemOutput) CachePlan() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.CachePlan }).(pulumi.StringOutput)
}

// The creation time.
func (o FileSystemOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// The name of file system.
func (o FileSystemOutput) FsName() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.FsName }).(pulumi.StringOutput)
}

// The mode of file system. The value can be `HDFS_MODE` or `ACC_MODE`.
func (o FileSystemOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The point mount.
func (o FileSystemOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.MountPoint }).(pulumi.StringOutput)
}

// Whether the Namespace created automatically when mounting the TOS Bucket is read-only. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o FileSystemOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The id of security group. This parameter is required when cache acceleration is enabled.
func (o FileSystemOutput) SecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.SecurityGroupId }).(pulumi.StringPtrOutput)
}

// Status of file system.
func (o FileSystemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The id of subnet. This parameter is required when cache acceleration is enabled.
func (o FileSystemOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported.
func (o FileSystemOutput) TosAccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntPtrOutput { return v.TosAccountId }).(pulumi.IntPtrOutput)
}

// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported.
func (o FileSystemOutput) TosAk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.TosAk }).(pulumi.StringPtrOutput)
}

// The tos bucket. When importing ACC_MODE resources, this attribute will not be imported.
func (o FileSystemOutput) TosBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.TosBucket }).(pulumi.StringPtrOutput)
}

// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path. When importing ACC_MODE resources, this attribute will not be imported.
func (o FileSystemOutput) TosPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.TosPrefix }).(pulumi.StringPtrOutput)
}

// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported.
func (o FileSystemOutput) TosSk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.TosSk }).(pulumi.StringPtrOutput)
}

// The id of vpc.
func (o FileSystemOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Whether enable all vpc route.
func (o FileSystemOutput) VpcRouteEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.BoolPtrOutput { return v.VpcRouteEnabled }).(pulumi.BoolPtrOutput)
}

// The id of zone.
func (o FileSystemOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type FileSystemArrayOutput struct{ *pulumi.OutputState }

func (FileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) Index(i pulumi.IntInput) FileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].([]*FileSystem)[vs[1].(int)]
	}).(FileSystemOutput)
}

type FileSystemMapOutput struct{ *pulumi.OutputState }

func (FileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (o FileSystemMapOutput) ToFileSystemMapOutput() FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) MapIndex(k pulumi.StringInput) FileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].(map[string]*FileSystem)[vs[1].(string)]
	}).(FileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemInput)(nil)).Elem(), &FileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemArrayInput)(nil)).Elem(), FileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMapInput)(nil)).Elem(), FileSystemMap{})
	pulumi.RegisterOutputType(FileSystemOutput{})
	pulumi.RegisterOutputType(FileSystemArrayOutput{})
	pulumi.RegisterOutputType(FileSystemMapOutput{})
}
