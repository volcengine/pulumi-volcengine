// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cloudfs file systems
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloudfs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudfs.FileSystems(ctx, &cloudfs.FileSystemsArgs{
//				FsName: pulumi.StringRef("tftest2"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func FileSystems(ctx *pulumi.Context, args *FileSystemsArgs, opts ...pulumi.InvokeOption) (*FileSystemsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FileSystemsResult
	err := ctx.Invoke("volcengine:cloudfs/fileSystems:FileSystems", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking FileSystems.
type FileSystemsArgs struct {
	// The name of file system.
	FsName *string `pulumi:"fsName"`
	// The status of file system.
	MetaStatus *string `pulumi:"metaStatus"`
	// A Name Regex of cloudfs.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by FileSystems.
type FileSystemsResult struct {
	// The collection of query.
	FileSystems []FileSystemsFileSystem `pulumi:"fileSystems"`
	FsName      *string                 `pulumi:"fsName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	MetaStatus *string `pulumi:"metaStatus"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func FileSystemsOutput(ctx *pulumi.Context, args FileSystemsOutputArgs, opts ...pulumi.InvokeOption) FileSystemsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FileSystemsResult, error) {
			args := v.(FileSystemsArgs)
			r, err := FileSystems(ctx, &args, opts...)
			var s FileSystemsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(FileSystemsResultOutput)
}

// A collection of arguments for invoking FileSystems.
type FileSystemsOutputArgs struct {
	// The name of file system.
	FsName pulumi.StringPtrInput `pulumi:"fsName"`
	// The status of file system.
	MetaStatus pulumi.StringPtrInput `pulumi:"metaStatus"`
	// A Name Regex of cloudfs.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (FileSystemsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemsArgs)(nil)).Elem()
}

// A collection of values returned by FileSystems.
type FileSystemsResultOutput struct{ *pulumi.OutputState }

func (FileSystemsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemsResult)(nil)).Elem()
}

func (o FileSystemsResultOutput) ToFileSystemsResultOutput() FileSystemsResultOutput {
	return o
}

func (o FileSystemsResultOutput) ToFileSystemsResultOutputWithContext(ctx context.Context) FileSystemsResultOutput {
	return o
}

// The collection of query.
func (o FileSystemsResultOutput) FileSystems() FileSystemsFileSystemArrayOutput {
	return o.ApplyT(func(v FileSystemsResult) []FileSystemsFileSystem { return v.FileSystems }).(FileSystemsFileSystemArrayOutput)
}

func (o FileSystemsResultOutput) FsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.FsName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o FileSystemsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o FileSystemsResultOutput) MetaStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.MetaStatus }).(pulumi.StringPtrOutput)
}

func (o FileSystemsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o FileSystemsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o FileSystemsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v FileSystemsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(FileSystemsResultOutput{})
}
