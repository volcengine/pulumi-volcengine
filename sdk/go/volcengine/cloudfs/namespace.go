// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage cloudfs namespace
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloudfs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudfs.NewNamespace(ctx, "foo", &cloudfs.NamespaceArgs{
//				FsName:    pulumi.String("tf-test-fs"),
//				ReadOnly:  pulumi.Bool(true),
//				TosBucket: pulumi.String("tf-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CloudfsNamespace can be imported using the FsName:NsId, e.g.
//
// ```sh
// $ pulumi import volcengine:cloudfs/namespace:Namespace default tfname:1801439850948****
// ```
type Namespace struct {
	pulumi.CustomResourceState

	// The creation time of the namespace.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The name of file system.
	FsName pulumi.StringOutput `pulumi:"fsName"`
	// Whether the tos bucket is your own bucket.
	IsMyBucket pulumi.BoolOutput `pulumi:"isMyBucket"`
	// The id of namespace.
	NsId pulumi.StringOutput `pulumi:"nsId"`
	// Whether the namespace is read-only.
	ReadOnly pulumi.BoolPtrOutput `pulumi:"readOnly"`
	// Whether the namespace is the official service for volcengine.
	ServiceManaged pulumi.BoolOutput `pulumi:"serviceManaged"`
	// The status of the namespace.
	Status pulumi.StringOutput `pulumi:"status"`
	// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosAccountId pulumi.IntPtrOutput `pulumi:"tosAccountId"`
	// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosAk pulumi.StringPtrOutput `pulumi:"tosAk"`
	// The name of tos bucket.
	TosBucket pulumi.StringOutput `pulumi:"tosBucket"`
	// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path.
	TosPrefix pulumi.StringPtrOutput `pulumi:"tosPrefix"`
	// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosSk pulumi.StringPtrOutput `pulumi:"tosSk"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FsName == nil {
		return nil, errors.New("invalid value for required argument 'FsName'")
	}
	if args.TosBucket == nil {
		return nil, errors.New("invalid value for required argument 'TosBucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Namespace
	err := ctx.RegisterResource("volcengine:cloudfs/namespace:Namespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	var resource Namespace
	err := ctx.ReadResource("volcengine:cloudfs/namespace:Namespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type namespaceState struct {
	// The creation time of the namespace.
	CreatedTime *string `pulumi:"createdTime"`
	// The name of file system.
	FsName *string `pulumi:"fsName"`
	// Whether the tos bucket is your own bucket.
	IsMyBucket *bool `pulumi:"isMyBucket"`
	// The id of namespace.
	NsId *string `pulumi:"nsId"`
	// Whether the namespace is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// Whether the namespace is the official service for volcengine.
	ServiceManaged *bool `pulumi:"serviceManaged"`
	// The status of the namespace.
	Status *string `pulumi:"status"`
	// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosAccountId *int `pulumi:"tosAccountId"`
	// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosAk *string `pulumi:"tosAk"`
	// The name of tos bucket.
	TosBucket *string `pulumi:"tosBucket"`
	// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path.
	TosPrefix *string `pulumi:"tosPrefix"`
	// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosSk *string `pulumi:"tosSk"`
}

type NamespaceState struct {
	// The creation time of the namespace.
	CreatedTime pulumi.StringPtrInput
	// The name of file system.
	FsName pulumi.StringPtrInput
	// Whether the tos bucket is your own bucket.
	IsMyBucket pulumi.BoolPtrInput
	// The id of namespace.
	NsId pulumi.StringPtrInput
	// Whether the namespace is read-only.
	ReadOnly pulumi.BoolPtrInput
	// Whether the namespace is the official service for volcengine.
	ServiceManaged pulumi.BoolPtrInput
	// The status of the namespace.
	Status pulumi.StringPtrInput
	// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosAccountId pulumi.IntPtrInput
	// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosAk pulumi.StringPtrInput
	// The name of tos bucket.
	TosBucket pulumi.StringPtrInput
	// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path.
	TosPrefix pulumi.StringPtrInput
	// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosSk pulumi.StringPtrInput
}

func (NamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceState)(nil)).Elem()
}

type namespaceArgs struct {
	// The name of file system.
	FsName string `pulumi:"fsName"`
	// Whether the namespace is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosAccountId *int `pulumi:"tosAccountId"`
	// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosAk *string `pulumi:"tosAk"`
	// The name of tos bucket.
	TosBucket string `pulumi:"tosBucket"`
	// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path.
	TosPrefix *string `pulumi:"tosPrefix"`
	// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosSk *string `pulumi:"tosSk"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// The name of file system.
	FsName pulumi.StringInput
	// Whether the namespace is read-only.
	ReadOnly pulumi.BoolPtrInput
	// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosAccountId pulumi.IntPtrInput
	// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosAk pulumi.StringPtrInput
	// The name of tos bucket.
	TosBucket pulumi.StringInput
	// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path.
	TosPrefix pulumi.StringPtrInput
	// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	TosSk pulumi.StringPtrInput
}

func (NamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceArgs)(nil)).Elem()
}

type NamespaceInput interface {
	pulumi.Input

	ToNamespaceOutput() NamespaceOutput
	ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput
}

func (*Namespace) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (i *Namespace) ToNamespaceOutput() NamespaceOutput {
	return i.ToNamespaceOutputWithContext(context.Background())
}

func (i *Namespace) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceOutput)
}

// NamespaceArrayInput is an input type that accepts NamespaceArray and NamespaceArrayOutput values.
// You can construct a concrete instance of `NamespaceArrayInput` via:
//
//	NamespaceArray{ NamespaceArgs{...} }
type NamespaceArrayInput interface {
	pulumi.Input

	ToNamespaceArrayOutput() NamespaceArrayOutput
	ToNamespaceArrayOutputWithContext(context.Context) NamespaceArrayOutput
}

type NamespaceArray []NamespaceInput

func (NamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (i NamespaceArray) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return i.ToNamespaceArrayOutputWithContext(context.Background())
}

func (i NamespaceArray) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceArrayOutput)
}

// NamespaceMapInput is an input type that accepts NamespaceMap and NamespaceMapOutput values.
// You can construct a concrete instance of `NamespaceMapInput` via:
//
//	NamespaceMap{ "key": NamespaceArgs{...} }
type NamespaceMapInput interface {
	pulumi.Input

	ToNamespaceMapOutput() NamespaceMapOutput
	ToNamespaceMapOutputWithContext(context.Context) NamespaceMapOutput
}

type NamespaceMap map[string]NamespaceInput

func (NamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (i NamespaceMap) ToNamespaceMapOutput() NamespaceMapOutput {
	return i.ToNamespaceMapOutputWithContext(context.Background())
}

func (i NamespaceMap) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceMapOutput)
}

type NamespaceOutput struct{ *pulumi.OutputState }

func (NamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (o NamespaceOutput) ToNamespaceOutput() NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return o
}

// The creation time of the namespace.
func (o NamespaceOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// The name of file system.
func (o NamespaceOutput) FsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.FsName }).(pulumi.StringOutput)
}

// Whether the tos bucket is your own bucket.
func (o NamespaceOutput) IsMyBucket() pulumi.BoolOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolOutput { return v.IsMyBucket }).(pulumi.BoolOutput)
}

// The id of namespace.
func (o NamespaceOutput) NsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.NsId }).(pulumi.StringOutput)
}

// Whether the namespace is read-only.
func (o NamespaceOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Whether the namespace is the official service for volcengine.
func (o NamespaceOutput) ServiceManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolOutput { return v.ServiceManaged }).(pulumi.BoolOutput)
}

// The status of the namespace.
func (o NamespaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// When a data lake scenario instance chooses to associate a bucket under another account, you need to set the ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o NamespaceOutput) TosAccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.IntPtrOutput { return v.TosAccountId }).(pulumi.IntPtrOutput)
}

// The tos ak. When the data lake scenario chooses to associate buckets under other accounts, need to set the Access Key ID of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o NamespaceOutput) TosAk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringPtrOutput { return v.TosAk }).(pulumi.StringPtrOutput)
}

// The name of tos bucket.
func (o NamespaceOutput) TosBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.TosBucket }).(pulumi.StringOutput)
}

// The tos prefix. Must not start with /, but must end with /, such as prefix/. When it is empty, it means the root path.
func (o NamespaceOutput) TosPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringPtrOutput { return v.TosPrefix }).(pulumi.StringPtrOutput)
}

// The tos sk. When the data lake scenario chooses to associate buckets under other accounts, need to set the Secret Access Key of the account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o NamespaceOutput) TosSk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringPtrOutput { return v.TosSk }).(pulumi.StringPtrOutput)
}

type NamespaceArrayOutput struct{ *pulumi.OutputState }

func (NamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) Index(i pulumi.IntInput) NamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].([]*Namespace)[vs[1].(int)]
	}).(NamespaceOutput)
}

type NamespaceMapOutput struct{ *pulumi.OutputState }

func (NamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (o NamespaceMapOutput) ToNamespaceMapOutput() NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) MapIndex(k pulumi.StringInput) NamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].(map[string]*Namespace)[vs[1].(string)]
	}).(NamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceInput)(nil)).Elem(), &Namespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceArrayInput)(nil)).Elem(), NamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceMapInput)(nil)).Elem(), NamespaceMap{})
	pulumi.RegisterOutputType(NamespaceOutput{})
	pulumi.RegisterOutputType(NamespaceArrayOutput{})
	pulumi.RegisterOutputType(NamespaceMapOutput{})
}
