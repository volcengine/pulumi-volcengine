// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package escloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// (Deprecated! Recommend use escloud_v2.EscloudInstanceV2 replace) Use this data source to query detailed information of escloud instances
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/escloud"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName:  pulumi.String("acc-test-subnet_new"),
//				Description: pulumi.String("tfdesc"),
//				CidrBlock:   pulumi.String("172.16.0.0/24"),
//				ZoneId:      pulumi.String(fooZones.Zones[0].Id),
//				VpcId:       fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := escloud.NewInstance(ctx, "fooInstance", &escloud.InstanceArgs{
//				InstanceConfiguration: &escloud.InstanceInstanceConfigurationArgs{
//					Version:           pulumi.String("V6_7"),
//					ZoneNumber:        pulumi.Int(1),
//					EnableHttps:       pulumi.Bool(true),
//					AdminUserName:     pulumi.String("admin"),
//					AdminPassword:     pulumi.String("Password@@"),
//					ChargeType:        pulumi.String("PostPaid"),
//					ConfigurationCode: pulumi.String("es.standard"),
//					EnablePureMaster:  pulumi.Bool(true),
//					InstanceName:      pulumi.String("acc-test-0"),
//					NodeSpecsAssigns: escloud.InstanceInstanceConfigurationNodeSpecsAssignArray{
//						&escloud.InstanceInstanceConfigurationNodeSpecsAssignArgs{
//							Type:             pulumi.String("Master"),
//							Number:           pulumi.Int(3),
//							ResourceSpecName: pulumi.String("es.x4.medium"),
//							StorageSpecName:  pulumi.String("es.volume.essd.pl0"),
//							StorageSize:      pulumi.Int(100),
//						},
//						&escloud.InstanceInstanceConfigurationNodeSpecsAssignArgs{
//							Type:             pulumi.String("Hot"),
//							Number:           pulumi.Int(2),
//							ResourceSpecName: pulumi.String("es.x4.large"),
//							StorageSpecName:  pulumi.String("es.volume.essd.pl0"),
//							StorageSize:      pulumi.Int(100),
//						},
//						&escloud.InstanceInstanceConfigurationNodeSpecsAssignArgs{
//							Type:             pulumi.String("Kibana"),
//							Number:           pulumi.Int(1),
//							ResourceSpecName: pulumi.String("kibana.x2.small"),
//						},
//					},
//					SubnetId:               fooSubnet.ID(),
//					ProjectName:            pulumi.String("default"),
//					ForceRestartAfterScale: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = escloud.GetInstancesOutput(ctx, escloud.GetInstancesOutputArgs{
//				Ids: pulumi.StringArray{
//					fooInstance.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.escloud.Instances has been deprecated in favor of volcengine.escloud.getInstances
func Instances(ctx *pulumi.Context, args *InstancesArgs, opts ...pulumi.InvokeOption) (*InstancesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv InstancesResult
	err := ctx.Invoke("volcengine:escloud/instances:Instances", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Instances.
type InstancesArgs struct {
	// The charge types of instance.
	ChargeTypes []string `pulumi:"chargeTypes"`
	// A list of instance IDs.
	Ids []string `pulumi:"ids"`
	// The names of instance.
	Names []string `pulumi:"names"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The list status of instance.
	Statuses []string `pulumi:"statuses"`
	// The versions of instance.
	Versions []string `pulumi:"versions"`
	// The available zone IDs of instance.
	ZoneIds []string `pulumi:"zoneIds"`
}

// A collection of values returned by Instances.
type InstancesResult struct {
	ChargeTypes []string `pulumi:"chargeTypes"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The collection of instance query.
	Instances  []InstancesInstance `pulumi:"instances"`
	Names      []string            `pulumi:"names"`
	OutputFile *string             `pulumi:"outputFile"`
	Statuses   []string            `pulumi:"statuses"`
	// The total count of instance query.
	TotalCount int      `pulumi:"totalCount"`
	Versions   []string `pulumi:"versions"`
	ZoneIds    []string `pulumi:"zoneIds"`
}

func InstancesOutput(ctx *pulumi.Context, args InstancesOutputArgs, opts ...pulumi.InvokeOption) InstancesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (InstancesResult, error) {
			args := v.(InstancesArgs)
			r, err := Instances(ctx, &args, opts...)
			var s InstancesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(InstancesResultOutput)
}

// A collection of arguments for invoking Instances.
type InstancesOutputArgs struct {
	// The charge types of instance.
	ChargeTypes pulumi.StringArrayInput `pulumi:"chargeTypes"`
	// A list of instance IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The names of instance.
	Names pulumi.StringArrayInput `pulumi:"names"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The list status of instance.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
	// The versions of instance.
	Versions pulumi.StringArrayInput `pulumi:"versions"`
	// The available zone IDs of instance.
	ZoneIds pulumi.StringArrayInput `pulumi:"zoneIds"`
}

func (InstancesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesArgs)(nil)).Elem()
}

// A collection of values returned by Instances.
type InstancesResultOutput struct{ *pulumi.OutputState }

func (InstancesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesResult)(nil)).Elem()
}

func (o InstancesResultOutput) ToInstancesResultOutput() InstancesResultOutput {
	return o
}

func (o InstancesResultOutput) ToInstancesResultOutputWithContext(ctx context.Context) InstancesResultOutput {
	return o
}

func (o InstancesResultOutput) ChargeTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesResult) []string { return v.ChargeTypes }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o InstancesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o InstancesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The collection of instance query.
func (o InstancesResultOutput) Instances() InstancesInstanceArrayOutput {
	return o.ApplyT(func(v InstancesResult) []InstancesInstance { return v.Instances }).(InstancesInstanceArrayOutput)
}

func (o InstancesResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o InstancesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o InstancesResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// The total count of instance query.
func (o InstancesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o InstancesResultOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesResult) []string { return v.Versions }).(pulumi.StringArrayOutput)
}

func (o InstancesResultOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesResult) []string { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(InstancesResultOutput{})
}
