// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package escloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of escloud regions
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/escloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := escloud.Regions(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Regions(ctx *pulumi.Context, args *RegionsArgs, opts ...pulumi.InvokeOption) (*RegionsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv RegionsResult
	err := ctx.Invoke("volcengine:escloud/regions:Regions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Regions.
type RegionsArgs struct {
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Regions.
type RegionsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The collection of region query.
	Regions []RegionsRegion `pulumi:"regions"`
	// The total count of region query.
	TotalCount int `pulumi:"totalCount"`
}

func RegionsOutput(ctx *pulumi.Context, args RegionsOutputArgs, opts ...pulumi.InvokeOption) RegionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (RegionsResult, error) {
			args := v.(RegionsArgs)
			r, err := Regions(ctx, &args, opts...)
			var s RegionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(RegionsResultOutput)
}

// A collection of arguments for invoking Regions.
type RegionsOutputArgs struct {
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (RegionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsArgs)(nil)).Elem()
}

// A collection of values returned by Regions.
type RegionsResultOutput struct{ *pulumi.OutputState }

func (RegionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsResult)(nil)).Elem()
}

func (o RegionsResultOutput) ToRegionsResultOutput() RegionsResultOutput {
	return o
}

func (o RegionsResultOutput) ToRegionsResultOutputWithContext(ctx context.Context) RegionsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o RegionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o RegionsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of region query.
func (o RegionsResultOutput) Regions() RegionsRegionArrayOutput {
	return o.ApplyT(func(v RegionsResult) []RegionsRegion { return v.Regions }).(RegionsRegionArrayOutput)
}

// The total count of region query.
func (o RegionsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v RegionsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(RegionsResultOutput{})
}
