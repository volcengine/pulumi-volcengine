// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bandwidth_package

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/bandwidth_package"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bandwidth_package.NewBandwidthPackage(ctx, "foo", &bandwidth_package.BandwidthPackageArgs{
//				Bandwidth:            pulumi.Int(10),
//				BandwidthPackageName: pulumi.String("acc-test-bp"),
//				BillingType:          pulumi.String("PostPaidByBandwidth"),
//				Description:          pulumi.String("acc-test"),
//				Isp:                  pulumi.String("BGP"),
//				Protocol:             pulumi.String("IPv4"),
//				SecurityProtectionTypes: pulumi.StringArray{
//					pulumi.String("AntiDDoS_Enhanced"),
//				},
//				Tags: bandwidth_package.BandwidthPackageTagArray{
//					&bandwidth_package.BandwidthPackageTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BandwidthPackage can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:bandwidth_package/bandwidthPackage:BandwidthPackage default bwp-2zeo05qre24nhrqpy****
//
// ```
type BandwidthPackage struct {
	pulumi.CustomResourceState

	// Bandwidth upper limit of shared bandwidth package, unit: Mbps. When BillingType is set to PrePaid: the value range is 5 to 5000. When BillingType is set to PostPaidByBandwidth: the value range is 2 to 5000. When BillingType is set to PostPaidByTraffic: the value range is 2 to 2000. When BillingType is set to PayBy95Peak: the value range is 2 to 5000.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// The name of the bandwidth package.
	BandwidthPackageName pulumi.StringOutput `pulumi:"bandwidthPackageName"`
	// BillingType of the bandwidth package. Valid values: `PrePaid`, `PostPaidByBandwidth`(Default), `PostPaidByTraffic`, `PayBy95Peak`. The billing method of IPv6 does not include `PrePaid`, and the billing method is only based on the `PostPaidByBandwidth`.
	BillingType pulumi.StringPtrOutput `pulumi:"billingType"`
	// The description of the bandwidth package.
	Description pulumi.StringOutput `pulumi:"description"`
	// Route type, default to BGP.
	Isp pulumi.StringPtrOutput `pulumi:"isp"`
	// Duration of purchasing shared bandwidth package on an annual or monthly basis. The valid value range in 1~9 or 12, 24 or 36. Default value is 1. The period unit defaults to `Month`.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The project name of the bandwidth package.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The IP protocol values for shared bandwidth packages are as follows: `IPv4`: IPv4 protocol. `IPv6`: IPv6 protocol.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Security protection types for shared bandwidth packages. Parameter - N: Indicates the number of security protection types, currently only supports taking 1. Value: `AntiDDoS_Enhanced` or left blank.If the value is `AntiDDoS_Enhanced`, then will create a shared bandwidth package with enhanced protection, which supports adding basic protection type public IP addresses.If left blank, it indicates a shared bandwidth package with basic protection, which supports the addition of public IP addresses with enhanced protection.
	SecurityProtectionTypes pulumi.StringArrayOutput `pulumi:"securityProtectionTypes"`
	// Tags.
	Tags BandwidthPackageTagArrayOutput `pulumi:"tags"`
}

// NewBandwidthPackage registers a new resource with the given unique name, arguments, and options.
func NewBandwidthPackage(ctx *pulumi.Context,
	name string, args *BandwidthPackageArgs, opts ...pulumi.ResourceOption) (*BandwidthPackage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bandwidth == nil {
		return nil, errors.New("invalid value for required argument 'Bandwidth'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BandwidthPackage
	err := ctx.RegisterResource("volcengine:bandwidth_package/bandwidthPackage:BandwidthPackage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBandwidthPackage gets an existing BandwidthPackage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBandwidthPackage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BandwidthPackageState, opts ...pulumi.ResourceOption) (*BandwidthPackage, error) {
	var resource BandwidthPackage
	err := ctx.ReadResource("volcengine:bandwidth_package/bandwidthPackage:BandwidthPackage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BandwidthPackage resources.
type bandwidthPackageState struct {
	// Bandwidth upper limit of shared bandwidth package, unit: Mbps. When BillingType is set to PrePaid: the value range is 5 to 5000. When BillingType is set to PostPaidByBandwidth: the value range is 2 to 5000. When BillingType is set to PostPaidByTraffic: the value range is 2 to 2000. When BillingType is set to PayBy95Peak: the value range is 2 to 5000.
	Bandwidth *int `pulumi:"bandwidth"`
	// The name of the bandwidth package.
	BandwidthPackageName *string `pulumi:"bandwidthPackageName"`
	// BillingType of the bandwidth package. Valid values: `PrePaid`, `PostPaidByBandwidth`(Default), `PostPaidByTraffic`, `PayBy95Peak`. The billing method of IPv6 does not include `PrePaid`, and the billing method is only based on the `PostPaidByBandwidth`.
	BillingType *string `pulumi:"billingType"`
	// The description of the bandwidth package.
	Description *string `pulumi:"description"`
	// Route type, default to BGP.
	Isp *string `pulumi:"isp"`
	// Duration of purchasing shared bandwidth package on an annual or monthly basis. The valid value range in 1~9 or 12, 24 or 36. Default value is 1. The period unit defaults to `Month`.
	Period *int `pulumi:"period"`
	// The project name of the bandwidth package.
	ProjectName *string `pulumi:"projectName"`
	// The IP protocol values for shared bandwidth packages are as follows: `IPv4`: IPv4 protocol. `IPv6`: IPv6 protocol.
	Protocol *string `pulumi:"protocol"`
	// Security protection types for shared bandwidth packages. Parameter - N: Indicates the number of security protection types, currently only supports taking 1. Value: `AntiDDoS_Enhanced` or left blank.If the value is `AntiDDoS_Enhanced`, then will create a shared bandwidth package with enhanced protection, which supports adding basic protection type public IP addresses.If left blank, it indicates a shared bandwidth package with basic protection, which supports the addition of public IP addresses with enhanced protection.
	SecurityProtectionTypes []string `pulumi:"securityProtectionTypes"`
	// Tags.
	Tags []BandwidthPackageTag `pulumi:"tags"`
}

type BandwidthPackageState struct {
	// Bandwidth upper limit of shared bandwidth package, unit: Mbps. When BillingType is set to PrePaid: the value range is 5 to 5000. When BillingType is set to PostPaidByBandwidth: the value range is 2 to 5000. When BillingType is set to PostPaidByTraffic: the value range is 2 to 2000. When BillingType is set to PayBy95Peak: the value range is 2 to 5000.
	Bandwidth pulumi.IntPtrInput
	// The name of the bandwidth package.
	BandwidthPackageName pulumi.StringPtrInput
	// BillingType of the bandwidth package. Valid values: `PrePaid`, `PostPaidByBandwidth`(Default), `PostPaidByTraffic`, `PayBy95Peak`. The billing method of IPv6 does not include `PrePaid`, and the billing method is only based on the `PostPaidByBandwidth`.
	BillingType pulumi.StringPtrInput
	// The description of the bandwidth package.
	Description pulumi.StringPtrInput
	// Route type, default to BGP.
	Isp pulumi.StringPtrInput
	// Duration of purchasing shared bandwidth package on an annual or monthly basis. The valid value range in 1~9 or 12, 24 or 36. Default value is 1. The period unit defaults to `Month`.
	Period pulumi.IntPtrInput
	// The project name of the bandwidth package.
	ProjectName pulumi.StringPtrInput
	// The IP protocol values for shared bandwidth packages are as follows: `IPv4`: IPv4 protocol. `IPv6`: IPv6 protocol.
	Protocol pulumi.StringPtrInput
	// Security protection types for shared bandwidth packages. Parameter - N: Indicates the number of security protection types, currently only supports taking 1. Value: `AntiDDoS_Enhanced` or left blank.If the value is `AntiDDoS_Enhanced`, then will create a shared bandwidth package with enhanced protection, which supports adding basic protection type public IP addresses.If left blank, it indicates a shared bandwidth package with basic protection, which supports the addition of public IP addresses with enhanced protection.
	SecurityProtectionTypes pulumi.StringArrayInput
	// Tags.
	Tags BandwidthPackageTagArrayInput
}

func (BandwidthPackageState) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthPackageState)(nil)).Elem()
}

type bandwidthPackageArgs struct {
	// Bandwidth upper limit of shared bandwidth package, unit: Mbps. When BillingType is set to PrePaid: the value range is 5 to 5000. When BillingType is set to PostPaidByBandwidth: the value range is 2 to 5000. When BillingType is set to PostPaidByTraffic: the value range is 2 to 2000. When BillingType is set to PayBy95Peak: the value range is 2 to 5000.
	Bandwidth int `pulumi:"bandwidth"`
	// The name of the bandwidth package.
	BandwidthPackageName *string `pulumi:"bandwidthPackageName"`
	// BillingType of the bandwidth package. Valid values: `PrePaid`, `PostPaidByBandwidth`(Default), `PostPaidByTraffic`, `PayBy95Peak`. The billing method of IPv6 does not include `PrePaid`, and the billing method is only based on the `PostPaidByBandwidth`.
	BillingType *string `pulumi:"billingType"`
	// The description of the bandwidth package.
	Description *string `pulumi:"description"`
	// Route type, default to BGP.
	Isp *string `pulumi:"isp"`
	// Duration of purchasing shared bandwidth package on an annual or monthly basis. The valid value range in 1~9 or 12, 24 or 36. Default value is 1. The period unit defaults to `Month`.
	Period *int `pulumi:"period"`
	// The project name of the bandwidth package.
	ProjectName *string `pulumi:"projectName"`
	// The IP protocol values for shared bandwidth packages are as follows: `IPv4`: IPv4 protocol. `IPv6`: IPv6 protocol.
	Protocol *string `pulumi:"protocol"`
	// Security protection types for shared bandwidth packages. Parameter - N: Indicates the number of security protection types, currently only supports taking 1. Value: `AntiDDoS_Enhanced` or left blank.If the value is `AntiDDoS_Enhanced`, then will create a shared bandwidth package with enhanced protection, which supports adding basic protection type public IP addresses.If left blank, it indicates a shared bandwidth package with basic protection, which supports the addition of public IP addresses with enhanced protection.
	SecurityProtectionTypes []string `pulumi:"securityProtectionTypes"`
	// Tags.
	Tags []BandwidthPackageTag `pulumi:"tags"`
}

// The set of arguments for constructing a BandwidthPackage resource.
type BandwidthPackageArgs struct {
	// Bandwidth upper limit of shared bandwidth package, unit: Mbps. When BillingType is set to PrePaid: the value range is 5 to 5000. When BillingType is set to PostPaidByBandwidth: the value range is 2 to 5000. When BillingType is set to PostPaidByTraffic: the value range is 2 to 2000. When BillingType is set to PayBy95Peak: the value range is 2 to 5000.
	Bandwidth pulumi.IntInput
	// The name of the bandwidth package.
	BandwidthPackageName pulumi.StringPtrInput
	// BillingType of the bandwidth package. Valid values: `PrePaid`, `PostPaidByBandwidth`(Default), `PostPaidByTraffic`, `PayBy95Peak`. The billing method of IPv6 does not include `PrePaid`, and the billing method is only based on the `PostPaidByBandwidth`.
	BillingType pulumi.StringPtrInput
	// The description of the bandwidth package.
	Description pulumi.StringPtrInput
	// Route type, default to BGP.
	Isp pulumi.StringPtrInput
	// Duration of purchasing shared bandwidth package on an annual or monthly basis. The valid value range in 1~9 or 12, 24 or 36. Default value is 1. The period unit defaults to `Month`.
	Period pulumi.IntPtrInput
	// The project name of the bandwidth package.
	ProjectName pulumi.StringPtrInput
	// The IP protocol values for shared bandwidth packages are as follows: `IPv4`: IPv4 protocol. `IPv6`: IPv6 protocol.
	Protocol pulumi.StringPtrInput
	// Security protection types for shared bandwidth packages. Parameter - N: Indicates the number of security protection types, currently only supports taking 1. Value: `AntiDDoS_Enhanced` or left blank.If the value is `AntiDDoS_Enhanced`, then will create a shared bandwidth package with enhanced protection, which supports adding basic protection type public IP addresses.If left blank, it indicates a shared bandwidth package with basic protection, which supports the addition of public IP addresses with enhanced protection.
	SecurityProtectionTypes pulumi.StringArrayInput
	// Tags.
	Tags BandwidthPackageTagArrayInput
}

func (BandwidthPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthPackageArgs)(nil)).Elem()
}

type BandwidthPackageInput interface {
	pulumi.Input

	ToBandwidthPackageOutput() BandwidthPackageOutput
	ToBandwidthPackageOutputWithContext(ctx context.Context) BandwidthPackageOutput
}

func (*BandwidthPackage) ElementType() reflect.Type {
	return reflect.TypeOf((**BandwidthPackage)(nil)).Elem()
}

func (i *BandwidthPackage) ToBandwidthPackageOutput() BandwidthPackageOutput {
	return i.ToBandwidthPackageOutputWithContext(context.Background())
}

func (i *BandwidthPackage) ToBandwidthPackageOutputWithContext(ctx context.Context) BandwidthPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageOutput)
}

// BandwidthPackageArrayInput is an input type that accepts BandwidthPackageArray and BandwidthPackageArrayOutput values.
// You can construct a concrete instance of `BandwidthPackageArrayInput` via:
//
//	BandwidthPackageArray{ BandwidthPackageArgs{...} }
type BandwidthPackageArrayInput interface {
	pulumi.Input

	ToBandwidthPackageArrayOutput() BandwidthPackageArrayOutput
	ToBandwidthPackageArrayOutputWithContext(context.Context) BandwidthPackageArrayOutput
}

type BandwidthPackageArray []BandwidthPackageInput

func (BandwidthPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BandwidthPackage)(nil)).Elem()
}

func (i BandwidthPackageArray) ToBandwidthPackageArrayOutput() BandwidthPackageArrayOutput {
	return i.ToBandwidthPackageArrayOutputWithContext(context.Background())
}

func (i BandwidthPackageArray) ToBandwidthPackageArrayOutputWithContext(ctx context.Context) BandwidthPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageArrayOutput)
}

// BandwidthPackageMapInput is an input type that accepts BandwidthPackageMap and BandwidthPackageMapOutput values.
// You can construct a concrete instance of `BandwidthPackageMapInput` via:
//
//	BandwidthPackageMap{ "key": BandwidthPackageArgs{...} }
type BandwidthPackageMapInput interface {
	pulumi.Input

	ToBandwidthPackageMapOutput() BandwidthPackageMapOutput
	ToBandwidthPackageMapOutputWithContext(context.Context) BandwidthPackageMapOutput
}

type BandwidthPackageMap map[string]BandwidthPackageInput

func (BandwidthPackageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BandwidthPackage)(nil)).Elem()
}

func (i BandwidthPackageMap) ToBandwidthPackageMapOutput() BandwidthPackageMapOutput {
	return i.ToBandwidthPackageMapOutputWithContext(context.Background())
}

func (i BandwidthPackageMap) ToBandwidthPackageMapOutputWithContext(ctx context.Context) BandwidthPackageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageMapOutput)
}

type BandwidthPackageOutput struct{ *pulumi.OutputState }

func (BandwidthPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BandwidthPackage)(nil)).Elem()
}

func (o BandwidthPackageOutput) ToBandwidthPackageOutput() BandwidthPackageOutput {
	return o
}

func (o BandwidthPackageOutput) ToBandwidthPackageOutputWithContext(ctx context.Context) BandwidthPackageOutput {
	return o
}

// Bandwidth upper limit of shared bandwidth package, unit: Mbps. When BillingType is set to PrePaid: the value range is 5 to 5000. When BillingType is set to PostPaidByBandwidth: the value range is 2 to 5000. When BillingType is set to PostPaidByTraffic: the value range is 2 to 2000. When BillingType is set to PayBy95Peak: the value range is 2 to 5000.
func (o BandwidthPackageOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *BandwidthPackage) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// The name of the bandwidth package.
func (o BandwidthPackageOutput) BandwidthPackageName() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPackage) pulumi.StringOutput { return v.BandwidthPackageName }).(pulumi.StringOutput)
}

// BillingType of the bandwidth package. Valid values: `PrePaid`, `PostPaidByBandwidth`(Default), `PostPaidByTraffic`, `PayBy95Peak`. The billing method of IPv6 does not include `PrePaid`, and the billing method is only based on the `PostPaidByBandwidth`.
func (o BandwidthPackageOutput) BillingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BandwidthPackage) pulumi.StringPtrOutput { return v.BillingType }).(pulumi.StringPtrOutput)
}

// The description of the bandwidth package.
func (o BandwidthPackageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPackage) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Route type, default to BGP.
func (o BandwidthPackageOutput) Isp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BandwidthPackage) pulumi.StringPtrOutput { return v.Isp }).(pulumi.StringPtrOutput)
}

// Duration of purchasing shared bandwidth package on an annual or monthly basis. The valid value range in 1~9 or 12, 24 or 36. Default value is 1. The period unit defaults to `Month`.
func (o BandwidthPackageOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BandwidthPackage) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// The project name of the bandwidth package.
func (o BandwidthPackageOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPackage) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The IP protocol values for shared bandwidth packages are as follows: `IPv4`: IPv4 protocol. `IPv6`: IPv6 protocol.
func (o BandwidthPackageOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPackage) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Security protection types for shared bandwidth packages. Parameter - N: Indicates the number of security protection types, currently only supports taking 1. Value: `AntiDDoS_Enhanced` or left blank.If the value is `AntiDDoS_Enhanced`, then will create a shared bandwidth package with enhanced protection, which supports adding basic protection type public IP addresses.If left blank, it indicates a shared bandwidth package with basic protection, which supports the addition of public IP addresses with enhanced protection.
func (o BandwidthPackageOutput) SecurityProtectionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BandwidthPackage) pulumi.StringArrayOutput { return v.SecurityProtectionTypes }).(pulumi.StringArrayOutput)
}

// Tags.
func (o BandwidthPackageOutput) Tags() BandwidthPackageTagArrayOutput {
	return o.ApplyT(func(v *BandwidthPackage) BandwidthPackageTagArrayOutput { return v.Tags }).(BandwidthPackageTagArrayOutput)
}

type BandwidthPackageArrayOutput struct{ *pulumi.OutputState }

func (BandwidthPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BandwidthPackage)(nil)).Elem()
}

func (o BandwidthPackageArrayOutput) ToBandwidthPackageArrayOutput() BandwidthPackageArrayOutput {
	return o
}

func (o BandwidthPackageArrayOutput) ToBandwidthPackageArrayOutputWithContext(ctx context.Context) BandwidthPackageArrayOutput {
	return o
}

func (o BandwidthPackageArrayOutput) Index(i pulumi.IntInput) BandwidthPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BandwidthPackage {
		return vs[0].([]*BandwidthPackage)[vs[1].(int)]
	}).(BandwidthPackageOutput)
}

type BandwidthPackageMapOutput struct{ *pulumi.OutputState }

func (BandwidthPackageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BandwidthPackage)(nil)).Elem()
}

func (o BandwidthPackageMapOutput) ToBandwidthPackageMapOutput() BandwidthPackageMapOutput {
	return o
}

func (o BandwidthPackageMapOutput) ToBandwidthPackageMapOutputWithContext(ctx context.Context) BandwidthPackageMapOutput {
	return o
}

func (o BandwidthPackageMapOutput) MapIndex(k pulumi.StringInput) BandwidthPackageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BandwidthPackage {
		return vs[0].(map[string]*BandwidthPackage)[vs[1].(string)]
	}).(BandwidthPackageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageInput)(nil)).Elem(), &BandwidthPackage{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageArrayInput)(nil)).Elem(), BandwidthPackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageMapInput)(nil)).Elem(), BandwidthPackageMap{})
	pulumi.RegisterOutputType(BandwidthPackageOutput{})
	pulumi.RegisterOutputType(BandwidthPackageArrayOutput{})
	pulumi.RegisterOutputType(BandwidthPackageMapOutput{})
}
