// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vke

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vke nodes
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooZones, err := ecs.GetZones(ctx, nil, nil);
// if err != nil {
// return err
// }
// fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
// VpcName: pulumi.String("acc-test-vpc"),
// CidrBlock: pulumi.String("172.16.0.0/16"),
// })
// if err != nil {
// return err
// }
// fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
// SubnetName: pulumi.String("acc-test-subnet"),
// CidrBlock: pulumi.String("172.16.0.0/24"),
// ZoneId: pulumi.String(fooZones.Zones[0].Id),
// VpcId: fooVpc.ID(),
// })
// if err != nil {
// return err
// }
// fooSecurityGroup, err := vpc.NewSecurityGroup(ctx, "fooSecurityGroup", &vpc.SecurityGroupArgs{
// SecurityGroupName: pulumi.String("acc-test-security-group"),
// VpcId: fooVpc.ID(),
// })
// if err != nil {
// return err
// }
// fooImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
// NameRegex: pulumi.StringRef("veLinux 1.0 CentOS兼容版 64位"),
// }, nil);
// if err != nil {
// return err
// }
// fooCluster, err := vke.NewCluster(ctx, "fooCluster", &vke.ClusterArgs{
// Description: pulumi.String("created by terraform"),
// DeleteProtectionEnabled: pulumi.Bool(false),
// ClusterConfig: &vke.ClusterClusterConfigArgs{
// SubnetIds: pulumi.StringArray{
// fooSubnet.ID(),
// },
// ApiServerPublicAccessEnabled: pulumi.Bool(true),
// ApiServerPublicAccessConfig: &vke.ClusterClusterConfigApiServerPublicAccessConfigArgs{
// PublicAccessNetworkConfig: &vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs{
// BillingType: pulumi.String("PostPaidByBandwidth"),
// Bandwidth: pulumi.Int(1),
// },
// },
// ResourcePublicAccessDefaultEnabled: pulumi.Bool(true),
// },
// PodsConfig: &vke.ClusterPodsConfigArgs{
// PodNetworkMode: pulumi.String("VpcCniShared"),
// VpcCniConfig: &vke.ClusterPodsConfigVpcCniConfigArgs{
// SubnetIds: pulumi.StringArray{
// fooSubnet.ID(),
// },
// },
// },
// ServicesConfig: &vke.ClusterServicesConfigArgs{
// ServiceCidrsv4s: pulumi.StringArray{
// pulumi.String("172.30.0.0/18"),
// },
// },
// Tags: vke.ClusterTagArray{
// &vke.ClusterTagArgs{
// Key: pulumi.String("tf-k1"),
// Value: pulumi.String("tf-v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooNodePool, err := vke.NewNodePool(ctx, "fooNodePool", &vke.NodePoolArgs{
// ClusterId: fooCluster.ID(),
// AutoScaling: &vke.NodePoolAutoScalingArgs{
// Enabled: pulumi.Bool(false),
// },
// NodeConfig: &vke.NodePoolNodeConfigArgs{
// InstanceTypeIds: pulumi.StringArray{
// pulumi.String("ecs.g1ie.xlarge"),
// },
// SubnetIds: pulumi.StringArray{
// fooSubnet.ID(),
// },
// ImageId: "TODO: For expression"[0],
// SystemVolume: &vke.NodePoolNodeConfigSystemVolumeArgs{
// Type: pulumi.String("ESSD_PL0"),
// Size: pulumi.Int(50),
// },
// DataVolumes: vke.NodePoolNodeConfigDataVolumeArray{
// &vke.NodePoolNodeConfigDataVolumeArgs{
// Type: pulumi.String("ESSD_PL0"),
// Size: pulumi.Int(50),
// MountPoint: pulumi.String("/tf"),
// },
// },
// InitializeScript: pulumi.String("ZWNobyBoZWxsbyB0ZXJyYWZvcm0h"),
// Security: &vke.NodePoolNodeConfigSecurityArgs{
// Login: &vke.NodePoolNodeConfigSecurityLoginArgs{
// Password: pulumi.String("UHdkMTIzNDU2"),
// },
// SecurityStrategies: pulumi.StringArray{
// pulumi.String("Hids"),
// },
// SecurityGroupIds: pulumi.StringArray{
// fooSecurityGroup.ID(),
// },
// },
// AdditionalContainerStorageEnabled: pulumi.Bool(true),
// InstanceChargeType: pulumi.String("PostPaid"),
// NamePrefix: pulumi.String("acc-test"),
// EcsTags: vke.NodePoolNodeConfigEcsTagArray{
// &vke.NodePoolNodeConfigEcsTagArgs{
// Key: pulumi.String("ecs_k1"),
// Value: pulumi.String("ecs_v1"),
// },
// },
// },
// KubernetesConfig: &vke.NodePoolKubernetesConfigArgs{
// Labels: vke.NodePoolKubernetesConfigLabelArray{
// &vke.NodePoolKubernetesConfigLabelArgs{
// Key: pulumi.String("label1"),
// Value: pulumi.String("value1"),
// },
// },
// Taints: vke.NodePoolKubernetesConfigTaintArray{
// &vke.NodePoolKubernetesConfigTaintArgs{
// Key: pulumi.String("taint-key/node-type"),
// Value: pulumi.String("taint-value"),
// Effect: pulumi.String("NoSchedule"),
// },
// },
// Cordon: pulumi.Bool(true),
// },
// Tags: vke.NodePoolTagArray{
// &vke.NodePoolTagArgs{
// Key: pulumi.String("node-pool-k1"),
// Value: pulumi.String("node-pool-v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// var fooInstance []*ecs.Instance
//
//	for index := 0; index < 2; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := ecs.NewInstance(ctx, fmt.Sprintf("fooInstance-%v", key0), &ecs.InstanceArgs{
// InstanceName: pulumi.String(fmt.Sprintf("acc-test-ecs-%v", val0)),
// HostName: pulumi.String("tf-acc-test"),
// ImageId: "TODO: For expression"[0],
// InstanceType: pulumi.String("ecs.g1ie.xlarge"),
// Password: pulumi.String("93f0cb0614Aab12"),
// InstanceChargeType: pulumi.String("PostPaid"),
// SystemVolumeType: pulumi.String("ESSD_PL0"),
// SystemVolumeSize: pulumi.Int(50),
// DataVolumes: ecs.InstanceDataVolumeArray{
// &ecs.InstanceDataVolumeArgs{
// VolumeType: pulumi.String("ESSD_PL0"),
// Size: pulumi.Int(50),
// DeleteWithInstance: pulumi.Bool(true),
// },
// },
// SubnetId: fooSubnet.ID(),
// SecurityGroupIds: pulumi.StringArray{
// fooSecurityGroup.ID(),
// },
// ProjectName: pulumi.String("default"),
// Tags: ecs.InstanceTagArray{
// &ecs.InstanceTagArgs{
// Key: pulumi.String("k1"),
// Value: pulumi.String("v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooInstance = append(fooInstance, __res)
// }
// var fooNode []*vke.Node
//
//	for index := 0; index < 2; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := vke.NewNode(ctx, fmt.Sprintf("fooNode-%v", key0), &vke.NodeArgs{
// ClusterId: fooCluster.ID(),
// InstanceId: fooInstance[val0].ID(),
// NodePoolId: fooNodePool.ID(),
// })
// if err != nil {
// return err
// }
// fooNode = append(fooNode, __res)
// }
// _ = vke.GetNodesOutput(ctx, vke.GetNodesOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:vke-getNodes:getNodes.pp:134,9-22),
// }, nil);
// return nil
// })
// }
// ```
func GetNodes(ctx *pulumi.Context, args *GetNodesArgs, opts ...pulumi.InvokeOption) (*GetNodesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNodesResult
	err := ctx.Invoke("volcengine:vke/getNodes:getNodes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNodes.
type GetNodesArgs struct {
	// A list of Cluster IDs.
	ClusterIds []string `pulumi:"clusterIds"`
	// The Create Client Token.
	CreateClientToken *string `pulumi:"createClientToken"`
	// A list of Node IDs.
	Ids []string `pulumi:"ids"`
	// The Name of Node.
	Name *string `pulumi:"name"`
	// A Name Regex of Node.
	NameRegex *string `pulumi:"nameRegex"`
	// The Node Pool IDs.
	NodePoolIds []string `pulumi:"nodePoolIds"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The Status of filter.
	Statuses []GetNodesStatus `pulumi:"statuses"`
	// The Zone IDs.
	ZoneIds []string `pulumi:"zoneIds"`
}

// A collection of values returned by getNodes.
type GetNodesResult struct {
	ClusterIds []string `pulumi:"clusterIds"`
	// The create client token of node.
	CreateClientToken *string `pulumi:"createClientToken"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The name of Node.
	Name        *string  `pulumi:"name"`
	NameRegex   *string  `pulumi:"nameRegex"`
	NodePoolIds []string `pulumi:"nodePoolIds"`
	// The collection of Node query.
	Nodes      []GetNodesNode   `pulumi:"nodes"`
	OutputFile *string          `pulumi:"outputFile"`
	Statuses   []GetNodesStatus `pulumi:"statuses"`
	// The total count of Node query.
	TotalCount int      `pulumi:"totalCount"`
	ZoneIds    []string `pulumi:"zoneIds"`
}

func GetNodesOutput(ctx *pulumi.Context, args GetNodesOutputArgs, opts ...pulumi.InvokeOption) GetNodesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNodesResult, error) {
			args := v.(GetNodesArgs)
			r, err := GetNodes(ctx, &args, opts...)
			var s GetNodesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNodesResultOutput)
}

// A collection of arguments for invoking getNodes.
type GetNodesOutputArgs struct {
	// A list of Cluster IDs.
	ClusterIds pulumi.StringArrayInput `pulumi:"clusterIds"`
	// The Create Client Token.
	CreateClientToken pulumi.StringPtrInput `pulumi:"createClientToken"`
	// A list of Node IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The Name of Node.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A Name Regex of Node.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The Node Pool IDs.
	NodePoolIds pulumi.StringArrayInput `pulumi:"nodePoolIds"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The Status of filter.
	Statuses GetNodesStatusArrayInput `pulumi:"statuses"`
	// The Zone IDs.
	ZoneIds pulumi.StringArrayInput `pulumi:"zoneIds"`
}

func (GetNodesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesArgs)(nil)).Elem()
}

// A collection of values returned by getNodes.
type GetNodesResultOutput struct{ *pulumi.OutputState }

func (GetNodesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesResult)(nil)).Elem()
}

func (o GetNodesResultOutput) ToGetNodesResultOutput() GetNodesResultOutput {
	return o
}

func (o GetNodesResultOutput) ToGetNodesResultOutputWithContext(ctx context.Context) GetNodesResultOutput {
	return o
}

func (o GetNodesResultOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNodesResult) []string { return v.ClusterIds }).(pulumi.StringArrayOutput)
}

// The create client token of node.
func (o GetNodesResultOutput) CreateClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesResult) *string { return v.CreateClientToken }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNodesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNodesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNodesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of Node.
func (o GetNodesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetNodesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetNodesResultOutput) NodePoolIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNodesResult) []string { return v.NodePoolIds }).(pulumi.StringArrayOutput)
}

// The collection of Node query.
func (o GetNodesResultOutput) Nodes() GetNodesNodeArrayOutput {
	return o.ApplyT(func(v GetNodesResult) []GetNodesNode { return v.Nodes }).(GetNodesNodeArrayOutput)
}

func (o GetNodesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetNodesResultOutput) Statuses() GetNodesStatusArrayOutput {
	return o.ApplyT(func(v GetNodesResult) []GetNodesStatus { return v.Statuses }).(GetNodesStatusArrayOutput)
}

// The total count of Node query.
func (o GetNodesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o GetNodesResultOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNodesResult) []string { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNodesResultOutput{})
}
